var dC = Object.getPrototypeOf;
var fC = Reflect.get;
var on = (t, e, r) => fC(dC(t), r, e);
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const vl = globalThis, Eh = vl.ShadowRoot && (vl.ShadyCSS === void 0 || vl.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype, vh = Symbol(), xm = /* @__PURE__ */ new WeakMap();
let Qv = class {
  constructor(e, r, n) {
    if (this._$cssResult$ = !0, n !== vh)
      throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = e, this.t = r;
  }
  get styleSheet() {
    let e = this.o;
    const r = this.t;
    if (Eh && e === void 0) {
      const n = r !== void 0 && r.length === 1;
      n && (e = xm.get(r)), e === void 0 && ((this.o = e = new CSSStyleSheet()).replaceSync(this.cssText), n && xm.set(r, e));
    }
    return e;
  }
  toString() {
    return this.cssText;
  }
};
const jr = (t) => new Qv(typeof t == "string" ? t : t + "", void 0, vh), Kt = (t, ...e) => {
  const r = t.length === 1 ? t[0] : e.reduce((n, i, s) => n + ((o) => {
    if (o._$cssResult$ === !0)
      return o.cssText;
    if (typeof o == "number")
      return o;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + o + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(i) + t[s + 1], t[0]);
  return new Qv(r, t, vh);
}, pC = (t, e) => {
  if (Eh)
    t.adoptedStyleSheets = e.map((r) => r instanceof CSSStyleSheet ? r : r.styleSheet);
  else
    for (const r of e) {
      const n = document.createElement("style"), i = vl.litNonce;
      i !== void 0 && n.setAttribute("nonce", i), n.textContent = r.cssText, t.appendChild(n);
    }
}, Nm = Eh ? (t) => t : (t) => t instanceof CSSStyleSheet ? ((e) => {
  let r = "";
  for (const n of e.cssRules)
    r += n.cssText;
  return jr(r);
})(t) : t;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const { is: _C, defineProperty: hC, getOwnPropertyDescriptor: mC, getOwnPropertyNames: gC, getOwnPropertySymbols: $C, getPrototypeOf: bC } = Object, Oi = globalThis, km = Oi.trustedTypes, EC = km ? km.emptyScript : "", Uc = Oi.reactiveElementPolyfillSupport, Do = (t, e) => t, Ws = { toAttribute(t, e) {
  switch (e) {
    case Boolean:
      t = t ? EC : null;
      break;
    case Object:
    case Array:
      t = t == null ? t : JSON.stringify(t);
  }
  return t;
}, fromAttribute(t, e) {
  let r = t;
  switch (e) {
    case Boolean:
      r = t !== null;
      break;
    case Number:
      r = t === null ? null : Number(t);
      break;
    case Object:
    case Array:
      try {
        r = JSON.parse(t);
      } catch {
        r = null;
      }
  }
  return r;
} }, Sh = (t, e) => !_C(t, e), Im = { attribute: !0, type: String, converter: Ws, reflect: !1, hasChanged: Sh };
Symbol.metadata ?? (Symbol.metadata = Symbol("metadata")), Oi.litPropertyMetadata ?? (Oi.litPropertyMetadata = /* @__PURE__ */ new WeakMap());
let ks = class extends HTMLElement {
  static addInitializer(e) {
    this._$Ei(), (this.l ?? (this.l = [])).push(e);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(e, r = Im) {
    if (r.state && (r.attribute = !1), this._$Ei(), this.elementProperties.set(e, r), !r.noAccessor) {
      const n = Symbol(), i = this.getPropertyDescriptor(e, n, r);
      i !== void 0 && hC(this.prototype, e, i);
    }
  }
  static getPropertyDescriptor(e, r, n) {
    const { get: i, set: s } = mC(this.prototype, e) ?? { get() {
      return this[r];
    }, set(o) {
      this[r] = o;
    } };
    return { get() {
      return i == null ? void 0 : i.call(this);
    }, set(o) {
      const a = i == null ? void 0 : i.call(this);
      s.call(this, o), this.requestUpdate(e, a, n);
    }, configurable: !0, enumerable: !0 };
  }
  static getPropertyOptions(e) {
    return this.elementProperties.get(e) ?? Im;
  }
  static _$Ei() {
    if (this.hasOwnProperty(Do("elementProperties")))
      return;
    const e = bC(this);
    e.finalize(), e.l !== void 0 && (this.l = [...e.l]), this.elementProperties = new Map(e.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(Do("finalized")))
      return;
    if (this.finalized = !0, this._$Ei(), this.hasOwnProperty(Do("properties"))) {
      const r = this.properties, n = [...gC(r), ...$C(r)];
      for (const i of n)
        this.createProperty(i, r[i]);
    }
    const e = this[Symbol.metadata];
    if (e !== null) {
      const r = litPropertyMetadata.get(e);
      if (r !== void 0)
        for (const [n, i] of r)
          this.elementProperties.set(n, i);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [r, n] of this.elementProperties) {
      const i = this._$Eu(r, n);
      i !== void 0 && this._$Eh.set(i, r);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(e) {
    const r = [];
    if (Array.isArray(e)) {
      const n = new Set(e.flat(1 / 0).reverse());
      for (const i of n)
        r.unshift(Nm(i));
    } else
      e !== void 0 && r.push(Nm(e));
    return r;
  }
  static _$Eu(e, r) {
    const n = r.attribute;
    return n === !1 ? void 0 : typeof n == "string" ? n : typeof e == "string" ? e.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    var e;
    this._$Eg = new Promise((r) => this.enableUpdating = r), this._$AL = /* @__PURE__ */ new Map(), this._$ES(), this.requestUpdate(), (e = this.constructor.l) == null || e.forEach((r) => r(this));
  }
  addController(e) {
    var r;
    (this._$E_ ?? (this._$E_ = /* @__PURE__ */ new Set())).add(e), this.renderRoot !== void 0 && this.isConnected && ((r = e.hostConnected) == null || r.call(e));
  }
  removeController(e) {
    var r;
    (r = this._$E_) == null || r.delete(e);
  }
  _$ES() {
    const e = /* @__PURE__ */ new Map(), r = this.constructor.elementProperties;
    for (const n of r.keys())
      this.hasOwnProperty(n) && (e.set(n, this[n]), delete this[n]);
    e.size > 0 && (this._$Ep = e);
  }
  createRenderRoot() {
    const e = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return pC(e, this.constructor.elementStyles), e;
  }
  connectedCallback() {
    var e;
    this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this.enableUpdating(!0), (e = this._$E_) == null || e.forEach((r) => {
      var n;
      return (n = r.hostConnected) == null ? void 0 : n.call(r);
    });
  }
  enableUpdating(e) {
  }
  disconnectedCallback() {
    var e;
    (e = this._$E_) == null || e.forEach((r) => {
      var n;
      return (n = r.hostDisconnected) == null ? void 0 : n.call(r);
    });
  }
  attributeChangedCallback(e, r, n) {
    this._$AK(e, n);
  }
  _$EO(e, r) {
    var s;
    const n = this.constructor.elementProperties.get(e), i = this.constructor._$Eu(e, n);
    if (i !== void 0 && n.reflect === !0) {
      const o = (((s = n.converter) == null ? void 0 : s.toAttribute) !== void 0 ? n.converter : Ws).toAttribute(r, n.type);
      this._$Em = e, o == null ? this.removeAttribute(i) : this.setAttribute(i, o), this._$Em = null;
    }
  }
  _$AK(e, r) {
    var s;
    const n = this.constructor, i = n._$Eh.get(e);
    if (i !== void 0 && this._$Em !== i) {
      const o = n.getPropertyOptions(i), a = typeof o.converter == "function" ? { fromAttribute: o.converter } : ((s = o.converter) == null ? void 0 : s.fromAttribute) !== void 0 ? o.converter : Ws;
      this._$Em = i, this[i] = a.fromAttribute(r, o.type), this._$Em = null;
    }
  }
  requestUpdate(e, r, n) {
    if (e !== void 0) {
      if (n ?? (n = this.constructor.getPropertyOptions(e)), !(n.hasChanged ?? Sh)(this[e], r))
        return;
      this.C(e, r, n);
    }
    this.isUpdatePending === !1 && (this._$Eg = this._$EP());
  }
  C(e, r, n) {
    this._$AL.has(e) || this._$AL.set(e, r), n.reflect === !0 && this._$Em !== e && (this._$ET ?? (this._$ET = /* @__PURE__ */ new Set())).add(e);
  }
  async _$EP() {
    this.isUpdatePending = !0;
    try {
      await this._$Eg;
    } catch (r) {
      Promise.reject(r);
    }
    const e = this.scheduleUpdate();
    return e != null && await e, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    var n;
    if (!this.isUpdatePending)
      return;
    if (!this.hasUpdated) {
      if (this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this._$Ep) {
        for (const [s, o] of this._$Ep)
          this[s] = o;
        this._$Ep = void 0;
      }
      const i = this.constructor.elementProperties;
      if (i.size > 0)
        for (const [s, o] of i)
          o.wrapped !== !0 || this._$AL.has(s) || this[s] === void 0 || this.C(s, this[s], o);
    }
    let e = !1;
    const r = this._$AL;
    try {
      e = this.shouldUpdate(r), e ? (this.willUpdate(r), (n = this._$E_) == null || n.forEach((i) => {
        var s;
        return (s = i.hostUpdate) == null ? void 0 : s.call(i);
      }), this.update(r)) : this._$Ej();
    } catch (i) {
      throw e = !1, this._$Ej(), i;
    }
    e && this._$AE(r);
  }
  willUpdate(e) {
  }
  _$AE(e) {
    var r;
    (r = this._$E_) == null || r.forEach((n) => {
      var i;
      return (i = n.hostUpdated) == null ? void 0 : i.call(n);
    }), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(e)), this.updated(e);
  }
  _$Ej() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = !1;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$Eg;
  }
  shouldUpdate(e) {
    return !0;
  }
  update(e) {
    this._$ET && (this._$ET = this._$ET.forEach((r) => this._$EO(r, this[r]))), this._$Ej();
  }
  updated(e) {
  }
  firstUpdated(e) {
  }
};
ks.elementStyles = [], ks.shadowRootOptions = { mode: "open" }, ks[Do("elementProperties")] = /* @__PURE__ */ new Map(), ks[Do("finalized")] = /* @__PURE__ */ new Map(), Uc == null || Uc({ ReactiveElement: ks }), (Oi.reactiveElementVersions ?? (Oi.reactiveElementVersions = [])).push("2.0.3");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Mo = globalThis, Ol = Mo.trustedTypes, Om = Ol ? Ol.createPolicy("lit-html", { createHTML: (t) => t }) : void 0, jv = "$lit$", Ti = `lit$${(Math.random() + "").slice(9)}$`, Xv = "?" + Ti, vC = `<${Xv}>`, _s = document, Jo = () => _s.createComment(""), ea = (t) => t === null || typeof t != "object" && typeof t != "function", Zv = Array.isArray, SC = (t) => Zv(t) || typeof (t == null ? void 0 : t[Symbol.iterator]) == "function", qc = `[ 	
\f\r]`, ho = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g, Dm = /-->/g, Mm = />/g, ns = RegExp(`>|${qc}(?:([^\\s"'>=/]+)(${qc}*=${qc}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g"), Lm = /'/g, Pm = /"/g, Jv = /^(?:script|style|textarea|title)$/i, eS = (t) => (e, ...r) => ({ _$litType$: t, strings: e, values: r }), Ct = eS(1), yC = eS(2), Sn = Symbol.for("lit-noChange"), ur = Symbol.for("lit-nothing"), Fm = /* @__PURE__ */ new WeakMap(), cs = _s.createTreeWalker(_s, 129);
function tS(t, e) {
  if (!Array.isArray(t) || !t.hasOwnProperty("raw"))
    throw Error("invalid template strings array");
  return Om !== void 0 ? Om.createHTML(e) : e;
}
const TC = (t, e) => {
  const r = t.length - 1, n = [];
  let i, s = e === 2 ? "<svg>" : "", o = ho;
  for (let a = 0; a < r; a++) {
    const l = t[a];
    let c, f, m = -1, b = 0;
    for (; b < l.length && (o.lastIndex = b, f = o.exec(l), f !== null); )
      b = o.lastIndex, o === ho ? f[1] === "!--" ? o = Dm : f[1] !== void 0 ? o = Mm : f[2] !== void 0 ? (Jv.test(f[2]) && (i = RegExp("</" + f[2], "g")), o = ns) : f[3] !== void 0 && (o = ns) : o === ns ? f[0] === ">" ? (o = i ?? ho, m = -1) : f[1] === void 0 ? m = -2 : (m = o.lastIndex - f[2].length, c = f[1], o = f[3] === void 0 ? ns : f[3] === '"' ? Pm : Lm) : o === Pm || o === Lm ? o = ns : o === Dm || o === Mm ? o = ho : (o = ns, i = void 0);
    const C = o === ns && t[a + 1].startsWith("/>") ? " " : "";
    s += o === ho ? l + vC : m >= 0 ? (n.push(c), l.slice(0, m) + jv + l.slice(m) + Ti + C) : l + Ti + (m === -2 ? a : C);
  }
  return [tS(t, s + (t[r] || "<?>") + (e === 2 ? "</svg>" : "")), n];
};
class ta {
  constructor({ strings: e, _$litType$: r }, n) {
    let i;
    this.parts = [];
    let s = 0, o = 0;
    const a = e.length - 1, l = this.parts, [c, f] = TC(e, r);
    if (this.el = ta.createElement(c, n), cs.currentNode = this.el.content, r === 2) {
      const m = this.el.content.firstChild;
      m.replaceWith(...m.childNodes);
    }
    for (; (i = cs.nextNode()) !== null && l.length < a; ) {
      if (i.nodeType === 1) {
        if (i.hasAttributes())
          for (const m of i.getAttributeNames())
            if (m.endsWith(jv)) {
              const b = f[o++], C = i.getAttribute(m).split(Ti), N = /([.?@])?(.*)/.exec(b);
              l.push({ type: 1, index: s, name: N[2], strings: C, ctor: N[1] === "." ? wC : N[1] === "?" ? AC : N[1] === "@" ? RC : pc }), i.removeAttribute(m);
            } else
              m.startsWith(Ti) && (l.push({ type: 6, index: s }), i.removeAttribute(m));
        if (Jv.test(i.tagName)) {
          const m = i.textContent.split(Ti), b = m.length - 1;
          if (b > 0) {
            i.textContent = Ol ? Ol.emptyScript : "";
            for (let C = 0; C < b; C++)
              i.append(m[C], Jo()), cs.nextNode(), l.push({ type: 2, index: ++s });
            i.append(m[b], Jo());
          }
        }
      } else if (i.nodeType === 8)
        if (i.data === Xv)
          l.push({ type: 2, index: s });
        else {
          let m = -1;
          for (; (m = i.data.indexOf(Ti, m + 1)) !== -1; )
            l.push({ type: 7, index: s }), m += Ti.length - 1;
        }
      s++;
    }
  }
  static createElement(e, r) {
    const n = _s.createElement("template");
    return n.innerHTML = e, n;
  }
}
function Ks(t, e, r = t, n) {
  var o, a;
  if (e === Sn)
    return e;
  let i = n !== void 0 ? (o = r._$Co) == null ? void 0 : o[n] : r._$Cl;
  const s = ea(e) ? void 0 : e._$litDirective$;
  return (i == null ? void 0 : i.constructor) !== s && ((a = i == null ? void 0 : i._$AO) == null || a.call(i, !1), s === void 0 ? i = void 0 : (i = new s(t), i._$AT(t, r, n)), n !== void 0 ? (r._$Co ?? (r._$Co = []))[n] = i : r._$Cl = i), i !== void 0 && (e = Ks(t, i._$AS(t, e.values), i, n)), e;
}
class CC {
  constructor(e, r) {
    this._$AV = [], this._$AN = void 0, this._$AD = e, this._$AM = r;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(e) {
    const { el: { content: r }, parts: n } = this._$AD, i = ((e == null ? void 0 : e.creationScope) ?? _s).importNode(r, !0);
    cs.currentNode = i;
    let s = cs.nextNode(), o = 0, a = 0, l = n[0];
    for (; l !== void 0; ) {
      if (o === l.index) {
        let c;
        l.type === 2 ? c = new wa(s, s.nextSibling, this, e) : l.type === 1 ? c = new l.ctor(s, l.name, l.strings, this, e) : l.type === 6 && (c = new xC(s, this, e)), this._$AV.push(c), l = n[++a];
      }
      o !== (l == null ? void 0 : l.index) && (s = cs.nextNode(), o++);
    }
    return cs.currentNode = _s, i;
  }
  p(e) {
    let r = 0;
    for (const n of this._$AV)
      n !== void 0 && (n.strings !== void 0 ? (n._$AI(e, n, r), r += n.strings.length - 2) : n._$AI(e[r])), r++;
  }
}
class wa {
  get _$AU() {
    var e;
    return ((e = this._$AM) == null ? void 0 : e._$AU) ?? this._$Cv;
  }
  constructor(e, r, n, i) {
    this.type = 2, this._$AH = ur, this._$AN = void 0, this._$AA = e, this._$AB = r, this._$AM = n, this.options = i, this._$Cv = (i == null ? void 0 : i.isConnected) ?? !0;
  }
  get parentNode() {
    let e = this._$AA.parentNode;
    const r = this._$AM;
    return r !== void 0 && (e == null ? void 0 : e.nodeType) === 11 && (e = r.parentNode), e;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(e, r = this) {
    e = Ks(this, e, r), ea(e) ? e === ur || e == null || e === "" ? (this._$AH !== ur && this._$AR(), this._$AH = ur) : e !== this._$AH && e !== Sn && this._(e) : e._$litType$ !== void 0 ? this.g(e) : e.nodeType !== void 0 ? this.$(e) : SC(e) ? this.T(e) : this._(e);
  }
  k(e) {
    return this._$AA.parentNode.insertBefore(e, this._$AB);
  }
  $(e) {
    this._$AH !== e && (this._$AR(), this._$AH = this.k(e));
  }
  _(e) {
    this._$AH !== ur && ea(this._$AH) ? this._$AA.nextSibling.data = e : this.$(_s.createTextNode(e)), this._$AH = e;
  }
  g(e) {
    var s;
    const { values: r, _$litType$: n } = e, i = typeof n == "number" ? this._$AC(e) : (n.el === void 0 && (n.el = ta.createElement(tS(n.h, n.h[0]), this.options)), n);
    if (((s = this._$AH) == null ? void 0 : s._$AD) === i)
      this._$AH.p(r);
    else {
      const o = new CC(i, this), a = o.u(this.options);
      o.p(r), this.$(a), this._$AH = o;
    }
  }
  _$AC(e) {
    let r = Fm.get(e.strings);
    return r === void 0 && Fm.set(e.strings, r = new ta(e)), r;
  }
  T(e) {
    Zv(this._$AH) || (this._$AH = [], this._$AR());
    const r = this._$AH;
    let n, i = 0;
    for (const s of e)
      i === r.length ? r.push(n = new wa(this.k(Jo()), this.k(Jo()), this, this.options)) : n = r[i], n._$AI(s), i++;
    i < r.length && (this._$AR(n && n._$AB.nextSibling, i), r.length = i);
  }
  _$AR(e = this._$AA.nextSibling, r) {
    var n;
    for ((n = this._$AP) == null ? void 0 : n.call(this, !1, !0, r); e && e !== this._$AB; ) {
      const i = e.nextSibling;
      e.remove(), e = i;
    }
  }
  setConnected(e) {
    var r;
    this._$AM === void 0 && (this._$Cv = e, (r = this._$AP) == null || r.call(this, e));
  }
}
class pc {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(e, r, n, i, s) {
    this.type = 1, this._$AH = ur, this._$AN = void 0, this.element = e, this.name = r, this._$AM = i, this.options = s, n.length > 2 || n[0] !== "" || n[1] !== "" ? (this._$AH = Array(n.length - 1).fill(new String()), this.strings = n) : this._$AH = ur;
  }
  _$AI(e, r = this, n, i) {
    const s = this.strings;
    let o = !1;
    if (s === void 0)
      e = Ks(this, e, r, 0), o = !ea(e) || e !== this._$AH && e !== Sn, o && (this._$AH = e);
    else {
      const a = e;
      let l, c;
      for (e = s[0], l = 0; l < s.length - 1; l++)
        c = Ks(this, a[n + l], r, l), c === Sn && (c = this._$AH[l]), o || (o = !ea(c) || c !== this._$AH[l]), c === ur ? e = ur : e !== ur && (e += (c ?? "") + s[l + 1]), this._$AH[l] = c;
    }
    o && !i && this.O(e);
  }
  O(e) {
    e === ur ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, e ?? "");
  }
}
class wC extends pc {
  constructor() {
    super(...arguments), this.type = 3;
  }
  O(e) {
    this.element[this.name] = e === ur ? void 0 : e;
  }
}
class AC extends pc {
  constructor() {
    super(...arguments), this.type = 4;
  }
  O(e) {
    this.element.toggleAttribute(this.name, !!e && e !== ur);
  }
}
class RC extends pc {
  constructor(e, r, n, i, s) {
    super(e, r, n, i, s), this.type = 5;
  }
  _$AI(e, r = this) {
    if ((e = Ks(this, e, r, 0) ?? ur) === Sn)
      return;
    const n = this._$AH, i = e === ur && n !== ur || e.capture !== n.capture || e.once !== n.once || e.passive !== n.passive, s = e !== ur && (n === ur || i);
    i && this.element.removeEventListener(this.name, this, n), s && this.element.addEventListener(this.name, this, e), this._$AH = e;
  }
  handleEvent(e) {
    var r;
    typeof this._$AH == "function" ? this._$AH.call(((r = this.options) == null ? void 0 : r.host) ?? this.element, e) : this._$AH.handleEvent(e);
  }
}
class xC {
  constructor(e, r, n) {
    this.element = e, this.type = 6, this._$AN = void 0, this._$AM = r, this.options = n;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(e) {
    Ks(this, e);
  }
}
const zc = Mo.litHtmlPolyfillSupport;
zc == null || zc(ta, wa), (Mo.litHtmlVersions ?? (Mo.litHtmlVersions = [])).push("3.1.1");
const NC = (t, e, r) => {
  const n = (r == null ? void 0 : r.renderBefore) ?? e;
  let i = n._$litPart$;
  if (i === void 0) {
    const s = (r == null ? void 0 : r.renderBefore) ?? null;
    n._$litPart$ = i = new wa(e.insertBefore(Jo(), s), s, void 0, r ?? {});
  }
  return i._$AI(t), i;
};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
let Fs = class extends ks {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    var r;
    const e = super.createRenderRoot();
    return (r = this.renderOptions).renderBefore ?? (r.renderBefore = e.firstChild), e;
  }
  update(e) {
    const r = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(e), this._$Do = NC(r, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    var e;
    super.connectedCallback(), (e = this._$Do) == null || e.setConnected(!0);
  }
  disconnectedCallback() {
    var e;
    super.disconnectedCallback(), (e = this._$Do) == null || e.setConnected(!1);
  }
  render() {
    return Sn;
  }
};
var Kv;
Fs._$litElement$ = !0, Fs.finalized = !0, (Kv = globalThis.litElementHydrateSupport) == null || Kv.call(globalThis, { LitElement: Fs });
const Gc = globalThis.litElementPolyfillSupport;
Gc == null || Gc({ LitElement: Fs });
(globalThis.litElementVersions ?? (globalThis.litElementVersions = [])).push("4.0.3");
var wr = Kt`
  :host {
    box-sizing: border-box;
  }

  :host *,
  :host *::before,
  :host *::after {
    box-sizing: inherit;
  }

  [hidden] {
    display: none !important;
  }
`, kC = Kt`
  ${wr}

  :host {
    --track-width: 2px;
    --track-color: rgb(128 128 128 / 25%);
    --indicator-color: var(--sl-color-primary-600);
    --speed: 2s;

    display: inline-flex;
    width: 1em;
    height: 1em;
  }

  .spinner {
    flex: 1 1 auto;
    height: 100%;
    width: 100%;
  }

  .spinner__track,
  .spinner__indicator {
    fill: none;
    stroke-width: var(--track-width);
    r: calc(0.5em - var(--track-width) / 2);
    cx: 0.5em;
    cy: 0.5em;
    transform-origin: 50% 50%;
  }

  .spinner__track {
    stroke: var(--track-color);
    transform-origin: 0% 0%;
  }

  .spinner__indicator {
    stroke: var(--indicator-color);
    stroke-linecap: round;
    stroke-dasharray: 150% 75%;
    animation: spin var(--speed) linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
      stroke-dasharray: 0.01em, 2.75em;
    }

    50% {
      transform: rotate(450deg);
      stroke-dasharray: 1.375em, 1.375em;
    }

    100% {
      transform: rotate(1080deg);
      stroke-dasharray: 0.01em, 2.75em;
    }
  }
`;
const a_ = /* @__PURE__ */ new Set(), IC = new MutationObserver(sS), Ds = /* @__PURE__ */ new Map();
let rS = document.documentElement.dir || "ltr", nS = document.documentElement.lang || navigator.language, ss;
IC.observe(document.documentElement, {
  attributes: !0,
  attributeFilter: ["dir", "lang"]
});
function iS(...t) {
  t.map((e) => {
    const r = e.$code.toLowerCase();
    Ds.has(r) ? Ds.set(r, Object.assign(Object.assign({}, Ds.get(r)), e)) : Ds.set(r, e), ss || (ss = e);
  }), sS();
}
function sS() {
  rS = document.documentElement.dir || "ltr", nS = document.documentElement.lang || navigator.language, [...a_.keys()].map((t) => {
    typeof t.requestUpdate == "function" && t.requestUpdate();
  });
}
let OC = class {
  constructor(e) {
    this.host = e, this.host.addController(this);
  }
  hostConnected() {
    a_.add(this.host);
  }
  hostDisconnected() {
    a_.delete(this.host);
  }
  dir() {
    return `${this.host.dir || rS}`.toLowerCase();
  }
  lang() {
    return `${this.host.lang || nS}`.toLowerCase();
  }
  getTranslationData(e) {
    var r, n;
    const i = new Intl.Locale(e.replace(/_/g, "-")), s = i == null ? void 0 : i.language.toLowerCase(), o = (n = (r = i == null ? void 0 : i.region) === null || r === void 0 ? void 0 : r.toLowerCase()) !== null && n !== void 0 ? n : "", a = Ds.get(`${s}-${o}`), l = Ds.get(s);
    return { locale: i, language: s, region: o, primary: a, secondary: l };
  }
  exists(e, r) {
    var n;
    const { primary: i, secondary: s } = this.getTranslationData((n = r.lang) !== null && n !== void 0 ? n : this.lang());
    return r = Object.assign({ includeFallback: !1 }, r), !!(i && i[e] || s && s[e] || r.includeFallback && ss && ss[e]);
  }
  term(e, ...r) {
    const { primary: n, secondary: i } = this.getTranslationData(this.lang());
    let s;
    if (n && n[e])
      s = n[e];
    else if (i && i[e])
      s = i[e];
    else if (ss && ss[e])
      s = ss[e];
    else
      return console.error(`No translation found for: ${String(e)}`), String(e);
    return typeof s == "function" ? s(...r) : s;
  }
  date(e, r) {
    return e = new Date(e), new Intl.DateTimeFormat(this.lang(), r).format(e);
  }
  number(e, r) {
    return e = Number(e), isNaN(e) ? "" : new Intl.NumberFormat(this.lang(), r).format(e);
  }
  relativeTime(e, r, n) {
    return new Intl.RelativeTimeFormat(this.lang(), n).format(e, r);
  }
};
var oS = {
  $code: "en",
  $name: "English",
  $dir: "ltr",
  carousel: "Carousel",
  clearEntry: "Clear entry",
  close: "Close",
  copied: "Copied",
  copy: "Copy",
  currentValue: "Current value",
  error: "Error",
  goToSlide: (t, e) => `Go to slide ${t} of ${e}`,
  hidePassword: "Hide password",
  loading: "Loading",
  nextSlide: "Next slide",
  numOptionsSelected: (t) => t === 0 ? "No options selected" : t === 1 ? "1 option selected" : `${t} options selected`,
  previousSlide: "Previous slide",
  progress: "Progress",
  remove: "Remove",
  resize: "Resize",
  scrollToEnd: "Scroll to end",
  scrollToStart: "Scroll to start",
  selectAColorFromTheScreen: "Select a color from the screen",
  showPassword: "Show password",
  slideNum: (t) => `Slide ${t}`,
  toggleColorFormat: "Toggle color format"
};
iS(oS);
var DC = oS, ii = class extends OC {
};
iS(DC);
var aS = Object.defineProperty, MC = Object.defineProperties, LC = Object.getOwnPropertyDescriptor, PC = Object.getOwnPropertyDescriptors, Bm = Object.getOwnPropertySymbols, FC = Object.prototype.hasOwnProperty, BC = Object.prototype.propertyIsEnumerable, Um = (t, e, r) => e in t ? aS(t, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : t[e] = r, Xi = (t, e) => {
  for (var r in e || (e = {}))
    FC.call(e, r) && Um(t, r, e[r]);
  if (Bm)
    for (var r of Bm(e))
      BC.call(e, r) && Um(t, r, e[r]);
  return t;
}, Aa = (t, e) => MC(t, PC(e)), ct = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? LC(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && aS(e, r, i), i;
};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const UC = { attribute: !0, type: String, converter: Ws, reflect: !1, hasChanged: Sh }, qC = (t = UC, e, r) => {
  const { kind: n, metadata: i } = r;
  let s = globalThis.litPropertyMetadata.get(i);
  if (s === void 0 && globalThis.litPropertyMetadata.set(i, s = /* @__PURE__ */ new Map()), s.set(r.name, t), n === "accessor") {
    const { name: o } = r;
    return { set(a) {
      const l = e.get.call(this);
      e.set.call(this, a), this.requestUpdate(o, l, t);
    }, init(a) {
      return a !== void 0 && this.C(o, void 0, t), a;
    } };
  }
  if (n === "setter") {
    const { name: o } = r;
    return function(a) {
      const l = this[o];
      e.call(this, a), this.requestUpdate(o, l, t);
    };
  }
  throw Error("Unsupported decorator location: " + n);
};
function ut(t) {
  return (e, r) => typeof r == "object" ? qC(t, e, r) : ((n, i, s) => {
    const o = i.hasOwnProperty(s);
    return i.constructor.createProperty(s, o ? { ...n, wrapped: !0 } : n), o ? Object.getOwnPropertyDescriptor(i, s) : void 0;
  })(t, e, r);
}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function Gr(t) {
  return ut({ ...t, state: !0, attribute: !1 });
}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function zC(t) {
  return (e, r) => {
    const n = typeof e == "function" ? e : e[r];
    Object.assign(n, t);
  };
}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const l_ = (t, e, r) => (r.configurable = !0, r.enumerable = !0, Reflect.decorate && typeof e != "object" && Object.defineProperty(t, e, r), r);
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function Ht(t, e) {
  return (r, n, i) => {
    const s = (o) => {
      var a;
      return ((a = o.renderRoot) == null ? void 0 : a.querySelector(t)) ?? null;
    };
    if (e) {
      const { get: o, set: a } = typeof n == "object" ? r : i ?? (() => {
        const l = Symbol();
        return { get() {
          return this[l];
        }, set(c) {
          this[l] = c;
        } };
      })();
      return l_(r, n, { get() {
        let l = o.call(this);
        return l === void 0 && (l = s(this), (l !== null || this.hasUpdated) && a.call(this, l)), l;
      } });
    }
    return l_(r, n, { get() {
      return s(this);
    } });
  };
}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
let GC;
function YC(t) {
  return (e, r) => l_(e, r, { get() {
    return (this.renderRoot ?? GC ?? (GC = document.createDocumentFragment())).querySelectorAll(t);
  } });
}
var gr = class extends Fs {
  constructor() {
    super(), Object.entries(this.constructor.dependencies).forEach(([t, e]) => {
      this.constructor.define(t, e);
    });
  }
  emit(t, e) {
    const r = new CustomEvent(t, Xi({
      bubbles: !0,
      cancelable: !1,
      composed: !0,
      detail: {}
    }, e));
    return this.dispatchEvent(r), r;
  }
  /* eslint-enable */
  static define(t, e = this, r = {}) {
    const n = customElements.get(t);
    if (!n) {
      customElements.define(t, class extends e {
      }, r);
      return;
    }
    let i = " (unknown version)", s = i;
    "version" in e && e.version && (i = " v" + e.version), "version" in n && n.version && (s = " v" + n.version), !(i && s && i === s) && console.warn(
      `Attempted to register <${t}>${i}, but <${t}>${s} has already been registered.`
    );
  }
};
gr.version = "2.12.0";
gr.dependencies = {};
ct([
  ut()
], gr.prototype, "dir", 2);
ct([
  ut()
], gr.prototype, "lang", 2);
var lS = class extends gr {
  constructor() {
    super(...arguments), this.localize = new ii(this);
  }
  render() {
    return Ct`
      <svg part="base" class="spinner" role="progressbar" aria-label=${this.localize.term("loading")}>
        <circle class="spinner__track"></circle>
        <circle class="spinner__indicator"></circle>
      </svg>
    `;
  }
};
lS.styles = kC;
var mo = /* @__PURE__ */ new WeakMap(), go = /* @__PURE__ */ new WeakMap(), $o = /* @__PURE__ */ new WeakMap(), Yc = /* @__PURE__ */ new WeakSet(), Va = /* @__PURE__ */ new WeakMap(), yh = class {
  constructor(t, e) {
    this.handleFormData = (r) => {
      const n = this.options.disabled(this.host), i = this.options.name(this.host), s = this.options.value(this.host), o = this.host.tagName.toLowerCase() === "sl-button";
      !n && !o && typeof i == "string" && i.length > 0 && typeof s < "u" && (Array.isArray(s) ? s.forEach((a) => {
        r.formData.append(i, a.toString());
      }) : r.formData.append(i, s.toString()));
    }, this.handleFormSubmit = (r) => {
      var n;
      const i = this.options.disabled(this.host), s = this.options.reportValidity;
      this.form && !this.form.noValidate && ((n = mo.get(this.form)) == null || n.forEach((o) => {
        this.setUserInteracted(o, !0);
      })), this.form && !this.form.noValidate && !i && !s(this.host) && (r.preventDefault(), r.stopImmediatePropagation());
    }, this.handleFormReset = () => {
      this.options.setValue(this.host, this.options.defaultValue(this.host)), this.setUserInteracted(this.host, !1), Va.set(this.host, []);
    }, this.handleInteraction = (r) => {
      const n = Va.get(this.host);
      n.includes(r.type) || n.push(r.type), n.length === this.options.assumeInteractionOn.length && this.setUserInteracted(this.host, !0);
    }, this.checkFormValidity = () => {
      if (this.form && !this.form.noValidate) {
        const r = this.form.querySelectorAll("*");
        for (const n of r)
          if (typeof n.checkValidity == "function" && !n.checkValidity())
            return !1;
      }
      return !0;
    }, this.reportFormValidity = () => {
      if (this.form && !this.form.noValidate) {
        const r = this.form.querySelectorAll("*");
        for (const n of r)
          if (typeof n.reportValidity == "function" && !n.reportValidity())
            return !1;
      }
      return !0;
    }, (this.host = t).addController(this), this.options = Xi({
      form: (r) => {
        const n = r.form;
        if (n) {
          const s = r.getRootNode().getElementById(n);
          if (s)
            return s;
        }
        return r.closest("form");
      },
      name: (r) => r.name,
      value: (r) => r.value,
      defaultValue: (r) => r.defaultValue,
      disabled: (r) => {
        var n;
        return (n = r.disabled) != null ? n : !1;
      },
      reportValidity: (r) => typeof r.reportValidity == "function" ? r.reportValidity() : !0,
      checkValidity: (r) => typeof r.checkValidity == "function" ? r.checkValidity() : !0,
      setValue: (r, n) => r.value = n,
      assumeInteractionOn: ["sl-input"]
    }, e);
  }
  hostConnected() {
    const t = this.options.form(this.host);
    t && this.attachForm(t), Va.set(this.host, []), this.options.assumeInteractionOn.forEach((e) => {
      this.host.addEventListener(e, this.handleInteraction);
    });
  }
  hostDisconnected() {
    this.detachForm(), Va.delete(this.host), this.options.assumeInteractionOn.forEach((t) => {
      this.host.removeEventListener(t, this.handleInteraction);
    });
  }
  hostUpdated() {
    const t = this.options.form(this.host);
    t || this.detachForm(), t && this.form !== t && (this.detachForm(), this.attachForm(t)), this.host.hasUpdated && this.setValidity(this.host.validity.valid);
  }
  attachForm(t) {
    t ? (this.form = t, mo.has(this.form) ? mo.get(this.form).add(this.host) : mo.set(this.form, /* @__PURE__ */ new Set([this.host])), this.form.addEventListener("formdata", this.handleFormData), this.form.addEventListener("submit", this.handleFormSubmit), this.form.addEventListener("reset", this.handleFormReset), go.has(this.form) || (go.set(this.form, this.form.reportValidity), this.form.reportValidity = () => this.reportFormValidity()), $o.has(this.form) || ($o.set(this.form, this.form.checkValidity), this.form.checkValidity = () => this.checkFormValidity())) : this.form = void 0;
  }
  detachForm() {
    if (!this.form)
      return;
    const t = mo.get(this.form);
    t && (t.delete(this.host), t.size <= 0 && (this.form.removeEventListener("formdata", this.handleFormData), this.form.removeEventListener("submit", this.handleFormSubmit), this.form.removeEventListener("reset", this.handleFormReset), go.has(this.form) && (this.form.reportValidity = go.get(this.form), go.delete(this.form)), $o.has(this.form) && (this.form.checkValidity = $o.get(this.form), $o.delete(this.form)), this.form = void 0));
  }
  setUserInteracted(t, e) {
    e ? Yc.add(t) : Yc.delete(t), t.requestUpdate();
  }
  doAction(t, e) {
    if (this.form) {
      const r = document.createElement("button");
      r.type = t, r.style.position = "absolute", r.style.width = "0", r.style.height = "0", r.style.clipPath = "inset(50%)", r.style.overflow = "hidden", r.style.whiteSpace = "nowrap", e && (r.name = e.name, r.value = e.value, ["formaction", "formenctype", "formmethod", "formnovalidate", "formtarget"].forEach((n) => {
        e.hasAttribute(n) && r.setAttribute(n, e.getAttribute(n));
      })), this.form.append(r), r.click(), r.remove();
    }
  }
  /** Returns the associated `<form>` element, if one exists. */
  getForm() {
    var t;
    return (t = this.form) != null ? t : null;
  }
  /** Resets the form, restoring all the control to their default value */
  reset(t) {
    this.doAction("reset", t);
  }
  /** Submits the form, triggering validation and form data injection. */
  submit(t) {
    this.doAction("submit", t);
  }
  /**
   * Synchronously sets the form control's validity. Call this when you know the future validity but need to update
   * the host element immediately, i.e. before Lit updates the component in the next update.
   */
  setValidity(t) {
    const e = this.host, r = !!Yc.has(e), n = !!e.required;
    e.toggleAttribute("data-required", n), e.toggleAttribute("data-optional", !n), e.toggleAttribute("data-invalid", !t), e.toggleAttribute("data-valid", t), e.toggleAttribute("data-user-invalid", !t && r), e.toggleAttribute("data-user-valid", t && r);
  }
  /**
   * Updates the form control's validity based on the current value of `host.validity.valid`. Call this when anything
   * that affects constraint validation changes so the component receives the correct validity states.
   */
  updateValidity() {
    const t = this.host;
    this.setValidity(t.validity.valid);
  }
  /**
   * Dispatches a non-bubbling, cancelable custom event of type `sl-invalid`.
   * If the `sl-invalid` event will be cancelled then the original `invalid`
   * event (which may have been passed as argument) will also be cancelled.
   * If no original `invalid` event has been passed then the `sl-invalid`
   * event will be cancelled before being dispatched.
   */
  emitInvalidEvent(t) {
    const e = new CustomEvent("sl-invalid", {
      bubbles: !1,
      composed: !1,
      cancelable: !0,
      detail: {}
    });
    t || e.preventDefault(), this.host.dispatchEvent(e) || t == null || t.preventDefault();
  }
}, Th = Object.freeze({
  badInput: !1,
  customError: !1,
  patternMismatch: !1,
  rangeOverflow: !1,
  rangeUnderflow: !1,
  stepMismatch: !1,
  tooLong: !1,
  tooShort: !1,
  typeMismatch: !1,
  valid: !0,
  valueMissing: !1
});
Object.freeze(Aa(Xi({}, Th), {
  valid: !1,
  valueMissing: !0
}));
Object.freeze(Aa(Xi({}, Th), {
  valid: !1,
  customError: !0
}));
var HC = Kt`
  ${wr}

  :host {
    display: inline-block;
    position: relative;
    width: auto;
    cursor: pointer;
  }

  .button {
    display: inline-flex;
    align-items: stretch;
    justify-content: center;
    width: 100%;
    border-style: solid;
    border-width: var(--sl-input-border-width);
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-font-weight-semibold);
    text-decoration: none;
    user-select: none;
    -webkit-user-select: none;
    white-space: nowrap;
    vertical-align: middle;
    padding: 0;
    transition:
      var(--sl-transition-x-fast) background-color,
      var(--sl-transition-x-fast) color,
      var(--sl-transition-x-fast) border,
      var(--sl-transition-x-fast) box-shadow;
    cursor: inherit;
  }

  .button::-moz-focus-inner {
    border: 0;
  }

  .button:focus {
    outline: none;
  }

  .button:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .button--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* When disabled, prevent mouse events from bubbling up from children */
  .button--disabled * {
    pointer-events: none;
  }

  .button__prefix,
  .button__suffix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    pointer-events: none;
  }

  .button__label {
    display: inline-block;
  }

  .button__label::slotted(sl-icon) {
    vertical-align: -2px;
  }

  /*
   * Standard buttons
   */

  /* Default */
  .button--standard.button--default {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-neutral-300);
    color: var(--sl-color-neutral-700);
  }

  .button--standard.button--default:hover:not(.button--disabled) {
    background-color: var(--sl-color-primary-50);
    border-color: var(--sl-color-primary-300);
    color: var(--sl-color-primary-700);
  }

  .button--standard.button--default:active:not(.button--disabled) {
    background-color: var(--sl-color-primary-100);
    border-color: var(--sl-color-primary-400);
    color: var(--sl-color-primary-700);
  }

  /* Primary */
  .button--standard.button--primary {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--primary:hover:not(.button--disabled) {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--primary:active:not(.button--disabled) {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  /* Success */
  .button--standard.button--success {
    background-color: var(--sl-color-success-600);
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--success:hover:not(.button--disabled) {
    background-color: var(--sl-color-success-500);
    border-color: var(--sl-color-success-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--success:active:not(.button--disabled) {
    background-color: var(--sl-color-success-600);
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  /* Neutral */
  .button--standard.button--neutral {
    background-color: var(--sl-color-neutral-600);
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--neutral:hover:not(.button--disabled) {
    background-color: var(--sl-color-neutral-500);
    border-color: var(--sl-color-neutral-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--neutral:active:not(.button--disabled) {
    background-color: var(--sl-color-neutral-600);
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  /* Warning */
  .button--standard.button--warning {
    background-color: var(--sl-color-warning-600);
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }
  .button--standard.button--warning:hover:not(.button--disabled) {
    background-color: var(--sl-color-warning-500);
    border-color: var(--sl-color-warning-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--warning:active:not(.button--disabled) {
    background-color: var(--sl-color-warning-600);
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  /* Danger */
  .button--standard.button--danger {
    background-color: var(--sl-color-danger-600);
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--danger:hover:not(.button--disabled) {
    background-color: var(--sl-color-danger-500);
    border-color: var(--sl-color-danger-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--danger:active:not(.button--disabled) {
    background-color: var(--sl-color-danger-600);
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  /*
   * Outline buttons
   */

  .button--outline {
    background: none;
    border: solid 1px;
  }

  /* Default */
  .button--outline.button--default {
    border-color: var(--sl-color-neutral-300);
    color: var(--sl-color-neutral-700);
  }

  .button--outline.button--default:hover:not(.button--disabled),
  .button--outline.button--default.button--checked:not(.button--disabled) {
    border-color: var(--sl-color-primary-600);
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--default:active:not(.button--disabled) {
    border-color: var(--sl-color-primary-700);
    background-color: var(--sl-color-primary-700);
    color: var(--sl-color-neutral-0);
  }

  /* Primary */
  .button--outline.button--primary {
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-primary-600);
  }

  .button--outline.button--primary:hover:not(.button--disabled),
  .button--outline.button--primary.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--primary:active:not(.button--disabled) {
    border-color: var(--sl-color-primary-700);
    background-color: var(--sl-color-primary-700);
    color: var(--sl-color-neutral-0);
  }

  /* Success */
  .button--outline.button--success {
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-success-600);
  }

  .button--outline.button--success:hover:not(.button--disabled),
  .button--outline.button--success.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--success:active:not(.button--disabled) {
    border-color: var(--sl-color-success-700);
    background-color: var(--sl-color-success-700);
    color: var(--sl-color-neutral-0);
  }

  /* Neutral */
  .button--outline.button--neutral {
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-600);
  }

  .button--outline.button--neutral:hover:not(.button--disabled),
  .button--outline.button--neutral.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--neutral:active:not(.button--disabled) {
    border-color: var(--sl-color-neutral-700);
    background-color: var(--sl-color-neutral-700);
    color: var(--sl-color-neutral-0);
  }

  /* Warning */
  .button--outline.button--warning {
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-warning-600);
  }

  .button--outline.button--warning:hover:not(.button--disabled),
  .button--outline.button--warning.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--warning:active:not(.button--disabled) {
    border-color: var(--sl-color-warning-700);
    background-color: var(--sl-color-warning-700);
    color: var(--sl-color-neutral-0);
  }

  /* Danger */
  .button--outline.button--danger {
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-danger-600);
  }

  .button--outline.button--danger:hover:not(.button--disabled),
  .button--outline.button--danger.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--danger:active:not(.button--disabled) {
    border-color: var(--sl-color-danger-700);
    background-color: var(--sl-color-danger-700);
    color: var(--sl-color-neutral-0);
  }

  @media (forced-colors: active) {
    .button.button--outline.button--checked:not(.button--disabled) {
      outline: solid 2px transparent;
    }
  }

  /*
   * Text buttons
   */

  .button--text {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-600);
  }

  .button--text:hover:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-500);
  }

  .button--text:focus-visible:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-500);
  }

  .button--text:active:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-700);
  }

  /*
   * Size modifiers
   */

  .button--small {
    height: auto;
    min-height: var(--sl-input-height-small);
    font-size: var(--sl-button-font-size-small);
    line-height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-small);
  }

  .button--medium {
    height: auto;
    min-height: var(--sl-input-height-medium);
    font-size: var(--sl-button-font-size-medium);
    line-height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-medium);
  }

  .button--large {
    height: auto;
    min-height: var(--sl-input-height-large);
    font-size: var(--sl-button-font-size-large);
    line-height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-large);
  }

  /*
   * Pill modifier
   */

  .button--pill.button--small {
    border-radius: var(--sl-input-height-small);
  }

  .button--pill.button--medium {
    border-radius: var(--sl-input-height-medium);
  }

  .button--pill.button--large {
    border-radius: var(--sl-input-height-large);
  }

  /*
   * Circle modifier
   */

  .button--circle {
    padding-left: 0;
    padding-right: 0;
  }

  .button--circle.button--small {
    width: var(--sl-input-height-small);
    border-radius: 50%;
  }

  .button--circle.button--medium {
    width: var(--sl-input-height-medium);
    border-radius: 50%;
  }

  .button--circle.button--large {
    width: var(--sl-input-height-large);
    border-radius: 50%;
  }

  .button--circle .button__prefix,
  .button--circle .button__suffix,
  .button--circle .button__caret {
    display: none;
  }

  /*
   * Caret modifier
   */

  .button--caret .button__suffix {
    display: none;
  }

  .button--caret .button__caret {
    height: auto;
  }

  /*
   * Loading modifier
   */

  .button--loading {
    position: relative;
    cursor: wait;
  }

  .button--loading .button__prefix,
  .button--loading .button__label,
  .button--loading .button__suffix,
  .button--loading .button__caret {
    visibility: hidden;
  }

  .button--loading sl-spinner {
    --indicator-color: currentColor;
    position: absolute;
    font-size: 1em;
    height: 1em;
    width: 1em;
    top: calc(50% - 0.5em);
    left: calc(50% - 0.5em);
  }

  /*
   * Badges
   */

  .button ::slotted(sl-badge) {
    position: absolute;
    top: 0;
    right: 0;
    translate: 50% -50%;
    pointer-events: none;
  }

  .button--rtl ::slotted(sl-badge) {
    right: auto;
    left: 0;
    translate: -50% -50%;
  }

  /*
   * Button spacing
   */

  .button--has-label.button--small .button__label {
    padding: 0 var(--sl-spacing-small);
  }

  .button--has-label.button--medium .button__label {
    padding: 0 var(--sl-spacing-medium);
  }

  .button--has-label.button--large .button__label {
    padding: 0 var(--sl-spacing-large);
  }

  .button--has-prefix.button--small {
    padding-inline-start: var(--sl-spacing-x-small);
  }

  .button--has-prefix.button--small .button__label {
    padding-inline-start: var(--sl-spacing-x-small);
  }

  .button--has-prefix.button--medium {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-prefix.button--medium .button__label {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-prefix.button--large {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-prefix.button--large .button__label {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-suffix.button--small,
  .button--caret.button--small {
    padding-inline-end: var(--sl-spacing-x-small);
  }

  .button--has-suffix.button--small .button__label,
  .button--caret.button--small .button__label {
    padding-inline-end: var(--sl-spacing-x-small);
  }

  .button--has-suffix.button--medium,
  .button--caret.button--medium {
    padding-inline-end: var(--sl-spacing-small);
  }

  .button--has-suffix.button--medium .button__label,
  .button--caret.button--medium .button__label {
    padding-inline-end: var(--sl-spacing-small);
  }

  .button--has-suffix.button--large,
  .button--caret.button--large {
    padding-inline-end: var(--sl-spacing-small);
  }

  .button--has-suffix.button--large .button__label,
  .button--caret.button--large .button__label {
    padding-inline-end: var(--sl-spacing-small);
  }

  /*
   * Button groups support a variety of button types (e.g. buttons with tooltips, buttons as dropdown triggers, etc.).
   * This means buttons aren't always direct descendants of the button group, thus we can't target them with the
   * ::slotted selector. To work around this, the button group component does some magic to add these special classes to
   * buttons and we style them here instead.
   */

  :host(.sl-button-group__button--first:not(.sl-button-group__button--last)) .button {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }

  :host(.sl-button-group__button--inner) .button {
    border-radius: 0;
  }

  :host(.sl-button-group__button--last:not(.sl-button-group__button--first)) .button {
    border-start-start-radius: 0;
    border-end-start-radius: 0;
  }

  /* All except the first */
  :host(.sl-button-group__button:not(.sl-button-group__button--first)) {
    margin-inline-start: calc(-1 * var(--sl-input-border-width));
  }

  /* Add a visual separator between solid buttons */
  :host(
      .sl-button-group__button:not(
          .sl-button-group__button--first,
          .sl-button-group__button--radio,
          [variant='default']
        ):not(:hover)
    )
    .button:after {
    content: '';
    position: absolute;
    top: 0;
    inset-inline-start: 0;
    bottom: 0;
    border-left: solid 1px rgb(128 128 128 / 33%);
    mix-blend-mode: multiply;
  }

  /* Bump hovered, focused, and checked buttons up so their focus ring isn't clipped */
  :host(.sl-button-group__button--hover) {
    z-index: 1;
  }

  /* Focus and checked are always on top */
  :host(.sl-button-group__button--focus),
  :host(.sl-button-group__button[checked]) {
    z-index: 2;
  }
`, Ra = class {
  constructor(t, ...e) {
    this.slotNames = [], this.handleSlotChange = (r) => {
      const n = r.target;
      (this.slotNames.includes("[default]") && !n.name || n.name && this.slotNames.includes(n.name)) && this.host.requestUpdate();
    }, (this.host = t).addController(this), this.slotNames = e;
  }
  hasDefaultSlot() {
    return [...this.host.childNodes].some((t) => {
      if (t.nodeType === t.TEXT_NODE && t.textContent.trim() !== "")
        return !0;
      if (t.nodeType === t.ELEMENT_NODE) {
        const e = t;
        if (e.tagName.toLowerCase() === "sl-visually-hidden")
          return !1;
        if (!e.hasAttribute("slot"))
          return !0;
      }
      return !1;
    });
  }
  hasNamedSlot(t) {
    return this.host.querySelector(`:scope > [slot="${t}"]`) !== null;
  }
  test(t) {
    return t === "[default]" ? this.hasDefaultSlot() : this.hasNamedSlot(t);
  }
  hostConnected() {
    this.host.shadowRoot.addEventListener("slotchange", this.handleSlotChange);
  }
  hostDisconnected() {
    this.host.shadowRoot.removeEventListener("slotchange", this.handleSlotChange);
  }
};
function VC(t) {
  if (!t)
    return "";
  const e = t.assignedNodes({ flatten: !0 });
  let r = "";
  return [...e].forEach((n) => {
    n.nodeType === Node.TEXT_NODE && (r += n.textContent);
  }), r;
}
var WC = Kt`
  ${wr}

  :host {
    display: inline-block;
    width: 1em;
    height: 1em;
    box-sizing: content-box !important;
  }

  svg {
    display: block;
    height: 100%;
    width: 100%;
  }
`, c_ = "";
function qm(t) {
  c_ = t;
}
function KC(t = "") {
  if (!c_) {
    const e = [...document.getElementsByTagName("script")], r = e.find((n) => n.hasAttribute("data-shoelace"));
    if (r)
      qm(r.getAttribute("data-shoelace"));
    else {
      const n = e.find((s) => /shoelace(\.min)?\.js($|\?)/.test(s.src) || /shoelace-autoloader(\.min)?\.js($|\?)/.test(s.src));
      let i = "";
      n && (i = n.getAttribute("src")), qm(i.split("/").slice(0, -1).join("/"));
    }
  }
  return c_.replace(/\/$/, "") + (t ? `/${t.replace(/^\//, "")}` : "");
}
var QC = {
  name: "default",
  resolver: (t) => KC(`assets/icons/${t}.svg`)
}, jC = QC, zm = {
  caret: `
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <polyline points="6 9 12 15 18 9"></polyline>
    </svg>
  `,
  check: `
    <svg part="checked-icon" class="checkbox__icon" viewBox="0 0 16 16">
      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round">
        <g stroke="currentColor">
          <g transform="translate(3.428571, 3.428571)">
            <path d="M0,5.71428571 L3.42857143,9.14285714"></path>
            <path d="M9.14285714,0 L3.42857143,9.14285714"></path>
          </g>
        </g>
      </g>
    </svg>
  `,
  "chevron-down": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
    </svg>
  `,
  "chevron-left": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-left" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
    </svg>
  `,
  "chevron-right": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
    </svg>
  `,
  copy: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-copy" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V2Zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H6ZM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1H2Z"/>
    </svg>
  `,
  eye: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
      <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/>
      <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
    </svg>
  `,
  "eye-slash": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash" viewBox="0 0 16 16">
      <path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7.028 7.028 0 0 0-2.79.588l.77.771A5.944 5.944 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.134 13.134 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755-.165.165-.337.328-.517.486l.708.709z"/>
      <path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829l.822.822zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829z"/>
      <path d="M3.35 5.47c-.18.16-.353.322-.518.487A13.134 13.134 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7.029 7.029 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12-.708.708z"/>
    </svg>
  `,
  eyedropper: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">
      <path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708l-2-2zM2 12.707l7-7L10.293 7l-7 7H2v-1.293z"></path>
    </svg>
  `,
  "grip-vertical": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-grip-vertical" viewBox="0 0 16 16">
      <path d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path>
    </svg>
  `,
  indeterminate: `
    <svg part="indeterminate-icon" class="checkbox__icon" viewBox="0 0 16 16">
      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round">
        <g stroke="currentColor" stroke-width="2">
          <g transform="translate(2.285714, 6.857143)">
            <path d="M10.2857143,1.14285714 L1.14285714,1.14285714"></path>
          </g>
        </g>
      </g>
    </svg>
  `,
  "person-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-fill" viewBox="0 0 16 16">
      <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
    </svg>
  `,
  "play-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-fill" viewBox="0 0 16 16">
      <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z"></path>
    </svg>
  `,
  "pause-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pause-fill" viewBox="0 0 16 16">
      <path d="M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5zm5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5z"></path>
    </svg>
  `,
  radio: `
    <svg part="checked-icon" class="radio__icon" viewBox="0 0 16 16">
      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g fill="currentColor">
          <circle cx="8" cy="8" r="3.42857143"></circle>
        </g>
      </g>
    </svg>
  `,
  "star-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
      <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"/>
    </svg>
  `,
  "x-lg": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
      <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z"/>
    </svg>
  `,
  "x-circle-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
      <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"></path>
    </svg>
  `
}, XC = {
  name: "system",
  resolver: (t) => t in zm ? `data:image/svg+xml,${encodeURIComponent(zm[t])}` : ""
}, ZC = XC, JC = [jC, ZC], u_ = [];
function ew(t) {
  u_.push(t);
}
function tw(t) {
  u_ = u_.filter((e) => e !== t);
}
function Gm(t) {
  return JC.find((e) => e.name === t);
}
function _r(t, e) {
  const r = Xi({
    waitUntilFirstUpdate: !1
  }, e);
  return (n, i) => {
    const { update: s } = n, o = Array.isArray(t) ? t : [t];
    n.update = function(a) {
      o.forEach((l) => {
        const c = l;
        if (a.has(c)) {
          const f = a.get(c), m = this[c];
          f !== m && (!r.waitUntilFirstUpdate || this.hasUpdated) && this[i](f, m);
        }
      }), s.call(this, a);
    };
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const rw = (t, e) => e === void 0 ? (t == null ? void 0 : t._$litType$) !== void 0 : (t == null ? void 0 : t._$litType$) === e, cS = (t) => t.strings === void 0, nw = {}, iw = (t, e = nw) => t._$AH = e;
var bo = Symbol(), Wa = Symbol(), Hc, Vc = /* @__PURE__ */ new Map(), gn = class extends gr {
  constructor() {
    super(...arguments), this.initialRender = !1, this.svg = null, this.label = "", this.library = "default";
  }
  /** Given a URL, this function returns the resulting SVG element or an appropriate error symbol. */
  async resolveIcon(t, e) {
    var r;
    let n;
    if (e != null && e.spriteSheet)
      return Ct`<svg part="svg">
        <use part="use" href="${t}"></use>
      </svg>`;
    try {
      if (n = await fetch(t, { mode: "cors" }), !n.ok)
        return n.status === 410 ? bo : Wa;
    } catch {
      return Wa;
    }
    try {
      const i = document.createElement("div");
      i.innerHTML = await n.text();
      const s = i.firstElementChild;
      if (((r = s == null ? void 0 : s.tagName) == null ? void 0 : r.toLowerCase()) !== "svg")
        return bo;
      Hc || (Hc = new DOMParser());
      const a = Hc.parseFromString(s.outerHTML, "text/html").body.querySelector("svg");
      return a ? (a.part.add("svg"), document.adoptNode(a)) : bo;
    } catch {
      return bo;
    }
  }
  connectedCallback() {
    super.connectedCallback(), ew(this);
  }
  firstUpdated() {
    this.initialRender = !0, this.setIcon();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), tw(this);
  }
  getIconSource() {
    const t = Gm(this.library);
    return this.name && t ? {
      url: t.resolver(this.name),
      fromLibrary: !0
    } : {
      url: this.src,
      fromLibrary: !1
    };
  }
  handleLabelChange() {
    typeof this.label == "string" && this.label.length > 0 ? (this.setAttribute("role", "img"), this.setAttribute("aria-label", this.label), this.removeAttribute("aria-hidden")) : (this.removeAttribute("role"), this.removeAttribute("aria-label"), this.setAttribute("aria-hidden", "true"));
  }
  async setIcon() {
    var t;
    const { url: e, fromLibrary: r } = this.getIconSource(), n = r ? Gm(this.library) : void 0;
    if (!e) {
      this.svg = null;
      return;
    }
    let i = Vc.get(e);
    if (i || (i = this.resolveIcon(e, n), Vc.set(e, i)), !this.initialRender)
      return;
    const s = await i;
    if (s === Wa && Vc.delete(e), e === this.getIconSource().url) {
      if (rw(s)) {
        this.svg = s;
        return;
      }
      switch (s) {
        case Wa:
        case bo:
          this.svg = null, this.emit("sl-error");
          break;
        default:
          this.svg = s.cloneNode(!0), (t = n == null ? void 0 : n.mutator) == null || t.call(n, this.svg), this.emit("sl-load");
      }
    }
  }
  render() {
    return this.svg;
  }
};
gn.styles = WC;
ct([
  Gr()
], gn.prototype, "svg", 2);
ct([
  ut({ reflect: !0 })
], gn.prototype, "name", 2);
ct([
  ut()
], gn.prototype, "src", 2);
ct([
  ut()
], gn.prototype, "label", 2);
ct([
  ut({ reflect: !0 })
], gn.prototype, "library", 2);
ct([
  _r("label")
], gn.prototype, "handleLabelChange", 1);
ct([
  _r(["name", "src", "library"])
], gn.prototype, "setIcon", 1);
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const ci = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 }, _c = (t) => (...e) => ({ _$litDirective$: t, values: e });
let hc = class {
  constructor(e) {
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AT(e, r, n) {
    this._$Ct = e, this._$AM = r, this._$Ci = n;
  }
  _$AS(e, r) {
    return this.update(e, r);
  }
  update(e, r) {
    return this.render(...r);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Ur = _c(class extends hc {
  constructor(t) {
    var e;
    if (super(t), t.type !== ci.ATTRIBUTE || t.name !== "class" || ((e = t.strings) == null ? void 0 : e.length) > 2)
      throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.");
  }
  render(t) {
    return " " + Object.keys(t).filter((e) => t[e]).join(" ") + " ";
  }
  update(t, [e]) {
    var n, i;
    if (this.it === void 0) {
      this.it = /* @__PURE__ */ new Set(), t.strings !== void 0 && (this.st = new Set(t.strings.join(" ").split(/\s/).filter((s) => s !== "")));
      for (const s in e)
        e[s] && !((n = this.st) != null && n.has(s)) && this.it.add(s);
      return this.render(e);
    }
    const r = t.element.classList;
    for (const s of this.it)
      s in e || (r.remove(s), this.it.delete(s));
    for (const s in e) {
      const o = !!e[s];
      o === this.it.has(s) || (i = this.st) != null && i.has(s) || (o ? (r.add(s), this.it.add(s)) : (r.remove(s), this.it.delete(s)));
    }
    return Sn;
  }
});
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const uS = Symbol.for(""), sw = (t) => {
  if ((t == null ? void 0 : t.r) === uS)
    return t == null ? void 0 : t._$litStatic$;
}, Dl = (t, ...e) => ({ _$litStatic$: e.reduce((r, n, i) => r + ((s) => {
  if (s._$litStatic$ !== void 0)
    return s._$litStatic$;
  throw Error(`Value passed to 'literal' function must be a 'literal' result: ${s}. Use 'unsafeStatic' to pass non-literal values, but
            take care to ensure page security.`);
})(n) + t[i + 1], t[0]), r: uS }), Ym = /* @__PURE__ */ new Map(), ow = (t) => (e, ...r) => {
  const n = r.length;
  let i, s;
  const o = [], a = [];
  let l, c = 0, f = !1;
  for (; c < n; ) {
    for (l = e[c]; c < n && (s = r[c], (i = sw(s)) !== void 0); )
      l += i + e[++c], f = !0;
    c !== n && a.push(s), o.push(l), c++;
  }
  if (c === n && o.push(e[n]), f) {
    const m = o.join("$$lit$$");
    (e = Ym.get(m)) === void 0 && (o.raw = o, Ym.set(m, e = o)), r = a;
  }
  return t(e, ...r);
}, Sl = ow(Ct);
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Wt = (t) => t ?? ur;
var er = class extends gr {
  constructor() {
    super(...arguments), this.formControlController = new yh(this, {
      assumeInteractionOn: ["click"]
    }), this.hasSlotController = new Ra(this, "[default]", "prefix", "suffix"), this.localize = new ii(this), this.hasFocus = !1, this.invalid = !1, this.title = "", this.variant = "default", this.size = "medium", this.caret = !1, this.disabled = !1, this.loading = !1, this.outline = !1, this.pill = !1, this.circle = !1, this.type = "button", this.name = "", this.value = "", this.href = "", this.rel = "noreferrer noopener";
  }
  /** Gets the validity state object */
  get validity() {
    return this.isButton() ? this.button.validity : Th;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.isButton() ? this.button.validationMessage : "";
  }
  firstUpdated() {
    this.isButton() && this.formControlController.updateValidity();
  }
  handleBlur() {
    this.hasFocus = !1, this.emit("sl-blur");
  }
  handleFocus() {
    this.hasFocus = !0, this.emit("sl-focus");
  }
  handleClick() {
    this.type === "submit" && this.formControlController.submit(this), this.type === "reset" && this.formControlController.reset(this);
  }
  handleInvalid(t) {
    this.formControlController.setValidity(!1), this.formControlController.emitInvalidEvent(t);
  }
  isButton() {
    return !this.href;
  }
  isLink() {
    return !!this.href;
  }
  handleDisabledChange() {
    this.isButton() && this.formControlController.setValidity(this.disabled);
  }
  /** Simulates a click on the button. */
  click() {
    this.button.click();
  }
  /** Sets focus on the button. */
  focus(t) {
    this.button.focus(t);
  }
  /** Removes focus from the button. */
  blur() {
    this.button.blur();
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.isButton() ? this.button.checkValidity() : !0;
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.isButton() ? this.button.reportValidity() : !0;
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(t) {
    this.isButton() && (this.button.setCustomValidity(t), this.formControlController.updateValidity());
  }
  render() {
    const t = this.isLink(), e = t ? Dl`a` : Dl`button`;
    return Sl`
      <${e}
        part="base"
        class=${Ur({
      button: !0,
      "button--default": this.variant === "default",
      "button--primary": this.variant === "primary",
      "button--success": this.variant === "success",
      "button--neutral": this.variant === "neutral",
      "button--warning": this.variant === "warning",
      "button--danger": this.variant === "danger",
      "button--text": this.variant === "text",
      "button--small": this.size === "small",
      "button--medium": this.size === "medium",
      "button--large": this.size === "large",
      "button--caret": this.caret,
      "button--circle": this.circle,
      "button--disabled": this.disabled,
      "button--focused": this.hasFocus,
      "button--loading": this.loading,
      "button--standard": !this.outline,
      "button--outline": this.outline,
      "button--pill": this.pill,
      "button--rtl": this.localize.dir() === "rtl",
      "button--has-label": this.hasSlotController.test("[default]"),
      "button--has-prefix": this.hasSlotController.test("prefix"),
      "button--has-suffix": this.hasSlotController.test("suffix")
    })}
        ?disabled=${Wt(t ? void 0 : this.disabled)}
        type=${Wt(t ? void 0 : this.type)}
        title=${this.title}
        name=${Wt(t ? void 0 : this.name)}
        value=${Wt(t ? void 0 : this.value)}
        href=${Wt(t ? this.href : void 0)}
        target=${Wt(t ? this.target : void 0)}
        download=${Wt(t ? this.download : void 0)}
        rel=${Wt(t ? this.rel : void 0)}
        role=${Wt(t ? void 0 : "button")}
        aria-disabled=${this.disabled ? "true" : "false"}
        tabindex=${this.disabled ? "-1" : "0"}
        @blur=${this.handleBlur}
        @focus=${this.handleFocus}
        @invalid=${this.isButton() ? this.handleInvalid : null}
        @click=${this.handleClick}
      >
        <slot name="prefix" part="prefix" class="button__prefix"></slot>
        <slot part="label" class="button__label"></slot>
        <slot name="suffix" part="suffix" class="button__suffix"></slot>
        ${this.caret ? Sl` <sl-icon part="caret" class="button__caret" library="system" name="caret"></sl-icon> ` : ""}
        ${this.loading ? Sl`<sl-spinner part="spinner"></sl-spinner>` : ""}
      </${e}>
    `;
  }
};
er.styles = HC;
er.dependencies = {
  "sl-icon": gn,
  "sl-spinner": lS
};
ct([
  Ht(".button")
], er.prototype, "button", 2);
ct([
  Gr()
], er.prototype, "hasFocus", 2);
ct([
  Gr()
], er.prototype, "invalid", 2);
ct([
  ut()
], er.prototype, "title", 2);
ct([
  ut({ reflect: !0 })
], er.prototype, "variant", 2);
ct([
  ut({ reflect: !0 })
], er.prototype, "size", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], er.prototype, "caret", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], er.prototype, "disabled", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], er.prototype, "loading", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], er.prototype, "outline", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], er.prototype, "pill", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], er.prototype, "circle", 2);
ct([
  ut()
], er.prototype, "type", 2);
ct([
  ut()
], er.prototype, "name", 2);
ct([
  ut()
], er.prototype, "value", 2);
ct([
  ut()
], er.prototype, "href", 2);
ct([
  ut()
], er.prototype, "target", 2);
ct([
  ut()
], er.prototype, "rel", 2);
ct([
  ut()
], er.prototype, "download", 2);
ct([
  ut()
], er.prototype, "form", 2);
ct([
  ut({ attribute: "formaction" })
], er.prototype, "formAction", 2);
ct([
  ut({ attribute: "formenctype" })
], er.prototype, "formEnctype", 2);
ct([
  ut({ attribute: "formmethod" })
], er.prototype, "formMethod", 2);
ct([
  ut({ attribute: "formnovalidate", type: Boolean })
], er.prototype, "formNoValidate", 2);
ct([
  ut({ attribute: "formtarget" })
], er.prototype, "formTarget", 2);
ct([
  _r("disabled", { waitUntilFirstUpdate: !0 })
], er.prototype, "handleDisabledChange", 1);
var jU = er;
er.define("sl-button");
var aw = Kt`
  ${wr}

  :host {
    --divider-width: 4px;
    --divider-hit-area: 12px;
    --min: 0%;
    --max: 100%;

    display: grid;
  }

  .start,
  .end {
    overflow: hidden;
  }

  .divider {
    flex: 0 0 var(--divider-width);
    display: flex;
    position: relative;
    align-items: center;
    justify-content: center;
    background-color: var(--sl-color-neutral-200);
    color: var(--sl-color-neutral-900);
    z-index: 1;
  }

  .divider:focus {
    outline: none;
  }

  :host(:not([disabled])) .divider:focus-visible {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  :host([disabled]) .divider {
    cursor: not-allowed;
  }

  /* Horizontal */
  :host(:not([vertical], [disabled])) .divider {
    cursor: col-resize;
  }

  :host(:not([vertical])) .divider::after {
    display: flex;
    content: '';
    position: absolute;
    height: 100%;
    left: calc(var(--divider-hit-area) / -2 + var(--divider-width) / 2);
    width: var(--divider-hit-area);
  }

  /* Vertical */
  :host([vertical]) {
    flex-direction: column;
  }

  :host([vertical]:not([disabled])) .divider {
    cursor: row-resize;
  }

  :host([vertical]) .divider::after {
    content: '';
    position: absolute;
    width: 100%;
    top: calc(var(--divider-hit-area) / -2 + var(--divider-width) / 2);
    height: var(--divider-hit-area);
  }

  @media (forced-colors: active) {
    .divider {
      outline: solid 1px transparent;
    }
  }
`;
function lw(t, e) {
  function r(i) {
    const s = t.getBoundingClientRect(), o = t.ownerDocument.defaultView, a = s.left + o.scrollX, l = s.top + o.scrollY, c = i.pageX - a, f = i.pageY - l;
    e != null && e.onMove && e.onMove(c, f);
  }
  function n() {
    document.removeEventListener("pointermove", r), document.removeEventListener("pointerup", n), e != null && e.onStop && e.onStop();
  }
  document.addEventListener("pointermove", r, { passive: !0 }), document.addEventListener("pointerup", n), (e == null ? void 0 : e.initialEvent) instanceof PointerEvent && r(e.initialEvent);
}
function Hm(t, e, r) {
  const n = (i) => Object.is(i, -0) ? 0 : i;
  return t < e ? n(e) : t > r ? n(r) : n(t);
}
var $n = class extends gr {
  constructor() {
    super(...arguments), this.localize = new ii(this), this.position = 50, this.vertical = !1, this.disabled = !1, this.snapThreshold = 12;
  }
  connectedCallback() {
    super.connectedCallback(), this.resizeObserver = new ResizeObserver((t) => this.handleResize(t)), this.updateComplete.then(() => this.resizeObserver.observe(this)), this.detectSize(), this.cachedPositionInPixels = this.percentageToPixels(this.position);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.resizeObserver.unobserve(this);
  }
  detectSize() {
    const { width: t, height: e } = this.getBoundingClientRect();
    this.size = this.vertical ? e : t;
  }
  percentageToPixels(t) {
    return this.size * (t / 100);
  }
  pixelsToPercentage(t) {
    return t / this.size * 100;
  }
  handleDrag(t) {
    const e = this.localize.dir() === "rtl";
    this.disabled || (t.cancelable && t.preventDefault(), lw(this, {
      onMove: (r, n) => {
        let i = this.vertical ? n : r;
        this.primary === "end" && (i = this.size - i), this.snap && this.snap.split(" ").forEach((o) => {
          let a;
          o.endsWith("%") ? a = this.size * (parseFloat(o) / 100) : a = parseFloat(o), e && !this.vertical && (a = this.size - a), i >= a - this.snapThreshold && i <= a + this.snapThreshold && (i = a);
        }), this.position = Hm(this.pixelsToPercentage(i), 0, 100);
      },
      initialEvent: t
    }));
  }
  handleKeyDown(t) {
    if (!this.disabled && ["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", "Home", "End"].includes(t.key)) {
      let e = this.position;
      const r = (t.shiftKey ? 10 : 1) * (this.primary === "end" ? -1 : 1);
      t.preventDefault(), (t.key === "ArrowLeft" && !this.vertical || t.key === "ArrowUp" && this.vertical) && (e -= r), (t.key === "ArrowRight" && !this.vertical || t.key === "ArrowDown" && this.vertical) && (e += r), t.key === "Home" && (e = this.primary === "end" ? 100 : 0), t.key === "End" && (e = this.primary === "end" ? 0 : 100), this.position = Hm(e, 0, 100);
    }
  }
  handleResize(t) {
    const { width: e, height: r } = t[0].contentRect;
    this.size = this.vertical ? r : e, this.primary && (this.position = this.pixelsToPercentage(this.cachedPositionInPixels));
  }
  handlePositionChange() {
    this.cachedPositionInPixels = this.percentageToPixels(this.position), this.positionInPixels = this.percentageToPixels(this.position), this.emit("sl-reposition");
  }
  handlePositionInPixelsChange() {
    this.position = this.pixelsToPercentage(this.positionInPixels);
  }
  handleVerticalChange() {
    this.detectSize();
  }
  render() {
    const t = this.vertical ? "gridTemplateRows" : "gridTemplateColumns", e = this.vertical ? "gridTemplateColumns" : "gridTemplateRows", r = this.localize.dir() === "rtl", n = `
      clamp(
        0%,
        clamp(
          var(--min),
          ${this.position}% - var(--divider-width) / 2,
          var(--max)
        ),
        calc(100% - var(--divider-width))
      )
    `, i = "auto";
    return this.primary === "end" ? r && !this.vertical ? this.style[t] = `${n} var(--divider-width) ${i}` : this.style[t] = `${i} var(--divider-width) ${n}` : r && !this.vertical ? this.style[t] = `${i} var(--divider-width) ${n}` : this.style[t] = `${n} var(--divider-width) ${i}`, this.style[e] = "", Ct`
      <slot name="start" part="panel start" class="start"></slot>

      <div
        part="divider"
        class="divider"
        tabindex=${Wt(this.disabled ? void 0 : "0")}
        role="separator"
        aria-valuenow=${this.position}
        aria-valuemin="0"
        aria-valuemax="100"
        aria-label=${this.localize.term("resize")}
        @keydown=${this.handleKeyDown}
        @mousedown=${this.handleDrag}
        @touchstart=${this.handleDrag}
      >
        <slot name="divider"></slot>
      </div>

      <slot name="end" part="panel end" class="end"></slot>
    `;
  }
};
$n.styles = aw;
ct([
  Ht(".divider")
], $n.prototype, "divider", 2);
ct([
  ut({ type: Number, reflect: !0 })
], $n.prototype, "position", 2);
ct([
  ut({ attribute: "position-in-pixels", type: Number })
], $n.prototype, "positionInPixels", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], $n.prototype, "vertical", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], $n.prototype, "disabled", 2);
ct([
  ut()
], $n.prototype, "primary", 2);
ct([
  ut()
], $n.prototype, "snap", 2);
ct([
  ut({ type: Number, attribute: "snap-threshold" })
], $n.prototype, "snapThreshold", 2);
ct([
  _r("position")
], $n.prototype, "handlePositionChange", 1);
ct([
  _r("positionInPixels")
], $n.prototype, "handlePositionInPixelsChange", 1);
ct([
  _r("vertical")
], $n.prototype, "handleVerticalChange", 1);
$n.define("sl-split-panel");
function xa(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
function cw(t) {
  if (t.__esModule)
    return t;
  var e = t.default;
  if (typeof e == "function") {
    var r = function n() {
      return this instanceof n ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    r.prototype = e.prototype;
  } else
    r = {};
  return Object.defineProperty(r, "__esModule", { value: !0 }), Object.keys(t).forEach(function(n) {
    var i = Object.getOwnPropertyDescriptor(t, n);
    Object.defineProperty(r, n, i.get ? i : {
      enumerable: !0,
      get: function() {
        return t[n];
      }
    });
  }), r;
}
/**
 * @license Asciidoctor.js 3.0.2 | MIT | https://github.com/asciidoctor/asciidoctor.js
 */
(function(t) {
  var e;
  if (typeof globalThis < "u" ? t = globalThis : typeof global < "u" ? t = global : typeof window < "u" && (t = window), t.console == null && (t.console = {}), typeof t.console == "object" ? e = t.console : e = {}, "log" in e || (e.log = function() {
  }), "warn" in e || (e.warn = e.log), typeof t.Opal < "u")
    return e.warn("Opal already loaded. Loading twice can cause troubles, please fix your setup."), t.Opal;
  var r, n, i, s, o, a, l, c = t.Opal = {};
  c.global = t, c.config = {
    missing_require_severity: "error",
    // error, warning, ignore
    unsupported_features_severity: "warning",
    // error, warning, ignore
    experimental_features_severity: "warning",
    // warning, ignore
    enable_stack_trace: !0
    // true, false
  };
  var f = Function.prototype.call, m = Function.prototype.bind, b = Object.hasOwn || f.bind(Object.prototype.hasOwnProperty), C = Object.setPrototypeOf, N = f.bind(Array.prototype.slice), z = f.bind(Array.prototype.splice), A = 4, Q = A;
  function Te() {
    return Q += 2, Q;
  }
  c.uid = Te, c.id = function(y) {
    return y.$$is_number ? y * 2 + 1 : (y.$$id == null && Y(y, "$$id", Te()), y.$$id);
  };
  var ce = c.gvars = {};
  c.exit = function(y) {
    ce.DEBUG && e.log("Exited with status " + y);
  }, c.exceptions = [], c.pop_exception = function() {
    var y = c.exceptions.pop();
    y ? (ce["!"] = y, ce["@"] = y.$backtrace()) : ce["!"] = ce["@"] = r;
  };
  function ge(y, P) {
    if (y || (y = c.Exception || Error), l && l.$raise)
      arguments.length > 2 ? l.$raise(y.$new.apply(y, N(arguments, 1))) : l.$raise(y, P);
    else
      throw y.$new ? y.$new(P) : new y(P);
  }
  function Y(y, P, be) {
    typeof y == "string" ? y[P] = be : Object.defineProperty(y, P, {
      value: be,
      enumerable: !1,
      configurable: !0,
      writable: !0
    });
  }
  c.prop = Y, c.defineProperty = c.prop, c.slice = N;
  var fe = c.truthy = function(y) {
    return y !== !1 && r !== y && y !== void 0 && y !== null && (!(y instanceof Boolean) || y.valueOf() === !0);
  };
  c.falsy = function(y) {
    return !fe(y);
  }, c.type_error = function(y, P, be, Oe) {
    y = y.$$class, Oe && be ? (Oe = Oe.$$class, ge(
      c.TypeError,
      "can't convert " + y + " into " + P + " (" + y + "#" + be + " gives " + Oe + ")"
    )) : ge(
      c.TypeError,
      "no implicit conversion of " + y + " into " + P
    );
  }, c.coerce_to = function(y, P, be, Oe) {
    var Ue;
    return be === "to_int" && P === c.Integer && y.$$is_number ? y < 0 ? Math.ceil(y) : Math.floor(y) : be === "to_str" && P === c.String && y.$$is_string || c.is_a(y, P) ? y : y["$respond_to?"].$$pristine && y.$method_missing.$$pristine ? (Ue = y[gt(be)], (Ue == null || Ue.$$stub) && c.type_error(y, P), Ue.apply(y, Oe)) : (y["$respond_to?"](be) || c.type_error(y, P), Oe == null && (Oe = []), c.send(y, be, Oe));
  }, c.respond_to = function(y, P, be) {
    if (y == null || !y.$$class)
      return !1;
    be = !!be;
    var Oe = y[P];
    if (y["$respond_to?"].$$pristine) {
      if (typeof Oe == "function" && !Oe.$$stub)
        return !0;
      if (!y["$respond_to_missing?"].$$pristine)
        return c.send(y, y["$respond_to_missing?"], [P.substr(1), be]);
    } else
      return c.send(y, y["$respond_to?"], [P.substr(1), be]);
  }, c.trace_class = !1, c.tracers_for_class = [];
  function ae(y) {
    var P, be, Oe;
    for (P = 0, be = c.tracers_for_class.length; P < be; P++)
      Oe = c.tracers_for_class[P], Oe.trace_object = y, Oe.block.$call(Oe);
  }
  function Re(y, P) {
    if (y.$$autoload[P].loaded) {
      if (y.$$autoload[P].loaded && !y.$$autoload[P].required && y.$$autoload[P].exception)
        throw y.$$autoload[P].exception;
    } else {
      y.$$autoload[P].loaded = !0;
      try {
        c.Kernel.$require(y.$$autoload[P].path);
      } catch (be) {
        throw y.$$autoload[P].exception = be, be;
      }
      if (y.$$autoload[P].required = !0, y.$$const[P] != null)
        return y.$$autoload[P].success = !0, y.$$const[P];
    }
  }
  function pe(y, P) {
    if (y) {
      if (y.$$const[P] != null)
        return y.$$const[P];
      if (y.$$autoload && y.$$autoload[P])
        return Re(y, P);
    }
  }
  function Ce(y, P) {
    var be, Oe, Ue;
    if (y.length !== 0)
      for (be = 0, Oe = y.length; be < Oe; be++) {
        if (Ue = y[be].$$const[P], Ue != null)
          return Ue;
        if (y[be].$$autoload && y[be].$$autoload[P])
          return Re(y[be], P);
      }
  }
  function J(y, P) {
    var be, Oe, Ue;
    if (y != null)
      for (Ue = Je(y), be = 0, Oe = Ue.length; be < Oe; be++) {
        if (Ue[be].$$const && b(Ue[be].$$const, P))
          return Ue[be].$$const[P];
        if (Ue[be].$$autoload && Ue[be].$$autoload[P])
          return Re(Ue[be], P);
      }
  }
  function R(y, P) {
    if (y == null || y.$$is_module)
      return J(i, P);
  }
  function ve(y, P) {
    return (y || i).$const_missing(P);
  }
  c.const_get_local = function(y, P, be) {
    var Oe;
    if (y != null)
      return y === "::" && (y = i), !y.$$is_module && !y.$$is_class && ge(c.TypeError, y.toString() + " is not a class/module"), Oe = pe(y, P), Oe != null || be ? Oe : ve(y, P);
  }, c.const_get_qualified = function(y, P, be) {
    var Oe, Ue, Xe, u = c.const_cache_version;
    if (P == null)
      return Oe = pe(i, y), Oe ?? c.const_get_qualified(i, y, be);
    if (y != null)
      return y === "::" && (y = i), !y.$$is_module && !y.$$is_class && ge(c.TypeError, y.toString() + " is not a class/module"), (Ue = y.$$const_cache) == null && (Y(y, "$$const_cache", /* @__PURE__ */ Object.create(null)), Ue = y.$$const_cache), Xe = Ue[P], Xe == null || Xe[0] !== u ? ((Oe = pe(y, P)) != null || (Oe = J(y, P)) != null, Ue[P] = [u, Oe]) : Oe = Xe[1], Oe != null || be ? Oe : ve(y, P);
  }, c.const_cache_version = 1, c.const_get_relative = function(y, P, be) {
    var Oe = y[0], Ue, Xe = c.const_cache_version, u, se;
    return (u = y.$$const_cache) == null && (Y(y, "$$const_cache", /* @__PURE__ */ Object.create(null)), u = y.$$const_cache), se = u[P], se == null || se[0] !== Xe ? ((Ue = pe(Oe, P)) != null || (Ue = Ce(y, P)) != null || (Ue = J(Oe, P)) != null || (Ue = R(Oe, P)) != null, u[P] = [Xe, Ue]) : Ue = se[1], Ue != null || be ? Ue : ve(Oe, P);
  };
  function F(y, P, be) {
    var Oe = !0;
    return (y == null || y === "::") && (y = i), be.$$is_a_module && ((be.$$name == null || be.$$name === r) && (be.$$name = P), be.$$base_module == null && (be.$$base_module = y)), y.$$const = y.$$const || /* @__PURE__ */ Object.create(null), (P in y.$$const || "$$autoload" in y && P in y.$$autoload) && (Oe = !1), y.$$const[P] = be, y.$$ = y.$$const, c.const_cache_version++, y === i && (c[P] = be), Y(y, P, be), Oe && y.$const_added && !y.$const_added.$$pristine && y.$const_added(P), be;
  }
  c.const_set = F, c.constants = function(y, P) {
    P == null && (P = !0);
    var be, Oe = [y], Ue, Xe, u = {}, se;
    for (P && (Oe = Oe.concat(Je(y))), P && y.$$is_module && (Oe = Oe.concat([c.Object]).concat(Je(c.Object))), Ue = 0, Xe = Oe.length; Ue < Xe && (be = Oe[Ue], !(y !== i && be == i)); Ue++) {
      for (se in be.$$const)
        u[se] = !0;
      if (be.$$autoload)
        for (se in be.$$autoload)
          u[se] = !0;
    }
    return Object.keys(u);
  }, c.const_remove = function(y, P) {
    if (c.const_cache_version++, y.$$const[P] != null) {
      var be = y.$$const[P];
      return delete y.$$const[P], be;
    }
    if (y.$$autoload && y.$$autoload[P])
      return delete y.$$autoload[P], r;
    ge(c.NameError, "constant " + y + "::" + y.$name() + " not defined");
  }, c.const_get_relative_factory = function(y) {
    return function(P, be) {
      return c.$$(y, P, be);
    };
  }, c.$$ = c.const_get_relative, c.$$$ = c.const_get_qualified, c.$r = c.const_get_relative_factory;
  function ne(y, P, be) {
    var Oe;
    if (P != null && P.$$bridge ? Oe = function() {
      var se = N(arguments), re = new (m.apply(P.$$constructor, [null].concat(se)))();
      return C(re, Oe.$$prototype), re;
    } : Oe = function() {
    }, y && y !== r && Y(Oe, "displayName", "::" + y), Y(Oe, "$$name", y), Y(Oe, "$$constructor", Oe), Y(Oe, "$$prototype", Oe.prototype), Y(Oe, "$$const", {}), Y(Oe, "$$is_class", !0), Y(Oe, "$$is_a_module", !0), Y(Oe, "$$super", P), Y(Oe, "$$cvars", {}), Y(Oe, "$$own_included_modules", []), Y(Oe, "$$own_prepended_modules", []), Y(Oe, "$$ancestors", []), Y(Oe, "$$ancestors_cache_version", null), Y(Oe, "$$subclasses", []), Y(Oe.$$prototype, "$$class", Oe), c.Class && C(Oe, c.Class.prototype), P != null) {
      if (C(Oe.$$prototype, P.$$prototype), be !== !0)
        if (typeof WeakRef < "u") {
          var Ue, Xe, u = [];
          for (Ue = 0; Ue < P.$$subclasses.length; Ue++)
            Xe = P.$$subclasses[Ue], Xe.deref() !== void 0 && u.push(Xe);
          u.push(new WeakRef(Oe)), P.$$subclasses = u;
        } else
          P.$$subclasses.push(Oe);
      P.$$meta && c.build_class_singleton_class(Oe);
    }
    return Oe;
  }
  c.allocate_class = ne;
  function H(y, P) {
    var be = pe(y, P);
    if (be)
      return be.$$is_class || ge(c.TypeError, P + " is not a class"), be;
  }
  function we(y, P) {
    y.$$super !== P && ge(c.TypeError, "superclass mismatch for class " + y.$$name);
  }
  c.klass = function(y, P, be) {
    var Oe;
    y == null || y == "::" ? y = i : !y.$$is_class && !y.$$is_module && (y = y.$$class), P != null && (!P.hasOwnProperty || P.hasOwnProperty && !P.hasOwnProperty("$$is_class")) && (P.constructor && P.constructor.name == "Function" ? (Oe = P, P = i) : ge(c.TypeError, "superclass must be a Class (" + (P.constructor && (P.constructor.name || P.constructor.$$name) || typeof P) + " given)"));
    var Ue = H(y, be);
    return Ue != null ? P && we(Ue, P) : (P == null && (P = i), Ue = ne(be, P), F(y, be, Ue), P.$inherited && P.$inherited(Ue), Oe && c.bridge(Oe, Ue)), c.trace_class && ae(Ue), Ue;
  };
  function _e(y) {
    var P = function() {
    }, be = P;
    return y && Y(P, "displayName", y + ".constructor"), Y(be, "$$name", y), Y(be, "$$prototype", P.prototype), Y(be, "$$const", {}), Y(be, "$$is_module", !0), Y(be, "$$is_a_module", !0), Y(be, "$$cvars", {}), Y(be, "$$iclasses", []), Y(be, "$$own_included_modules", []), Y(be, "$$own_prepended_modules", []), Y(be, "$$ancestors", [be]), Y(be, "$$ancestors_cache_version", null), C(be, c.Module.prototype), be;
  }
  c.allocate_module = _e;
  function X(y, P) {
    var be = pe(y, P);
    return be == null && y === i && (be = J(i, P)), be && !be.$$is_module && be !== i && ge(c.TypeError, P + " is not a module"), be;
  }
  c.module = function(y, P) {
    var be;
    return y == null || y == "::" ? y = i : !y.$$is_class && !y.$$is_module && (y = y.$$class), be = X(y, P), be == null && (be = _e(P), F(y, P, be)), c.trace_class && ae(be), be;
  }, c.get_singleton_class = function(y) {
    return y.$$is_number && ge(c.TypeError, "can't define singleton"), y.$$meta ? y.$$meta : y.hasOwnProperty("$$is_class") ? c.build_class_singleton_class(y) : y.hasOwnProperty("$$is_module") ? c.build_module_singleton_class(y) : c.build_object_singleton_class(y);
  };
  function w(y, P) {
    y.hasOwnProperty("$$meta") ? y.$$meta = P : Y(y, "$$meta", P), y.$$frozen ? y.$$meta.$freeze() : C(y, P.$$prototype);
  }
  c.build_class_singleton_class = function(y) {
    if (y.$$meta)
      return y.$$meta;
    var P = y === n ? o : c.get_singleton_class(y.$$super), be = ne(null, P, !0);
    return Y(be, "$$is_singleton", !0), Y(be, "$$singleton_of", y), w(y, be), Y(y, "$$class", c.Class), be;
  }, c.build_module_singleton_class = function(y) {
    if (y.$$meta)
      return y.$$meta;
    var P = ne(null, c.Module, !0);
    return Y(P, "$$is_singleton", !0), Y(P, "$$singleton_of", y), w(y, P), Y(y, "$$class", c.Module), P;
  }, c.build_object_singleton_class = function(y) {
    var P = y.$$class, be = ne(r, P, !0);
    return Y(be, "$$is_singleton", !0), Y(be, "$$singleton_of", y), delete be.$$prototype.$$class, w(y, be), be;
  }, c.is_method = function(y) {
    return y[0] === "$" && y[1] !== "$";
  }, c.instance_methods = function(y) {
    for (var P = [], be = [], Oe = Je(y), Ue = 0, Xe = Oe.length; Ue < Xe; Ue++) {
      var u = Oe[Ue], se = u.$$prototype;
      se.hasOwnProperty("$$dummy") && (se = se.$$define_methods_on);
      for (var re = Object.getOwnPropertyNames(se), W = 0, $e = re.length; W < $e; W++) {
        var S = re[W];
        if (c.is_method(S)) {
          var Z = S.slice(1), Be = se[S];
          Be.$$stub && P.indexOf(Z) === -1 && P.push(Z), !Be.$$stub && be.indexOf(Z) === -1 && P.indexOf(Z) === -1 && be.push(Z);
        }
      }
    }
    return be;
  }, c.own_instance_methods = function(y) {
    var P = [], be = y.$$prototype;
    be.hasOwnProperty("$$dummy") && (be = be.$$define_methods_on);
    for (var Oe = Object.getOwnPropertyNames(be), Ue = 0, Xe = Oe.length; Ue < Xe; Ue++) {
      var u = Oe[Ue];
      if (c.is_method(u)) {
        var se = be[u];
        if (!se.$$stub) {
          var re = u.slice(1);
          P.push(re);
        }
      }
    }
    return P;
  }, c.methods = function(y) {
    return c.instance_methods(y.$$meta || y.$$class);
  }, c.own_methods = function(y) {
    return y.$$meta ? c.own_instance_methods(y.$$meta) : [];
  }, c.receiver_methods = function(y) {
    var P = c.get_singleton_class(y), be = c.own_instance_methods(P), Oe = c.own_instance_methods(P.$$super);
    return be.concat(Oe);
  }, c.class_variables = function(y) {
    var P = Je(y), be, Oe = P.length, Ue = {};
    for (be = Oe - 1; be >= 0; be--) {
      var Xe = P[be];
      for (var u in Xe.$$cvars)
        Ue[u] = Xe.$$cvars[u];
    }
    return Ue;
  }, c.class_variable_set = function(y, P, be) {
    var Oe = Je(y), Ue, Xe = Oe.length;
    for (Ue = Xe - 2; Ue >= 0; Ue--) {
      var u = Oe[Ue];
      if (b(u.$$cvars, P))
        return u.$$cvars[P] = be, be;
    }
    return y.$$cvars[P] = be, be;
  }, c.class_variable_get = function(y, P, be) {
    if (b(y.$$cvars, P))
      return y.$$cvars[P];
    var Oe = Je(y), Ue, Xe = Oe.length;
    for (Ue = 0; Ue < Xe; Ue++) {
      var u = Oe[Ue];
      if (b(u.$$cvars, P))
        return u.$$cvars[P];
    }
    return be || ge(c.NameError, "uninitialized class variable " + P + " in " + y.$name()), r;
  };
  function h(y) {
    return y.hasOwnProperty("$$iclass") && y.hasOwnProperty("$$root");
  }
  function d(y) {
    for (var P = [], be, Oe = Object.getPrototypeOf(y.$$prototype); Oe && !Oe.hasOwnProperty("$$class"); )
      be = ie(Oe), be && P.push(be), Oe = Object.getPrototypeOf(Oe);
    return P;
  }
  function _(y) {
    var P = [], be, Oe = Object.getPrototypeOf(y.$$prototype);
    if (y.$$prototype.hasOwnProperty("$$dummy"))
      for (; Oe && Oe !== y.$$prototype.$$define_methods_on; )
        be = ie(Oe), be && P.push(be), Oe = Object.getPrototypeOf(Oe);
    return P;
  }
  c.append_features = function(y, P) {
    var be = Je(y), Oe = [];
    be.indexOf(P) !== -1 && ge(c.ArgumentError, "cyclic include detected");
    for (var Ue = 0, Xe = be.length; Ue < Xe; Ue++) {
      var u = be[Ue], se = $(u);
      Y(se, "$$included", !0), Oe.push(se);
    }
    var re = Je(P), W = D(Oe), $e, S;
    if (re.indexOf(y) === -1)
      $e = P.$$prototype, S = Object.getPrototypeOf(P.$$prototype);
    else {
      for (var Z = P.$$prototype, Be = Object.getPrototypeOf(Z); Be != null && !(Be.$$module === y && h(Be)); )
        Z = Be, Be = Object.getPrototypeOf(Be);
      if (Be) {
        for (var V = Object.getPrototypeOf(Be); V.hasOwnProperty("$$iclass") && !h(V); )
          V = Object.getPrototypeOf(V);
        $e = Z, S = V;
      } else
        $e = P.$$prototype, S = Object.getPrototypeOf(P.$$prototype);
    }
    C($e, W.first), C(W.last, S), P.$$own_included_modules = d(P), c.const_cache_version++;
  }, c.prepend_features = function(y, P) {
    var be = Je(y), Oe = [];
    be.indexOf(P) !== -1 && ge(c.ArgumentError, "cyclic prepend detected");
    for (var Ue = 0, Xe = be.length; Ue < Xe; Ue++) {
      var u = be[Ue], se = $(u);
      Y(se, "$$prepended", !0), Oe.push(se);
    }
    var re = D(Oe), W = P.$$prototype, $e = Object.getPrototypeOf(W), S, Z, Be;
    W.hasOwnProperty("$$dummy") ? S = W.$$define_methods_on : (S = I(P), g(P), Y(W, "$$dummy", !0), Y(W, "$$define_methods_on", S), C(W, S), C(S, $e));
    var V = Je(P);
    if (V.indexOf(y) === -1)
      for (Z = W, Be = Object.getPrototypeOf(W); Be != null && !(Be.hasOwnProperty("$$root") || Be === S || !Be.hasOwnProperty("$$iclass")); )
        Be = Object.getPrototypeOf(Be);
    else
      ge(c.RuntimeError, "Prepending a module multiple times is not supported");
    C(Z, re.first), C(re.last, Be), P.$$own_prepended_modules = _(P), c.const_cache_version++;
  };
  function g(y) {
    for (var P = y.$$prototype, be = Object.getOwnPropertyNames(P), Oe = 0; Oe < be.length; Oe++) {
      var Ue = be[Oe];
      c.is_method(Ue) && delete P[Ue];
    }
  }
  function $(y) {
    var P = I(y);
    return y.$$is_module && y.$$iclasses.push(P), P;
  }
  function I(y) {
    var P = {}, be = y.$$prototype;
    be.hasOwnProperty("$$dummy") && (be = be.$$define_methods_on);
    var Oe = Object.getOwnPropertyNames(be), Ue = Oe.length, Xe;
    for (Xe = 0; Xe < Ue; Xe++) {
      var u = Oe[Xe];
      Y(P, u, be[u]);
    }
    return Y(P, "$$iclass", !0), Y(P, "$$module", y), P;
  }
  function D(y) {
    var P = y.length, be = y[0];
    if (Y(be, "$$root", !0), P === 1)
      return { first: be, last: be };
    for (var Oe = be, Ue = 1; Ue < P; Ue++) {
      var Xe = y[Ue];
      C(Oe, Xe), Oe = Xe;
    }
    return { first: y[0], last: y[P - 1] };
  }
  c.bridge = function(y, P) {
    y.hasOwnProperty("$$bridge") && ge(c.ArgumentError, "already bridged"), Y(y, "$$bridge", P), C(y.prototype, (P.$$super || c.Object).$$prototype), Y(P, "$$prototype", y.prototype), Y(P.$$prototype, "$$class", P), Y(P, "$$constructor", y), Y(P, "$$bridge", !0);
  };
  function ie(y) {
    if (!y.hasOwnProperty("$$dummy")) {
      if (y.hasOwnProperty("$$iclass"))
        return y.$$module;
      if (y.hasOwnProperty("$$class"))
        return y.$$class;
    }
  }
  function Me(y) {
    return y.$$own_prepended_modules.concat([y]).concat(y.$$own_included_modules);
  }
  function Je(y) {
    if (!y)
      return [];
    if (y.$$ancestors_cache_version === c.const_cache_version)
      return y.$$ancestors;
    var P = [], be, Oe, Ue;
    for (be = 0, Oe = Me(y), Ue = Oe.length; be < Ue; be++)
      P.push(Oe[be]);
    if (y.$$super)
      for (be = 0, Oe = Je(y.$$super), Ue = Oe.length; be < Ue; be++)
        P.push(Oe[be]);
    return y.$$ancestors_cache_version = c.const_cache_version, y.$$ancestors = P, P;
  }
  c.ancestors = Je, c.included_modules = function(y) {
    for (var P = [], be = null, Oe = Object.getPrototypeOf(y.$$prototype); Oe && Object.getPrototypeOf(Oe); Oe = Object.getPrototypeOf(Oe))
      be = ie(Oe), be && be.$$is_module && Oe.$$iclass && Oe.$$included && P.push(be);
    return P;
  }, c.add_stubs = function(y) {
    var P = c.BasicObject.$$prototype, be, Oe;
    y = y.split(",");
    for (var Ue = 0, Xe = y.length; Ue < Xe; Ue++)
      be = gt(y[Ue]), Oe = P[be], (Oe == null || Oe.$$stub) && c.add_stub_for(P, be);
  }, c.add_stub_for = function(y, P) {
    Y(y, P, c.stub_for(P));
  }, c.stub_for = function(y) {
    function P() {
      this.$method_missing.$$p = P.$$p, P.$$p = null;
      for (var be = new Array(arguments.length), Oe = 0, Ue = be.length; Oe < Ue; Oe++)
        be[Oe] = arguments[Oe];
      return this.$method_missing.apply(this, [y.slice(1)].concat(be));
    }
    return P.$$stub = !0, P;
  }, c.ac = function(y, P, be, Oe) {
    var Ue = "";
    be.$$is_a_module ? Ue += be.$$name + "." : Ue += be.$$class.$$name + "#", Ue += Oe, ge(c.ArgumentError, "[" + Ue + "] wrong number of arguments (given " + y + ", expected " + P + ")");
  }, c.block_ac = function(y, P, be) {
    var Oe = "`block in " + be + "'";
    ge(c.ArgumentError, Oe + ": wrong number of arguments (given " + y + ", expected " + P + ")");
  };
  function it(y) {
    return y.hasOwnProperty("$$meta") && y.$$meta !== null ? Je(y.$$meta) : Je(y.$$class);
  }
  c.find_super = function(y, P, be, Oe, Ue) {
    var Xe = gt(P), u, se;
    u = it(y);
    for (var re = u.indexOf(be.$$owner), W = re + 1; W < u.length; W++) {
      var $e = u[W], S = $e.$$prototype;
      if (S.hasOwnProperty("$$dummy") && (S = S.$$define_methods_on), S.hasOwnProperty(Xe)) {
        se = S[Xe];
        break;
      }
    }
    return !Oe && se && se.$$stub && y.$method_missing.$$pristine && ge(c.NoMethodError, "super: no superclass method `" + P + "' for " + y, P), se.$$stub && !Ue ? null : se;
  }, c.find_block_super = function(y, P, be, Oe, Ue) {
    var Xe = P;
    return be || ge(c.RuntimeError, "super called outside of method"), Ue && be.$$define_meth && ge(
      c.RuntimeError,
      "implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly"
    ), be.$$def && (Xe = be.$$jsid), c.find_super(y, Xe, be, Oe);
  }, c.find_super_dispatcher = c.find_super, c.find_iter_super_dispatcher = c.find_block_super, c.yield1 = function(y, P) {
    typeof y != "function" && ge(c.LocalJumpError, "no block given");
    var be = y.$$has_top_level_mlhs_arg, Oe = y.$$has_trailing_comma_in_args;
    return (y.length > 1 || (be || Oe) && y.length === 1) && (P = c.to_ary(P)), (y.length > 1 || Oe && y.length === 1) && P.$$is_array ? y.apply(null, P) : y(P);
  }, c.yieldX = function(y, P) {
    if (typeof y != "function" && ge(c.LocalJumpError, "no block given"), y.length > 1 && P.length === 1 && P[0].$$is_array)
      return y.apply(null, P[0]);
    if (!P.$$is_array) {
      for (var be = new Array(P.length), Oe = 0, Ue = be.length; Oe < Ue; Oe++)
        be[Oe] = P[Oe];
      return y.apply(null, be);
    }
    return y.apply(null, P);
  }, c.rescue = function(y, P) {
    for (var be = 0; be < P.length; be++) {
      var Oe = P[be];
      if (Oe.$$is_array) {
        var Ue = c.rescue(y, Oe);
        if (Ue)
          return Ue;
      } else if (Oe === c.JS.Error || Oe["$==="](y))
        return Oe;
    }
    return null;
  }, c.is_a = function(y, P) {
    if (P != null && y.$$meta === P || y.$$class === P)
      return !0;
    if (y.$$is_number && P.$$is_number_class)
      return P.$$is_integer_class ? y % 1 === 0 : !0;
    var be = Je(y.$$is_class ? c.get_singleton_class(y) : y.$$meta || y.$$class);
    return be.indexOf(P) !== -1;
  }, c.to_hash = function(y) {
    if (y.$$is_hash)
      return y;
    if (y["$respond_to?"]("to_hash", !0)) {
      var P = y.$to_hash();
      if (P.$$is_hash)
        return P;
      ge(c.TypeError, "Can't convert " + y.$$class + " to Hash (" + y.$$class + "#to_hash gives " + P.$$class + ")");
    } else
      ge(c.TypeError, "no implicit conversion of " + y.$$class + " into Hash");
  }, c.to_ary = function(y) {
    if (y.$$is_array)
      return y;
    if (y["$respond_to?"]("to_ary", !0)) {
      var P = y.$to_ary();
      if (P === r)
        return [y];
      if (P.$$is_array)
        return P;
      ge(c.TypeError, "Can't convert " + y.$$class + " to Array (" + y.$$class + "#to_ary gives " + P.$$class + ")");
    } else
      return [y];
  }, c.to_a = function(y) {
    if (y.$$is_array)
      return y.slice();
    if (y["$respond_to?"]("to_a", !0)) {
      var P = y.$to_a();
      if (P === r)
        return [y];
      if (P.$$is_array)
        return P;
      ge(c.TypeError, "Can't convert " + y.$$class + " to Array (" + y.$$class + "#to_a gives " + P.$$class + ")");
    } else
      return [y];
  }, c.extract_kwargs = function(y) {
    var P = y[y.length - 1];
    if (P != null && c.respond_to(P, "$to_hash", !0))
      return z(y, y.length - 1), P;
  }, c.kwrestargs = function(y, P) {
    var be = [], Oe = {}, Ue, Xe = y.$$smap;
    for (Ue in Xe)
      P[Ue] || (be.push(Ue), Oe[Ue] = Xe[Ue]);
    return c.hash2(be, Oe);
  };
  function dt(y, P) {
    typeof P == "number" ? y.$$arity = P : typeof P == "object" && Object.assign(y, P);
  }
  var St = {};
  function gt(y) {
    return St[y] || (St[y] = "$" + y);
  }
  c.jsid = gt, c.send = function(y, P, be, Oe, Ue) {
    var Xe;
    return typeof P == "function" ? (Xe = P, P = null) : typeof P == "string" ? Xe = y[gt(P)] : ge(c.NameError, "Passed method should be a string or a function"), c.send2(y, Xe, P, be, Oe, Ue);
  }, c.send2 = function(y, P, be, Oe, Ue, Xe) {
    return P == null && be != null && y.$method_missing && (P = y.$method_missing, Oe = [be].concat(Oe)), dt(Ue, Xe), typeof Ue == "function" && (P.$$p = Ue), P.apply(y, Oe);
  }, c.refined_send = function(y, P, be, Oe, Ue, Xe) {
    var u, se, re, W, $e, S, Z, Be, V, ke;
    for (W = it(P), u = 0; u < W.length; u++)
      for ($e = c.id(W[u]), se = 0; se < y.length; se++)
        for (S = y[se], re = S.length - 1; re >= 0; re--)
          if (Z = S[re], !(typeof Z.$$refine_modules > "u") && (Be = Z.$$refine_modules, !(typeof Be[$e] > "u") && (V = Be[$e], typeof V.$$prototype[gt(be)] < "u")))
            return ke = V.$$prototype[gt(be)], c.send2(P, ke, be, Oe, Ue, Xe);
    return c.send(P, be, Oe, Ue, Xe);
  }, c.lambda = function(y, P) {
    return y.$$is_lambda = !0, dt(y, P), y;
  }, c.def = function(y, P, be, Oe) {
    return dt(be, Oe), y === c.top ? c.defn(c.Object, P, be) : !y.$$eval && y.$$is_a_module ? c.defn(y, P, be) : c.defs(y, P, be);
  }, c.defn = function(y, P, be) {
    Tt(y), be.displayName = P, be.$$owner = y;
    var Oe = P.substr(1), Ue = y.$$prototype;
    if (Ue.hasOwnProperty("$$dummy") && (Ue = Ue.$$define_methods_on), Y(Ue, P, be), y.$$is_module) {
      y.$$module_function && c.defs(y, P, be);
      for (var Xe = 0, u = y.$$iclasses, se = u.length; Xe < se; Xe++) {
        var re = u[Xe];
        Y(re, P, be);
      }
    }
    var W = y.$$singleton_of;
    return y.$method_added && !y.$method_added.$$stub && !W ? y.$method_added(Oe) : W && W.$singleton_method_added && !W.$singleton_method_added.$$stub && W.$singleton_method_added(Oe), Oe;
  }, c.defs = function(y, P, be, Oe) {
    return dt(be, Oe), (y.$$is_string || y.$$is_number) && ge(c.TypeError, "can't define singleton"), c.defn(c.get_singleton_class(y), P, be);
  }, c.rdef = function(y, P) {
    b(y.$$prototype, P) || ge(c.NameError, "method '" + P.substr(1) + "' not defined in " + y.$name()), delete y.$$prototype[P], y.$$is_singleton ? y.$$prototype.$singleton_method_removed && !y.$$prototype.$singleton_method_removed.$$stub && y.$$prototype.$singleton_method_removed(P.substr(1)) : y.$method_removed && !y.$method_removed.$$stub && y.$method_removed(P.substr(1));
  }, c.udef = function(y, P) {
    (!y.$$prototype[P] || y.$$prototype[P].$$stub) && ge(c.NameError, "method '" + P.substr(1) + "' not defined in " + y.$name()), c.add_stub_for(y.$$prototype, P), y.$$is_singleton ? y.$$prototype.$singleton_method_undefined && !y.$$prototype.$singleton_method_undefined.$$stub && y.$$prototype.$singleton_method_undefined(P.substr(1)) : y.$method_undefined && !y.$method_undefined.$$stub && y.$method_undefined(P.substr(1));
  };
  function wt(y) {
    return typeof y == "function" && !y.$$stub;
  }
  c.alias = function(y, P, be) {
    var Oe = gt(P), Ue = gt(be), Xe, u;
    if (typeof y.$$prototype > "u" && (y = c.Object), Xe = y.$$prototype[Ue], y.$$eval)
      return c.alias(c.get_singleton_class(y), P, be);
    if (!wt(Xe)) {
      for (var se = y.$$super; typeof Xe != "function" && se; )
        Xe = se[Ue], se = se.$$super;
      !wt(Xe) && y.$$is_module && (Xe = c.Object.$$prototype[Ue]), wt(Xe) || ge(c.NameError, "undefined method `" + be + "' for class `" + y.$name() + "'");
    }
    Xe.$$alias_of && (Xe = Xe.$$alias_of), u = function() {
      var re = u.$$p, W, $e, S;
      for (W = new Array(arguments.length), $e = 0, S = arguments.length; $e < S; $e++)
        W[$e] = arguments[$e];
      return u.$$p = null, c.send(this, Xe, W, re);
    };
    try {
      Object.defineProperty(u, "length", { value: Xe.length });
    } catch {
    }
    return u.displayName = P, u.$$arity = Xe.$$arity == null ? Xe.length : Xe.$$arity, u.$$parameters = Xe.$$parameters, u.$$source_location = Xe.$$source_location, u.$$alias_of = Xe, u.$$alias_name = P, c.defn(y, Oe, u), y;
  }, c.alias_gvar = function(y, P) {
    return Object.defineProperty(ce, y, {
      configurable: !0,
      enumerable: !0,
      get: function() {
        return ce[P];
      },
      set: function(be) {
        ce[P] = be;
      }
    }), r;
  }, c.alias_native = function(y, P, be) {
    var Oe = gt(P), Ue = y.$$prototype[be];
    return (typeof Ue != "function" || Ue.$$stub) && ge(c.NameError, "undefined native method `" + be + "' for class `" + y.$name() + "'"), c.defn(y, Oe, Ue), y;
  }, c.hash_init = function(y) {
    y.$$smap = /* @__PURE__ */ Object.create(null), y.$$map = /* @__PURE__ */ Object.create(null), y.$$keys = [];
  }, c.hash_clone = function(y, P) {
    P.$$none = y.$$none, P.$$proc = y.$$proc;
    for (var be = 0, Oe = y.$$keys, Ue = y.$$smap, Xe = Oe.length, u, se; be < Xe; be++)
      u = Oe[be], u.$$is_string ? se = Ue[u] : (se = u.value, u = u.key), c.hash_put(P, u, se);
  }, c.hash_put = function(y, P, be) {
    if (P.$$is_string) {
      b(y.$$smap, P) || y.$$keys.push(P), y.$$smap[P] = be;
      return;
    }
    var Oe, Ue, Xe;
    if (Oe = y.$$by_identity ? c.id(P) : P.$hash(), !b(y.$$map, Oe)) {
      Ue = { key: P, key_hash: Oe, value: be }, y.$$keys.push(Ue), y.$$map[Oe] = Ue;
      return;
    }
    for (Ue = y.$$map[Oe]; Ue; ) {
      if (P === Ue.key || P["$eql?"](Ue.key)) {
        Xe = void 0, Ue.value = be;
        break;
      }
      Xe = Ue, Ue = Ue.next;
    }
    Xe && (Ue = { key: P, key_hash: Oe, value: be }, y.$$keys.push(Ue), Xe.next = Ue);
  }, c.hash_get = function(y, P) {
    if (P.$$is_string)
      return b(y.$$smap, P) ? y.$$smap[P] : void 0;
    var be, Oe;
    if (be = y.$$by_identity ? c.id(P) : P.$hash(), b(y.$$map, be))
      for (Oe = y.$$map[be]; Oe; ) {
        if (P === Oe.key || P["$eql?"](Oe.key))
          return Oe.value;
        Oe = Oe.next;
      }
  }, c.hash_delete = function(y, P) {
    var be, Oe = y.$$keys, Ue = Oe.length, Xe, u;
    if (P.$$is_string) {
      if (typeof P != "string" && (P = P.valueOf()), !b(y.$$smap, P))
        return;
      for (be = 0; be < Ue; be++)
        if (u = Oe[be], u.$$is_string && typeof u != "string" && (u = u.valueOf()), u === P) {
          Oe.splice(be, 1);
          break;
        }
      return Xe = y.$$smap[P], delete y.$$smap[P], Xe;
    }
    var se = P.$hash();
    if (b(y.$$map, se))
      for (var re = y.$$map[se], W; re; ) {
        if (P === re.key || P["$eql?"](re.key)) {
          for (Xe = re.value, be = 0; be < Ue; be++)
            if (Oe[be] === re) {
              Oe.splice(be, 1);
              break;
            }
          return W && re.next ? W.next = re.next : W ? delete W.next : re.next ? y.$$map[se] = re.next : delete y.$$map[se], Xe;
        }
        W = re, re = re.next;
      }
  }, c.hash_rehash = function(y) {
    for (var P = 0, be = y.$$keys.length, Oe, Ue, Xe; P < be; P++)
      if (!y.$$keys[P].$$is_string && (Oe = y.$$keys[P].key.$hash(), Oe !== y.$$keys[P].key_hash)) {
        for (Ue = y.$$map[y.$$keys[P].key_hash], Xe = void 0; Ue; ) {
          if (Ue === y.$$keys[P]) {
            Xe && Ue.next ? Xe.next = Ue.next : Xe ? delete Xe.next : Ue.next ? y.$$map[y.$$keys[P].key_hash] = Ue.next : delete y.$$map[y.$$keys[P].key_hash];
            break;
          }
          Xe = Ue, Ue = Ue.next;
        }
        if (y.$$keys[P].key_hash = Oe, !b(y.$$map, Oe)) {
          y.$$map[Oe] = y.$$keys[P];
          continue;
        }
        for (Ue = y.$$map[Oe], Xe = void 0; Ue; ) {
          if (Ue === y.$$keys[P]) {
            Xe = void 0;
            break;
          }
          Xe = Ue, Ue = Ue.next;
        }
        Xe && (Xe.next = y.$$keys[P]);
      }
  }, c.hash = function() {
    var y = arguments.length, P, be, Oe, Ue, Xe, u;
    if (y === 1 && arguments[0].$$is_hash)
      return arguments[0];
    if (be = new c.Hash(), c.hash_init(be), y === 1)
      if (P = arguments[0], arguments[0].$$is_array) {
        for (Ue = P.length, Oe = 0; Oe < Ue; Oe++)
          P[Oe].length !== 2 && ge(c.ArgumentError, "value not of length 2: " + P[Oe].$inspect()), Xe = P[Oe][0], u = P[Oe][1], c.hash_put(be, Xe, u);
        return be;
      } else {
        P = arguments[0];
        for (Xe in P)
          b(P, Xe) && (u = P[Xe], c.hash_put(be, Xe, u));
        return be;
      }
    for (y % 2 !== 0 && ge(c.ArgumentError, "odd number of arguments for Hash"), Oe = 0; Oe < y; Oe += 2)
      Xe = arguments[Oe], u = arguments[Oe + 1], c.hash_put(be, Xe, u);
    return be;
  }, c.hash2 = function(y, P) {
    var be = new c.Hash();
    return be.$$smap = P, be.$$map = /* @__PURE__ */ Object.create(null), be.$$keys = y, be;
  }, c.range = function(y, P, be) {
    var Oe = new c.Range();
    return Oe.begin = y, Oe.end = P, Oe.excl = be, Oe;
  };
  var bt = [
    // properties
    "constructor",
    "displayName",
    "__count__",
    "__noSuchMethod__",
    "__parent__",
    "__proto__",
    // methods
    "hasOwnProperty",
    "valueOf"
  ];
  c.ivar = function(y) {
    return bt.indexOf(y) !== -1 && (y += "$"), y;
  };
  function Tt(y) {
    y.$$frozen && ge(c.FrozenError, "can't modify frozen " + y.$class() + ": " + y, c.hash2(["receiver"], { receiver: y }));
  }
  c.deny_frozen_access = Tt, c.freeze = function(y) {
    return Y(y, "$$frozen", !0), y.hasOwnProperty("$$id") || Y(y, "$$id", Te()), y.hasOwnProperty("$$meta") ? y.$$meta.$freeze() : Y(y, "$$meta", null), y.hasOwnProperty("$$comparable") || Y(y, "$$comparable", null), Object.seal(y), y;
  }, c.freeze_props = function(y) {
    var P, be, Oe;
    for (P in y)
      be = typeof P, !((be === "string" || be === "object") && P[0] === "$") && (Oe = Object.getOwnPropertyDescriptor(y, P), Oe && Oe.enumerable && Oe.writable && function() {
        var Ue = y[P];
        Object.defineProperty(y, P, {
          get: function() {
            return Ue;
          },
          set: function(Xe) {
            Tt(y);
          },
          enumerable: !0
        });
      }());
  }, c.escape_regexp = function(y) {
    return y.replace(/([-[\]\/{}()*+?.^$\\| ])/g, "\\$1").replace(/[\n]/g, "\\n").replace(/[\r]/g, "\\r").replace(/[\f]/g, "\\f").replace(/[\t]/g, "\\t");
  }, c.global_regexp = function(y) {
    return y.global ? y : (y.$$g == null ? y.$$g = new RegExp(y.source, (y.multiline ? "gm" : "g") + (y.ignoreCase ? "i" : "")) : y.$$g.lastIndex = null, y.$$g);
  }, c.global_multiline_regexp = function(y) {
    var P, be;
    return y.global && y.multiline ? y : (be = "gm" + (y.ignoreCase ? "i" : ""), y.multiline ? (y.$$g == null && (y.$$g = new RegExp(y.source, be)), P = y.$$g) : (y.$$gm == null && (y.$$gm = new RegExp(y.source, be)), P = y.$$gm), P.lastIndex = null, P);
  }, c.regexp = function(y, P) {
    for (var be, Oe = typeof P < "u" && P && P.indexOf("i") >= 0, Ue = 0, Xe = y.length; Ue < Xe; Ue++)
      be = y[Ue], be instanceof RegExp && (be.ignoreCase !== Oe && c.Kernel.$warn(
        "ignore case doesn't match for " + be.source.$inspect(),
        c.hash({ uplevel: 1 })
      ), be = be.source), be === "" && (be = "(?:" + be + ")"), y[Ue] = be;
    return P ? new RegExp(y.join(""), P) : new RegExp(y.join(""));
  }, c.modules = {}, c.loaded_features = ["corelib/runtime"], c.current_dir = ".", c.require_table = { "corelib/runtime": !0 }, c.normalize = function(y) {
    var P, be, Oe = [], Ue = "/";
    c.current_dir !== "." && (y = c.current_dir.replace(/\/*$/, "/") + y), y = y.replace(/^\.\//, ""), y = y.replace(/\.(rb|opal|js)$/, ""), P = y.split(Ue);
    for (var Xe = 0, u = P.length; Xe < u; Xe++)
      be = P[Xe], be !== "" && (be === ".." ? Oe.pop() : Oe.push(be));
    return Oe.join(Ue);
  }, c.loaded = function(y) {
    var P, be, Oe;
    for (P = 0, be = y.length; P < be; P++)
      Oe = c.normalize(y[P]), !c.require_table[Oe] && (c.loaded_features.push(Oe), c.require_table[Oe] = !0);
  }, c.load_normalized = function(y) {
    c.loaded([y]);
    var P = c.modules[y];
    if (P) {
      var be = P(c);
      if (typeof Promise < "u" && be instanceof Promise)
        return be.then(Le(!0));
    } else {
      var Oe = c.config.missing_require_severity, Ue = "cannot load such file -- " + y;
      Oe === "error" ? ge(c.LoadError, Ue) : Oe === "warning" && e.warn("WARNING: LoadError: " + Ue);
    }
    return !0;
  }, c.load = function(y) {
    return y = c.normalize(y), c.load_normalized(y);
  }, c.require = function(y) {
    return y = c.normalize(y), c.require_table[y] ? !1 : c.load_normalized(y);
  }, c.encodings = /* @__PURE__ */ Object.create(null), c.set_encoding = function(y, P, be) {
    typeof be > "u" && (be = "encoding"), (typeof y == "string" || y.$$frozen === !0) && ge(c.FrozenError, "can't modify frozen String");
    var Oe = c.find_encoding(P);
    return Oe === y[be] || (y[be] = Oe), y;
  }, c.find_encoding = function(y) {
    var P = c.encodings, be = P[y] || P[y.toUpperCase()];
    return be || ge(c.ArgumentError, "unknown encoding name - " + y), be;
  }, c.enc = function(y, P) {
    var be = new String(y);
    return be = c.set_encoding(be, P), be.internal_encoding = be.encoding, be;
  }, c.binary = function(y) {
    var P = new String(y);
    return c.set_encoding(P, "binary", "internal_encoding");
  }, c.last_promise = null, c.promise_unhandled_exception = !1, c.queue = function(y) {
    if (c.last_promise)
      return c.last_promise = c.last_promise.then(function() {
        if (!c.promise_unhandled_exception)
          return y(c);
      }).catch(function(be) {
        c.respond_to(be, "$full_message") && (be = be.$full_message()), e.error(be), c.promise_unhandled_exception = !0, c.exit(1);
      }), c.last_promise;
    var P = y(c);
    return typeof Promise == "function" && typeof P == "object" && P instanceof Promise && (c.last_promise = P), P;
  };
  function yt(y, P) {
    return typeof y == "number" && typeof P == "number";
  }
  c.rb_plus = function(y, P) {
    return yt(y, P) ? y + P : y["$+"](P);
  }, c.rb_minus = function(y, P) {
    return yt(y, P) ? y - P : y["$-"](P);
  }, c.rb_times = function(y, P) {
    return yt(y, P) ? y * P : y["$*"](P);
  }, c.rb_divide = function(y, P) {
    return yt(y, P) ? y / P : y["$/"](P);
  }, c.rb_lt = function(y, P) {
    return yt(y, P) ? y < P : y["$<"](P);
  }, c.rb_gt = function(y, P) {
    return yt(y, P) ? y > P : y["$>"](P);
  }, c.rb_le = function(y, P) {
    return yt(y, P) ? y <= P : y["$<="](P);
  }, c.rb_ge = function(y, P) {
    return yt(y, P) ? y >= P : y["$>="](P);
  };
  function Qe(y, P) {
    return typeof y == "number" && typeof P == "number" || typeof y == "string" && typeof P == "string";
  }
  function Ne(y, P) {
    return Qe(y, P) ? y === P : fe(y["$=="](P));
  }
  c.eqeq = Ne, c.eqeqeq = function(y, P) {
    return Qe(y, P) ? y === P : fe(y["$==="](P));
  }, c.neqeq = function(y, P) {
    return Qe(y, P) ? y !== P : fe(y["$!="](P));
  }, c.not = function(y) {
    return y == null || y === !1 || r === y ? !0 : y === !0 || y["$!"].$$pristine ? !1 : fe(y["$!"]());
  };
  function Le(y) {
    return function() {
      return y;
    };
  }
  c.return_val = Le, c.return_self = function() {
    return this;
  }, c.return_ivar = function(y) {
    return function() {
      return this[y] == null ? r : this[y];
    };
  }, c.assign_ivar = function(y) {
    return function(P) {
      return Tt(this), this[y] = P;
    };
  }, c.assign_ivar_val = function(y, P) {
    return function() {
      return Tt(this), this[y] = P;
    };
  }, c.ensure_kwargs = function(y) {
    if (y == null)
      return c.hash2([], {});
    if (y.$$is_hash)
      return y;
    ge(c.ArgumentError, "expected kwargs");
  }, c.get_kwarg = function(y, P) {
    return b(y.$$smap, P) || ge(c.ArgumentError, "missing keyword: " + P), y.$$smap[P];
  }, c.large_array_unpack = function(y) {
    var P = y.split(","), be = P.length, Oe;
    for (Oe = 0; Oe < be; Oe++)
      switch (P[Oe][0]) {
        case void 0:
          P[Oe] = r;
          break;
        case "-":
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          P[Oe] = +P[Oe];
      }
    return P;
  }, c.BasicObject = n = ne("BasicObject", null), c.Object = i = ne("Object", c.BasicObject), c.Module = s = ne("Module", c.Object), c.Class = o = ne("Class", c.Module), c.Opal = a = _e("Opal"), c.Kernel = l = _e("Kernel"), C(c.BasicObject, c.Class.$$prototype), C(c.Object, c.Class.$$prototype), C(c.Module, c.Class.$$prototype), C(c.Class, c.Class.$$prototype), n.$$const.BasicObject = n, F(i, "BasicObject", n), F(i, "Object", i), F(i, "Module", s), F(i, "Class", o), F(i, "Opal", a), F(i, "Kernel", l), n.$$class = o, i.$$class = o, s.$$class = o, o.$$class = o, a.$$class = s, l.$$class = s, Y(i.$$prototype, "toString", function() {
    var y = this.$to_s();
    return y.$$is_string && typeof y == "object" ? y.valueOf() : y;
  }), Y(i.$$prototype, "$require", c.require), c.top = new i(), c.top.$to_s = c.top.$inspect = Le("main"), c.top.$define_method = qe;
  function qe() {
    var y = N(arguments), P = qe.$$p;
    return qe.$$p = null, c.send(i, "define_method", y, P);
  }
  c.NilClass = ne("NilClass", c.Object), F(i, "NilClass", c.NilClass), r = c.nil = new c.NilClass(), r.$$id = A, r.call = r.apply = function() {
    ge(c.LocalJumpError, "no block given");
  }, r.$$frozen = !0, r.$$comparable = !1, Object.seal(r), c.thrower = function(y) {
    var P = new Error("unexpected " + y);
    return P.$thrower_type = y, P.$throw = function(be) {
      throw be == null && (be = r), P.$v = be, P;
    }, P;
  }, c.t_eval_return = c.thrower("return"), TypeError.$$super = Error, c.file_sources = {};
}).call(void 0);
Opal.loaded(["corelib/runtime.js"]);
Opal.modules["corelib/helpers"] = function(t) {
  var e = t.type_error, r = t.coerce_to, n = t.module, i = t.defs, s = t.slice, o = t.eqeqeq, a = t.Kernel, l = t.truthy, c = t.Opal, f = t.nil, m = t.$$$;
  return t.add_stubs("===,raise,respond_to?,nil?,__send__,<=>,class,coerce_to!,new,to_s,__id__"), function(b) {
    var C = n(b, "Opal");
    i(C, "$bridge", function(A, Q) {
      return t.bridge(A, Q);
    }), i(C, "$coerce_to!", function(A, Q, Te, ce) {
      var ge, Y, fe = f;
      return ge = s(arguments, 3), Y = ge, fe = r(A, Q, Te, Y), o(Q, fe) || a.$raise(e(A, Q, Te, fe)), fe;
    }, -4), i(C, "$coerce_to?", function(A, Q, Te, ce) {
      var ge, Y, fe = f;
      return ge = s(arguments, 3), Y = ge, !l(A["$respond_to?"](Te)) || (fe = r(A, Q, Te, Y), l(fe["$nil?"]())) ? f : (o(Q, fe) || a.$raise(e(A, Q, Te, fe)), fe);
    }, -4), i(C, "$try_convert", function(A, Q, Te) {
      return o(Q, A) ? A : l(A["$respond_to?"](Te)) ? A.$__send__(Te) : f;
    }), i(C, "$compare", function(A, Q) {
      var Te = f;
      return Te = A["$<=>"](Q), l(Te === f) && a.$raise(m("ArgumentError"), "comparison of " + A.$class() + " with " + Q.$class() + " failed"), Te;
    }), i(C, "$destructure", function(A) {
      if (A.length == 1)
        return A[0];
      if (A.$$is_array)
        return A;
      for (var Q = new Array(A.length), Te = 0, ce = Q.length; Te < ce; Te++)
        Q[Te] = A[Te];
      return Q;
    }), i(C, "$respond_to?", function(A, Q, Te) {
      return Te == null && (Te = !1), A == null || !A.$$class ? !1 : A["$respond_to?"](Q, Te);
    }, -3), i(C, "$instance_variable_name!", function(A) {
      return A = c["$coerce_to!"](A, m("String"), "to_str"), l(/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(A)) || a.$raise(m("NameError").$new("'" + A + "' is not allowed as an instance variable name", A)), A;
    }), i(C, "$class_variable_name!", function(A) {
      return A = c["$coerce_to!"](A, m("String"), "to_str"), l(A.length < 3 || A.slice(0, 2) !== "@@") && a.$raise(m("NameError").$new("`" + A + "' is not allowed as a class variable name", A)), A;
    }), i(C, "$const_name?", function(A) {
      return typeof A != "string" && (A = c["$coerce_to!"](A, m("String"), "to_str")), A[0] === A[0].toUpperCase();
    }), i(C, "$const_name!", function(A) {
      var Q = this;
      return l(m("::", "String", "skip_raise") ? "constant" : f) && (A = c["$coerce_to!"](A, m("String"), "to_str")), (!A || A[0] != A[0].toUpperCase()) && Q.$raise(m("NameError"), "wrong constant name " + A), A;
    }), i(C, "$pristine", function(A, Q) {
      var Te, ce;
      Te = s(arguments, 1), ce = Te;
      for (var ge, Y, fe = ce.length - 1; fe >= 0; fe--)
        ge = ce[fe], Y = A.$$prototype[t.jsid(ge)], Y && !Y.$$stub && (Y.$$pristine = !0);
      return f;
    }, -2);
    var N = [];
    return i(C, "$inspect", function(A) {
      var Q = f, Te = !1;
      return function() {
        try {
          try {
            return A === null ? "null" : A === void 0 ? "undefined" : typeof A.$$class > "u" ? Object.prototype.toString.apply(A) : typeof A.$inspect != "function" || A.$inspect.$$stub || N.indexOf(A.$__id__()) !== -1 ? "#<" + A.$$class + ":0x" + A.$__id__().$to_s(16) + ">" : (N.push(A.$__id__()), Te = !0, A.$inspect());
          } catch (ce) {
            if (t.rescue(ce, [m("Exception")])) {
              Q = ce;
              try {
                return "#<" + A.$$class + ":0x" + A.$__id__().$to_s(16) + ">";
              } finally {
                t.pop_exception();
              }
            } else
              throw ce;
          }
        } finally {
          Te && N.pop();
        }
      }();
    }, -1);
  }("::");
};
Opal.modules["corelib/module"] = function(t) {
  var e = t.truthy, r = t.coerce_to, n = t.const_set, i = t.Object, s = t.return_ivar, o = t.assign_ivar, a = t.ivar, l = t.deny_frozen_access, c = t.freeze, f = t.prop, m = t.jsid, b = t.klass, C = t.defs, N = t.send, z = t.def, A = t.eqeqeq, Q = t.Module, Te = t.Kernel, ce = t.rb_lt, ge = t.rb_gt, Y = t.slice, fe = t.to_a, ae = t.hash2, Re = t.Opal, pe = t.return_val, Ce = t.eqeq, J = t.lambda, R = t.range, ve = t.send2, F = t.find_super, ne = t.alias, H = [], we = t.nil, _e = t.$$$;
  return t.add_stubs("module_eval,to_proc,===,raise,equal?,<,>,nil?,attr_reader,attr_writer,warn,attr_accessor,const_name?,class_variable_name!,pristine,const_name!,=~,new,inject,split,const_get,==,start_with?,!~,bind,call,class,frozen?,name,append_features,included,cover?,size,merge,compile,proc,any?,prepend_features,prepended,to_s,__id__,constants,include?,copy_class_variables,copy_constants,class_exec,module_exec,inspect"), function(X, w, h) {
    var d = b(X, w, "Module"), _ = [d].concat(h), g = t.$r(_);
    return C(d, "$allocate", function() {
      var I = this, D = t.allocate_module(we, function() {
      });
      return I !== t.Module && Object.setPrototypeOf(D, I.$$prototype), D;
    }), z(d, "$initialize", function $() {
      var I = $.$$p || we, D = this;
      return $.$$p = null, I !== we ? N(D, "module_eval", [], I.$to_proc()) : we;
    }), z(d, "$===", function(I) {
      var D = this;
      return e(I == null) ? !1 : t.is_a(I, D);
    }), z(d, "$<", function(I) {
      var D = this;
      A(Q, I) || Te.$raise(_e("TypeError"), "compared with non class/module");
      var ie = D, Me, Je, it;
      if (ie === I)
        return !1;
      for (Je = 0, Me = t.ancestors(D), it = Me.length; Je < it; Je++)
        if (Me[Je] === I)
          return !0;
      for (Je = 0, Me = t.ancestors(I), it = Me.length; Je < it; Je++)
        if (Me[Je] === D)
          return !1;
      return we;
    }), z(d, "$<=", function(I) {
      var D = this, ie = we;
      return e(ie = D["$equal?"](I)) ? ie : ce(D, I);
    }), z(d, "$>", function(I) {
      var D = this;
      return A(Q, I) || Te.$raise(_e("TypeError"), "compared with non class/module"), ce(I, D);
    }), z(d, "$>=", function(I) {
      var D = this, ie = we;
      return e(ie = D["$equal?"](I)) ? ie : ge(D, I);
    }), z(d, "$<=>", function(I) {
      var D = this, ie = we;
      return D === I ? 0 : !A(Q, I) || (ie = ce(D, I), e(ie["$nil?"]())) ? we : e(ie) ? -1 : 1;
    }), z(d, "$alias_method", function(I, D) {
      var ie = this;
      return l(ie), I = r(I, _e("String"), "to_str"), D = r(D, _e("String"), "to_str"), t.alias(ie, I, D), ie;
    }), z(d, "$alias_native", function(I, D) {
      var ie = this;
      return D == null && (D = I), l(ie), t.alias_native(ie, I, D), ie;
    }, -2), z(d, "$ancestors", function() {
      var I = this;
      return t.ancestors(I);
    }), z(d, "$append_features", function(I) {
      var D = this;
      return l(I), t.append_features(D, I), D;
    }), z(d, "$attr_accessor", function(I) {
      var D, ie, Me = this;
      return D = Y(arguments), ie = D, N(Me, "attr_reader", fe(ie)), N(Me, "attr_writer", fe(ie));
    }, -1), z(d, "$attr", function(I) {
      var D, ie, Me = this;
      return D = Y(arguments), ie = D, ie.length == 2 && (ie[1] === !0 || ie[1] === !1) ? (Me.$warn("optional boolean argument is obsoleted", ae(["uplevel"], { uplevel: 1 })), ie[1] ? Me.$attr_accessor(ie[0]) : Me.$attr_reader(ie[0]), we) : N(Me, "attr_reader", fe(ie));
    }, -1), z(d, "$attr_reader", function(I) {
      var D, ie, Me = this;
      D = Y(arguments), ie = D, l(Me);
      for (var Je = Me.$$prototype, it = ie.length - 1; it >= 0; it--) {
        var dt = ie[it], St = m(dt), gt = a(dt), wt = s(gt);
        t.prop(Je, gt, we), wt.$$parameters = [], wt.$$arity = 0, t.defn(Me, St, wt);
      }
      return we;
    }, -1), z(d, "$attr_writer", function(I) {
      var D, ie, Me = this;
      D = Y(arguments), ie = D, l(Me);
      for (var Je = Me.$$prototype, it = ie.length - 1; it >= 0; it--) {
        var dt = ie[it], St = m(dt + "="), gt = a(dt), wt = o(gt);
        wt.$$parameters = [["req"]], wt.$$arity = 1, t.prop(Je, gt, we), t.defn(Me, St, wt);
      }
      return we;
    }, -1), z(d, "$autoload", function(I, D) {
      var ie = this;
      return l(ie), g("Opal")["$const_name?"](I) || Te.$raise(_e("NameError"), "autoload must be constant name: " + I), D == "" && Te.$raise(_e("ArgumentError"), "empty file name"), ie.$$const.hasOwnProperty(I) || (ie.$$autoload || (ie.$$autoload = {}), t.const_cache_version++, ie.$$autoload[I] = { path: D, loaded: !1, required: !1, success: !1, exception: !1 }, ie.$const_added && !ie.$const_added.$$pristine && ie.$const_added(I)), we;
    }), z(d, "$autoload?", function(I) {
      var D = this;
      if (D.$$autoload && D.$$autoload[I] && !D.$$autoload[I].required && !D.$$autoload[I].success)
        return D.$$autoload[I].path;
      for (var ie = D.$ancestors(), Me = 0, Je = ie.length; Me < Je; Me++)
        if (ie[Me].$$autoload && ie[Me].$$autoload[I] && !ie[Me].$$autoload[I].required && !ie[Me].$$autoload[I].success)
          return ie[Me].$$autoload[I].path;
      return we;
    }), z(d, "$class_variables", function() {
      var I = this;
      return Object.keys(t.class_variables(I));
    }), z(d, "$class_variable_get", function(I) {
      var D = this;
      return I = Re["$class_variable_name!"](I), t.class_variable_get(D, I, !1);
    }), z(d, "$class_variable_set", function(I, D) {
      var ie = this;
      return l(ie), I = Re["$class_variable_name!"](I), t.class_variable_set(ie, I, D);
    }), z(d, "$class_variable_defined?", function(I) {
      var D = this;
      return I = Re["$class_variable_name!"](I), t.class_variables(D).hasOwnProperty(I);
    }), z(d, "$const_added", pe(we)), Re.$pristine(d, "const_added"), z(d, "$remove_class_variable", function(I) {
      var D = this;
      if (l(D), I = Re["$class_variable_name!"](I), t.hasOwnProperty.call(D.$$cvars, I)) {
        var ie = D.$$cvars[I];
        return delete D.$$cvars[I], ie;
      } else
        Te.$raise(_e("NameError"), "cannot remove " + I + " for " + D);
    }), z(d, "$constants", function(I) {
      var D = this;
      return I == null && (I = !0), t.constants(D, I);
    }, -1), C(d, "$constants", function(I) {
      var D = this;
      if (I == null) {
        var ie = (D.$$nesting || []).concat(i), Me, Je = {}, it, dt;
        for (it = 0, dt = ie.length; it < dt; it++)
          for (Me in ie[it].$$const)
            Je[Me] = !0;
        return Object.keys(Je);
      } else
        return t.constants(D, I);
    }, -1), C(d, "$nesting", function() {
      var I = this;
      return I.$$nesting || [];
    }), z(d, "$const_defined?", function(I, D) {
      var ie = this;
      D == null && (D = !0), I = g("Opal")["$const_name!"](I), e(I["$=~"](_e(Re, "CONST_NAME_REGEXP"))) || Te.$raise(_e("NameError").$new("wrong constant name " + I, I));
      var Me, Je = [ie], it, dt;
      for (D && (Je = Je.concat(t.ancestors(ie)), ie.$$is_module && (Je = Je.concat([i]).concat(t.ancestors(i)))), it = 0, dt = Je.length; it < dt; it++)
        if (Me = Je[it], Me.$$const[I] != null || Me.$$autoload && Me.$$autoload[I] && !Me.$$autoload[I].required && !Me.$$autoload[I].success)
          return !0;
      return !1;
    }, -2), z(d, "$const_get", function(I, D) {
      var ie = this;
      return D == null && (D = !0), I = g("Opal")["$const_name!"](I), I.indexOf("::") === 0 && I !== "::" && (I = I.slice(2)), e(I.indexOf("::") != -1 && I != "::") ? N(I.$split("::"), "inject", [ie], function(Je, it) {
        return Je == null && (Je = we), it == null && (it = we), Je.$const_get(it);
      }) : (e(I["$=~"](_e(Re, "CONST_NAME_REGEXP"))) || Te.$raise(_e("NameError").$new("wrong constant name " + I, I)), D ? t.$$([ie], I) : t.const_get_local(ie, I));
    }, -2), z(d, "$const_missing", function(I) {
      var D = this, ie = we;
      return ie = Ce(D, i) ? I : "" + D + "::" + I, Te.$raise(_e("NameError").$new("uninitialized constant " + ie, I));
    }), z(d, "$const_set", function(I, D) {
      var ie = this;
      return l(ie), I = Re["$const_name!"](I), (e(I["$!~"](_e(Re, "CONST_NAME_REGEXP"))) || e(I["$start_with?"]("::"))) && Te.$raise(_e("NameError").$new("wrong constant name " + I, I)), n(ie, I, D), D;
    }), z(d, "$public_constant", pe(we)), z(d, "$define_method", function $(I, D) {
      var ie = $.$$p || we, Me = this, Je = we, it = we;
      return $.$$p = null, l(Me), D === void 0 && ie === we && Te.$raise(_e("ArgumentError"), "tried to create a Proc object without a block"), ie = e(Je = ie) ? Je : A(_e("Proc"), it = D) ? D : A(_e("Method"), it) ? D.$to_proc().$$unbound : A(_e("UnboundMethod"), it) ? J(function dt(St) {
        var gt, wt, bt = dt.$$s == null ? this : dt.$$s, Tt = we;
        return gt = Y(arguments), wt = gt, Tt = D.$bind(bt), N(Tt, "call", fe(wt));
      }, { $$arity: -1, $$s: Me }) : Te.$raise(_e("TypeError"), "wrong argument type " + ie.$class() + " (expected Proc/Method)"), typeof Proxy < "u" && (ie.$$proxy_target = ie, ie = new Proxy(ie, {
        apply: function(dt, St, gt) {
          var wt = dt.$$jsid;
          dt.$$jsid = I;
          try {
            return dt.apply(St, gt);
          } catch (bt) {
            if (bt === dt.$$brk || bt === dt.$$ret)
              return bt.$v;
            throw bt;
          } finally {
            dt.$$jsid = wt;
          }
        }
      })), ie.$$jsid = I, ie.$$s = null, ie.$$def = ie, ie.$$define_meth = !0, t.defn(Me, m(I), ie);
    }, -2), z(d, "$freeze", function() {
      var I = this;
      return e(I["$frozen?"]()) ? I : (I.hasOwnProperty("$$base_module") || f(I, "$$base_module", null), c(I));
    }), z(d, "$remove_method", function(I) {
      var D, ie, Me = this;
      D = Y(arguments), ie = D;
      for (var Je = 0; Je < ie.length; Je++) {
        var it = ie[Je];
        typeof it == "string" || it.$$is_string || Me.$raise(_e("TypeError"), "" + Me.$name() + " is not a symbol nor a string"), l(Me), t.rdef(Me, "$" + it);
      }
      return Me;
    }, -1), z(d, "$singleton_class?", function() {
      var I = this;
      return !!I.$$is_singleton;
    }), z(d, "$include", function(I) {
      var D, ie, Me = this;
      D = Y(arguments), ie = D;
      for (var Je = ie.length - 1; Je >= 0; Je--) {
        var it = ie[Je];
        it.$$is_module || Te.$raise(_e("TypeError"), "wrong argument type " + it.$class() + " (expected Module)"), it.$append_features(Me), it.$included(Me);
      }
      return Me;
    }, -1), z(d, "$included_modules", function() {
      var I = this;
      return t.included_modules(I);
    }), z(d, "$include?", function(I) {
      var D = this;
      I.$$is_module || Te.$raise(_e("TypeError"), "wrong argument type " + I.$class() + " (expected Module)");
      var ie, Me, Je, it = t.ancestors(D);
      for (ie = 0, Me = it.length; ie < Me; ie++)
        if (Je = it[ie], Je === I && Je !== D)
          return !0;
      return !1;
    }), z(d, "$instance_method", function(I) {
      var D = this, ie = D.$$prototype[m(I)];
      return (!ie || ie.$$stub) && Te.$raise(_e("NameError").$new("undefined method `" + I + "' for class `" + D.$name() + "'", I)), _e("UnboundMethod").$new(D, ie.$$owner || D, ie, I);
    }), z(d, "$instance_methods", function(I) {
      var D = this;
      return I == null && (I = !0), e(I) ? t.instance_methods(D) : t.own_instance_methods(D);
    }, -1), z(d, "$included", pe(we)), z(d, "$extended", pe(we)), z(d, "$extend_object", function(I) {
      return l(I), we;
    }), z(d, "$method_added", function(I) {
      return Y(arguments), we;
    }, -1), z(d, "$method_removed", function(I) {
      return Y(arguments), we;
    }, -1), z(d, "$method_undefined", function(I) {
      return Y(arguments), we;
    }, -1), z(d, "$module_eval", function $(I) {
      var D = $.$$p || we, ie, Me, Je, it = this, dt = we, St = we, gt = we, wt = we, bt = we, Tt = we;
      $.$$p = null, ie = Y(arguments), Me = ie, e(D["$nil?"]()) && e(!!t.compile) ? (e(R(1, 3, !1)["$cover?"](Me.$size())) || Te.$raise(_e("ArgumentError"), "wrong number of arguments (0 for 1..3)"), Je = [].concat(fe(Me)), dt = Je[0] == null ? we : Je[0], St = Je[1] == null ? we : Je[1], Je[2] == null || Je[2], gt = ae(["file", "eval"], { file: e(wt = St) ? wt : "(eval)", eval: !0 }), bt = t.hash({ arity_check: !1 }).$merge(gt), Tt = Re.$compile(dt, bt), D = N(Te, "proc", [], function Ne() {
        var Le = Ne.$$s == null ? this : Ne.$$s;
        return new Function("Opal,self", "return " + Tt)(t, Le);
      }, { $$s: it })) : e(Me["$any?"]()) && Te.$raise(_e("ArgumentError"), "wrong number of arguments (" + Me.$size() + ` for 0)

  NOTE:If you want to enable passing a String argument please add "require 'opal-parser'" to your script
`);
      var yt = D.$$s, Qe;
      return D.$$s = null, Qe = D.apply(it, [it]), D.$$s = yt, Qe;
    }, -1), z(d, "$module_exec", function $(I) {
      var D = $.$$p || we, ie, Me, Je = this;
      $.$$p = null, ie = Y(arguments), Me = ie, D === we && Te.$raise(_e("LocalJumpError"), "no block given");
      var it = D.$$s, dt;
      return D.$$s = null, dt = D.apply(Je, Me), D.$$s = it, dt;
    }, -1), z(d, "$method_defined?", function(I) {
      var D = this, ie = D.$$prototype[m(I)];
      return !!ie && !ie.$$stub;
    }), z(d, "$module_function", function(I) {
      var D, ie, Me = this;
      if (D = Y(arguments), ie = D, l(Me), ie.length === 0)
        return Me.$$module_function = !0, we;
      for (var Je = 0, it = ie.length; Je < it; Je++) {
        var dt = ie[Je], St = m(dt), gt = Me.$$prototype[St];
        t.defs(Me, St, gt);
      }
      return ie.length === 1 ? ie[0] : ie;
    }, -1), z(d, "$name", function() {
      var I = this;
      if (I.$$full_name)
        return I.$$full_name;
      for (var D = [], ie = I; ie; ) {
        if (ie.$$name === we || ie.$$name == null)
          return we;
        if (D.unshift(ie.$$name), ie = ie.$$base_module, ie === i)
          break;
      }
      return D.length === 0 ? we : I.$$full_name = D.join("::");
    }), z(d, "$prepend", function(I) {
      var D, ie, Me = this;
      D = Y(arguments), ie = D, ie.length === 0 && Te.$raise(_e("ArgumentError"), "wrong number of arguments (given 0, expected 1+)");
      for (var Je = ie.length - 1; Je >= 0; Je--) {
        var it = ie[Je];
        it.$$is_module || Te.$raise(_e("TypeError"), "wrong argument type " + it.$class() + " (expected Module)"), it.$prepend_features(Me), it.$prepended(Me);
      }
      return Me;
    }, -1), z(d, "$prepend_features", function(I) {
      var D = this;
      return l(I), D.$$is_module || Te.$raise(_e("TypeError"), "wrong argument type " + D.$class() + " (expected Module)"), t.prepend_features(D, I), D;
    }), z(d, "$prepended", pe(we)), z(d, "$remove_const", function(I) {
      var D = this;
      return l(D), t.const_remove(D, I);
    }), z(d, "$to_s", function() {
      var I = this, D = we;
      return e(D = t.Module.$name.call(I)) ? D : "#<" + (I.$$is_module ? "Module" : "Class") + ":0x" + I.$__id__().$to_s(16) + ">";
    }), z(d, "$undef_method", function(I) {
      var D, ie, Me = this;
      D = Y(arguments), ie = D;
      for (var Je = 0; Je < ie.length; Je++) {
        var it = ie[Je];
        typeof it == "string" || it.$$is_string || Me.$raise(_e("TypeError"), "" + Me.$name() + " is not a symbol nor a string"), l(Me), t.udef(Me, "$" + ie[Je]);
      }
      return Me;
    }, -1), z(d, "$instance_variables", function() {
      var I = this, D = we;
      D = (t.Module.$$nesting = _, I.$constants());
      var ie = [];
      for (var Me in I)
        I.hasOwnProperty(Me) && Me.charAt(0) !== "$" && Me !== "constructor" && !D["$include?"](Me) && ie.push("@" + Me);
      return ie;
    }), z(d, "$dup", function $() {
      var I = $.$$p || we, D = this, ie = we;
      return $.$$p = null, ie = ve(D, F(D, "dup", $, !1, !0), "dup", [], I), ie.$copy_class_variables(D), ie.$copy_constants(D), ie;
    }), z(d, "$copy_class_variables", function(I) {
      var D = this;
      for (var ie in I.$$cvars)
        D.$$cvars[ie] = I.$$cvars[ie];
    }), z(d, "$copy_constants", function(I) {
      var D = this, ie, Me = I.$$const;
      for (ie in Me)
        n(D, ie, Me[ie]);
    }), z(d, "$refine", function $(I) {
      var D = $.$$p || we, ie, Me = this, Je = we, it = we, dt = we;
      return $.$$p = null, ie = [Me, we, we], Je = ie[0], it = ie[1], dt = ie[2], dt = t.id(I), typeof Me.$$refine_modules > "u" && (Me.$$refine_modules = /* @__PURE__ */ Object.create(null)), typeof Me.$$refine_modules[dt] > "u" ? it = Me.$$refine_modules[dt] = _e("Refinement").$new() : it = Me.$$refine_modules[dt], it.refinement_module = Je, it.refined_class = I, N(it, "class_exec", [], D.$to_proc()), it;
    }), z(d, "$refinements", function() {
      var I = this, D = I.$$refine_modules, ie = ae([], {});
      if (typeof D > "u")
        return ie;
      for (var Me in D)
        ie["$[]="](D[Me].refined_class, D[Me]);
      return ie;
    }), z(d, "$using", function(I) {
      return Te.$raise("Module#using is not permitted in methods");
    }), ne(d, "class_eval", "module_eval"), ne(d, "class_exec", "module_exec"), ne(d, "inspect", "to_s");
  }("::", null, H), function(X, w) {
    var h = b(X, w, "Refinement"), d = h.$$prototype;
    return d.refinement_module = d.refined_class = we, h.$attr_reader("refined_class"), z(h, "$inspect", function _() {
      var g = _.$$p || we, $ = this;
      return _.$$p = null, e($.refinement_module) ? "#<refinement:" + $.refined_class.$inspect() + "@" + $.refinement_module.$inspect() + ">" : ve($, F($, "inspect", _, !1, !0), "inspect", [], g);
    });
  }("::", Q);
};
Opal.modules["corelib/class"] = function(t) {
  var e = t.klass, r = t.send, n = t.defs, i = t.def, s = t.rb_plus, o = t.return_val, a = t.slice, l = t.send2, c = t.find_super, f = t.Kernel, m = t.alias, b = t.top, C = [], N = t.nil, z = t.$$$;
  return t.add_stubs("require,class_eval,to_proc,+,subclasses,flatten,map,initialize_copy,allocate,name,to_s,raise"), b.$require("corelib/module"), function(A, Q, Te) {
    var ce = e(A, Q, "Class"), ge = [ce].concat(Te), Y = t.$r(ge);
    return n(ce, "$new", function fe(ae) {
      var Re = fe.$$p || N;
      if (fe.$$p = null, ae == null && (ae = Y("Object")), !ae.$$is_class)
        throw t.TypeError.$new("superclass must be a Class");
      var pe = t.allocate_class(N, ae);
      return ae.$inherited(pe), Re !== N && r(pe, "class_eval", [], Re.$to_proc()), pe;
    }, -1), i(ce, "$allocate", function() {
      var ae = this, Re = new ae.$$constructor();
      return Re.$$id = t.uid(), Re;
    }), i(ce, "$descendants", function() {
      var ae = this;
      return s(ae.$subclasses(), r(ae.$subclasses(), "map", [], "descendants".$to_proc()).$flatten());
    }), i(ce, "$inherited", o(N)), i(ce, "$initialize_dup", function(ae) {
      var Re = this;
      Re.$initialize_copy(ae), Re.$$name = null, Re.$$full_name = null;
    }), i(ce, "$new", function fe(ae) {
      var Re = fe.$$p || N, pe, Ce, J = this;
      fe.$$p = null, pe = a(arguments), Ce = pe;
      var R = J.$allocate();
      return t.send(R, R.$initialize, Ce, Re), R;
    }, -1), i(ce, "$subclasses", function() {
      var ae = this;
      if (typeof WeakRef < "u") {
        var Re, pe, Ce = [];
        for (Re = 0; Re < ae.$$subclasses.length; Re++)
          pe = ae.$$subclasses[Re].deref(), pe !== void 0 && Ce.push(pe);
        return Ce;
      } else
        return ae.$$subclasses;
    }), i(ce, "$superclass", function() {
      var ae = this;
      return ae.$$super || N;
    }), i(ce, "$to_s", function fe() {
      fe.$$p;
      var ae = this;
      fe.$$p = null;
      var Re = ae.$$singleton_of;
      return Re && Re.$$is_a_module ? "#<Class:" + Re.$name() + ">" : Re ? "#<Class:#<" + Re.$$class.$name() + ":0x" + t.id(Re).$to_s(16) + ">>" : l(ae, c(ae, "to_s", fe, !1, !0), "to_s", [], null);
    }), i(ce, "$attached_object", function() {
      var ae = this;
      if (ae.$$singleton_of != null)
        return ae.$$singleton_of;
      f.$raise(z("TypeError"), "`" + ae + "' is not a singleton class");
    }), m(ce, "inspect", "to_s");
  }("::", null, C);
};
Opal.modules["corelib/basic_object"] = function(t) {
  var e = t.klass, r = t.slice, n = t.def, i = t.alias, s = t.return_val, o = t.Opal, a = t.truthy, l = t.range, c = t.Kernel, f = t.to_a, m = t.hash2, b = t.send, C = t.eqeq, N = t.rb_ge, z = t.nil, A = t.$$$;
  return t.add_stubs("==,raise,inspect,pristine,!,nil?,cover?,size,merge,compile,proc,[],first,>=,length,instance_variable_get,any?,new,caller"), function(Q, Te) {
    var ce = e(Q, Te, "BasicObject");
    return n(ce, "$initialize", function(Y) {
      return r(arguments), z;
    }, -1), n(ce, "$==", function(Y) {
      var fe = this;
      return fe === Y;
    }), n(ce, "$eql?", function(Y) {
      var fe = this;
      return fe["$=="](Y);
    }), i(ce, "equal?", "=="), n(ce, "$__id__", function() {
      var Y = this;
      return Y.$$id != null || t.prop(Y, "$$id", t.uid()), Y.$$id;
    }), n(ce, "$__send__", function ge(Y, fe) {
      var ae = ge.$$p || z, Re, pe, Ce = this;
      ge.$$p = null, Re = r(arguments, 1), pe = Re, Y.$$is_string || Ce.$raise(A("TypeError"), "" + Ce.$inspect() + " is not a symbol nor a string");
      var J = Ce[t.jsid(Y)];
      return J ? (ae !== z && (J.$$p = ae), J.apply(Ce, pe)) : (ae !== z && (Ce.$method_missing.$$p = ae), Ce.$method_missing.apply(Ce, [Y].concat(pe)));
    }, -2), n(ce, "$!", s(!1)), o.$pristine("!"), n(ce, "$!=", function(Y) {
      var fe = this;
      return fe["$=="](Y)["$!"]();
    }), n(ce, "$instance_eval", function ge(Y) {
      var fe = ge.$$p || z, ae, Re, pe, Ce = this, J = z, R = z, ve = z, F = z, ne = z, H = z;
      if (ge.$$p = null, ae = r(arguments), Re = ae, a(fe["$nil?"]()) && a(!!t.compile))
        a(l(1, 3, !1)["$cover?"](Re.$size())) || c.$raise(A("ArgumentError"), "wrong number of arguments (0 for 1..3)"), pe = [].concat(f(Re)), J = pe[0] == null ? z : pe[0], R = pe[1] == null ? z : pe[1], pe[2] == null || pe[2], ve = m(["file", "eval"], { file: a(F = R) ? F : "(eval)", eval: !0 }), ne = t.hash({ arity_check: !1 }).$merge(ve), H = o.$compile(J, ne), fe = b(c, "proc", [], function X() {
          var w = X.$$s == null ? this : X.$$s;
          return new Function("Opal,self", "return " + H)(t, w);
        }, { $$s: Ce });
      else {
        if (a(fe["$nil?"]()) && a(N(Re.$length(), 1)) && C(Re.$first()["$[]"](0), "@"))
          return Ce.$instance_variable_get(Re.$first());
        a(Re["$any?"]()) && c.$raise(A("ArgumentError"), "wrong number of arguments (" + Re.$size() + " for 0)");
      }
      var we = fe.$$s, _e;
      if (fe.$$s = null, Ce.$$is_a_module) {
        Ce.$$eval = !0;
        try {
          _e = fe.call(Ce, Ce);
        } finally {
          Ce.$$eval = !1;
        }
      } else
        _e = fe.call(Ce, Ce);
      return fe.$$s = we, _e;
    }, -1), n(ce, "$instance_exec", function ge(Y) {
      var fe = ge.$$p || z, ae, Re, pe = this;
      ge.$$p = null, ae = r(arguments), Re = ae, a(fe) || c.$raise(A("ArgumentError"), "no block given");
      var Ce = fe.$$s, J;
      if (fe.$$s = null, pe.$$is_a_module) {
        pe.$$eval = !0;
        try {
          J = fe.apply(pe, Re);
        } finally {
          pe.$$eval = !1;
        }
      } else
        J = fe.apply(pe, Re);
      return fe.$$s = Ce, J;
    }, -1), n(ce, "$singleton_method_added", function(Y) {
      return r(arguments), z;
    }, -1), n(ce, "$singleton_method_removed", function(Y) {
      return r(arguments), z;
    }, -1), n(ce, "$singleton_method_undefined", function(Y) {
      return r(arguments), z;
    }, -1), n(ce, "$method_missing", function ge(Y, fe) {
      ge.$$p;
      var ae, Re, pe = this, Ce = z;
      return ge.$$p = null, ae = r(arguments, 1), Re = ae, Ce = o.$inspect(pe), c.$raise(A("NoMethodError").$new("undefined method `" + Y + "' for " + Ce, Y, Re), z, c.$caller(1));
    }, -2), o.$pristine(ce, "method_missing"), n(ce, "$respond_to_missing?", function(Y, fe) {
      return !1;
    }, -2);
  }("::", null);
};
Opal.modules["corelib/kernel"] = function(t) {
  var e = t.truthy, r = t.coerce_to, n = t.respond_to, i = t.Opal, s = t.deny_frozen_access, o = t.freeze, a = t.freeze_props, l = t.jsid, c = t.module, f = t.return_val, m = t.def, b = t.Kernel, C = t.gvars, N = t.slice, z = t.send, A = t.to_a, Q = t.ensure_kwargs, Te = t.eqeq, ce = t.hash2, ge = t.rb_plus, Y = t.eqeqeq, fe = t.return_self, ae = t.rb_le, Re = t.extract_kwargs, pe = t.rb_lt, Ce = t.Object, J = t.alias, R = t.klass, ve = [], F = t.nil, ne = t.$$$;
  return t.add_stubs("!,=~,==,object_id,raise,new,class,coerce_to?,<<,map,caller,nil?,allocate,copy_instance_variables,copy_singleton_methods,initialize_clone,frozen?,freeze,initialize_copy,define_method,singleton_class,to_proc,initialize_dup,for,empty?,pop,call,append_features,extend_object,extended,gets,__id__,include?,each,instance_variables,instance_variable_get,inspect,+,to_s,instance_variable_name!,respond_to?,to_int,coerce_to!,Integer,===,enum_for,result,any?,print,format,puts,<=,length,[],readline,<,first,split,to_str,exception,backtrace,rand,respond_to_missing?,pristine,try_convert!,expand_path,join,start_with?,new_seed,srand,tag,value,open,is_a?,__send__,yield_self,include"), function(H, we) {
    var _e = c(H, "Kernel"), X = [_e].concat(we), w = t.$r(X);
    m(_e, "$=~", f(!1)), m(_e, "$!~", function(_) {
      var g = this;
      return g["$=~"](_)["$!"]();
    }), m(_e, "$===", function(_) {
      var g = this, $ = F;
      return e($ = g.$object_id()["$=="](_.$object_id())) ? $ : g["$=="](_);
    }), m(_e, "$<=>", function(_) {
      var g = this;
      g.$$comparable = !0;
      var $ = g["$=="](_);
      return $ && $ !== F ? 0 : F;
    }), m(_e, "$method", function(_) {
      var g = this, $ = g[l(_)];
      return (!$ || $.$$stub) && b.$raise(ne("NameError").$new("undefined method `" + _ + "' for class `" + g.$class() + "'", _)), ne("Method").$new(g, $.$$owner || g.$class(), $, _);
    }), m(_e, "$methods", function(_) {
      var g = this;
      return _ == null && (_ = !0), e(_) ? t.methods(g) : t.own_methods(g);
    }, -1), m(_e, "$public_methods", function(_) {
      var g = this;
      return _ == null && (_ = !0), e(_) ? t.methods(g) : t.receiver_methods(g);
    }, -1), m(_e, "$Array", function(_) {
      var g;
      return _ === F ? [] : _.$$is_array ? _ : (g = i["$coerce_to?"](_, ne("Array"), "to_ary"), g !== F || (g = i["$coerce_to?"](_, ne("Array"), "to_a"), g !== F) ? g : [_]);
    }), m(_e, "$at_exit", function d() {
      var _ = d.$$p || F, g = F;
      return C.__at_exit__ == null && (C.__at_exit__ = F), d.$$p = null, C.__at_exit__ = e(g = C.__at_exit__) ? g : [], C.__at_exit__["$<<"](_), _;
    }), m(_e, "$caller", function(_, g) {
      _ == null && (_ = 1), g == null && (g = F);
      var $, I;
      $ = new Error().$backtrace(), I = [];
      for (var D = _ + 1, ie = $.length; D < ie; D++)
        $[D].match(/runtime\.js/) || I.push($[D]);
      return g != F && (I = I.slice(0, g)), I;
    }, -1), m(_e, "$caller_locations", function(_) {
      var g, $, I = this;
      return g = N(arguments), $ = g, z(z(I, "caller", A($)), "map", [], function(ie) {
        return ie == null && (ie = F), ne(ne(ne("Thread"), "Backtrace"), "Location").$new(ie);
      });
    }, -1), m(_e, "$class", function() {
      var _ = this;
      return _.$$class;
    }), m(_e, "$copy_instance_variables", function(_) {
      var g = this, $ = Object.keys(_), I, D, ie;
      for (I = 0, D = $.length; I < D; I++)
        ie = $[I], ie.charAt(0) !== "$" && _.hasOwnProperty(ie) && (g[ie] = _[ie]);
    }), m(_e, "$copy_singleton_methods", function(_) {
      var g = this, $, I, D, ie;
      if (_.hasOwnProperty("$$meta") && _.$$meta !== null) {
        var Me = t.get_singleton_class(_), Je = t.get_singleton_class(g);
        for (D = Object.getOwnPropertyNames(Me.$$prototype), $ = 0, ie = D.length; $ < ie; $++)
          I = D[$], t.is_method(I) && (Je.$$prototype[I] = Me.$$prototype[I]);
        Je.$$const = Object.assign({}, Me.$$const), Object.setPrototypeOf(
          Je.$$prototype,
          Object.getPrototypeOf(Me.$$prototype)
        );
      }
      for ($ = 0, D = Object.getOwnPropertyNames(_), ie = D.length; $ < ie; $++)
        I = D[$], I.charAt(0) === "$" && I.charAt(1) !== "$" && _.hasOwnProperty(I) && (g[I] = _[I]);
    }), m(_e, "$clone", function(_) {
      var g, $ = this, I = F;
      return _ = Q(_), g = _.$$smap.freeze, g == null && (g = F), e(g["$nil?"]()) || Te(g, !0) || Te(g, !1) || $.$raise(w("ArgumentError"), "unexpected value for freeze: " + g.$class()), I = $.$class().$allocate(), I.$copy_instance_variables($), I.$copy_singleton_methods($), I.$initialize_clone($, ce(["freeze"], { freeze: g })), (Te(g, !0) || e(g["$nil?"]()) && e($["$frozen?"]())) && I.$freeze(), I;
    }, -1), m(_e, "$initialize_clone", function(_, g) {
      var $ = this;
      return g = Q(g), g.$$smap.freeze, $.$initialize_copy(_), $;
    }, -2), m(_e, "$define_singleton_method", function d(_, g) {
      var $ = d.$$p || F, I = this;
      return d.$$p = null, z(I.$singleton_class(), "define_method", [_, g], $.$to_proc());
    }, -2), m(_e, "$dup", function() {
      var _ = this, g = F;
      return g = _.$class().$allocate(), g.$copy_instance_variables(_), g.$initialize_dup(_), g;
    }), m(_e, "$initialize_dup", function(_) {
      var g = this;
      return g.$initialize_copy(_);
    }), m(_e, "$enum_for", function d(_, g) {
      var $ = d.$$p || F, I, D, ie, Me = this;
      return d.$$p = null, I = N(arguments), I.length > 0 && (D = I.shift()), D == null && (D = "each"), ie = I, z(ne("Enumerator"), "for", [Me, D].concat(A(ie)), $.$to_proc());
    }, -1), m(_e, "$equal?", function(_) {
      var g = this;
      return g === _;
    }), m(_e, "$exit", function(_) {
      var g = F, $ = F;
      for (C.__at_exit__ == null && (C.__at_exit__ = F), _ == null && (_ = !0), C.__at_exit__ = e(g = C.__at_exit__) ? g : []; !e(C.__at_exit__["$empty?"]()); )
        $ = C.__at_exit__.$pop(), $.$call();
      return _.$$is_boolean ? _ = _ ? 0 : 1 : _ = r(_, ne("Integer"), "to_int"), t.exit(_), F;
    }, -1), m(_e, "$extend", function(_) {
      var g, $, I = this;
      g = N(arguments), $ = g, $.length == 0 && I.$raise(ne("ArgumentError"), "wrong number of arguments (given 0, expected 1+)"), s(I);
      for (var D = I.$singleton_class(), ie = $.length - 1; ie >= 0; ie--) {
        var Me = $[ie];
        Me.$$is_module || b.$raise(ne("TypeError"), "wrong argument type " + Me.$class() + " (expected Module)"), Me.$append_features(D), Me.$extend_object(I), Me.$extended(I);
      }
      return I;
    }, -1), m(_e, "$freeze", function() {
      var _ = this;
      return e(_["$frozen?"]()) ? _ : typeof _ == "object" ? (a(_), o(_)) : _;
    }), m(_e, "$frozen?", function() {
      var _ = this;
      switch (typeof _) {
        case "string":
        case "symbol":
        case "number":
        case "boolean":
          return !0;
        case "object":
          return _.$$frozen || !1;
        default:
          return !1;
      }
    }), m(_e, "$gets", function(_) {
      var g, $;
      return C.stdin == null && (C.stdin = F), g = N(arguments), $ = g, z(C.stdin, "gets", A($));
    }, -1), m(_e, "$hash", function() {
      var _ = this;
      return _.$__id__();
    }), m(_e, "$initialize_copy", f(F));
    var h = [];
    return m(_e, "$inspect", function() {
      var _ = this, g = F, $ = F, I = F, D = F;
      return function() {
        try {
          try {
            return g = "", $ = _.$__id__(), e(h["$include?"]($)) ? g = " ..." : (h["$<<"]($), I = !0, z(_.$instance_variables(), "each", [], function ie(Me) {
              var Je = ie.$$s == null ? this : ie.$$s, it = F, dt = F;
              return Me == null && (Me = F), it = Je.$instance_variable_get(Me), dt = w("Opal").$inspect(it), g = ge(g, " " + Me + "=" + dt);
            }, { $$s: _ })), "#<" + _.$class() + ":0x" + $.$to_s(16) + g + ">";
          } catch (ie) {
            if (t.rescue(ie, [w("StandardError")])) {
              D = ie;
              try {
                return "#<" + _.$class() + ":0x" + $.$to_s(16) + ">";
              } finally {
                t.pop_exception();
              }
            } else
              throw ie;
          }
        } finally {
          e(I) && h.$pop();
        }
      }();
    }), m(_e, "$instance_of?", function(_) {
      var g = this;
      return !_.$$is_class && !_.$$is_module && b.$raise(ne("TypeError"), "class or module required"), g.$$class === _;
    }), m(_e, "$instance_variable_defined?", function(_) {
      var g = this;
      return _ = i["$instance_variable_name!"](_), t.hasOwnProperty.call(g, _.substr(1));
    }), m(_e, "$instance_variable_get", function(_) {
      var g = this;
      _ = i["$instance_variable_name!"](_);
      var $ = g[t.ivar(_.substr(1))];
      return $ ?? F;
    }), m(_e, "$instance_variable_set", function(_, g) {
      var $ = this;
      return s($), _ = i["$instance_variable_name!"](_), $[t.ivar(_.substr(1))] = g;
    }), m(_e, "$remove_instance_variable", function(_) {
      var g = this;
      _ = i["$instance_variable_name!"](_);
      var $ = t.ivar(_.substr(1)), I;
      return g.hasOwnProperty($) ? (I = g[$], delete g[$], I) : b.$raise(ne("NameError"), "instance variable " + _ + " not defined");
    }), m(_e, "$instance_variables", function() {
      var _ = this, g = [], $;
      for (var I in _)
        _.hasOwnProperty(I) && I.charAt(0) !== "$" && (I.substr(-1) === "$" ? $ = I.slice(0, I.length - 1) : $ = I, g.push("@" + $));
      return g;
    }), m(_e, "$Integer", function(_, g) {
      var $, I, D;
      return _.$$is_string ? _ === "0" ? 0 : (g === void 0 ? g = 0 : (g = r(g, ne("Integer"), "to_int"), (g === 1 || g < 0 || g > 36) && b.$raise(ne("ArgumentError"), "invalid radix " + g)), I = _.toLowerCase(), I = I.replace(/(\d)_(?=\d)/g, "$1"), I = I.replace(/^(\s*[+-]?)(0[bodx]?)/, function(ie, Me, Je) {
        switch (Je) {
          case "0b":
            if (g === 0 || g === 2)
              return g = 2, Me;
          case "0":
          case "0o":
            if (g === 0 || g === 8)
              return g = 8, Me;
          case "0d":
            if (g === 0 || g === 10)
              return g = 10, Me;
          case "0x":
            if (g === 0 || g === 16)
              return g = 16, Me;
        }
        b.$raise(ne("ArgumentError"), 'invalid value for Integer(): "' + _ + '"');
      }), g = g === 0 ? 10 : g, D = "0-" + (g <= 10 ? g - 1 : "9a-" + String.fromCharCode(97 + (g - 11))), new RegExp("^\\s*[+-]?[" + D + "]+\\s*$").test(I) || b.$raise(ne("ArgumentError"), 'invalid value for Integer(): "' + _ + '"'), $ = parseInt(I, g), isNaN($) && b.$raise(ne("ArgumentError"), 'invalid value for Integer(): "' + _ + '"'), $) : (g !== void 0 && b.$raise(ne("ArgumentError"), "base specified for non string value"), _ === F && b.$raise(ne("TypeError"), "can't convert nil into Integer"), _.$$is_number ? ((_ === 1 / 0 || _ === -1 / 0 || isNaN(_)) && b.$raise(ne("FloatDomainError"), _), Math.floor(_)) : _["$respond_to?"]("to_int") && ($ = _.$to_int(), $ !== F) ? $ : i["$coerce_to!"](_, ne("Integer"), "to_i"));
    }, -2), m(_e, "$Float", function(_) {
      var g;
      return _ === F && b.$raise(ne("TypeError"), "can't convert nil into Float"), _.$$is_string ? (g = _.toString(), g = g.replace(/(\d)_(?=\d)/g, "$1"), /^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(g) ? b.$Integer(g) : (/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(g) || b.$raise(ne("ArgumentError"), 'invalid value for Float(): "' + _ + '"'), parseFloat(g))) : i["$coerce_to!"](_, ne("Float"), "to_f");
    }), m(_e, "$Hash", function(_) {
      return e(_["$nil?"]()) || Te(_, []) ? ce([], {}) : Y(ne("Hash"), _) ? _ : i["$coerce_to!"](_, ne("Hash"), "to_hash");
    }), m(_e, "$is_a?", function(_) {
      var g = this;
      return !_.$$is_class && !_.$$is_module && b.$raise(ne("TypeError"), "class or module required"), t.is_a(g, _);
    }), m(_e, "$itself", fe), m(_e, "$lambda", function d() {
      var _ = d.$$p || F;
      return d.$$p = null, t.lambda(_);
    }), m(_e, "$load", function(_) {
      return _ = i["$coerce_to!"](_, ne("String"), "to_str"), t.load(_);
    }), m(_e, "$loop", function d() {
      var _ = d.$$p || F, g = this, $ = F;
      if (d.$$p = null, _ === F)
        return z(g, "enum_for", ["loop"], function() {
          return ne(ne("Float"), "INFINITY");
        });
      for (; e(!0); )
        try {
          t.yieldX(_, []);
        } catch (I) {
          if (t.rescue(I, [ne("StopIteration")])) {
            $ = I;
            try {
              return $.$result();
            } finally {
              t.pop_exception();
            }
          } else
            throw I;
        }
      return g;
    }), m(_e, "$nil?", f(!1)), m(_e, "$printf", function(_) {
      var g, $, I = this;
      return g = N(arguments), $ = g, e($["$any?"]()) && I.$print(z(I, "format", A($))), F;
    }, -1), m(_e, "$proc", function d() {
      var _ = d.$$p || F;
      return d.$$p = null, e(_) || b.$raise(ne("ArgumentError"), "tried to create Proc object without a block"), _.$$is_lambda = !1, _;
    }), m(_e, "$puts", function(_) {
      var g, $;
      return C.stdout == null && (C.stdout = F), g = N(arguments), $ = g, z(C.stdout, "puts", A($));
    }, -1), m(_e, "$p", function(_) {
      var g, $;
      return g = N(arguments), $ = g, z($, "each", [], function(D) {
        return C.stdout == null && (C.stdout = F), D == null && (D = F), C.stdout.$puts(D.$inspect());
      }), e(ae($.$length(), 1)) ? $["$[]"](0) : $;
    }, -1), m(_e, "$print", function(_) {
      var g, $;
      return C.stdout == null && (C.stdout = F), g = N(arguments), $ = g, z(C.stdout, "print", A($));
    }, -1), m(_e, "$readline", function(_) {
      var g, $;
      return C.stdin == null && (C.stdin = F), g = N(arguments), $ = g, z(C.stdin, "readline", A($));
    }, -1), m(_e, "$warn", function(_, g) {
      var $, I, D, ie, Me, Je, it = this, dt = F;
      return C.VERBOSE == null && (C.VERBOSE = F), C.stderr == null && (C.stderr = F), $ = N(arguments), I = Re($), I = Q(I), D = $, ie = I.$$smap.uplevel, ie == null && (ie = F), e(ie) && (ie = i["$coerce_to!"](ie, ne("Integer"), "to_str"), e(pe(ie, 0)) && b.$raise(ne("ArgumentError"), "negative level (" + ie + ")"), dt = (Me = (Je = it.$caller(ge(ie, 1), 1).$first(), Je === F || Je == null ? F : Je.$split(":in `")), Me === F || Me == null ? F : Me.$first()), e(dt) && (dt = "" + dt + ": "), D = z(D, "map", [], function(gt) {
        return gt == null && (gt = F), "" + dt + "warning: " + gt;
      })), e(C.VERBOSE["$nil?"]()) || e(D["$empty?"]()) ? F : z(C.stderr, "puts", A(D));
    }, -1), m(_e, "$raise", function(_, g, $) {
      throw C["!"] == null && (C["!"] = F), C["@"] == null && (C["@"] = F), g == null && (g = F), $ == null && ($ = F), _ == null && C["!"] !== F ? C["!"] : (_ == null ? _ = ne("RuntimeError").$new("") : n(_, "$to_str") ? _ = ne("RuntimeError").$new(_.$to_str()) : _.$$is_class && n(_, "$exception") ? _ = _.$exception(g) : _.$$is_exception || (_ = ne("TypeError").$new("exception class/object expected")), $ !== F && _.$set_backtrace($), C["!"] !== F && t.exceptions.push(C["!"]), C["!"] = _, C["@"] = _.$backtrace(), _);
    }, -1), m(_e, "$rand", function(_) {
      return _ === void 0 ? ne(ne("Random"), "DEFAULT").$rand() : (_.$$is_number && (_ < 0 && (_ = Math.abs(_)), _ % 1 !== 0 && (_ = _.$to_i()), _ === 0 && (_ = void 0)), ne(ne("Random"), "DEFAULT").$rand(_));
    }, -1), m(_e, "$respond_to?", function(_, g) {
      var $ = this;
      g == null && (g = !1);
      var I = $[l(_)];
      return typeof I == "function" && !I.$$stub ? !0 : $["$respond_to_missing?"].$$pristine === !0 ? !1 : $["$respond_to_missing?"](_, g);
    }, -2), m(_e, "$respond_to_missing?", function(_, g) {
      return !1;
    }, -2), i.$pristine(_e, "respond_to?", "respond_to_missing?"), m(_e, "$require", function(_) {
      return typeof _ != "string" && t.String && t.Array && (_ = i["$coerce_to!"](_, ne("String"), "to_str")), t.require(_);
    }), m(_e, "$require_relative", function(_) {
      return i["$try_convert!"](_, ne("String"), "to_str"), _ = ne("File").$expand_path(ne("File").$join(t.current_file, "..", _)), t.require(_);
    }), m(_e, "$require_tree", function(_, g) {
      var $;
      g = Q(g), $ = g.$$smap.autoload, $ == null && ($ = !1);
      var I = [];
      _ = ne("File").$expand_path(_), _ = t.normalize(_), _ === "." && (_ = "");
      for (var D in t.modules)
        D["$start_with?"](_) && ($ ? I.push([D, !0]) : I.push([D, t.require(D)]));
      return I;
    }, -2), m(_e, "$singleton_class", function() {
      var _ = this;
      return t.get_singleton_class(_);
    }), m(_e, "$sleep", function(_) {
      _ == null && (_ = F), _ === F && b.$raise(ne("TypeError"), "can't convert NilClass into time interval"), _.$$is_number || b.$raise(ne("TypeError"), "can't convert " + _.$class() + " into time interval"), _ < 0 && b.$raise(ne("ArgumentError"), "time interval must be positive");
      for (var g = t.global.performance ? function() {
        return performance.now();
      } : function() {
        return /* @__PURE__ */ new Date();
      }, $ = g(); g() - $ <= _ * 1e3; )
        ;
      return Math.round(_);
    }, -1), m(_e, "$srand", function(_) {
      return _ == null && (_ = w("Random").$new_seed()), ne("Random").$srand(_);
    }, -1), m(_e, "$String", function(_) {
      var g = F;
      return e(g = i["$coerce_to?"](_, ne("String"), "to_str")) ? g : i["$coerce_to!"](_, ne("String"), "to_s");
    }), m(_e, "$tap", function d() {
      var _ = d.$$p || F, g = this;
      return d.$$p = null, t.yield1(_, g), g;
    }), m(_e, "$to_proc", fe), m(_e, "$to_s", function() {
      var _ = this;
      return "#<" + _.$class() + ":0x" + _.$__id__().$to_s(16) + ">";
    }), m(_e, "$catch", function d(_) {
      var g = d.$$p || F, $ = F, I = F;
      d.$$p = null, _ == null && (_ = F);
      try {
        return _ = e($ = _) ? $ : Ce.$new(), t.yield1(g, _);
      } catch (D) {
        if (t.rescue(D, [ne("UncaughtThrowError")])) {
          I = D;
          try {
            return Te(I.$tag(), _) ? I.$value() : b.$raise();
          } finally {
            t.pop_exception();
          }
        } else
          throw D;
      }
    }, -1), m(_e, "$throw", function(_, g) {
      return g == null && (g = F), b.$raise(ne("UncaughtThrowError").$new(_, g));
    }, -2), m(_e, "$open", function d(_) {
      var g = d.$$p || F, $, I;
      return d.$$p = null, $ = N(arguments), I = $, z(ne("File"), "open", A(I), g.$to_proc());
    }, -1), m(_e, "$yield_self", function d() {
      var _ = d.$$p || F, g = this;
      return d.$$p = null, _ === F ? z(g, "enum_for", ["yield_self"], f(1)) : t.yield1(_, g);
    }), J(_e, "fail", "raise"), J(_e, "kind_of?", "is_a?"), J(_e, "object_id", "__id__"), J(_e, "public_send", "__send__"), J(_e, "send", "__send__"), J(_e, "then", "yield_self"), J(_e, "to_enum", "enum_for");
  }("::", ve), function(H, we) {
    var _e = R(H, we, "Object");
    return delete Ce.$$prototype.$require, _e.$include(b);
  }("::", null);
};
Opal.modules["corelib/main"] = function(t) {
  var e = t.return_val, r = t.def, n = t.Object, i = t.slice, s = t.Kernel, o = t.top;
  return t.nil, t.add_stubs("include,raise"), function(a, l) {
    return r(a, "$to_s", e("main")), r(a, "$include", function(f) {
      return n.$include(f);
    }), r(a, "$autoload", function(f) {
      var m, b;
      return m = i(arguments), b = m, t.Object.$autoload.apply(t.Object, b);
    }, -1), r(a, "$using", function(f) {
      return s.$raise("main.using is permitted only at toplevel");
    });
  }(t.get_singleton_class(o));
};
Opal.modules["corelib/error/errno"] = function(t) {
  var e = t.module, r = t.truthy, n = t.rb_plus, i = t.send2, s = t.find_super, o = t.def, a = t.klass, l = t.nil, c = t.$$$;
  return t.add_stubs("+,errno,class,attr_reader"), function(f, m) {
    var b = e(f, "Errno"), C = l, N = l;
    C = [["EINVAL", "Invalid argument", 22], ["EEXIST", "File exists", 17], ["EISDIR", "Is a directory", 21], ["EMFILE", "Too many open files", 24], ["ESPIPE", "Illegal seek", 29], ["EACCES", "Permission denied", 13], ["EPERM", "Operation not permitted", 1], ["ENOENT", "No such file or directory", 2], ["ENAMETOOLONG", "File name too long", 36]], N = l;
    var z;
    for (z = 0; z < C.length; z++)
      (function() {
        var A = C[z][0], Q = C[z][1], Te = C[z][2];
        N = t.klass(b, t.SystemCallError, A), N.errno = Te, function(ce, ge) {
          return o(ce, "$new", function Y(fe) {
            Y.$$p;
            var ae = this, Re = l;
            return Y.$$p = null, fe == null && (fe = l), Re = Q, r(fe) && (Re = n(Re, " - " + fe)), i(ae, s(ae, "new", Y, !1, !0), "new", [Re], null);
          }, -1);
        }(t.get_singleton_class(N));
      })();
  }("::"), function(f, m, b) {
    var C = a(f, m, "SystemCallError");
    return o(C, "$errno", function() {
      var z = this;
      return z.$class().$errno();
    }), function(N, z) {
      return N.$attr_reader("errno");
    }(t.get_singleton_class(C));
  }("::", c("StandardError"));
};
Opal.modules["corelib/error"] = function(t) {
  var e = t.klass, r = t.slice, n = t.gvars, i = t.defs, s = t.send, o = t.to_a, a = t.def, l = t.truthy, c = t.hash2, f = t.Kernel, m = t.not, b = t.rb_plus, C = t.eqeq, N = t.Object, z = t.ensure_kwargs, A = t.send2, Q = t.find_super, Te = t.module, ce = [], ge = t.nil, Y = t.$$$;
  return t.add_stubs("new,map,backtrace,clone,to_s,merge,tty?,[],include?,raise,dup,empty?,!,caller,shift,+,class,join,cause,full_message,==,reverse,split,autoload,attr_reader,inspect"), function(fe, ae, Re) {
    var pe = e(fe, ae, "Exception"), Ce = [pe].concat(Re), J = t.$r(Ce), R = pe.$$prototype;
    R.message = ge, t.prop(pe.$$prototype, "$$is_exception", !0);
    var ve;
    Error.stackTraceLimit = 100, i(pe, "$new", function(H) {
      var we, _e, X = this;
      n["!"] == null && (n["!"] = ge), we = r(arguments), _e = we;
      var w = _e.length > 0 ? _e[0] : ge, h = new X.$$constructor(w);
      return h.name = X.$$name, h.message = w, h.cause = n["!"], t.send(h, h.$initialize, _e), t.config.enable_stack_trace && Error.captureStackTrace && Error.captureStackTrace(h, ve), h;
    }, -1), ve = pe.$new, i(pe, "$exception", function(H) {
      var we, _e, X = this;
      return we = r(arguments), _e = we, s(X, "new", o(_e));
    }, -1), a(pe, "$initialize", function(H) {
      var we, _e, X = this;
      return we = r(arguments), _e = we, X.message = _e.length > 0 ? _e[0] : ge;
    }, -1);
    function F(ne) {
      for (var H = [], we, _e = 0; _e < ne.length; _e++) {
        var X = ne[_e];
        !X || !X.$$is_string || ((we = X.match(/^    at (.*?) \((.*?)\)$/)) ? H.push(we[2] + ":in `" + we[1] + "'") : (we = X.match(/^    at (.*?)$/)) ? H.push(we[1] + ":in `undefined'") : (we = X.match(/^  from (.*?)$/)) ? H.push(we[1]) : (we = X.match(/^(.*?)@(.*?)$/)) && H.push(we[2] + ":in `" + we[1] + "'"));
      }
      return H;
    }
    return a(pe, "$backtrace", function() {
      var H = this;
      if (H.backtrace)
        return H.backtrace;
      var we = H.stack;
      return typeof we < "u" && we.$$is_string ? H.backtrace = F(we.split(`
`)) : we ? H.backtrace = F(we) : [];
    }), a(pe, "$backtrace_locations", function() {
      var H, we = this;
      return we.backtrace_locations || (we.backtrace_locations = (H = we.$backtrace(), H === ge || H == null ? ge : s(H, "map", [], function(X) {
        return X == null && (X = ge), Y(Y(Y("Thread"), "Backtrace"), "Location").$new(X);
      }))), we.backtrace_locations;
    }), a(pe, "$cause", function() {
      var H = this;
      return H.cause || ge;
    }), a(pe, "$exception", function(H) {
      var we = this;
      if (H == null && (H = ge), H === ge || we === H)
        return we;
      var _e = we.$clone();
      return _e.message = H, we.backtrace && (_e.backtrace = we.backtrace.$dup()), _e.stack = we.stack, _e.cause = we.cause, _e;
    }, -1), a(pe, "$message", function() {
      var H = this;
      return H.$to_s();
    }), a(pe, "$full_message", function(H) {
      var we, _e = this, X = ge, w = ge, h = ge, d = ge, _ = ge, g = ge, $ = ge, I = ge, D = ge;
      return n.stderr == null && (n.stderr = ge), H == null && (H = ge), l(J("Hash", "skip_raise") ? "constant" : ge) ? (H = c(["highlight", "order"], { highlight: n.stderr["$tty?"](), order: "top" }).$merge(l(X = H) ? X : c([], {})), we = [H["$[]"]("highlight"), H["$[]"]("order")], w = we[0], h = we[1], l([!0, !1]["$include?"](w)) || f.$raise(Y("ArgumentError"), "expected true or false as highlight: " + w), l(["top", "bottom"]["$include?"](h)) || f.$raise(Y("ArgumentError"), "expected :top or :bottom as order: " + h), l(w) ? (d = "\x1B[1;4m", _ = "\x1B[1m", g = "\x1B[m") : d = _ = g = "", $ = _e.$backtrace().$dup(), (m($) || l($["$empty?"]())) && ($ = _e.$caller()), I = $.$shift(), D = "" + I + ": ", D = b(D, "" + _ + _e.$to_s() + " (" + d + _e.$class() + g + _ + ")" + g + `
`), D = b(D, s($, "map", [], function(Me) {
        return Me == null && (Me = ge), "	from " + Me + `
`;
      }).$join()), l(_e.$cause()) && (D = b(D, _e.$cause().$full_message(c(["highlight"], { highlight: w })))), C(h, "bottom") && (D = D.$split(`
`).$reverse().$join(`
`), D = b("" + _ + "Traceback" + g + ` (most recent call last):
`, D)), D) : "" + _e.message + `
` + _e.stack;
    }, -1), a(pe, "$inspect", function() {
      var H = this, we = ge;
      return we = H.$to_s(), l(we["$empty?"]()) ? H.$class().$to_s() : "#<" + H.$class().$to_s() + ": " + H.$to_s() + ">";
    }), a(pe, "$set_backtrace", function(H) {
      var we = this, _e = !0, X, w;
      if (H === ge)
        we.backtrace = ge, we.stack = "";
      else if (H.$$is_string)
        we.backtrace = [H], we.stack = "  from " + H;
      else {
        if (H.$$is_array) {
          for (X = 0, w = H.length; X < w; X++)
            if (!H[X].$$is_string) {
              _e = !1;
              break;
            }
        } else
          _e = !1;
        _e === !1 && f.$raise(Y("TypeError"), "backtrace must be Array of String"), we.backtrace = H, we.stack = s(H, "map", [], function(d) {
          return d == null && (d = ge), b("  from ", d);
        }).join(`
`);
      }
      return H;
    }), a(pe, "$to_s", function() {
      var H = this, we = ge, _e = ge;
      return l(we = l(_e = H.message) ? H.message.$to_s() : _e) ? we : H.$class().$to_s();
    });
  }("::", Error, ce), e("::", Y("Exception"), "ScriptError"), e("::", Y("ScriptError"), "SyntaxError"), e("::", Y("ScriptError"), "LoadError"), e("::", Y("ScriptError"), "NotImplementedError"), e("::", Y("Exception"), "SystemExit"), e("::", Y("Exception"), "NoMemoryError"), e("::", Y("Exception"), "SignalException"), e("::", Y("SignalException"), "Interrupt"), e("::", Y("Exception"), "SecurityError"), e("::", Y("Exception"), "SystemStackError"), e("::", Y("Exception"), "StandardError"), e("::", Y("StandardError"), "EncodingError"), e("::", Y("StandardError"), "ZeroDivisionError"), e("::", Y("StandardError"), "NameError"), e("::", Y("NameError"), "NoMethodError"), e("::", Y("StandardError"), "RuntimeError"), e("::", Y("RuntimeError"), "FrozenError"), e("::", Y("StandardError"), "LocalJumpError"), e("::", Y("StandardError"), "TypeError"), e("::", Y("StandardError"), "ArgumentError"), e("::", Y("ArgumentError"), "UncaughtThrowError"), e("::", Y("StandardError"), "IndexError"), e("::", Y("IndexError"), "StopIteration"), e("::", Y("StopIteration"), "ClosedQueueError"), e("::", Y("IndexError"), "KeyError"), e("::", Y("StandardError"), "RangeError"), e("::", Y("RangeError"), "FloatDomainError"), e("::", Y("StandardError"), "IOError"), e("::", Y("IOError"), "EOFError"), e("::", Y("StandardError"), "SystemCallError"), e("::", Y("StandardError"), "RegexpError"), e("::", Y("StandardError"), "ThreadError"), e("::", Y("StandardError"), "FiberError"), N.$autoload("Errno", "corelib/error/errno"), function(fe, ae) {
    var Re = e(fe, ae, "FrozenError");
    return Re.$attr_reader("receiver"), a(Re, "$initialize", function pe(Ce, J) {
      var R;
      pe.$$p;
      var ve = this;
      return pe.$$p = null, J = z(J), R = J.$$smap.receiver, R == null && (R = ge), A(ve, Q(ve, "initialize", pe, !1, !0), "initialize", [Ce], null), ve.receiver = R;
    }, -2);
  }("::", Y("RuntimeError")), function(fe, ae) {
    var Re = e(fe, ae, "UncaughtThrowError"), pe = Re.$$prototype;
    return pe.tag = ge, Re.$attr_reader("tag", "value"), a(Re, "$initialize", function Ce(J, R) {
      Ce.$$p;
      var ve = this;
      return Ce.$$p = null, R == null && (R = ge), ve.tag = J, ve.value = R, A(ve, Q(ve, "initialize", Ce, !1, !0), "initialize", ["uncaught throw " + ve.tag.$inspect()], null);
    }, -2);
  }("::", Y("ArgumentError")), function(fe, ae) {
    var Re = e(fe, ae, "NameError");
    return Re.$attr_reader("name"), a(Re, "$initialize", function pe(Ce, J) {
      pe.$$p;
      var R = this;
      return pe.$$p = null, J == null && (J = ge), A(R, Q(R, "initialize", pe, !1, !0), "initialize", [Ce], null), R.name = J;
    }, -2);
  }("::", null), function(fe, ae) {
    var Re = e(fe, ae, "NoMethodError");
    return Re.$attr_reader("args"), a(Re, "$initialize", function pe(Ce, J, R) {
      pe.$$p;
      var ve = this;
      return pe.$$p = null, J == null && (J = ge), R == null && (R = []), A(ve, Q(ve, "initialize", pe, !1, !0), "initialize", [Ce, J], null), ve.args = R;
    }, -2);
  }("::", null), function(fe, ae) {
    var Re = e(fe, ae, "StopIteration");
    return Re.$attr_reader("result");
  }("::", null), function(fe, ae) {
    var Re = e(fe, ae, "KeyError"), pe = Re.$$prototype;
    return pe.receiver = pe.key = ge, a(Re, "$initialize", function Ce(J, R) {
      var ve, F;
      Ce.$$p;
      var ne = this;
      return Ce.$$p = null, R = z(R), ve = R.$$smap.receiver, ve == null && (ve = ge), F = R.$$smap.key, F == null && (F = ge), A(ne, Q(ne, "initialize", Ce, !1, !0), "initialize", [J], null), ne.receiver = ve, ne.key = F;
    }, -2), a(Re, "$receiver", function() {
      var J = this, R = ge;
      return l(R = J.receiver) ? R : f.$raise(Y("ArgumentError"), "no receiver is available");
    }), a(Re, "$key", function() {
      var J = this, R = ge;
      return l(R = J.key) ? R : f.$raise(Y("ArgumentError"), "no key is available");
    });
  }("::", null), function(fe, ae) {
    var Re = Te(fe, "JS"), pe = [Re].concat(ae);
    return e(pe[0], null, "Error"), ge;
  }("::", ce);
};
Opal.modules["corelib/constants"] = function(t) {
  var e = t.const_set;
  t.nil;
  var r = t.$$$;
  return e("::", "RUBY_PLATFORM", "opal"), e("::", "RUBY_ENGINE", "opal"), e("::", "RUBY_VERSION", "3.2.0"), e("::", "RUBY_ENGINE_VERSION", "1.7.3"), e("::", "RUBY_RELEASE_DATE", "2023-03-23"), e("::", "RUBY_PATCHLEVEL", 0), e("::", "RUBY_REVISION", "0"), e("::", "RUBY_COPYRIGHT", "opal - Copyright (C) 2011-2023 Adam Beynon and the Opal contributors"), e("::", "RUBY_DESCRIPTION", "opal " + r("RUBY_ENGINE_VERSION") + " (" + r("RUBY_RELEASE_DATE") + " revision " + r("RUBY_REVISION") + ")");
};
Opal.modules["opal/base"] = function(t) {
  var e = t.Object;
  return t.nil, t.add_stubs("require"), e.$require("corelib/runtime"), e.$require("corelib/helpers"), e.$require("corelib/module"), e.$require("corelib/class"), e.$require("corelib/basic_object"), e.$require("corelib/kernel"), e.$require("corelib/main"), e.$require("corelib/error"), e.$require("corelib/constants");
};
Opal.modules["corelib/nil"] = function(t) {
  var e = t.klass, r = t.Kernel, n = t.def, i = t.return_val, s = t.ensure_kwargs, o = t.NilClass, a = t.slice, l = t.truthy, c = t.rb_gt, f = t.alias, m = t.nil, b = t.$$$;
  return t.add_stubs("raise,name,new,>,length,Rational,to_i"), function(C, N, z) {
    var A = e(C, N, "NilClass");
    return A.$$prototype.$$meta = A, function(Q, Te) {
      return n(Q, "$allocate", function() {
        var ge = this;
        return r.$raise(b("TypeError"), "allocator undefined for " + ge.$name());
      }), t.udef(Q, "$new"), m;
    }(t.get_singleton_class(A)), n(A, "$!", i(!0)), n(A, "$&", i(!1)), n(A, "$|", function(Te) {
      return Te !== !1 && Te !== m;
    }), n(A, "$^", function(Te) {
      return Te !== !1 && Te !== m;
    }), n(A, "$==", function(Te) {
      return Te === m;
    }), n(A, "$dup", i(m)), n(A, "$clone", function(Te) {
      return Te = s(Te), Te.$$smap.freeze, m;
    }, -1), n(A, "$inspect", i("nil")), n(A, "$nil?", i(!0)), n(A, "$singleton_class", function() {
      return o;
    }), n(A, "$to_a", function() {
      return [];
    }), n(A, "$to_h", function() {
      return t.hash();
    }), n(A, "$to_i", i(0)), n(A, "$to_s", i("")), n(A, "$to_c", function() {
      return b("Complex").$new(0, 0);
    }), n(A, "$rationalize", function(Te) {
      var ce, ge;
      return ce = a(arguments), ge = ce, l(c(ge.$length(), 1)) && r.$raise(b("ArgumentError")), r.$Rational(0, 1);
    }, -1), n(A, "$to_r", function() {
      return r.$Rational(0, 1);
    }), n(A, "$instance_variables", function() {
      return [];
    }), f(A, "to_f", "to_i");
  }("::", null);
};
Opal.modules["corelib/boolean"] = function(t) {
  var e = t.klass, r = t.Kernel, n = t.def, i = t.return_self, s = t.ensure_kwargs, o = t.slice, a = t.truthy, l = t.send2, c = t.find_super, f = t.to_a, m = t.alias, b = t.nil, C = t.$$$;
  return t.add_stubs("raise,name,==,to_s,__id__"), function(N, z, A) {
    var Q = e(N, z, "Boolean");
    t.prop(Q.$$prototype, "$$is_boolean", !0);
    for (var Te = ["$$class", "$$meta"], ce = 0; ce < Te.length; ce++)
      Object.defineProperty(Q.$$prototype, Te[ce], {
        configurable: !0,
        enumerable: !1,
        get: function() {
          return this == !0 ? t.TrueClass : this == !1 ? t.FalseClass : t.Boolean;
        }
      });
    return Object.defineProperty(Q.$$prototype, "$$id", {
      configurable: !0,
      enumerable: !1,
      get: function() {
        return this == !0 ? 2 : this == !1 ? 0 : b;
      }
    }), function(ge, Y) {
      return n(ge, "$allocate", function() {
        var ae = this;
        return r.$raise(C("TypeError"), "allocator undefined for " + ae.$name());
      }), t.udef(ge, "$new"), b;
    }(t.get_singleton_class(Q)), n(Q, "$__id__", function() {
      var Y = this;
      return Y.valueOf() ? 2 : 0;
    }), n(Q, "$!", function() {
      var Y = this;
      return Y != !0;
    }), n(Q, "$&", function(Y) {
      var fe = this;
      return fe == !0 ? Y !== !1 && Y !== b : !1;
    }), n(Q, "$|", function(Y) {
      var fe = this;
      return fe == !0 ? !0 : Y !== !1 && Y !== b;
    }), n(Q, "$^", function(Y) {
      var fe = this;
      return fe == !0 ? Y === !1 || Y === b : Y !== !1 && Y !== b;
    }), n(Q, "$==", function(Y) {
      var fe = this;
      return fe == !0 === Y.valueOf();
    }), n(Q, "$singleton_class", function() {
      var Y = this;
      return Y.$$meta;
    }), n(Q, "$to_s", function() {
      var Y = this;
      return Y == !0 ? "true" : "false";
    }), n(Q, "$dup", i), n(Q, "$clone", function(Y) {
      var fe = this;
      return Y = s(Y), Y.$$smap.freeze, fe;
    }, -1), n(Q, "$method_missing", function ge(Y, fe) {
      var ae = ge.$$p || b, Re, pe, Ce = this;
      ge.$$p = null, Re = o(arguments, 1), pe = Re;
      var J = Ce.$$class.$$prototype[t.jsid(Y)];
      return a(typeof J < "u" && !J.$$stub) || l(Ce, c(Ce, "method_missing", ge, !1, !0), "method_missing", [Y].concat(f(pe)), ae), t.send(Ce, J, pe, ae);
    }, -2), n(Q, "$respond_to_missing?", function(Y, fe) {
      var ae = this, Re = ae.$$class.$$prototype[t.jsid(Y)];
      return typeof Re < "u" && !Re.$$stub;
    }, -2), m(Q, "eql?", "=="), m(Q, "equal?", "=="), m(Q, "inspect", "to_s"), m(Q, "object_id", "__id__");
  }("::", Boolean), e("::", C("Boolean"), "TrueClass"), e("::", C("Boolean"), "FalseClass"), b;
};
Opal.modules["corelib/comparable"] = function(t) {
  var e = t.truthy, r = t.module, n = t.rb_gt, i = t.rb_lt, s = t.eqeqeq, o = t.Kernel, a = t.def, l = t.nil, c = t.$$$;
  return t.add_stubs(">,<,===,raise,class,<=>,equal?"), function(f) {
    var m = r(f, "Comparable"), b = l;
    function C(A) {
      return t.is_a(A, t.Integer) ? A : n(A, 0) ? 1 : i(A, 0) ? -1 : 0;
    }
    function N(A, Q) {
      var Te;
      s(l, b = Q) || s(!0, b) || s(!1, b) || s(c("Integer"), b) || s(c("Float"), b) ? Te = Q.$inspect() : Te = Q.$$class, o.$raise(c("ArgumentError"), "comparison of " + A.$class() + " with " + Te + " failed");
    }
    function z(A, Q) {
      var Te = A["$<=>"](Q);
      return e(Te) || N(A, Q), C(Te);
    }
    return a(m, "$==", function(Q) {
      var Te = this, ce = l;
      return e(Te["$equal?"](Q)) ? !0 : Te["$<=>"] == t.Kernel["$<=>"] ? !1 : Te.$$comparable ? (Te.$$comparable = !1, !1) : e(ce = Te["$<=>"](Q)) ? C(ce) == 0 : !1;
    }), a(m, "$>", function(Q) {
      var Te = this;
      return z(Te, Q) > 0;
    }), a(m, "$>=", function(Q) {
      var Te = this;
      return z(Te, Q) >= 0;
    }), a(m, "$<", function(Q) {
      var Te = this;
      return z(Te, Q) < 0;
    }), a(m, "$<=", function(Q) {
      var Te = this;
      return z(Te, Q) <= 0;
    }), a(m, "$between?", function(Q, Te) {
      var ce = this;
      return !(i(ce, Q) || n(ce, Te));
    }), a(m, "$clamp", function(Q, Te) {
      var ce = this;
      Te == null && (Te = l);
      var ge, Y;
      if (Te === l && (t.is_a(Q, t.Range) || o.$raise(c("TypeError"), "wrong argument type " + Q.$class() + " (expected Range)"), Y = Q.excl, Te = Q.end, Q = Q.begin, Te !== l && Y && o.$raise(c("ArgumentError"), "cannot clamp with an exclusive range")), Q !== l && Te !== l && z(Q, Te) > 0 && o.$raise(c("ArgumentError"), "min argument must be smaller than max argument"), Q !== l) {
        if (ge = z(ce, Q), ge == 0)
          return ce;
        if (ge < 0)
          return Q;
      }
      return Te !== l && (ge = z(ce, Te), ge > 0) ? Te : ce;
    }, -2);
  }("::");
};
Opal.modules["corelib/regexp"] = function(t) {
  var e = t.coerce_to, r = t.prop, n = t.freeze, i = t.klass, s = t.const_set, o = t.send2, a = t.find_super, l = t.def, c = t.truthy, f = t.gvars, m = t.slice, b = t.Kernel, C = t.Opal, N = t.alias, z = t.send, A = t.hash2, Q = t.rb_plus, Te = t.ensure_kwargs, ce = t.rb_ge, ge = t.to_a, Y = t.eqeqeq, fe = t.rb_minus, ae = t.return_ivar, Re = [], pe = t.nil, Ce = t.$$$;
  return t.add_stubs("nil?,[],raise,escape,options,to_str,new,join,coerce_to!,!,match,coerce_to?,begin,frozen?,uniq,map,scan,source,to_proc,transform_values,group_by,each_with_index,+,last,=~,==,attr_reader,>=,length,is_a?,include?,names,regexp,named_captures,===,captures,-,inspect,empty?,each,to_a"), i("::", Ce("StandardError"), "RegexpError"), function(J, R, ve) {
    var F = i(J, R, "Regexp"), ne = [F].concat(ve), H = t.$r(ne);
    return s(F, "IGNORECASE", 1), s(F, "EXTENDED", 2), s(F, "MULTILINE", 4), t.prop(F.$$prototype, "$$is_regexp", !0), function(we, _e) {
      var X = [we].concat(_e), w = t.$r(X);
      return l(we, "$allocate", function h() {
        var d = h.$$p || pe, _ = this, g = pe;
        return h.$$p = null, g = o(_, a(_, "allocate", h, !1, !0), "allocate", [], d), g.uninitialized = !0, g;
      }), l(we, "$escape", function(d) {
        return t.escape_regexp(d);
      }), l(we, "$last_match", function(d) {
        return f["~"] == null && (f["~"] = pe), d == null && (d = pe), c(d["$nil?"]()) ? f["~"] : c(f["~"]) ? f["~"]["$[]"](d) : pe;
      }, -1), l(we, "$union", function(d) {
        var _, g, $ = this;
        _ = m(arguments), g = _;
        var I, D, ie, Me, Je;
        if (g.length == 0)
          return /(?!)/;
        if (g.length == 1 && g[0].$$is_regexp)
          return g[0];
        I = g[0].$$is_array, g.length > 1 && I && b.$raise(Ce("TypeError"), "no implicit conversion of Array into String"), I && (g = g[0]), Me = void 0, D = [];
        for (var it = 0; it < g.length; it++)
          ie = g[it], ie.$$is_string ? D.push($.$escape(ie)) : ie.$$is_regexp ? (Je = ie.$options(), Me != null && Me != Je && b.$raise(Ce("TypeError"), "All expressions must use the same options"), Me = Je, D.push("(" + ie.source + ")")) : D.push($.$escape(ie.$to_str()));
        return $.$new(D.$join("|"), Me);
      }, -1), l(we, "$new", function(d, _) {
        if (d.$$is_regexp)
          return new RegExp(d);
        if (d = C["$coerce_to!"](d, Ce("String"), "to_str"), d.charAt(d.length - 1) === "\\" && d.charAt(d.length - 2) !== "\\" && b.$raise(Ce("RegexpError"), "too short escape sequence: /" + d + "/"), d = d.replace("\\A", "^").replace("\\z", "$"), _ === void 0 || _["$!"]())
          return new RegExp(d);
        if (_.$$is_number) {
          var g = "";
          w("IGNORECASE") & _ && (g += "i"), w("MULTILINE") & _ && (g += "m"), _ = g;
        } else
          _ = "i";
        return new RegExp(d, _);
      }, -2), N(we, "compile", "new"), N(we, "quote", "escape");
    }(t.get_singleton_class(F), ne), l(F, "$==", function(_e) {
      var X = this;
      return _e instanceof RegExp && X.toString() === _e.toString();
    }), l(F, "$===", function(_e) {
      var X = this;
      return X.$match(C["$coerce_to?"](_e, Ce("String"), "to_str")) !== pe;
    }), l(F, "$=~", function(_e) {
      var X = this, w = pe;
      return f["~"] == null && (f["~"] = pe), c(w = X.$match(_e)) ? f["~"].$begin(0) : w;
    }), l(F, "$freeze", function() {
      var _e = this;
      return c(_e["$frozen?"]()) ? _e : (_e.hasOwnProperty("$$g") || r(_e, "$$g", null), _e.hasOwnProperty("$$gm") || r(_e, "$$gm", null), n(_e));
    }), l(F, "$inspect", function() {
      var _e = this, X = /^\/(.*)\/([^\/]*)$/, w = _e.toString(), h = X.exec(w);
      if (h) {
        for (var d = h[1], _ = h[2], g = d.split(""), $ = g.length, I = !1, D = "", ie = 0; ie < $; ie++) {
          var Me = g[ie];
          !I && Me == "/" && (D = D.concat("\\")), D = D.concat(Me), Me == "\\" ? I ? I = !1 : I = !0 : I = !1;
        }
        return "/" + D + "/" + _;
      } else
        return w;
    }), l(F, "$match", function we(_e, X) {
      var w = we.$$p || pe, h = this;
      if (f["~"] == null && (f["~"] = pe), we.$$p = null, h.uninitialized && b.$raise(Ce("TypeError"), "uninitialized Regexp"), X === void 0) {
        if (_e === pe)
          return f["~"] = pe;
        var d = h.exec(e(_e, Ce("String"), "to_str"));
        return d ? (f["~"] = Ce("MatchData").$new(h, d), w === pe ? f["~"] : t.yield1(w, f["~"])) : f["~"] = pe;
      }
      if (X = e(X, Ce("Integer"), "to_int"), _e === pe || (_e = e(_e, Ce("String"), "to_str"), X < 0 && (X += _e.length, X < 0)))
        return f["~"] = pe;
      for (var _, g = t.global_regexp(h); ; ) {
        if (_ = g.exec(_e), _ === null)
          return f["~"] = pe;
        if (_.index >= X)
          return f["~"] = Ce("MatchData").$new(g, _), w === pe ? f["~"] : t.yield1(w, f["~"]);
        g.lastIndex = _.index + 1;
      }
    }, -2), l(F, "$match?", function(_e, X) {
      var w = this;
      if (w.uninitialized && b.$raise(Ce("TypeError"), "uninitialized Regexp"), X === void 0)
        return _e === pe ? !1 : w.test(e(_e, Ce("String"), "to_str"));
      if (X = e(X, Ce("Integer"), "to_int"), _e === pe || (_e = e(_e, Ce("String"), "to_str"), X < 0 && (X += _e.length, X < 0)))
        return !1;
      var h, d = t.global_regexp(w);
      return h = d.exec(_e), !(h === null || h.index < X);
    }, -2), l(F, "$names", function() {
      var _e = this;
      return z(_e.$source().$scan(/\(?<(\w+)>/, A(["no_matchdata"], { no_matchdata: !0 })), "map", [], "first".$to_proc()).$uniq();
    }), l(F, "$named_captures", function() {
      var _e = this;
      return z(z(z(_e.$source().$scan(/\(?<(\w+)>/, A(["no_matchdata"], { no_matchdata: !0 })), "map", [], "first".$to_proc()).$each_with_index(), "group_by", [], "first".$to_proc()), "transform_values", [], function(w) {
        return w == null && (w = pe), z(w, "map", [], function(d) {
          return d == null && (d = pe), Q(d.$last(), 1);
        });
      });
    }), l(F, "$~", function() {
      var _e = this;
      return f._ == null && (f._ = pe), _e["$=~"](f._);
    }), l(F, "$source", function() {
      var _e = this;
      return _e.source;
    }), l(F, "$options", function() {
      var _e = this;
      _e.uninitialized && b.$raise(Ce("TypeError"), "uninitialized Regexp");
      var X = 0;
      return _e.multiline && (X |= H("MULTILINE")), _e.ignoreCase && (X |= H("IGNORECASE")), X;
    }), l(F, "$casefold?", function() {
      var _e = this;
      return _e.ignoreCase;
    }), N(F, "eql?", "=="), N(F, "to_s", "source");
  }("::", RegExp, Re), function(J, R, ve) {
    var F = i(J, R, "MatchData"), ne = [F].concat(ve), H = t.$r(ne), we = F.$$prototype;
    return we.matches = pe, F.$attr_reader("post_match", "pre_match", "regexp", "string"), l(F, "$initialize", function(X, w, h) {
      var d, _ = this;
      h = Te(h), d = h.$$smap.no_matchdata, d == null && (d = !1), c(d) || (f["~"] = _), _.regexp = X, _.begin = w.index, _.string = w.input, _.pre_match = w.input.slice(0, w.index), _.post_match = w.input.slice(w.index + w[0].length), _.matches = [];
      for (var g = 0, $ = w.length; g < $; g++) {
        var I = w[g];
        I == null ? _.matches.push(pe) : _.matches.push(I);
      }
    }, -3), l(F, "$match", function(X) {
      var w = this, h = pe;
      return c(h = w["$[]"](X)) ? h : c(X["$is_a?"](H("Integer"))) && c(ce(X, w.$length())) ? b.$raise(Ce("IndexError"), "index " + X + " out of matches") : pe;
    }), l(F, "$match_length", function(X) {
      var w, h = this;
      return w = h.$match(X), w === pe || w == null ? pe : w.$length();
    }), l(F, "$[]", function(X) {
      var w, h, d = this;
      return w = m(arguments), h = w, h[0].$$is_string ? (d.$regexp().$names()["$include?"](h["$[]"](0))["$!"]() && b.$raise(Ce("IndexError"), "undefined group name reference: " + h["$[]"](0)), d.$named_captures()["$[]"](h["$[]"](0))) : z(d.matches, "[]", ge(h));
    }, -1), l(F, "$offset", function(X) {
      var w = this;
      return X !== 0 && b.$raise(Ce("ArgumentError"), "MatchData#offset only supports 0th element"), [w.begin, w.begin + w.matches[X].length];
    }), l(F, "$==", function(X) {
      var w = this, h = pe, d = pe, _ = pe, g = pe;
      return Y(Ce("MatchData"), X) ? c(h = c(d = c(_ = c(g = w.string == X.string) ? w.regexp.toString() == X.regexp.toString() : g) ? w.pre_match == X.pre_match : _) ? w.post_match == X.post_match : d) ? w.begin == X.begin : h : !1;
    }), l(F, "$begin", function(X) {
      var w = this;
      return X !== 0 && b.$raise(Ce("ArgumentError"), "MatchData#begin only supports 0th element"), w.begin;
    }), l(F, "$end", function(X) {
      var w = this;
      return X !== 0 && b.$raise(Ce("ArgumentError"), "MatchData#end only supports 0th element"), w.begin + w.matches[X].length;
    }), l(F, "$captures", function() {
      var X = this;
      return X.matches.slice(1);
    }), l(F, "$named_captures", function() {
      var X = this, w = pe;
      return w = X.$captures(), z(X.$regexp().$named_captures(), "transform_values", [], function(d) {
        return d == null && (d = pe), w["$[]"](fe(d.$last(), 1));
      });
    }), l(F, "$names", function() {
      var X = this;
      return X.$regexp().$names();
    }), l(F, "$inspect", function() {
      var X = this, w = "#<MatchData " + X.matches[0].$inspect();
      if (X.$regexp().$names()["$empty?"]())
        for (var h = 1, d = X.matches.length; h < d; h++)
          w += " " + h + ":" + X.matches[h].$inspect();
      else
        z(X.$named_captures(), "each", [], function(g, $) {
          return g == null && (g = pe), $ == null && ($ = pe), w += " " + g + ":" + $.$inspect();
        });
      return w + ">";
    }), l(F, "$length", function() {
      var X = this;
      return X.matches.length;
    }), l(F, "$to_a", ae("matches")), l(F, "$to_s", function() {
      var X = this;
      return X.matches[0];
    }), l(F, "$values_at", function(X) {
      var w, h, d = this;
      w = m(arguments), h = w;
      var _, g, $, I = [];
      for (_ = 0; _ < h.length; _++) {
        if (h[_].$$is_range && (g = h[_].$to_a(), g.unshift(_, 1), Array.prototype.splice.apply(h, g)), $ = C["$coerce_to!"](h[_], Ce("Integer"), "to_int"), $ < 0 && ($ += d.matches.length, $ < 0)) {
          I.push(pe);
          continue;
        }
        I.push(d.matches[$]);
      }
      return I;
    }, -1), N(F, "eql?", "=="), N(F, "size", "length");
  }(Re[0], null, Re);
};
Opal.modules["corelib/string"] = function(t) {
  var e = t.coerce_to, r = t.respond_to, n = t.global_multiline_regexp, i = t.prop, s = t.klass, o = t.def, a = t.Opal, l = t.defs, c = t.slice, f = t.send, m = t.to_a, b = t.extract_kwargs, C = t.ensure_kwargs, N = t.eqeqeq, z = t.Kernel, A = t.truthy, Q = t.gvars, Te = t.rb_divide, ce = t.rb_plus, ge = t.eqeq, Y = t.hash2, fe = t.alias, ae = t.const_set, Re = t.top, pe = [], Ce = t.$r(pe), J = t.nil, R = t.$$$;
  return t.add_stubs("require,include,coerce_to?,initialize,===,format,raise,respond_to?,to_s,to_str,<=>,==,=~,new,force_encoding,casecmp,empty?,ljust,ceil,/,+,rjust,floor,coerce_to!,nil?,class,copy_singleton_methods,initialize_clone,initialize_dup,enum_for,chomp,[],to_i,length,each_line,to_proc,to_a,match,match?,captures,proc,succ,escape,include?,upcase,unicode_normalize,dup,__id__,next,intern,pristine"), Re.$require("corelib/comparable"), Re.$require("corelib/regexp"), function(ve, F, ne) {
    var H = s(ve, F, "String"), we = [H].concat(ne), _e = t.$r(we);
    H.$include(R("Comparable")), t.prop(H.$$prototype, "$$is_string", !0), o(H, "$__id__", function() {
      var h = this;
      return h.toString();
    }), l(H, "$try_convert", function(h) {
      return a["$coerce_to?"](h, R("String"), "to_str");
    }), l(H, "$new", function(h) {
      var d, _, g = this;
      d = c(arguments), _ = d;
      var $ = _[0] || "", I = _[_.length - 1];
      return $ = e($, R("String"), "to_str"), I && I.$$is_hash && I.$$smap.encoding && ($ = $.$force_encoding(I.$$smap.encoding)), $ = new g.$$constructor($), $.$initialize.$$pristine || f($, "initialize", m(_)), $;
    }, -1), o(H, "$initialize", function(h, d) {
      var _, g;
      return _ = c(arguments), g = b(_), g = C(g), _.length > 0 && _.shift(), g.$$smap.encoding, g.$$smap.capacity, J;
    }, -1), o(H, "$%", function(h) {
      var d = this;
      return N(R("Array"), h) ? f(d, "format", [d].concat(m(h))) : d.$format(d, h);
    }), o(H, "$*", function(h) {
      var d = this;
      if (h = e(h, R("Integer"), "to_int"), h < 0 && z.$raise(R("ArgumentError"), "negative argument"), h === 0)
        return "";
      var _ = "", g = d.toString();
      for (g.length * h >= 1 << 28 && z.$raise(R("RangeError"), "multiply count must not overflow maximum string size"); (h & 1) === 1 && (_ += g), h >>>= 1, h !== 0; )
        g += g;
      return _;
    }), o(H, "$+", function(h) {
      var d = this;
      if (h = e(h, R("String"), "to_str"), h == "" && d.$$class === t.String)
        return d;
      if (d == "" && h.$$class === t.String)
        return h;
      var _ = d + h;
      return d.encoding === _.encoding && h.encoding === _.encoding || d.encoding.name === "UTF-8" || h.encoding.name === "UTF-8" ? _ : t.enc(_, d.encoding);
    }), o(H, "$<=>", function(h) {
      var d = this;
      if (A(h["$respond_to?"]("to_str")))
        return h = h.$to_str().$to_s(), d > h ? 1 : d < h ? -1 : 0;
      var _ = h["$<=>"](d);
      return _ === J ? J : _ > 0 ? -1 : _ < 0 ? 1 : 0;
    }), o(H, "$==", function(h) {
      var d = this;
      return h.$$is_string ? d.toString() === h.toString() : r(h, "$to_str") ? h["$=="](d) : !1;
    }), o(H, "$=~", function(h) {
      var d = this;
      return h.$$is_string && z.$raise(R("TypeError"), "type mismatch: String given"), h["$=~"](d);
    }), o(H, "$[]", function(h, d) {
      var _ = this, g = _.length, $, I;
      if (h.$$is_range)
        return $ = h.excl, I = h, d = h.end === J ? -1 : e(h.end, R("Integer"), "to_int"), h = h.begin === J ? 0 : e(h.begin, R("Integer"), "to_int"), Math.abs(h) > g ? J : (h < 0 && (h += g), d < 0 && (d += g), (!$ || I.end === J) && (d += 1), d = d - h, d < 0 && (d = 0), _.substr(h, d));
      if (h.$$is_string)
        return d != null && z.$raise(R("TypeError")), _.indexOf(h) !== -1 ? h : J;
      if (h.$$is_regexp) {
        var D = _.match(h);
        return D === null ? (Q["~"] = J, J) : (Q["~"] = R("MatchData").$new(h, D), d == null ? D[0] : (d = e(d, R("Integer"), "to_int"), d < 0 && -d < D.length ? D[d += D.length] : d >= 0 && d < D.length ? D[d] : J));
      }
      return h = e(h, R("Integer"), "to_int"), h < 0 && (h += g), d == null ? h >= g || h < 0 ? J : _.substr(h, 1) : (d = e(d, R("Integer"), "to_int"), d < 0 || h > g || h < 0 ? J : _.substr(h, d));
    }, -2), o(H, "$b", function() {
      var h = this;
      return new String(h).$force_encoding("binary");
    }), o(H, "$capitalize", function() {
      var h = this;
      return h.charAt(0).toUpperCase() + h.substr(1).toLowerCase();
    }), o(H, "$casecmp", function(h) {
      var d = this;
      if (!A(h["$respond_to?"]("to_str")))
        return J;
      h = e(h, R("String"), "to_str").$to_s();
      var _ = /^[\x00-\x7F]*$/;
      return _.test(d) && _.test(h) && (d = d.toLowerCase(), h = h.toLowerCase()), d["$<=>"](h);
    }), o(H, "$casecmp?", function(h) {
      var d = this, _ = d.$casecmp(h);
      return _ === J ? J : _ === 0;
    }), o(H, "$center", function(h, d) {
      var _ = this;
      if (d == null && (d = " "), h = e(h, R("Integer"), "to_int"), d = e(d, R("String"), "to_str").$to_s(), A(d["$empty?"]()) && z.$raise(R("ArgumentError"), "zero width padding"), A(h <= _.length))
        return _;
      var g = _.$ljust(Te(ce(h, _.length), 2).$ceil(), d), $ = _.$rjust(Te(ce(h, _.length), 2).$floor(), d);
      return $ + g.slice(_.length);
    }, -2), o(H, "$chomp", function(h) {
      var d = this;
      if (Q["/"] == null && (Q["/"] = J), h == null && (h = Q["/"]), A(h === J || d.length === 0))
        return d;
      h = a["$coerce_to!"](h, R("String"), "to_str").$to_s();
      var _;
      if (h === `
`)
        _ = d.replace(/\r?\n?$/, "");
      else if (h === "")
        _ = d.replace(/(\r?\n)+$/, "");
      else if (d.length >= h.length) {
        var g = d.substr(d.length - h.length, h.length);
        g === h && (_ = d.substr(0, d.length - h.length));
      }
      return _ ?? d;
    }, -1), o(H, "$chop", function() {
      var h = this, d = h.length, _;
      return d <= 1 ? _ = "" : h.charAt(d - 1) === `
` && h.charAt(d - 2) === "\r" ? _ = h.substr(0, d - 2) : _ = h.substr(0, d - 1), _;
    }), o(H, "$chr", function() {
      var h = this;
      return h.charAt(0);
    }), o(H, "$clone", function(h) {
      var d, _ = this, g = J;
      return h = C(h), d = h.$$smap.freeze, d == null && (d = J), A(d["$nil?"]()) || ge(d, !0) || ge(d, !1) || _.$raise(_e("ArgumentError"), "unexpected value for freeze: " + d.$class()), g = new String(_), g.$copy_singleton_methods(_), g.$initialize_clone(_, Y(["freeze"], { freeze: d })), ge(d, !0) ? g.$$frozen || (g.$$frozen = !0) : A(d["$nil?"]()) && _.$$frozen && (g.$$frozen = !0), g;
    }, -1), o(H, "$dup", function() {
      var h = this, d = J;
      return d = new String(h), d.$initialize_dup(h), d;
    }), o(H, "$count", function(h) {
      var d, _, g = this;
      d = c(arguments), _ = d, _.length === 0 && z.$raise(R("ArgumentError"), "ArgumentError: wrong number of arguments (0 for 1+)");
      var $ = X(_);
      return $ === null ? 0 : g.length - g.replace(new RegExp($, "g"), "").length;
    }, -1), o(H, "$delete", function(h) {
      var d, _, g = this;
      d = c(arguments), _ = d, _.length === 0 && z.$raise(R("ArgumentError"), "ArgumentError: wrong number of arguments (0 for 1+)");
      var $ = X(_);
      return $ === null ? g : g.replace(new RegExp($, "g"), "");
    }, -1), o(H, "$delete_prefix", function(h) {
      var d = this;
      return h.$$is_string || (h = e(h, R("String"), "to_str")), d.slice(0, h.length) === h ? d.slice(h.length) : d;
    }), o(H, "$delete_suffix", function(h) {
      var d = this;
      return h.$$is_string || (h = e(h, R("String"), "to_str")), d.slice(d.length - h.length) === h ? d.slice(0, d.length - h.length) : d;
    }), o(H, "$downcase", function() {
      var h = this;
      return h.toLowerCase();
    }), o(H, "$each_line", function w(h, d) {
      var _ = w.$$p || J, g, $, I, D, ie = this;
      if (Q["/"] == null && (Q["/"] = J), w.$$p = null, g = c(arguments), $ = b(g), $ = C($), g.length > 0 && (I = g.shift()), I == null && (I = Q["/"]), D = $.$$smap.chomp, D == null && (D = !1), _ === J)
        return ie.$enum_for("each_line", I, Y(["chomp"], { chomp: D }));
      if (I === J)
        return t.yield1(_, ie), ie;
      I = e(I, R("String"), "to_str");
      var Me, Je, it, dt, St, gt, wt, bt;
      if (I.length === 0) {
        for (Me = ie.split(/((?:\r?\n){2})(?:(?:\r?\n)*)/), Je = 0, it = Me.length; Je < it; Je += 2)
          (Me[Je] || Me[Je + 1]) && (bt = (Me[Je] || "") + (Me[Je + 1] || ""), D && (bt = bt.$chomp(`
`)), t.yield1(_, bt));
        return ie;
      }
      for (St = ie.$chomp(I), gt = ie.length != St.length, wt = St.split(I), Je = 0, dt = wt.length; Je < dt; Je++)
        bt = wt[Je], (Je < dt - 1 || gt) && (bt += I), D && (bt = bt.$chomp(I)), t.yield1(_, bt);
      return ie;
    }, -1), o(H, "$empty?", function() {
      var h = this;
      return h.length === 0;
    }), o(H, "$end_with?", function(h) {
      var d, _, g = this;
      d = c(arguments), _ = d;
      for (var $ = 0, I = _.length; $ < I; $++) {
        var D = e(_[$], R("String"), "to_str").$to_s();
        if (g.length >= D.length && g.substr(g.length - D.length, D.length) == D)
          return !0;
      }
      return !1;
    }, -1), o(H, "$gsub", function w(h, d) {
      var _ = w.$$p || J, g = this;
      if (w.$$p = null, d === void 0 && _ === J)
        return g.$enum_for("gsub", h);
      var $ = "", I = J, D = 0, ie, Me;
      h.$$is_regexp ? h = n(h) : (h = e(h, R("String"), "to_str"), h = new RegExp(h.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "gm"));
      for (var Je; ; ) {
        if (ie = h.exec(g), ie === null) {
          Q["~"] = J, $ += g.slice(D);
          break;
        }
        I = R("MatchData").$new(h, ie), d === void 0 ? (Je = h.lastIndex, Me = _(ie[0]), h.lastIndex = Je) : d.$$is_hash ? Me = d["$[]"](ie[0]).$to_s() : (d.$$is_string || (d = e(d, R("String"), "to_str")), Me = d.replace(/([\\]+)([0-9+&`'])/g, function(it, dt, St) {
          if (dt.length % 2 === 0)
            return it;
          switch (St) {
            case "+":
              for (var gt = ie.length - 1; gt > 0; gt--)
                if (ie[gt] !== void 0)
                  return dt.slice(1) + ie[gt];
              return "";
            case "&":
              return dt.slice(1) + ie[0];
            case "`":
              return dt.slice(1) + g.slice(0, ie.index);
            case "'":
              return dt.slice(1) + g.slice(ie.index + ie[0].length);
            default:
              return dt.slice(1) + (ie[St] || "");
          }
        }).replace(/\\\\/g, "\\")), h.lastIndex === ie.index ? ($ += g.slice(D, ie.index) + Me + (g[ie.index] || ""), h.lastIndex += 1) : $ += g.slice(D, ie.index) + Me, D = h.lastIndex;
      }
      return Q["~"] = I, $;
    }, -2), o(H, "$hash", function() {
      var h = this;
      return h.toString();
    }), o(H, "$hex", function() {
      var h = this;
      return h.$to_i(16);
    }), o(H, "$include?", function(h) {
      var d = this;
      return h.$$is_string || (h = e(h, R("String"), "to_str")), d.indexOf(h) !== -1;
    }), o(H, "$index", function(h, d) {
      var _ = this, g, $, I;
      if (d === void 0)
        d = 0;
      else if (d = e(d, R("Integer"), "to_int"), d < 0 && (d += _.length, d < 0))
        return J;
      if (h.$$is_regexp)
        for (I = n(h); ; ) {
          if ($ = I.exec(_), $ === null) {
            Q["~"] = J, g = -1;
            break;
          }
          if ($.index >= d) {
            Q["~"] = R("MatchData").$new(I, $), g = $.index;
            break;
          }
          I.lastIndex = $.index + 1;
        }
      else
        h = e(h, R("String"), "to_str"), h.length === 0 && d > _.length ? g = -1 : g = _.indexOf(h, d);
      return g === -1 ? J : g;
    }, -2), o(H, "$inspect", function() {
      var h = this, d = /[\\\"\x00-\x1f\u007F-\u009F\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, _ = {
        "\x07": "\\a",
        "\x1B": "\\e",
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        "\v": "\\v",
        '"': '\\"',
        "\\": "\\\\"
      }, g = h.replace(d, function($) {
        return _[$] ? _[$] : ($ = $.charCodeAt(0), $ <= 255 && (h.encoding["$binary?"]() || h.internal_encoding["$binary?"]()) ? "\\x" + ("00" + $.toString(16).toUpperCase()).slice(-2) : "\\u" + ("0000" + $.toString(16).toUpperCase()).slice(-4));
      });
      return '"' + g.replace(/\#[\$\@\{]/g, "\\$&") + '"';
    }), o(H, "$intern", function() {
      var h = this;
      return h.toString();
    }), o(H, "$length", function() {
      var h = this;
      return h.length;
    }), fe(H, "size", "length"), o(H, "$lines", function w(h, d) {
      var _ = w.$$p || J, g, $, I, D, ie = this, Me = J;
      return Q["/"] == null && (Q["/"] = J), w.$$p = null, g = c(arguments), $ = b(g), $ = C($), g.length > 0 && (I = g.shift()), I == null && (I = Q["/"]), D = $.$$smap.chomp, D == null && (D = !1), Me = f(ie, "each_line", [I, Y(["chomp"], { chomp: D })], _.$to_proc()), A(_) ? ie : Me.$to_a();
    }, -1), o(H, "$ljust", function(h, d) {
      var _ = this;
      if (d == null && (d = " "), h = e(h, R("Integer"), "to_int"), d = e(d, R("String"), "to_str").$to_s(), A(d["$empty?"]()) && z.$raise(R("ArgumentError"), "zero width padding"), A(h <= _.length))
        return _;
      var g = -1, $ = "";
      for (h -= _.length; ++g < h; )
        $ += d;
      return _ + $.slice(0, h);
    }, -2), o(H, "$lstrip", function() {
      var h = this;
      return h.replace(/^[\u0000\s]*/, "");
    }), o(H, "$ascii_only?", function() {
      var h = this;
      return h.encoding.ascii ? /^[\x00-\x7F]*$/.test(h) : !1;
    }), o(H, "$match", function w(h, d) {
      var _ = w.$$p || J, g = this;
      return w.$$p = null, (N(_e("String"), h) || A(h["$respond_to?"]("to_str"))) && (h = R("Regexp").$new(h.$to_str())), N(R("Regexp"), h) || z.$raise(R("TypeError"), "wrong argument type " + h.$class() + " (expected Regexp)"), f(h, "match", [g, d], _.$to_proc());
    }, -2), o(H, "$match?", function(h, d) {
      var _ = this;
      return (N(_e("String"), h) || A(h["$respond_to?"]("to_str"))) && (h = R("Regexp").$new(h.$to_str())), N(R("Regexp"), h) || z.$raise(R("TypeError"), "wrong argument type " + h.$class() + " (expected Regexp)"), h["$match?"](_, d);
    }, -2), o(H, "$next", function() {
      var h = this, d = h.length;
      if (d === 0)
        return "";
      for (var _ = h, g = h.search(/[a-zA-Z0-9]/), $ = !1, I; d--; ) {
        if (I = h.charCodeAt(d), I >= 48 && I <= 57 || I >= 65 && I <= 90 || I >= 97 && I <= 122)
          switch (I) {
            case 57:
              $ = !0, I = 48;
              break;
            case 90:
              $ = !0, I = 65;
              break;
            case 122:
              $ = !0, I = 97;
              break;
            default:
              $ = !1, I += 1;
          }
        else
          g === -1 ? I === 255 ? ($ = !0, I = 0) : ($ = !1, I += 1) : $ = !0;
        if (_ = _.slice(0, d) + String.fromCharCode(I) + _.slice(d + 1), $ && (d === 0 || d === g)) {
          switch (I) {
            case 65:
              break;
            case 97:
              break;
            default:
              I += 1;
          }
          d === 0 ? _ = String.fromCharCode(I) + _ : _ = _.slice(0, d) + String.fromCharCode(I) + _.slice(d), $ = !1;
        }
        if (!$)
          break;
      }
      return _;
    }), o(H, "$oct", function() {
      var h = this, d, _ = h, g = 8;
      return /^\s*_/.test(_) ? 0 : (_ = _.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function($, I, D, ie) {
        switch (ie.charAt(0)) {
          case "+":
          case "-":
            return $;
          case "0":
            if (ie.charAt(1) === "x" && D === "0x")
              return $;
        }
        switch (D) {
          case "0b":
            g = 2;
            break;
          case "0":
          case "0o":
            g = 8;
            break;
          case "0d":
            g = 10;
            break;
          case "0x":
            g = 16;
            break;
        }
        return I + ie;
      }), d = parseInt(_.replace(/_(?!_)/g, ""), g), isNaN(d) ? 0 : d);
    }), o(H, "$ord", function() {
      var h = this;
      return typeof h.codePointAt == "function" ? h.codePointAt(0) : h.charCodeAt(0);
    }), o(H, "$partition", function(h) {
      var d = this, _, g;
      return h.$$is_regexp ? (g = h.exec(d), g === null ? _ = -1 : (R("MatchData").$new(h, g), h = g[0], _ = g.index)) : (h = e(h, R("String"), "to_str"), _ = d.indexOf(h)), _ === -1 ? [d, "", ""] : [
        d.slice(0, _),
        d.slice(_, _ + h.length),
        d.slice(_ + h.length)
      ];
    }), o(H, "$reverse", function() {
      var h = this;
      return h.split("").reverse().join("");
    }), o(H, "$rindex", function(h, d) {
      var _ = this, g, $, I, D;
      if (d === void 0)
        d = _.length;
      else if (d = e(d, R("Integer"), "to_int"), d < 0 && (d += _.length, d < 0))
        return J;
      if (h.$$is_regexp) {
        for ($ = null, I = n(h); D = I.exec(_), !(D === null || D.index > d); )
          $ = D, I.lastIndex = $.index + 1;
        $ === null ? (Q["~"] = J, g = -1) : (R("MatchData").$new(I, $), g = $.index);
      } else
        h = e(h, R("String"), "to_str"), g = _.lastIndexOf(h, d);
      return g === -1 ? J : g;
    }, -2), o(H, "$rjust", function(h, d) {
      var _ = this;
      if (d == null && (d = " "), h = e(h, R("Integer"), "to_int"), d = e(d, R("String"), "to_str").$to_s(), A(d["$empty?"]()) && z.$raise(R("ArgumentError"), "zero width padding"), A(h <= _.length))
        return _;
      var g = Math.floor(h - _.length), $ = Math.floor(g / d.length), I = Array($ + 1).join(d), D = g - I.length;
      return I + d.slice(0, D) + _;
    }, -2), o(H, "$rpartition", function(h) {
      var d = this, _, g, $, I;
      if (h.$$is_regexp) {
        for (g = null, $ = n(h); I = $.exec(d), I !== null; )
          g = I, $.lastIndex = g.index + 1;
        g === null ? _ = -1 : (R("MatchData").$new($, g), h = g[0], _ = g.index);
      } else
        h = e(h, R("String"), "to_str"), _ = d.lastIndexOf(h);
      return _ === -1 ? ["", "", d] : [
        d.slice(0, _),
        d.slice(_, _ + h.length),
        d.slice(_ + h.length)
      ];
    }), o(H, "$rstrip", function() {
      var h = this;
      return h.replace(/[\s\u0000]*$/, "");
    }), o(H, "$scan", function w(h, d) {
      var _ = w.$$p || J, g, $ = this;
      w.$$p = null, d = C(d), g = d.$$smap.no_matchdata, g == null && (g = !1);
      var I = [], D = J, ie;
      for (h.$$is_regexp ? h = n(h) : (h = e(h, R("String"), "to_str"), h = new RegExp(h.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "gm")); (ie = h.exec($)) != null; )
        D = R("MatchData").$new(h, ie, Y(["no_matchdata"], { no_matchdata: g })), _ === J ? ie.length == 1 ? I.push(ie[0]) : I.push(D.$captures()) : ie.length == 1 ? t.yield1(_, ie[0]) : t.yield1(_, D.$captures()), h.lastIndex === ie.index && (h.lastIndex += 1);
      return g || (Q["~"] = D), _ !== J ? $ : I;
    }, -2), o(H, "$singleton_class", function() {
      var h = this;
      return t.get_singleton_class(h);
    }), o(H, "$split", function(h, d) {
      var _ = this, g = J;
      if (Q[";"] == null && (Q[";"] = J), _.length === 0)
        return [];
      if (d === void 0)
        d = 0;
      else if (d = a["$coerce_to!"](d, R("Integer"), "to_int"), d === 1)
        return [_];
      (h === void 0 || h === J) && (h = A(g = Q[";"]) ? g : " ");
      var $ = [], I = _.toString(), D = 0, ie, Me, Je;
      if (h.$$is_regexp ? h = n(h) : (h = e(h, R("String"), "to_str").$to_s(), h === " " ? (h = /\s+/gm, I = I.replace(/^\s+/, "")) : h = new RegExp(h.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "gm")), $ = I.split(h), $.length === 1 && $[0] === I)
        return [$[0]];
      for (; (Me = $.indexOf(void 0)) !== -1; )
        $.splice(Me, 1);
      if (d === 0) {
        for (; $[$.length - 1] === ""; )
          $.length -= 1;
        return $;
      }
      if (ie = h.exec(I), d < 0) {
        if (ie !== null && ie[0] === "" && h.source.indexOf("(?=") === -1)
          for (Me = 0, Je = ie.length; Me < Je; Me++)
            $.push("");
        return $;
      }
      if (ie !== null && ie[0] === "")
        return $.splice(d - 1, $.length - 1, $.slice(d - 1).join("")), $;
      if (d >= $.length)
        return $;
      for (Me = 0; ie !== null && (Me++, D = h.lastIndex, Me + 1 !== d); )
        ie = h.exec(I);
      return $.splice(d - 1, $.length - 1, I.slice(D)), $;
    }, -1), o(H, "$squeeze", function(h) {
      var d, _, g = this;
      if (d = c(arguments), _ = d, _.length === 0)
        return g.replace(/(.)\1+/g, "$1");
      var $ = X(_);
      return $ === null ? g : g.replace(new RegExp("(" + $ + ")\\1+", "g"), "$1");
    }, -1), o(H, "$start_with?", function(h) {
      var d, _, g = this;
      d = c(arguments), _ = d;
      for (var $ = 0, I = _.length; $ < I; $++)
        if (_[$].$$is_regexp) {
          var D = _[$], ie = D.exec(g);
          if (ie != null && ie.index === 0)
            return Q["~"] = R("MatchData").$new(D, ie), !0;
          Q["~"] = J;
        } else {
          var Me = e(_[$], R("String"), "to_str").$to_s();
          if (g.indexOf(Me) === 0)
            return !0;
        }
      return !1;
    }, -1), o(H, "$strip", function() {
      var h = this;
      return h.replace(/^[\s\u0000]*|[\s\u0000]*$/g, "");
    }), o(H, "$sub", function w(h, d) {
      var _ = w.$$p || J, g = this;
      w.$$p = null, h.$$is_regexp || (h = e(h, R("String"), "to_str"), h = new RegExp(h.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")));
      var $, I = h.exec(g);
      return I === null ? (Q["~"] = J, $ = g.toString()) : (R("MatchData").$new(h, I), d === void 0 ? (_ === J && z.$raise(R("ArgumentError"), "wrong number of arguments (1 for 2)"), $ = g.slice(0, I.index) + _(I[0]) + g.slice(I.index + I[0].length)) : d.$$is_hash ? $ = g.slice(0, I.index) + d["$[]"](I[0]).$to_s() + g.slice(I.index + I[0].length) : (d = e(d, R("String"), "to_str"), d = d.replace(/([\\]+)([0-9+&`'])/g, function(D, ie, Me) {
        if (ie.length % 2 === 0)
          return D;
        switch (Me) {
          case "+":
            for (var Je = I.length - 1; Je > 0; Je--)
              if (I[Je] !== void 0)
                return ie.slice(1) + I[Je];
            return "";
          case "&":
            return ie.slice(1) + I[0];
          case "`":
            return ie.slice(1) + g.slice(0, I.index);
          case "'":
            return ie.slice(1) + g.slice(I.index + I[0].length);
          default:
            return ie.slice(1) + (I[Me] || "");
        }
      }).replace(/\\\\/g, "\\"), $ = g.slice(0, I.index) + d + g.slice(I.index + I[0].length))), $;
    }, -2), o(H, "$sum", function(h) {
      var d = this;
      h == null && (h = 16), h = e(h, R("Integer"), "to_int");
      for (var _ = 0, g = d.length, $ = 0; $ < g; $++)
        _ += d.charCodeAt($);
      return h <= 0 ? _ : _ & Math.pow(2, h) - 1;
    }, -1), o(H, "$swapcase", function() {
      var h = this, d = h.replace(/([a-z]+)|([A-Z]+)/g, function(_, g, $) {
        return g ? _.toUpperCase() : _.toLowerCase();
      });
      return d;
    }), o(H, "$to_f", function() {
      var h = this;
      if (h.charAt(0) === "_")
        return 0;
      var d = parseFloat(h.replace(/_/g, ""));
      return isNaN(d) || d == 1 / 0 || d == -1 / 0 ? 0 : d;
    }), o(H, "$to_i", function(h) {
      var d = this;
      h == null && (h = 10);
      var _, g = d.toLowerCase(), $ = e(h, R("Integer"), "to_int");
      return ($ === 1 || $ < 0 || $ > 36) && z.$raise(R("ArgumentError"), "invalid radix " + $), /^\s*_/.test(g) ? 0 : (g = g.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function(I, D, ie, Me) {
        switch (Me.charAt(0)) {
          case "+":
          case "-":
            return I;
          case "0":
            if (Me.charAt(1) === "x" && ie === "0x" && ($ === 0 || $ === 16))
              return I;
        }
        switch (ie) {
          case "0b":
            if ($ === 0 || $ === 2)
              return $ = 2, D + Me;
            break;
          case "0":
          case "0o":
            if ($ === 0 || $ === 8)
              return $ = 8, D + Me;
            break;
          case "0d":
            if ($ === 0 || $ === 10)
              return $ = 10, D + Me;
            break;
          case "0x":
            if ($ === 0 || $ === 16)
              return $ = 16, D + Me;
            break;
        }
        return I;
      }), _ = parseInt(g.replace(/_(?!_)/g, ""), $), isNaN(_) ? 0 : _);
    }, -1), o(H, "$to_proc", function w() {
      w.$$p;
      var h = this, d = J, _ = J, g = J;
      return w.$$p = null, d = h.valueOf(), _ = t.jsid(d), g = f(z, "proc", [], function $(I) {
        var D = $.$$p || J, ie, Me;
        $.$$p = null, ie = c(arguments), Me = ie, Me.length === 0 && z.$raise(R("ArgumentError"), "no receiver given");
        var Je = Me[0];
        Je == null && (Je = J);
        var it = Je[_];
        return it ? Me = Me.slice(1) : (it = Je.$method_missing, Me[0] = d), typeof D == "function" && (it.$$p = D), Me.length === 0 ? it.call(Je) : it.apply(Je, Me);
      }, -1), g.$$source_location = J, g;
    }), o(H, "$to_s", function() {
      var h = this;
      return h.toString();
    }), o(H, "$tr", function(h, d) {
      var _ = this;
      if (h = e(h, R("String"), "to_str").$to_s(), d = e(d, R("String"), "to_str").$to_s(), h.length == 0 || h === d)
        return _;
      var g, $, I, D, ie, Me, Je, it = {}, dt = h.split(""), St = dt.length, gt = d.split(""), wt = gt.length, bt = !1, Tt = null;
      dt[0] === "^" && dt.length > 1 && (bt = !0, dt.shift(), Tt = gt[wt - 1], St -= 1);
      var yt = [], Qe = null;
      for ($ = !1, g = 0; g < St; g++)
        if (D = dt[g], Qe == null)
          Qe = D, yt.push(D);
        else if (D === "-")
          Qe === "-" ? (yt.push("-"), yt.push("-")) : g == St - 1 ? yt.push("-") : $ = !0;
        else if ($) {
          for (ie = Qe.charCodeAt(0), Me = D.charCodeAt(0), ie > Me && z.$raise(R("ArgumentError"), 'invalid range "' + String.fromCharCode(ie) + "-" + String.fromCharCode(Me) + '" in string transliteration'), I = ie + 1; I < Me; I++)
            yt.push(String.fromCharCode(I));
          yt.push(D), $ = null, Qe = null;
        } else
          yt.push(D);
      if (dt = yt, St = dt.length, bt)
        for (g = 0; g < St; g++)
          it[dt[g]] = !0;
      else {
        if (wt > 0) {
          var Ne = [], Le = null;
          for ($ = !1, g = 0; g < wt; g++)
            if (D = gt[g], Le == null)
              Le = D, Ne.push(D);
            else if (D === "-")
              Le === "-" ? (Ne.push("-"), Ne.push("-")) : g == wt - 1 ? Ne.push("-") : $ = !0;
            else if ($) {
              for (ie = Le.charCodeAt(0), Me = D.charCodeAt(0), ie > Me && z.$raise(R("ArgumentError"), 'invalid range "' + String.fromCharCode(ie) + "-" + String.fromCharCode(Me) + '" in string transliteration'), I = ie + 1; I < Me; I++)
                Ne.push(String.fromCharCode(I));
              Ne.push(D), $ = null, Le = null;
            } else
              Ne.push(D);
          gt = Ne, wt = gt.length;
        }
        var qe = St - wt;
        if (qe > 0) {
          var y = wt > 0 ? gt[wt - 1] : "";
          for (g = 0; g < qe; g++)
            gt.push(y);
        }
        for (g = 0; g < St; g++)
          it[dt[g]] = gt[g];
      }
      var P = "";
      for (g = 0, Je = _.length; g < Je; g++) {
        D = _.charAt(g);
        var be = it[D];
        bt ? P += be == null ? Tt : D : P += be ?? D;
      }
      return P;
    }), o(H, "$tr_s", function(h, d) {
      var _ = this;
      if (h = e(h, R("String"), "to_str").$to_s(), d = e(d, R("String"), "to_str").$to_s(), h.length == 0)
        return _;
      var g, $, I, D, ie, Me, Je, it = {}, dt = h.split(""), St = dt.length, gt = d.split(""), wt = gt.length, bt = !1, Tt = null;
      dt[0] === "^" && dt.length > 1 && (bt = !0, dt.shift(), Tt = gt[wt - 1], St -= 1);
      var yt = [], Qe = null;
      for ($ = !1, g = 0; g < St; g++)
        if (D = dt[g], Qe == null)
          Qe = D, yt.push(D);
        else if (D === "-")
          Qe === "-" ? (yt.push("-"), yt.push("-")) : g == St - 1 ? yt.push("-") : $ = !0;
        else if ($) {
          for (ie = Qe.charCodeAt(0), Me = D.charCodeAt(0), ie > Me && z.$raise(R("ArgumentError"), 'invalid range "' + String.fromCharCode(ie) + "-" + String.fromCharCode(Me) + '" in string transliteration'), I = ie + 1; I < Me; I++)
            yt.push(String.fromCharCode(I));
          yt.push(D), $ = null, Qe = null;
        } else
          yt.push(D);
      if (dt = yt, St = dt.length, bt)
        for (g = 0; g < St; g++)
          it[dt[g]] = !0;
      else {
        if (wt > 0) {
          var Ne = [], Le = null;
          for ($ = !1, g = 0; g < wt; g++)
            if (D = gt[g], Qe == null)
              Qe = D, Ne.push(D);
            else if (D === "-")
              Le === "-" ? (Ne.push("-"), Ne.push("-")) : g == wt - 1 ? Ne.push("-") : $ = !0;
            else if ($) {
              for (ie = Qe.charCodeAt(0), Me = D.charCodeAt(0), ie > Me && z.$raise(R("ArgumentError"), 'invalid range "' + String.fromCharCode(ie) + "-" + String.fromCharCode(Me) + '" in string transliteration'), I = ie + 1; I < Me; I++)
                Ne.push(String.fromCharCode(I));
              Ne.push(D), $ = null, Qe = null;
            } else
              Ne.push(D);
          gt = Ne, wt = gt.length;
        }
        var qe = St - wt;
        if (qe > 0) {
          var y = wt > 0 ? gt[wt - 1] : "";
          for (g = 0; g < qe; g++)
            gt.push(y);
        }
        for (g = 0; g < St; g++)
          it[dt[g]] = gt[g];
      }
      var P = "", be = null;
      for (g = 0, Je = _.length; g < Je; g++) {
        D = _.charAt(g);
        var Oe = it[D];
        bt ? Oe == null ? be == null && (P += Tt, be = !0) : (P += D, be = null) : Oe != null ? (be == null || be !== Oe) && (P += Oe, be = Oe) : (P += D, be = null);
      }
      return P;
    }), o(H, "$upcase", function() {
      var h = this;
      return h.toUpperCase();
    }), o(H, "$upto", function w(h, d) {
      var _ = w.$$p || J, g = this;
      if (w.$$p = null, d == null && (d = !1), _ === J)
        return g.$enum_for("upto", h, d);
      var $, I, D = g.toString();
      if (h = e(h, R("String"), "to_str"), D.length === 1 && h.length === 1)
        for ($ = D.charCodeAt(0), I = h.charCodeAt(0); $ <= I && !(d && $ === I); )
          _(String.fromCharCode($)), $ += 1;
      else if (parseInt(D, 10).toString() === D && parseInt(h, 10).toString() === h)
        for ($ = parseInt(D, 10), I = parseInt(h, 10); $ <= I && !(d && $ === I); )
          _($.toString()), $ += 1;
      else
        for (; D.length <= h.length && D <= h && !(d && D === h); )
          _(D), D = D.$succ();
      return g;
    }, -2);
    function X(w) {
      function h(it) {
        var dt = "", St, gt = it.length, wt, bt, Tt, yt, Qe;
        for (St = 0; St < gt; St++)
          if (wt = it.charAt(St), wt === "-" && St > 0 && St < gt - 1 && !bt) {
            for (Tt = it.charCodeAt(St - 1), yt = it.charCodeAt(St + 1), Tt > yt && z.$raise(R("ArgumentError"), 'invalid range "' + Tt + "-" + yt + '" in string transliteration'), Qe = Tt + 1; Qe < yt + 1; Qe++)
              dt += String.fromCharCode(Qe);
            bt = !0, St++;
          } else
            bt = wt === "\\", dt += wt;
        return dt;
      }
      function d(it, dt) {
        if (it.length === 0)
          return dt;
        var St = "", gt, wt = it.length, bt;
        for (gt = 0; gt < wt; gt++)
          bt = it.charAt(gt), dt.indexOf(bt) !== -1 && (St += bt);
        return St;
      }
      var _, g, $, I, D, ie, Me = "", Je = "";
      for (_ = 0, g = w.length; _ < g; _++)
        $ = e(w[_], R("String"), "to_str"), I = $.charAt(0) === "^" && $.length > 1, $ = h(I ? $.slice(1) : $), I ? Je = d(Je, $) : Me = d(Me, $);
      if (Me.length > 0 && Je.length > 0) {
        for (ie = "", _ = 0, g = Me.length; _ < g; _++)
          D = Me.charAt(_), Je.indexOf(D) === -1 && (ie += D);
        Me = ie, Je = "";
      }
      return Me.length > 0 ? "[" + R("Regexp").$escape(Me) + "]" : Je.length > 0 ? "[^" + R("Regexp").$escape(Je) + "]" : null;
    }
    return o(H, "$instance_variables", function() {
      return [];
    }), l(H, "$_load", function(h) {
      var d, _, g = this;
      return d = c(arguments), _ = d, f(g, "new", m(_));
    }, -1), o(H, "$unicode_normalize", function(h) {
      var d = this;
      return h == null && (h = "nfc"), A(["nfc", "nfd", "nfkc", "nfkd"]["$include?"](h)) || z.$raise(R("ArgumentError"), "Invalid normalization form " + h), d.normalize(h.$upcase());
    }, -1), o(H, "$unicode_normalized?", function(h) {
      var d = this;
      return h == null && (h = "nfc"), d.$unicode_normalize(h)["$=="](d);
    }, -1), o(H, "$unpack", function(h) {
      return z.$raise("To use String#unpack, you must first require 'corelib/string/unpack'.");
    }), o(H, "$unpack1", function(h) {
      return z.$raise("To use String#unpack1, you must first require 'corelib/string/unpack'.");
    }), o(H, "$freeze", function() {
      var h = this;
      return typeof h == "string" || i(h, "$$frozen", !0), h;
    }), o(H, "$-@", function() {
      var h = this;
      return typeof h == "string" || h.$$frozen ? h : h.encoding.name == "UTF-8" && h.internal_encoding.name == "UTF-8" ? h.toString() : h.$dup().$freeze();
    }), o(H, "$frozen?", function() {
      var h = this;
      return typeof h == "string" || h.$$frozen === !0;
    }), fe(H, "+@", "dup"), fe(H, "===", "=="), fe(H, "byteslice", "[]"), fe(H, "eql?", "=="), fe(H, "equal?", "==="), fe(H, "object_id", "__id__"), fe(H, "slice", "[]"), fe(H, "succ", "next"), fe(H, "to_str", "to_s"), fe(H, "to_sym", "intern"), a.$pristine(H, "initialize");
  }("::", String, pe), ae(pe[0], "Symbol", Ce("String"));
};
Opal.modules["corelib/enumerable"] = function(t) {
  var e = t.truthy, r = t.coerce_to, n = t.yield1, i = t.yieldX, s = t.deny_frozen_access, o = t.module, a = t.send, l = t.slice, c = t.to_a, f = t.Opal, m = t.thrower, b = t.def, C = t.Kernel, N = t.return_val, z = t.rb_gt, A = t.rb_times, Q = t.rb_lt, Te = t.eqeq, ce = t.rb_plus, ge = t.rb_minus, Y = t.rb_divide, fe = t.rb_le, ae = t.hash2, Re = t.lambda, pe = t.not, Ce = t.alias, J = [], R = t.nil, ve = t.$$$;
  return t.add_stubs("each,public_send,destructure,to_enum,enumerator_size,new,yield,raise,slice_when,!,enum_for,flatten,map,to_proc,compact,to_a,warn,proc,==,nil?,respond_to?,coerce_to!,>,*,try_convert,<,+,-,ceil,/,size,select,__send__,length,<=,[],push,<<,[]=,===,inspect,<=>,first,reverse,sort,take,sort_by,compare,call,dup,sort!,map!,include?,-@,key?,values,transform_values,group_by,fetch,to_h,coerce_to?,class,zip,detect,find_all,collect_concat,collect,inject,entries"), function(F, ne) {
    var H = o(F, "Enumerable"), we = [H].concat(ne), _e = t.$r(we);
    function X(w) {
      return w.length === 0 && (w = [R]), w.length > 1 && (w = [w]), w;
    }
    return b(H, "$all?", function w(h) {
      try {
        var d = m("return"), _ = w.$$p || R, g = this;
        return w.$$p = null, e(h !== void 0) ? a(g, "each", [], function(I) {
          var D, ie, Me = R;
          if (D = l(arguments), ie = D, Me = X(ie), e(a(h, "public_send", ["==="].concat(c(Me)))))
            return R;
          d.$throw(!1);
        }, { $$arity: -1, $$ret: d }) : _ !== R ? a(g, "each", [], function(I) {
          var D, ie;
          if (D = l(arguments), ie = D, e(t.yieldX(_, c(ie))))
            return R;
          d.$throw(!1);
        }, { $$arity: -1, $$ret: d }) : a(g, "each", [], function(I) {
          var D, ie;
          if (D = l(arguments), ie = D, e(f.$destructure(ie)))
            return R;
          d.$throw(!1);
        }, { $$arity: -1, $$ret: d }), !0;
      } catch ($) {
        if ($ === d)
          return $.$v;
        throw $;
      }
    }, -1), b(H, "$any?", function w(h) {
      try {
        var d = m("return"), _ = w.$$p || R, g = this;
        return w.$$p = null, e(h !== void 0) ? a(g, "each", [], function(I) {
          var D, ie, Me = R;
          if (D = l(arguments), ie = D, Me = X(ie), e(a(h, "public_send", ["==="].concat(c(Me)))))
            d.$throw(!0);
          else
            return R;
        }, { $$arity: -1, $$ret: d }) : _ !== R ? a(g, "each", [], function(I) {
          var D, ie;
          if (D = l(arguments), ie = D, e(t.yieldX(_, c(ie))))
            d.$throw(!0);
          else
            return R;
        }, { $$arity: -1, $$ret: d }) : a(g, "each", [], function(I) {
          var D, ie;
          if (D = l(arguments), ie = D, e(f.$destructure(ie)))
            d.$throw(!0);
          else
            return R;
        }, { $$arity: -1, $$ret: d }), !1;
      } catch ($) {
        if ($ === d)
          return $.$v;
        throw $;
      }
    }, -1), b(H, "$chunk", function w() {
      var h = w.$$p || R, d = this;
      return w.$$p = null, h === R ? a(d, "to_enum", ["chunk"], function _() {
        var g = _.$$s == null ? this : _.$$s;
        return g.$enumerator_size();
      }, { $$s: d }) : a(ve("Enumerator"), "new", [], function _(g) {
        var $ = _.$$s == null ? this : _.$$s;
        g == null && (g = R);
        var I = R, D = [];
        function ie() {
          D.length > 0 && g.$yield(I, D);
        }
        $.$each.$$p = function(Me) {
          var Je = n(h, Me);
          Je === R ? (ie(), D = [], I = R) : (I === R || I === Je ? D.push(Me) : (ie(), D = [Me]), I = Je);
        }, $.$each(), ie();
      }, { $$s: d });
    }), b(H, "$chunk_while", function w() {
      var h = w.$$p || R, d = this;
      return w.$$p = null, h === R && C.$raise(ve("ArgumentError"), "no block given"), a(d, "slice_when", [], function(g, $) {
        return g == null && (g = R), $ == null && ($ = R), t.yieldX(h, [g, $])["$!"]();
      });
    }), b(H, "$collect", function w() {
      var h = w.$$p || R, d = this;
      if (w.$$p = null, h === R)
        return a(d, "enum_for", ["collect"], function g() {
          var $ = g.$$s == null ? this : g.$$s;
          return $.$enumerator_size();
        }, { $$s: d });
      var _ = [];
      return d.$each.$$p = function() {
        var g = i(h, arguments);
        _.push(g);
      }, d.$each(), _;
    }), b(H, "$collect_concat", function w() {
      var h = w.$$p || R, d = this;
      return w.$$p = null, h === R ? a(d, "enum_for", ["collect_concat"], function _() {
        var g = _.$$s == null ? this : _.$$s;
        return g.$enumerator_size();
      }, { $$s: d }) : a(d, "map", [], h.$to_proc()).$flatten(1);
    }), b(H, "$compact", function() {
      var h = this;
      return h.$to_a().$compact();
    }), b(H, "$count", function w(h) {
      var d = w.$$p || R, _ = this, g = R;
      return w.$$p = null, g = 0, h != null && d !== R && _.$warn("warning: given block not used"), e(h != null) ? d = a(C, "proc", [], function(I) {
        var D, ie;
        return D = l(arguments), ie = D, f.$destructure(ie)["$=="](h);
      }, -1) : e(d["$nil?"]()) && (d = a(C, "proc", [], N(!0))), a(_, "each", [], function(I) {
        var D, ie;
        return D = l(arguments), ie = D, e(i(d, ie)) ? g++ : R;
      }, -1), g;
    }, -1), b(H, "$cycle", function w(h) {
      var d = w.$$p || R, _ = this;
      if (w.$$p = null, h == null && (h = R), d === R)
        return a(_, "enum_for", ["cycle", h], function D() {
          var ie = D.$$s == null ? this : D.$$s;
          return e(h["$nil?"]()) ? e(ie["$respond_to?"]("size")) ? ve(ve("Float"), "INFINITY") : R : (h = f["$coerce_to!"](h, ve("Integer"), "to_int"), e(z(h, 0)) ? A(ie.$enumerator_size(), h) : 0);
        }, { $$s: _ });
      if (!e(h["$nil?"]()) && (h = f["$coerce_to!"](h, ve("Integer"), "to_int"), e(h <= 0)))
        return R;
      var g = [], $, I;
      if (_.$each.$$p = function() {
        var D = f.$destructure(arguments);
        n(d, D), g.push(D);
      }, _.$each(), g.length === 0)
        return R;
      if (h === R)
        for (; ; )
          for ($ = 0, I = g.length; $ < I; $++)
            n(d, g[$]);
      else
        for (; h > 1; ) {
          for ($ = 0, I = g.length; $ < I; $++)
            n(d, g[$]);
          h--;
        }
    }, -1), b(H, "$detect", function w(h) {
      try {
        var d = m("return"), _ = w.$$p || R, g = this;
        return w.$$p = null, _ === R ? g.$enum_for("detect", h) : (a(g, "each", [], function(I) {
          var D, ie, Me = R;
          if (D = l(arguments), ie = D, Me = f.$destructure(ie), e(t.yield1(_, Me)))
            d.$throw(Me);
          else
            return R;
        }, { $$arity: -1, $$ret: d }), h !== void 0 ? typeof h == "function" ? h() : h : R);
      } catch ($) {
        if ($ === d)
          return $.$v;
        throw $;
      }
    }, -1), b(H, "$drop", function(h) {
      var d = this;
      h = r(h, ve("Integer"), "to_int"), e(h < 0) && C.$raise(ve("ArgumentError"), "attempt to drop negative size");
      var _ = [], g = 0;
      return d.$each.$$p = function() {
        h <= g && _.push(f.$destructure(arguments)), g++;
      }, d.$each(), _;
    }), b(H, "$drop_while", function w() {
      var h = w.$$p || R, d = this;
      if (w.$$p = null, h === R)
        return d.$enum_for("drop_while");
      var _ = [], g = !0;
      return d.$each.$$p = function() {
        var $ = f.$destructure(arguments);
        if (g) {
          var I = n(h, $);
          e(I) || (g = !1, _.push($));
        } else
          _.push($);
      }, d.$each(), _;
    }), b(H, "$each_cons", function w(h) {
      var d = w.$$p || R, _ = this;
      if (w.$$p = null, e(arguments.length != 1) && C.$raise(ve("ArgumentError"), "wrong number of arguments (" + arguments.length + " for 1)"), h = f.$try_convert(h, ve("Integer"), "to_int"), e(h <= 0) && C.$raise(ve("ArgumentError"), "invalid size"), d === R)
        return a(_, "enum_for", ["each_cons", h], function $() {
          var I = $.$$s == null ? this : $.$$s, D = R;
          return D = I.$enumerator_size(), e(D["$nil?"]()) ? R : Te(D, 0) || e(Q(D, h)) ? 0 : ce(ge(D, h), 1);
        }, { $$s: _ });
      var g = [];
      return _.$each.$$p = function() {
        var $ = f.$destructure(arguments);
        g.push($), g.length > h && g.shift(), g.length == h && n(d, g.slice(0, h));
      }, _.$each(), _;
    }), b(H, "$each_entry", function w(h) {
      var d = w.$$p || R, _, g, $ = this;
      return w.$$p = null, _ = l(arguments), g = _, d === R ? a($, "to_enum", ["each_entry"].concat(c(g)), function I() {
        var D = I.$$s == null ? this : I.$$s;
        return D.$enumerator_size();
      }, { $$s: $ }) : ($.$each.$$p = function() {
        var I = f.$destructure(arguments);
        n(d, I);
      }, $.$each.apply($, g), $);
    }, -1), b(H, "$each_slice", function w(h) {
      var d = w.$$p || R, _ = this;
      if (w.$$p = null, h = r(h, ve("Integer"), "to_int"), e(h <= 0) && C.$raise(ve("ArgumentError"), "invalid slice size"), d === R)
        return a(_, "enum_for", ["each_slice", h], function $() {
          var I = $.$$s == null ? this : $.$$s;
          return e(I["$respond_to?"]("size")) ? Y(I.$size(), h).$ceil() : R;
        }, { $$s: _ });
      var g = [];
      return _.$each.$$p = function() {
        var $ = f.$destructure(arguments);
        g.push($), g.length === h && (n(d, g), g = []);
      }, _.$each(), g.length > 0 && n(d, g), _;
    }), b(H, "$each_with_index", function w(h) {
      var d = w.$$p || R, _, g, $ = this;
      if (w.$$p = null, _ = l(arguments), g = _, d === R)
        return a($, "enum_for", ["each_with_index"].concat(c(g)), function D() {
          var ie = D.$$s == null ? this : D.$$s;
          return ie.$enumerator_size();
        }, { $$s: $ });
      var I = 0;
      return $.$each.$$p = function() {
        var D = f.$destructure(arguments);
        d(D, I), I++;
      }, $.$each.apply($, g), $;
    }, -1), b(H, "$each_with_object", function w(h) {
      var d = w.$$p || R, _ = this;
      return w.$$p = null, d === R ? a(_, "enum_for", ["each_with_object", h], function g() {
        var $ = g.$$s == null ? this : g.$$s;
        return $.$enumerator_size();
      }, { $$s: _ }) : (_.$each.$$p = function() {
        var g = f.$destructure(arguments);
        d(g, h);
      }, _.$each(), h);
    }), b(H, "$entries", function(h) {
      var d, _, g = this;
      d = l(arguments), _ = d;
      var $ = [];
      return g.$each.$$p = function() {
        $.push(f.$destructure(arguments));
      }, g.$each.apply(g, _), $;
    }, -1), b(H, "$filter_map", function w() {
      var h = w.$$p || R, d = this;
      return w.$$p = null, h === R ? a(d, "enum_for", ["filter_map"], function _() {
        var g = _.$$s == null ? this : _.$$s;
        return g.$enumerator_size();
      }, { $$s: d }) : a(a(d, "map", [], h.$to_proc()), "select", [], "itself".$to_proc());
    }), b(H, "$find_all", function w() {
      var h = w.$$p || R, d = this;
      if (w.$$p = null, h === R)
        return a(d, "enum_for", ["find_all"], function g() {
          var $ = g.$$s == null ? this : g.$$s;
          return $.$enumerator_size();
        }, { $$s: d });
      var _ = [];
      return d.$each.$$p = function() {
        var g = f.$destructure(arguments), $ = n(h, g);
        e($) && _.push(g);
      }, d.$each(), _;
    }), b(H, "$find_index", function w(h) {
      try {
        var d = m("return"), _ = w.$$p || R, g = this, $ = R;
        return w.$$p = null, e(h === void 0 && _ === R) ? g.$enum_for("find_index") : (h != null && _ !== R && g.$warn("warning: given block not used"), $ = 0, e(h != null) ? a(g, "each", [], function(D) {
          var ie, Me;
          return ie = l(arguments), Me = ie, Te(f.$destructure(Me), h) && d.$throw($), $ += 1;
        }, { $$arity: -1, $$ret: d }) : a(g, "each", [], function(D) {
          var ie, Me;
          return ie = l(arguments), Me = ie, e(t.yieldX(_, c(Me))) && d.$throw($), $ += 1;
        }, { $$arity: -1, $$ret: d }), R);
      } catch (I) {
        if (I === d)
          return I.$v;
        throw I;
      }
    }, -1), b(H, "$first", function(h) {
      try {
        var d = m("return"), _ = this, g = R, $ = R;
        return e(h === void 0) ? a(_, "each", [], function(D) {
          D == null && (D = R), d.$throw(D);
        }, { $$ret: d }) : (g = [], h = r(h, ve("Integer"), "to_int"), e(h < 0) && C.$raise(ve("ArgumentError"), "attempt to take negative size"), e(h == 0) ? [] : ($ = 0, a(_, "each", [], function(D) {
          var ie, Me;
          if (ie = l(arguments), Me = ie, g.push(f.$destructure(Me)), e(h <= ++$))
            d.$throw(g);
          else
            return R;
        }, { $$arity: -1, $$ret: d }), g));
      } catch (I) {
        if (I === d)
          return I.$v;
        throw I;
      }
    }, -1), b(H, "$grep", function w(h) {
      var d = w.$$p || R, _ = this, g = R;
      return w.$$p = null, g = [], a(_, "each", [], function(I) {
        var D, ie, Me = R;
        return D = l(arguments), ie = D, Me = X(ie), e(a(h, "__send__", ["==="].concat(c(Me)))) ? (d !== R ? (e(z(ie.$length(), 1)) && (ie = [ie]), ie = t.yieldX(d, c(ie))) : e(fe(ie.$length(), 1)) && (ie = ie["$[]"](0)), g.$push(ie)) : R;
      }, -1), g;
    }), b(H, "$grep_v", function w(h) {
      var d = w.$$p || R, _ = this, g = R;
      return w.$$p = null, g = [], a(_, "each", [], function(I) {
        var D, ie, Me = R;
        return D = l(arguments), ie = D, Me = X(ie), e(a(h, "__send__", ["==="].concat(c(Me)))) ? R : (d !== R ? (e(z(ie.$length(), 1)) && (ie = [ie]), ie = t.yieldX(d, c(ie))) : e(fe(ie.$length(), 1)) && (ie = ie["$[]"](0)), g.$push(ie));
      }, -1), g;
    }), b(H, "$group_by", function w() {
      var h = w.$$p || R, d, _ = this, g = R, $ = R;
      return w.$$p = null, h === R ? a(_, "enum_for", ["group_by"], function I() {
        var D = I.$$s == null ? this : I.$$s;
        return D.$enumerator_size();
      }, { $$s: _ }) : (g = ae([], {}), _.$each.$$p = function() {
        var I = f.$destructure(arguments), D = n(h, I);
        (e($ = g["$[]"](D)) ? $ : (d = [D, []], a(g, "[]=", d), d[d.length - 1]))["$<<"](I);
      }, _.$each(), g);
    }), b(H, "$include?", function(h) {
      try {
        var d = m("return"), _ = this;
        return a(_, "each", [], function($) {
          var I, D;
          if (I = l(arguments), D = I, Te(f.$destructure(D), h))
            d.$throw(!0);
          else
            return R;
        }, { $$arity: -1, $$ret: d }), !1;
      } catch (g) {
        if (g === d)
          return g.$v;
        throw g;
      }
    }), b(H, "$inject", function w(h, d) {
      var _ = w.$$p || R, g = this;
      w.$$p = null;
      var $ = h;
      return _ !== R && d === void 0 ? g.$each.$$p = function() {
        var I = f.$destructure(arguments);
        if ($ === void 0) {
          $ = I;
          return;
        }
        I = i(_, [$, I]), $ = I;
      } : (d === void 0 && (ve("Symbol")["$==="](h) || C.$raise(ve("TypeError"), "" + h.$inspect() + " is not a Symbol"), d = h, $ = void 0), g.$each.$$p = function() {
        var I = f.$destructure(arguments);
        if ($ === void 0) {
          $ = I;
          return;
        }
        $ = $.$__send__(d, I);
      }), g.$each(), $ ?? R;
    }, -1), b(H, "$lazy", function() {
      var h = this;
      return a(ve(ve("Enumerator"), "Lazy"), "new", [h, h.$enumerator_size()], function(_, g) {
        var $, I;
        return _ == null && (_ = R), $ = l(arguments, 1), I = $, a(_, "yield", c(I));
      }, -2);
    }), b(H, "$enumerator_size", function() {
      var h = this;
      return e(h["$respond_to?"]("size")) ? h.$size() : R;
    }), b(H, "$max", function w(h) {
      var d = w.$$p || R, _ = this;
      if (w.$$p = null, h === void 0 || h === R) {
        var g, $;
        return _.$each.$$p = function() {
          var I = f.$destructure(arguments);
          if (g === void 0) {
            g = I;
            return;
          }
          d !== R ? $ = i(d, [I, g]) : $ = I["$<=>"](g), $ === R && C.$raise(ve("ArgumentError"), "comparison failed"), $ > 0 && (g = I);
        }, _.$each(), g === void 0 ? R : g;
      }
      return h = r(h, ve("Integer"), "to_int"), a(_, "sort", [], d.$to_proc()).$reverse().$first(h);
    }, -1), b(H, "$max_by", function w(h) {
      var d = w.$$p || R, _ = this;
      if (w.$$p = null, h == null && (h = R), !e(d))
        return a(_, "enum_for", ["max_by", h], function I() {
          var D = I.$$s == null ? this : I.$$s;
          return D.$enumerator_size();
        }, { $$s: _ });
      if (!e(h["$nil?"]()))
        return a(_, "sort_by", [], d.$to_proc()).$reverse().$take(h);
      var g, $;
      return _.$each.$$p = function() {
        var I = f.$destructure(arguments), D = n(d, I);
        if (g === void 0) {
          g = I, $ = D;
          return;
        }
        D["$<=>"]($) > 0 && (g = I, $ = D);
      }, _.$each(), g === void 0 ? R : g;
    }, -1), b(H, "$min", function w(h) {
      var d = w.$$p || R, _ = this;
      if (w.$$p = null, h == null && (h = R), !e(h["$nil?"]()))
        return d !== R ? a(_, "sort", [], function(I, D) {
          return I == null && (I = R), D == null && (D = R), t.yieldX(d, [I, D]);
        }).$take(h) : _.$sort().$take(h);
      var g;
      return d !== R ? _.$each.$$p = function() {
        var $ = f.$destructure(arguments);
        if (g === void 0) {
          g = $;
          return;
        }
        var I = d($, g);
        I === R && C.$raise(ve("ArgumentError"), "comparison failed"), I < 0 && (g = $);
      } : _.$each.$$p = function() {
        var $ = f.$destructure(arguments);
        if (g === void 0) {
          g = $;
          return;
        }
        f.$compare($, g) < 0 && (g = $);
      }, _.$each(), g === void 0 ? R : g;
    }, -1), b(H, "$min_by", function w(h) {
      var d = w.$$p || R, _ = this;
      if (w.$$p = null, h == null && (h = R), !e(d))
        return a(_, "enum_for", ["min_by", h], function I() {
          var D = I.$$s == null ? this : I.$$s;
          return D.$enumerator_size();
        }, { $$s: _ });
      if (!e(h["$nil?"]()))
        return a(_, "sort_by", [], d.$to_proc()).$take(h);
      var g, $;
      return _.$each.$$p = function() {
        var I = f.$destructure(arguments), D = n(d, I);
        if (g === void 0) {
          g = I, $ = D;
          return;
        }
        D["$<=>"]($) < 0 && (g = I, $ = D);
      }, _.$each(), g === void 0 ? R : g;
    }, -1), b(H, "$minmax", function w() {
      var h = w.$$p || R, d = this, _ = R;
      w.$$p = null, h = e(_ = h) ? _ : a(C, "proc", [], function(ie, Me) {
        return ie == null && (ie = R), Me == null && (Me = R), ie["$<=>"](Me);
      });
      var g = R, $ = R, I = !0;
      return d.$each.$$p = function() {
        var D = f.$destructure(arguments);
        if (I)
          g = $ = D, I = !1;
        else {
          var ie = h.$call(g, D);
          ie === R ? C.$raise(ve("ArgumentError"), "comparison failed") : ie > 0 && (g = D);
          var Me = h.$call($, D);
          Me === R ? C.$raise(ve("ArgumentError"), "comparison failed") : Me < 0 && ($ = D);
        }
      }, d.$each(), [g, $];
    }), b(H, "$minmax_by", function w() {
      var h = w.$$p || R, d = this;
      if (w.$$p = null, !e(h))
        return a(d, "enum_for", ["minmax_by"], function D() {
          var ie = D.$$s == null ? this : D.$$s;
          return ie.$enumerator_size();
        }, { $$s: d });
      var _ = R, g = R, $, I;
      return d.$each.$$p = function() {
        var D = f.$destructure(arguments), ie = n(h, D);
        ($ === void 0 || ie["$<=>"]($) < 0) && (_ = D, $ = ie), (I === void 0 || ie["$<=>"](I) > 0) && (g = D, I = ie);
      }, d.$each(), [_, g];
    }), b(H, "$none?", function w(h) {
      try {
        var d = m("return"), _ = w.$$p || R, g = this;
        return w.$$p = null, e(h !== void 0) ? a(g, "each", [], function(I) {
          var D, ie, Me = R;
          if (D = l(arguments), ie = D, Me = X(ie), e(a(h, "public_send", ["==="].concat(c(Me)))))
            d.$throw(!1);
          else
            return R;
        }, { $$arity: -1, $$ret: d }) : _ !== R ? a(g, "each", [], function(I) {
          var D, ie;
          if (D = l(arguments), ie = D, e(t.yieldX(_, c(ie))))
            d.$throw(!1);
          else
            return R;
        }, { $$arity: -1, $$ret: d }) : a(g, "each", [], function(I) {
          var D, ie, Me = R;
          if (D = l(arguments), ie = D, Me = f.$destructure(ie), e(Me))
            d.$throw(!1);
          else
            return R;
        }, { $$arity: -1, $$ret: d }), !0;
      } catch ($) {
        if ($ === d)
          return $.$v;
        throw $;
      }
    }, -1), b(H, "$one?", function w(h) {
      try {
        var d = m("return"), _ = w.$$p || R, g = this, $ = R;
        return w.$$p = null, $ = 0, e(h !== void 0) ? a(g, "each", [], function(D) {
          var ie, Me, Je = R;
          if (ie = l(arguments), Me = ie, Je = X(Me), e(a(h, "public_send", ["==="].concat(c(Je)))))
            if ($ = ce($, 1), e(z($, 1)))
              d.$throw(!1);
            else
              return R;
          else
            return R;
        }, { $$arity: -1, $$ret: d }) : _ !== R ? a(g, "each", [], function(D) {
          var ie, Me;
          if (ie = l(arguments), Me = ie, !e(t.yieldX(_, c(Me))))
            return R;
          if ($ = ce($, 1), e(z($, 1)))
            d.$throw(!1);
          else
            return R;
        }, { $$arity: -1, $$ret: d }) : a(g, "each", [], function(D) {
          var ie, Me;
          if (ie = l(arguments), Me = ie, !e(f.$destructure(Me)))
            return R;
          if ($ = ce($, 1), e(z($, 1)))
            d.$throw(!1);
          else
            return R;
        }, { $$arity: -1, $$ret: d }), $["$=="](1);
      } catch (I) {
        if (I === d)
          return I.$v;
        throw I;
      }
    }, -1), b(H, "$partition", function w() {
      var h = w.$$p || R, d = this;
      if (w.$$p = null, h === R)
        return a(d, "enum_for", ["partition"], function $() {
          var I = $.$$s == null ? this : $.$$s;
          return I.$enumerator_size();
        }, { $$s: d });
      var _ = [], g = [];
      return d.$each.$$p = function() {
        var $ = f.$destructure(arguments), I = n(h, $);
        e(I) ? _.push($) : g.push($);
      }, d.$each(), [_, g];
    }), b(H, "$reject", function w() {
      var h = w.$$p || R, d = this;
      if (w.$$p = null, h === R)
        return a(d, "enum_for", ["reject"], function g() {
          var $ = g.$$s == null ? this : g.$$s;
          return $.$enumerator_size();
        }, { $$s: d });
      var _ = [];
      return d.$each.$$p = function() {
        var g = f.$destructure(arguments), $ = n(h, g);
        e($) || _.push(g);
      }, d.$each(), _;
    }), b(H, "$reverse_each", function w() {
      var h = w.$$p || R, d = this;
      if (w.$$p = null, h === R)
        return a(d, "enum_for", ["reverse_each"], function $() {
          var I = $.$$s == null ? this : $.$$s;
          return I.$enumerator_size();
        }, { $$s: d });
      var _ = [];
      d.$each.$$p = function() {
        _.push(arguments);
      }, d.$each();
      for (var g = _.length - 1; g >= 0; g--)
        i(h, _[g]);
      return _;
    }), b(H, "$slice_before", function w(h) {
      var d = w.$$p || R, _ = this;
      return w.$$p = null, e(h === void 0 && d === R) && C.$raise(ve("ArgumentError"), "both pattern and block are given"), e(h !== void 0 && d !== R || arguments.length > 1) && C.$raise(ve("ArgumentError"), "wrong number of arguments (" + arguments.length + " expected 1)"), a(ve("Enumerator"), "new", [], function g($) {
        var I = g.$$s == null ? this : g.$$s;
        $ == null && ($ = R);
        var D = [];
        d !== R ? h === void 0 ? I.$each.$$p = function() {
          var ie = f.$destructure(arguments), Me = n(d, ie);
          e(Me) && D.length > 0 && ($["$<<"](D), D = []), D.push(ie);
        } : I.$each.$$p = function() {
          var ie = f.$destructure(arguments), Me = d(ie, h.$dup());
          e(Me) && D.length > 0 && ($["$<<"](D), D = []), D.push(ie);
        } : I.$each.$$p = function() {
          var ie = f.$destructure(arguments), Me = h["$==="](ie);
          e(Me) && D.length > 0 && ($["$<<"](D), D = []), D.push(ie);
        }, I.$each(), D.length > 0 && $["$<<"](D);
      }, { $$s: _ });
    }, -1), b(H, "$slice_after", function w(h) {
      var d = w.$$p || R, _ = this;
      return w.$$p = null, e(h === void 0 && d === R) && C.$raise(ve("ArgumentError"), "both pattern and block are given"), e(h !== void 0 && d !== R || arguments.length > 1) && C.$raise(ve("ArgumentError"), "wrong number of arguments (" + arguments.length + " expected 1)"), e(h !== void 0) && (d = a(C, "proc", [], function($) {
        return $ == null && ($ = R), h["$==="]($);
      })), a(ve("Enumerator"), "new", [], function g($) {
        var I = g.$$s == null ? this : g.$$s;
        $ == null && ($ = R);
        var D;
        I.$each.$$p = function() {
          var ie = f.$destructure(arguments), Me = n(d, ie);
          D == null && (D = []), e(Me) ? (D.push(ie), $.$yield(D), D = null) : D.push(ie);
        }, I.$each(), D != null && $.$yield(D);
      }, { $$s: _ });
    }, -1), b(H, "$slice_when", function w() {
      var h = w.$$p || R, d = this;
      return w.$$p = null, h === R && C.$raise(ve("ArgumentError"), "wrong number of arguments (0 for 1)"), a(ve("Enumerator"), "new", [], function _(g) {
        var $ = _.$$s == null ? this : _.$$s;
        g == null && (g = R);
        var I = R, D = R;
        $.$each_cons.$$p = function() {
          var ie = f.$destructure(arguments), Me = ie[0], Je = ie[1], it = i(h, [Me, Je]);
          D = Je, I === R && (I = []), e(it) ? (I.push(Me), g.$yield(I), I = []) : I.push(Me);
        }, $.$each_cons(2), I !== R && (I.push(D), g.$yield(I));
      }, { $$s: d });
    }), b(H, "$sort", function w() {
      var h = w.$$p || R, d = this, _ = R;
      return w.$$p = null, _ = d.$to_a(), h === R && (h = Re(function($, I) {
        return $ == null && ($ = R), I == null && (I = R), $["$<=>"](I);
      })), a(_, "sort", [], h.$to_proc());
    }), b(H, "$sort_by", function w() {
      var h = w.$$p || R, d = this, _ = R;
      return w.$$p = null, h === R ? a(d, "enum_for", ["sort_by"], function g() {
        var $ = g.$$s == null ? this : g.$$s;
        return $.$enumerator_size();
      }, { $$s: d }) : (_ = a(d, "map", [], function() {
        var $ = R;
        return $ = f.$destructure(arguments), [t.yield1(h, $), $];
      }), a(_, "sort!", [], function($, I) {
        return $ == null && ($ = R), I == null && (I = R), $[0]["$<=>"](I[0]);
      }), a(_, "map!", [], function($) {
        return $ == null && ($ = R), $[1];
      }));
    }), b(H, "$sum", function w(h) {
      var d = w.$$p || R, _ = this, g = R, $ = R;
      return w.$$p = null, h == null && (h = 0), g = h, $ = 0, a(_, "each", [], function(D) {
        var ie, Me, Je = R, it = R, dt = R;
        return ie = l(arguments), Me = ie, Je = d !== R ? t.yieldX(d, c(Me)) : f.$destructure(Me), pe([ve(ve("Float"), "INFINITY"), ve(ve("Float"), "INFINITY")["$-@"]()]["$include?"](Je)) && e(Je["$respond_to?"]("-")) ? (it = ge(Je, $), dt = ce(g, it), $ = ge(ge(dt, g), it), g = dt) : g = ce(g, Je);
      }, -1), g;
    }, -1), b(H, "$take", function(h) {
      var d = this;
      return d.$first(h);
    }), b(H, "$take_while", function w() {
      try {
        var h = m("return"), d = w.$$p || R, _ = this, g = R;
        return w.$$p = null, e(d) ? (g = [], a(_, "each", [], function(I) {
          var D, ie, Me = R;
          return D = l(arguments), ie = D, Me = f.$destructure(ie), e(t.yield1(d, Me)) || h.$throw(g), g.push(Me);
        }, { $$arity: -1, $$ret: h })) : _.$enum_for("take_while");
      } catch ($) {
        if ($ === h)
          return $.$v;
        throw $;
      }
    }), b(H, "$uniq", function w() {
      var h = w.$$p || R, d = this, _ = R;
      return w.$$p = null, _ = ae([], {}), a(d, "each", [], function($) {
        var I, D, ie, Me = R, Je = R;
        return I = l(arguments), D = I, Me = f.$destructure(D), Je = h !== R ? t.yield1(h, Me) : Me, e(_["$key?"](Je)) ? R : (ie = [Je, Me], a(_, "[]=", ie), ie[ie.length - 1]);
      }, -1), _.$values();
    }), b(H, "$tally", function(h) {
      var d = this, _ = R;
      return h && h !== R && s(h), _ = a(a(d, "group_by", [], "itself".$to_proc()), "transform_values", [], "count".$to_proc()), e(h) ? (a(_, "each", [], function($, I) {
        var D;
        return $ == null && ($ = R), I == null && (I = R), D = [$, ce(h.$fetch($, 0), I)], a(h, "[]=", D), D[D.length - 1];
      }), h) : _;
    }, -1), b(H, "$to_h", function w(h) {
      var d = w.$$p || R, _, g, $ = this;
      if (w.$$p = null, _ = l(arguments), g = _, d !== R)
        return a(a($, "map", [], d.$to_proc()), "to_h", c(g));
      var I = ae([], {});
      return $.$each.$$p = function() {
        var D = f.$destructure(arguments), ie = f["$coerce_to?"](D, ve("Array"), "to_ary"), Me, Je;
        ie.$$is_array || C.$raise(ve("TypeError"), "wrong element type " + ie.$class() + " (expected array)"), ie.length !== 2 && C.$raise(ve("ArgumentError"), "wrong array length (expected 2, was " + ie.$length() + ")"), Me = ie[0], Je = ie[1], t.hash_put(I, Me, Je);
      }, $.$each.apply($, g), I;
    }, -1), b(H, "$to_set", function w(h, d) {
      var _ = w.$$p || R, g, $, I, D = this;
      return w.$$p = null, g = l(arguments), g.length > 0 && ($ = g.shift()), $ == null && ($ = _e("Set")), I = g, a($, "new", [D].concat(c(I)), _.$to_proc());
    }, -1), b(H, "$zip", function w(h) {
      w.$$p;
      var d, _, g = this;
      return w.$$p = null, d = l(arguments), _ = d, a(g.$to_a(), "zip", c(_));
    }, -1), Ce(H, "find", "detect"), Ce(H, "filter", "find_all"), Ce(H, "flat_map", "collect_concat"), Ce(H, "map", "collect"), Ce(H, "member?", "include?"), Ce(H, "reduce", "inject"), Ce(H, "select", "find_all"), Ce(H, "to_a", "entries");
  }("::", J);
};
Opal.modules["corelib/enumerator/arithmetic_sequence"] = function(t) {
  var e = t.klass, r = t.truthy, n = t.to_a, i = t.eqeq, s = t.Kernel, o = t.def, a = t.rb_gt, l = t.rb_lt, c = t.rb_le, f = t.rb_ge, m = t.rb_plus, b = t.rb_minus, C = t.eqeqeq, N = t.not, z = t.rb_times, A = t.rb_divide, Q = t.alias, Te = [], ce = t.nil, ge = t.$$$;
  return t.add_stubs("is_a?,==,raise,respond_to?,class,attr_reader,begin,end,exclude_end?,>,step,<,<=,>=,-@,_lesser_than_end?,<<,+,-,===,%,_greater_than_begin?,reverse,!,include?,*,to_i,abs,/,hash,inspect"), function(Y, fe, ae) {
    var Re = e(Y, fe, "Enumerator"), pe = [Re].concat(ae);
    return function(Ce, J, R) {
      var ve = e(Ce, J, "ArithmeticSequence"), F = [ve].concat(R), ne = t.$r(F), H = ve.$$prototype;
      H.step_arg2 = H.receiver_num = H.step_arg1 = H.step = H.range = H.topfx = H.bypfx = H.creation_method = H.skipped_arg = ce, t.prop(ve.$$prototype, "$$is_arithmetic_seq", !0);
      var we = 1 / 0;
      return o(ve, "$initialize", function(X, w, h) {
        var d, _ = this, g = ce;
        return h == null && (h = "step"), _.creation_method = h, r(X["$is_a?"](ge("Array"))) ? (d = [].concat(n(X)), _.step_arg1 = d[0] == null ? ce : d[0], _.step_arg2 = d[1] == null ? ce : d[1], _.topfx = d[2] == null ? ce : d[2], _.bypfx = d[3] == null ? ce : d[3], _.receiver_num = w, _.step = 1, _.range = r(_.step_arg2) ? (_.step = _.step_arg2, t.Range.$new(_.receiver_num, _.step_arg1, !1)) : r(_.step_arg1) ? t.Range.$new(_.receiver_num, _.step_arg1, !1) : t.Range.$new(_.receiver_num, ce, !1)) : (r(w) || (_.skipped_arg = !0), d = [X, r(g = w) ? g : 1], _.range = d[0], _.step = d[1]), _.object = _, i(_.step, 0) && s.$raise(ne("ArgumentError"), "step can't be 0"), r(_.step["$respond_to?"]("to_int")) ? ce : s.$raise(ne("ArgumentError"), "no implicit conversion of " + _.step.$class() + " into Integer");
      }, -2), ve.$attr_reader("step"), o(ve, "$begin", function() {
        var X = this;
        return X.range.$begin();
      }), o(ve, "$end", function() {
        var X = this;
        return X.range.$end();
      }), o(ve, "$exclude_end?", function() {
        var X = this;
        return X.range["$exclude_end?"]();
      }), o(ve, "$_lesser_than_end?", function(X) {
        var w = this, h = ce, d = ce;
        return h = r(d = w.$end()) ? d : we, r(a(w.$step(), 0)) ? r(w["$exclude_end?"]()) ? l(X, h) : c(X, h) : r(w["$exclude_end?"]()) ? a(X, h) : f(X, h);
      }), o(ve, "$_greater_than_begin?", function(X) {
        var w = this, h = ce, d = ce;
        return h = r(d = w.$begin()) ? d : we["$-@"](), r(a(w.$step(), 0)) ? a(X, h) : l(X, h);
      }), o(ve, "$first", function(X) {
        var w = this, h = ce, d = ce, _ = ce;
        if (h = r(d = w.$begin()) ? d : we["$-@"](), !r(X))
          return r(w["$_lesser_than_end?"](h)) ? h : ce;
        for (_ = []; r(r(d = w["$_lesser_than_end?"](h)) ? a(X, 0) : d); )
          _["$<<"](h), h = m(h, w.$step()), X = b(X, 1);
        return _;
      }, -1), o(ve, "$each", function _e() {
        var X = _e.$$p || ce, w = this, h = ce, d = ce;
        if (_e.$$p = null, X === ce)
          return w;
        for (C(ce, h = w.$begin()) && s.$raise(ne("TypeError"), "nil can't be coerced into Integer"), d = r(h = w.$begin()) ? h : we["$-@"](); r(w["$_lesser_than_end?"](d)); )
          t.yield1(X, d), d = m(d, w.$step());
        return w;
      }), o(ve, "$last", function(X) {
        var w = this, h = ce, d = ce, _ = ce;
        if (C(we, h = w.$end()) || C(we["$-@"](), h) ? s.$raise(ge("FloatDomainError"), w.$end()) : C(ce, h) && s.$raise(ge("RangeError"), "cannot get the last element of endless arithmetic sequence"), d = b(w.$end(), b(w.$end(), w.$begin())["$%"](w.$step())), r(w["$_lesser_than_end?"](d)) || (d = b(d, w.$step())), !r(X))
          return r(w["$_greater_than_begin?"](d)) ? d : ce;
        for (_ = []; r(r(h = w["$_greater_than_begin?"](d)) ? a(X, 0) : h); )
          _["$<<"](d), d = b(d, w.$step()), X = b(X, 1);
        return _.$reverse();
      }, -1), o(ve, "$size", function() {
        var X = this, w = ce, h = ce;
        return w = r(a(X.$step(), 0)) ? 1 : -1, N(X["$_lesser_than_end?"](X.$begin())) ? 0 : r([we["$-@"](), we]["$include?"](X.$step())) ? 1 : r([z(we["$-@"](), w), ce]["$include?"](X.$begin())) || r([z(we, w), ce]["$include?"](X.$end())) ? we : (h = b(X.$end(), b(X.$end(), X.$begin())["$%"](X.$step())), r(X["$_lesser_than_end?"](h)) || (h = b(h, X.$step())), m(A(b(h, X.$begin()), X.$step()).$abs().$to_i(), 1));
      }), o(ve, "$==", function(X) {
        var w = this, h = ce, d = ce, _ = ce, g = ce;
        return r(h = r(d = r(_ = r(g = w.$class()["$=="](X.$class())) ? w.$begin()["$=="](X.$begin()) : g) ? w.$end()["$=="](X.$end()) : _) ? w.$step()["$=="](X.$step()) : d) ? w["$exclude_end?"]()["$=="](X["$exclude_end?"]()) : h;
      }), o(ve, "$hash", function() {
        var X = this;
        return [X.$begin(), X.$end(), X.$step(), X["$exclude_end?"]()].$hash();
      }), o(ve, "$inspect", function() {
        var X = this, w = ce;
        return r(X.receiver_num) ? (w = r(X.step_arg2) ? "(" + X.topfx + X.step_arg1.$inspect() + ", " + X.bypfx + X.step_arg2.$inspect() + ")" : r(X.step_arg1) ? "(" + X.topfx + X.step_arg1.$inspect() + ")" : ce, "(" + X.receiver_num.$inspect() + "." + X.creation_method + w + ")") : (w = r(X.skipped_arg) ? ce : "(" + X.step + ")", "((" + X.range.$inspect() + ")." + X.creation_method + w + ")");
      }), Q(ve, "===", "=="), Q(ve, "eql?", "==");
    }(Re, Re, pe);
  }("::", null, Te);
};
Opal.modules["corelib/enumerator/chain"] = function(t) {
  var e = t.deny_frozen_access, r = t.klass, n = t.slice, i = t.def, s = t.send, o = t.to_a, a = t.truthy, l = t.rb_plus, c = t.thrower, f = t.nil, m = t.$$$;
  return t.add_stubs("to_enum,size,each,<<,to_proc,include?,+,reverse_each,respond_to?,rewind,inspect"), function(b, C) {
    var N = r(b, C, "Enumerator");
    return function(z, A) {
      var Q = r(z, A, "Chain"), Te = Q.$$prototype;
      return Te.enums = Te.iterated = f, i(Q, "$initialize", function(ge) {
        var Y, fe, ae = this;
        return Y = n(arguments), fe = Y, e(ae), ae.enums = fe, ae.iterated = [], ae.object = ae;
      }, -1), i(Q, "$each", function ce(ge) {
        var Y = ce.$$p || f, fe, ae, Re = this;
        return ce.$$p = null, fe = n(arguments), ae = fe, Y === f ? s(Re, "to_enum", ["each"].concat(o(ae)), function pe() {
          var Ce = pe.$$s == null ? this : pe.$$s;
          return Ce.$size();
        }, { $$s: Re }) : (s(Re.enums, "each", [], function pe(Ce) {
          var J = pe.$$s == null ? this : pe.$$s;
          return J.iterated == null && (J.iterated = f), Ce == null && (Ce = f), J.iterated["$<<"](Ce), s(Ce, "each", o(ae), Y.$to_proc());
        }, { $$s: Re }), Re);
      }, -1), i(Q, "$size", function(ge) {
        try {
          var Y = c("return"), fe, ae, Re = this, pe = f;
          return fe = n(arguments), ae = fe, pe = 0, s(Re.enums, "each", [], function(J) {
            var R = f;
            return J == null && (J = f), R = s(J, "size", o(ae)), a([f, m(m("Float"), "INFINITY")]["$include?"](R)) && Y.$throw(R), pe = l(pe, R);
          }, { $$ret: Y }), pe;
        } catch (Ce) {
          if (Ce === Y)
            return Ce.$v;
          throw Ce;
        }
      }, -1), i(Q, "$rewind", function() {
        var ge = this;
        return s(ge.iterated, "reverse_each", [], function(fe) {
          return fe == null && (fe = f), a(fe["$respond_to?"]("rewind")) ? fe.$rewind() : f;
        }), ge.iterated = [], ge;
      }), i(Q, "$inspect", function() {
        var ge = this;
        return "#<Enumerator::Chain: " + ge.enums.$inspect() + ">";
      });
    }(N, N);
  }("::", null);
};
Opal.modules["corelib/enumerator/generator"] = function(t) {
  var e = t.deny_frozen_access, r = t.klass, n = t.truthy, i = t.Kernel, s = t.def, o = t.slice, a = t.send, l = [], c = t.nil, f = t.$$$;
  return t.add_stubs("include,raise,new,to_proc"), function(m, b, C) {
    var N = r(m, b, "Enumerator"), z = [N].concat(C);
    return function(A, Q, Te) {
      var ce = r(A, Q, "Generator"), ge = [ce].concat(Te), Y = t.$r(ge), fe = ce.$$prototype;
      return fe.block = c, ce.$include(f("Enumerable")), s(ce, "$initialize", function ae() {
        var Re = ae.$$p || c, pe = this;
        return ae.$$p = null, e(pe), n(Re) || i.$raise(f("LocalJumpError"), "no block given"), pe.block = Re;
      }), s(ce, "$each", function ae(Re) {
        var pe = ae.$$p || c, Ce, J, R = this, ve = c;
        ae.$$p = null, Ce = o(arguments), J = Ce, ve = a(Y("Yielder"), "new", [], pe.$to_proc());
        try {
          J.unshift(ve), t.yieldX(R.block, J);
        } catch (F) {
          if (F && F.$thrower_type == "breaker")
            return F.$v;
          throw F;
        }
        return R;
      }, -1);
    }(z[0], null, z);
  }(l[0], null, l);
};
Opal.modules["corelib/enumerator/lazy"] = function(t) {
  var e = t.truthy, r = t.coerce_to, n = t.yield1, i = t.yieldX, s = t.deny_frozen_access, o = t.klass, a = t.slice, l = t.send2, c = t.find_super, f = t.to_a, m = t.defs, b = t.Kernel, C = t.send, N = t.def, z = t.return_self, A = t.Opal, Q = t.rb_lt, Te = t.eqeqeq, ce = t.rb_plus, ge = t.alias, Y = [], fe = t.nil, ae = t.$$$;
  return t.add_stubs("raise,each,new,enumerator_size,yield,respond_to?,try_convert,<,===,+,for,class,to_proc,destructure,inspect,to_a,find_all,collect_concat,collect,enum_for"), function(Re, pe, Ce) {
    var J = o(Re, pe, "Enumerator"), R = [J].concat(Ce);
    return function(ve, F, ne) {
      var H = o(ve, F, "Lazy"), we = [H].concat(ne), _e = t.$r(we), X = H.$$prototype;
      return X.enumerator = fe, o(H, ae("Exception"), "StopLazyError"), m(H, "$for", function w(h, d) {
        var _, g, $ = w.$$p || fe, I = this, D = fe;
        return w.$$p = null, _ = a(arguments, 1), g = _, D = l(I, c(I, "for", w, !1, !0), "for", [h].concat(f(g)), $), D.enumerator = h, D;
      }, -2), N(H, "$initialize", function w(h, d) {
        var _ = w.$$p || fe, g = this;
        return w.$$p = null, d == null && (d = fe), s(g), _ === fe && b.$raise(ae("ArgumentError"), "tried to call lazy new without a block"), g.enumerator = h, l(g, c(g, "initialize", w, !1, !0), "initialize", [d], function(I, D) {
          var ie, Me;
          I == null && (I = fe), ie = a(arguments, 1), Me = ie;
          try {
            return C(h, "each", f(Me), function(it) {
              var dt, St;
              dt = a(arguments), St = dt, St.unshift(I), i(_, St);
            }, -1);
          } catch (Je) {
            if (t.rescue(Je, [_e("StopLazyError")]))
              try {
                return fe;
              } finally {
                t.pop_exception();
              }
            else
              throw Je;
          }
        }, -2);
      }, -2), N(H, "$lazy", z), N(H, "$collect", function w() {
        var h = w.$$p || fe, d = this;
        return w.$$p = null, e(h) || b.$raise(ae("ArgumentError"), "tried to call lazy map without a block"), C(_e("Lazy"), "new", [d, d.$enumerator_size()], function(g, $) {
          var I, D;
          g == null && (g = fe), I = a(arguments, 1), D = I;
          var ie = i(h, D);
          g.$yield(ie);
        }, -2);
      }), N(H, "$collect_concat", function w() {
        var h = w.$$p || fe, d = this;
        return w.$$p = null, e(h) || b.$raise(ae("ArgumentError"), "tried to call lazy map without a block"), C(_e("Lazy"), "new", [d, fe], function(g, $) {
          var I, D;
          g == null && (g = fe), I = a(arguments, 1), D = I;
          var ie = i(h, D);
          if (ie["$respond_to?"]("force") && ie["$respond_to?"]("each"))
            C(ie, "each", [], function(it) {
              return it == null && (it = fe), g.$yield(it);
            });
          else {
            var Me = A.$try_convert(ie, ae("Array"), "to_ary");
            Me === fe ? g.$yield(ie) : C(ie, "each", [], function(it) {
              return it == null && (it = fe), g.$yield(it);
            });
          }
        }, -2);
      }), N(H, "$drop", function(h) {
        var d = this, _ = fe, g = fe, $ = fe;
        return h = r(h, ae("Integer"), "to_int"), e(Q(h, 0)) && b.$raise(ae("ArgumentError"), "attempt to drop negative size"), _ = d.$enumerator_size(), g = Te(ae("Integer"), _) && e(Q(h, _)) ? h : _, $ = 0, C(_e("Lazy"), "new", [d, g], function(D, ie) {
          var Me, Je;
          return D == null && (D = fe), Me = a(arguments, 1), Je = Me, e(Q($, h)) ? $ = ce($, 1) : C(D, "yield", f(Je));
        }, -2);
      }), N(H, "$drop_while", function w() {
        var h = w.$$p || fe, d = this, _ = fe;
        return w.$$p = null, e(h) || b.$raise(ae("ArgumentError"), "tried to call lazy drop_while without a block"), _ = !0, C(_e("Lazy"), "new", [d, fe], function($, I) {
          var D, ie;
          if ($ == null && ($ = fe), D = a(arguments, 1), ie = D, e(_)) {
            var Me = i(h, ie);
            e(Me) || (_ = !1, C($, "yield", f(ie)));
          } else
            return C($, "yield", f(ie));
        }, -2);
      }), N(H, "$enum_for", function w(h, d) {
        var _ = w.$$p || fe, g, $, I, D = this;
        return w.$$p = null, g = a(arguments), g.length > 0 && ($ = g.shift()), $ == null && ($ = "each"), I = g, C(D.$class(), "for", [D, $].concat(f(I)), _.$to_proc());
      }, -1), N(H, "$find_all", function w() {
        var h = w.$$p || fe, d = this;
        return w.$$p = null, e(h) || b.$raise(ae("ArgumentError"), "tried to call lazy select without a block"), C(_e("Lazy"), "new", [d, fe], function(g, $) {
          var I, D;
          g == null && (g = fe), I = a(arguments, 1), D = I;
          var ie = i(h, D);
          e(ie) && C(g, "yield", f(D));
        }, -2);
      }), N(H, "$grep", function w(h) {
        var d = w.$$p || fe, _ = this;
        return w.$$p = null, e(d) ? C(_e("Lazy"), "new", [_, fe], function($, I) {
          var D, ie;
          $ == null && ($ = fe), D = a(arguments, 1), ie = D;
          var Me = A.$destructure(ie), Je = h["$==="](Me);
          e(Je) && (Je = n(d, Me), $.$yield(n(d, Me)));
        }, -2) : C(_e("Lazy"), "new", [_, fe], function($, I) {
          var D, ie;
          $ == null && ($ = fe), D = a(arguments, 1), ie = D;
          var Me = A.$destructure(ie), Je = h["$==="](Me);
          e(Je) && $.$yield(Me);
        }, -2);
      }), N(H, "$reject", function w() {
        var h = w.$$p || fe, d = this;
        return w.$$p = null, e(h) || b.$raise(ae("ArgumentError"), "tried to call lazy reject without a block"), C(_e("Lazy"), "new", [d, fe], function(g, $) {
          var I, D;
          g == null && (g = fe), I = a(arguments, 1), D = I;
          var ie = i(h, D);
          e(ie) || C(g, "yield", f(D));
        }, -2);
      }), N(H, "$take", function(h) {
        var d = this, _ = fe, g = fe, $ = fe;
        return h = r(h, ae("Integer"), "to_int"), e(Q(h, 0)) && b.$raise(ae("ArgumentError"), "attempt to take negative size"), _ = d.$enumerator_size(), g = Te(ae("Integer"), _) && e(Q(h, _)) ? h : _, $ = 0, C(_e("Lazy"), "new", [d, g], function(D, ie) {
          var Me, Je;
          return D == null && (D = fe), Me = a(arguments, 1), Je = Me, e(Q($, h)) ? (C(D, "yield", f(Je)), $ = ce($, 1)) : b.$raise(_e("StopLazyError"));
        }, -2);
      }), N(H, "$take_while", function w() {
        var h = w.$$p || fe, d = this;
        return w.$$p = null, e(h) || b.$raise(ae("ArgumentError"), "tried to call lazy take_while without a block"), C(_e("Lazy"), "new", [d, fe], function(g, $) {
          var I, D;
          g == null && (g = fe), I = a(arguments, 1), D = I;
          var ie = i(h, D);
          e(ie) ? C(g, "yield", f(D)) : b.$raise(_e("StopLazyError"));
        }, -2);
      }), N(H, "$inspect", function() {
        var h = this;
        return "#<" + h.$class() + ": " + h.enumerator.$inspect() + ">";
      }), ge(H, "force", "to_a"), ge(H, "filter", "find_all"), ge(H, "flat_map", "collect_concat"), ge(H, "map", "collect"), ge(H, "select", "find_all"), ge(H, "to_enum", "enum_for");
    }(J, J, R);
  }("::", null, Y);
};
Opal.modules["corelib/enumerator/yielder"] = function(t) {
  var e = t.klass, r = t.def, n = t.slice, i = t.send, s = t.to_a, o = [], a = t.nil;
  return t.add_stubs("yield,proc"), function(l, c, f) {
    var m = e(l, c, "Enumerator"), b = [m].concat(f);
    return function(C, N) {
      var z = e(C, N, "Yielder"), A = z.$$prototype;
      return A.block = a, r(z, "$initialize", function Q() {
        var Te = Q.$$p || a, ce = this;
        return Q.$$p = null, ce.block = Te, ce;
      }), r(z, "$yield", function(Te) {
        var ce, ge, Y = this;
        ce = n(arguments), ge = ce;
        var fe = t.yieldX(Y.block, ge);
        if (fe && fe.$thrower_type == "break")
          throw fe;
        return fe;
      }, -1), r(z, "$<<", function(Te) {
        var ce = this;
        return ce.$yield(Te), ce;
      }), r(z, "$to_proc", function() {
        var Te = this;
        return i(Te, "proc", [], function ce(ge) {
          var Y, fe, ae = ce.$$s == null ? this : ce.$$s;
          return Y = n(arguments), fe = Y, i(ae, "yield", s(fe));
        }, { $$arity: -1, $$s: Te });
      });
    }(b[0], null);
  }(o[0], null, o);
};
Opal.modules["corelib/enumerator"] = function(t) {
  var e = t.slice, r = t.coerce_to, n = t.deny_frozen_access, i = t.klass, s = t.defs, o = t.truthy, a = t.send, l = t.not, c = t.def, f = t.rb_plus, m = t.to_a, b = t.Opal, C = t.send2, N = t.find_super, z = t.rb_ge, A = t.Kernel, Q = t.rb_le, Te = t.alias, ce = t.top, ge = [], Y = t.nil, fe = t.$$$;
  return t.add_stubs("require,include,allocate,new,to_proc,!,respond_to?,empty?,nil?,+,class,__send__,call,enum_for,size,destructure,map,>=,length,raise,[],peek_values,<=,next_values,inspect,any?,each_with_object,autoload"), ce.$require("corelib/enumerable"), function(ae, Re, pe) {
    var Ce = i(ae, Re, "Enumerator"), J = [Ce].concat(pe), R = t.$r(J), ve = Ce.$$prototype;
    return ve.size = ve.args = ve.object = ve.method = ve.values = ve.cursor = Y, Ce.$include(fe("Enumerable")), Ce.$$prototype.$$is_enumerator = !0, s(Ce, "$for", function F(ne, H, we) {
      var _e = F.$$p || Y, X, w, h, d = this;
      F.$$p = null, X = e(arguments, 1), X.length > 0 && (w = X.shift()), w == null && (w = "each"), h = X;
      var _ = d.$allocate();
      return _.object = ne, _.size = _e, _.method = w, _.args = h, _.cursor = 0, _;
    }, -2), c(Ce, "$initialize", function F(ne) {
      var H = F.$$p || Y, we = this;
      return F.$$p = null, e(arguments), n(we), we.cursor = 0, o(H) ? (we.object = a(R("Generator"), "new", [], H.$to_proc()), we.method = "each", we.args = [], we.size = arguments[0] || Y, o(we.size) && l(we.size["$respond_to?"]("call")) ? we.size = r(we.size, fe("Integer"), "to_int") : Y) : (we.object = arguments[0], we.method = arguments[1] || "each", we.args = e(arguments, 2), we.size = Y);
    }, -1), c(Ce, "$each", function F(ne) {
      var H = F.$$p || Y, we, _e, X = this;
      return F.$$p = null, we = e(arguments), _e = we, o(H["$nil?"]()) && o(_e["$empty?"]()) ? X : (_e = f(X.args, _e), o(H["$nil?"]()) ? a(X.$class(), "new", [X.object, X.method].concat(m(_e))) : a(X.object, "__send__", [X.method].concat(m(_e)), H.$to_proc()));
    }, -1), c(Ce, "$size", function() {
      var ne = this;
      return o(ne.size["$respond_to?"]("call")) ? a(ne.size, "call", m(ne.args)) : ne.size;
    }), c(Ce, "$with_index", function F(ne) {
      var H = F.$$p || Y, we = this;
      if (F.$$p = null, ne == null && (ne = 0), ne = o(ne) ? r(ne, fe("Integer"), "to_int") : 0, !o(H))
        return a(we, "enum_for", ["with_index", ne], function X() {
          var w = X.$$s == null ? this : X.$$s;
          return w.$size();
        }, { $$s: we });
      var _e = ne;
      return we.$each.$$p = function() {
        var X = b.$destructure(arguments), w = H(X, _e);
        return _e++, w;
      }, we.$each();
    }, -1), c(Ce, "$each_with_index", function F() {
      var ne = F.$$p || Y, H = this;
      return F.$$p = null, ne === Y ? a(H, "enum_for", ["each_with_index"], function we() {
        var _e = we.$$s == null ? this : we.$$s;
        return _e.$size();
      }, { $$s: H }) : (C(H, N(H, "each_with_index", F, !1, !0), "each_with_index", [], ne), H.object);
    }), c(Ce, "$rewind", function() {
      var ne = this;
      return ne.cursor = 0, ne;
    }), c(Ce, "$peek_values", function() {
      var ne = this, H = Y;
      return ne.values = o(H = ne.values) ? H : a(ne, "map", [], function(_e) {
        var X, w;
        return X = e(arguments), w = X, w;
      }, -1), o(z(ne.cursor, ne.values.$length())) && A.$raise(fe("StopIteration"), "iteration reached an end"), ne.values["$[]"](ne.cursor);
    }), c(Ce, "$peek", function() {
      var ne = this, H = Y;
      return H = ne.$peek_values(), o(Q(H.$length(), 1)) ? H["$[]"](0) : H;
    }), c(Ce, "$next_values", function() {
      var ne = this, H = Y;
      return H = ne.$peek_values(), ne.cursor = f(ne.cursor, 1), H;
    }), c(Ce, "$next", function() {
      var ne = this, H = Y;
      return H = ne.$next_values(), o(Q(H.$length(), 1)) ? H["$[]"](0) : H;
    }), c(Ce, "$feed", function(ne) {
      var H = this;
      return H.$raise(R("NotImplementedError"), "Opal doesn't support Enumerator#feed");
    }), c(Ce, "$+", function(ne) {
      var H = this;
      return fe(fe("Enumerator"), "Chain").$new(H, ne);
    }), c(Ce, "$inspect", function() {
      var ne = this, H = Y;
      return H = "#<" + ne.$class() + ": " + ne.object.$inspect() + ":" + ne.method, o(ne.args["$any?"]()) && (H = f(H, "(" + ne.args.$inspect()["$[]"](fe("Range").$new(1, -2)) + ")")), f(H, ">");
    }), Te(Ce, "with_object", "each_with_object"), Ce.$autoload("ArithmeticSequence", "corelib/enumerator/arithmetic_sequence"), Ce.$autoload("Chain", "corelib/enumerator/chain"), Ce.$autoload("Generator", "corelib/enumerator/generator"), Ce.$autoload("Lazy", "corelib/enumerator/lazy"), Ce.$autoload("Yielder", "corelib/enumerator/yielder");
  }("::", null, ge);
};
Opal.modules["corelib/numeric"] = function(t) {
  var e = t.klass, r = t.truthy, n = t.Kernel, i = t.def, s = t.to_ary, o = t.return_self, a = t.rb_minus, l = t.rb_times, c = t.rb_lt, f = t.eqeq, m = t.rb_divide, b = t.return_val, C = t.Opal, N = t.slice, z = t.extract_kwargs, A = t.ensure_kwargs, Q = t.not, Te = t.send, ce = t.rb_ge, ge = t.rb_le, Y = t.rb_plus, fe = t.rb_gt, ae = t.alias, Re = t.top, pe = t.nil, Ce = t.$$$;
  return t.add_stubs("require,include,instance_of?,class,Float,respond_to?,coerce,__send__,raise,equal?,-,*,div,<,-@,ceil,to_f,denominator,to_r,==,floor,/,%,Complex,zero?,numerator,abs,arg,coerce_to!,round,<=>,compare,is_a?,!,new,enum_for,to_proc,negative?,>=,<=,+,to_i,truncate,>,angle,conj,imag,rect"), Re.$require("corelib/comparable"), function(J, R) {
    var ve = e(J, R, "Numeric");
    return ve.$include(Ce("Comparable")), i(ve, "$coerce", function(ne) {
      var H = this;
      return r(ne["$instance_of?"](H.$class())) ? [ne, H] : [n.$Float(ne), n.$Float(H)];
    }), i(ve, "$__coerced__", function(ne, H) {
      var we, _e, X = this, w = pe, h = pe;
      if (r(H["$respond_to?"]("coerce")))
        return _e = H.$coerce(X), we = s(_e), w = we[0] == null ? pe : we[0], h = we[1] == null ? pe : we[1], w.$__send__(ne, h);
      switch (ne) {
        case "+":
        case "-":
        case "*":
        case "/":
        case "%":
        case "&":
        case "|":
        case "^":
        case "**":
          return n.$raise(Ce("TypeError"), "" + H.$class() + " can't be coerced into Numeric");
        case ">":
        case ">=":
        case "<":
        case "<=":
        case "<=>":
          return n.$raise(Ce("ArgumentError"), "comparison of " + X.$class() + " with " + H.$class() + " failed");
        default:
          return pe;
      }
    }), i(ve, "$<=>", function(ne) {
      var H = this;
      return r(H["$equal?"](ne)) ? 0 : pe;
    }), i(ve, "$+@", o), i(ve, "$-@", function() {
      var ne = this;
      return a(0, ne);
    }), i(ve, "$%", function(ne) {
      var H = this;
      return a(H, l(ne, H.$div(ne)));
    }), i(ve, "$abs", function() {
      var ne = this;
      return c(ne, 0) ? ne["$-@"]() : ne;
    }), i(ve, "$abs2", function() {
      var ne = this;
      return l(ne, ne);
    }), i(ve, "$angle", function() {
      var ne = this;
      return c(ne, 0) ? Ce(Ce("Math"), "PI") : 0;
    }), i(ve, "$ceil", function(ne) {
      var H = this;
      return ne == null && (ne = 0), H.$to_f().$ceil(ne);
    }, -1), i(ve, "$conj", o), i(ve, "$denominator", function() {
      var ne = this;
      return ne.$to_r().$denominator();
    }), i(ve, "$div", function(ne) {
      var H = this;
      return f(ne, 0) && n.$raise(Ce("ZeroDivisionError"), "divided by o"), m(H, ne).$floor();
    }), i(ve, "$divmod", function(ne) {
      var H = this;
      return [H.$div(ne), H["$%"](ne)];
    }), i(ve, "$fdiv", function(ne) {
      var H = this;
      return m(H.$to_f(), ne);
    }), i(ve, "$floor", function(ne) {
      var H = this;
      return ne == null && (ne = 0), H.$to_f().$floor(ne);
    }, -1), i(ve, "$i", function() {
      var ne = this;
      return n.$Complex(0, ne);
    }), i(ve, "$imag", b(0)), i(ve, "$integer?", b(!1)), i(ve, "$nonzero?", function() {
      var ne = this;
      return r(ne["$zero?"]()) ? pe : ne;
    }), i(ve, "$numerator", function() {
      var ne = this;
      return ne.$to_r().$numerator();
    }), i(ve, "$polar", function() {
      var ne = this;
      return [ne.$abs(), ne.$arg()];
    }), i(ve, "$quo", function(ne) {
      var H = this;
      return m(C["$coerce_to!"](H, Ce("Rational"), "to_r"), ne);
    }), i(ve, "$real", o), i(ve, "$real?", b(!0)), i(ve, "$rect", function() {
      var ne = this;
      return [ne, 0];
    }), i(ve, "$round", function(ne) {
      var H = this;
      return H.$to_f().$round(ne);
    }, -1), i(ve, "$step", function F(ne, H, we) {
      var _e = F.$$p || pe, X, w, h, d, _, g, $ = this, I = pe;
      F.$$p = null, X = N(arguments), w = z(X), w = A(w), X.length > 0 && (h = X.shift()), X.length > 0 && (d = X.shift()), _ = w.$$smap.to, g = w.$$smap.by, h !== void 0 && _ !== void 0 && n.$raise(Ce("ArgumentError"), "to is given twice"), d !== void 0 && g !== void 0 && n.$raise(Ce("ArgumentError"), "step is given twice"), _ !== void 0 && (h = _), g !== void 0 && (d = g), h === void 0 && (h = pe);
      function D() {
        d === pe && n.$raise(Ce("TypeError"), "step must be numeric"), d != null && d["$=="](0) && n.$raise(Ce("ArgumentError"), "step can't be 0"), (d === pe || d == null) && (d = 1);
        var Tt = d["$<=>"](0);
        Tt === pe && n.$raise(Ce("ArgumentError"), "0 can't be coerced into " + d.$class()), (h === pe || h == null) && (h = Tt > 0 ? Ce(Ce("Float"), "INFINITY") : Ce(Ce("Float"), "INFINITY")["$-@"]()), C.$compare($, h);
      }
      function ie() {
        if (d > 0 && $ > h || d < 0 && $ < h)
          return 0;
        if (d === 1 / 0 || d === -1 / 0)
          return 1;
        var Tt = Math.abs, yt = Math.floor, Qe = (Tt($) + Tt(h) + Tt(h - $)) / Tt(d) * Ce(Ce("Float"), "EPSILON");
        return Qe === 1 / 0 || Qe === -1 / 0 ? 0 : (Qe > 0.5 && (Qe = 0.5), yt((h - $) / d + Qe) + 1);
      }
      function Me() {
        if (D(), d === 0)
          return 1 / 0;
        if (d % 1 !== 0)
          return ie();
        if (d > 0 && $ > h || d < 0 && $ < h)
          return 0;
        var Tt = Math.ceil, yt = Math.abs, Qe = yt($ - h) + 1, Ne = yt(d);
        return Tt(Qe / Ne);
      }
      if (_e === pe)
        return (Q(h) || r(h["$is_a?"](Ce("Numeric")))) && (Q(d) || r(d["$is_a?"](Ce("Numeric")))) ? Ce(Ce("Enumerator"), "ArithmeticSequence").$new([h, d, r(_) ? "to: " : pe, r(g) ? "by: " : pe], $) : Te($, "enum_for", ["step", h, d], Me.$to_proc());
      D();
      var Je = d["$negative?"](), it = d["$=="](0) || h === 1 / 0 && !Je || h === -1 / 0 && Je;
      if ($.$$is_number && d.$$is_number && h.$$is_number)
        if ($ % 1 === 0 && (it || h % 1 === 0) && d % 1 === 0) {
          var dt = $;
          if (it)
            for (; ; dt += d)
              _e(dt);
          else if (Je)
            for (; dt >= h; dt += d)
              _e(dt);
          else
            for (; dt <= h; dt += d)
              _e(dt);
          return $;
        } else {
          var St = $.$to_f().valueOf();
          d = d.$to_f().valueOf(), h = h.$to_f().valueOf();
          var gt = ie();
          if (!isFinite(d))
            gt !== 0 && _e(St);
          else if (d === 0)
            for (; ; )
              _e(St);
          else
            for (var wt = 0; wt < gt; wt++) {
              var bt = wt * d + $;
              (d >= 0 ? h < bt : h > bt) && (bt = h), _e(bt);
            }
          return $;
        }
      for (I = $; r(Je ? ce(I, h) : ge(I, h)); )
        t.yield1(_e, I), I = Y(I, d);
    }, -1), i(ve, "$to_c", function() {
      var ne = this;
      return n.$Complex(ne, 0);
    }), i(ve, "$to_int", function() {
      var ne = this;
      return ne.$to_i();
    }), i(ve, "$truncate", function(ne) {
      var H = this;
      return ne == null && (ne = 0), H.$to_f().$truncate(ne);
    }, -1), i(ve, "$zero?", function() {
      var ne = this;
      return ne["$=="](0);
    }), i(ve, "$positive?", function() {
      var ne = this;
      return fe(ne, 0);
    }), i(ve, "$negative?", function() {
      var ne = this;
      return c(ne, 0);
    }), i(ve, "$dup", o), i(ve, "$clone", function(ne) {
      var H = this;
      return ne = A(ne), ne.$$smap.freeze, H;
    }, -1), i(ve, "$finite?", b(!0)), i(ve, "$infinite?", b(pe)), ae(ve, "arg", "angle"), ae(ve, "conjugate", "conj"), ae(ve, "imaginary", "imag"), ae(ve, "magnitude", "abs"), ae(ve, "modulo", "%"), ae(ve, "phase", "arg"), ae(ve, "rectangular", "rect");
  }("::", null);
};
Opal.modules["corelib/array"] = function(t) {
  var e = t.truthy, r = t.falsy, n = t.hash_ids, i = t.yield1, s = t.hash_get, o = t.hash_put, a = t.hash_delete, l = t.coerce_to, c = t.respond_to, f = t.deny_frozen_access, m = t.freeze, b = t.klass, C = t.slice, N = t.defs, z = t.Kernel, A = t.def, Q = t.Opal, Te = t.eqeqeq, ce = t.hash2, ge = t.send2, Y = t.find_super, fe = t.send, ae = t.rb_gt, Re = t.rb_times, pe = t.eqeq, Ce = t.rb_minus, J = t.to_a, R = t.to_ary, ve = t.gvars, F = t.rb_ge, ne = t.assign_ivar, H = t.rb_lt, we = t.return_self, _e = t.neqeq, X = t.alias, w = t.top, h = [], d = t.nil, _ = t.$$$;
  return t.add_stubs("require,include,to_a,warn,raise,replace,respond_to?,to_ary,coerce_to?,===,join,to_str,hash,<=>,==,object_id,inspect,enum_for,class,bsearch_index,to_proc,nil?,coerce_to!,>,*,enumerator_size,empty?,size,map,equal?,dup,each,reduce,-,[],dig,eql?,length,exclude_end?,flatten,frozen?,__id__,&,!,intersection,to_s,new,item,max,min,>=,**,delete_if,reverse,rotate,rand,at,keep_if,shuffle!,<,sort,sort_by,!=,times,[]=,<<,uniq,|,values,is_a?,end,begin,upto,reject,push,select,select!,collect,collect!,unshift,pristine,singleton_class"), w.$require("corelib/enumerable"), w.$require("corelib/numeric"), function(g, $, I) {
    var D = b(g, $, "Array"), ie = [D].concat(I), Me = t.$r(ie);
    D.$include(_("Enumerable")), t.prop(D.$$prototype, "$$is_array", !0);
    function Je(Qe) {
      for (var Ne = Qe[0], Le = 1, qe = Qe.length; Le < qe; Le++)
        Qe[Le - 1] = Qe[Le];
      return Qe.pop(), Ne;
    }
    function it(Qe, Ne) {
      return Ne.$$name === t.Array ? Qe : Ne.$allocate().$replace(Qe.$to_a());
    }
    function dt(Qe, Ne, Le) {
      for (var qe, y = null, P = new Array(Qe.length), be = 0, Oe = 0, Ue = Qe.length; be < Ue; be++) {
        if (!y)
          try {
            qe = i(Le, Qe[be]);
          } catch (Xe) {
            y = Xe;
          }
        (y || Ne(qe)) && (P[Oe] = Qe[be], Oe += 1);
      }
      if (Oe !== be && (Qe.splice.apply(Qe, [0, P.length].concat(P)), Qe.splice(Oe, P.length)), y)
        throw y;
    }
    N(D, "$[]", function(Ne) {
      var Le, qe, y = this;
      return Le = C(arguments), qe = Le, it(qe, y);
    }, -1), A(D, "$initialize", function Qe(Ne, Le) {
      var qe = Qe.$$p || d, y = this;
      if (Qe.$$p = null, Ne == null && (Ne = d), Le == null && (Le = d), f(y), Le !== d && qe !== d && z.$warn("warning: block supersedes default value argument"), Ne > _(_("Integer"), "MAX") && z.$raise(_("ArgumentError"), "array size too big"), arguments.length > 2 && z.$raise(_("ArgumentError"), "wrong number of arguments (" + arguments.length + " for 0..2)"), arguments.length === 0)
        return y.splice(0, y.length), y;
      if (arguments.length === 1) {
        if (Ne.$$is_array)
          return y.$replace(Ne.$to_a()), y;
        if (Ne["$respond_to?"]("to_ary"))
          return y.$replace(Ne.$to_ary()), y;
      }
      Ne = l(Ne, _("Integer"), "to_int"), Ne < 0 && z.$raise(_("ArgumentError"), "negative array size"), y.splice(0, y.length);
      var P, be;
      if (qe === d)
        for (P = 0; P < Ne; P++)
          y.push(Le);
      else
        for (P = 0, be; P < Ne; P++)
          be = qe(P), y[P] = be;
      return y;
    }, -1), N(D, "$try_convert", function(Ne) {
      return Q["$coerce_to?"](Ne, _("Array"), "to_ary");
    }), A(D, "$&", function(Ne) {
      var Le = this;
      Ne = Te(_("Array"), Ne) ? Ne.$to_a() : l(Ne, _("Array"), "to_ary").$to_a();
      var qe = [], y = ce([], {}), P, be, Oe;
      for (P = 0, be = Ne.length; P < be; P++)
        o(y, Ne[P], !0);
      for (P = 0, be = Le.length; P < be; P++)
        Oe = Le[P], a(y, Oe) !== void 0 && qe.push(Oe);
      return qe;
    }), A(D, "$|", function(Ne) {
      var Le = this;
      Ne = Te(_("Array"), Ne) ? Ne.$to_a() : l(Ne, _("Array"), "to_ary").$to_a();
      var qe = ce([], {}), y, P;
      for (y = 0, P = Le.length; y < P; y++)
        o(qe, Le[y], !0);
      for (y = 0, P = Ne.length; y < P; y++)
        o(qe, Ne[y], !0);
      return qe.$keys();
    }), A(D, "$*", function(Ne) {
      var Le = this;
      if (e(Ne["$respond_to?"]("to_str")))
        return Le.$join(Ne.$to_str());
      Ne = l(Ne, _("Integer"), "to_int"), e(Ne < 0) && z.$raise(_("ArgumentError"), "negative argument");
      for (var qe = [], y = Le.$to_a(), P = 0; P < Ne; P++)
        qe = qe.concat(y);
      return qe;
    }), A(D, "$+", function(Ne) {
      var Le = this;
      return Ne = Te(_("Array"), Ne) ? Ne.$to_a() : l(Ne, _("Array"), "to_ary").$to_a(), Le.concat(Ne);
    }), A(D, "$-", function(Ne) {
      var Le = this;
      if (Ne = Te(_("Array"), Ne) ? Ne.$to_a() : l(Ne, _("Array"), "to_ary").$to_a(), e(Le.length === 0))
        return [];
      if (e(Ne.length === 0))
        return Le.slice();
      var qe = [], y = ce([], {}), P, be, Oe;
      for (P = 0, be = Ne.length; P < be; P++)
        o(y, Ne[P], !0);
      for (P = 0, be = Le.length; P < be; P++)
        Oe = Le[P], s(y, Oe) === void 0 && qe.push(Oe);
      return qe;
    }), A(D, "$<<", function(Ne) {
      var Le = this;
      return f(Le), Le.push(Ne), Le;
    }), A(D, "$<=>", function(Ne) {
      var Le = this;
      if (Te(_("Array"), Ne))
        Ne = Ne.$to_a();
      else if (e(Ne["$respond_to?"]("to_ary")))
        Ne = Ne.$to_ary().$to_a();
      else
        return d;
      if (Le.$hash() === Ne.$hash())
        return 0;
      for (var qe = Math.min(Le.length, Ne.length), y = 0; y < qe; y++) {
        var P = Le[y]["$<=>"](Ne[y]);
        if (P !== 0)
          return P;
      }
      return Le.length["$<=>"](Ne.length);
    }), A(D, "$==", function(Ne) {
      var Le = this, qe = {};
      function y(P, be) {
        var Oe, Ue, Xe, u;
        if (P === be)
          return !0;
        if (!be.$$is_array)
          return c(be, "$to_ary") ? be["$=="](P) : !1;
        if (P.$$constructor !== Array && (P = P.$to_a()), be.$$constructor !== Array && (be = be.$to_a()), P.length !== be.length)
          return !1;
        for (qe[P.$object_id()] = !0, Oe = 0, Ue = P.length; Oe < Ue; Oe++)
          if (Xe = P[Oe], u = be[Oe], Xe.$$is_array) {
            if (u.$$is_array && u.length !== Xe.length || !qe.hasOwnProperty(Xe.$object_id()) && !y(Xe, u))
              return !1;
          } else if (!Xe["$=="](u))
            return !1;
        return !0;
      }
      return y(Le, Ne);
    });
    function St(Qe, Ne) {
      var Le = Qe.length, qe, y, P, be;
      return qe = Ne.excl, y = Ne.begin === d ? 0 : l(Ne.begin, t.Integer, "to_int"), P = Ne.end === d ? -1 : l(Ne.end, t.Integer, "to_int"), y < 0 && (y += Le, y < 0) || (Ne.excl_rev && Ne.begin !== d && (y += 1), y > Le) ? d : P < 0 && (P += Le, P < 0) ? [] : ((!qe || Ne.end === d) && (P += 1), be = Qe.slice(y, P), be);
    }
    function gt(Qe, Ne) {
      var Le, qe = [], y = 0, P;
      for (Ne.step < 0 ? (P = {
        begin: Ne.range.end,
        end: Ne.range.begin,
        excl: !1,
        excl_rev: Ne.range.excl
      }, Le = St(Qe, P).$reverse()) : Le = St(Qe, Ne.range); y < Le.length; )
        qe.push(Le[y]), y += Math.abs(Ne.step);
      return qe;
    }
    function wt(Qe, Ne, Le) {
      var qe = Qe.length, y;
      return Ne = l(Ne, t.Integer, "to_int"), Ne < 0 && (Ne += qe, Ne < 0) ? d : Le === void 0 ? Ne >= qe || Ne < 0 ? d : Qe[Ne] : (Le = l(Le, t.Integer, "to_int"), Le < 0 || Ne > qe || Ne < 0 ? d : (y = Qe.slice(Ne, Ne + Le), y));
    }
    A(D, "$[]", function(Ne, Le) {
      var qe = this;
      return Ne.$$is_range ? St(qe, Ne) : Ne.$$is_arithmetic_seq ? gt(qe, Ne) : wt(qe, Ne, Le);
    }, -2), A(D, "$[]=", function(Ne, Le, qe) {
      var y = this, P = d, be = d;
      f(y), P = d;
      var Oe, Ue = y.length;
      if (Ne.$$is_range) {
        Le.$$is_array ? P = Le.$to_a() : Le["$respond_to?"]("to_ary") ? P = Le.$to_ary().$to_a() : P = [Le];
        var Xe = Ne.excl, u = Ne.begin === d ? 0 : l(Ne.begin, t.Integer, "to_int"), se = Ne.end === d ? -1 : l(Ne.end, t.Integer, "to_int");
        if (u < 0 && (u += Ue, u < 0 && z.$raise(_("RangeError"), "" + Ne.$inspect() + " out of range")), se < 0 && (se += Ue), (!Xe || Ne.end === d) && (se += 1), u > Ue)
          for (Oe = Ue; Oe < u; Oe++)
            y[Oe] = d;
        return se < 0 ? y.splice.apply(y, [u, 0].concat(P)) : y.splice.apply(y, [u, se - u].concat(P)), Le;
      } else {
        qe === void 0 ? be = 1 : (be = Le, Le = qe, Le.$$is_array ? P = Le.$to_a() : Le["$respond_to?"]("to_ary") ? P = Le.$to_ary().$to_a() : P = [Le]);
        var re;
        if (Ne = l(Ne, _("Integer"), "to_int"), be = l(be, _("Integer"), "to_int"), Ne < 0 && (re = Ne, Ne += Ue, Ne < 0 && z.$raise(_("IndexError"), "index " + re + " too small for array; minimum " + -y.length)), be < 0 && z.$raise(_("IndexError"), "negative length (" + be + ")"), Ne > Ue)
          for (Oe = Ue; Oe < Ne; Oe++)
            y[Oe] = d;
        return qe === void 0 ? y[Ne] = Le : y.splice.apply(y, [Ne, be].concat(P)), Le;
      }
    }, -3), A(D, "$any?", function Qe(Ne) {
      var Le = Qe.$$p || d, qe = this;
      return Qe.$$p = null, qe.length === 0 ? !1 : ge(qe, Y(qe, "any?", Qe, !1, !0), "any?", [Ne], Le);
    }, -1), A(D, "$assoc", function(Ne) {
      for (var Le = this, qe = 0, y = Le.length, P; qe < y; qe++)
        if (P = Le[qe], P.length && P[0]["$=="](Ne))
          return P;
      return d;
    }), A(D, "$at", function(Ne) {
      var Le = this;
      return Ne = l(Ne, _("Integer"), "to_int"), Ne < 0 && (Ne += Le.length), Ne < 0 || Ne >= Le.length ? d : Le[Ne];
    }), A(D, "$bsearch_index", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      if (Qe.$$p = null, Ne === d)
        return Le.$enum_for("bsearch_index");
      for (var qe = 0, y = Le.length, P, be, Oe, Ue = !1, Xe = d; qe < y; ) {
        if (P = qe + Math.floor((y - qe) / 2), be = Le[P], Oe = i(Ne, be), Oe === !0)
          Xe = P, Ue = !0;
        else if (Oe === !1 || Oe === d)
          Ue = !1;
        else if (Oe.$$is_number) {
          if (Oe === 0)
            return P;
          Ue = Oe < 0;
        } else
          z.$raise(_("TypeError"), "wrong argument type " + Oe.$class() + " (must be numeric, true, false or nil)");
        Ue ? y = P : qe = P + 1;
      }
      return Xe;
    }), A(D, "$bsearch", function Qe() {
      var Ne = Qe.$$p || d, Le = this, qe = d;
      return Qe.$$p = null, Ne === d ? Le.$enum_for("bsearch") : (qe = fe(Le, "bsearch_index", [], Ne.$to_proc()), qe != null && qe.$$is_number ? Le[qe] : qe);
    }), A(D, "$cycle", function Qe(Ne) {
      var Le = Qe.$$p || d, qe = this;
      if (Qe.$$p = null, Ne == null && (Ne = d), Le === d)
        return fe(qe, "enum_for", ["cycle", Ne], function be() {
          var Oe = be.$$s == null ? this : be.$$s;
          return e(Ne["$nil?"]()) ? _(_("Float"), "INFINITY") : (Ne = Q["$coerce_to!"](Ne, _("Integer"), "to_int"), e(ae(Ne, 0)) ? Re(Oe.$enumerator_size(), Ne) : 0);
        }, { $$s: qe });
      if (e(qe["$empty?"]()) || pe(Ne, 0))
        return d;
      var y, P;
      if (Ne === d)
        for (; ; )
          for (y = 0, P = qe.length; y < P; y++)
            i(Le, qe[y]);
      else {
        if (Ne = Q["$coerce_to!"](Ne, _("Integer"), "to_int"), Ne <= 0)
          return qe;
        for (; Ne > 0; ) {
          for (y = 0, P = qe.length; y < P; y++)
            i(Le, qe[y]);
          Ne--;
        }
      }
      return qe;
    }, -1), A(D, "$clear", function() {
      var Ne = this;
      return f(Ne), Ne.splice(0, Ne.length), Ne;
    }), A(D, "$count", function Qe(Ne) {
      var Le = Qe.$$p || d, qe = this;
      return Qe.$$p = null, e(Ne !== void 0) || e(Le) ? ge(qe, Y(qe, "count", Qe, !1, !0), "count", [Ne], Le) : qe.$size();
    }, -1), A(D, "$initialize_copy", function(Ne) {
      var Le = this;
      return Le.$replace(Ne);
    }), A(D, "$collect", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      if (Qe.$$p = null, Ne === d)
        return fe(Le, "enum_for", ["collect"], function Oe() {
          var Ue = Oe.$$s == null ? this : Oe.$$s;
          return Ue.$size();
        }, { $$s: Le });
      for (var qe = [], y = 0, P = Le.length; y < P; y++) {
        var be = i(Ne, Le[y]);
        qe.push(be);
      }
      return qe;
    }), A(D, "$collect!", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      if (Qe.$$p = null, Ne === d)
        return fe(Le, "enum_for", ["collect!"], function be() {
          var Oe = be.$$s == null ? this : be.$$s;
          return Oe.$size();
        }, { $$s: Le });
      f(Le);
      for (var qe = 0, y = Le.length; qe < y; qe++) {
        var P = i(Ne, Le[qe]);
        Le[qe] = P;
      }
      return Le;
    });
    function bt(Qe, Ne) {
      return Qe === Ne || Ne === 0 ? 1 : Ne > 0 && Qe > Ne ? bt(Qe - 1, Ne - 1) + bt(Qe - 1, Ne) : 0;
    }
    A(D, "$combination", function Qe(Ne) {
      var Le = Qe.$$p || d, qe = this, y = d;
      if (Qe.$$p = null, y = Q["$coerce_to!"](Ne, _("Integer"), "to_int"), Le === d)
        return fe(qe, "enum_for", ["combination", y], function re() {
          var W = re.$$s == null ? this : re.$$s;
          return bt(W.length, y);
        }, { $$s: qe });
      var P, be, Oe, Ue, Xe, u, se;
      if (y === 0)
        t.yield1(Le, []);
      else if (y === 1)
        for (P = 0, be = qe.length; P < be; P++)
          t.yield1(Le, [qe[P]]);
      else if (y === qe.length)
        t.yield1(Le, qe.slice());
      else if (y >= 0 && y < qe.length) {
        for (Oe = [], P = 0; P <= y + 1; P++)
          Oe.push(0);
        for (Ue = [], Xe = 0, u = !1, Oe[0] = -1; !u; ) {
          for (Ue[Xe] = qe[Oe[Xe + 1]]; Xe < y - 1; )
            Xe++, se = Oe[Xe + 1] = Oe[Xe] + 1, Ue[Xe] = qe[se];
          t.yield1(Le, Ue.slice()), Xe++;
          do
            u = Xe === 0, Oe[Xe]++, Xe--;
          while (Oe[Xe + 1] + y === qe.length + Xe + 1);
        }
      }
      return qe;
    }), A(D, "$repeated_combination", function Qe(Ne) {
      var Le = Qe.$$p || d, qe = this, y = d;
      if (Qe.$$p = null, y = Q["$coerce_to!"](Ne, _("Integer"), "to_int"), Le === d)
        return fe(qe, "enum_for", ["repeated_combination", y], function be() {
          var Oe = be.$$s == null ? this : be.$$s;
          return bt(Oe.length + y - 1, y);
        }, { $$s: qe });
      function P(be, Oe, Ue, Xe) {
        if (Ue.length == be) {
          var u = Ue.slice();
          t.yield1(Le, u);
          return;
        }
        for (var se = Oe; se < Xe.length; se++)
          Ue.push(Xe[se]), P(be, se, Ue, Xe), Ue.pop();
      }
      return y >= 0 && P(y, 0, [], qe), qe;
    }), A(D, "$compact", function() {
      for (var Ne = this, Le = [], qe = 0, y = Ne.length, P; qe < y; qe++)
        (P = Ne[qe]) !== d && Le.push(P);
      return Le;
    }), A(D, "$compact!", function() {
      var Ne = this;
      f(Ne);
      for (var Le = Ne.length, qe = 0, y = Ne.length; qe < y; qe++)
        Ne[qe] === d && (Ne.splice(qe, 1), y--, qe--);
      return Ne.length === Le ? d : Ne;
    }), A(D, "$concat", function(Ne) {
      var Le, qe, y = this;
      return Le = C(arguments), qe = Le, f(y), qe = fe(qe, "map", [], function P(be) {
        var Oe = P.$$s == null ? this : P.$$s;
        return be == null && (be = d), be = Te(_("Array"), be) ? be.$to_a() : l(be, _("Array"), "to_ary").$to_a(), e(be["$equal?"](Oe)) && (be = be.$dup()), be;
      }, { $$s: y }), fe(qe, "each", [], function P(be) {
        var Oe = P.$$s == null ? this : P.$$s;
        be == null && (be = d);
        for (var Ue = 0, Xe = be.length; Ue < Xe; Ue++)
          Oe.push(be[Ue]);
      }, { $$s: y }), y;
    }, -1), A(D, "$delete", function Qe(Ne) {
      var Le = Qe.$$p || d, qe = this;
      Qe.$$p = null;
      for (var y = qe.length, P = 0, be = y; P < be; P++)
        qe[P]["$=="](Ne) && (f(qe), qe.splice(P, 1), be--, P--);
      return qe.length === y ? Le !== d ? t.yieldX(Le, []) : d : Ne;
    }), A(D, "$delete_at", function(Ne) {
      var Le = this;
      if (f(Le), Ne = l(Ne, _("Integer"), "to_int"), Ne < 0 && (Ne += Le.length), Ne < 0 || Ne >= Le.length)
        return d;
      var qe = Le[Ne];
      return Le.splice(Ne, 1), qe;
    }), A(D, "$delete_if", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      return Qe.$$p = null, Ne === d ? fe(Le, "enum_for", ["delete_if"], function qe() {
        var y = qe.$$s == null ? this : qe.$$s;
        return y.$size();
      }, { $$s: Le }) : (f(Le), dt(Le, r, Ne), Le);
    }), A(D, "$difference", function(Ne) {
      var Le, qe, y = this;
      return Le = C(arguments), qe = Le, fe(qe, "reduce", [y.$to_a().$dup()], function(be, Oe) {
        return be == null && (be = d), Oe == null && (Oe = d), Ce(be, Oe);
      });
    }, -1), A(D, "$dig", function(Ne, Le) {
      var qe, y, P = this, be = d;
      return qe = C(arguments, 1), y = qe, be = P["$[]"](Ne), be === d || y.length === 0 ? be : (e(be["$respond_to?"]("dig")) || z.$raise(_("TypeError"), "" + be.$class() + " does not have #dig method"), fe(be, "dig", J(y)));
    }, -2), A(D, "$drop", function(Ne) {
      var Le = this;
      return Ne = l(Ne, _("Integer"), "to_int"), Ne < 0 && z.$raise(_("ArgumentError")), Le.slice(Ne);
    }), A(D, "$dup", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      return Qe.$$p = null, Le.$$class === t.Array && Le.$$class.$allocate.$$pristine && Le.$copy_instance_variables.$$pristine && Le.$initialize_dup.$$pristine ? Le.slice(0) : ge(Le, Y(Le, "dup", Qe, !1, !0), "dup", [], Ne);
    }), A(D, "$each", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      if (Qe.$$p = null, Ne === d)
        return fe(Le, "enum_for", ["each"], function P() {
          var be = P.$$s == null ? this : P.$$s;
          return be.$size();
        }, { $$s: Le });
      for (var qe = 0, y = Le.length; qe < y; qe++)
        i(Ne, Le[qe]);
      return Le;
    }), A(D, "$each_index", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      if (Qe.$$p = null, Ne === d)
        return fe(Le, "enum_for", ["each_index"], function P() {
          var be = P.$$s == null ? this : P.$$s;
          return be.$size();
        }, { $$s: Le });
      for (var qe = 0, y = Le.length; qe < y; qe++)
        i(Ne, qe);
      return Le;
    }), A(D, "$empty?", function() {
      var Ne = this;
      return Ne.length === 0;
    }), A(D, "$eql?", function(Ne) {
      var Le = this, qe = {};
      function y(P, be) {
        var Oe, Ue, Xe, u;
        if (!be.$$is_array || (be = be.$to_a(), P.length !== be.length))
          return !1;
        for (qe[P.$object_id()] = !0, Oe = 0, Ue = P.length; Oe < Ue; Oe++)
          if (Xe = P[Oe], u = be[Oe], Xe.$$is_array) {
            if (u.$$is_array && u.length !== Xe.length || !qe.hasOwnProperty(Xe.$object_id()) && !y(Xe, u))
              return !1;
          } else if (!Xe["$eql?"](u))
            return !1;
        return !0;
      }
      return y(Le, Ne);
    }), A(D, "$fetch", function Qe(Ne, Le) {
      var qe = Qe.$$p || d, y = this;
      Qe.$$p = null;
      var P = Ne;
      if (Ne = l(Ne, _("Integer"), "to_int"), Ne < 0 && (Ne += y.length), Ne >= 0 && Ne < y.length)
        return y[Ne];
      if (qe !== d && Le != null && y.$warn("warning: block supersedes default value argument"), qe !== d)
        return qe(P);
      if (Le != null)
        return Le;
      y.length === 0 ? z.$raise(_("IndexError"), "index " + P + " outside of array bounds: 0...0") : z.$raise(_("IndexError"), "index " + P + " outside of array bounds: -" + y.length + "..." + y.length);
    }, -2), A(D, "$fill", function Qe(Ne) {
      var Le = Qe.$$p || d, qe, y, P, be, Oe = this, Ue = d, Xe = d, u = d, se = d, re = d;
      Qe.$$p = null, qe = C(arguments), y = qe, f(Oe);
      var W, $e;
      if (e(Le) ? (e(y.length > 2) && z.$raise(_("ArgumentError"), "wrong number of arguments (" + y.$length() + " for 0..2)"), be = y, P = R(be), Ue = P[0] == null ? d : P[0], Xe = P[1] == null ? d : P[1]) : (e(y.length == 0) ? z.$raise(_("ArgumentError"), "wrong number of arguments (0 for 1..3)") : e(y.length > 3) && z.$raise(_("ArgumentError"), "wrong number of arguments (" + y.$length() + " for 1..3)"), be = y, P = R(be), u = P[0] == null ? d : P[0], Ue = P[1] == null ? d : P[1], Xe = P[2] == null ? d : P[2]), Te(_("Range"), Ue)) {
        if (e(Xe) && z.$raise(_("TypeError"), "length invalid with range"), se = Ue.begin === d ? 0 : l(Ue.begin, _("Integer"), "to_int"), e(se < 0) && (se += this.length), e(se < 0) && z.$raise(_("RangeError"), "" + Ue.$inspect() + " out of range"), re = Ue.end === d ? -1 : l(Ue.end, _("Integer"), "to_int"), e(re < 0) && (re += this.length), e(Ue["$exclude_end?"]()) || (re += 1), e(re <= se))
          return Oe;
      } else if (e(Ue))
        if (se = l(Ue, _("Integer"), "to_int"), e(se < 0) && (se += this.length), e(se < 0) && (se = 0), e(Xe)) {
          if (re = l(Xe, _("Integer"), "to_int"), e(re == 0))
            return Oe;
          re += se;
        } else
          re = this.length;
      else
        se = 0, re = this.length;
      if (e(se > this.length))
        for (W = this.length; W < re; W++)
          Oe[W] = d;
      if (e(re > this.length) && (this.length = re), e(Le))
        for (this.length; se < re; se++)
          $e = Le(se), Oe[se] = $e;
      else
        for (this.length; se < re; se++)
          Oe[se] = u;
      return Oe;
    }, -1), A(D, "$first", function(Ne) {
      var Le = this;
      return Ne == null ? Le.length === 0 ? d : Le[0] : (Ne = l(Ne, _("Integer"), "to_int"), Ne < 0 && z.$raise(_("ArgumentError"), "negative array size"), Le.slice(0, Ne));
    }, -1), A(D, "$flatten", function(Ne) {
      var Le = this;
      function qe(y, P) {
        var be = [], Oe, Ue, Xe, u;
        for (y = y.$to_a(), Oe = 0, Ue = y.length; Oe < Ue; Oe++) {
          if (Xe = y[Oe], !c(Xe, "$to_ary", !0)) {
            be.push(Xe);
            continue;
          }
          if (u = Xe.$to_ary(), u === d) {
            be.push(Xe);
            continue;
          }
          switch (u.$$is_array || z.$raise(_("TypeError")), u === Le && z.$raise(_("ArgumentError")), P) {
            case void 0:
              be = be.concat(qe(u));
              break;
            case 0:
              be.push(u);
              break;
            default:
              be.push.apply(be, qe(u, P - 1));
          }
        }
        return be;
      }
      return Ne !== void 0 && (Ne = l(Ne, _("Integer"), "to_int")), qe(Le, Ne);
    }, -1), A(D, "$flatten!", function(Ne) {
      var Le = this;
      f(Le);
      var qe = Le.$flatten(Ne);
      if (Le.length == qe.length) {
        for (var y = 0, P = Le.length; y < P && Le[y] === qe[y]; y++)
          ;
        if (y == P)
          return d;
      }
      return Le.$replace(qe), Le;
    }, -1), A(D, "$freeze", function() {
      var Ne = this;
      return e(Ne["$frozen?"]()) ? Ne : m(Ne);
    }), A(D, "$hash", function() {
      var Ne = this, Le = n === void 0, qe = ["A"], y = Ne.$object_id(), P, be, Oe;
      try {
        if (Le && (n = /* @__PURE__ */ Object.create(null)), n[y])
          return "self";
        for (Oe in n)
          if (P = n[Oe], Ne["$eql?"](P))
            return "self";
        for (n[y] = Ne, be = 0; be < Ne.length; be++)
          P = Ne[be], qe.push(P.$hash());
        return qe.join(",");
      } finally {
        Le && (n = void 0);
      }
    }), A(D, "$include?", function(Ne) {
      for (var Le = this, qe = 0, y = Le.length; qe < y; qe++)
        if (Le[qe]["$=="](Ne))
          return !0;
      return !1;
    }), A(D, "$index", function Qe(Ne) {
      var Le = Qe.$$p || d, qe = this;
      Qe.$$p = null;
      var y, P, be;
      if (Ne != null && Le !== d && qe.$warn("warning: given block not used"), Ne != null) {
        for (y = 0, P = qe.length; y < P; y++)
          if (qe[y]["$=="](Ne))
            return y;
      } else if (Le !== d) {
        for (y = 0, P = qe.length; y < P; y++)
          if (be = Le(qe[y]), be !== !1 && be !== d)
            return y;
      } else
        return qe.$enum_for("index");
      return d;
    }, -1), A(D, "$insert", function(Ne, Le) {
      var qe, y, P = this;
      if (qe = C(arguments, 1), y = qe, f(P), Ne = l(Ne, _("Integer"), "to_int"), y.length > 0) {
        if (Ne < 0 && (Ne += P.length + 1, Ne < 0 && z.$raise(_("IndexError"), "" + Ne + " is out of bounds")), Ne > P.length)
          for (var be = P.length; be < Ne; be++)
            P.push(d);
        P.splice.apply(P, [Ne, 0].concat(y));
      }
      return P;
    }, -2);
    var Tt = [];
    A(D, "$inspect", function() {
      var Ne = this, Le = [], qe = Ne.$__id__(), y = !0;
      return function() {
        try {
          if (Tt.indexOf(qe) !== -1)
            return y = !1, "[...]";
          Tt.push(qe);
          for (var P = 0, be = Ne.length; P < be; P++) {
            var Oe = Ne["$[]"](P);
            Le.push(Me("Opal").$inspect(Oe));
          }
          return "[" + Le.join(", ") + "]";
        } finally {
          y && Tt.pop();
        }
      }();
    }), A(D, "$intersection", function(Ne) {
      var Le, qe, y = this;
      return Le = C(arguments), qe = Le, fe(qe, "reduce", [y.$to_a().$dup()], function(be, Oe) {
        return be == null && (be = d), Oe == null && (Oe = d), be["$&"](Oe);
      });
    }, -1), A(D, "$intersect?", function(Ne) {
      var Le = this;
      return Le.$intersection(Ne)["$empty?"]()["$!"]();
    }), A(D, "$join", function(Ne) {
      var Le = this;
      if (ve[","] == null && (ve[","] = d), Ne == null && (Ne = d), e(Le.length === 0))
        return "";
      e(Ne === d) && (Ne = ve[","]);
      var qe = [], y, P, be, Oe;
      for (y = 0, P = Le.length; y < P; y++) {
        if (be = Le[y], c(be, "$to_str") && (Oe = be.$to_str(), Oe !== d)) {
          qe.push(Oe.$to_s());
          continue;
        }
        if (c(be, "$to_ary") && (Oe = be.$to_ary(), Oe === Le && z.$raise(_("ArgumentError")), Oe !== d)) {
          qe.push(Oe.$join(Ne));
          continue;
        }
        if (c(be, "$to_s") && (Oe = be.$to_s(), Oe !== d)) {
          qe.push(Oe);
          continue;
        }
        z.$raise(_("NoMethodError").$new("" + Me("Opal").$inspect(Le.$item()) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
      }
      return Ne === d ? qe.join("") : qe.join(Q["$coerce_to!"](Ne, _("String"), "to_str").$to_s());
    }, -1), A(D, "$keep_if", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      return Qe.$$p = null, Ne === d ? fe(Le, "enum_for", ["keep_if"], function qe() {
        var y = qe.$$s == null ? this : qe.$$s;
        return y.$size();
      }, { $$s: Le }) : (f(Le), dt(Le, e, Ne), Le);
    }), A(D, "$last", function(Ne) {
      var Le = this;
      return Ne == null ? Le.length === 0 ? d : Le[Le.length - 1] : (Ne = l(Ne, _("Integer"), "to_int"), Ne < 0 && z.$raise(_("ArgumentError"), "negative array size"), Ne > Le.length && (Ne = Le.length), Le.slice(Le.length - Ne, Le.length));
    }, -1), A(D, "$length", function() {
      var Ne = this;
      return Ne.length;
    }), A(D, "$max", function Qe(Ne) {
      var Le = Qe.$$p || d, qe = this;
      return Qe.$$p = null, fe(qe.$each(), "max", [Ne], Le.$to_proc());
    }, -1), A(D, "$min", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      return Qe.$$p = null, fe(Le.$each(), "min", [], Ne.$to_proc());
    });
    function yt(Qe, Ne) {
      for (var Le = Ne >= 0 ? 1 : 0; Ne; )
        Le *= Qe, Qe--, Ne--;
      return Le;
    }
    return A(D, "$permutation", function Qe(Ne) {
      var Le = Qe.$$p || d, qe = this, y = d, P = d;
      if (Qe.$$p = null, Le === d)
        return fe(qe, "enum_for", ["permutation", Ne], function u() {
          var se = u.$$s == null ? this : u.$$s;
          return yt(se.length, Ne === void 0 ? se.length : Ne);
        }, { $$s: qe });
      var be, Oe, Ue;
      if (Ne === void 0 ? Ne = qe.length : Ne = l(Ne, _("Integer"), "to_int"), !(Ne < 0 || qe.length < Ne))
        if (Ne === 0)
          t.yield1(Le, []);
        else if (Ne === 1)
          for (var Xe = 0; Xe < qe.length; Xe++)
            t.yield1(Le, [qe[Xe]]);
        else
          y = Me("Array").$new(Ne), P = Me("Array").$new(qe.length, !1), be = function(u, se, re, W, $e) {
            qe = this;
            for (var S = 0; S < qe.length; S++)
              if (W["$[]"](S)["$!"]())
                if (se[re] = S, re < u - 1)
                  W[S] = !0, be.call(qe, u, se, re + 1, W, $e), W[S] = !1;
                else {
                  Ue = [];
                  for (var Z = 0; Z < se.length; Z++)
                    Ue.push(qe[se[Z]]);
                  i($e, Ue);
                }
          }, Le !== d ? (Oe = qe.slice(), be.call(Oe, Ne, y, 0, P, Le)) : be.call(qe, Ne, y, 0, P, Le);
      return qe;
    }, -1), A(D, "$repeated_permutation", function Qe(Ne) {
      var Le = Qe.$$p || d, qe = this, y = d;
      if (Qe.$$p = null, y = Q["$coerce_to!"](Ne, _("Integer"), "to_int"), Le === d)
        return fe(qe, "enum_for", ["repeated_permutation", y], function be() {
          var Oe = be.$$s == null ? this : be.$$s;
          return e(F(y, 0)) ? Oe.$size()["$**"](y) : 0;
        }, { $$s: qe });
      function P(be, Oe, Ue) {
        if (Oe.length == be) {
          var Xe = Oe.slice();
          t.yield1(Le, Xe);
          return;
        }
        for (var u = 0; u < Ue.length; u++)
          Oe.push(Ue[u]), P(be, Oe, Ue), Oe.pop();
      }
      return P(y, [], qe.slice()), qe;
    }), A(D, "$pop", function(Ne) {
      var Le = this;
      return f(Le), e(Ne === void 0) ? e(Le.length === 0) ? d : Le.pop() : (Ne = l(Ne, _("Integer"), "to_int"), e(Ne < 0) && z.$raise(_("ArgumentError"), "negative array size"), e(Le.length === 0) ? [] : e(Ne === 1) ? [Le.pop()] : e(Ne > Le.length) ? Le.splice(0, Le.length) : Le.splice(Le.length - Ne, Le.length));
    }, -1), A(D, "$product", function Qe(Ne) {
      var Le = Qe.$$p || d, qe, y, P = this;
      Qe.$$p = null, qe = C(arguments), y = qe;
      var be = Le !== d ? null : [], Oe = y.length + 1, Ue = new Array(Oe), Xe = new Array(Oe), u = new Array(Oe), se, re, W, $e, S = 1;
      for (u[0] = P, se = 1; se < Oe; se++)
        u[se] = l(y[se - 1], _("Array"), "to_ary");
      for (se = 0; se < Oe; se++) {
        if ($e = u[se].length, $e === 0)
          return be || P;
        S *= $e, S > 2147483647 && z.$raise(_("RangeError"), "too big to product"), Xe[se] = $e, Ue[se] = 0;
      }
      e:
        for (; ; ) {
          for (W = [], se = 0; se < Oe; se++)
            W.push(u[se][Ue[se]]);
          for (be ? be.push(W) : t.yield1(Le, W), re = Oe - 1, Ue[re]++; Ue[re] === Xe[re]; ) {
            if (Ue[re] = 0, --re < 0)
              break e;
            Ue[re]++;
          }
        }
      return be || P;
    }, -1), A(D, "$push", function(Ne) {
      var Le, qe, y = this;
      Le = C(arguments), qe = Le, f(y);
      for (var P = 0, be = qe.length; P < be; P++)
        y.push(qe[P]);
      return y;
    }, -1), A(D, "$rassoc", function(Ne) {
      for (var Le = this, qe = 0, y = Le.length, P; qe < y; qe++)
        if (P = Le[qe], P.length && P[1] !== void 0 && P[1]["$=="](Ne))
          return P;
      return d;
    }), A(D, "$reject", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      if (Qe.$$p = null, Ne === d)
        return fe(Le, "enum_for", ["reject"], function Oe() {
          var Ue = Oe.$$s == null ? this : Oe.$$s;
          return Ue.$size();
        }, { $$s: Le });
      for (var qe = [], y = 0, P = Le.length, be; y < P; y++)
        be = Ne(Le[y]), (be === !1 || be === d) && qe.push(Le[y]);
      return qe;
    }), A(D, "$reject!", function Qe() {
      var Ne = Qe.$$p || d, Le = this, qe = d;
      return Qe.$$p = null, Ne === d ? fe(Le, "enum_for", ["reject!"], function y() {
        var P = y.$$s == null ? this : y.$$s;
        return P.$size();
      }, { $$s: Le }) : (f(Le), qe = Le.$length(), fe(Le, "delete_if", [], Ne.$to_proc()), pe(Le.$length(), qe) ? d : Le);
    }), A(D, "$replace", function(Ne) {
      var Le = this;
      return f(Le), Ne = Te(_("Array"), Ne) ? Ne.$to_a() : l(Ne, _("Array"), "to_ary").$to_a(), Le.splice(0, Le.length), Le.push.apply(Le, Ne), Le;
    }), A(D, "$reverse", function() {
      var Ne = this;
      return Ne.slice(0).reverse();
    }), A(D, "$reverse!", function() {
      var Ne = this;
      return f(Ne), Ne.reverse();
    }), A(D, "$reverse_each", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      return Qe.$$p = null, Ne === d ? fe(Le, "enum_for", ["reverse_each"], function qe() {
        var y = qe.$$s == null ? this : qe.$$s;
        return y.$size();
      }, { $$s: Le }) : (fe(Le.$reverse(), "each", [], Ne.$to_proc()), Le);
    }), A(D, "$rindex", function Qe(Ne) {
      var Le = Qe.$$p || d, qe = this;
      Qe.$$p = null;
      var y, P;
      if (Ne != null && Le !== d && qe.$warn("warning: given block not used"), Ne != null) {
        for (y = qe.length - 1; y >= 0 && !(y >= qe.length); y--)
          if (qe[y]["$=="](Ne))
            return y;
      } else if (Le !== d) {
        for (y = qe.length - 1; y >= 0 && !(y >= qe.length); y--)
          if (P = Le(qe[y]), P !== !1 && P !== d)
            return y;
      } else if (Ne == null)
        return qe.$enum_for("rindex");
      return d;
    }, -1), A(D, "$rotate", function(Ne) {
      var Le = this;
      Ne == null && (Ne = 1);
      var qe, y, P, be;
      return Ne = l(Ne, _("Integer"), "to_int"), Le.length === 1 ? Le.slice() : Le.length === 0 ? [] : (qe = Le.slice(), y = Ne % qe.length, P = qe.slice(y), be = qe.slice(0, y), P.concat(be));
    }, -1), A(D, "$rotate!", function(Ne) {
      var Le = this, qe = d;
      return Ne == null && (Ne = 1), f(Le), Le.length === 0 || Le.length === 1 ? Le : (Ne = l(Ne, _("Integer"), "to_int"), qe = Le.$rotate(Ne), Le.$replace(qe));
    }, -1), function(Qe, Ne) {
      var Le = b(Qe, Ne, "SampleRandom"), qe = Le.$$prototype;
      return qe.rng = d, A(Le, "$initialize", ne("rng")), A(Le, "$rand", function(P) {
        var be = this, Oe = d;
        return Oe = l(be.rng.$rand(P), _("Integer"), "to_int"), e(Oe < 0) && z.$raise(_("RangeError"), "random value must be >= 0"), e(Oe < P) || z.$raise(_("RangeError"), "random value must be less than Array size"), Oe;
      });
    }(D, null), A(D, "$sample", function(Ne, Le) {
      var qe = this, y = d, P = d;
      if (e(Ne === void 0))
        return qe.$at(z.$rand(qe.length));
      if (e(Le === void 0) ? e(y = Q["$coerce_to?"](Ne, _("Hash"), "to_hash")) ? (Le = y, Ne = d) : (Le = d, Ne = l(Ne, _("Integer"), "to_int")) : (Ne = l(Ne, _("Integer"), "to_int"), Le = l(Le, _("Hash"), "to_hash")), e(Ne) && e(Ne < 0) && z.$raise(_("ArgumentError"), "count must be greater than 0"), e(Le) && (P = Le["$[]"]("random")), P = e(P) && e(P["$respond_to?"]("rand")) ? Me("SampleRandom").$new(P) : z, !e(Ne))
        return qe[P.$rand(qe.length)];
      var be, Oe, Ue, Xe, u, se, re, W;
      switch (Ne > qe.length && (Ne = qe.length), Ne) {
        case 0:
          return [];
        case 1:
          return [qe[P.$rand(qe.length)]];
        case 2:
          return Xe = P.$rand(qe.length), u = P.$rand(qe.length - 1), Xe <= u && u++, [qe[Xe], qe[u]];
        default:
          if (qe.length / Ne > 3) {
            for (be = !1, Oe = 0, Ue = Me("Array").$new(Ne), Xe = 1, Ue[0] = P.$rand(qe.length); Xe < Ne; ) {
              for (se = P.$rand(qe.length), u = 0; u < Xe; ) {
                for (; se === Ue[u]; ) {
                  if (Oe++, Oe > 100) {
                    be = !0;
                    break;
                  }
                  se = P.$rand(qe.length);
                }
                if (be)
                  break;
                u++;
              }
              if (be)
                break;
              Ue[Xe] = se, Xe++;
            }
            if (!be) {
              for (Xe = 0; Xe < Ne; )
                Ue[Xe] = qe[Ue[Xe]], Xe++;
              return Ue;
            }
          }
          Ue = qe.slice();
          for (var $e = 0; $e < Ne; $e++)
            re = P.$rand(qe.length - $e) + $e, W = Ue[$e], Ue[$e] = Ue[re], Ue[re] = W;
          return Ne === qe.length ? Ue : Ue["$[]"](0, Ne);
      }
    }, -1), A(D, "$select", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      if (Qe.$$p = null, Ne === d)
        return fe(Le, "enum_for", ["select"], function Ue() {
          var Xe = Ue.$$s == null ? this : Ue.$$s;
          return Xe.$size();
        }, { $$s: Le });
      for (var qe = [], y = 0, P = Le.length, be, Oe; y < P; y++)
        be = Le[y], Oe = i(Ne, be), e(Oe) && qe.push(be);
      return qe;
    }), A(D, "$select!", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      if (Qe.$$p = null, Ne === d)
        return fe(Le, "enum_for", ["select!"], function y() {
          var P = y.$$s == null ? this : y.$$s;
          return P.$size();
        }, { $$s: Le });
      f(Le);
      var qe = Le.length;
      return fe(Le, "keep_if", [], Ne.$to_proc()), Le.length === qe ? d : Le;
    }), A(D, "$shift", function(Ne) {
      var Le = this;
      return f(Le), e(Ne === void 0) ? e(Le.length === 0) ? d : Je(Le) : (Ne = l(Ne, _("Integer"), "to_int"), e(Ne < 0) && z.$raise(_("ArgumentError"), "negative array size"), e(Le.length === 0) ? [] : Le.splice(0, Ne));
    }, -1), A(D, "$shuffle", function(Ne) {
      var Le = this;
      return Le.$dup().$to_a()["$shuffle!"](Ne);
    }, -1), A(D, "$shuffle!", function(Ne) {
      var Le = this;
      f(Le);
      var qe, y = Le.length, P, be;
      for (Ne !== void 0 && (Ne = Q["$coerce_to?"](Ne, _("Hash"), "to_hash"), Ne !== d && (Ne = Ne["$[]"]("random"), Ne !== d && Ne["$respond_to?"]("rand") && (qe = Ne))); y; )
        qe ? (P = qe.$rand(y).$to_int(), P < 0 && z.$raise(_("RangeError"), "random number too small " + P), P >= y && z.$raise(_("RangeError"), "random number too big " + P)) : P = Le.$rand(y), be = Le[--y], Le[y] = Le[P], Le[P] = be;
      return Le;
    }, -1), A(D, "$slice!", function(Ne, Le) {
      var qe = this, y = d, P = d, be = d, Oe = d, Ue = d;
      if (f(qe), y = d, e(Le === void 0))
        if (Te(_("Range"), Ne)) {
          P = Ne, y = qe["$[]"](P), be = P.begin === d ? 0 : l(P.begin, _("Integer"), "to_int"), Oe = P.end === d ? -1 : l(P.end, _("Integer"), "to_int"), be < 0 && (be += qe.length), Oe < 0 ? Oe += qe.length : Oe >= qe.length && (Oe = qe.length - 1, P.excl && (Oe += 1));
          var Xe = Oe - be;
          P.excl && P.end !== d ? Oe -= 1 : Xe += 1, be < qe.length && be >= 0 && Oe < qe.length && Oe >= 0 && Xe > 0 && qe.splice(be, Xe);
        } else {
          if (Ue = l(Ne, _("Integer"), "to_int"), Ue < 0 && (Ue += qe.length), Ue < 0 || Ue >= qe.length)
            return d;
          y = qe[Ue], Ue === 0 ? qe.shift() : qe.splice(Ue, 1);
        }
      else {
        if (Ue = l(Ne, _("Integer"), "to_int"), Le = l(Le, _("Integer"), "to_int"), Le < 0)
          return d;
        y = qe["$[]"](Ue, Le), Ue < 0 && (Ue += qe.length), Ue + Le > qe.length && (Le = qe.length - Ue), Ue < qe.length && Ue >= 0 && qe.splice(Ue, Le);
      }
      return y;
    }, -2), A(D, "$sort", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      return Qe.$$p = null, e(Le.length > 1) ? (Ne === d && (Ne = function(qe, y) {
        return qe["$<=>"](y);
      }), Le.slice().sort(function(qe, y) {
        var P = Ne(qe, y);
        return P === d && z.$raise(_("ArgumentError"), "comparison of " + qe.$inspect() + " with " + y.$inspect() + " failed"), ae(P, 0) ? 1 : H(P, 0) ? -1 : 0;
      })) : Le;
    }), A(D, "$sort!", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      Qe.$$p = null, f(Le);
      var qe;
      Ne !== d ? qe = fe(Le.slice(), "sort", [], Ne.$to_proc()) : qe = Le.slice().$sort(), Le.length = 0;
      for (var y = 0, P = qe.length; y < P; y++)
        Le.push(qe[y]);
      return Le;
    }), A(D, "$sort_by!", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      return Qe.$$p = null, Ne === d ? fe(Le, "enum_for", ["sort_by!"], function qe() {
        var y = qe.$$s == null ? this : qe.$$s;
        return y.$size();
      }, { $$s: Le }) : (f(Le), Le.$replace(fe(Le, "sort_by", [], Ne.$to_proc())));
    }), A(D, "$take", function(Ne) {
      var Le = this;
      return Ne < 0 && z.$raise(_("ArgumentError")), Le.slice(0, Ne);
    }), A(D, "$take_while", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      Qe.$$p = null;
      for (var qe = [], y = 0, P = Le.length, be, Oe; y < P; y++) {
        if (be = Le[y], Oe = Ne(be), Oe === !1 || Oe === d)
          return qe;
        qe.push(be);
      }
      return qe;
    }), A(D, "$to_a", function() {
      var Ne = this;
      return Ne.$$class === t.Array ? Ne : t.Array.$new(Ne);
    }), A(D, "$to_ary", we), A(D, "$to_h", function Qe() {
      var Ne = Qe.$$p || d, Le = this, qe = d;
      Qe.$$p = null, qe = Le, Ne !== d && (qe = fe(qe, "map", [], Ne.$to_proc()));
      var y, P = qe.length, be, Oe, Ue, Xe = ce([], {});
      for (y = 0; y < P; y++)
        be = Q["$coerce_to?"](qe[y], _("Array"), "to_ary"), be.$$is_array || z.$raise(_("TypeError"), "wrong element type " + be.$class() + " at " + y + " (expected array)"), be.length !== 2 && z.$raise(_("ArgumentError"), "wrong array length at " + y + " (expected 2, was " + be.$length() + ")"), Oe = be[0], Ue = be[1], o(Xe, Oe, Ue);
      return Xe;
    }), A(D, "$transpose", function() {
      var Ne = this, Le = d, qe = d;
      return e(Ne["$empty?"]()) ? [] : (Le = [], qe = d, fe(Ne, "each", [], function(P) {
        var be = d;
        return P == null && (P = d), P = Te(_("Array"), P) ? P.$to_a() : l(P, _("Array"), "to_ary").$to_a(), qe = e(be = qe) ? be : P.length, _e(P.length, qe) && z.$raise(_("IndexError"), "element size differs (" + P.length + " should be " + qe + ")"), fe(P.length, "times", [], function(Ue) {
          var Xe, u = d;
          return Ue == null && (Ue = d), u = e(be = Le["$[]"](Ue)) ? be : (Xe = [Ue, []], fe(Le, "[]=", Xe), Xe[Xe.length - 1]), u["$<<"](P.$at(Ue));
        });
      }), Le);
    }), A(D, "$union", function(Ne) {
      var Le, qe, y = this;
      return Le = C(arguments), qe = Le, fe(qe, "reduce", [y.$uniq()], function(be, Oe) {
        return be == null && (be = d), Oe == null && (Oe = d), be["$|"](Oe);
      });
    }, -1), A(D, "$uniq", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      Qe.$$p = null;
      var qe = ce([], {}), y, P, be, Oe;
      if (Ne === d)
        for (y = 0, P = Le.length; y < P; y++)
          be = Le[y], s(qe, be) === void 0 && o(qe, be, be);
      else
        for (y = 0, P = Le.length; y < P; y++)
          be = Le[y], Oe = i(Ne, be), s(qe, Oe) === void 0 && o(qe, Oe, be);
      return qe.$values();
    }), A(D, "$uniq!", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      Qe.$$p = null, f(Le);
      var qe = Le.length, y = ce([], {}), P, be, Oe, Ue;
      for (P = 0, be = qe; P < be; P++) {
        if (Oe = Le[P], Ue = Ne === d ? Oe : i(Ne, Oe), s(y, Ue) === void 0) {
          o(y, Ue, Oe);
          continue;
        }
        Le.splice(P, 1), be--, P--;
      }
      return Le.length === qe ? d : Le;
    }), A(D, "$unshift", function(Ne) {
      var Le, qe, y = this;
      Le = C(arguments), qe = Le, f(y);
      var P = y.length, be = qe.length;
      if (be == 0)
        return y;
      for (var Oe = P - be, Ue = 0; Ue < be; Ue++)
        y.push(y[Oe + Ue]);
      for (var Xe = P - 1; Xe - be >= 0; )
        y[Xe] = y[Xe - be], Xe--;
      for (var u = 0; u < be; u++)
        y[u] = qe[u];
      return y;
    }, -1), A(D, "$values_at", function(Ne) {
      var Le, qe, y = this, P = d;
      return Le = C(arguments), qe = Le, P = [], fe(qe, "each", [], function be(Oe) {
        var Ue = be.$$s == null ? this : be.$$s, Xe = d, u = d, se = d;
        return Oe == null && (Oe = d), e(Oe["$is_a?"](_("Range"))) ? (Xe = Oe.$end() === d ? -1 : l(Oe.$end(), _("Integer"), "to_int"), u = Oe.$begin() === d ? 0 : l(Oe.$begin(), _("Integer"), "to_int"), u < 0 ? (u = u + Ue.length, d) : (Xe < 0 && (Xe = Xe + Ue.length), Oe["$exclude_end?"]() && Oe.$end() !== d && Xe--, Xe < u ? d : fe(u, "upto", [Xe], function re(W) {
          var $e = re.$$s == null ? this : re.$$s;
          return W == null && (W = d), P["$<<"]($e.$at(W));
        }, { $$s: Ue }))) : (se = l(Oe, _("Integer"), "to_int"), P["$<<"](Ue.$at(se)));
      }, { $$s: y }), P;
    }, -1), A(D, "$zip", function Qe(Ne) {
      var Le = Qe.$$p || d, qe, y, P = this, be = d;
      Qe.$$p = null, qe = C(arguments), y = qe;
      var Oe = [], Ue = P.length, Xe, u, se, re, W;
      for (re = 0, W = y.length; re < W; re++)
        if (u = y[re], !u.$$is_array) {
          if (u.$$is_range || u.$$is_enumerator) {
            y[re] = u.$take(Ue);
            continue;
          }
          y[re] = (e(be = Q["$coerce_to?"](u, _("Array"), "to_ary")) ? be : Q["$coerce_to!"](u, _("Enumerator"), "to_enum", "each")).$to_a();
        }
      for (se = 0; se < Ue; se++) {
        for (Xe = [P[se]], re = 0, W = y.length; re < W; re++)
          u = y[re][se], u == null && (u = d), Xe[re + 1] = u;
        Oe[se] = Xe;
      }
      if (Le !== d) {
        for (se = 0; se < Ue; se++)
          t.yield1(Le, Oe[se]);
        return d;
      }
      return Oe;
    }, -1), N(D, "$inherited", function(Ne) {
      Ne.$$prototype.$to_a = function() {
        return this.slice(0, this.length);
      };
    }), A(D, "$instance_variables", function Qe() {
      var Ne = Qe.$$p || d, Le = this;
      return Qe.$$p = null, fe(ge(Le, Y(Le, "instance_variables", Qe, !1, !0), "instance_variables", [], Ne), "reject", [], function(y) {
        var P = d;
        return y == null && (y = d), e(P = /^@\d+$/.test(y)) ? P : y["$=="]("@length");
      });
    }), A(D, "$pack", function(Ne) {
      return C(arguments), z.$raise("To use Array#pack, you must first require 'corelib/array/pack'.");
    }, -1), X(D, "append", "push"), X(D, "filter", "select"), X(D, "filter!", "select!"), X(D, "map", "collect"), X(D, "map!", "collect!"), X(D, "prepend", "unshift"), X(D, "size", "length"), X(D, "slice", "[]"), X(D, "to_s", "inspect"), Q.$pristine(D.$singleton_class(), "allocate"), Q.$pristine(D, "copy_instance_variables", "initialize_dup");
  }("::", Array, h);
};
Opal.modules["corelib/hash"] = function(t) {
  var e = t.yield1, r = t.hash, n = t.hash_init, i = t.hash_get, s = t.hash_put, o = t.hash_delete, a = t.deny_frozen_access, l = t.freeze, c = t.klass, f = t.slice, m = t.Opal, b = t.Kernel, C = t.defs, N = t.def, z = t.send, A = t.rb_ge, Q = t.rb_gt, Te = t.hash2, ce = t.truthy, ge = t.to_a, Y = t.return_self, fe = t.alias, ae = t.top, Re = [], pe = t.nil, Ce = t.$$$;
  return t.add_stubs("require,include,coerce_to?,[],merge!,allocate,raise,coerce_to!,each,fetch,>=,>,==,compare_by_identity,lambda?,abs,arity,enum_for,size,respond_to?,class,dig,except!,dup,delete,new,inspect,map,to_proc,flatten,frozen?,eql?,default,default_proc,default_proc=,default=,to_h,proc,clone,select,select!,has_key?,indexes,index,length,[]=,has_value?"), ae.$require("corelib/enumerable"), function(J, R, ve) {
    var F = c(J, R, "Hash"), ne = [F].concat(ve), H = t.$r(ne);
    F.$include(Ce("Enumerable")), F.$$prototype.$$is_hash = !0, C(F, "$[]", function(X) {
      var w, h, d = this;
      w = f(arguments), h = w;
      var _, g = h.length, $;
      if (g === 1) {
        if (_ = m["$coerce_to?"](h["$[]"](0), Ce("Hash"), "to_hash"), _ !== pe)
          return d.$allocate()["$merge!"](_);
        for (h = m["$coerce_to?"](h["$[]"](0), Ce("Array"), "to_ary"), h === pe && b.$raise(Ce("ArgumentError"), "odd number of arguments for Hash"), g = h.length, _ = d.$allocate(), $ = 0; $ < g; $++)
          if (h[$].$$is_array)
            switch (h[$].length) {
              case 1:
                _.$store(h[$][0], pe);
                break;
              case 2:
                _.$store(h[$][0], h[$][1]);
                break;
              default:
                b.$raise(Ce("ArgumentError"), "invalid number of elements (" + h[$].length + " for 1..2)");
            }
        return _;
      }
      for (g % 2 !== 0 && b.$raise(Ce("ArgumentError"), "odd number of arguments for Hash"), _ = d.$allocate(), $ = 0; $ < g; $ += 2)
        _.$store(h[$], h[$ + 1]);
      return _;
    }, -1), C(F, "$allocate", function() {
      var X = this, w = new X.$$constructor();
      return n(w), w.$$none = pe, w.$$proc = pe, w;
    }), C(F, "$try_convert", function(X) {
      return m["$coerce_to?"](X, Ce("Hash"), "to_hash");
    }), N(F, "$initialize", function _e(X) {
      var w = _e.$$p || pe, h = this;
      return _e.$$p = null, a(h), X !== void 0 && w !== pe && b.$raise(Ce("ArgumentError"), "wrong number of arguments (1 for 0)"), h.$$none = X === void 0 ? pe : X, h.$$proc = w, h;
    }, -1), N(F, "$==", function(X) {
      var w = this;
      if (w === X)
        return !0;
      if (!X.$$is_hash || w.$$keys.length !== X.$$keys.length)
        return !1;
      for (var h = 0, d = w.$$keys, _ = d.length, g, $, I; h < _; h++)
        if (g = d[h], g.$$is_string ? ($ = w.$$smap[g], I = X.$$smap[g]) : ($ = g.value, I = i(X, g.key)), I === void 0 || !$["$eql?"](I))
          return !1;
      return !0;
    }), N(F, "$>=", function(X) {
      var w = this, h = pe;
      return X = m["$coerce_to!"](X, Ce("Hash"), "to_hash"), w.$$keys.length < X.$$keys.length ? !1 : (h = !0, z(X, "each", [], function d(_, g) {
        var $ = d.$$s == null ? this : d.$$s, I = pe;
        if (_ == null && (_ = pe), g == null && (g = pe), I = $.$fetch(_, null), I == null || I !== g) {
          h = !1;
          return;
        }
      }, { $$s: w }), h);
    }), N(F, "$>", function(X) {
      var w = this;
      return X = m["$coerce_to!"](X, Ce("Hash"), "to_hash"), w.$$keys.length <= X.$$keys.length ? !1 : A(w, X);
    }), N(F, "$<", function(X) {
      var w = this;
      return X = m["$coerce_to!"](X, Ce("Hash"), "to_hash"), Q(X, w);
    }), N(F, "$<=", function(X) {
      var w = this;
      return X = m["$coerce_to!"](X, Ce("Hash"), "to_hash"), A(X, w);
    }), N(F, "$[]", function(X) {
      var w = this, h = i(w, X);
      return h !== void 0 ? h : w.$default(X);
    }), N(F, "$[]=", function(X, w) {
      var h = this;
      return a(h), s(h, X, w), w;
    }), N(F, "$assoc", function(X) {
      for (var w = this, h = 0, d = w.$$keys, _ = d.length, g; h < _; h++)
        if (g = d[h], g.$$is_string) {
          if (g["$=="](X))
            return [g, w.$$smap[g]];
        } else if (g.key["$=="](X))
          return [g.key, g.value];
      return pe;
    }), N(F, "$clear", function() {
      var X = this;
      return a(X), n(X), X;
    }), N(F, "$clone", function() {
      var X = this, w = new X.$$class();
      return n(w), t.hash_clone(X, w), w;
    }), N(F, "$compact", function() {
      for (var X = this, w = r(), h = 0, d = X.$$keys, _ = d.length, g, $, I; h < _; h++)
        g = d[h], g.$$is_string ? $ = X.$$smap[g] : ($ = g.value, g = g.key), $ !== pe && s(w, g, $);
      return w;
    }), N(F, "$compact!", function() {
      var X = this;
      a(X);
      for (var w = !1, h = 0, d = X.$$keys, _ = d.length, g, $, I; h < _; h++)
        g = d[h], g.$$is_string ? $ = X.$$smap[g] : ($ = g.value, g = g.key), $ === pe && o(X, g) !== void 0 && (w = !0, _--, h--);
      return w ? X : pe;
    }), N(F, "$compare_by_identity", function() {
      var X = this;
      a(X);
      var w, h, d, _ = X.$$keys, g;
      if (X.$$by_identity)
        return X;
      if (X.$$keys.length === 0)
        return X.$$by_identity = !0, X;
      for (g = Te([], {}).$compare_by_identity(), w = 0, h = _.length; w < h; w++)
        d = _[w], d.$$is_string || (d = d.key), s(g, d, i(X, d));
      return X.$$by_identity = !0, X.$$map = g.$$map, X.$$smap = g.$$smap, X;
    }), N(F, "$compare_by_identity?", function() {
      var X = this;
      return X.$$by_identity === !0;
    }), N(F, "$default", function(X) {
      var w = this;
      return X !== void 0 && w.$$proc !== pe && w.$$proc !== void 0 ? w.$$proc.$call(w, X) : w.$$none === void 0 ? pe : w.$$none;
    }, -1), N(F, "$default=", function(X) {
      var w = this;
      return a(w), w.$$proc = pe, w.$$none = X, X;
    }), N(F, "$default_proc", function() {
      var X = this;
      return X.$$proc !== void 0 ? X.$$proc : pe;
    }), N(F, "$default_proc=", function(X) {
      var w = this;
      a(w);
      var h = X;
      return h !== pe && (h = m["$coerce_to!"](h, Ce("Proc"), "to_proc"), h["$lambda?"]() && h.$arity().$abs() !== 2 && b.$raise(Ce("TypeError"), "default_proc takes two arguments")), w.$$none = pe, w.$$proc = h, X;
    }), N(F, "$delete", function _e(X) {
      var w = _e.$$p || pe, h = this;
      _e.$$p = null, a(h);
      var d = o(h, X);
      return d !== void 0 ? d : w !== pe ? t.yield1(w, X) : pe;
    }), N(F, "$delete_if", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["delete_if"], function D() {
          var ie = D.$$s == null ? this : D.$$s;
          return ie.$size();
        }, { $$s: w });
      a(w);
      for (var h = 0, d = w.$$keys, _ = d.length, g, $, I; h < _; h++)
        g = d[h], g.$$is_string ? $ = w.$$smap[g] : ($ = g.value, g = g.key), I = X(g, $), I !== !1 && I !== pe && o(w, g) !== void 0 && (_--, h--);
      return w;
    }), N(F, "$dig", function(X, w) {
      var h, d, _ = this, g = pe;
      return h = f(arguments, 1), d = h, g = _["$[]"](X), g === pe || d.length === 0 ? g : (ce(g["$respond_to?"]("dig")) || b.$raise(Ce("TypeError"), "" + g.$class() + " does not have #dig method"), z(g, "dig", ge(d)));
    }, -2), N(F, "$each", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["each"], function I() {
          var D = I.$$s == null ? this : I.$$s;
          return D.$size();
        }, { $$s: w });
      for (var h = 0, d = w.$$keys.slice(), _ = d.length, g, $; h < _; h++)
        g = d[h], g.$$is_string ? $ = w.$$smap[g] : ($ = g.value, g = g.key), e(X, [g, $]);
      return w;
    }), N(F, "$each_key", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["each_key"], function $() {
          var I = $.$$s == null ? this : $.$$s;
          return I.$size();
        }, { $$s: w });
      for (var h = 0, d = w.$$keys.slice(), _ = d.length, g; h < _; h++)
        g = d[h], X(g.$$is_string ? g : g.key);
      return w;
    }), N(F, "$each_value", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["each_value"], function $() {
          var I = $.$$s == null ? this : $.$$s;
          return I.$size();
        }, { $$s: w });
      for (var h = 0, d = w.$$keys.slice(), _ = d.length, g; h < _; h++)
        g = d[h], X(g.$$is_string ? w.$$smap[g] : g.value);
      return w;
    }), N(F, "$empty?", function() {
      var X = this;
      return X.$$keys.length === 0;
    }), N(F, "$except", function(X) {
      var w, h, d = this;
      return w = f(arguments), h = w, z(d.$dup(), "except!", ge(h));
    }, -1), N(F, "$except!", function(X) {
      var w, h, d = this;
      return w = f(arguments), h = w, z(h, "each", [], function _(g) {
        var $ = _.$$s == null ? this : _.$$s;
        return g == null && (g = pe), $.$delete(g);
      }, { $$s: d }), d;
    }, -1), N(F, "$fetch", function _e(X, w) {
      var h = _e.$$p || pe, d = this;
      _e.$$p = null;
      var _ = i(d, X);
      return _ !== void 0 ? _ : h !== pe ? h(X) : w !== void 0 ? w : b.$raise(Ce("KeyError").$new("key not found: " + X.$inspect(), Te(["key", "receiver"], { key: X, receiver: d })));
    }, -2), N(F, "$fetch_values", function _e(X) {
      var w = _e.$$p || pe, h, d, _ = this;
      return _e.$$p = null, h = f(arguments), d = h, z(d, "map", [], function g($) {
        var I = g.$$s == null ? this : g.$$s;
        return $ == null && ($ = pe), z(I, "fetch", [$], w.$to_proc());
      }, { $$s: _ });
    }, -1), N(F, "$flatten", function(X) {
      var w = this;
      X == null && (X = 1), X = m["$coerce_to!"](X, Ce("Integer"), "to_int");
      for (var h = [], d = 0, _ = w.$$keys, g = _.length, $, I; d < g; d++) {
        if ($ = _[d], $.$$is_string ? I = w.$$smap[$] : (I = $.value, $ = $.key), h.push($), I.$$is_array) {
          if (X === 1) {
            h.push(I);
            continue;
          }
          h = h.concat(I.$flatten(X - 2));
          continue;
        }
        h.push(I);
      }
      return h;
    }, -1), N(F, "$freeze", function() {
      var X = this;
      return ce(X["$frozen?"]()) ? X : l(X);
    }), N(F, "$has_key?", function(X) {
      var w = this;
      return i(w, X) !== void 0;
    }), N(F, "$has_value?", function(X) {
      for (var w = this, h = 0, d = w.$$keys, _ = d.length, g; h < _; h++)
        if (g = d[h], (g.$$is_string ? w.$$smap[g] : g.value)["$=="](X))
          return !0;
      return !1;
    }), N(F, "$hash", function() {
      var X = this, w = t.hash_ids === void 0, h = X.$object_id(), d = ["Hash"], _, g;
      try {
        if (w && (t.hash_ids = /* @__PURE__ */ Object.create(null)), t[h])
          return "self";
        for (_ in t.hash_ids)
          if (g = t.hash_ids[_], X["$eql?"](g))
            return "self";
        t.hash_ids[h] = X;
        for (var $ = 0, I = X.$$keys, D = I.length; $ < D; $++)
          _ = I[$], _.$$is_string ? d.push([_, X.$$smap[_].$hash()]) : d.push([_.key_hash, _.value.$hash()]);
        return d.sort().join();
      } finally {
        w && (t.hash_ids = void 0);
      }
    }), N(F, "$index", function(X) {
      for (var w = this, h = 0, d = w.$$keys, _ = d.length, g, $; h < _; h++)
        if (g = d[h], g.$$is_string ? $ = w.$$smap[g] : ($ = g.value, g = g.key), $["$=="](X))
          return g;
      return pe;
    }), N(F, "$indexes", function(X) {
      var w, h, d = this;
      w = f(arguments), h = w;
      for (var _ = [], g = 0, $ = h.length, I, D; g < $; g++) {
        if (I = h[g], D = i(d, I), D === void 0) {
          _.push(d.$default());
          continue;
        }
        _.push(D);
      }
      return _;
    }, -1);
    var we;
    return N(F, "$inspect", function() {
      var X = this, w = we === void 0, h = X.$object_id(), d = [];
      return function() {
        try {
          if (w && (we = {}), we.hasOwnProperty(h))
            return "{...}";
          we[h] = !0;
          for (var _ = 0, g = X.$$keys, $ = g.length, I, D; _ < $; _++)
            I = g[_], I.$$is_string ? D = X.$$smap[I] : (D = I.value, I = I.key), I = H("Opal").$inspect(I), D = H("Opal").$inspect(D), d.push(I + "=>" + D);
          return "{" + d.join(", ") + "}";
        } finally {
          w && (we = void 0);
        }
      }();
    }), N(F, "$invert", function() {
      for (var X = this, w = r(), h = 0, d = X.$$keys, _ = d.length, g, $; h < _; h++)
        g = d[h], g.$$is_string ? $ = X.$$smap[g] : ($ = g.value, g = g.key), s(w, $, g);
      return w;
    }), N(F, "$keep_if", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["keep_if"], function D() {
          var ie = D.$$s == null ? this : D.$$s;
          return ie.$size();
        }, { $$s: w });
      a(w);
      for (var h = 0, d = w.$$keys, _ = d.length, g, $, I; h < _; h++)
        g = d[h], g.$$is_string ? $ = w.$$smap[g] : ($ = g.value, g = g.key), I = X(g, $), (I === !1 || I === pe) && o(w, g) !== void 0 && (_--, h--);
      return w;
    }), N(F, "$keys", function() {
      for (var X = this, w = [], h = 0, d = X.$$keys, _ = d.length, g; h < _; h++)
        g = d[h], g.$$is_string ? w.push(g) : w.push(g.key);
      return w;
    }), N(F, "$length", function() {
      var X = this;
      return X.$$keys.length;
    }), N(F, "$merge", function _e(X) {
      var w = _e.$$p || pe, h, d, _ = this;
      return _e.$$p = null, h = f(arguments), d = h, z(_.$dup(), "merge!", ge(d), w.$to_proc());
    }, -1), N(F, "$merge!", function _e(X) {
      var w = _e.$$p || pe, h, d, _ = this;
      _e.$$p = null, h = f(arguments), d = h, a(_);
      var g, $, I, D, ie, Me, Je, it;
      for (g = 0; g < d.length; ++g)
        if (I = m["$coerce_to!"](d[g], Ce("Hash"), "to_hash"), D = I.$$keys, ie = D.length, w === pe)
          for ($ = 0; $ < ie; $++)
            Me = D[$], Me.$$is_string ? it = I.$$smap[Me] : (it = Me.value, Me = Me.key), s(_, Me, it);
        else
          for ($ = 0; $ < ie; $++) {
            if (Me = D[$], Me.$$is_string ? it = I.$$smap[Me] : (it = Me.value, Me = Me.key), Je = i(_, Me), Je === void 0) {
              s(_, Me, it);
              continue;
            }
            s(_, Me, w(Me, Je, it));
          }
      return _;
    }, -1), N(F, "$rassoc", function(X) {
      for (var w = this, h = 0, d = w.$$keys, _ = d.length, g, $; h < _; h++)
        if (g = d[h], g.$$is_string ? $ = w.$$smap[g] : ($ = g.value, g = g.key), $["$=="](X))
          return [g, $];
      return pe;
    }), N(F, "$rehash", function() {
      var X = this;
      return a(X), t.hash_rehash(X), X;
    }), N(F, "$reject", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["reject"], function ie() {
          var Me = ie.$$s == null ? this : ie.$$s;
          return Me.$size();
        }, { $$s: w });
      for (var h = r(), d = 0, _ = w.$$keys, g = _.length, $, I, D; d < g; d++)
        $ = _[d], $.$$is_string ? I = w.$$smap[$] : (I = $.value, $ = $.key), D = X($, I), (D === !1 || D === pe) && s(h, $, I);
      return h;
    }), N(F, "$reject!", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["reject!"], function ie() {
          var Me = ie.$$s == null ? this : ie.$$s;
          return Me.$size();
        }, { $$s: w });
      a(w);
      for (var h = !1, d = 0, _ = w.$$keys, g = _.length, $, I, D; d < g; d++)
        $ = _[d], $.$$is_string ? I = w.$$smap[$] : (I = $.value, $ = $.key), D = X($, I), D !== !1 && D !== pe && o(w, $) !== void 0 && (h = !0, g--, d--);
      return h ? w : pe;
    }), N(F, "$replace", function(X) {
      var w = this;
      a(w), X = m["$coerce_to!"](X, Ce("Hash"), "to_hash"), n(w);
      for (var h = 0, d = X.$$keys, _ = d.length, g, $, I; h < _; h++)
        g = d[h], g.$$is_string ? I = X.$$smap[g] : (I = g.value, g = g.key), s(w, g, I);
      return ce(X.$default_proc()) ? w["$default_proc="](X.$default_proc()) : w["$default="](X.$default()), w;
    }), N(F, "$select", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["select"], function ie() {
          var Me = ie.$$s == null ? this : ie.$$s;
          return Me.$size();
        }, { $$s: w });
      for (var h = r(), d = 0, _ = w.$$keys, g = _.length, $, I, D; d < g; d++)
        $ = _[d], $.$$is_string ? I = w.$$smap[$] : (I = $.value, $ = $.key), D = X($, I), D !== !1 && D !== pe && s(h, $, I);
      return h;
    }), N(F, "$select!", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["select!"], function ie() {
          var Me = ie.$$s == null ? this : ie.$$s;
          return Me.$size();
        }, { $$s: w });
      a(w);
      for (var h = pe, d = 0, _ = w.$$keys, g = _.length, $, I, D; d < g; d++)
        $ = _[d], $.$$is_string ? I = w.$$smap[$] : (I = $.value, $ = $.key), D = X($, I), (D === !1 || D === pe) && (o(w, $) !== void 0 && (g--, d--), h = w);
      return h;
    }), N(F, "$shift", function() {
      var X = this;
      a(X);
      var w = X.$$keys, h;
      return w.length > 0 ? (h = w[0], h = h.$$is_string ? h : h.key, [h, o(X, h)]) : pe;
    }), N(F, "$slice", function(X) {
      var w, h, d = this;
      w = f(arguments), h = w;
      for (var _ = r(), g = 0, $ = h.length; g < $; g++) {
        var I = h[g], D = i(d, I);
        D !== void 0 && s(_, I, D);
      }
      return _;
    }, -1), N(F, "$to_a", function() {
      for (var X = this, w = [], h = 0, d = X.$$keys, _ = d.length, g, $; h < _; h++)
        g = d[h], g.$$is_string ? $ = X.$$smap[g] : ($ = g.value, g = g.key), w.push([g, $]);
      return w;
    }), N(F, "$to_h", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, X !== pe)
        return z(w, "map", [], X.$to_proc()).$to_h();
      if (w.$$class === t.Hash)
        return w;
      var h = new t.Hash();
      return n(h), t.hash_clone(w, h), h;
    }), N(F, "$to_hash", Y), N(F, "$to_proc", function() {
      var X = this;
      return z(X, "proc", [], function w(h) {
        var d = w.$$s == null ? this : w.$$s;
        return h == null && b.$raise(Ce("ArgumentError"), "no key given"), d["$[]"](h);
      }, { $$arity: -1, $$s: X });
    }), N(F, "$transform_keys", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["transform_keys"], function D() {
          var ie = D.$$s == null ? this : D.$$s;
          return ie.$size();
        }, { $$s: w });
      for (var h = r(), d = 0, _ = w.$$keys, g = _.length, $, I; d < g; d++)
        $ = _[d], $.$$is_string ? I = w.$$smap[$] : (I = $.value, $ = $.key), $ = e(X, $), s(h, $, I);
      return h;
    }), N(F, "$transform_keys!", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["transform_keys!"], function D() {
          var ie = D.$$s == null ? this : D.$$s;
          return ie.$size();
        }, { $$s: w });
      a(w);
      var h = t.slice(w.$$keys), d, _ = h.length, g, $, I;
      for (d = 0; d < _; d++)
        g = h[d], g.$$is_string ? $ = w.$$smap[g] : ($ = g.value, g = g.key), I = e(X, g), o(w, g), s(w, I, $);
      return w;
    }), N(F, "$transform_values", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["transform_values"], function D() {
          var ie = D.$$s == null ? this : D.$$s;
          return ie.$size();
        }, { $$s: w });
      for (var h = r(), d = 0, _ = w.$$keys, g = _.length, $, I; d < g; d++)
        $ = _[d], $.$$is_string ? I = w.$$smap[$] : (I = $.value, $ = $.key), I = e(X, I), s(h, $, I);
      return h;
    }), N(F, "$transform_values!", function _e() {
      var X = _e.$$p || pe, w = this;
      if (_e.$$p = null, !ce(X))
        return z(w, "enum_for", ["transform_values!"], function I() {
          var D = I.$$s == null ? this : I.$$s;
          return D.$size();
        }, { $$s: w });
      a(w);
      for (var h = 0, d = w.$$keys, _ = d.length, g, $; h < _; h++)
        g = d[h], g.$$is_string ? $ = w.$$smap[g] : ($ = g.value, g = g.key), $ = e(X, $), s(w, g, $);
      return w;
    }), N(F, "$values", function() {
      for (var X = this, w = [], h = 0, d = X.$$keys, _ = d.length, g; h < _; h++)
        g = d[h], g.$$is_string ? w.push(X.$$smap[g]) : w.push(g.value);
      return w;
    }), fe(F, "dup", "clone"), fe(F, "each_pair", "each"), fe(F, "eql?", "=="), fe(F, "filter", "select"), fe(F, "filter!", "select!"), fe(F, "include?", "has_key?"), fe(F, "indices", "indexes"), fe(F, "key", "index"), fe(F, "key?", "has_key?"), fe(F, "member?", "has_key?"), fe(F, "size", "length"), fe(F, "store", "[]="), fe(F, "to_s", "inspect"), fe(F, "update", "merge!"), fe(F, "value?", "has_value?"), fe(F, "values_at", "indexes");
  }("::", null, Re);
};
Opal.modules["corelib/number"] = function(t) {
  var e = t.klass, r = t.Opal, n = t.Kernel, i = t.def, s = t.eqeqeq, o = t.truthy, a = t.rb_gt, l = t.not, c = t.rb_lt, f = t.alias, m = t.send2, b = t.find_super, C = t.send, N = t.rb_plus, z = t.rb_minus, A = t.eqeq, Q = t.return_self, Te = t.rb_divide, ce = t.to_ary, ge = t.rb_times, Y = t.rb_le, fe = t.rb_ge, ae = t.return_val, Re = t.const_set, pe = t.top, Ce = [], J = t.nil, R = t.$$$;
  return t.add_stubs("require,bridge,raise,name,class,Float,respond_to?,coerce_to!,__coerced__,===,>,!,**,new,<,to_f,==,nan?,infinite?,enum_for,+,-,gcd,lcm,%,/,frexp,to_i,ldexp,rationalize,*,<<,to_r,truncate,-@,size,<=,>=,inspect,angle,to_s,is_a?,abs,__id__,next,coerce_to?"), pe.$require("corelib/numeric"), function(ve, F, ne) {
    var H = e(ve, F, "Number");
    r.$bridge(Number, H), t.prop(H.$$prototype, "$$is_number", !0), H.$$is_number_class = !0, function(d, _) {
      return i(d, "$allocate", function() {
        var $ = this;
        return n.$raise(R("TypeError"), "allocator undefined for " + $.$name());
      }), t.udef(d, "$new"), J;
    }(t.get_singleton_class(H)), i(H, "$coerce", function(_) {
      var g = this;
      if (_ === J)
        n.$raise(R("TypeError"), "can't convert " + _.$class() + " into Float");
      else {
        if (_.$$is_string)
          return [n.$Float(_), g];
        if (_["$respond_to?"]("to_f"))
          return [r["$coerce_to!"](_, R("Float"), "to_f"), g];
        if (_.$$is_number)
          return [_, g];
        n.$raise(R("TypeError"), "can't convert " + _.$class() + " into Float");
      }
    }), i(H, "$__id__", function() {
      var _ = this;
      return _ * 2 + 1;
    }), i(H, "$+", function(_) {
      var g = this;
      return _.$$is_number ? g + _ : g.$__coerced__("+", _);
    }), i(H, "$-", function(_) {
      var g = this;
      return _.$$is_number ? g - _ : g.$__coerced__("-", _);
    }), i(H, "$*", function(_) {
      var g = this;
      return _.$$is_number ? g * _ : g.$__coerced__("*", _);
    }), i(H, "$/", function(_) {
      var g = this;
      return _.$$is_number ? g / _ : g.$__coerced__("/", _);
    }), i(H, "$%", function(_) {
      var g = this;
      if (_.$$is_number) {
        if (_ == -1 / 0)
          return _;
        if (_ == 0)
          n.$raise(R("ZeroDivisionError"), "divided by 0");
        else
          return _ < 0 || g < 0 ? (g % _ + _) % _ : g % _;
      } else
        return g.$__coerced__("%", _);
    }), i(H, "$&", function(_) {
      var g = this;
      return _.$$is_number ? g & _ : g.$__coerced__("&", _);
    }), i(H, "$|", function(_) {
      var g = this;
      return _.$$is_number ? g | _ : g.$__coerced__("|", _);
    }), i(H, "$^", function(_) {
      var g = this;
      return _.$$is_number ? g ^ _ : g.$__coerced__("^", _);
    }), i(H, "$<", function(_) {
      var g = this;
      return _.$$is_number ? g < _ : g.$__coerced__("<", _);
    }), i(H, "$<=", function(_) {
      var g = this;
      return _.$$is_number ? g <= _ : g.$__coerced__("<=", _);
    }), i(H, "$>", function(_) {
      var g = this;
      return _.$$is_number ? g > _ : g.$__coerced__(">", _);
    }), i(H, "$>=", function(_) {
      var g = this;
      return _.$$is_number ? g >= _ : g.$__coerced__(">=", _);
    });
    var we = function(d, _) {
      return _.$$is_number ? isNaN(d) || isNaN(_) ? J : d > _ ? 1 : d < _ ? -1 : 0 : d.$__coerced__("<=>", _);
    };
    i(H, "$<=>", function(_) {
      var g = this;
      try {
        return we(g, _);
      } catch ($) {
        if (t.rescue($, [R("ArgumentError")]))
          try {
            return J;
          } finally {
            t.pop_exception();
          }
        else
          throw $;
      }
    }), i(H, "$<<", function(_) {
      var g = this;
      return _ = r["$coerce_to!"](_, R("Integer"), "to_int"), _ > 0 ? g << _ : g >> -_;
    }), i(H, "$>>", function(_) {
      var g = this;
      return _ = r["$coerce_to!"](_, R("Integer"), "to_int"), _ > 0 ? g >> _ : g << -_;
    }), i(H, "$[]", function(_) {
      var g = this;
      return _ = r["$coerce_to!"](_, R("Integer"), "to_int"), _ < 0 ? 0 : _ >= 32 ? g < 0 ? 1 : 0 : g >> _ & 1;
    }), i(H, "$+@", function() {
      var _ = this;
      return +_;
    }), i(H, "$-@", function() {
      var _ = this;
      return -_;
    }), i(H, "$~", function() {
      var _ = this;
      return ~_;
    }), i(H, "$**", function(_) {
      var g = this;
      return s(R("Integer"), _) ? l(R("Integer")["$==="](g)) || o(a(_, 0)) ? Math.pow(g, _) : R("Rational").$new(g, 1)["$**"](_) : c(g, 0) && (s(R("Float"), _) || s(R("Rational"), _)) ? R("Complex").$new(g, 0)["$**"](_.$to_f()) : o(_.$$is_number != null) ? Math.pow(g, _) : g.$__coerced__("**", _);
    }), i(H, "$==", function(_) {
      var g = this;
      return _.$$is_number ? g.valueOf() === _.valueOf() : _["$respond_to?"]("==") ? _["$=="](g) : !1;
    }), f(H, "===", "=="), i(H, "$abs", function() {
      var _ = this;
      return Math.abs(_);
    }), i(H, "$abs2", function() {
      var _ = this;
      return Math.abs(_ * _);
    }), i(H, "$allbits?", function(_) {
      var g = this;
      return _ = r["$coerce_to!"](_, R("Integer"), "to_int"), (g & _) == _;
    }), i(H, "$anybits?", function(_) {
      var g = this;
      return _ = r["$coerce_to!"](_, R("Integer"), "to_int"), (g & _) !== 0;
    }), i(H, "$angle", function() {
      var _ = this;
      return o(_["$nan?"]()) ? _ : _ == 0 ? 1 / _ > 0 ? 0 : Math.PI : _ < 0 ? Math.PI : 0;
    }), i(H, "$bit_length", function() {
      var _ = this;
      if (s(R("Integer"), _) || n.$raise(R("NoMethodError").$new("undefined method `bit_length` for " + _ + ":Float", "bit_length")), _ === 0 || _ === -1)
        return 0;
      for (var g = 0, $ = _ < 0 ? ~_ : _; $ != 0; )
        g += 1, $ >>>= 1;
      return g;
    }), i(H, "$ceil", function(_) {
      var g = this;
      _ == null && (_ = 0);
      var $ = g.$to_f();
      if ($ % 1 === 0 && _ >= 0)
        return $;
      var I = Math.pow(10, _), D = Math.ceil($ * I) / I;
      return $ % 1 === 0 && (D = Math.round(D)), D;
    }, -1), i(H, "$chr", function(_) {
      var g = this;
      return t.enc(String.fromCharCode(g), _ || "BINARY");
    }, -1), i(H, "$denominator", function d() {
      var _ = d.$$p || J, g = this;
      return d.$$p = null, o(g["$nan?"]()) || o(g["$infinite?"]()) ? 1 : m(g, b(g, "denominator", d, !1, !0), "denominator", [], _);
    }), i(H, "$downto", function d(_) {
      var g = d.$$p || J, $ = this;
      if (d.$$p = null, g === J)
        return C($, "enum_for", ["downto", _], function D() {
          var ie = D.$$s == null ? this : D.$$s;
          return s(R("Numeric"), _) || n.$raise(R("ArgumentError"), "comparison of " + ie.$class() + " with " + _.$class() + " failed"), o(a(_, ie)) ? 0 : N(z(ie, _), 1);
        }, { $$s: $ });
      _.$$is_number || n.$raise(R("ArgumentError"), "comparison of " + $.$class() + " with " + _.$class() + " failed");
      for (var I = $; I >= _; I--)
        g(I);
      return $;
    }), i(H, "$equal?", function(_) {
      var g = this, $ = J;
      return o($ = g["$=="](_)) ? $ : isNaN(g) && isNaN(_);
    }), i(H, "$even?", function() {
      var _ = this;
      return _ % 2 === 0;
    }), i(H, "$floor", function(_) {
      var g = this;
      _ == null && (_ = 0);
      var $ = g.$to_f();
      if ($ % 1 === 0 && _ >= 0)
        return $;
      var I = Math.pow(10, _), D = Math.floor($ * I) / I;
      return $ % 1 === 0 && (D = Math.round(D)), D;
    }, -1), i(H, "$gcd", function(_) {
      var g = this;
      s(R("Integer"), _) || n.$raise(R("TypeError"), "not an integer");
      for (var $ = Math.abs(g), I = Math.abs(_); $ > 0; ) {
        var D = $;
        $ = I % $, I = D;
      }
      return I;
    }), i(H, "$gcdlcm", function(_) {
      var g = this;
      return [g.$gcd(_), g.$lcm(_)];
    }), i(H, "$integer?", function() {
      var _ = this;
      return _ % 1 === 0;
    }), i(H, "$is_a?", function d(_) {
      var g = d.$$p || J, $ = this;
      return d.$$p = null, A(_, R("Integer")) && s(R("Integer"), $) || A(_, R("Integer")) && s(R("Integer"), $) || A(_, R("Float")) && s(R("Float"), $) ? !0 : m($, b($, "is_a?", d, !1, !0), "is_a?", [_], g);
    }), i(H, "$instance_of?", function d(_) {
      var g = d.$$p || J, $ = this;
      return d.$$p = null, A(_, R("Integer")) && s(R("Integer"), $) || A(_, R("Integer")) && s(R("Integer"), $) || A(_, R("Float")) && s(R("Float"), $) ? !0 : m($, b($, "instance_of?", d, !1, !0), "instance_of?", [_], g);
    }), i(H, "$lcm", function(_) {
      var g = this;
      return s(R("Integer"), _) || n.$raise(R("TypeError"), "not an integer"), g == 0 || _ == 0 ? 0 : Math.abs(g * _ / g.$gcd(_));
    }), i(H, "$next", function() {
      var _ = this;
      return _ + 1;
    }), i(H, "$nobits?", function(_) {
      var g = this;
      return _ = r["$coerce_to!"](_, R("Integer"), "to_int"), (g & _) == 0;
    }), i(H, "$nonzero?", function() {
      var _ = this;
      return _ == 0 ? J : _;
    }), i(H, "$numerator", function d() {
      var _ = d.$$p || J, g = this;
      return d.$$p = null, o(g["$nan?"]()) || o(g["$infinite?"]()) ? g : m(g, b(g, "numerator", d, !1, !0), "numerator", [], _);
    }), i(H, "$odd?", function() {
      var _ = this;
      return _ % 2 !== 0;
    }), i(H, "$ord", Q), i(H, "$pow", function(_, g) {
      var $ = this;
      return $ == 0 && n.$raise(R("ZeroDivisionError"), "divided by 0"), g === void 0 ? $["$**"](_) : (R("Integer")["$==="](_) || n.$raise(R("TypeError"), "Integer#pow() 2nd argument not allowed unless a 1st argument is integer"), _ < 0 && n.$raise(R("TypeError"), "Integer#pow() 1st argument cannot be negative when 2nd argument specified"), R("Integer")["$==="](g) || n.$raise(R("TypeError"), "Integer#pow() 2nd argument not allowed unless all arguments are integers"), g === 0 && n.$raise(R("ZeroDivisionError"), "divided by 0"), $["$**"](_)["$%"](g));
    }, -2), i(H, "$pred", function() {
      var _ = this;
      return _ - 1;
    }), i(H, "$quo", function d(_) {
      var g = d.$$p || J, $ = this;
      return d.$$p = null, s(R("Integer"), $) ? m($, b($, "quo", d, !1, !0), "quo", [_], g) : Te($, _);
    }), i(H, "$rationalize", function(_) {
      var g, $, I = this, D = J, ie = J;
      return arguments.length > 1 && n.$raise(R("ArgumentError"), "wrong number of arguments (" + arguments.length + " for 0..1)"), s(R("Integer"), I) ? R("Rational").$new(I, 1) : o(I["$infinite?"]()) ? n.$raise(R("FloatDomainError"), "Infinity") : o(I["$nan?"]()) ? n.$raise(R("FloatDomainError"), "NaN") : o(_ == null) ? ($ = R("Math").$frexp(I), g = ce($), D = g[0] == null ? J : g[0], ie = g[1] == null ? J : g[1], D = R("Math").$ldexp(D, R(R("Float"), "MANT_DIG")).$to_i(), ie = z(ie, R(R("Float"), "MANT_DIG")), R("Rational").$new(ge(2, D), 1["$<<"](z(1, ie))).$rationalize(R("Rational").$new(1, 1["$<<"](z(1, ie))))) : I.$to_r().$rationalize(_);
    }, -1), i(H, "$remainder", function(_) {
      var g = this;
      return z(g, ge(_, Te(g, _).$truncate()));
    }), i(H, "$round", function(_) {
      var g, $, I = this, D = J;
      if (s(R("Integer"), I)) {
        if (o(_ == null) || (s(R("Float"), _) && o(_["$infinite?"]()) && n.$raise(R("RangeError"), "Infinity"), _ = r["$coerce_to!"](_, R("Integer"), "to_int"), o(c(_, R(R("Integer"), "MIN"))) && n.$raise(R("RangeError"), "out of bounds"), o(_ >= 0)))
          return I;
        if (_ = _["$-@"](), 0.415241 * _ - 0.125 > I.$size())
          return 0;
        var ie = Math.pow(10, _), Me = Math.floor((Math.abs(I) + ie / 2) / ie) * ie;
        return I < 0 ? -Me : Me;
      } else {
        if (o(I["$nan?"]()) && o(_ == null) && n.$raise(R("FloatDomainError"), "NaN"), _ = r["$coerce_to!"](_ || 0, R("Integer"), "to_int"), o(Y(_, 0)))
          o(I["$nan?"]()) ? n.$raise(R("RangeError"), "NaN") : o(I["$infinite?"]()) && n.$raise(R("FloatDomainError"), "Infinity");
        else {
          if (A(_, 0))
            return Math.round(I);
          if (o(I["$nan?"]()) || o(I["$infinite?"]()))
            return I;
        }
        return $ = R("Math").$frexp(I), g = ce($), g[0] == null || g[0], D = g[1] == null ? J : g[1], o(fe(_, z(N(R(R("Float"), "DIG"), 2), o(a(D, 0)) ? Te(D, 4) : z(Te(D, 3), 1)))) ? I : o(c(_, (o(a(D, 0)) ? N(Te(D, 3), 1) : Te(D, 4))["$-@"]())) ? 0 : Math.round(I * Math.pow(10, _)) / Math.pow(10, _);
      }
    }, -1), i(H, "$times", function d() {
      var _ = d.$$p || J, g = this;
      if (d.$$p = null, !o(_))
        return C(g, "enum_for", ["times"], function I() {
          var D = I.$$s == null ? this : I.$$s;
          return D;
        }, { $$s: g });
      for (var $ = 0; $ < g; $++)
        _($);
      return g;
    }), i(H, "$to_f", Q), i(H, "$to_i", function() {
      var _ = this;
      return _ < 0 ? Math.ceil(_) : Math.floor(_);
    }), i(H, "$to_r", function() {
      var _, g, $ = this, I = J, D = J;
      return s(R("Integer"), $) ? R("Rational").$new($, 1) : (g = R("Math").$frexp($), _ = ce(g), I = _[0] == null ? J : _[0], D = _[1] == null ? J : _[1], I = R("Math").$ldexp(I, R(R("Float"), "MANT_DIG")).$to_i(), D = z(D, R(R("Float"), "MANT_DIG")), ge(I, R(R("Float"), "RADIX")["$**"](D)).$to_r());
    }), i(H, "$to_s", function(_) {
      var g = this;
      return _ == null && (_ = 10), _ = r["$coerce_to!"](_, R("Integer"), "to_int"), (o(c(_, 2)) || o(a(_, 36))) && n.$raise(R("ArgumentError"), "invalid radix " + _), A(g, 0) && o(1 / g === -1 / 0) ? "-0.0" : g.toString(_);
    }, -1), i(H, "$truncate", function(_) {
      var g = this;
      _ == null && (_ = 0);
      var $ = g.$to_f();
      if ($ % 1 === 0 && _ >= 0)
        return $;
      var I = Math.pow(10, _), D = parseInt($ * I, 10) / I;
      return $ % 1 === 0 && (D = Math.round(D)), D;
    }, -1), i(H, "$digits", function(_) {
      var g = this;
      _ == null && (_ = 10), c(g, 0) && n.$raise(R(R("Math"), "DomainError"), "out of domain"), _ = r["$coerce_to!"](_, R("Integer"), "to_int"), o(c(_, 2)) && n.$raise(R("ArgumentError"), "invalid radix " + _), g != parseInt(g) && n.$raise(R("NoMethodError"), "undefined method `digits' for " + g.$inspect());
      var $ = g, I = [];
      if (g == 0)
        return [0];
      for (; $ != 0; )
        I.push($ % _), $ = parseInt($ / _, 10);
      return I;
    }, -1), i(H, "$divmod", function d(_) {
      var g = d.$$p || J, $ = this;
      return d.$$p = null, o($["$nan?"]()) || o(_["$nan?"]()) ? n.$raise(R("FloatDomainError"), "NaN") : o($["$infinite?"]()) ? n.$raise(R("FloatDomainError"), "Infinity") : m($, b($, "divmod", d, !1, !0), "divmod", [_], g);
    }), i(H, "$upto", function d(_) {
      var g = d.$$p || J, $ = this;
      if (d.$$p = null, g === J)
        return C($, "enum_for", ["upto", _], function D() {
          var ie = D.$$s == null ? this : D.$$s;
          return s(R("Numeric"), _) || n.$raise(R("ArgumentError"), "comparison of " + ie.$class() + " with " + _.$class() + " failed"), o(c(_, ie)) ? 0 : N(z(_, ie), 1);
        }, { $$s: $ });
      _.$$is_number || n.$raise(R("ArgumentError"), "comparison of " + $.$class() + " with " + _.$class() + " failed");
      for (var I = $; I <= _; I++)
        g(I);
      return $;
    }), i(H, "$zero?", function() {
      var _ = this;
      return _ == 0;
    }), i(H, "$size", ae(4)), i(H, "$nan?", function() {
      var _ = this;
      return isNaN(_);
    }), i(H, "$finite?", function() {
      var _ = this;
      return _ != 1 / 0 && _ != -1 / 0 && !isNaN(_);
    }), i(H, "$infinite?", function() {
      var _ = this;
      return _ == 1 / 0 ? 1 : _ == -1 / 0 ? -1 : J;
    }), i(H, "$positive?", function() {
      var _ = this;
      return _ != 0 && (_ == 1 / 0 || 1 / _ > 0);
    }), i(H, "$negative?", function() {
      var _ = this;
      return _ == -1 / 0 || 1 / _ < 0;
    });
    function _e(d) {
      var _ = new Uint8Array(8);
      return new DataView(_.buffer).setFloat64(0, d, !0), _;
    }
    function X(d) {
      return new DataView(d.buffer).getFloat64(0, !0);
    }
    function w(d) {
      for (var _ = _e(d), g = 0; g < _.length; g++)
        if (_[g] === 255)
          _[g] = 0;
        else {
          _[g]++;
          break;
        }
      return X(_);
    }
    function h(d) {
      for (var _ = _e(d), g = 0; g < _.length; g++)
        if (_[g] === 0)
          _[g] = 255;
        else {
          _[g]--;
          break;
        }
      return X(_);
    }
    return i(H, "$next_float", function() {
      var _ = this;
      return A(_, R(R("Float"), "INFINITY")) ? R(R("Float"), "INFINITY") : o(_["$nan?"]()) ? R(R("Float"), "NAN") : fe(_, 0) ? w(Math.abs(_)) : h(_);
    }), i(H, "$prev_float", function() {
      var _ = this;
      return A(_, R(R("Float"), "INFINITY")["$-@"]()) ? R(R("Float"), "INFINITY")["$-@"]() : o(_["$nan?"]()) ? R(R("Float"), "NAN") : a(_, 0) ? h(_) : -w(Math.abs(_));
    }), f(H, "arg", "angle"), f(H, "eql?", "=="), f(H, "fdiv", "/"), f(H, "inspect", "to_s"), f(H, "kind_of?", "is_a?"), f(H, "magnitude", "abs"), f(H, "modulo", "%"), f(H, "object_id", "__id__"), f(H, "phase", "angle"), f(H, "succ", "next"), f(H, "to_int", "to_i");
  }("::", R("Numeric")), Re("::", "Fixnum", R("Number")), function(ve, F, ne) {
    var H = e(ve, F, "Integer"), we = [H].concat(ne);
    return H.$$is_number_class = !0, H.$$is_integer_class = !0, function(_e, X) {
      var w = [_e].concat(X), h = t.$r(w);
      return i(_e, "$allocate", function() {
        var _ = this;
        return n.$raise(R("TypeError"), "allocator undefined for " + _.$name());
      }), t.udef(_e, "$new"), i(_e, "$sqrt", function(_) {
        return _ = r["$coerce_to!"](_, R("Integer"), "to_int"), _ < 0 && n.$raise(R(R("Math"), "DomainError"), 'Numerical argument is out of domain - "isqrt"'), parseInt(Math.sqrt(_), 10);
      }), i(_e, "$try_convert", function(_) {
        var g = this;
        return h("Opal")["$coerce_to?"](_, g, "to_int");
      });
    }(t.get_singleton_class(H), we), Re(H, "MAX", Math.pow(2, 30) - 1), Re(H, "MIN", -Math.pow(2, 30));
  }("::", R("Numeric"), Ce), function(ve, F, ne) {
    var H = e(ve, F, "Float");
    return H.$$is_number_class = !0, function(we, _e) {
      return i(we, "$allocate", function() {
        var w = this;
        return n.$raise(R("TypeError"), "allocator undefined for " + w.$name());
      }), t.udef(we, "$new"), i(we, "$===", function(w) {
        return !!w.$$is_number;
      });
    }(t.get_singleton_class(H)), Re(H, "INFINITY", 1 / 0), Re(H, "MAX", Number.MAX_VALUE), Re(H, "MIN", Number.MIN_VALUE), Re(H, "NAN", NaN), Re(H, "DIG", 15), Re(H, "MANT_DIG", 53), Re(H, "RADIX", 2), Re(H, "EPSILON", Number.EPSILON || 2220446049250313e-31);
  }("::", R("Numeric"));
};
Opal.modules["corelib/range"] = function(t) {
  var e = t.klass, r = t.truthy, n = t.Kernel, i = t.def, s = t.not, o = t.send2, a = t.find_super, l = t.rb_lt, c = t.rb_le, f = t.send, m = t.eqeq, b = t.eqeqeq, C = t.return_ivar, N = t.rb_gt, z = t.rb_minus, A = t.Opal, Q = t.rb_divide, Te = t.rb_plus, ce = t.rb_times, ge = t.rb_ge, Y = t.thrower, fe = t.alias, ae = t.top, Re = [], pe = t.nil, Ce = t.$$$;
  return t.add_stubs("require,include,attr_reader,raise,nil?,<=>,include?,!,<,<=,enum_for,size,upto,to_proc,respond_to?,class,succ,==,===,exclude_end?,eql?,begin,end,last,to_a,>,-@,-,to_i,coerce_to!,ceil,/,is_a?,new,loop,+,*,>=,each_with_index,%,step,bsearch,inspect,[],hash,cover?"), ae.$require("corelib/enumerable"), function(J, R, ve) {
    var F = e(J, R, "Range"), ne = [F].concat(ve), H = t.$r(ne), we = F.$$prototype;
    we.begin = we.end = we.excl = pe, F.$include(Ce("Enumerable")), F.$$prototype.$$is_range = !0, F.$attr_reader("begin", "end"), i(F, "$initialize", function(w, h, d) {
      var _ = this;
      return d == null && (d = !1), r(_.begin) && n.$raise(Ce("NameError"), "'initialize' called twice"), r(w["$<=>"](h)) || r(w["$nil?"]()) || r(h["$nil?"]()) || n.$raise(Ce("ArgumentError"), "bad value for range"), _.begin = w, _.end = h, _.excl = d;
    }, -3), i(F, "$===", function(w) {
      var h = this;
      return h["$include?"](w);
    });
    function _e(X) {
      return X.begin === pe || X.end === pe || X.begin === -1 / 0 || X.end === 1 / 0 || X.begin === 1 / 0 || X.end === -1 / 0;
    }
    return i(F, "$count", function X() {
      var w = X.$$p || pe, h = this;
      return X.$$p = null, s(w !== pe) && r(_e(h)) ? Ce(Ce("Float"), "INFINITY") : o(h, a(h, "count", X, !1, !0), "count", [], w);
    }), i(F, "$to_a", function X() {
      var w = X.$$p || pe, h = this;
      return X.$$p = null, r(_e(h)) && n.$raise(Ce("TypeError"), "cannot convert endless range to an array"), o(h, a(h, "to_a", X, !1, !0), "to_a", [], w);
    }), i(F, "$cover?", function(w) {
      var h = this, d = pe, _ = pe, g = pe, $ = pe, I = pe;
      return d = r(_ = r(g = r($ = h.begin["$nil?"]()) ? -1 : $) ? g : h.begin["$<=>"](w)) && _, I = r(_ = r(g = r($ = h.end["$nil?"]()) ? -1 : $) ? g : w["$<=>"](h.end)) && _, r(_ = r(g = r(h.excl) ? r($ = I) ? l(I, 0) : $ : r($ = I) ? c(I, 0) : $) ? d : g) ? c(d, 0) : _;
    }), i(F, "$each", function X() {
      var w = X.$$p || pe, h = this, d = pe, _ = pe, g = pe;
      if (X.$$p = null, w === pe)
        return f(h, "enum_for", ["each"], function D() {
          var ie = D.$$s == null ? this : D.$$s;
          return ie.$size();
        }, { $$s: h });
      var $, I;
      if (h.begin.$$is_number && h.end.$$is_number) {
        for ((h.begin % 1 !== 0 || h.end % 1 !== 0) && n.$raise(Ce("TypeError"), "can't iterate from Float"), $ = h.begin, I = h.end + (r(h.excl) ? 0 : 1); $ < I; $++)
          w($);
        return h;
      }
      if (h.begin.$$is_string && h.end.$$is_string)
        return f(h.begin, "upto", [h.end, h.excl], w.$to_proc()), h;
      for (d = h.begin, _ = h.end, r(d["$respond_to?"]("succ")) || n.$raise(Ce("TypeError"), "can't iterate from " + d.$class()); r(r(g = h.end["$nil?"]()) ? g : l(d["$<=>"](_), 0)); )
        t.yield1(w, d), d = d.$succ();
      return s(h.excl) && m(d, _) && t.yield1(w, d), h;
    }), i(F, "$eql?", function(w) {
      var h = this, d = pe, _ = pe;
      return b(Ce("Range"), w) ? r(d = r(_ = h.excl["$==="](w["$exclude_end?"]())) ? h.begin["$eql?"](w.$begin()) : _) ? h.end["$eql?"](w.$end()) : d : !1;
    }), i(F, "$exclude_end?", C("excl")), i(F, "$first", function X(w) {
      var h = X.$$p || pe, d = this;
      return X.$$p = null, r(d.begin["$nil?"]()) && n.$raise(Ce("RangeError"), "cannot get the minimum of beginless range"), r(w == null) ? d.begin : o(d, a(d, "first", X, !1, !0), "first", [w], h);
    }, -1), i(F, "$last", function(w) {
      var h = this;
      return r(h.end["$nil?"]()) && n.$raise(Ce("RangeError"), "cannot get the maximum of endless range"), r(w == null) ? h.end : h.$to_a().$last(w);
    }, -1), i(F, "$max", function X() {
      var w = X.$$p || pe, h = this;
      return X.$$p = null, r(h.end["$nil?"]()) ? n.$raise(Ce("RangeError"), "cannot get the maximum of endless range") : w !== pe ? o(h, a(h, "max", X, !1, !0), "max", [], w) : s(h.begin["$nil?"]()) && (r(N(h.begin, h.end)) || r(h.excl) && m(h.begin, h.end)) ? pe : h.excl ? h.end - 1 : h.end;
    }), i(F, "$min", function X() {
      var w = X.$$p || pe, h = this;
      return X.$$p = null, r(h.begin["$nil?"]()) ? n.$raise(Ce("RangeError"), "cannot get the minimum of beginless range") : w !== pe ? o(h, a(h, "min", X, !1, !0), "min", [], w) : s(h.end["$nil?"]()) && (r(N(h.begin, h.end)) || r(h.excl) && m(h.begin, h.end)) ? pe : h.begin;
    }), i(F, "$size", function() {
      var w = this, h = pe, d = pe, _ = pe;
      return h = Ce(Ce("Float"), "INFINITY"), m(w.begin, h) && s(w.end["$nil?"]()) || m(w.end, h["$-@"]()) && s(w.begin["$nil?"]()) ? 0 : r(_e(w)) ? h : b(Ce("Numeric"), w.begin) && b(Ce("Numeric"), w.end) ? (d = w.begin, _ = w.end, r(w.excl) && (_ = z(_, 1)), r(l(_, d)) ? 0 : (Math.abs(_ - d) + 1).$to_i()) : pe;
    }), i(F, "$step", function X(w) {
      var h = X.$$p || pe, d = this, _ = pe, g = pe;
      X.$$p = null;
      function $() {
        w == null ? w = 1 : w.$$is_number || (w = A["$coerce_to!"](w, Ce("Integer"), "to_int")), w < 0 ? n.$raise(Ce("ArgumentError"), "step can't be negative") : w === 0 && n.$raise(Ce("ArgumentError"), "step can't be 0");
      }
      function I() {
        if (!d.begin["$respond_to?"]("succ") || d.begin.$$is_string && d.end.$$is_string)
          return pe;
        if (w % 1 === 0)
          return Q(d.$size(), w).$ceil();
        var D = d.begin, ie = d.end, Me = Math.abs, Je = Math.floor, it = (Me(D) + Me(ie) + Me(ie - D)) / Me(w) * Ce(Ce("Float"), "EPSILON"), dt;
        return it > 0.5 && (it = 0.5), d.excl ? (dt = Je((ie - D) / w - it), dt * w + D < ie && dt++) : dt = Je((ie - D) / w + it) + 1, dt;
      }
      return h === pe ? (r(d.begin["$is_a?"](H("Numeric"))) || r(d.begin["$nil?"]())) && (r(d.end["$is_a?"](H("Numeric"))) || r(d.end["$nil?"]())) && s(r(_ = d.begin["$nil?"]()) ? d.end["$nil?"]() : _) ? Ce(Ce("Enumerator"), "ArithmeticSequence").$new(d, w, "step") : f(d, "enum_for", ["step", w], function() {
        return $(), I();
      }) : ($(), r(d.begin.$$is_number && d.end.$$is_number) ? (g = 0, function() {
        try {
          var D = Y("break");
          return f(d, "loop", [], function ie() {
            var Me = ie.$$s == null ? this : ie.$$s, Je = pe;
            return Me.begin == null && (Me.begin = pe), Me.excl == null && (Me.excl = pe), Me.end == null && (Me.end = pe), Je = Te(Me.begin, ce(g, w)), r(Me.excl) ? r(ge(Je, Me.end)) && D.$throw() : r(N(Je, Me.end)) && D.$throw(), t.yield1(h, Je), g = Te(g, 1);
          }, { $$s: d });
        } catch (ie) {
          if (ie === D)
            return ie.$v;
          throw ie;
        }
      }()) : (d.begin.$$is_string && d.end.$$is_string && w % 1 !== 0 && n.$raise(Ce("TypeError"), "no implicit conversion to float from string"), f(d, "each_with_index", [], function(ie, Me) {
        return ie == null && (ie = pe), Me == null && (Me = pe), m(Me["$%"](w), 0) ? t.yield1(h, ie) : pe;
      })), d);
    }, -1), i(F, "$%", function(w) {
      var h = this;
      return r(h.begin["$is_a?"](H("Numeric"))) && r(h.end["$is_a?"](H("Numeric"))) ? Ce(Ce("Enumerator"), "ArithmeticSequence").$new(h, w, "%") : h.$step(w);
    }), i(F, "$bsearch", function X() {
      var w = X.$$p || pe, h = this;
      return X.$$p = null, w === pe ? h.$enum_for("bsearch") : (r(_e(h) && (h.begin.$$is_number || h.end.$$is_number)) && n.$raise(Ce("NotImplementedError"), "Can't #bsearch an infinite range"), r(h.begin.$$is_number && h.end.$$is_number) || n.$raise(Ce("TypeError"), "can't do binary search for " + h.begin.$class()), f(h.$to_a(), "bsearch", [], w.$to_proc()));
    }), i(F, "$to_s", function() {
      var w = this, h = pe;
      return "" + (r(h = w.begin) ? h : "") + (r(w.excl) ? "..." : "..") + (r(h = w.end) ? h : "");
    }), i(F, "$inspect", function() {
      var w = this, h = pe;
      return "" + (r(h = w.begin) ? w.begin.$inspect() : h) + (r(w.excl) ? "..." : "..") + (r(h = w.end) ? w.end.$inspect() : h);
    }), i(F, "$marshal_load", function(w) {
      var h = this;
      return h.begin = w["$[]"]("begin"), h.end = w["$[]"]("end"), h.excl = w["$[]"]("excl");
    }), i(F, "$hash", function() {
      var w = this;
      return [w.begin, w.end, w.excl].$hash();
    }), fe(F, "==", "eql?"), fe(F, "include?", "cover?"), fe(F, "member?", "cover?");
  }("::", null, Re);
};
Opal.modules["corelib/proc"] = function(t) {
  var e = t.slice, r = t.klass, n = t.truthy, i = t.Kernel, s = t.defs, o = t.def, a = t.send, l = t.to_a, c = t.return_self, f = t.ensure_kwargs, m = t.Opal, b = t.alias, C = t.nil, N = t.$$$;
  return t.add_stubs("raise,proc,call,to_proc,new,source_location,coerce_to!,dup"), function(z, A) {
    var Q = r(z, A, "Proc");
    return t.prop(Q.$$prototype, "$$is_proc", !0), t.prop(Q.$$prototype, "$$is_lambda", !1), s(Q, "$new", function Te() {
      var ce = Te.$$p || C;
      return Te.$$p = null, n(ce) || i.$raise(N("ArgumentError"), "tried to create a Proc object without a block"), ce;
    }), o(Q, "$call", function Te(ce) {
      var ge = Te.$$p || C, Y, fe, ae = this;
      Te.$$p = null, Y = e(arguments), fe = Y, ge !== C && (ae.$$p = ge);
      var Re, pe = ae.$$brk, Ce = ae.$$ret;
      if (pe || Ce && ae.$$is_lambda)
        try {
          ae.$$is_lambda ? Re = ae.apply(null, fe) : Re = t.yieldX(ae, fe);
        } catch (J) {
          if (J === pe)
            return J.$v;
          if (ae.$$is_lambda && J === Ce)
            return J.$v;
          throw J;
        }
      else
        ae.$$is_lambda ? Re = ae.apply(null, fe) : Re = t.yieldX(ae, fe);
      return Re;
    }, -1), o(Q, "$>>", function Te(ce) {
      Te.$$p;
      var ge = this;
      return Te.$$p = null, a(i, "proc", [], function Y(fe) {
        var ae = Y.$$p || C, Re, pe, Ce = Y.$$s == null ? this : Y.$$s, J = C;
        return Y.$$p = null, Re = e(arguments), pe = Re, J = a(Ce, "call", l(pe), ae.$to_proc()), ce.$call(J);
      }, { $$arity: -1, $$s: ge });
    }), o(Q, "$<<", function Te(ce) {
      Te.$$p;
      var ge = this;
      return Te.$$p = null, a(i, "proc", [], function Y(fe) {
        var ae = Y.$$p || C, Re, pe, Ce = Y.$$s == null ? this : Y.$$s, J = C;
        return Y.$$p = null, Re = e(arguments), pe = Re, J = a(ce, "call", l(pe), ae.$to_proc()), Ce.$call(J);
      }, { $$arity: -1, $$s: ge });
    }), o(Q, "$to_proc", c), o(Q, "$lambda?", function() {
      var ce = this;
      return !!ce.$$is_lambda;
    }), o(Q, "$arity", function() {
      var ce = this;
      return ce.$$is_curried ? -1 : ce.$$arity != null ? ce.$$arity : ce.length;
    }), o(Q, "$source_location", function() {
      var ce = this, ge = C;
      return ce.$$is_curried ? C : n(ge = ce.$$source_location) ? ge : C;
    }), o(Q, "$binding", function() {
      var ce = this;
      return ce.$$is_curried && i.$raise(N("ArgumentError"), "Can't create Binding"), n(N("::", "Binding", "skip_raise") ? "constant" : C) ? N("Binding").$new(C, [], ce.$$s, ce.$source_location()) : C;
    }), o(Q, "$parameters", function(ce) {
      var ge, Y = this;
      if (ce = f(ce), ge = ce.$$smap.lambda, Y.$$is_curried)
        return [["rest"]];
      if (Y.$$parameters) {
        if (ge ?? Y.$$is_lambda)
          return Y.$$parameters;
        var fe = [], ae, Re;
        for (ae = 0, Re = Y.$$parameters.length; ae < Re; ae++) {
          var pe = Y.$$parameters[ae];
          pe[0] === "req" && (pe = ["opt", pe[1]]), fe.push(pe);
        }
        return fe;
      } else
        return [];
    }, -1), o(Q, "$curry", function(ce) {
      var ge = this;
      ce === void 0 ? ce = ge.length : (ce = m["$coerce_to!"](ce, N("Integer"), "to_int"), ge.$$is_lambda && ce !== ge.length && i.$raise(N("ArgumentError"), "wrong number of arguments (" + ce + " for " + ge.length + ")"));
      function Y() {
        var fe = e(arguments), ae = fe.length, Re;
        return ae > ce && ge.$$is_lambda && !ge.$$is_curried && i.$raise(N("ArgumentError"), "wrong number of arguments (" + ae + " for " + ce + ")"), ae >= ce ? ge.$call.apply(ge, fe) : (Re = function() {
          return Y.apply(
            null,
            fe.concat(e(arguments))
          );
        }, Re.$$is_lambda = ge.$$is_lambda, Re.$$is_curried = !0, Re);
      }
      return Y.$$is_lambda = ge.$$is_lambda, Y.$$is_curried = !0, Y;
    }, -1), o(Q, "$dup", function() {
      var ce = this, ge = ce.$$original_proc || ce, Y = function() {
        return ge.apply(this, arguments);
      };
      for (var fe in ce)
        ce.hasOwnProperty(fe) && (Y[fe] = ce[fe]);
      return Y;
    }), b(Q, "===", "call"), b(Q, "clone", "dup"), b(Q, "yield", "call"), b(Q, "[]", "call");
  }("::", Function);
};
Opal.modules["corelib/method"] = function(t) {
  var e = t.klass, r = t.def, n = t.truthy, i = t.slice, s = t.alias, o = t.Kernel, a = t.send, l = t.to_a, c = t.nil, f = t.$$$;
  return t.add_stubs("attr_reader,arity,curry,>>,<<,new,class,join,source_location,call,raise,bind,to_proc"), function(m, b) {
    var C = e(m, b, "Method"), N = C.$$prototype;
    return N.method = N.receiver = N.owner = N.name = c, C.$attr_reader("owner", "receiver", "name"), r(C, "$initialize", function(A, Q, Te, ce) {
      var ge = this;
      return ge.receiver = A, ge.owner = Q, ge.name = ce, ge.method = Te;
    }), r(C, "$arity", function() {
      var A = this;
      return A.method.$arity();
    }), r(C, "$parameters", function() {
      var A = this;
      return A.method.$$parameters;
    }), r(C, "$source_location", function() {
      var A = this, Q = c;
      return n(Q = A.method.$$source_location) ? Q : ["(eval)", 0];
    }), r(C, "$comments", function() {
      var A = this, Q = c;
      return n(Q = A.method.$$comments) ? Q : [];
    }), r(C, "$call", function z(A) {
      var Q = z.$$p || c, Te, ce, ge = this;
      return z.$$p = null, Te = i(arguments), ce = Te, ge.method.$$p = Q, ge.method.apply(ge.receiver, ce);
    }, -1), r(C, "$curry", function(A) {
      var Q = this;
      return Q.method.$curry(A);
    }, -1), r(C, "$>>", function(A) {
      var Q = this;
      return Q.method["$>>"](A);
    }), r(C, "$<<", function(A) {
      var Q = this;
      return Q.method["$<<"](A);
    }), r(C, "$unbind", function() {
      var A = this;
      return f("UnboundMethod").$new(A.receiver.$class(), A.owner, A.method, A.name);
    }), r(C, "$to_proc", function() {
      var A = this, Q = A.$call.bind(A);
      return Q.$$unbound = A.method, Q.$$is_lambda = !0, Q.$$arity = A.method.$$arity == null ? A.method.length : A.method.$$arity, Q.$$parameters = A.method.$$parameters, Q;
    }), r(C, "$inspect", function() {
      var A = this;
      return "#<" + A.$class() + ": " + A.receiver.$class() + "#" + A.name + " (defined in " + A.owner + " in " + A.$source_location().$join(":") + ")>";
    }), s(C, "[]", "call"), s(C, "===", "call");
  }("::", null), function(m, b) {
    var C = e(m, b, "UnboundMethod"), N = C.$$prototype;
    return N.method = N.owner = N.name = N.source = c, C.$attr_reader("source", "owner", "name"), r(C, "$initialize", function(A, Q, Te, ce) {
      var ge = this;
      return ge.source = A, ge.owner = Q, ge.method = Te, ge.name = ce;
    }), r(C, "$arity", function() {
      var A = this;
      return A.method.$arity();
    }), r(C, "$parameters", function() {
      var A = this;
      return A.method.$$parameters;
    }), r(C, "$source_location", function() {
      var A = this, Q = c;
      return n(Q = A.method.$$source_location) ? Q : ["(eval)", 0];
    }), r(C, "$comments", function() {
      var A = this, Q = c;
      return n(Q = A.method.$$comments) ? Q : [];
    }), r(C, "$bind", function(A) {
      var Q = this;
      if (Q.owner.$$is_module || t.is_a(A, Q.owner))
        return f("Method").$new(A, Q.owner, Q.method, Q.name);
      o.$raise(f("TypeError"), "can't bind singleton method to a different class (expected " + A + ".kind_of?(" + Q.owner + " to be true)");
    }), r(C, "$bind_call", function z(A, Q) {
      var Te = z.$$p || c, ce, ge, Y = this;
      return z.$$p = null, ce = i(arguments, 1), ge = ce, a(Y.$bind(A), "call", l(ge), Te.$to_proc());
    }, -2), r(C, "$inspect", function() {
      var A = this;
      return "#<" + A.$class() + ": " + A.source + "#" + A.name + " (defined in " + A.owner + " in " + A.$source_location().$join(":") + ")>";
    });
  }("::", null);
};
Opal.modules["corelib/variables"] = function(t) {
  var e = t.gvars, r = t.const_set, n = t.Object, i = t.hash2, s = t.nil;
  return t.add_stubs("new"), e["&"] = e["~"] = e["`"] = e["'"] = s, e.LOADED_FEATURES = e['"'] = t.loaded_features, e.LOAD_PATH = e[":"] = [], e["/"] = `
`, e[","] = s, r("::", "ARGV", []), r("::", "ARGF", n.$new()), r("::", "ENV", i([], {})), e.VERBOSE = !1, e.DEBUG = !1, e.SAFE = 0;
};
Opal.modules["corelib/io"] = function(t) {
  var e = t.klass, r = t.const_set, n = t.not, i = t.truthy, s = t.def, o = t.return_ivar, a = t.return_val, l = t.slice, c = t.Kernel, f = t.gvars, m = t.send, b = t.to_a, C = t.rb_plus, N = t.neqeq, z = t.range, A = t.hash2, Q = t.eqeq, Te = t.to_ary, ce = t.rb_gt, ge = t.assign_ivar_val, Y = t.alias, fe, ae = t.nil, Re = t.$$$;
  t.add_stubs("attr_reader,attr_accessor,!,match?,include?,size,write,String,flatten,puts,sysread_noraise,+,!=,[],ord,getc,readchar,raise,gets,==,to_str,length,split,sub,sysread,>,to_a,each_line,enum_for,getbyte,closed_write?,closed_read?,each,eof,new,write_proc=,read_proc="), function(Ce, J) {
    var R = e(Ce, J, "IO"), ve = R.$$prototype;
    return ve.read_buffer = ve.closed = ae, r(R, "SEEK_SET", 0), r(R, "SEEK_CUR", 1), r(R, "SEEK_END", 2), r(R, "SEEK_DATA", 3), r(R, "SEEK_HOLE", 4), r(R, "READABLE", 1), r(R, "WRITABLE", 4), R.$attr_reader("eof"), R.$attr_accessor("read_proc", "sync", "tty", "write_proc"), s(R, "$initialize", function(ne, H) {
      var we = this;
      return H == null && (H = "r"), we.fd = ne, we.flags = H, we.eof = !1, i(H["$include?"]("r")) && n(H["$match?"](/[wa+]/)) ? we.closed = "write" : i(H["$match?"](/[wa]/)) && n(H["$match?"](/[r+]/)) ? we.closed = "read" : ae;
    }, -2), s(R, "$fileno", o("fd")), s(R, "$tty?", function() {
      var ne = this;
      return ne.tty == !0;
    }), s(R, "$write", function(ne) {
      var H = this;
      return H.write_proc(ne), ne.$size();
    }), s(R, "$flush", a(ae)), s(R, "$<<", function(ne) {
      var H = this;
      return H.$write(ne), H;
    }), s(R, "$print", function(ne) {
      var H, we, _e = this;
      f[","] == null && (f[","] = ae), H = l(arguments), we = H;
      for (var X = 0, w = we.length; X < w; X++)
        we[X] = c.$String(we[X]);
      return _e.$write(we.join(f[","])), ae;
    }, -1), s(R, "$puts", function(ne) {
      var H, we, _e = this;
      H = l(arguments), we = H;
      var X;
      if (we.length === 0)
        return _e.$write(`
`), ae;
      for (var w = 0, h = we.length; w < h; w++)
        if (we[w].$$is_array) {
          var d = we[w].$flatten();
          d.length > 0 && m(_e, "puts", b(d));
        } else
          we[w].$$is_string ? X = we[w].valueOf() : X = c.$String(we[w]), X.endsWith(`
`) || (X += `
`), _e.$write(X);
      return ae;
    }, -1), s(R, "$getc", function() {
      var ne = this, H = ae, we = ae, _e = ae;
      ne.read_buffer = i(H = ne.read_buffer) ? H : "", we = "";
      do
        if (ne.read_buffer = C(ne.read_buffer, we), N(ne.read_buffer, ""))
          return _e = ne.read_buffer["$[]"](0), ne.read_buffer = ne.read_buffer["$[]"](z(1, -1, !1)), _e;
      while (i(we = ne.$sysread_noraise(1)));
      return ae;
    }), s(R, "$getbyte", function() {
      var ne, H = this;
      return ne = H.$getc(), ne === ae || ne == null ? ae : ne.$ord();
    }), s(R, "$readbyte", function() {
      var ne = this;
      return ne.$readchar().$ord();
    }), s(R, "$readchar", function() {
      var ne = this, H = ae;
      return i(H = ne.$getc()) ? H : c.$raise(Re("EOFError"), "end of file reached");
    }), s(R, "$readline", function(ne) {
      var H, we, _e = this, X = ae;
      return H = l(arguments), we = H, i(X = m(_e, "gets", b(we))) ? X : c.$raise(Re("EOFError"), "end of file reached");
    }, -1), s(R, "$gets", function(ne, H, we) {
      var _e, X, w = this, h = ae, d = ae, _ = ae, g = ae, $ = ae, I = ae;
      f["/"] == null && (f["/"] = ae), ne == null && (ne = !1), H == null && (H = ae), we == null && (we = A([], {})), i(ne.$$is_number) && n(H) && (_e = [!1, ne, H], ne = _e[0], H = _e[1], we = _e[2]), i(ne.$$is_hash) && n(H) && Q(we, A([], {})) ? (_e = [!1, ae, ne], ne = _e[0], H = _e[1], we = _e[2]) : i(H.$$is_hash) && Q(we, A([], {})) && (_e = [ne, ae, H], ne = _e[0], H = _e[1], we = _e[2]), h = ne, Q(ne, !1) && (ne = f["/"]), Q(ne, "") && (ne = /\r?\n\r?\n/), ne = i(d = ne) ? d : "", Q(h, "") || (ne = ne.$to_str()), _ = Q(h, "") ? 2 : ne.$length(), Q(ne, " ") && (ne = / /), w.read_buffer = i(d = w.read_buffer) ? d : "", g = "", $ = ae;
      do
        if (w.read_buffer = C(w.read_buffer, g), N(ne, "") && i(i(ne.$$is_regexp) ? w.read_buffer["$match?"](ne) : w.read_buffer["$include?"](ne))) {
          I = w.read_buffer, X = w.read_buffer.$split(ne, 2), _e = Te(X), $ = _e[0] == null ? ae : _e[0], w.read_buffer = _e[1] == null ? ae : _e[1], N($, I) && ($ = C($, I["$[]"]($.$length(), _)));
          break;
        }
      while (i(g = w.$sysread_noraise(Q(ne, "") ? 65536 : 1)));
      return i($) || (_e = [i(d = w.read_buffer) ? d : "", ""], $ = _e[0], w.read_buffer = _e[1], Q($, "") && ($ = ae)), i($) && (i(H) && ($ = $["$[]"](t.Range.$new(0, H, !0)), w.read_buffer = C($["$[]"](t.Range.$new(H, -1, !1)), w.read_buffer)), i(we["$[]"]("chomp")) && ($ = $.$sub(/\r?\n$/, "")), Q(h, "") && ($ = $.$sub(/^[\r\n]+/, ""))), Q(h, !1) && (f._ = $), $;
    }, -1), s(R, "$sysread", function(ne) {
      var H = this, we = ae;
      return i(we = H.read_proc(ne)) ? we : (H.eof = !0, c.$raise(Re("EOFError"), "end of file reached"));
    }), s(R, "$sysread_noraise", function(ne) {
      var H = this;
      try {
        return H.$sysread(ne);
      } catch (we) {
        if (t.rescue(we, [Re("EOFError")]))
          try {
            return ae;
          } finally {
            t.pop_exception();
          }
        else
          throw we;
      }
    }), s(R, "$readpartial", function(ne) {
      var H, we = this, _e = ae, X = ae, w = ae;
      return we.read_buffer = i(_e = we.read_buffer) ? _e : "", X = we.$sysread(ne), H = [C(we.read_buffer, i(_e = X) ? _e : ""), ""], w = H[0], we.read_buffer = H[1], Q(w, "") && (w = ae), w;
    }), s(R, "$read", function(ne) {
      var H, we = this, _e = ae, X = ae, w = ae;
      ne == null && (ne = ae), we.read_buffer = i(_e = we.read_buffer) ? _e : "", X = "", w = ae;
      do
        if (we.read_buffer = C(we.read_buffer, X), i(ne) && i(ce(we.read_buffer.$length(), ne)))
          return H = [we.read_buffer["$[]"](t.Range.$new(0, ne, !0)), we.read_buffer["$[]"](t.Range.$new(ne, -1, !1))], w = H[0], we.read_buffer = H[1], w;
      while (i(X = we.$sysread_noraise(i(_e = ne) ? _e : 65536)));
      return H = [we.read_buffer, ""], w = H[0], we.read_buffer = H[1], w;
    }, -1), s(R, "$readlines", function(ne) {
      var H = this;
      return f["/"] == null && (f["/"] = ae), ne == null && (ne = f["/"]), H.$each_line(ne).$to_a();
    }, -1), s(R, "$each", function F(ne, H) {
      var we = F.$$p || ae, _e, X, w, h = this, d = ae;
      if (f["/"] == null && (f["/"] = ae), F.$$p = null, _e = l(arguments), _e.length > 0 && (X = _e.shift()), X == null && (X = f["/"]), w = _e, we === ae)
        return m(h, "enum_for", ["each", X].concat(b(w)));
      for (; i(d = m(h, "gets", [X].concat(b(w)))); )
        t.yield1(we, d);
      return h;
    }, -1), s(R, "$each_byte", function F() {
      var ne = F.$$p || ae, H = this, we = ae;
      if (F.$$p = null, ne === ae)
        return H.$enum_for("each_byte");
      for (; i(we = H.$getbyte()); )
        t.yield1(ne, we);
      return H;
    }), s(R, "$each_char", function F() {
      var ne = F.$$p || ae, H = this, we = ae;
      if (F.$$p = null, ne === ae)
        return H.$enum_for("each_char");
      for (; i(we = H.$getc()); )
        t.yield1(ne, we);
      return H;
    }), s(R, "$close", ge("closed", "both")), s(R, "$close_read", function() {
      var ne = this;
      return Q(ne.closed, "write") ? ne.closed = "both" : ne.closed = "read";
    }), s(R, "$close_write", function() {
      var ne = this;
      return Q(ne.closed, "read") ? ne.closed = "both" : ne.closed = "write";
    }), s(R, "$closed?", function() {
      var ne = this;
      return ne.closed["$=="]("both");
    }), s(R, "$closed_read?", function() {
      var ne = this, H = ae;
      return i(H = ne.closed["$=="]("read")) ? H : ne.closed["$=="]("both");
    }), s(R, "$closed_write?", function() {
      var ne = this, H = ae;
      return i(H = ne.closed["$=="]("write")) ? H : ne.closed["$=="]("both");
    }), s(R, "$check_writable", function() {
      var ne = this;
      return i(ne["$closed_write?"]()) ? c.$raise(Re("IOError"), "not opened for writing") : ae;
    }), s(R, "$check_readable", function() {
      var ne = this;
      return i(ne["$closed_read?"]()) ? c.$raise(Re("IOError"), "not opened for reading") : ae;
    }), Y(R, "each_line", "each"), Y(R, "eof?", "eof");
  }("::", null), r("::", "STDIN", f.stdin = Re("IO").$new(0, "r")), r("::", "STDOUT", f.stdout = Re("IO").$new(1, "w")), r("::", "STDERR", f.stderr = Re("IO").$new(2, "w"));
  var pe = t.global.console;
  return Re("STDOUT")["$write_proc="](typeof process == "object" && typeof process.stdout == "object" ? function(Ce) {
    process.stdout.write(Ce);
  } : function(Ce) {
    pe.log(Ce);
  }), Re("STDERR")["$write_proc="](typeof process == "object" && typeof process.stderr == "object" ? function(Ce) {
    process.stderr.write(Ce);
  } : function(Ce) {
    pe.warn(Ce);
  }), fe = [function(Ce) {
    var J = prompt();
    return J !== null ? J + `
` : ae;
  }], m(Re("STDIN"), "read_proc=", fe), fe[fe.length - 1];
};
Opal.modules["opal/regexp_anchors"] = function(t) {
  var e = t.module, r = t.const_set, n = [];
  t.nil;
  var i = t.$$$;
  return t.add_stubs("new"), function(s, o) {
    var a = e(s, "Opal"), l = [a].concat(o), c = t.$r(l);
    return r(a, "REGEXP_START", "^"), r(a, "REGEXP_END", "$"), r(a, "FORBIDDEN_STARTING_IDENTIFIER_CHARS", "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F"), r(a, "FORBIDDEN_ENDING_IDENTIFIER_CHARS", "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F"), r(a, "INLINE_IDENTIFIER_REGEXP", c("Regexp").$new("[^" + i(a, "FORBIDDEN_STARTING_IDENTIFIER_CHARS") + "]*[^" + i(a, "FORBIDDEN_ENDING_IDENTIFIER_CHARS") + "]")), r(a, "FORBIDDEN_CONST_NAME_CHARS", "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F"), r(a, "CONST_NAME_REGEXP", c("Regexp").$new("" + i(a, "REGEXP_START") + "(::)?[A-Z][^" + i(a, "FORBIDDEN_CONST_NAME_CHARS") + "]*" + i(a, "REGEXP_END")));
  }(n[0], n);
};
Opal.modules["opal/mini"] = function(t) {
  var e = t.Object;
  return t.nil, t.add_stubs("require"), e.$require("opal/base"), e.$require("corelib/nil"), e.$require("corelib/boolean"), e.$require("corelib/string"), e.$require("corelib/comparable"), e.$require("corelib/enumerable"), e.$require("corelib/enumerator"), e.$require("corelib/array"), e.$require("corelib/hash"), e.$require("corelib/number"), e.$require("corelib/range"), e.$require("corelib/proc"), e.$require("corelib/method"), e.$require("corelib/regexp"), e.$require("corelib/variables"), e.$require("corelib/io"), e.$require("opal/regexp_anchors");
};
Opal.modules["corelib/kernel/format"] = function(t) {
  var e = t.coerce_to, r = t.module, n = t.slice, i = t.truthy, s = t.eqeq, o = t.Opal, a = t.Kernel, l = t.gvars, c = t.def, f = t.alias, m = t.nil, b = t.$$$;
  return t.add_stubs("respond_to?,[],==,length,coerce_to?,nil?,to_a,raise,to_int,fetch,Integer,Float,to_ary,to_str,inspect,to_s,format"), function(C) {
    var N = r(C, "Kernel");
    return c(N, "$format", function(A, Q) {
      var Te, ce, ge = m;
      l.DEBUG == null && (l.DEBUG = m), Te = n(arguments, 1), ce = Te, s(ce.$length(), 1) && i(ce["$[]"](0)["$respond_to?"]("to_ary")) && (ge = o["$coerce_to?"](ce["$[]"](0), b("Array"), "to_ary"), i(ge["$nil?"]()) || (ce = ge.$to_a()));
      var Y = "", fe = 0, ae, Re, pe = A.length, Ce, J, R, ve, F, ne, H, we, _e, X, w, h, d, _ = 1, g = 0, $, I = 0, D = 1, ie = 2, Me = 4, Je = 8, it = 16, dt = 32, St = 64, gt = 128;
      function wt() {
        $ & dt && a.$raise(b("ArgumentError"), "flag after width"), $ & gt && a.$raise(b("ArgumentError"), "flag after precision");
      }
      function bt() {
        $ & dt && a.$raise(b("ArgumentError"), "width given twice"), $ & gt && a.$raise(b("ArgumentError"), "width after precision");
      }
      function Tt(y) {
        return y >= ce.length && a.$raise(b("ArgumentError"), "too few arguments"), ce[y];
      }
      function yt() {
        switch (g) {
          case -1:
            a.$raise(b("ArgumentError"), "unnumbered(" + _ + ") mixed with numbered");
          case -2:
            a.$raise(b("ArgumentError"), "unnumbered(" + _ + ") mixed with named");
        }
        return g = _++, Tt(g - 1);
      }
      function Qe(y) {
        return g > 0 && a.$raise(b("ArgumentError"), "numbered(" + y + ") after unnumbered(" + g + ")"), g === -2 && a.$raise(b("ArgumentError"), "numbered(" + y + ") after named"), y < 1 && a.$raise(b("ArgumentError"), "invalid index - " + y + "$"), g = -1, Tt(y - 1);
      }
      function Ne() {
        return d === void 0 ? yt() : d;
      }
      function Le(y) {
        for (var P, be = ""; ; Re++) {
          if (Re === pe && a.$raise(b("ArgumentError"), "malformed format string - %*[0-9]"), A.charCodeAt(Re) < 48 || A.charCodeAt(Re) > 57)
            return Re--, P = parseInt(be, 10) || 0, P > 2147483647 && a.$raise(b("ArgumentError"), "" + y + " too big"), P;
          be += A.charAt(Re);
        }
      }
      function qe(y) {
        var P, be = Le(y);
        return A.charAt(Re + 1) === "$" ? (Re++, P = Qe(be)) : P = yt(), P.$to_int();
      }
      for (Re = A.indexOf("%"); Re !== -1; Re = A.indexOf("%", Re)) {
        switch (J = void 0, $ = I, ve = -1, F = -1, d = void 0, ae = Re, Re++, A.charAt(Re)) {
          case "%":
            fe = Re;
          case "":
          case `
`:
          case "\0":
            Re++;
            continue;
        }
        e:
          for (; Re < pe; Re++)
            switch (A.charAt(Re)) {
              case " ":
                wt(), $ |= it;
                continue e;
              case "#":
                wt(), $ |= D;
                continue e;
              case "+":
                wt(), $ |= Me;
                continue e;
              case "-":
                wt(), $ |= ie;
                continue e;
              case "0":
                wt(), $ |= Je;
                continue e;
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7":
              case "8":
              case "9":
                if (ne = Le("width"), A.charAt(Re + 1) === "$") {
                  if (Re + 2 === pe) {
                    J = "%", Re++;
                    break e;
                  }
                  d !== void 0 && a.$raise(b("ArgumentError"), "value given twice - %" + ne + "$"), d = Qe(ne), Re++;
                } else
                  bt(), $ |= dt, ve = ne;
                continue e;
              case "<":
              case "{":
                for (we = A.charAt(Re) === "<" ? ">" : "}", H = "", Re++; ; Re++) {
                  if (Re === pe && a.$raise(b("ArgumentError"), "malformed name - unmatched parenthesis"), A.charAt(Re) === we) {
                    if (g > 0 && a.$raise(b("ArgumentError"), "named " + H + " after unnumbered(" + g + ")"), g === -1 && a.$raise(b("ArgumentError"), "named " + H + " after numbered"), g = -2, (ce[0] === void 0 || !ce[0].$$is_hash) && a.$raise(b("ArgumentError"), "one hash required"), d = ce[0].$fetch(H), we === ">")
                      continue e;
                    if (J = d.toString(), F !== -1 && (J = J.slice(0, F)), $ & ie)
                      for (; J.length < ve; )
                        J = J + " ";
                    else
                      for (; J.length < ve; )
                        J = " " + J;
                    break e;
                  }
                  H += A.charAt(Re);
                }
              case "*":
                Re++, bt(), $ |= dt, ve = qe("width"), ve < 0 && ($ |= ie, ve = -ve);
                continue e;
              case ".":
                if ($ & gt && a.$raise(b("ArgumentError"), "precision given twice"), $ |= St | gt, F = 0, Re++, A.charAt(Re) === "*") {
                  Re++, F = qe("precision"), F < 0 && ($ &= ~St);
                  continue e;
                }
                F = Le("precision");
                continue e;
              case "d":
              case "i":
              case "u":
                if (Ce = a.$Integer(Ne()), Ce >= 0) {
                  for (J = Ce.toString(); J.length < F; )
                    J = "0" + J;
                  if ($ & ie)
                    for (($ & Me || $ & it) && (J = ($ & Me ? "+" : " ") + J); J.length < ve; )
                      J = J + " ";
                  else if ($ & Je && F === -1) {
                    for (; J.length < ve - ($ & Me || $ & it ? 1 : 0); )
                      J = "0" + J;
                    ($ & Me || $ & it) && (J = ($ & Me ? "+" : " ") + J);
                  } else
                    for (($ & Me || $ & it) && (J = ($ & Me ? "+" : " ") + J); J.length < ve; )
                      J = " " + J;
                } else {
                  for (J = (-Ce).toString(); J.length < F; )
                    J = "0" + J;
                  if ($ & ie)
                    for (J = "-" + J; J.length < ve; )
                      J = J + " ";
                  else if ($ & Je && F === -1) {
                    for (; J.length < ve - 1; )
                      J = "0" + J;
                    J = "-" + J;
                  } else
                    for (J = "-" + J; J.length < ve; )
                      J = " " + J;
                }
                break e;
              case "b":
              case "B":
              case "o":
              case "x":
              case "X":
                switch (A.charAt(Re)) {
                  case "b":
                  case "B":
                    _e = 2, X = "0b", w = /^1+/, h = "1";
                    break;
                  case "o":
                    _e = 8, X = "0", w = /^3?7+/, h = "7";
                    break;
                  case "x":
                  case "X":
                    _e = 16, X = "0x", w = /^f+/, h = "f";
                    break;
                }
                if (Ce = a.$Integer(Ne()), Ce >= 0) {
                  for (J = Ce.toString(_e); J.length < F; )
                    J = "0" + J;
                  if ($ & ie)
                    for (($ & Me || $ & it) && (J = ($ & Me ? "+" : " ") + J), $ & D && Ce !== 0 && (J = X + J); J.length < ve; )
                      J = J + " ";
                  else if ($ & Je && F === -1) {
                    for (; J.length < ve - ($ & Me || $ & it ? 1 : 0) - ($ & D && Ce !== 0 ? X.length : 0); )
                      J = "0" + J;
                    $ & D && Ce !== 0 && (J = X + J), ($ & Me || $ & it) && (J = ($ & Me ? "+" : " ") + J);
                  } else
                    for ($ & D && Ce !== 0 && (J = X + J), ($ & Me || $ & it) && (J = ($ & Me ? "+" : " ") + J); J.length < ve; )
                      J = " " + J;
                } else if ($ & Me || $ & it) {
                  for (J = (-Ce).toString(_e); J.length < F; )
                    J = "0" + J;
                  if ($ & ie)
                    for ($ & D && (J = X + J), J = "-" + J; J.length < ve; )
                      J = J + " ";
                  else if ($ & Je && F === -1) {
                    for (; J.length < ve - 1 - ($ & D ? 2 : 0); )
                      J = "0" + J;
                    $ & D && (J = X + J), J = "-" + J;
                  } else
                    for ($ & D && (J = X + J), J = "-" + J; J.length < ve; )
                      J = " " + J;
                } else {
                  for (J = (Ce >>> 0).toString(_e).replace(w, h); J.length < F - 2; )
                    J = h + J;
                  if ($ & ie)
                    for (J = ".." + J, $ & D && (J = X + J); J.length < ve; )
                      J = J + " ";
                  else if ($ & Je && F === -1) {
                    for (; J.length < ve - 2 - ($ & D ? X.length : 0); )
                      J = h + J;
                    J = ".." + J, $ & D && (J = X + J);
                  } else
                    for (J = ".." + J, $ & D && (J = X + J); J.length < ve; )
                      J = " " + J;
                }
                A.charAt(Re) === A.charAt(Re).toUpperCase() && (J = J.toUpperCase());
                break e;
              case "f":
              case "e":
              case "E":
              case "g":
              case "G":
                if (Ce = a.$Float(Ne()), Ce >= 0 || isNaN(Ce)) {
                  if (Ce === 1 / 0)
                    J = "Inf";
                  else
                    switch (A.charAt(Re)) {
                      case "f":
                        J = Ce.toFixed(F === -1 ? 6 : F);
                        break;
                      case "e":
                      case "E":
                        J = Ce.toExponential(F === -1 ? 6 : F);
                        break;
                      case "g":
                      case "G":
                        J = Ce.toExponential(), R = parseInt(J.split("e")[1], 10), R < -4 || R >= (F === -1 ? 6 : F) || (J = Ce.toPrecision(F === -1 ? $ & D ? 6 : void 0 : F));
                        break;
                    }
                  if ($ & ie)
                    for (($ & Me || $ & it) && (J = ($ & Me ? "+" : " ") + J); J.length < ve; )
                      J = J + " ";
                  else if ($ & Je && Ce !== 1 / 0 && !isNaN(Ce)) {
                    for (; J.length < ve - ($ & Me || $ & it ? 1 : 0); )
                      J = "0" + J;
                    ($ & Me || $ & it) && (J = ($ & Me ? "+" : " ") + J);
                  } else
                    for (($ & Me || $ & it) && (J = ($ & Me ? "+" : " ") + J); J.length < ve; )
                      J = " " + J;
                } else {
                  if (Ce === -1 / 0)
                    J = "Inf";
                  else
                    switch (A.charAt(Re)) {
                      case "f":
                        J = (-Ce).toFixed(F === -1 ? 6 : F);
                        break;
                      case "e":
                      case "E":
                        J = (-Ce).toExponential(F === -1 ? 6 : F);
                        break;
                      case "g":
                      case "G":
                        J = (-Ce).toExponential(), R = parseInt(J.split("e")[1], 10), R < -4 || R >= (F === -1 ? 6 : F) || (J = (-Ce).toPrecision(F === -1 ? $ & D ? 6 : void 0 : F));
                        break;
                    }
                  if ($ & ie)
                    for (J = "-" + J; J.length < ve; )
                      J = J + " ";
                  else if ($ & Je && Ce !== -1 / 0) {
                    for (; J.length < ve - 1; )
                      J = "0" + J;
                    J = "-" + J;
                  } else
                    for (J = "-" + J; J.length < ve; )
                      J = " " + J;
                }
                A.charAt(Re) === A.charAt(Re).toUpperCase() && Ce !== 1 / 0 && Ce !== -1 / 0 && !isNaN(Ce) && (J = J.toUpperCase()), J = J.replace(/([eE][-+]?)([0-9])$/, "$10$2");
                break e;
              case "a":
              case "A":
                a.$raise(b("NotImplementedError"), "`A` and `a` format field types are not implemented in Opal yet");
              case "c":
                if (Ce = Ne(), Ce["$respond_to?"]("to_ary") && (Ce = Ce.$to_ary()[0]), Ce["$respond_to?"]("to_str") ? J = Ce.$to_str() : J = String.fromCharCode(e(Ce, b("Integer"), "to_int")), J.length !== 1 && a.$raise(b("ArgumentError"), "%c requires a character"), $ & ie)
                  for (; J.length < ve; )
                    J = J + " ";
                else
                  for (; J.length < ve; )
                    J = " " + J;
                break e;
              case "p":
                if (J = Ne().$inspect(), F !== -1 && (J = J.slice(0, F)), $ & ie)
                  for (; J.length < ve; )
                    J = J + " ";
                else
                  for (; J.length < ve; )
                    J = " " + J;
                break e;
              case "s":
                if (J = Ne().$to_s(), F !== -1 && (J = J.slice(0, F)), $ & ie)
                  for (; J.length < ve; )
                    J = J + " ";
                else
                  for (; J.length < ve; )
                    J = " " + J;
                break e;
              default:
                a.$raise(b("ArgumentError"), "malformed format string - %" + A.charAt(Re));
            }
        J === void 0 && a.$raise(b("ArgumentError"), "malformed format string - %"), Y += A.slice(fe, ae) + J, fe = Re + 1;
      }
      return l.DEBUG && g >= 0 && _ < ce.length && a.$raise(b("ArgumentError"), "too many arguments for format string"), Y + A.slice(fe);
    }, -2), f(N, "sprintf", "format");
  }("::");
};
Opal.modules["corelib/string/encoding"] = function(t) {
  var e = t.klass, r = t.hash2, n = t.rb_plus, i = t.truthy, s = t.send, o = t.defs, a = t.eqeq, l = t.def, c = t.return_ivar, f = t.return_val, m = t.slice, b = t.Kernel, C = t.Opal, N = t.rb_lt, z, A = t.top, Q = [], Te = t.$r(Q), ce = t.nil, ge = t.$$$;
  return t.add_stubs("require,+,[],clone,initialize,new,instance_eval,to_proc,each,const_set,tr,==,default_external,attr_accessor,singleton_class,attr_reader,raise,register,length,bytes,force_encoding,dup,bytesize,enum_for,each_byte,to_a,each_char,each_codepoint,coerce_to!,find,<,default_external="), A.$require("corelib/string"), function(Y, fe) {
    var ae = e(Y, fe, "Encoding"), Re = ae.$$prototype;
    return Re.name = Re.dummy = ce, o(ae, "$register", function pe(Ce, J) {
      var R = pe.$$p || ce, ve = this, F = ce, ne = ce, H = ce, we = ce, _e = ce, X = ce;
      return pe.$$p = null, J == null && (J = r([], {})), F = n([Ce], i(ne = J["$[]"]("aliases")) ? ne : []), H = i(ne = J["$[]"]("ascii")) && ne, we = i(ne = J["$[]"]("dummy")) && ne, i(J["$[]"]("inherits")) ? (_e = J["$[]"]("inherits").$clone(), _e.$initialize(Ce, F, H, we)) : _e = ve.$new(Ce, F, H, we), R !== ce && s(_e, "instance_eval", [], R.$to_proc()), X = t.encodings, s(F, "each", [], function w(h) {
        var d = w.$$s == null ? this : w.$$s;
        return h == null && (h = ce), d.$const_set(h.$tr("-", "_"), _e), X[h] = _e;
      }, { $$s: ve });
    }, -2), o(ae, "$find", function(Ce) {
      var J = this;
      return a(Ce, "default_external") ? J.$default_external() : t.find_encoding(Ce);
    }), ae.$singleton_class().$attr_accessor("default_external"), ae.$attr_reader("name", "names"), l(ae, "$initialize", function(Ce, J, R, ve) {
      var F = this;
      return F.name = Ce, F.names = J, F.ascii = R, F.dummy = ve;
    }), l(ae, "$ascii_compatible?", c("ascii")), l(ae, "$dummy?", c("dummy")), l(ae, "$binary?", f(!1)), l(ae, "$to_s", c("name")), l(ae, "$inspect", function() {
      var Ce = this;
      return "#<Encoding:" + Ce.name + (i(Ce.dummy) ? " (dummy)" : ce) + ">";
    }), l(ae, "$charsize", function(Ce) {
      for (var J = 0, R = 0, ve = Ce.length; R < ve; R++) {
        var F = Ce.charCodeAt(R);
        F >= 55296 && F <= 56319 || J++;
      }
      return J;
    }), l(ae, "$each_char", function pe(Ce) {
      var J = pe.$$p || ce;
      pe.$$p = null;
      for (var R = "", ve = 0, F = Ce.length; ve < F; ve++) {
        var ne = Ce.charCodeAt(ve), H = Ce.charAt(ve);
        if (ne >= 56320 && ne <= 57343) {
          R = H;
          continue;
        } else
          ne >= 55296 && ne <= 56319 && (H = R + H);
        Ce.encoding.name != "UTF-8" && (H = new String(H), H.encoding = Ce.encoding), t.yield1(J, H);
      }
    }), l(ae, "$each_byte", function(Ce) {
      return m(arguments), b.$raise(ge("NotImplementedError"));
    }, -1), l(ae, "$bytesize", function(Ce) {
      return m(arguments), b.$raise(ge("NotImplementedError"));
    }, -1), e("::", ge("StandardError"), "EncodingError"), e("::", ge("EncodingError"), "CompatibilityError"), ce;
  }("::", null), s(ge("Encoding"), "register", ["UTF-8", r(["aliases", "ascii"], { aliases: ["CP65001"], ascii: !0 })], function Y() {
    var fe = Y.$$s == null ? this : Y.$$s;
    return l(fe, "$each_byte", function ae(Re) {
      var pe = ae.$$p || ce;
      ae.$$p = null;
      for (var Ce = 1 / 0, J, R = Re.length, ve = null, F = 0; F < R; ++F) {
        if (J = Re.charCodeAt(F), J > 55295 && J < 57344) {
          if (!ve) {
            if (J > 56319) {
              (Ce -= 3) > -1 && (t.yield1(pe, 239), t.yield1(pe, 191), t.yield1(pe, 189));
              continue;
            } else if (F + 1 === R) {
              (Ce -= 3) > -1 && (t.yield1(pe, 239), t.yield1(pe, 191), t.yield1(pe, 189));
              continue;
            }
            ve = J;
            continue;
          }
          if (J < 56320) {
            (Ce -= 3) > -1 && (t.yield1(pe, 239), t.yield1(pe, 191), t.yield1(pe, 189)), ve = J;
            continue;
          }
          J = (ve - 55296 << 10 | J - 56320) + 65536;
        } else
          ve && (Ce -= 3) > -1 && (t.yield1(pe, 239), t.yield1(pe, 191), t.yield1(pe, 189));
        if (ve = null, J < 128) {
          if ((Ce -= 1) < 0)
            break;
          t.yield1(pe, J);
        } else if (J < 2048) {
          if ((Ce -= 2) < 0)
            break;
          t.yield1(pe, J >> 6 | 192), t.yield1(pe, J & 63 | 128);
        } else if (J < 65536) {
          if ((Ce -= 3) < 0)
            break;
          t.yield1(pe, J >> 12 | 224), t.yield1(pe, J >> 6 & 63 | 128), t.yield1(pe, J & 63 | 128);
        } else if (J < 1114112) {
          if ((Ce -= 4) < 0)
            break;
          t.yield1(pe, J >> 18 | 240), t.yield1(pe, J >> 12 & 63 | 128), t.yield1(pe, J >> 6 & 63 | 128), t.yield1(pe, J & 63 | 128);
        }
      }
    }), l(fe, "$bytesize", function(Re) {
      return Re.$bytes().$length();
    });
  }, { $$s: A }), s(ge("Encoding"), "register", ["UTF-16LE"], function Y() {
    var fe = Y.$$s == null ? this : Y.$$s;
    return l(fe, "$each_byte", function ae(Re) {
      var pe = ae.$$p || ce;
      ae.$$p = null;
      for (var Ce = 0, J = Re.length; Ce < J; Ce++) {
        var R = Re.charCodeAt(Ce);
        t.yield1(pe, R & 255), t.yield1(pe, R >> 8);
      }
    }), l(fe, "$bytesize", function(Re) {
      return Re.length * 2;
    });
  }, { $$s: A }), s(ge("Encoding"), "register", ["UTF-16BE", r(["inherits"], { inherits: ge(ge("Encoding"), "UTF_16LE") })], function Y() {
    var fe = Y.$$s == null ? this : Y.$$s;
    return l(fe, "$each_byte", function ae(Re) {
      var pe = ae.$$p || ce;
      ae.$$p = null;
      for (var Ce = 0, J = Re.length; Ce < J; Ce++) {
        var R = Re.charCodeAt(Ce);
        t.yield1(pe, R >> 8), t.yield1(pe, R & 255);
      }
    });
  }, { $$s: A }), s(ge("Encoding"), "register", ["UTF-32LE"], function Y() {
    var fe = Y.$$s == null ? this : Y.$$s;
    return l(fe, "$each_byte", function ae(Re) {
      var pe = ae.$$p || ce;
      ae.$$p = null;
      for (var Ce = 0, J = Re.length; Ce < J; Ce++) {
        var R = Re.charCodeAt(Ce);
        t.yield1(pe, R & 255), t.yield1(pe, R >> 8), t.yield1(pe, 0), t.yield1(pe, 0);
      }
    }), l(fe, "$bytesize", function(Re) {
      return Re.length * 4;
    });
  }, { $$s: A }), s(ge("Encoding"), "register", ["UTF-32BE", r(["inherits"], { inherits: ge(ge("Encoding"), "UTF_32LE") })], function Y() {
    var fe = Y.$$s == null ? this : Y.$$s;
    return l(fe, "$each_byte", function ae(Re) {
      var pe = ae.$$p || ce;
      ae.$$p = null;
      for (var Ce = 0, J = Re.length; Ce < J; Ce++) {
        var R = Re.charCodeAt(Ce);
        t.yield1(pe, 0), t.yield1(pe, 0), t.yield1(pe, R >> 8), t.yield1(pe, R & 255);
      }
    });
  }, { $$s: A }), s(ge("Encoding"), "register", ["ASCII-8BIT", r(["aliases", "ascii"], { aliases: ["BINARY"], ascii: !0 })], function Y() {
    var fe = Y.$$s == null ? this : Y.$$s;
    return l(fe, "$each_char", function ae(Re) {
      var pe = ae.$$p || ce;
      ae.$$p = null;
      for (var Ce = 0, J = Re.length; Ce < J; Ce++) {
        var R = new String(Re.charAt(Ce));
        R.encoding = Re.encoding, t.yield1(pe, R);
      }
    }), l(fe, "$charsize", function(Re) {
      return Re.length;
    }), l(fe, "$each_byte", function ae(Re) {
      var pe = ae.$$p || ce;
      ae.$$p = null;
      for (var Ce = 0, J = Re.length; Ce < J; Ce++) {
        var R = Re.charCodeAt(Ce);
        t.yield1(pe, R & 255);
      }
    }), l(fe, "$bytesize", function(Re) {
      return Re.length;
    }), l(fe, "$binary?", f(!0));
  }, { $$s: A }), ge("Encoding").$register("ISO-8859-1", r(["aliases", "ascii", "inherits"], { aliases: ["ISO8859-1"], ascii: !0, inherits: ge(ge("Encoding"), "ASCII_8BIT") })), ge("Encoding").$register("US-ASCII", r(["aliases", "ascii", "inherits"], { aliases: ["ASCII"], ascii: !0, inherits: ge(ge("Encoding"), "ASCII_8BIT") })), function(Y, fe) {
    var ae = e(Y, fe, "String"), Re = ae.$$prototype;
    return Re.internal_encoding = Re.bytes = Re.encoding = ce, ae.$attr_reader("encoding"), ae.$attr_reader("internal_encoding"), t.prop(String.prototype, "bytes", ce), t.prop(String.prototype, "encoding", ge(ge("Encoding"), "UTF_8")), t.prop(String.prototype, "internal_encoding", ge(ge("Encoding"), "UTF_8")), l(ae, "$b", function() {
      var Ce = this;
      return Ce.$dup().$force_encoding("binary");
    }), l(ae, "$bytesize", function() {
      var Ce = this;
      return Ce.internal_encoding.$bytesize(Ce);
    }), l(ae, "$each_byte", function pe() {
      var Ce = pe.$$p || ce, J = this;
      return pe.$$p = null, Ce === ce ? s(J, "enum_for", ["each_byte"], function R() {
        var ve = R.$$s == null ? this : R.$$s;
        return ve.$bytesize();
      }, { $$s: J }) : (s(J.internal_encoding, "each_byte", [J], Ce.$to_proc()), J);
    }), l(ae, "$bytes", function() {
      var Ce = this, J = ce;
      return typeof Ce == "string" ? new String(Ce).$each_byte().$to_a() : (Ce.bytes = i(J = Ce.bytes) ? J : Ce.$each_byte().$to_a(), Ce.bytes.$dup());
    }), l(ae, "$each_char", function pe() {
      var Ce = pe.$$p || ce, J = this;
      return pe.$$p = null, Ce === ce ? s(J, "enum_for", ["each_char"], function R() {
        var ve = R.$$s == null ? this : R.$$s;
        return ve.$length();
      }, { $$s: J }) : (s(J.encoding, "each_char", [J], Ce.$to_proc()), J);
    }), l(ae, "$chars", function pe() {
      var Ce = pe.$$p || ce, J = this;
      return pe.$$p = null, i(Ce) ? s(J, "each_char", [], Ce.$to_proc()) : J.$each_char().$to_a();
    }), l(ae, "$each_codepoint", function pe() {
      var Ce = pe.$$p || ce, J = this;
      if (pe.$$p = null, Ce === ce)
        return J.$enum_for("each_codepoint");
      for (var R = 0, ve = J.length; R < ve; R++)
        t.yield1(Ce, J.codePointAt(R));
      return J;
    }), l(ae, "$codepoints", function pe() {
      var Ce = pe.$$p || ce, J = this;
      return pe.$$p = null, Ce !== ce ? s(J, "each_codepoint", [], Ce.$to_proc()) : J.$each_codepoint().$to_a();
    }), l(ae, "$encode", function(Ce) {
      var J = this;
      return t.enc(J, Ce);
    }), l(ae, "$force_encoding", function(Ce) {
      var J = this, R = J;
      return Ce === R.encoding || (Ce = C["$coerce_to!"](Ce, ge("String"), "to_s"), Ce = ge("Encoding").$find(Ce), Ce === R.encoding) || (R = t.set_encoding(R, Ce)), R;
    }), l(ae, "$getbyte", function(Ce) {
      var J = this, R = ce;
      return R = J.$bytes(), Ce = C["$coerce_to!"](Ce, ge("Integer"), "to_int"), i(N(R.$length(), Ce)) ? ce : R["$[]"](Ce);
    }), l(ae, "$initialize_copy", function(Ce) {
      return `
      self.encoding = other.encoding;
      self.internal_encoding = other.internal_encoding;
    `;
    }), l(ae, "$valid_encoding?", f(!0));
  }("::", null), z = [ge(Te("Encoding"), "UTF_8")], s(ge("Encoding"), "default_external=", z), z[z.length - 1];
};
Opal.modules["corelib/math"] = function(t) {
  var e = t.type_error, r = t.module, n = t.const_set, i = t.Class, s = t.slice, o = t.Kernel, a = t.defs, l = t.truthy, c = t.send, f = t.def, m = t.rb_minus, b = t.eqeqeq, C = t.rb_divide, N = [], z = t.nil, A = t.$$$;
  return t.add_stubs("new,raise,Float,Integer,module_function,each,define_method,checked,float!,===,gamma,-,integer!,/,infinite?"), function(Q, Te) {
    var ce = r(Q, "Math"), ge = [ce].concat(Te), Y = t.$r(ge);
    return n(ce, "E", Math.E), n(ce, "PI", Math.PI), n(ce, "DomainError", i.$new(A("StandardError"))), a(ce, "$checked", function(ae, Re) {
      var pe, Ce;
      if (pe = s(arguments, 1), Ce = pe, isNaN(Ce[0]) || Ce.length == 2 && isNaN(Ce[1]))
        return NaN;
      var J = Math[ae].apply(null, Ce);
      return isNaN(J) && o.$raise(Y("DomainError"), 'Numerical argument is out of domain - "' + ae + '"'), J;
    }, -2), a(ce, "$float!", function(ae) {
      try {
        return o.$Float(ae);
      } catch (Re) {
        if (t.rescue(Re, [A("ArgumentError")]))
          try {
            return o.$raise(e(ae, A("Float")));
          } finally {
            t.pop_exception();
          }
        else
          throw Re;
      }
    }), a(ce, "$integer!", function(ae) {
      try {
        return o.$Integer(ae);
      } catch (Re) {
        if (t.rescue(Re, [A("ArgumentError")]))
          try {
            return o.$raise(e(ae, A("Integer")));
          } finally {
            t.pop_exception();
          }
        else
          throw Re;
      }
    }), ce.$module_function(), l(typeof Math.erf < "u") || t.prop(Math, "erf", function(fe) {
      var ae = 0.254829592, Re = -0.284496736, pe = 1.421413741, Ce = -1.453152027, J = 1.061405429, R = 0.3275911, ve = 1;
      fe < 0 && (ve = -1), fe = Math.abs(fe);
      var F = 1 / (1 + R * fe), ne = 1 - ((((J * F + Ce) * F + pe) * F + Re) * F + ae) * F * Math.exp(-fe * fe);
      return ve * ne;
    }), l(typeof Math.erfc < "u") || t.prop(Math, "erfc", function(fe) {
      var ae = Math.abs(fe), Re = 1 / (0.5 * ae + 1), pe = Re * 0.17087277 + -0.82215223, Ce = Re * pe + 1.48851587, J = Re * Ce + -1.13520398, R = Re * J + 0.27886807, ve = Re * R + -0.18628806, F = Re * ve + 0.09678418, ne = Re * F + 0.37409196, H = Re * ne + 1.00002368, we = Re * H, _e = -ae * ae - 1.26551223 + we, X = Re * Math.exp(_e);
      return fe < 0 ? 2 - X : X;
    }), c(["acos", "acosh", "asin", "asinh", "atan", "atanh", "cbrt", "cos", "cosh", "erf", "erfc", "exp", "sin", "sinh", "sqrt", "tanh"], "each", [], function fe(ae) {
      var Re = fe.$$s == null ? this : fe.$$s;
      return ae == null && (ae = z), c(Re, "define_method", [ae], function(Ce) {
        return Ce == null && (Ce = z), A("Math").$checked(ae, A("Math")["$float!"](Ce));
      });
    }, { $$s: ce }), f(ce, "$atan2", function(ae, Re) {
      return A("Math").$checked("atan2", A("Math")["$float!"](ae), A("Math")["$float!"](Re));
    }), f(ce, "$hypot", function(ae, Re) {
      return A("Math").$checked("hypot", A("Math")["$float!"](ae), A("Math")["$float!"](Re));
    }), f(ce, "$frexp", function(ae) {
      if (ae = Y("Math")["$float!"](ae), isNaN(ae))
        return [NaN, 0];
      var Re = Math.floor(Math.log(Math.abs(ae)) / Math.log(2)) + 1, pe = ae / Math.pow(2, Re);
      return [pe, Re];
    }), f(ce, "$gamma", function(ae) {
      ae = Y("Math")["$float!"](ae);
      var Re, pe, Ce, J, R, ve, F, ne, H, we = 4.7421875, _e = [
        0.9999999999999971,
        57.15623566586292,
        -59.59796035547549,
        14.136097974741746,
        -0.4919138160976202,
        3399464998481189e-20,
        4652362892704858e-20,
        -9837447530487956e-20,
        1580887032249125e-19,
        -21026444172410488e-20,
        21743961811521265e-20,
        -1643181065367639e-19,
        8441822398385275e-20,
        -26190838401581408e-21,
        36899182659531625e-22
      ];
      if (isNaN(ae))
        return NaN;
      if (ae === 0 && 1 / ae < 0)
        return -1 / 0;
      if ((ae === -1 || ae === -1 / 0) && o.$raise(Y("DomainError"), 'Numerical argument is out of domain - "gamma"'), Y("Integer")["$==="](ae)) {
        if (ae <= 0)
          return isFinite(ae) ? 1 / 0 : NaN;
        if (ae > 171)
          return 1 / 0;
        for (J = ae - 2, R = ae - 1; J > 1; )
          R *= J, J--;
        return R == 0 && (R = 1), R;
      }
      if (ae < 0.5)
        return Math.PI / (Math.sin(Math.PI * ae) * A("Math").$gamma(m(1, ae)));
      if (ae >= 171.35)
        return 1 / 0;
      if (ae > 85)
        return ve = ae * ae, F = ve * ae, ne = F * ae, H = ne * ae, Math.sqrt(2 * Math.PI / ae) * Math.pow(ae / Math.E, ae) * (1 + 1 / (12 * ae) + 1 / (288 * ve) - 139 / (51840 * F) - 571 / (2488320 * ne) + 163879 / (209018880 * H) + 5246819 / (75246796800 * H * ae));
      for (ae -= 1, Ce = _e[0], Re = 1; Re < _e.length; ++Re)
        Ce += _e[Re] / (ae + Re);
      return pe = ae + we + 0.5, Math.sqrt(2 * Math.PI) * Math.pow(pe, ae + 0.5) * Math.exp(-pe) * Ce;
    }), f(ce, "$ldexp", function(ae, Re) {
      return ae = Y("Math")["$float!"](ae), Re = Y("Math")["$integer!"](Re), isNaN(Re) && o.$raise(A("RangeError"), "float NaN out of range of integer"), ae * Math.pow(2, Re);
    }), f(ce, "$lgamma", function(ae) {
      return ae == -1 ? [1 / 0, 1] : [Math.log(Math.abs(A("Math").$gamma(ae))), A("Math").$gamma(ae) < 0 ? -1 : 1];
    }), f(ce, "$log", function(ae, Re) {
      return b(A("String"), ae) && o.$raise(e(ae, A("Float"))), l(Re == null) ? A("Math").$checked("log", A("Math")["$float!"](ae)) : (b(A("String"), Re) && o.$raise(e(Re, A("Float"))), C(A("Math").$checked("log", A("Math")["$float!"](ae)), A("Math").$checked("log", A("Math")["$float!"](Re))));
    }, -2), f(ce, "$log10", function(ae) {
      return b(A("String"), ae) && o.$raise(e(ae, A("Float"))), A("Math").$checked("log10", A("Math")["$float!"](ae));
    }), f(ce, "$log2", function(ae) {
      return b(A("String"), ae) && o.$raise(e(ae, A("Float"))), A("Math").$checked("log2", A("Math")["$float!"](ae));
    }), f(ce, "$tan", function(ae) {
      return ae = A("Math")["$float!"](ae), l(ae["$infinite?"]()) ? A(A("Float"), "NAN") : A("Math").$checked("tan", A("Math")["$float!"](ae));
    });
  }("::", N);
};
Opal.modules["corelib/complex/base"] = function(t) {
  var e = t.module, r = t.truthy, n = t.def, i = t.klass, s = [], o = t.nil;
  return t.add_stubs("new,from_string"), function(a, l) {
    var c = e(a, "Kernel"), f = [c].concat(l), m = t.$r(f);
    return n(c, "$Complex", function(C, N) {
      return N == null && (N = o), r(N) ? m("Complex").$new(C, N) : m("Complex").$new(C, 0);
    }, -2);
  }("::", s), function(a, l, c) {
    var f = i(a, l, "String"), m = [f].concat(c), b = t.$r(m);
    return n(f, "$to_c", function() {
      var N = this;
      return b("Complex").$from_string(N);
    });
  }("::", null, s);
};
Opal.modules["corelib/complex"] = function(t) {
  var e = t.klass, r = t.truthy, n = t.eqeqeq, i = t.Kernel, s = t.defs, o = t.rb_times, a = t.def, l = t.rb_plus, c = t.rb_minus, f = t.rb_divide, m = t.eqeq, b = t.to_ary, C = t.rb_gt, N = t.neqeq, z = t.return_val, A = t.const_set, Q = t.alias, Te = t.top, ce = [], ge = t.nil, Y = t.$$$;
  return t.add_stubs("require,real?,===,raise,new,*,cos,sin,attr_reader,freeze,class,==,real,imag,Complex,-@,+,__coerced__,-,nan?,/,conj,abs2,quo,polar,exp,log,>,!=,divmod,**,hypot,atan2,lcm,denominator,finite?,infinite?,numerator,abs,arg,rationalize,to_f,to_i,to_r,inspect,zero?,positive?,Rational,rect,angle"), Te.$require("corelib/numeric"), Te.$require("corelib/complex/base"), function(fe, ae, Re) {
    var pe = e(fe, ae, "Complex"), Ce = [pe].concat(Re), J = t.$r(Ce), R = pe.$$prototype;
    return R.real = R.imag = ge, s(pe, "$rect", function(F, ne) {
      var H = this;
      return ne == null && (ne = 0), n(Y("Numeric"), F) && r(F["$real?"]()) && n(Y("Numeric"), ne) && r(ne["$real?"]()) || i.$raise(Y("TypeError"), "not a real"), H.$new(F, ne);
    }, -2), s(pe, "$polar", function(F, ne) {
      var H = this;
      return ne == null && (ne = 0), n(Y("Numeric"), F) && r(F["$real?"]()) && n(Y("Numeric"), ne) && r(ne["$real?"]()) || i.$raise(Y("TypeError"), "not a real"), H.$new(o(F, Y("Math").$cos(ne)), o(F, Y("Math").$sin(ne)));
    }, -2), pe.$attr_reader("real", "imag"), a(pe, "$initialize", function(F, ne) {
      var H = this;
      return ne == null && (ne = 0), H.real = F, H.imag = ne, H.$freeze();
    }, -2), a(pe, "$coerce", function(F) {
      var ne = this;
      return n(Y("Complex"), F) ? [F, ne] : n(Y("Numeric"), F) && r(F["$real?"]()) ? [Y("Complex").$new(F, 0), ne] : i.$raise(Y("TypeError"), "" + F.$class() + " can't be coerced into Complex");
    }), a(pe, "$==", function(F) {
      var ne = this, H = ge;
      return n(Y("Complex"), F) ? r(H = ne.real["$=="](F.$real())) ? ne.imag["$=="](F.$imag()) : H : n(Y("Numeric"), F) && r(F["$real?"]()) ? r(H = ne.real["$=="](F)) ? ne.imag["$=="](0) : H : F["$=="](ne);
    }), a(pe, "$-@", function() {
      var F = this;
      return i.$Complex(F.real["$-@"](), F.imag["$-@"]());
    }), a(pe, "$+", function(F) {
      var ne = this;
      return n(Y("Complex"), F) ? i.$Complex(l(ne.real, F.$real()), l(ne.imag, F.$imag())) : n(Y("Numeric"), F) && r(F["$real?"]()) ? i.$Complex(l(ne.real, F), ne.imag) : ne.$__coerced__("+", F);
    }), a(pe, "$-", function(F) {
      var ne = this;
      return n(Y("Complex"), F) ? i.$Complex(c(ne.real, F.$real()), c(ne.imag, F.$imag())) : n(Y("Numeric"), F) && r(F["$real?"]()) ? i.$Complex(c(ne.real, F), ne.imag) : ne.$__coerced__("-", F);
    }), a(pe, "$*", function(F) {
      var ne = this;
      return n(Y("Complex"), F) ? i.$Complex(c(o(ne.real, F.$real()), o(ne.imag, F.$imag())), l(o(ne.real, F.$imag()), o(ne.imag, F.$real()))) : n(Y("Numeric"), F) && r(F["$real?"]()) ? i.$Complex(o(ne.real, F), o(ne.imag, F)) : ne.$__coerced__("*", F);
    }), a(pe, "$/", function(F) {
      var ne = this;
      return n(Y("Complex"), F) ? n(Y("Number"), ne.real) && r(ne.real["$nan?"]()) || n(Y("Number"), ne.imag) && r(ne.imag["$nan?"]()) || n(Y("Number"), F.$real()) && r(F.$real()["$nan?"]()) || n(Y("Number"), F.$imag()) && r(F.$imag()["$nan?"]()) ? Y("Complex").$new(Y(Y("Float"), "NAN"), Y(Y("Float"), "NAN")) : f(o(ne, F.$conj()), F.$abs2()) : n(Y("Numeric"), F) && r(F["$real?"]()) ? i.$Complex(ne.real.$quo(F), ne.imag.$quo(F)) : ne.$__coerced__("/", F);
    }), a(pe, "$**", function(F) {
      var ne, H, we = this, _e = ge, X = ge, w = ge, h = ge, d = ge, _ = ge, g = ge, $ = ge, I = ge, D = ge, ie = ge;
      if (m(F, 0))
        return Y("Complex").$new(1, 0);
      if (n(Y("Complex"), F))
        return H = we.$polar(), ne = b(H), _e = ne[0] == null ? ge : ne[0], X = ne[1] == null ? ge : ne[1], w = F.$real(), h = F.$imag(), d = Y("Math").$exp(c(o(w, Y("Math").$log(_e)), o(h, X))), _ = l(o(X, w), o(h, Y("Math").$log(_e))), Y("Complex").$polar(d, _);
      if (n(Y("Integer"), F))
        if (r(C(F, 0))) {
          for (g = we, $ = g, I = c(F, 1); N(I, 0); ) {
            for (H = I.$divmod(2), ne = b(H), D = ne[0] == null ? ge : ne[0], ie = ne[1] == null ? ge : ne[1]; m(ie, 0); )
              g = i.$Complex(c(o(g.$real(), g.$real()), o(g.$imag(), g.$imag())), o(o(2, g.$real()), g.$imag())), I = D, H = I.$divmod(2), ne = b(H), D = ne[0] == null ? ge : ne[0], ie = ne[1] == null ? ge : ne[1];
            $ = o($, g), I = c(I, 1);
          }
          return $;
        } else
          return f(Y("Rational").$new(1, 1), we)["$**"](F["$-@"]());
      else
        return n(Y("Float"), F) || n(Y("Rational"), F) ? (H = we.$polar(), ne = b(H), _e = ne[0] == null ? ge : ne[0], X = ne[1] == null ? ge : ne[1], Y("Complex").$polar(_e["$**"](F), o(X, F))) : we.$__coerced__("**", F);
    }), a(pe, "$abs", function() {
      var F = this;
      return Y("Math").$hypot(F.real, F.imag);
    }), a(pe, "$abs2", function() {
      var F = this;
      return l(o(F.real, F.real), o(F.imag, F.imag));
    }), a(pe, "$angle", function() {
      var F = this;
      return Y("Math").$atan2(F.imag, F.real);
    }), a(pe, "$conj", function() {
      var F = this;
      return i.$Complex(F.real, F.imag["$-@"]());
    }), a(pe, "$denominator", function() {
      var F = this;
      return F.real.$denominator().$lcm(F.imag.$denominator());
    }), a(pe, "$eql?", function(F) {
      var ne = this, H = ge, we = ge;
      return r(H = r(we = J("Complex")["$==="](F)) ? ne.real.$class()["$=="](ne.imag.$class()) : we) ? ne["$=="](F) : H;
    }), a(pe, "$fdiv", function(F) {
      var ne = this;
      return n(Y("Numeric"), F) || i.$raise(Y("TypeError"), "" + F.$class() + " can't be coerced into Complex"), f(ne, F);
    }), a(pe, "$finite?", function() {
      var F = this, ne = ge;
      return r(ne = F.real["$finite?"]()) ? F.imag["$finite?"]() : ne;
    }), a(pe, "$hash", function() {
      var F = this;
      return "Complex:" + F.real + ":" + F.imag;
    }), a(pe, "$infinite?", function() {
      var F = this, ne = ge;
      return r(ne = F.real["$infinite?"]()) ? ne : F.imag["$infinite?"]();
    }), a(pe, "$inspect", function() {
      var F = this;
      return "(" + F + ")";
    }), a(pe, "$numerator", function() {
      var F = this, ne = ge;
      return ne = F.$denominator(), i.$Complex(o(F.real.$numerator(), f(ne, F.real.$denominator())), o(F.imag.$numerator(), f(ne, F.imag.$denominator())));
    }), a(pe, "$polar", function() {
      var F = this;
      return [F.$abs(), F.$arg()];
    }), a(pe, "$rationalize", function(F) {
      var ne = this;
      return arguments.length > 1 && i.$raise(Y("ArgumentError"), "wrong number of arguments (" + arguments.length + " for 0..1)"), N(ne.imag, 0) && i.$raise(Y("RangeError"), "can't convert " + ne + " into Rational"), ne.$real().$rationalize(F);
    }, -1), a(pe, "$real?", z(!1)), a(pe, "$rect", function() {
      var F = this;
      return [F.real, F.imag];
    }), a(pe, "$to_f", function() {
      var F = this;
      return m(F.imag, 0) || i.$raise(Y("RangeError"), "can't convert " + F + " into Float"), F.real.$to_f();
    }), a(pe, "$to_i", function() {
      var F = this;
      return m(F.imag, 0) || i.$raise(Y("RangeError"), "can't convert " + F + " into Integer"), F.real.$to_i();
    }), a(pe, "$to_r", function() {
      var F = this;
      return m(F.imag, 0) || i.$raise(Y("RangeError"), "can't convert " + F + " into Rational"), F.real.$to_r();
    }), a(pe, "$to_s", function() {
      var F = this, ne = ge;
      return ne = F.real.$inspect(), ne = l(ne, n(Y("Number"), F.imag) && r(F.imag["$nan?"]()) || r(F.imag["$positive?"]()) || r(F.imag["$zero?"]()) ? "+" : "-"), ne = l(ne, F.imag.$abs().$inspect()), n(Y("Number"), F.imag) && (r(F.imag["$nan?"]()) || r(F.imag["$infinite?"]())) && (ne = l(ne, "*")), l(ne, "i");
    }), A(Ce[0], "I", pe.$new(0, 1)), s(pe, "$from_string", function(F) {
      var ne = /[+-]?[\d_]+(\.[\d_]+)?(e\d+)?/;
      F.match(ne);
      var H, we;
      function _e() {
        return ne.test(F);
      }
      function X() {
        var h = F.match(ne), d = h[0];
        return F = F.slice(d.length), d.replace(/_/g, "");
      }
      function w() {
        if (_e()) {
          var h = parseFloat(X());
          if (F[0] === "/")
            if (F = F.slice(1), _e()) {
              var d = parseFloat(X());
              return i.$Rational(h, d);
            } else
              return F = "/" + F, h;
          else
            return h;
        } else
          return null;
      }
      return H = w(), H ? (we = w(), we ? i.$Complex(H, we) : F[0] === "i" ? i.$Complex(0, H) : i.$Complex(H, 0)) : F[0] === "i" ? i.$Complex(0, 1) : F[0] === "-" && F[1] === "i" ? i.$Complex(0, -1) : F[0] === "+" && F[1] === "i" ? i.$Complex(0, 1) : i.$Complex(0, 0);
    }), function(ve, F) {
      return Q(ve, "rectangular", "rect");
    }(t.get_singleton_class(pe)), Q(pe, "arg", "angle"), Q(pe, "conjugate", "conj"), Q(pe, "divide", "/"), Q(pe, "imaginary", "imag"), Q(pe, "magnitude", "abs"), Q(pe, "phase", "arg"), Q(pe, "quo", "/"), Q(pe, "rectangular", "rect"), t.udef(pe, "$negative?"), t.udef(pe, "$positive?"), t.udef(pe, "$step"), ge;
  }("::", Y("Numeric"), ce);
};
Opal.modules["corelib/rational/base"] = function(t) {
  var e = t.module, r = t.def, n = t.klass;
  t.nil;
  var i = t.$$$;
  return t.add_stubs("convert,from_string"), function(s) {
    var o = e(s, "Kernel");
    return r(o, "$Rational", function(l, c) {
      return c == null && (c = 1), i("Rational").$convert(l, c);
    }, -2);
  }("::"), function(s, o) {
    var a = n(s, o, "String");
    return r(a, "$to_r", function() {
      var c = this;
      return i("Rational").$from_string(c);
    });
  }("::", null);
};
Opal.modules["corelib/rational"] = function(t) {
  var e = t.klass, r = t.eqeq, n = t.Kernel, i = t.truthy, s = t.rb_lt, o = t.rb_divide, a = t.defs, l = t.eqeqeq, c = t.not, f = t.Opal, m = t.def, b = t.return_ivar, C = t.rb_minus, N = t.rb_times, z = t.rb_plus, A = t.rb_gt, Q = t.rb_le, Te = t.return_self, ce = t.alias, ge = t.top, Y = t.nil, fe = t.$$$;
  return t.add_stubs("require,to_i,==,raise,<,-@,new,gcd,/,nil?,===,reduce,to_r,!,equal?,coerce_to!,freeze,to_f,numerator,denominator,<=>,-,*,__coerced__,+,Rational,>,**,abs,ceil,with_precision,floor,<=,truncate,send"), ge.$require("corelib/numeric"), ge.$require("corelib/rational/base"), function(ae, Re) {
    var pe = e(ae, Re, "Rational"), Ce = pe.$$prototype;
    return Ce.num = Ce.den = Y, a(pe, "$reduce", function(R, ve) {
      var F = this, ne = Y;
      if (R = R.$to_i(), ve = ve.$to_i(), r(ve, 0))
        n.$raise(fe("ZeroDivisionError"), "divided by 0");
      else if (i(s(ve, 0)))
        R = R["$-@"](), ve = ve["$-@"]();
      else if (r(ve, 1))
        return F.$new(R, ve);
      return ne = R.$gcd(ve), F.$new(o(R, ne), o(ve, ne));
    }), a(pe, "$convert", function(R, ve) {
      var F = this;
      return (i(R["$nil?"]()) || i(ve["$nil?"]())) && n.$raise(fe("TypeError"), "cannot convert nil into Rational"), l(fe("Integer"), R) && l(fe("Integer"), ve) ? F.$reduce(R, ve) : ((l(fe("Float"), R) || l(fe("String"), R) || l(fe("Complex"), R)) && (R = R.$to_r()), (l(fe("Float"), ve) || l(fe("String"), ve) || l(fe("Complex"), ve)) && (ve = ve.$to_r()), i(ve["$equal?"](1)) && c(fe("Integer")["$==="](R)) ? f["$coerce_to!"](R, fe("Rational"), "to_r") : l(fe("Numeric"), R) && l(fe("Numeric"), ve) ? o(R, ve) : F.$reduce(R, ve));
    }), m(pe, "$initialize", function(R, ve) {
      var F = this;
      return F.num = R, F.den = ve, F.$freeze();
    }), m(pe, "$numerator", b("num")), m(pe, "$denominator", b("den")), m(pe, "$coerce", function(R) {
      var ve = this, F = Y;
      return l(fe("Rational"), F = R) ? [R, ve] : l(fe("Integer"), F) ? [R.$to_r(), ve] : l(fe("Float"), F) ? [R, ve.$to_f()] : Y;
    }), m(pe, "$==", function(R) {
      var ve = this, F = Y, ne = Y;
      return l(fe("Rational"), F = R) ? i(ne = ve.num["$=="](R.$numerator())) ? ve.den["$=="](R.$denominator()) : ne : l(fe("Integer"), F) ? i(ne = ve.num["$=="](R)) ? ve.den["$=="](1) : ne : l(fe("Float"), F) ? ve.$to_f()["$=="](R) : R["$=="](ve);
    }), m(pe, "$<=>", function(R) {
      var ve = this, F = Y;
      return l(fe("Rational"), F = R) ? C(N(ve.num, R.$denominator()), N(ve.den, R.$numerator()))["$<=>"](0) : l(fe("Integer"), F) ? C(ve.num, N(ve.den, R))["$<=>"](0) : l(fe("Float"), F) ? ve.$to_f()["$<=>"](R) : ve.$__coerced__("<=>", R);
    }), m(pe, "$+", function(R) {
      var ve = this, F = Y, ne = Y, H = Y;
      return l(fe("Rational"), F = R) ? (ne = z(N(ve.num, R.$denominator()), N(ve.den, R.$numerator())), H = N(ve.den, R.$denominator()), n.$Rational(ne, H)) : l(fe("Integer"), F) ? n.$Rational(z(ve.num, N(R, ve.den)), ve.den) : l(fe("Float"), F) ? z(ve.$to_f(), R) : ve.$__coerced__("+", R);
    }), m(pe, "$-", function(R) {
      var ve = this, F = Y, ne = Y, H = Y;
      return l(fe("Rational"), F = R) ? (ne = C(N(ve.num, R.$denominator()), N(ve.den, R.$numerator())), H = N(ve.den, R.$denominator()), n.$Rational(ne, H)) : l(fe("Integer"), F) ? n.$Rational(C(ve.num, N(R, ve.den)), ve.den) : l(fe("Float"), F) ? C(ve.$to_f(), R) : ve.$__coerced__("-", R);
    }), m(pe, "$*", function(R) {
      var ve = this, F = Y, ne = Y, H = Y;
      return l(fe("Rational"), F = R) ? (ne = N(ve.num, R.$numerator()), H = N(ve.den, R.$denominator()), n.$Rational(ne, H)) : l(fe("Integer"), F) ? n.$Rational(N(ve.num, R), ve.den) : l(fe("Float"), F) ? N(ve.$to_f(), R) : ve.$__coerced__("*", R);
    }), m(pe, "$/", function(R) {
      var ve = this, F = Y, ne = Y, H = Y;
      return l(fe("Rational"), F = R) ? (ne = N(ve.num, R.$denominator()), H = N(ve.den, R.$numerator()), n.$Rational(ne, H)) : l(fe("Integer"), F) ? r(R, 0) ? o(ve.$to_f(), 0) : n.$Rational(ve.num, N(ve.den, R)) : l(fe("Float"), F) ? o(ve.$to_f(), R) : ve.$__coerced__("/", R);
    }), m(pe, "$**", function(R) {
      var ve = this, F = Y;
      return l(fe("Integer"), F = R) ? r(ve, 0) && i(s(R, 0)) ? fe(fe("Float"), "INFINITY") : i(A(R, 0)) ? n.$Rational(ve.num["$**"](R), ve.den["$**"](R)) : i(s(R, 0)) ? n.$Rational(ve.den["$**"](R["$-@"]()), ve.num["$**"](R["$-@"]())) : n.$Rational(1, 1) : l(fe("Float"), F) ? ve.$to_f()["$**"](R) : l(fe("Rational"), F) ? r(R, 0) ? n.$Rational(1, 1) : r(R.$denominator(), 1) ? i(s(R, 0)) ? n.$Rational(ve.den["$**"](R.$numerator().$abs()), ve.num["$**"](R.$numerator().$abs())) : n.$Rational(ve.num["$**"](R.$numerator()), ve.den["$**"](R.$numerator())) : r(ve, 0) && i(s(R, 0)) ? n.$raise(fe("ZeroDivisionError"), "divided by 0") : ve.$to_f()["$**"](R) : ve.$__coerced__("**", R);
    }), m(pe, "$abs", function() {
      var R = this;
      return n.$Rational(R.num.$abs(), R.den.$abs());
    }), m(pe, "$ceil", function(R) {
      var ve = this;
      return R == null && (R = 0), r(R, 0) ? o(ve.num["$-@"](), ve.den)["$-@"]().$ceil() : ve.$with_precision("ceil", R);
    }, -1), m(pe, "$floor", function(R) {
      var ve = this;
      return R == null && (R = 0), r(R, 0) ? o(ve.num["$-@"](), ve.den)["$-@"]().$floor() : ve.$with_precision("floor", R);
    }, -1), m(pe, "$hash", function() {
      var R = this;
      return "Rational:" + R.num + ":" + R.den;
    }), m(pe, "$inspect", function() {
      var R = this;
      return "(" + R + ")";
    }), m(pe, "$rationalize", function(R) {
      var ve = this;
      if (arguments.length > 1 && n.$raise(fe("ArgumentError"), "wrong number of arguments (" + arguments.length + " for 0..1)"), R == null)
        return ve;
      for (var F = R.$abs(), ne = C(ve, F), H = z(ve, F), we = 0, _e = 1, X = 1, w = 0, h, d, _, g, $; _ = ne.$ceil(), !Q(_, H); )
        g = _ - 1, h = g * _e + we, d = g * w + X, $ = o(1, C(H, g)), H = o(1, C(ne, g)), ne = $, we = _e, X = w, _e = h, w = d;
      return n.$Rational(_ * _e + we, _ * w + X);
    }, -1), m(pe, "$round", function(R) {
      var ve = this, F = Y, ne = Y, H = Y;
      return R == null && (R = 0), r(R, 0) ? r(ve.num, 0) ? 0 : r(ve.den, 1) ? ve.num : (F = z(N(ve.num.$abs(), 2), ve.den), ne = N(ve.den, 2), H = o(F, ne).$truncate(), i(s(ve.num, 0)) ? H["$-@"]() : H) : ve.$with_precision("round", R);
    }, -1), m(pe, "$to_f", function() {
      var R = this;
      return o(R.num, R.den);
    }), m(pe, "$to_i", function() {
      var R = this;
      return R.$truncate();
    }), m(pe, "$to_r", Te), m(pe, "$to_s", function() {
      var R = this;
      return "" + R.num + "/" + R.den;
    }), m(pe, "$truncate", function(R) {
      var ve = this;
      return R == null && (R = 0), r(R, 0) ? i(s(ve.num, 0)) ? ve.$ceil() : ve.$floor() : ve.$with_precision("truncate", R);
    }, -1), m(pe, "$with_precision", function(R, ve) {
      var F = this, ne = Y, H = Y;
      return l(fe("Integer"), ve) || n.$raise(fe("TypeError"), "not an Integer"), ne = 10["$**"](ve), H = N(F, ne), i(s(ve, 1)) ? o(H.$send(R), ne).$to_i() : n.$Rational(H.$send(R), ne);
    }), a(pe, "$from_string", function(R) {
      var ve = R.trimLeft(), F = /^[+-]?[\d_]+(\.[\d_]+)?/;
      ve.match(F);
      var ne, H;
      function we() {
        return F.test(ve);
      }
      function _e() {
        var X = ve.match(F), w = X[0];
        return ve = ve.slice(w.length), w.replace(/_/g, "");
      }
      return we() ? (ne = parseFloat(_e()), ve[0] === "/" ? (ve = ve.slice(1), we() ? (H = parseFloat(_e()), n.$Rational(ne, H)) : n.$Rational(ne, 1)) : n.$Rational(ne, 1)) : n.$Rational(0, 1);
    }), ce(pe, "divide", "/"), ce(pe, "quo", "/");
  }("::", fe("Numeric"));
};
Opal.modules["corelib/time"] = function(t) {
  var e = t.slice, r = t.deny_frozen_access, n = t.klass, i = t.Kernel, s = t.Opal, o = t.defs, a = t.eqeqeq, l = t.def, c = t.truthy, f = t.rb_gt, m = t.rb_lt, b = t.send, C = t.rb_plus, N = t.rb_divide, z = t.rb_minus, A = t.range, Q = t.neqeq, Te = t.rb_le, ce = t.eqeq, ge = t.alias, Y = t.top, fe = [], ae = t.nil, Re = t.$$$;
  return t.add_stubs("require,include,===,raise,coerce_to!,respond_to?,to_str,to_i,_parse_offset,new,<=>,to_f,nil?,>,<,strftime,each,define_method,year,month,day,+,round,/,-,copy_instance_variables,initialize_dup,is_a?,zero?,wday,utc?,mon,yday,hour,min,sec,rjust,ljust,zone,to_s,[],cweek_cyear,jd,to_date,format,isdst,!=,<=,==,ceil,local,gm,asctime,getgm,gmt_offset,inspect,usec,gmtime,gmt?"), Y.$require("corelib/comparable"), function(pe, Ce, J) {
    var R = n(pe, Ce, "Time"), ve = [R].concat(J), F = t.$r(ve);
    R.$include(Re("Comparable"));
    var ne = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], H = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], we = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], _e = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    o(R, "$at", function(h, d) {
      var _;
      return Re("Time")["$==="](h) ? (d !== void 0 && i.$raise(Re("TypeError"), "can't convert Time into an exact number"), _ = new Date(h.getTime()), _.timezone = h.timezone, _) : (h.$$is_number || (h = s["$coerce_to!"](h, Re("Integer"), "to_int")), d === void 0 ? new Date(h * 1e3) : (d.$$is_number || (d = s["$coerce_to!"](d, Re("Integer"), "to_int")), new Date(h * 1e3 + d / 1e3)));
    }, -2);
    function X(w, h, d, _, g, $) {
      if (w.$$is_string ? w = parseInt(w, 10) : w = s["$coerce_to!"](w, Re("Integer"), "to_int"), h === ae)
        h = 1;
      else if (!h.$$is_number)
        if (h["$respond_to?"]("to_str"))
          switch (h = h.$to_str(), h.toLowerCase()) {
            case "jan":
              h = 1;
              break;
            case "feb":
              h = 2;
              break;
            case "mar":
              h = 3;
              break;
            case "apr":
              h = 4;
              break;
            case "may":
              h = 5;
              break;
            case "jun":
              h = 6;
              break;
            case "jul":
              h = 7;
              break;
            case "aug":
              h = 8;
              break;
            case "sep":
              h = 9;
              break;
            case "oct":
              h = 10;
              break;
            case "nov":
              h = 11;
              break;
            case "dec":
              h = 12;
              break;
            default:
              h = h.$to_i();
          }
        else
          h = s["$coerce_to!"](h, Re("Integer"), "to_int");
      return (h < 1 || h > 12) && i.$raise(Re("ArgumentError"), "month out of range: " + h), h = h - 1, d === ae ? d = 1 : d.$$is_string ? d = parseInt(d, 10) : d = s["$coerce_to!"](d, Re("Integer"), "to_int"), (d < 1 || d > 31) && i.$raise(Re("ArgumentError"), "day out of range: " + d), _ === ae ? _ = 0 : _.$$is_string ? _ = parseInt(_, 10) : _ = s["$coerce_to!"](_, Re("Integer"), "to_int"), (_ < 0 || _ > 24) && i.$raise(Re("ArgumentError"), "hour out of range: " + _), g === ae ? g = 0 : g.$$is_string ? g = parseInt(g, 10) : g = s["$coerce_to!"](g, Re("Integer"), "to_int"), (g < 0 || g > 59) && i.$raise(Re("ArgumentError"), "min out of range: " + g), $ === ae ? $ = 0 : $.$$is_number || ($.$$is_string ? $ = parseInt($, 10) : $ = s["$coerce_to!"]($, Re("Integer"), "to_int")), ($ < 0 || $ > 60) && i.$raise(Re("ArgumentError"), "sec out of range: " + $), [w, h, d, _, g, $];
    }
    return o(R, "$new", function(h, d, _, g, $, I, D) {
      var ie = this;
      d == null && (d = ae), _ == null && (_ = ae), g == null && (g = ae), $ == null && ($ = ae), I == null && (I = ae), D == null && (D = ae);
      var Me, Je, it, dt;
      return h === void 0 ? /* @__PURE__ */ new Date() : (Me = X(h, d, _, g, $, I), h = Me[0], d = Me[1], _ = Me[2], g = Me[3], $ = Me[4], I = Me[5], D === ae ? (Je = new Date(h, d, _, g, $, 0, I * 1e3), h < 100 && Je.setFullYear(h), Je) : (it = ie.$_parse_offset(D), dt = new Date(Date.UTC(h, d, _, g, $, 0, I * 1e3)), h < 100 && dt.setUTCFullYear(h), Je = new Date(dt.getTime() - it * 36e5), Je.timezone = it, Je));
    }, -1), o(R, "$_parse_offset", function(h) {
      var d;
      if (h.$$is_string)
        if (h == "UTC")
          d = 0;
        else if (/^[+-]\d\d:[0-5]\d$/.test(h)) {
          var _, g, $;
          _ = h[0], g = +(h[1] + h[2]), $ = +(h[4] + h[5]), d = (_ == "-" ? -1 : 1) * (g + $ / 60);
        } else
          i.$raise(Re("ArgumentError"), '"+HH:MM", "-HH:MM", "UTC" expected for utc_offset: ' + h);
      else
        h.$$is_number ? d = h / 3600 : i.$raise(Re("ArgumentError"), "Opal doesn't support other types for a timezone argument than Integer and String");
      return d;
    }), o(R, "$local", function(h, d, _, g, $, I, D, ie, Me, Je) {
      d == null && (d = ae), _ == null && (_ = ae), g == null && (g = ae), $ == null && ($ = ae), I == null && (I = ae), D == null && (D = ae), ie == null && (ie = ae), Me == null && (Me = ae), Je == null && (Je = ae);
      var it, dt;
      return arguments.length === 10 && (it = e(arguments), h = it[5], d = it[4], _ = it[3], g = it[2], $ = it[1], I = it[0]), it = X(h, d, _, g, $, I), h = it[0], d = it[1], _ = it[2], g = it[3], $ = it[4], I = it[5], dt = new Date(h, d, _, g, $, 0, I * 1e3), h < 100 && dt.setFullYear(h), dt;
    }, -2), o(R, "$gm", function(h, d, _, g, $, I, D, ie, Me, Je) {
      d == null && (d = ae), _ == null && (_ = ae), g == null && (g = ae), $ == null && ($ = ae), I == null && (I = ae), D == null && (D = ae), ie == null && (ie = ae), Me == null && (Me = ae), Je == null && (Je = ae);
      var it, dt;
      return arguments.length === 10 && (it = e(arguments), h = it[5], d = it[4], _ = it[3], g = it[2], $ = it[1], I = it[0]), it = X(h, d, _, g, $, I), h = it[0], d = it[1], _ = it[2], g = it[3], $ = it[4], I = it[5], dt = new Date(Date.UTC(h, d, _, g, $, 0, I * 1e3)), h < 100 && dt.setUTCFullYear(h), dt.timezone = 0, dt;
    }, -2), o(R, "$now", function() {
      var h = this;
      return h.$new();
    }), l(R, "$+", function(h) {
      var d = this;
      a(Re("Time"), h) && i.$raise(Re("TypeError"), "time + time?"), h.$$is_number || (h = s["$coerce_to!"](h, Re("Integer"), "to_int"));
      var _ = new Date(d.getTime() + h * 1e3);
      return _.timezone = d.timezone, _;
    }), l(R, "$-", function(h) {
      var d = this;
      if (a(Re("Time"), h))
        return (d.getTime() - h.getTime()) / 1e3;
      h.$$is_number || (h = s["$coerce_to!"](h, Re("Integer"), "to_int"));
      var _ = new Date(d.getTime() - h * 1e3);
      return _.timezone = d.timezone, _;
    }), l(R, "$<=>", function(h) {
      var d = this, _ = ae;
      return a(Re("Time"), h) ? d.$to_f()["$<=>"](h.$to_f()) : (_ = h["$<=>"](d), c(_["$nil?"]()) ? ae : c(f(_, 0)) ? -1 : c(m(_, 0)) ? 1 : 0);
    }), l(R, "$==", function(h) {
      var d = this, _ = ae;
      return c(_ = Re("Time")["$==="](h)) ? d.$to_f() === h.$to_f() : _;
    }), l(R, "$asctime", function() {
      var h = this;
      return h.$strftime("%a %b %e %H:%M:%S %Y");
    }), b([["year", "getFullYear", "getUTCFullYear"], ["mon", "getMonth", "getUTCMonth", 1], ["wday", "getDay", "getUTCDay"], ["day", "getDate", "getUTCDate"], ["hour", "getHours", "getUTCHours"], ["min", "getMinutes", "getUTCMinutes"], ["sec", "getSeconds", "getUTCSeconds"]], "each", [], function w(h, d, _, g) {
      var $ = w.$$s == null ? this : w.$$s;
      return h == null && (h = ae), d == null && (d = ae), _ == null && (_ = ae), g == null && (g = 0), b($, "define_method", [h], function I() {
        var D = I.$$s == null ? this : I.$$s;
        return g + (D.timezone != null ? new Date(D.getTime() + D.timezone * 36e5)[_]() : D[d]());
      }, { $$s: $ });
    }, { $$arity: -4, $$s: R }), l(R, "$yday", function() {
      var h = this, d = ae, _ = ae, g = ae;
      return d = F("Time").$new(h.$year()).$to_i(), _ = F("Time").$new(h.$year(), h.$month(), h.$day()).$to_i(), g = 86400, C(N(z(_, d), g).$round(), 1);
    }), l(R, "$isdst", function() {
      var h = this, d = new Date(h.getFullYear(), 0, 1), _ = new Date(h.getFullYear(), 6, 1);
      return h.getTimezoneOffset() < Math.max(d.getTimezoneOffset(), _.getTimezoneOffset());
    }), l(R, "$dup", function() {
      var h = this, d = ae;
      return d = new Date(h.getTime()), d.$copy_instance_variables(h), d.$initialize_dup(h), d;
    }), l(R, "$eql?", function(h) {
      var d = this, _ = ae;
      return c(_ = h["$is_a?"](Re("Time"))) ? d["$<=>"](h)["$zero?"]() : _;
    }), b([["sunday?", 0], ["monday?", 1], ["tuesday?", 2], ["wednesday?", 3], ["thursday?", 4], ["friday?", 5], ["saturday?", 6]], "each", [], function w(h, d) {
      var _ = w.$$s == null ? this : w.$$s;
      return h == null && (h = ae), d == null && (d = ae), b(_, "define_method", [h], function g() {
        var $ = g.$$s == null ? this : g.$$s;
        return $.$wday() === d;
      }, { $$s: _ });
    }, { $$s: R }), l(R, "$hash", function() {
      var h = this;
      return "Time:" + h.getTime();
    }), l(R, "$inspect", function() {
      var h = this;
      return c(h["$utc?"]()) ? h.$strftime("%Y-%m-%d %H:%M:%S UTC") : h.$strftime("%Y-%m-%d %H:%M:%S %z");
    }), l(R, "$succ", function() {
      var h = this, d = new Date(h.getTime() + 1e3);
      return d.timezone = h.timezone, d;
    }), l(R, "$usec", function() {
      var h = this;
      return h.getMilliseconds() * 1e3;
    }), l(R, "$zone", function() {
      var h = this;
      if (h.timezone === 0)
        return "UTC";
      if (h.timezone != null)
        return ae;
      var d = h.toString(), _;
      return d.indexOf("(") == -1 ? _ = d.match(/[A-Z]{3,4}/)[0] : _ = d.match(/\((.+)\)(?:\s|$)/)[1], _ == "GMT" && /(GMT\W*\d{4})/.test(d) ? RegExp.$1 : _;
    }), l(R, "$getgm", function() {
      var h = this, d = new Date(h.getTime());
      return d.timezone = 0, d;
    }), l(R, "$gmtime", function() {
      var h = this;
      return h.timezone !== 0 && (r(h), h.timezone = 0), h;
    }), l(R, "$gmt?", function() {
      var h = this;
      return h.timezone === 0;
    }), l(R, "$gmt_offset", function() {
      var h = this;
      return h.timezone != null ? h.timezone * 60 : -h.getTimezoneOffset() * 60;
    }), l(R, "$strftime", function(h) {
      var d = this;
      return h.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(_, g, $, I, D) {
        var ie = "", Me, Je, it, dt = g.indexOf("0") !== -1, St = g.indexOf("-") === -1, gt = g.indexOf("_") !== -1, wt = g.indexOf("^") !== -1, bt = g.indexOf("#") !== -1, Tt = (g.match(":") || []).length;
        switch ($ = parseInt($, 10), dt && gt && (g.indexOf("0") < g.indexOf("_") ? dt = !1 : gt = !1), D) {
          case "Y":
            ie += d.$year();
            break;
          case "C":
            dt = !gt, ie += Math.round(d.$year() / 100);
            break;
          case "y":
            dt = !gt, ie += d.$year() % 100;
            break;
          case "m":
            dt = !gt, ie += d.$mon();
            break;
          case "B":
            ie += _e[d.$mon() - 1];
            break;
          case "b":
          case "h":
            gt = !dt, ie += we[d.$mon() - 1];
            break;
          case "d":
            dt = !gt, ie += d.$day();
            break;
          case "e":
            gt = !dt, ie += d.$day();
            break;
          case "j":
            dt = !gt, $ = isNaN($) ? 3 : $, ie += d.$yday();
            break;
          case "H":
            dt = !gt, ie += d.$hour();
            break;
          case "k":
            gt = !dt, ie += d.$hour();
            break;
          case "I":
            dt = !gt, ie += d.$hour() % 12 || 12;
            break;
          case "l":
            gt = !dt, ie += d.$hour() % 12 || 12;
            break;
          case "P":
            ie += d.$hour() >= 12 ? "pm" : "am";
            break;
          case "p":
            ie += d.$hour() >= 12 ? "PM" : "AM";
            break;
          case "M":
            dt = !gt, ie += d.$min();
            break;
          case "S":
            dt = !gt, ie += d.$sec();
            break;
          case "L":
            dt = !gt, $ = isNaN($) ? 3 : $, ie += d.getMilliseconds();
            break;
          case "N":
            $ = isNaN($) ? 9 : $, ie += d.getMilliseconds().toString().$rjust(3, "0"), ie = ie.$ljust($, "0");
            break;
          case "z":
            var yt = d.timezone == null ? d.getTimezoneOffset() : -d.timezone * 60, Qe = Math.floor(Math.abs(yt) / 60), Ne = Math.abs(yt) % 60;
            ie += yt < 0 ? "+" : "-", ie += Qe < 10 ? "0" : "", ie += Qe, Tt > 0 && (ie += ":"), ie += Ne < 10 ? "0" : "", ie += Ne, Tt > 1 && (ie += ":00");
            break;
          case "Z":
            ie += d.$zone();
            break;
          case "A":
            ie += ne[d.$wday()];
            break;
          case "a":
            ie += H[d.$wday()];
            break;
          case "u":
            ie += d.$wday() + 1;
            break;
          case "w":
            ie += d.$wday();
            break;
          case "V":
            ie += d.$cweek_cyear()["$[]"](0).$to_s().$rjust(2, "0");
            break;
          case "G":
            ie += d.$cweek_cyear()["$[]"](1);
            break;
          case "g":
            ie += d.$cweek_cyear()["$[]"](1)["$[]"](A(-2, -1, !1));
            break;
          case "s":
            ie += d.$to_i();
            break;
          case "n":
            ie += `
`;
            break;
          case "t":
            ie += "	";
            break;
          case "%":
            ie += "%";
            break;
          case "c":
            ie += d.$strftime("%a %b %e %T %Y");
            break;
          case "D":
          case "x":
            ie += d.$strftime("%m/%d/%y");
            break;
          case "F":
            ie += d.$strftime("%Y-%m-%d");
            break;
          case "v":
            ie += d.$strftime("%e-%^b-%4Y");
            break;
          case "r":
            ie += d.$strftime("%I:%M:%S %p");
            break;
          case "R":
            ie += d.$strftime("%H:%M");
            break;
          case "T":
          case "X":
            ie += d.$strftime("%H:%M:%S");
            break;
          case "J":
            if (Me = d.$to_date().$jd(), Me < 2405160) {
              ie += d.$strftime("%Y-%m-%d");
              break;
            } else
              Me < 2419614 ? (Je = "M", it = 1867) : Me < 2424875 ? (Je = "T", it = 1911) : Me < 2447535 ? (Je = "S", it = 1925) : Me < 2458605 ? (Je = "H", it = 1988) : (Je = "R", it = 2018);
            ie += d.$format("%c%02d", Je, z(d.$year(), it)), ie += d.$strftime("-%m-%d");
            break;
          default:
            return _;
        }
        return wt && (ie = ie.toUpperCase()), bt && (ie = ie.replace(/[A-Z]/, function(Le) {
          Le.toLowerCase();
        }).replace(/[a-z]/, function(Le) {
          Le.toUpperCase();
        })), St && (dt || gt) && (ie = ie.$rjust(isNaN($) ? 2 : $, gt ? " " : "0")), ie;
      });
    }), l(R, "$to_a", function() {
      var h = this;
      return [h.$sec(), h.$min(), h.$hour(), h.$day(), h.$month(), h.$year(), h.$wday(), h.$yday(), h.$isdst(), h.$zone()];
    }), l(R, "$to_f", function() {
      var h = this;
      return h.getTime() / 1e3;
    }), l(R, "$to_i", function() {
      var h = this;
      return parseInt(h.getTime() / 1e3, 10);
    }), l(R, "$cweek_cyear", function() {
      var h = this, d = ae, _ = ae, g = ae, $ = ae, I = ae, D = ae, ie = ae;
      return d = Re("Time").$new(h.$year(), 1, 1), _ = d.$wday(), g = h.$year(), c(Te(_, 4)) && Q(_, 0) ? $ = z(_, 1) : ($ = z(z(_, 7), 1), ce($, -8) && ($ = -1)), I = N(C(h.$yday(), $), 7).$ceil(), c(Te(I, 0)) ? Re("Time").$new(z(h.$year(), 1), 12, 31).$cweek_cyear() : (ce(I, 53) && (D = Re("Time").$new(h.$year(), 12, 31), ie = D.$wday(), c(Te(ie, 3)) && Q(ie, 0) && (I = 1, g = C(g, 1))), [I, g]);
    }), function(w, h) {
      return ge(w, "mktime", "local"), ge(w, "utc", "gm");
    }(t.get_singleton_class(R)), ge(R, "ctime", "asctime"), ge(R, "dst?", "isdst"), ge(R, "getutc", "getgm"), ge(R, "gmtoff", "gmt_offset"), ge(R, "mday", "day"), ge(R, "month", "mon"), ge(R, "to_s", "inspect"), ge(R, "tv_sec", "to_i"), ge(R, "tv_usec", "usec"), ge(R, "utc", "gmtime"), ge(R, "utc?", "gmt?"), ge(R, "utc_offset", "gmt_offset");
  }("::", Date, fe);
};
Opal.modules["corelib/struct"] = function(t) {
  var e = t.klass, r = t.slice, n = t.extract_kwargs, i = t.ensure_kwargs, s = t.truthy, o = t.neqeq, a = t.eqeq, l = t.Opal, c = t.send, f = t.Class, m = t.to_a, b = t.def, C = t.defs, N = t.Kernel, z = t.hash2, A = t.rb_gt, Q = t.rb_minus, Te = t.eqeqeq, ce = t.rb_lt, ge = t.rb_ge, Y = t.rb_plus, fe = t.alias, ae = t.top, Re = [], pe = t.nil, Ce = t.$$$;
  return t.add_stubs("require,include,!=,upcase,[],==,class,unshift,const_name!,map,coerce_to!,new,each,define_struct_attribute,allocate,initialize,alias_method,module_eval,to_proc,const_set,raise,<<,members,define_method,instance_eval,last,>,length,-,keys,any?,join,[]=,each_with_index,hash,===,<,-@,size,>=,include?,to_sym,instance_of?,__id__,eql?,enum_for,+,name,each_pair,inspect,to_h,args,each_with_object,flatten,to_a,respond_to?,dig"), ae.$require("corelib/enumerable"), function(J, R, ve) {
    var F = e(J, R, "Struct"), ne = [F].concat(ve), H = t.$r(ne);
    F.$include(Ce("Enumerable")), C(F, "$new", function _e(X, w, h) {
      var d = _e.$$p || pe, _, g, $, I, D = this, ie = pe;
      if (_e.$$p = null, _ = r(arguments, 1), g = n(_), g = i(g), $ = _, I = g.$$smap.keyword_init, I == null && (I = !1), s(X))
        if (a(X.$class(), Ce("String")) && o(X["$[]"](0).$upcase(), X["$[]"](0)))
          $.$unshift(X), X = pe;
        else
          try {
            X = l["$const_name!"](X);
          } catch (Me) {
            if (t.rescue(Me, [Ce("TypeError"), Ce("NameError")]))
              try {
                $.$unshift(X), X = pe;
              } finally {
                t.pop_exception();
              }
            else
              throw Me;
          }
      return c($, "map", [], function(Je) {
        return Je == null && (Je = pe), l["$coerce_to!"](Je, Ce("String"), "to_str");
      }), ie = c(f, "new", [D], function Me() {
        var Je = Me.$$s == null ? this : Me.$$s;
        return c($, "each", [], function it(dt) {
          var St = it.$$s == null ? this : it.$$s;
          return dt == null && (dt = pe), St.$define_struct_attribute(dt);
        }, { $$s: Je }), function(it, dt) {
          return b(it, "$new", function(gt) {
            var wt, bt, Tt = this, yt = pe;
            return wt = r(arguments), bt = wt, yt = Tt.$allocate(), yt.$$data = {}, c(yt, "initialize", m(bt)), yt;
          }, -1), it.$alias_method("[]", "new");
        }(t.get_singleton_class(Je));
      }, { $$s: D }), s(d) && c(ie, "module_eval", [], d.$to_proc()), ie.$$keyword_init = I, s(X) && Ce("Struct").$const_set(X, ie), ie;
    }, -2), C(F, "$define_struct_attribute", function(X) {
      var w = this;
      return a(w, Ce("Struct")) && N.$raise(Ce("ArgumentError"), "you cannot define attributes to the Struct class"), w.$members()["$<<"](X), c(w, "define_method", [X], function h() {
        var d = h.$$s == null ? this : h.$$s;
        return d.$$data[X];
      }, { $$s: w }), c(w, "define_method", ["" + X + "="], function h(d) {
        var _ = h.$$s == null ? this : h.$$s;
        return d == null && (d = pe), _.$$data[X] = d;
      }, { $$s: w });
    }), C(F, "$members", function() {
      var X = this, w = pe;
      return X.members == null && (X.members = pe), a(X, Ce("Struct")) && N.$raise(Ce("ArgumentError"), "the Struct class has no members"), X.members = s(w = X.members) ? w : [];
    }), C(F, "$inherited", function(X) {
      var w = this, h = pe;
      return w.members == null && (w.members = pe), h = w.members, c(X, "instance_eval", [], function d() {
        var _ = d.$$s == null ? this : d.$$s;
        return _.members = h;
      }, { $$s: w });
    }), b(F, "$initialize", function(X) {
      var w, h, d = this, _ = pe, g = pe, $ = pe;
      return w = r(arguments), h = w, s(d.$class().$$keyword_init) ? (_ = s(g = h.$last()) ? g : z([], {}), (s(A(h.$length(), 1)) || s(h.length === 1 && !_.$$is_hash)) && N.$raise(Ce("ArgumentError"), "wrong number of arguments (given " + h.$length() + ", expected 0)"), $ = Q(_.$keys(), d.$class().$members()), s($["$any?"]()) && N.$raise(Ce("ArgumentError"), "unknown keywords: " + $.$join(", ")), c(d.$class().$members(), "each", [], function I(D) {
        var ie, Me = I.$$s == null ? this : I.$$s;
        return D == null && (D = pe), ie = [D, _["$[]"](D)], c(Me, "[]=", ie), ie[ie.length - 1];
      }, { $$s: d })) : (s(A(h.$length(), d.$class().$members().$length())) && N.$raise(Ce("ArgumentError"), "struct size differs"), c(d.$class().$members(), "each_with_index", [], function I(D, ie) {
        var Me, Je = I.$$s == null ? this : I.$$s;
        return D == null && (D = pe), ie == null && (ie = pe), Me = [D, h["$[]"](ie)], c(Je, "[]=", Me), Me[Me.length - 1];
      }, { $$s: d }));
    }, -1), b(F, "$initialize_copy", function(X) {
      var w = this;
      w.$$data = {};
      var h = Object.keys(X.$$data), d, _, g;
      for (d = 0, _ = h.length; d < _; d++)
        g = h[d], w.$$data[g] = X.$$data[g];
    }), C(F, "$keyword_init?", function() {
      var X = this;
      return X.$$keyword_init;
    }), b(F, "$members", function() {
      var X = this;
      return X.$class().$members();
    }), b(F, "$hash", function() {
      var X = this;
      return H("Hash").$new(X.$$data).$hash();
    }), b(F, "$[]", function(X) {
      var w = this;
      return Te(Ce("Integer"), X) ? (s(ce(X, w.$class().$members().$size()["$-@"]())) && N.$raise(Ce("IndexError"), "offset " + X + " too small for struct(size:" + w.$class().$members().$size() + ")"), s(ge(X, w.$class().$members().$size())) && N.$raise(Ce("IndexError"), "offset " + X + " too large for struct(size:" + w.$class().$members().$size() + ")"), X = w.$class().$members()["$[]"](X)) : Te(Ce("String"), X) ? w.$$data.hasOwnProperty(X) || N.$raise(Ce("NameError").$new("no member '" + X + "' in struct", X)) : N.$raise(Ce("TypeError"), "no implicit conversion of " + X.$class() + " into Integer"), X = l["$coerce_to!"](X, Ce("String"), "to_str"), w.$$data[X];
    }), b(F, "$[]=", function(X, w) {
      var h = this;
      return Te(Ce("Integer"), X) ? (s(ce(X, h.$class().$members().$size()["$-@"]())) && N.$raise(Ce("IndexError"), "offset " + X + " too small for struct(size:" + h.$class().$members().$size() + ")"), s(ge(X, h.$class().$members().$size())) && N.$raise(Ce("IndexError"), "offset " + X + " too large for struct(size:" + h.$class().$members().$size() + ")"), X = h.$class().$members()["$[]"](X)) : Te(Ce("String"), X) ? s(h.$class().$members()["$include?"](X.$to_sym())) || N.$raise(Ce("NameError").$new("no member '" + X + "' in struct", X)) : N.$raise(Ce("TypeError"), "no implicit conversion of " + X.$class() + " into Integer"), X = l["$coerce_to!"](X, Ce("String"), "to_str"), h.$$data[X] = w;
    }), b(F, "$==", function(X) {
      var w = this;
      if (!s(X["$instance_of?"](w.$class())))
        return !1;
      var h = {}, d = {};
      function _(g, $) {
        var I, D, ie;
        h[g.$__id__()] = !0, d[$.$__id__()] = !0;
        for (I in g.$$data)
          if (D = g.$$data[I], ie = $.$$data[I], Ce("Struct")["$==="](D)) {
            if ((!h.hasOwnProperty(D.$__id__()) || !d.hasOwnProperty(ie.$__id__())) && !_(D, ie))
              return !1;
          } else if (!D["$=="](ie))
            return !1;
        return !0;
      }
      return _(w, X);
    }), b(F, "$eql?", function(X) {
      var w = this;
      if (!s(X["$instance_of?"](w.$class())))
        return !1;
      var h = {}, d = {};
      function _(g, $) {
        var I, D, ie;
        h[g.$__id__()] = !0, d[$.$__id__()] = !0;
        for (I in g.$$data)
          if (D = g.$$data[I], ie = $.$$data[I], Ce("Struct")["$==="](D)) {
            if ((!h.hasOwnProperty(D.$__id__()) || !d.hasOwnProperty(ie.$__id__())) && !_(D, ie))
              return !1;
          } else if (!D["$eql?"](ie))
            return !1;
        return !0;
      }
      return _(w, X);
    }), b(F, "$each", function _e() {
      var X = _e.$$p || pe, w = this;
      return _e.$$p = null, X === pe ? c(w, "enum_for", ["each"], function h() {
        var d = h.$$s == null ? this : h.$$s;
        return d.$size();
      }, { $$s: w }) : (c(w.$class().$members(), "each", [], function h(d) {
        var _ = h.$$s == null ? this : h.$$s;
        return d == null && (d = pe), t.yield1(X, _["$[]"](d));
      }, { $$s: w }), w);
    }), b(F, "$each_pair", function _e() {
      var X = _e.$$p || pe, w = this;
      return _e.$$p = null, X === pe ? c(w, "enum_for", ["each_pair"], function h() {
        var d = h.$$s == null ? this : h.$$s;
        return d.$size();
      }, { $$s: w }) : (c(w.$class().$members(), "each", [], function h(d) {
        var _ = h.$$s == null ? this : h.$$s;
        return d == null && (d = pe), t.yield1(X, [d, _["$[]"](d)]);
      }, { $$s: w }), w);
    }), b(F, "$length", function() {
      var X = this;
      return X.$class().$members().$length();
    }), b(F, "$to_a", function() {
      var X = this;
      return c(X.$class().$members(), "map", [], function w(h) {
        var d = w.$$s == null ? this : w.$$s;
        return h == null && (h = pe), d["$[]"](h);
      }, { $$s: X });
    });
    var we = [];
    return b(F, "$inspect", function() {
      var X = this, w = pe, h = pe;
      return function() {
        try {
          return w = "#<struct ", s(we["$include?"](X.$__id__())) ? Y(w, ":...>") : (we["$<<"](X.$__id__()), h = !0, Te(Ce("Struct"), X) && s(X.$class().$name()) && (w = Y(w, "" + X.$class() + " ")), w = Y(w, c(X.$each_pair(), "map", [], function(_, g) {
            return _ == null && (_ = pe), g == null && (g = pe), "" + _ + "=" + H("Opal").$inspect(g);
          }).$join(", ")), w = Y(w, ">"), w);
        } finally {
          s(h) && we.pop();
        }
      }();
    }), b(F, "$to_h", function _e() {
      var X = _e.$$p || pe, w = this;
      return _e.$$p = null, X !== pe ? c(c(w, "map", [], X.$to_proc()), "to_h", m(w.$args())) : c(w.$class().$members(), "each_with_object", [z([], {})], function h(d, _) {
        var g, $ = h.$$s == null ? this : h.$$s;
        return d == null && (d = pe), _ == null && (_ = pe), g = [d, $["$[]"](d)], c(_, "[]=", g), g[g.length - 1];
      }, { $$s: w });
    }), b(F, "$values_at", function(X) {
      var w, h, d = this;
      w = r(arguments), h = w, h = c(h, "map", [], function(D) {
        return D == null && (D = pe), D.$$is_range ? D.$to_a() : D;
      }).$flatten();
      for (var _ = [], g = 0, $ = h.length; g < $; g++)
        h[g].$$is_number || N.$raise(Ce("TypeError"), "no implicit conversion of " + h[g].$class() + " into Integer"), _.push(d["$[]"](h[g]));
      return _;
    }, -1), b(F, "$dig", function(X, w) {
      var h, d, _ = this, g = pe;
      return h = r(arguments, 1), d = h, g = s(X.$$is_string && _.$$data.hasOwnProperty(X)) && _.$$data[X] || pe, g === pe || d.length === 0 ? g : (s(g["$respond_to?"]("dig")) || N.$raise(Ce("TypeError"), "" + g.$class() + " does not have #dig method"), c(g, "dig", m(d)));
    }, -2), fe(F, "size", "length"), fe(F, "to_s", "inspect"), fe(F, "values", "to_a");
  }("::", null, Re);
};
Opal.modules["corelib/set"] = function(t) {
  var e = t.freeze, r = t.klass, n = t.slice, i = t.defs, s = t.hash2, o = t.truthy, a = t.eqeqeq, l = t.Kernel, c = t.send, f = t.def, m = t.eqeq, b = t.rb_lt, C = t.rb_le, N = t.alias, z = [], A = t.nil, Q = t.$$$;
  return t.add_stubs("include,new,nil?,===,raise,each,add,merge,class,respond_to?,subtract,dup,join,to_a,equal?,instance_of?,==,instance_variable_get,size,is_a?,all?,include?,[]=,enum_for,[],<<,replace,compare_by_identity,name,compare_by_identity?,delete,select,frozen?,freeze,reject,delete_if,to_proc,keep_if,each_key,empty?,eql?,instance_eval,clear,<,<=,any?,!,intersect?,keys,|,proper_subset?,subset?,proper_superset?,superset?,-,select!,collect!"), function(Te, ce, ge) {
    var Y = r(Te, ce, "Set"), fe = [Y].concat(ge), ae = t.$r(fe), Re = A, pe = Y.$$prototype;
    pe.hash = A, Y.$include(Q("Enumerable")), i(Y, "$[]", function(R) {
      var ve, F, ne = this;
      return ve = n(arguments), F = ve, ne.$new(F);
    }, -1), f(Y, "$initialize", function J(R) {
      var ve = J.$$p || A, F = this;
      return J.$$p = null, R == null && (R = A), F.hash = s([], {}), o(R["$nil?"]()) ? A : (a(Q("Enumerable"), R) || l.$raise(Q("ArgumentError"), "value must be enumerable"), o(ve) ? c(R, "each", [], function ne(H) {
        var we = ne.$$s == null ? this : ne.$$s;
        return H == null && (H = A), we.$add(t.yield1(ve, H));
      }, { $$s: F }) : F.$merge(R));
    }, -1), f(Y, "$dup", function() {
      var R = this, ve = A;
      return ve = R.$class().$new(), ve.$merge(R);
    }), f(Y, "$-", function(R) {
      var ve = this;
      return o(R["$respond_to?"]("each")) || l.$raise(Q("ArgumentError"), "value must be enumerable"), ve.$dup().$subtract(R);
    }), f(Y, "$inspect", function() {
      var R = this;
      return "#<Set: {" + R.$to_a().$join(",") + "}>";
    }), f(Y, "$==", function(R) {
      var ve = this;
      return o(ve["$equal?"](R)) ? !0 : o(R["$instance_of?"](ve.$class())) ? ve.hash["$=="](R.$instance_variable_get("@hash")) : o(R["$is_a?"](Q("Set"))) && m(ve.$size(), R.$size()) ? c(R, "all?", [], function F(ne) {
        var H = F.$$s == null ? this : F.$$s;
        return H.hash == null && (H.hash = A), ne == null && (ne = A), H.hash["$include?"](ne);
      }, { $$s: ve }) : !1;
    }), f(Y, "$add", function(R) {
      var ve = this;
      return ve.hash["$[]="](R, !0), ve;
    }), f(Y, "$classify", function J() {
      var R = J.$$p || A, ve = this, F = A;
      return J.$$p = null, R === A ? ve.$enum_for("classify") : (F = c(Q("Hash"), "new", [], function ne(H, we) {
        var _e, X = ne.$$s == null ? this : ne.$$s;
        return H == null && (H = A), we == null && (we = A), _e = [we, X.$class().$new()], c(H, "[]=", _e), _e[_e.length - 1];
      }, { $$s: ve }), c(ve, "each", [], function(H) {
        return H == null && (H = A), F["$[]"](t.yield1(R, H)).$add(H);
      }), F);
    }), f(Y, "$collect!", function J() {
      var R = J.$$p || A, ve = this, F = A;
      return J.$$p = null, R === A ? ve.$enum_for("collect!") : (F = ve.$class().$new(), c(ve, "each", [], function(H) {
        return H == null && (H = A), F["$<<"](t.yield1(R, H));
      }), ve.$replace(F));
    }), f(Y, "$compare_by_identity", function() {
      var R = this;
      return o(R.hash["$respond_to?"]("compare_by_identity")) ? (R.hash.$compare_by_identity(), R) : R.$raise(ae("NotImplementedError"), "" + R.$class().$name() + "#compare_by_identity is not implemented");
    }), f(Y, "$compare_by_identity?", function() {
      var R = this, ve = A;
      return o(ve = R.hash["$respond_to?"]("compare_by_identity?")) ? R.hash["$compare_by_identity?"]() : ve;
    }), f(Y, "$delete", function(R) {
      var ve = this;
      return ve.hash.$delete(R), ve;
    }), f(Y, "$delete?", function(R) {
      var ve = this;
      return o(ve["$include?"](R)) ? (ve.$delete(R), ve) : A;
    }), f(Y, "$delete_if", function J() {
      var R = J.$$p || A, ve = this;
      return J.$$p = null, R === A ? ve.$enum_for("delete_if") : (c(c(ve, "select", [], function(ne) {
        return ne == null && (ne = A), t.yield1(R, ne);
      }), "each", [], function F(ne) {
        var H = F.$$s == null ? this : F.$$s;
        return H.hash == null && (H.hash = A), ne == null && (ne = A), H.hash.$delete(ne);
      }, { $$s: ve }), ve);
    }), f(Y, "$freeze", function() {
      var R = this;
      return o(R["$frozen?"]()) ? R : (R.hash.$freeze(), e(R));
    }), f(Y, "$keep_if", function J() {
      var R = J.$$p || A, ve = this;
      return J.$$p = null, R === A ? ve.$enum_for("keep_if") : (c(c(ve, "reject", [], function(ne) {
        return ne == null && (ne = A), t.yield1(R, ne);
      }), "each", [], function F(ne) {
        var H = F.$$s == null ? this : F.$$s;
        return H.hash == null && (H.hash = A), ne == null && (ne = A), H.hash.$delete(ne);
      }, { $$s: ve }), ve);
    }), f(Y, "$reject!", function J() {
      var R = J.$$p || A, ve = this, F = A;
      return J.$$p = null, R === A ? ve.$enum_for("reject!") : (F = ve.$size(), c(ve, "delete_if", [], R.$to_proc()), m(ve.$size(), F) ? A : ve);
    }), f(Y, "$select!", function J() {
      var R = J.$$p || A, ve = this, F = A;
      return J.$$p = null, R === A ? ve.$enum_for("select!") : (F = ve.$size(), c(ve, "keep_if", [], R.$to_proc()), m(ve.$size(), F) ? A : ve);
    }), f(Y, "$add?", function(R) {
      var ve = this;
      return o(ve["$include?"](R)) ? A : ve.$add(R);
    }), f(Y, "$each", function J() {
      var R = J.$$p || A, ve = this;
      return J.$$p = null, R === A ? ve.$enum_for("each") : (c(ve.hash, "each_key", [], R.$to_proc()), ve);
    }), f(Y, "$empty?", function() {
      var R = this;
      return R.hash["$empty?"]();
    }), f(Y, "$eql?", function(R) {
      var ve = this;
      return ve.hash["$eql?"](c(R, "instance_eval", [], function F() {
        var ne = F.$$s == null ? this : F.$$s;
        return ne.hash == null && (ne.hash = A), ne.hash;
      }, { $$s: ve }));
    }), f(Y, "$clear", function() {
      var R = this;
      return R.hash.$clear(), R;
    }), f(Y, "$include?", function(R) {
      var ve = this;
      return ve.hash["$include?"](R);
    }), f(Y, "$merge", function(R) {
      var ve = this;
      return c(R, "each", [], function F(ne) {
        var H = F.$$s == null ? this : F.$$s;
        return ne == null && (ne = A), H.$add(ne);
      }, { $$s: ve }), ve;
    }), f(Y, "$replace", function(R) {
      var ve = this;
      return ve.$clear(), ve.$merge(R), ve;
    }), f(Y, "$size", function() {
      var R = this;
      return R.hash.$size();
    }), f(Y, "$subtract", function(R) {
      var ve = this;
      return c(R, "each", [], function F(ne) {
        var H = F.$$s == null ? this : F.$$s;
        return ne == null && (ne = A), H.$delete(ne);
      }, { $$s: ve }), ve;
    }), f(Y, "$|", function(R) {
      var ve = this;
      return o(R["$respond_to?"]("each")) || l.$raise(Q("ArgumentError"), "value must be enumerable"), ve.$dup().$merge(R);
    });
    function Ce(J) {
      o(Re = J["$is_a?"](Q("Set"))) || l.$raise(Q("ArgumentError"), "value must be a set");
    }
    return f(Y, "$superset?", function(R) {
      var ve = this;
      return Ce(R), o(b(ve.$size(), R.$size())) ? !1 : c(R, "all?", [], function F(ne) {
        var H = F.$$s == null ? this : F.$$s;
        return ne == null && (ne = A), H["$include?"](ne);
      }, { $$s: ve });
    }), f(Y, "$proper_superset?", function(R) {
      var ve = this;
      return Ce(R), o(C(ve.$size(), R.$size())) ? !1 : c(R, "all?", [], function F(ne) {
        var H = F.$$s == null ? this : F.$$s;
        return ne == null && (ne = A), H["$include?"](ne);
      }, { $$s: ve });
    }), f(Y, "$subset?", function(R) {
      var ve = this;
      return Ce(R), o(b(R.$size(), ve.$size())) ? !1 : c(ve, "all?", [], function(ne) {
        return ne == null && (ne = A), R["$include?"](ne);
      });
    }), f(Y, "$proper_subset?", function(R) {
      var ve = this;
      return Ce(R), o(C(R.$size(), ve.$size())) ? !1 : c(ve, "all?", [], function(ne) {
        return ne == null && (ne = A), R["$include?"](ne);
      });
    }), f(Y, "$intersect?", function(R) {
      var ve = this;
      return Ce(R), o(b(ve.$size(), R.$size())) ? c(ve, "any?", [], function(ne) {
        return ne == null && (ne = A), R["$include?"](ne);
      }) : c(R, "any?", [], function F(ne) {
        var H = F.$$s == null ? this : F.$$s;
        return ne == null && (ne = A), H["$include?"](ne);
      }, { $$s: ve });
    }), f(Y, "$disjoint?", function(R) {
      var ve = this;
      return ve["$intersect?"](R)["$!"]();
    }), f(Y, "$to_a", function() {
      var R = this;
      return R.hash.$keys();
    }), N(Y, "+", "|"), N(Y, "<", "proper_subset?"), N(Y, "<<", "add"), N(Y, "<=", "subset?"), N(Y, ">", "proper_superset?"), N(Y, ">=", "superset?"), N(Y, "difference", "-"), N(Y, "filter!", "select!"), N(Y, "length", "size"), N(Y, "map!", "collect!"), N(Y, "member?", "include?"), N(Y, "union", "|");
  }("::", null, z);
};
Opal.modules["corelib/dir"] = function(t) {
  var e = t.klass, r = t.def, n = t.truthy, i = t.alias, s = t.nil, o = t.$$$;
  return t.add_stubs("[],pwd"), function(a, l, c) {
    var f = e(a, l, "Dir");
    return function(m, b) {
      return r(m, "$chdir", function C(N) {
        var z = C.$$p || s, A = s;
        return C.$$p = null, function() {
          try {
            return A = t.current_dir, t.current_dir = N, t.yieldX(z, []);
          } finally {
            t.current_dir = A;
          }
        }();
      }), r(m, "$pwd", function() {
        return t.current_dir || ".";
      }), r(m, "$home", function() {
        var N = s;
        return n(N = o("ENV")["$[]"]("HOME")) ? N : ".";
      }), i(m, "getwd", "pwd");
    }(t.get_singleton_class(f));
  }("::", null);
};
Opal.modules["corelib/file"] = function(t) {
  var e = t.truthy, r = t.klass, n = t.const_set, i = t.Opal, s = t.regexp, o = t.rb_plus, a = t.def, l = t.Kernel, c = t.eqeq, f = t.rb_lt, m = t.rb_minus, b = t.range, C = t.send, N = t.slice, z = t.alias, A = [], Q = t.nil, Te = t.$$$;
  return t.add_stubs("respond_to?,to_path,coerce_to!,pwd,split,sub,+,unshift,join,home,raise,start_with?,absolute_path,==,<,dirname,-,basename,empty?,rindex,[],length,nil?,gsub,find,=~,map,each_with_index,flatten,reject,to_proc,end_with?,expand_path,exist?"), function(ce, ge, Y) {
    var fe = r(ce, ge, "File"), ae = [fe].concat(Y), Re = Q;
    return n(ae[0], "Separator", n(ae[0], "SEPARATOR", "/")), n(ae[0], "ALT_SEPARATOR", Q), n(ae[0], "PATH_SEPARATOR", ":"), n(ae[0], "FNM_SYSCASE", 0), Re = /^[a-zA-Z]:(?:\\|\/)/, function(pe, Ce) {
      var J = [pe].concat(Ce), R = t.$r(J);
      a(pe, "$absolute_path", function(H, we) {
        var _e = Q, X = Q, w = Q, h = Q, d = Q, _ = Q, g = Q, $ = Q, I = Q, D = Q;
        we == null && (we = Q), _e = R("SEPARATOR"), X = F(), w = [], H = e(H["$respond_to?"]("to_path")) ? H.$to_path() : H, H = i["$coerce_to!"](H, Te("String"), "to_str"), we = e(h = we) ? h : Te("Dir").$pwd(), d = H.substr(0, _e.length) === _e || Re.test(H), _ = we.substr(0, _e.length) === _e || Re.test(we), e(d) ? (g = H.$split(s(["[", X, "]"])), $ = Re.test(H) ? "" : H.$sub(s(["^([", X, "]+).*$"]), "\\1"), I = !0) : (g = o(we.$split(s(["[", X, "]"])), H.$split(s(["[", X, "]"]))), $ = Re.test(we) ? "" : we.$sub(s(["^([", X, "]+).*$"]), "\\1"), I = _);
        for (var ie, Me = 0, Je = g.length; Me < Je; Me++)
          ie = g[Me], !(ie === Q || ie === "" && (w.length === 0 || I) || ie === "." && (w.length === 0 || I)) && (ie === ".." ? w.pop() : w.push(ie));
        return !I && g[0] !== "." && w.$unshift("."), D = w.$join(_e), e(I) && (D = o($, D)), D;
      }, -2), a(pe, "$expand_path", function(H, we) {
        var _e = this, X = Q, w = Q, h = Q, d = Q, _ = Q;
        return we == null && (we = Q), X = R("SEPARATOR"), w = F(), e(H[0] === "~" || we && we[0] === "~") && (h = R("Dir").$home(), e(h) || l.$raise(Te("ArgumentError"), "couldn't find HOME environment -- expanding `~'"), d = Re.test(h) ? "" : h.$sub(s(["^([", w, "]+).*$"]), "\\1"), e(h["$start_with?"](d)) || l.$raise(Te("ArgumentError"), "non-absolute home"), h = o(h, X), _ = s(["^\\~(?:", X, "|$)"]), H = H.$sub(_, h), e(we) && (we = we.$sub(_, h))), _e.$absolute_path(H, we);
      }, -2);
      function ve(ne) {
        return e(ne["$respond_to?"]("to_path")) && (ne = ne.$to_path()), ne = i["$coerce_to!"](ne, Te("String"), "to_str"), ne;
      }
      function F() {
        return R("ALT_SEPARATOR") === Q ? t.escape_regexp(R("SEPARATOR")) : t.escape_regexp(o(R("SEPARATOR"), R("ALT_SEPARATOR")));
      }
      return a(pe, "$dirname", function(H, we) {
        var _e = this, X = Q;
        if (we == null && (we = 1), c(we, 0))
          return H;
        e(f(we, 0)) && l.$raise(Te("ArgumentError"), "level can't be negative"), X = F(), H = ve(H);
        var w = H.match(new RegExp("^[" + X + "]")), h;
        return H = H.replace(new RegExp("[" + X + "]+$"), ""), H = H.replace(new RegExp("[^" + X + "]+$"), ""), H = H.replace(new RegExp("[" + X + "]+$"), ""), H === "" ? h = w ? "/" : "." : h = H, we == 1 ? h : _e.$dirname(h, m(we, 1));
      }, -2), a(pe, "$basename", function(H, we) {
        var _e = Q;
        return we == null && (we = Q), _e = F(), H = ve(H), H.length == 0 || (we !== Q ? we = i["$coerce_to!"](we, Te("String"), "to_str") : we = null, H = H.replace(new RegExp("(.)[" + _e + "]*$"), "$1"), H = H.replace(new RegExp("^(?:.*[" + _e + "])?([^" + _e + "]+)$"), "$1"), we === ".*" ? H = H.replace(/\.[^\.]+$/, "") : we !== null && (we = t.escape_regexp(we), H = H.replace(new RegExp("" + we + "$"), ""))), H;
      }, -2), a(pe, "$extname", function(H) {
        var we = this, _e = Q, X = Q;
        return H = ve(H), _e = we.$basename(H), e(_e["$empty?"]()) || (X = _e["$[]"](b(1, -1, !1)).$rindex("."), e(X["$nil?"]()) || c(o(X, 1), m(_e.$length(), 1))) ? "" : _e["$[]"](t.Range.$new(o(X, 1), -1, !1));
      }), a(pe, "$exist?", function(H) {
        return t.modules[H] != null;
      }), a(pe, "$directory?", function(H) {
        var we = Q;
        we = [];
        for (var _e in t.modules)
          we.push(_e);
        return H = H.$gsub(s(["(^.", R("SEPARATOR"), "+|", R("SEPARATOR"), "+$)"])), C(we, "find", [], function(w) {
          return w == null && (w = Q), w["$=~"](s(["^", H]));
        });
      }), a(pe, "$join", function(H) {
        var we, _e, X = Q;
        return we = N(arguments), _e = we, e(_e["$empty?"]()) ? "" : (X = "", _e = C(_e.$flatten().$each_with_index(), "map", [], function(h, d) {
          return h == null && (h = Q), d == null && (d = Q), c(d, 0) && e(h["$empty?"]()) || c(_e.$length(), o(d, 1)) && e(h["$empty?"]()) ? R("SEPARATOR") : h;
        }), _e = C(_e, "reject", [], "empty?".$to_proc()), C(_e, "each_with_index", [], function(h, d) {
          var _ = Q;
          return h == null && (h = Q), d == null && (d = Q), _ = _e["$[]"](o(d, 1)), e(_["$nil?"]()) ? X = "" + X + h : (e(h["$end_with?"](R("SEPARATOR"))) && e(_["$start_with?"](R("SEPARATOR"))) && (h = h.$sub(s([R("SEPARATOR"), "+$"]), "")), X = e(h["$end_with?"](R("SEPARATOR"))) || e(_["$start_with?"](R("SEPARATOR"))) ? "" + X + h : "" + X + h + R("SEPARATOR"));
        }), X);
      }, -1), a(pe, "$split", function(H) {
        return H.$split(R("SEPARATOR"));
      }), z(pe, "realpath", "expand_path"), z(pe, "exists?", "exist?");
    }(t.get_singleton_class(fe), ae);
  }("::", Te("IO"), A);
};
Opal.modules["corelib/process/base"] = function(t) {
  var e = t.klass, r = t.slice, n = t.defs, i = t.return_val, s = t.nil;
  return function(o, a) {
    var l = e(o, a, "Signal");
    return n(l, "$trap", function(f) {
      return r(arguments), s;
    }, -1);
  }("::", null), function(o, a) {
    var l = e(o, a, "GC");
    return n(l, "$start", i(s));
  }("::", null);
};
Opal.modules["corelib/process"] = function(t) {
  var e = t.module, r = t.defs, n = t.truthy, i = t.return_val, s = t.Kernel, o = t.nil, a = t.$$$;
  return t.add_stubs("const_set,size,<<,__register_clock__,to_f,now,new,[],raise"), function(l) {
    var c = e(l, "Process"), f = o;
    if (c.__clocks__ = [], r(c, "$__register_clock__", function(C, N) {
      var z = this;
      return z.__clocks__ == null && (z.__clocks__ = o), z.$const_set(C, z.__clocks__.$size()), z.__clocks__["$<<"](N);
    }), c.$__register_clock__("CLOCK_REALTIME", function() {
      return Date.now();
    }), f = !1, t.global.performance)
      f = function() {
        return performance.now();
      };
    else if (t.global.process && process.hrtime) {
      var m = process.hrtime();
      f = function() {
        var b = process.hrtime(m), C = b[1] / 1e3 | 0;
        return b[0] * 1e3 + C / 1e3;
      };
    }
    return n(f) && c.$__register_clock__("CLOCK_MONOTONIC", f), r(c, "$pid", i(0)), r(c, "$times", function() {
      var C = o;
      return C = a("Time").$now().$to_f(), a(a("Benchmark"), "Tms").$new(C, C, C, C, C);
    }), r(c, "$clock_gettime", function(C, N) {
      var z = this, A = o;
      z.__clocks__ == null && (z.__clocks__ = o), N == null && (N = "float_second"), n(A = z.__clocks__["$[]"](C)) || s.$raise(a(a("Errno"), "EINVAL"), "clock_gettime(" + C + ") " + z.__clocks__["$[]"](C));
      var Q = A();
      switch (N) {
        case "float_second":
          return Q / 1e3;
        case "float_millisecond":
          return Q / 1;
        case "float_microsecond":
          return Q * 1e3;
        case "second":
          return Q / 1e3 | 0;
        case "millisecond":
          return Q / 1 | 0;
        case "microsecond":
          return Q * 1e3 | 0;
        case "nanosecond":
          return Q * 1e6 | 0;
        default:
          s.$raise(a("ArgumentError"), "unexpected unit: " + N);
      }
    }, -2);
  }("::");
};
Opal.modules["corelib/random/formatter"] = function(t) {
  var e = t.klass, r = t.module, n = t.def, i = t.range, s = t.send, o = t.rb_divide, a = t.Kernel, l = t.Opal, c = [], f = t.nil, m = t.$$$;
  return t.add_stubs("_verify_count,bytes,encode,strict_encode64,random_bytes,urlsafe_encode64,split,hex,[]=,[],map,to_proc,join,times,<<,|,ord,/,abs,random_float,raise,coerce_to!,flatten,new,random_number,length,include,extend"), function(b, C, N) {
    var z = e(b, C, "Random"), A = [z].concat(N);
    return function(Q, Te) {
      var ce = r(Q, "Formatter"), ge = [ce].concat(Te), Y = t.$r(ge);
      return n(ce, "$hex", function(ae) {
        var Re = this;
        ae == null && (ae = f), ae = m("Random").$_verify_count(ae);
        for (var pe = Re.$bytes(ae), Ce = "", J = 0; J < ae; J++)
          Ce += pe.charCodeAt(J).toString(16).padStart(2, "0");
        return Ce.$encode("US-ASCII");
      }, -1), n(ce, "$random_bytes", function(ae) {
        var Re = this;
        return ae == null && (ae = f), Re.$bytes(ae);
      }, -1), n(ce, "$base64", function(ae) {
        var Re = this;
        return ae == null && (ae = f), m("Base64").$strict_encode64(Re.$random_bytes(ae)).$encode("US-ASCII");
      }, -1), n(ce, "$urlsafe_base64", function(ae, Re) {
        var pe = this;
        return ae == null && (ae = f), Re == null && (Re = !1), m("Base64").$urlsafe_encode64(pe.$random_bytes(ae), Re).$encode("US-ASCII");
      }, -1), n(ce, "$uuid", function() {
        var ae = this, Re = f;
        return Re = ae.$hex(16).$split(""), Re["$[]="](12, "4"), Re["$[]="](16, (parseInt(Re["$[]"](16), 16) & 3 | 8).toString(16)), Re = [Re["$[]"](i(0, 8, !0)), Re["$[]"](i(8, 12, !0)), Re["$[]"](i(12, 16, !0)), Re["$[]"](i(16, 20, !0)), Re["$[]"](i(20, 32, !0))], Re = s(Re, "map", [], "join".$to_proc()), Re.$join("-");
      }), n(ce, "$random_float", function() {
        var ae = this, Re = f, pe = f;
        return Re = ae.$bytes(4), pe = 0, s(4, "times", [], function(J) {
          return J == null && (J = f), pe = pe["$<<"](8), pe = pe["$|"](Re["$[]"](J).$ord());
        }), o(pe.$abs(), 2147483647);
      }), n(ce, "$random_number", function(ae) {
        var Re = this;
        function pe() {
          return Re.$random_float();
        }
        function Ce(R) {
          return Math.floor(pe() * R);
        }
        function J() {
          var R = ae.begin, ve = ae.end;
          if (R === f || ve === f)
            return f;
          var F = ve - R;
          return F < 0 ? f : F === 0 ? R : (ve % 1 === 0 && R % 1 === 0 && !ae.excl && F++, Ce(F) + R);
        }
        return ae == null ? pe() : ae.$$is_range ? J() : ae.$$is_number ? (ae <= 0 && a.$raise(m("ArgumentError"), "invalid argument - " + ae), ae % 1 === 0 ? Ce(ae) : pe() * ae) : (ae = l["$coerce_to!"](ae, m("Integer"), "to_int"), ae <= 0 && a.$raise(m("ArgumentError"), "invalid argument - " + ae), Ce(ae));
      }, -1), n(ce, "$alphanumeric", function(ae) {
        var Re = this, pe = f;
        return ae == null && (ae = f), ae = Y("Random").$_verify_count(ae), pe = s([i("0", "9", !1), i("a", "z", !1), i("A", "Z", !1)], "map", [], "to_a".$to_proc()).$flatten(), s(m("Array"), "new", [ae], function Ce(J) {
          var R = Ce.$$s == null ? this : Ce.$$s;
          return pe["$[]"](R.$random_number(pe.$length()));
        }, { $$s: Re }).$join();
      }, -1);
    }(z, A), z.$include(m(m("Random"), "Formatter")), z.$extend(m(m("Random"), "Formatter"));
  }("::", null, c);
};
Opal.modules["corelib/random/mersenne_twister"] = function(t) {
  var e = t.klass, r = t.const_set, n = t.send, i = t.nil, s = t.$$$, o = i;
  return t.add_stubs("generator="), o = /* @__PURE__ */ function() {
    var a = 624, l = 397, c = 2567483615, f = 2147483648, m = 2147483647, b = function(ge, Y) {
      return ge & f | Y & m;
    }, C = function(ge, Y) {
      return b(ge, Y) >>> 1 ^ (Y & 1 ? c : 0);
    };
    function N(ge) {
      var Y = { left: 0, next: a, state: new Array(a) };
      return z(Y, ge), Y;
    }
    function z(ge, Y) {
      var fe;
      for (ge.state[0] = Y >>> 0, fe = 1; fe < a; fe++)
        ge.state[fe] = 1812433253 * (ge.state[fe - 1] ^ ge.state[fe - 1] >> 30 >>> 0) + fe, ge.state[fe] &= 4294967295;
      ge.left = 1, ge.next = a;
    }
    function A(ge) {
      var Y = 0, fe = ge.state, ae;
      for (ge.left = a, ge.next = 0, ae = a - l + 1; --ae; Y++)
        fe[Y] = fe[Y + l] ^ C(fe[Y + 0], fe[Y + 1]);
      for (ae = l; --ae; Y++)
        fe[Y] = fe[Y + (l - a)] ^ C(fe[Y + 0], fe[Y + 1]);
      fe[Y] = fe[Y + (l - a)] ^ C(fe[Y + 0], fe[0]);
    }
    function Q(ge) {
      var Y;
      return --ge.left <= 0 && A(ge), Y = ge.state[ge.next++], Y ^= Y >>> 11, Y ^= Y << 7 & 2636928640, Y ^= Y << 15 & 4022730752, Y ^= Y >>> 18, Y >>> 0;
    }
    function Te(ge, Y) {
      return ge >>>= 5, Y >>>= 6, (ge * 67108864 + Y) * (1 / 9007199254740992);
    }
    function ce(ge) {
      var Y = Q(ge), fe = Q(ge);
      return Te(Y, fe);
    }
    return { genrand_real: ce, init: N };
  }(), function(a, l) {
    var c = e(a, l, "Random"), f, m = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
    return r(c, "MERSENNE_TWISTER_GENERATOR", {
      new_seed: function() {
        return Math.round(Math.random() * m);
      },
      reseed: function(b) {
        return o.init(b);
      },
      rand: function(b) {
        return o.genrand_real(b);
      }
    }), f = [s(c, "MERSENNE_TWISTER_GENERATOR")], n(c, "generator=", f), f[f.length - 1];
  }("::", null);
};
Opal.modules["corelib/random"] = function(t) {
  var e = t.truthy, r = t.klass, n = t.Kernel, i = t.defs, s = t.Opal, o = t.def, a = t.eqeqeq, l = t.send, c = t.top, f = t.nil, m = t.$$$;
  return t.add_stubs("require,attr_reader,to_int,raise,new_seed,coerce_to!,reseed,rand,seed,bytes,===,==,state,_verify_count,encode,join,new,chr,random_number,random_float,const_defined?,const_set"), c.$require("corelib/random/formatter"), function(b, C) {
    var N = r(b, C, "Random");
    return N.$attr_reader("seed", "state"), i(N, "$_verify_count", function(A) {
      return e(A) || (A = 16), typeof A != "number" && (A = A.$to_int()), A < 0 && n.$raise(m("ArgumentError"), "negative string size (or size too big)"), A = Math.floor(A), A;
    }), o(N, "$initialize", function(A) {
      var Q = this;
      return A == null && (A = m("Random").$new_seed()), A = s["$coerce_to!"](A, m("Integer"), "to_int"), Q.state = A, Q.$reseed(A);
    }, -1), o(N, "$reseed", function(A) {
      var Q = this;
      return Q.seed = A, Q.$rng = t.$$rand.reseed(A);
    }), i(N, "$new_seed", function() {
      return t.$$rand.new_seed();
    }), i(N, "$rand", function(A) {
      var Q = this;
      return m(Q, "DEFAULT").$rand(A);
    }, -1), i(N, "$srand", function(A) {
      var Q = this, Te = f;
      return A == null && (A = m("Random").$new_seed()), A = s["$coerce_to!"](A, m("Integer"), "to_int"), Te = m(Q, "DEFAULT").$seed(), m(Q, "DEFAULT").$reseed(A), Te;
    }, -1), i(N, "$urandom", function(A) {
      return m("SecureRandom").$bytes(A);
    }), o(N, "$==", function(A) {
      var Q = this, Te = f;
      return a(m("Random"), A) ? e(Te = Q.$seed()["$=="](A.$seed())) ? Q.$state()["$=="](A.$state()) : Te : !1;
    }), o(N, "$bytes", function(A) {
      var Q = this;
      return A = m("Random").$_verify_count(A), l(m("Array"), "new", [A], function Te() {
        var ce = Te.$$s == null ? this : Te.$$s;
        return ce.$rand(255).$chr();
      }, { $$s: Q }).$join().$encode("ASCII-8BIT");
    }), i(N, "$bytes", function(A) {
      var Q = this;
      return m(Q, "DEFAULT").$bytes(A);
    }), o(N, "$rand", function(A) {
      var Q = this;
      return Q.$random_number(A);
    }, -1), o(N, "$random_float", function() {
      var A = this;
      return A.state++, t.$$rand.rand(A.$rng);
    }), i(N, "$random_float", function() {
      var A = this;
      return m(A, "DEFAULT").$random_float();
    }), i(N, "$generator=", function(A) {
      var Q = this;
      return t.$$rand = A, e(Q["$const_defined?"]("DEFAULT")) ? m(Q, "DEFAULT").$reseed() : Q.$const_set("DEFAULT", Q.$new(Q.$new_seed()));
    });
  }("::", null), c.$require("corelib/random/mersenne_twister");
};
Opal.modules["corelib/unsupported"] = function(t) {
  var e = t.Kernel, r = t.klass, n = t.send, i = t.slice, s = t.module, o = t.def, a = t.return_val, l = t.alias, c = t.defs, f = t.top, m = [], b = t.nil, C = t.$$$;
  t.add_stubs("raise,warn,each,define_method,%,public,private_method_defined?,private_class_method,instance_method,instance_methods,method_defined?,private_methods");
  var N = {};
  function z(Q) {
    switch (t.config.unsupported_features_severity) {
      case "error":
        e.$raise(C("NotImplementedError"), Q);
        break;
      case "warning":
        A(Q);
        break;
    }
  }
  function A(Q) {
    N[Q] || (N[Q] = !0, f.$warn(Q));
  }
  return function(Q, Te) {
    var ce = r(Q, Te, "String"), ge = "String#%s not supported. Mutable String methods are not supported in Opal.";
    return n(["<<", "capitalize!", "chomp!", "chop!", "downcase!", "gsub!", "lstrip!", "next!", "reverse!", "slice!", "squeeze!", "strip!", "sub!", "succ!", "swapcase!", "tr!", "tr_s!", "upcase!", "prepend", "[]=", "clear", "encode!", "unicode_normalize!"], "each", [], function Y(fe) {
      var ae = Y.$$s == null ? this : Y.$$s;
      return fe == null && (fe = b), n(ae, "define_method", [fe], function(pe) {
        return i(arguments), e.$raise(C("NotImplementedError"), ge["$%"](fe));
      }, -1);
    }, { $$s: ce });
  }("::", null), function(Q) {
    var Te = s(Q, "Kernel"), ce = "Object tainting is not supported by Opal";
    return o(Te, "$taint", function() {
      var Y = this;
      return z(ce), Y;
    }), o(Te, "$untaint", function() {
      var Y = this;
      return z(ce), Y;
    }), o(Te, "$tainted?", function() {
      return z(ce), !1;
    });
  }("::"), function(Q, Te) {
    var ce = r(Q, Te, "Module");
    return o(ce, "$public", function(Y) {
      var fe, ae, Re = this;
      return fe = i(arguments), ae = fe, ae.length === 0 ? (Re.$$module_function = !1, b) : ae.length === 1 ? ae[0] : ae;
    }, -1), o(ce, "$private_class_method", function(Y) {
      var fe, ae;
      return fe = i(arguments), ae = fe, ae.length === 1 ? ae[0] : ae;
    }, -1), o(ce, "$private_method_defined?", a(!1)), o(ce, "$private_constant", function(Y) {
      return i(arguments), b;
    }, -1), l(ce, "nesting", "public"), l(ce, "private", "public"), l(ce, "protected", "public"), l(ce, "protected_method_defined?", "private_method_defined?"), l(ce, "public_class_method", "private_class_method"), l(ce, "public_instance_method", "instance_method"), l(ce, "public_instance_methods", "instance_methods"), l(ce, "public_method_defined?", "method_defined?");
  }("::", null), function(Q) {
    var Te = s(Q, "Kernel");
    return o(Te, "$private_methods", function(ge) {
      return i(arguments), [];
    }, -1), l(Te, "protected_methods", "private_methods"), l(Te, "private_instance_methods", "private_methods"), l(Te, "protected_instance_methods", "private_methods");
  }("::"), function(Q, Te) {
    var ce = s(Q, "Kernel"), ge = [ce].concat(Te), Y = t.$r(ge);
    return o(ce, "$eval", function(ae) {
      return i(arguments), e.$raise(C("NotImplementedError"), "To use Kernel#eval, you must first require 'opal-parser'. " + ("See https://github.com/opal/opal/blob/" + Y("RUBY_ENGINE_VERSION") + "/docs/opal_parser.md for details."));
    }, -1);
  }("::", m), c(f, "$public", function(Te) {
    var ce, ge;
    return ce = i(arguments), ge = ce, ge.length === 1 ? ge[0] : ge;
  }, -1), c(f, "$private", function(Te) {
    var ce, ge;
    return ce = i(arguments), ge = ce, ge.length === 1 ? ge[0] : ge;
  }, -1);
};
Opal.queue(function(t) {
  var e = t.Object;
  return t.nil, t.add_stubs("require,autoload"), e.$require("opal/base"), e.$require("opal/mini"), e.$require("corelib/kernel/format"), e.$require("corelib/string/encoding"), e.$autoload("Math", "corelib/math"), e.$require("corelib/complex/base"), e.$autoload("Complex", "corelib/complex"), e.$require("corelib/rational/base"), e.$autoload("Rational", "corelib/rational"), e.$require("corelib/time"), e.$autoload("Struct", "corelib/struct"), e.$autoload("Set", "corelib/set"), e.$autoload("Dir", "corelib/dir"), e.$autoload("File", "corelib/file"), e.$require("corelib/process/base"), e.$autoload("Process", "corelib/process"), e.$autoload("Random", "corelib/random"), e.$require("corelib/unsupported");
});
function uw(t) {
  Opal.modules["asciidoctor/js/opal_ext/browser/file"] = function(u) {
    var se = u.klass, re = u.defs, W = [];
    return u.nil, u.add_stubs("new"), function($e, S, Z) {
      var Be = se($e, S, "File"), V = [Be].concat(Z), ke = u.$r(V);
      return re(Be, "$read", function(Ke) {
        var xe = "", He = -1;
        try {
          var De = new XMLHttpRequest();
          De.open("GET", Ke, !1), De.addEventListener("load", function() {
            He = this.status, (He === 0 || He === 200) && (xe = this.responseText);
          }), De.overrideMimeType("text/plain"), De.send();
        } catch (Fe) {
          throw ke("IOError").$new("Error reading file or directory: " + Ke + "; reason: " + Fe.message);
        }
        if (He === 404 || He === 0 && !xe)
          throw ke("IOError").$new("No such file or directory: " + Ke);
        return xe;
      });
    }(W[0], null, W);
  }, Opal.modules["asciidoctor/js/opal_ext/browser"] = function(u) {
    var se = u.const_set, re = u.top, W = [];
    u.nil, u.add_stubs("require");
    var $e, S, Z, Be;
    if (typeof t == "object" && typeof t.runtime == "object") {
      var V = t.runtime;
      $e = V.platform, S = V.engine, Z = V.framework, Be = V.ioModule;
    }
    return Be = Be || "xmlhttprequest", $e = $e || "browser", S = S || "", Z = Z || "", se(W[0], "JAVASCRIPT_IO_MODULE", Be), se(W[0], "JAVASCRIPT_PLATFORM", $e), se(W[0], "JAVASCRIPT_ENGINE", S), se(W[0], "JAVASCRIPT_FRAMEWORK", Z), re.$require("asciidoctor/js/opal_ext/browser/file");
  }, Opal.modules["asciidoctor/js/asciidoctor_ext/browser/abstract_node"] = function(u) {
    var se = u.module, re = u.klass, W = u.hash2, $e = u.truthy, S = u.def, Z = [], Be = u.nil, V = u.$$$;
    return u.add_stubs("web_path,path_resolver,uriish?,[],attr?,start_with?,descends_from?,base_dir,join,prepare_source_string,read,fetch,warn,logger,normalize_system_path,read_asset"), function(ke, O) {
      var Ke = se(ke, "Asciidoctor"), xe = [Ke].concat(O);
      return function(He, De, Fe) {
        var ot = re(He, De, "AbstractNode"), Ge = [ot].concat(Fe), tt = u.$r(Ge), Ye = ot.$$prototype;
        return Ye.document = Be, S(ot, "$read_contents", function(st, L) {
          var je = this, k = Be, Ze = Be, nt = Be;
          if (L == null && (L = W([], {})), k = je.document, $e(tt("Helpers")["$uriish?"](st)) || $e(Ze = L["$[]"]("start")) && $e(tt("Helpers")["$uriish?"](Ze)) && $e(st = k.$path_resolver().$web_path(st, Ze)))
            if ($e(k.$path_resolver()["$descends_from?"](st, k.$base_dir())) || $e(st["$start_with?"]("chrome://")) || $e(k["$attr?"]("allow-uri-read")))
              try {
                return $e(L["$[]"]("normalize")) ? tt("Helpers").$prepare_source_string(V("File").$read(st)).$join(tt("LF")) : V("File").$read(st);
              } catch (ee) {
                if (u.rescue(ee, [tt("StandardError")]))
                  try {
                    return $e(L.$fetch("warn_on_failure", !0)) && je.$logger().$warn("could not retrieve contents of " + ($e(nt = L["$[]"]("label")) ? nt : "asset") + " at URI: " + st), Be;
                  } finally {
                    u.pop_exception();
                  }
                else
                  throw ee;
              }
            else
              return $e(L.$fetch("warn_on_failure", !0)) && je.$logger().$warn("cannot retrieve contents of " + ($e(nt = L["$[]"]("label")) ? nt : "asset") + " at URI: " + st + " (allow-uri-read attribute not enabled)"), Be;
          else
            return st = je.$normalize_system_path(st, L["$[]"]("start"), Be, W(["target_name"], { target_name: $e(nt = L["$[]"]("label")) ? nt : "asset" })), je.$read_asset(st, W(["normalize", "warn_on_failure", "label"], { normalize: L["$[]"]("normalize"), warn_on_failure: L.$fetch("warn_on_failure", !0), label: L["$[]"]("label") }));
        }, -2), S(ot, "$generate_data_uri_from_uri", function(st, L) {
          var je = this, k = "", Ze = "", nt = -1;
          try {
            var ee = new XMLHttpRequest();
            ee.open("GET", st, !1), ee.overrideMimeType("text/plain; charset=x-user-defined"), ee.addEventListener("load", function() {
              if (nt = this.status, nt === 0 || nt === 200) {
                for (var U = "", ze = this.responseText, Se = 0, Ie = ze.length; Se < Ie; ++Se) {
                  var Ae = ze.charCodeAt(Se), de = Ae & 255;
                  U += String.fromCharCode(de);
                }
                Ze = btoa(U), k = this.getResponseHeader("content-type");
              }
            }), ee.send(null), k || (st.endsWith(".jpeg") || st.endsWith(".jpg") || st.endsWith(".jpe") ? k = "image/jpg" : st.endsWith(".png") ? k = "image/png" : st.endsWith(".svg") ? k = "image/svg+xml" : st.endsWith(".bmp") ? k = "image/bmp" : (st.endsWith(".tif") || st.endsWith(".tiff")) && (k = "image/tiff"));
          } catch {
            nt = 0;
          }
          return nt === 404 || nt === 0 && (!Ze || !k) ? (je.$logger().$warn("could not retrieve image data from URI: " + st), st) : "data:" + k + ";base64," + Ze;
        }, -2);
      }(xe[0], null, xe);
    }(Z[0], Z);
  }, Opal.modules["asciidoctor/js/asciidoctor_ext/browser/open_uri"] = function(u) {
    var se = u.module, re = u.slice, W = u.send, $e = u.to_a, S = u.defs, Z = [], Be = u.nil;
    return u.add_stubs("new,path"), function(V, ke) {
      var O = se(V, "OpenURI"), Ke = [O].concat(ke), xe = u.$r(Ke);
      return S(xe("OpenURI"), "$open_uri", function He(De, Fe) {
        var ot, Ge, tt = He.$$p || Be, Ye = this, We = Be;
        return He.$$p = null, ot = re(arguments, 1), Ge = ot, We = W(xe("File"), "new", [Ye.$path()].concat($e(Ge))), tt !== Be ? u.yield1(tt, We) : We;
      }, -2);
    }(Z[0], Z);
  }, Opal.modules["asciidoctor/js/asciidoctor_ext/browser/path_resolver"] = function(u) {
    var se = u.module, re = u.klass, W = u.truthy, $e = u.def, S = [], Z = u.nil;
    return u.add_stubs("absolute_path?,start_with?"), function(Be, V) {
      var ke = se(Be, "Asciidoctor"), O = [ke].concat(V);
      return function(Ke, xe) {
        var He = re(Ke, xe, "PathResolver");
        return $e(He, "$root?", function(Fe) {
          var ot = this, Ge = Z;
          return W(Ge = ot["$absolute_path?"](Fe)) ? Ge : Fe["$start_with?"]("file://", "http://", "https://", "chrome://");
        });
      }(O[0], null);
    }(S[0], S);
  }, Opal.modules["asciidoctor/js/asciidoctor_ext/browser/reader"] = function(u) {
    var se = u.module, re = u.klass, W = u.truthy, $e = u.eqeq, S = u.not, Z = u.def, Be = [], V = u.nil;
    return u.add_stubs("posixify,new,base_dir,start_with?,uriish?,key?,attributes,descends_from?,replace_next_line,absolute_path?,==,empty?,!,slice,length"), function(ke, O) {
      var Ke = se(ke, "Asciidoctor"), xe = [Ke].concat(O), He = u.$r(xe);
      return function(De, Fe, ot) {
        var Ge = re(De, Fe, "PreprocessorReader"), tt = [Ge].concat(ot), Ye = u.$r(tt), We = Ge.$$prototype;
        return We.path_resolver = We.document = We.include_stack = We.dir = V, Z(Ge, "$resolve_include_path", function(L, je, k) {
          var Ze, nt = this, ee = V, U = V, ze = V, Se = V, Ie = V, Ae = V, de = V, Ee = V;
          if (ee = (nt.path_resolver = W(U = nt.path_resolver) ? U : Ye("PathResolver").$new("\\")).$posixify(L), Ze = ["file", nt.document.$base_dir()], Ze[0], ze = Ze[1], W(ee["$start_with?"]("file://")))
            Se = Ie = ee;
          else if (W(Ye("Helpers")["$uriish?"](ee))) {
            if (!(W(nt.path_resolver["$descends_from?"](ee, ze)) || W(nt.document.$attributes()["$key?"]("allow-uri-read"))))
              return nt.$replace_next_line("link:" + L + "[" + je + "]");
            Se = Ie = ee;
          } else if (W(nt.path_resolver["$absolute_path?"](ee)))
            Se = Ie = "file://" + (W(ee["$start_with?"]("/")) ? "" : "/") + ee;
          else if ($e(Ae = W(de = nt.include_stack["$empty?"]()) ? ze : nt.dir, "."))
            Se = Ie = ee;
          else if (W(Ae["$start_with?"]("file://")) || S(Ye("Helpers")["$uriish?"](Ae)))
            Se = "" + Ae + "/" + ee, W(de) ? Ie = ee : $e(ze, ".") || S(Ee = nt.path_resolver["$descends_from?"](Se, ze)) ? Ie = Se : Ie = Se.$slice(Ee, Se.$length());
          else if (W(de))
            Se = "" + Ae + "/" + (Ie = ee);
          else if (W(Ee = nt.path_resolver["$descends_from?"](Ae, ze)) || W(nt.document.$attributes()["$key?"]("allow-uri-read")))
            Se = "" + Ae + "/" + ee, Ie = W(Ee) ? Se.$slice(Ee, Se.$length()) : ee;
          else
            return nt.$replace_next_line("link:" + L + "[" + je + "]");
          return [Se, "file", Ie];
        });
      }(xe[0], He("Reader"), xe);
    }(Be[0], Be);
  }, Opal.modules["asciidoctor/js/asciidoctor_ext/browser"] = function(u) {
    var se = u.eqeq, re = u.top, W = [], $e = u.$r(W), S = u.nil;
    return u.add_stubs("==,require"), se($e("JAVASCRIPT_IO_MODULE"), "xmlhttprequest") ? (re.$require("asciidoctor/js/asciidoctor_ext/browser/abstract_node"), re.$require("asciidoctor/js/asciidoctor_ext/browser/open_uri"), re.$require("asciidoctor/js/asciidoctor_ext/browser/path_resolver"), re.$require("asciidoctor/js/asciidoctor_ext/browser/reader")) : S;
  }, Opal.modules.set = Opal.return_val(Opal.nil), Opal.modules["asciidoctor/js/opal_ext/kernel"] = function(u) {
    var se = u.module, re = u.slice, W = u.send, $e = u.to_a, S = u.def, Z = u.return_val, Be = [], V = u.nil;
    return u.add_stubs("new"), function(ke, O) {
      var Ke = se(ke, "Kernel"), xe = [Ke].concat(O), He = u.$r(xe);
      return S(Ke, "$open", function De(Fe, ot) {
        var Ge, tt, Ye = De.$$p || V, We = V;
        return De.$$p = null, Ge = re(arguments, 1), tt = Ge, We = W(He("File"), "new", [Fe].concat($e(tt))), Ye !== V ? u.yield1(Ye, We) : We;
      }, -2), S(Ke, "$__dir__", Z(""));
    }(Be[0], Be);
  }, Opal.modules["asciidoctor/js/opal_ext/file"] = function(u) {
    var se = u.klass, re = u.def, W = u.truthy, $e = u.gvars, S = u.return_val, Z = u.defs, Be = [], V = u.nil;
    return u.add_stubs("attr_reader,delete,gsub,read,size,to_enum,chomp,each_line,readlines,split"), function(ke, O, Ke) {
      var xe = se(ke, O, "File"), He = [xe].concat(Ke), De = u.$r(He), Fe = xe.$$prototype;
      return Fe.eof = Fe.path = V, xe.$attr_reader("eof"), xe.$attr_reader("lineno"), xe.$attr_reader("path"), re(xe, "$initialize", function(Ge, tt) {
        var Ye = this, We = V;
        return tt == null && (tt = "r"), Ye.path = Ge, Ye.contents = V, Ye.eof = !1, Ye.lineno = 0, tt = tt.$delete("b"), We = /:(.*)/, tt = tt.$gsub(We, ""), Ye.flags = tt;
      }, -2), re(xe, "$read", function() {
        var Ge = this, tt = V;
        return W(Ge.eof) ? "" : (tt = De("File").$read(Ge.path), Ge.eof = !0, Ge.lineno = tt.$size(), tt);
      }), re(xe, "$each_line", function ot(Ge) {
        var tt = ot.$$p || V, Ye = this, We = V;
        if ($e["/"] == null && ($e["/"] = V), ot.$$p = null, Ge == null && (Ge = $e["/"]), W(Ye.eof))
          return tt !== V ? Ye : [].$to_enum();
        if (tt !== V) {
          We = De("File").$read(Ye.path), Ye.eof = !1, Ye.lineno = 0;
          for (var st = We.$chomp(), L = We.length != st.length, je = st.split(Ge), k = 0, Ze = je.length; k < Ze; k++)
            Ye.lineno += 1, k < Ze - 1 || L ? u.yield1(tt, je[k] + Ge) : u.yield1(tt, je[k]);
          return Ye.eof = !0, Ye;
        } else
          return Ye.$read().$each_line();
      }, -1), re(xe, "$readlines", function() {
        var Ge = this;
        return De("File").$readlines(Ge.path);
      }), function(ot, Ge) {
        var tt = [ot].concat(Ge), Ye = u.$r(tt);
        return re(ot, "$readlines", function(st, L) {
          var je = V;
          return $e["/"] == null && ($e["/"] = V), L == null && (L = $e["/"]), je = Ye("File").$read(st), je.$split(L);
        }, -2), re(ot, "$file?", S(!0)), re(ot, "$readable?", S(!0)), re(ot, "$read", S(""));
      }(u.get_singleton_class(xe), He);
    }(Be[0], null, Be), function(ke, O, Ke) {
      var xe = se(ke, O, "IO"), He = [xe].concat(Ke), De = u.$r(He);
      return Z(xe, "$read", function(ot) {
        return De("File").$read(ot);
      });
    }(Be[0], null, Be);
  }, Opal.modules["asciidoctor/js/opal_ext/match_data"] = function(u) {
    var se = u.klass, re = u.send, W = u.def, $e = [], S = u.nil;
    return u.add_stubs("[]="), function(Z, Be) {
      var V = se(Z, Be, "MatchData"), ke = V.$$prototype;
      return ke.matches = S, W(V, "$[]=", function(Ke, xe) {
        var He, De = this;
        return He = [Ke, xe], re(De.matches, "[]=", He), He[He.length - 1];
      });
    }($e[0], null);
  }, Opal.modules["asciidoctor/js/opal_ext/string"] = function(u) {
    var se = u.klass, re = u.truthy, W = u.rb_lt, $e = u.def, S = u.alias, Z = u.rb_ge, Be = u.eqeq, V = u.rb_minus, ke = [], O = u.nil;
    return u.add_stubs("method_defined?,<,length,bytes,to_s,byteslice,limit_bytesize,>=,==,-,_original_byteslice,unpack,_original_unpack"), function(Ke, xe) {
      var He = se(Ke, xe, "String");
      return re(He["$method_defined?"]("limit_bytesize")) || $e(He, "$limit_bytesize", function(Fe) {
        var ot = this, Ge = O;
        return re(W(Fe, ot.$bytes().$length())) ? (Ge = ot.$byteslice(0, Fe), Ge.$to_s()) : ot.$to_s();
      }), re(He["$method_defined?"]("limit")) || S(He, "limit", "limit_bytesize"), S(He, "_original_byteslice", "byteslice"), $e(He, "$byteslice", function(Fe, ot) {
        var Ge = this;
        return ot == null && (ot = 1), Be(Fe, 3) && re(Z(ot, Fe)) && re(Ge.charCodeAt() === 65279) ? Ge.substr(1).$byteslice(0, V(ot, 3)) : Ge.$_original_byteslice(Fe, ot);
      }, -2), S(He, "_original_unpack", "unpack"), $e(He, "$unpack", function(Fe) {
        var ot = this;
        if (Be(Fe, "C3")) {
          if (re(ot.charCodeAt() === 65279))
            return [239, 187, 191];
          for (var Ge = [], tt = 0; tt < 3; tt++)
            tt < ot.length ? Ge.push(ot.charCodeAt(tt)) : Ge.push(O);
          return Ge;
        } else
          return ot.$_original_unpack(Fe);
      });
    }(ke[0], null);
  }, Opal.modules["asciidoctor/js/opal_ext/uri"] = function(u) {
    var se = u.module, re = u.defs, W = u.return_self, $e = u.def, S = [];
    return u.nil, u.add_stubs("extend"), function(Z, Be) {
      var V = se(Z, "URI"), ke = [V].concat(Be), O = u.$r(ke);
      return re(V, "$parse", function(xe) {
        return xe.$extend(O("URI"));
      }), $e(V, "$path", W);
    }(S[0], S);
  }, Opal.modules["asciidoctor/js/opal_ext/base64"] = function(u) {
    var se = u.module, re = u.defs, W = u.ensure_kwargs, $e = u.truthy, S = [], Z = u.nil;
    return u.add_stubs("delete"), function(Be) {
      var V = se(Be, "Base64"), ke, O;
      return ke = u.global.btoa || function(Ke) {
        var xe;
        return Ke instanceof Buffer ? xe = Ke : xe = Buffer.from(Ke.toString(), "binary"), xe.toString("base64");
      }, O = u.global.atob || function(Ke) {
        return Buffer.from(Ke, "base64").toString("binary");
      }, re(V, "$decode64", function(xe) {
        return O(xe.replace(/\r?\n/g, ""));
      }), re(V, "$encode64", function(xe) {
        return ke(xe).replace(/(.{60})/g, `$1
`).replace(/([^\n])$/g, `$1
`);
      }), re(V, "$strict_decode64", function(xe) {
        return O(xe);
      }), re(V, "$strict_encode64", function(xe) {
        return ke(xe);
      }), re(V, "$urlsafe_decode64", function(xe) {
        return O(xe.replace(/\-/g, "+").replace(/_/g, "/"));
      }), re(V, "$urlsafe_encode64", function(xe, He) {
        var De, Fe = Z;
        return He = W(He), De = He.$$smap.padding, De == null && (De = !0), Fe = ke(xe).replace(/\+/g, "-").replace(/\//g, "_"), $e(De) || (Fe = Fe.$delete("=")), Fe;
      }, -2);
    }(S[0]);
  }, Opal.modules["asciidoctor/js/opal_ext/number"] = function(u) {
    var se = u.klass, re = u.truthy, W = u.rb_gt, $e = u.def, S = [], Z = u.$r(S);
    return u.nil, u.add_stubs("coerce_to!,>"), function(Be, V, ke) {
      var O = se(Be, V, "Number"), Ke = [O].concat(ke), xe = u.$r(Ke);
      return $e(O, "$round", function(De) {
        var Fe = this;
        return De = xe("Opal")["$coerce_to!"](De, xe("Integer"), "to_int"), re(W(De, 0)) ? Number(Fe.toFixed(De)) : Math.round(Fe);
      }, -1);
    }(S[0], Z("Numeric"), S);
  }, Opal.modules["asciidoctor/js/opal_ext"] = function(u) {
    var se = u.top;
    u.nil, u.add_stubs("require"), se.$require("asciidoctor/js/opal_ext/kernel"), se.$require("asciidoctor/js/opal_ext/file"), se.$require("asciidoctor/js/opal_ext/match_data"), se.$require("asciidoctor/js/opal_ext/string"), se.$require("asciidoctor/js/opal_ext/uri"), se.$require("asciidoctor/js/opal_ext/base64"), se.$require("asciidoctor/js/opal_ext/number"), u.config.unsupported_features_severity = "ignore", se.$require("asciidoctor/js/opal_ext/browser");
  }, Opal.modules["asciidoctor/js/rx"] = function(u) {
    var se = u.module, re = u.const_set, W = u.send, $e = u.gvars, S = u.truthy, Z = u.defs, Be = u.rb_plus, V = [], ke = u.nil;
    return u.add_stubs("gsub,+,unpack_hex_range"), function(O, Ke) {
      var xe = se(O, "Asciidoctor"), He = [xe].concat(Ke), De = u.$r(He);
      return re(He[0], "HEX_RANGE_RX", /([A-F0-9]{4})(?:-([A-F0-9]{4}))?/), Z(xe, "$unpack_hex_range", function(ot) {
        return W(ot, "gsub", [De("HEX_RANGE_RX")], function() {
          var tt, Ye = ke;
          return "\\u" + ((tt = $e["~"]) === ke ? ke : tt["$[]"](1)) + (S(Ye = (tt = $e["~"]) === ke ? ke : tt["$[]"](2)) ? "-\\u" + ((tt = $e["~"]) === ke ? ke : tt["$[]"](2)) : Ye);
        });
      }), re(He[0], "P_L", Be("A-Za-z", xe.$unpack_hex_range("00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D037F03860388-038A038C038E-03A103A3-03F503F7-0481048A-052F0531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A0-08B20904-0939093D09500958-09610971-09800985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA16F1-16F81700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191E1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A69DA6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A7ADA7B0A7B1A7F7-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFA9E0-A9E4A9E6-A9EFA9FA-A9FEAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA7E-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EAB30-AB5AAB5C-AB5FAB64AB65ABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC"))), re(He[0], "P_Nl", xe.$unpack_hex_range("16EE-16F02160-21822185-218830073021-30293038-303AA6E6-A6EF")), re(He[0], "P_Nd", Be("0-9", xe.$unpack_hex_range("0660-066906F0-06F907C0-07C90966-096F09E6-09EF0A66-0A6F0AE6-0AEF0B66-0B6F0BE6-0BEF0C66-0C6F0CE6-0CEF0D66-0D6F0DE6-0DEF0E50-0E590ED0-0ED90F20-0F291040-10491090-109917E0-17E91810-18191946-194F19D0-19D91A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C59A620-A629A8D0-A8D9A900-A909A9D0-A9D9A9F0-A9F9AA50-AA59ABF0-ABF9FF10-FF19"))), re(He[0], "P_Pc", xe.$unpack_hex_range("005F203F20402054FE33FE34FE4D-FE4FFF3F")), re(He[0], "CC_ALPHA", "" + De("P_L") + De("P_Nl")), re(He[0], "CG_ALPHA", "[" + De("CC_ALPHA") + "]"), re(He[0], "CC_ALNUM", "" + De("CC_ALPHA") + De("P_Nd")), re(He[0], "CG_ALNUM", "[" + De("CC_ALNUM") + "]"), re(He[0], "CC_WORD", "" + De("CC_ALNUM") + De("P_Pc")), re(He[0], "CG_WORD", "[" + De("CC_WORD") + "]"), re(He[0], "CG_BLANK", "[ \\t]"), re(He[0], "CC_EOL", "(?=\\n|$)"), re(He[0], "CG_GRAPH", "[^\\s\\x00-\\x1F\\x7F]"), re(He[0], "CC_ALL", "[\\s\\S]"), re(He[0], "CC_ANY", "[^\\n]");
    }(V[0], V);
  }, Opal.modules.strscan = function(u) {
    var se = u.klass, re = u.def, W = u.truthy, $e = u.eqeqeq, S = u.Opal, Z = u.return_ivar, Be = u.send, V = u.alias, ke = [], O = u.nil;
    return u.add_stubs("attr_reader,anchor,empty?,===,to_s,coerce_to!,scan_until,length,size,rest,pos=,beginning_of_line?,get_byte,private"), function(Ke, xe, He) {
      var De = se(Ke, xe, "StringScanner"), Fe = [De].concat(He), ot = u.$r(Fe), Ge = De.$$prototype;
      return Ge.pos = Ge.string = Ge.working = Ge.matched = Ge.prev_pos = Ge.match = O, De.$attr_reader("pos", "matched"), re(De, "$initialize", function(Ye) {
        var We = this;
        return We.string = Ye, We.pos = 0, We.matched = O, We.working = Ye, We.match = [];
      }), De.$attr_reader("string"), re(De, "$beginning_of_line?", function() {
        var Ye = this;
        return Ye.pos === 0 || Ye.string.charAt(Ye.pos - 1) === `
`;
      }), re(De, "$scan", function(Ye) {
        var We = this;
        Ye = We.$anchor(Ye);
        var st = Ye.exec(We.working);
        return st == null ? We.matched = O : (We.prev_pos = We.pos, We.pos += st[0].length, We.working = We.working.substring(st[0].length), We.matched = st[0], We.match = st, st[0]);
      }), re(De, "$scan_until", function(Ye) {
        var We = this;
        Ye = We.$anchor(Ye);
        for (var st = We.working, L = 0; st.length != L; ++L) {
          var je = Ye.exec(st.substr(L));
          if (je !== null) {
            var k = L + je[0].length, Ze = st.substr(0, k);
            return We.matched = je[0], We.match = je, We.prev_pos = We.pos + L, We.pos += k, We.working = st.substr(k), Ze;
          }
        }
        return We.matched = O;
      }), re(De, "$[]", function(Ye) {
        var We = this, st = O;
        if (W(We.match["$empty?"]()))
          return O;
        $e(ot("Symbol"), st = Ye) ? Ye = Ye.$to_s() : $e(ot("String"), st) || (Ye = S["$coerce_to!"](Ye, ot("Integer"), "to_int"));
        var L = We.match;
        return Ye < 0 && (Ye += L.length), Ye < 0 || Ye >= L.length || L[Ye] == null ? O : L[Ye];
      }), re(De, "$check", function(Ye) {
        var We = this;
        Ye = We.$anchor(Ye);
        var st = Ye.exec(We.working);
        return st == null ? We.matched = O : We.matched = st[0];
      }), re(De, "$check_until", function(Ye) {
        var We = this, st = We.prev_pos, L = We.pos, je = We.working, k = We.$scan_until(Ye);
        return We.prev_pos = st, We.pos = L, We.working = je, k;
      }), re(De, "$peek", function(Ye) {
        var We = this;
        return We.working.substring(0, Ye);
      }), re(De, "$eos?", function() {
        var Ye = this;
        return Ye.working.length === 0;
      }), re(De, "$exist?", function(Ye) {
        var We = this, st = Ye.exec(We.working);
        return st == null ? O : st.index == 0 ? 0 : st.index + 1;
      }), re(De, "$skip", function(Ye) {
        var We = this;
        Ye = We.$anchor(Ye);
        var st = Ye.exec(We.working);
        if (st == null)
          return We.match = [], We.matched = O;
        var L = st[0], je = L.length;
        return We.matched = L, We.match = st, We.prev_pos = We.pos, We.pos += je, We.working = We.working.substring(je), je;
      }), re(De, "$skip_until", function(Ye) {
        var We = this, st = We.$scan_until(Ye);
        return st === O ? O : (We.matched = st.substr(-1), st.length);
      }), re(De, "$get_byte", function() {
        var Ye = this, We = O;
        return Ye.pos < Ye.string.length ? (Ye.prev_pos = Ye.pos, Ye.pos += 1, We = Ye.matched = Ye.working.substring(0, 1), Ye.working = Ye.working.substring(1)) : Ye.matched = O, We;
      }), re(De, "$match?", function(Ye) {
        var We = this;
        Ye = We.$anchor(Ye);
        var st = Ye.exec(We.working);
        return st == null ? O : (We.prev_pos = We.pos, st[0].length);
      }), re(De, "$pos=", function(Ye) {
        var We = this;
        return Ye < 0 && (Ye += We.string.$length()), We.pos = Ye, We.working = We.string.slice(Ye);
      }), re(De, "$matched_size", function() {
        var Ye = this;
        return Ye.matched === O ? O : Ye.matched.length;
      }), re(De, "$post_match", function() {
        var Ye = this;
        return Ye.matched === O ? O : Ye.string.substr(Ye.pos);
      }), re(De, "$pre_match", function() {
        var Ye = this;
        return Ye.matched === O ? O : Ye.string.substr(0, Ye.prev_pos);
      }), re(De, "$reset", function() {
        var Ye = this;
        return Ye.working = Ye.string, Ye.matched = O, Ye.pos = 0;
      }), re(De, "$rest", Z("working")), re(De, "$rest?", function() {
        var Ye = this;
        return Ye.working.length !== 0;
      }), re(De, "$rest_size", function() {
        var Ye = this;
        return Ye.$rest().$size();
      }), re(De, "$terminate", function() {
        var Ye, We = this;
        return We.match = O, Ye = [We.string.$length()], Be(We, "pos=", Ye), Ye[Ye.length - 1];
      }), re(De, "$unscan", function() {
        var Ye = this;
        return Ye.pos = Ye.prev_pos, Ye.prev_pos = O, Ye.match = O, Ye;
      }), V(De, "bol?", "beginning_of_line?"), V(De, "getch", "get_byte"), De.$private(), re(De, "$anchor", function(Ye) {
        var We = Ye.toString().match(/\/([^\/]+)$/);
        return We = We ? We[1] : void 0, new RegExp("^(?:" + Ye.source + ")", We);
      });
    }(ke[0], null, ke);
  }, Opal.modules["asciidoctor/js"] = function(u) {
    var se = u.top;
    return u.nil, u.add_stubs("require"), se.$require("asciidoctor/js/opal_ext"), se.$require("asciidoctor/js/rx"), se.$require("strscan");
  }, Opal.modules["asciidoctor/core_ext/nil_or_empty"] = function(u) {
    var se = u.klass, re = u.truthy, W = u.alias, $e = [], S = u.nil;
    return u.add_stubs("method_defined?,nil?,empty?"), function(Z, Be) {
      var V = se(Z, Be, "NilClass");
      return re(V["$method_defined?"]("nil_or_empty?")) ? S : W(V, "nil_or_empty?", "nil?");
    }($e[0], null), function(Z, Be) {
      var V = se(Z, Be, "String");
      return re(V["$method_defined?"]("nil_or_empty?")) ? S : W(V, "nil_or_empty?", "empty?");
    }($e[0], null), function(Z, Be) {
      var V = se(Z, Be, "Array");
      return re(V["$method_defined?"]("nil_or_empty?")) ? S : W(V, "nil_or_empty?", "empty?");
    }($e[0], null), function(Z, Be) {
      var V = se(Z, Be, "Hash");
      return re(V["$method_defined?"]("nil_or_empty?")) ? S : W(V, "nil_or_empty?", "empty?");
    }($e[0], null), function(Z, Be) {
      var V = se(Z, Be, "Numeric");
      return re(V["$method_defined?"]("nil_or_empty?")) ? S : W(V, "nil_or_empty?", "nil?");
    }($e[0], null);
  }, Opal.modules["asciidoctor/core_ext/hash/merge"] = function(u) {
    var se = u.eqeq, re = u.send, W = u.slice, $e = u.truthy, S = u.rb_lt, Z = u.rb_gt, Be = u.send2, V = u.find_super, ke = u.def, O = u.top, Ke = [], xe = u.$r(Ke), He = u.nil;
    return u.add_stubs("==,arity,instance_method,send,new,<,length,dup,>,inject,merge,[]"), se(xe("Hash").$instance_method("merge").$arity(), 1) ? xe("Hash").$send("prepend", re(xe("Module"), "new", [], function De() {
      var Fe = De.$$s == null ? this : De.$$s;
      return ke(Fe, "$merge", function ot(Ge) {
        var tt, Ye;
        ot.$$p;
        var We = this, st = He;
        return ot.$$p = null, tt = W(arguments), Ye = tt, $e(S(st = Ye.$length(), 1)) ? We.$dup() : $e(Z(st, 1)) ? re(Ye, "inject", [We], function(je, k) {
          return je == null && (je = He), k == null && (k = He), je.$merge(k);
        }) : Be(We, V(We, "merge", ot, !1, !0), "merge", [Ye["$[]"](0)], null);
      }, -1);
    }, { $$s: O })) : He;
  }, Opal.modules["asciidoctor/core_ext/match_data/names"] = function(u) {
    var se = u.truthy, re = u.klass, W = u.def, $e = [], S = u.$r($e), Z = u.nil;
    return u.add_stubs("method_defined?"), se(S("MatchData")["$method_defined?"]("names")) ? Z : function(Be, V) {
      var ke = re(Be, V, "MatchData");
      return W(ke, "$names", function() {
        return [];
      });
    }($e[0], null);
  }, Opal.modules["asciidoctor/core_ext"] = function(u) {
    var se = u.top;
    return u.nil, se.$require("asciidoctor/core_ext.rb/../core_ext/nil_or_empty"), se.$require("asciidoctor/core_ext.rb/../core_ext/hash/merge"), se.$require("asciidoctor/core_ext.rb/../core_ext/match_data/names");
  }, Opal.modules["asciidoctor/helpers"] = function(u) {
    var se = u.module, re = u.truthy, W = u.eqeq, $e = u.gvars, S = u.def, Z = u.send, Be = u.neqeq, V = u.const_set, ke = u.hash2, O = u.to_ary, Ke = u.rb_times, xe = u.eqeqeq, He = u.rb_plus, De = u.Class, Fe = u.Object, ot = [], Ge = u.nil, tt = u.$$$;
    return u.add_stubs("module_function,require,include?,include,==,path,message,raise,warn,logger,chomp,empty?,slice,unpack,[],[]=,byteslice,bytesize,map,rstrip,encode,encoding,nil_or_empty?,!=,tap,each_line,<<,!,start_with?,match?,gsub,rindex,index,basename,extname,length,directory?,dirname,mkdir_p,mkdir,private_constant,join,divmod,*,===,+,to_s,to_i,succ,class_for_name,const_get"), function(Ye, We) {
      var st = se(Ye, "Asciidoctor"), L = [st].concat(We);
      return function(je, k) {
        var Ze = se(je, "Helpers"), nt = [Ze].concat(k), ee = u.$r(nt);
        return Ze.$module_function(), S(Ze, "$require_library", function(ze, Se, Ie) {
          var Ae = this, de = Ge;
          $e["!"] == null && ($e["!"] = Ge), Se == null && (Se = !0), Ie == null && (Ie = "abort");
          try {
            return Ae.$require(ze);
          } catch (Ee) {
            if (u.rescue(Ee, [tt("LoadError")]))
              try {
                if (re(Ae["$include?"](ee("Logging"))) || Ae.$include(ee("Logging")), re(Se))
                  switch (W(Se, !0) && (Se = ze), Ie) {
                    case "abort":
                      de = W($e["!"].$path(), Se) ? "" : " (reason: " + (re($e["!"].$path()) ? "cannot load '" + $e["!"].$path() + "'" : $e["!"].$message()) + ")", Ae.$raise(tt("LoadError"), "asciidoctor: FAILED: required gem '" + Se + "' is not available" + de + ". Processing aborted.");
                      break;
                    case "warn":
                      de = W($e["!"].$path(), Se) ? "" : " (reason: " + (re($e["!"].$path()) ? "cannot load '" + $e["!"].$path() + "'" : $e["!"].$message()) + ")", Ae.$logger().$warn("optional gem '" + Se + "' is not available" + de + ". Functionality disabled.");
                      break;
                    default:
                  }
                else
                  switch (Ie) {
                    case "abort":
                      Ae.$raise(tt("LoadError"), "asciidoctor: FAILED: " + $e["!"].$message().$chomp(".") + ". Processing aborted.");
                      break;
                    case "warn":
                      Ae.$logger().$warn("" + $e["!"].$message().$chomp(".") + ". Functionality disabled.");
                      break;
                    default:
                  }
                return Ge;
              } finally {
                u.pop_exception();
              }
            else
              throw Ee;
          }
        }, -2), S(Ze, "$prepare_source_array", function(ze, Se) {
          var Ie = Ge, Ae = Ge, de = Ge;
          return Se == null && (Se = !0), re(ze["$empty?"]()) ? [] : W(Ie = (Ae = (de = ze["$[]"](0)).$unpack("C3")).$slice(0, 2), ee("BOM_BYTES_UTF_16LE")) ? (ze["$[]="](0, de.$byteslice(2, de.$bytesize())), re(Se) ? Z(ze, "map", [], function(te) {
            return te == null && (te = Ge), te.$encode(ee("UTF_8"), tt(tt("Encoding"), "UTF_16LE")).$rstrip();
          }) : Z(ze, "map", [], function(te) {
            return te == null && (te = Ge), te.$encode(ee("UTF_8"), tt(tt("Encoding"), "UTF_16LE")).$chomp();
          })) : W(Ie, ee("BOM_BYTES_UTF_16BE")) ? (ze["$[]="](0, de.$byteslice(2, de.$bytesize())), re(Se) ? Z(ze, "map", [], function(te) {
            return te == null && (te = Ge), te.$encode(ee("UTF_8"), tt(tt("Encoding"), "UTF_16BE")).$rstrip();
          }) : Z(ze, "map", [], function(te) {
            return te == null && (te = Ge), te.$encode(ee("UTF_8"), tt(tt("Encoding"), "UTF_16BE")).$chomp();
          })) : (W(Ae, ee("BOM_BYTES_UTF_8")) && ze["$[]="](0, de.$byteslice(3, de.$bytesize())), W(de.$encoding(), ee("UTF_8")) ? re(Se) ? Z(ze, "map", [], function(te) {
            return te == null && (te = Ge), te.$rstrip();
          }) : Z(ze, "map", [], function(te) {
            return te == null && (te = Ge), te.$chomp();
          }) : re(Se) ? Z(ze, "map", [], function(te) {
            return te == null && (te = Ge), te.$encode(ee("UTF_8")).$rstrip();
          }) : Z(ze, "map", [], function(te) {
            return te == null && (te = Ge), te.$encode(ee("UTF_8")).$chomp();
          }));
        }, -2), S(Ze, "$prepare_source_string", function(ze, Se) {
          var Ie = Ge, Ae = Ge;
          return Se == null && (Se = !0), re(ze["$nil_or_empty?"]()) ? [] : (W(Ie = (Ae = ze.$unpack("C3")).$slice(0, 2), ee("BOM_BYTES_UTF_16LE")) ? ze = ze.$byteslice(2, ze.$bytesize()).$encode(ee("UTF_8"), tt(tt("Encoding"), "UTF_16LE")) : W(Ie, ee("BOM_BYTES_UTF_16BE")) ? ze = ze.$byteslice(2, ze.$bytesize()).$encode(ee("UTF_8"), tt(tt("Encoding"), "UTF_16BE")) : W(Ae, ee("BOM_BYTES_UTF_8")) ? (ze = ze.$byteslice(3, ze.$bytesize()), W(ze.$encoding(), ee("UTF_8")) || (ze = ze.$encode(ee("UTF_8")))) : Be(ze.$encoding(), ee("UTF_8")) && (ze = ze.$encode(ee("UTF_8"))), re(Se) ? Z([], "tap", [], function(Ee) {
            return Ee == null && (Ee = Ge), Z(ze, "each_line", [], function(G) {
              return G == null && (G = Ge), Ee["$<<"](G.$rstrip());
            });
          }) : Z([], "tap", [], function(Ee) {
            return Ee == null && (Ee = Ge), Z(ze, "each_line", [], function(G) {
              return G == null && (G = Ge), Ee["$<<"](G.$chomp());
            });
          }));
        }, -2), W(tt("RUBY_ENGINE"), "jruby") ? S(Ze, "$uriish?", function(ze) {
          var Se = Ge, Ie = Ge;
          return re(Se = re(Ie = ze["$include?"](":")) ? ze["$start_with?"]("uri:classloader:")["$!"]() : Ie) ? ee("UriSniffRx")["$match?"](ze) : Se;
        }) : S(Ze, "$uriish?", function(ze) {
          var Se = Ge;
          return re(Se = ze["$include?"](":")) ? ee("UriSniffRx")["$match?"](ze) : Se;
        }), S(Ze, "$encode_uri_component", function(ze) {
          return encodeURIComponent(ze).replace(/%20|[!'()*]/g, function(Se) {
            return Se === "%20" ? "+" : "%" + Se.charCodeAt(0).toString(16);
          });
        }), S(Ze, "$encode_spaces_in_uri", function(ze) {
          return re(ze["$include?"](" ")) ? ze.$gsub(" ", "%20") : ze;
        }), S(Ze, "$rootname", function(ze) {
          var Se = Ge;
          return re(Se = ze.$rindex(".")) ? re(ze.$index("/", Se)) ? ze : ze.$slice(0, Se) : ze;
        }), S(Ze, "$basename", function(ze, Se) {
          var Ie = this;
          return Se == null && (Se = Ge), re(Se) ? tt("File").$basename(ze, W(Se, !0) ? Ie.$extname(ze) : Se) : tt("File").$basename(ze);
        }, -2), S(Ze, "$extname?", function(ze) {
          var Se = Ge, Ie = Ge;
          return re(Se = Ie = ze.$rindex(".")) ? ze.$index("/", Ie)["$!"]() : Se;
        }), re(tt(tt("File"), "ALT_SEPARATOR")) ? S(Ze, "$extname", function(ze, Se) {
          var Ie = Ge;
          return Se == null && (Se = ""), re(Ie = ze.$rindex(".")) ? re(ze.$index("/", Ie)) || re(ze.$index(tt(tt("File"), "ALT_SEPARATOR"), Ie)) ? Se : ze.$slice(Ie, ze.$length()) : Se;
        }, -2) : S(Ze, "$extname", function(ze, Se) {
          var Ie = Ge;
          return Se == null && (Se = ""), re(Ie = ze.$rindex(".")) ? re(ze.$index("/", Ie)) ? Se : ze.$slice(Ie, ze.$length()) : Se;
        }, -2), S(Ze, "$mkdir_p", function(ze) {
          var Se = this, Ie = Ge;
          if (re(tt("File")["$directory?"](ze)))
            return Ge;
          W(Ie = tt("File").$dirname(ze), ".") || Se.$mkdir_p(Ie);
          try {
            return tt("Dir").$mkdir(ze);
          } catch (Ae) {
            if (u.rescue(Ae, [tt("SystemCallError")]))
              try {
                return re(tt("File")["$directory?"](ze)) ? Ge : Se.$raise();
              } finally {
                u.pop_exception();
              }
            else
              throw Ae;
          }
        }), V(nt[0], "ROMAN_NUMERALS", ke(["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"], { M: 1e3, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1 })), Ze.$private_constant("ROMAN_NUMERALS"), S(Ze, "$int_to_roman", function(ze) {
          return Z(ee("ROMAN_NUMERALS"), "map", [], function(Ie, Ae) {
            var de, Ee, te = Ge;
            return Ie == null && (Ie = Ge), Ae == null && (Ae = Ge), Ee = ze.$divmod(Ae), de = O(Ee), te = de[0] == null ? Ge : de[0], ze = de[1] == null ? Ge : de[1], Ke(Ie, te);
          }).$join();
        }), S(Ze, "$nextval", function(ze) {
          var Se = Ge;
          return xe(tt("Integer"), ze) ? He(ze, 1) : W((Se = ze.$to_i()).$to_s(), ze.$to_s()) ? He(Se, 1) : ze.$succ();
        }), S(Ze, "$resolve_class", function(ze) {
          var Se = this;
          return xe(De, ze) ? ze : xe(tt("String"), ze) ? Se.$class_for_name(ze) : Ge;
        }), S(Ze, "$class_for_name", function(ze) {
          var Se = this, Ie = Ge;
          try {
            return xe(De, Ie = Fe.$const_get(ze, !1)) || Se.$raise(), Ie;
          } catch (Ae) {
            if (u.rescue(Ae, [ee("StandardError")]))
              try {
                return Se.$raise(tt("NameError"), "Could not resolve class for name: " + ze);
              } finally {
                u.pop_exception();
              }
            else
              throw Ae;
          }
        });
      }(L[0], L);
    }(ot[0], ot);
  }, Opal.modules.logger = function(u) {
    var se = u.klass, re = u.module, W = u.const_set, $e = u.send, S = u.def, Z = u.eqeqeq, Be = u.rb_plus, V = u.truthy, ke = u.rb_le, O = u.rb_lt, Ke = [], xe = u.nil, He = u.$$$;
    return u.add_stubs("include,to_h,map,constants,const_get,to_s,format,chr,strftime,message_as_string,===,+,message,class,join,backtrace,inspect,attr_reader,attr_accessor,new,key,upcase,raise,add,to_proc,<=,<,write,call,[],now"), function(De, Fe, ot) {
      var Ge = se(De, Fe, "Logger"), tt = [Ge].concat(ot), Ye = u.$r(tt), We = Ge.$$prototype;
      return We.level = We.progname = We.pipe = We.formatter = xe, function(st, L) {
        var je = re(st, "Severity"), k = [je].concat(L);
        return W(k[0], "DEBUG", 0), W(k[0], "INFO", 1), W(k[0], "WARN", 2), W(k[0], "ERROR", 3), W(k[0], "FATAL", 4), W(k[0], "UNKNOWN", 5);
      }(tt[0], tt), Ge.$include(Ye("Severity")), W(tt[0], "SEVERITY_LABELS", $e(Ye("Severity").$constants(), "map", [], function(L) {
        return L == null && (L = xe), [Ye("Severity").$const_get(L), L.$to_s()];
      }).$to_h()), function(st, L, je) {
        var k = se(st, L, "Formatter"), Ze = [k].concat(je), nt = u.$r(Ze);
        return W(Ze[0], "MESSAGE_FORMAT", `%s, [%s] %5s -- %s: %s
`), W(Ze[0], "DATE_TIME_FORMAT", "%Y-%m-%dT%H:%M:%S.%6N"), S(k, "$call", function(U, ze, Se, Ie) {
          var Ae = this;
          return Ae.$format(nt("MESSAGE_FORMAT"), U.$chr(), ze.$strftime(nt("DATE_TIME_FORMAT")), U, Se, Ae.$message_as_string(Ie));
        }), S(k, "$message_as_string", function(U) {
          var ze = xe, Se = xe;
          return Z(He("String"), ze = U) ? U : Z(He("Exception"), ze) ? Be("" + U.$message() + " (" + U.$class() + `)
`, (V(Se = U.$backtrace()) ? Se : []).$join(`
`)) : U.$inspect();
        });
      }(tt[0], null, tt), Ge.$attr_reader("level"), Ge.$attr_accessor("progname"), Ge.$attr_accessor("formatter"), S(Ge, "$initialize", function(L) {
        var je = this;
        return je.pipe = L, je.level = Ye("DEBUG"), je.formatter = Ye("Formatter").$new();
      }), S(Ge, "$level=", function(L) {
        var je = this, k = xe;
        return Z(He("Integer"), L) ? je.level = L : V(k = Ye("SEVERITY_LABELS").$key(L.$to_s().$upcase())) ? je.level = k : je.$raise(Ye("ArgumentError"), "invalid log level: " + L);
      }), S(Ge, "$info", function st(L) {
        var je = st.$$p || xe, k = this;
        return st.$$p = null, L == null && (L = xe), $e(k, "add", [Ye("INFO"), xe, L], je.$to_proc());
      }, -1), S(Ge, "$debug", function st(L) {
        var je = st.$$p || xe, k = this;
        return st.$$p = null, L == null && (L = xe), $e(k, "add", [Ye("DEBUG"), xe, L], je.$to_proc());
      }, -1), S(Ge, "$warn", function st(L) {
        var je = st.$$p || xe, k = this;
        return st.$$p = null, L == null && (L = xe), $e(k, "add", [Ye("WARN"), xe, L], je.$to_proc());
      }, -1), S(Ge, "$error", function st(L) {
        var je = st.$$p || xe, k = this;
        return st.$$p = null, L == null && (L = xe), $e(k, "add", [Ye("ERROR"), xe, L], je.$to_proc());
      }, -1), S(Ge, "$fatal", function st(L) {
        var je = st.$$p || xe, k = this;
        return st.$$p = null, L == null && (L = xe), $e(k, "add", [Ye("FATAL"), xe, L], je.$to_proc());
      }, -1), S(Ge, "$unknown", function st(L) {
        var je = st.$$p || xe, k = this;
        return st.$$p = null, L == null && (L = xe), $e(k, "add", [Ye("UNKNOWN"), xe, L], je.$to_proc());
      }, -1), S(Ge, "$info?", function() {
        var L = this;
        return ke(L.level, Ye("INFO"));
      }), S(Ge, "$debug?", function() {
        var L = this;
        return ke(L.level, Ye("DEBUG"));
      }), S(Ge, "$warn?", function() {
        var L = this;
        return ke(L.level, Ye("WARN"));
      }), S(Ge, "$error?", function() {
        var L = this;
        return ke(L.level, Ye("ERROR"));
      }), S(Ge, "$fatal?", function() {
        var L = this;
        return ke(L.level, Ye("FATAL"));
      }), S(Ge, "$add", function st(L, je, k) {
        var Ze = st.$$p || xe, nt = this, ee = xe;
        return st.$$p = null, je == null && (je = xe), k == null && (k = xe), V(O(L = V(ee = L) ? ee : Ye("UNKNOWN"), nt.level)) || (k = V(ee = k) ? ee : nt.progname, V(je) || (Ze !== xe ? je = u.yieldX(Ze, []) : (je = k, k = nt.progname)), nt.pipe.$write(nt.formatter.$call(V(ee = Ye("SEVERITY_LABELS")["$[]"](L)) ? ee : "ANY", He("Time").$now(), k, je))), !0;
      }, -2);
    }(Ke[0], null, Ke);
  }, Opal.modules["asciidoctor/logging"] = function(u) {
    var se = u.module, re = u.klass, W = u.slice, $e = u.send2, S = u.find_super, Z = u.to_a, Be = u.send, V = u.def, ke = u.truthy, O = u.rb_gt, Ke = u.const_set, xe = u.hash2, He = u.eqeqeq, De = u.gvars, Fe = u.alias, ot = u.defs, Ge = u.top, tt = [], Ye = u.nil, We = u.$$$;
    return u.add_stubs("require,attr_reader,progname=,formatter=,new,level=,>,[],===,inspect,to_h,map,constants,const_get,<<,clear,empty?,max,attr_accessor,memoize_logger,private,logger,extend,private_class_method,merge"), Ge.$require("logger"), function(st, L) {
      var je = se(st, "Asciidoctor"), k = [je].concat(L);
      return function(Ze, nt, ee) {
        var U = re(Ze, nt, "Logger"), ze = [U].concat(ee), Se = u.$r(ze), Ie = U.$$prototype;
        return Ie.max_severity = Ye, U.$attr_reader("max_severity"), V(U, "$initialize", function Ae(de) {
          var Ee, te, G, B = Ae.$$p || Ye, le = this;
          return Ae.$$p = null, Ee = W(arguments), te = Ee, $e(le, S(le, "initialize", Ae, !1, !0), "initialize", Z(te), B), le["$progname="]("asciidoctor"), le["$formatter="](Se("BasicFormatter").$new()), G = [Se("WARN")], Be(le, "level=", G), G[G.length - 1];
        }, -1), V(U, "$add", function Ae(de, Ee, te) {
          var G = Ae.$$p || Ye, B = this, le = Ye;
          return Ae.$$p = null, Ee == null && (Ee = Ye), te == null && (te = Ye), ke(O(de = ke(le = de) ? le : Se("UNKNOWN"), B.max_severity = ke(le = B.max_severity) ? le : de)) && (B.max_severity = de), $e(B, S(B, "add", Ae, !1, !0), "add", [de, Ee, te], G);
        }, -2), function(Ae, de, Ee) {
          var te = re(Ae, de, "BasicFormatter"), G = [te].concat(Ee), B = u.$r(G);
          return Ke(G[0], "SEVERITY_LABEL_SUBSTITUTES", xe(["WARN", "FATAL"], { WARN: "WARNING", FATAL: "FAILED" })), V(te, "$call", function(oe, he, j, v) {
            var p = Ye;
            return "" + j + ": " + (ke(p = B("SEVERITY_LABEL_SUBSTITUTES")["$[]"](oe)) ? p : oe) + ": " + (He(We("String"), v) ? v : v.$inspect()) + B("LF");
          });
        }(ze[0], Se("Formatter"), ze), function(Ae) {
          var de = se(Ae, "AutoFormattingMessage");
          return V(de, "$inspect", function() {
            var te = this, G = Ye;
            return ke(G = te["$[]"]("source_location")) ? "" + G + ": " + te["$[]"]("text") : te["$[]"]("text");
          });
        }(ze[0]);
      }(k[0], We("Logger"), k), function(Ze, nt, ee) {
        var U = re(Ze, nt, "MemoryLogger"), ze = [U].concat(ee), Se = u.$r(ze), Ie = U.$$prototype;
        return Ie.messages = Ye, Ke(ze[0], "SEVERITY_SYMBOL_BY_VALUE", Be(Se("Severity").$constants(!1), "map", [], function(de) {
          return de == null && (de = Ye), [Se("Severity").$const_get(de), de];
        }).$to_h()), U.$attr_reader("messages"), V(U, "$initialize", function() {
          var de = this;
          return de["$level="](Se("WARN")), de.messages = [];
        }), V(U, "$add", function Ae(de, Ee, te) {
          var G = Ae.$$p || Ye, B = this, le = Ye;
          return Ae.$$p = null, Ee == null && (Ee = Ye), te == null && (te = Ye), Ee = ke(le = Ee) ? le : G !== Ye ? u.yieldX(G, []) : te, B.messages["$<<"](xe(["severity", "message"], { severity: Se("SEVERITY_SYMBOL_BY_VALUE")["$[]"](ke(le = de) ? le : Se("UNKNOWN")), message: Ee })), !0;
        }, -2), V(U, "$clear", function() {
          var de = this;
          return de.messages.$clear();
        }), V(U, "$empty?", function() {
          var de = this;
          return de.messages["$empty?"]();
        }), V(U, "$max_severity", function() {
          var de = this;
          return ke(de["$empty?"]()) ? Ye : Be(de.messages, "map", [], function(te) {
            return te == null && (te = Ye), Se("Severity").$const_get(te["$[]"]("severity"));
          }).$max();
        });
      }(k[0], We("Logger"), k), function(Ze, nt, ee) {
        var U = re(Ze, nt, "NullLogger"), ze = [U].concat(ee), Se = u.$r(ze), Ie = U.$$prototype;
        return Ie.max_severity = Ye, U.$attr_reader("max_severity"), V(U, "$initialize", function() {
          var de, Ee = this;
          return de = [Se("WARN")], Be(Ee, "level=", de), de[de.length - 1];
        }), V(U, "$add", function(de, Ee, te) {
          var G = this, B = Ye;
          return ke(O(de = ke(B = de) ? B : Se("UNKNOWN"), G.max_severity = ke(B = G.max_severity) ? B : de)) && (G.max_severity = de), !0;
        }, -2);
      }(k[0], We("Logger"), k), function(Ze, nt) {
        var ee = se(Ze, "LoggerManager"), U = [ee].concat(nt), ze = u.$r(U);
        return ee.logger_class = ze("Logger"), function(Se, Ie) {
          return Se.$attr_accessor("logger_class"), V(Se, "$logger", function(de) {
            var Ee = this, te = Ye;
            return Ee.logger == null && (Ee.logger = Ye), Ee.logger_class == null && (Ee.logger_class = Ye), De.stderr == null && (De.stderr = Ye), de == null && (de = De.stderr), Ee.$memoize_logger(), Ee.logger = ke(te = Ee.logger) ? te : Ee.logger_class.$new(de);
          }, -1), V(Se, "$logger=", function(de) {
            var Ee = this, te = Ye;
            return Ee.logger_class == null && (Ee.logger_class = Ye), De.stderr == null && (De.stderr = Ye), Ee.logger = ke(te = de) ? te : Ee.logger_class.$new(De.stderr);
          }), Se.$private(), V(Se, "$memoize_logger", function() {
            var de = this;
            return function(Ee, te) {
              return Fe(Ee, "logger", "logger"), Ee.$attr_reader("logger");
            }(u.get_singleton_class(de));
          });
        }(u.get_singleton_class(ee));
      }(k[0], k), function(Ze, nt) {
        var ee = se(Ze, "Logging"), U = [ee].concat(nt), ze = u.$r(U);
        return ot(ee, "$included", function(Ie) {
          return Ie.$extend(ze("Logging"));
        }), ee.$private_class_method("included"), V(ee, "$logger", function() {
          return ze("LoggerManager").$logger();
        }), V(ee, "$message_with_context", function(Ie, Ae) {
          return Ae == null && (Ae = xe([], {})), xe(["text"], { text: Ie }).$merge(Ae).$extend(We(ze("Logger"), "AutoFormattingMessage"));
        }, -2);
      }(k[0], k);
    }(tt[0], tt);
  }, Opal.modules["asciidoctor/rx"] = function(u) {
    var se = u.module, re = u.const_set, W = u.regexp, $e = u.hash2, S = u.send, Z = u.truthy, Be = u.hash, V = [], ke = u.nil, O = u.$$$;
    return u.add_stubs("join,to_a,new,[]=,empty?,escape"), function(Ke, xe) {
      var He = se(Ke, "Asciidoctor"), De = [He].concat(xe), Fe = u.$r(De);
      return se(De[0], "Rx"), re(De[0], "AuthorInfoLineRx", W(["^(", Fe("CG_WORD"), "[", Fe("CC_WORD"), "\\-'.]*)(?: +(", Fe("CG_WORD"), "[", Fe("CC_WORD"), "\\-'.]*))?(?: +(", Fe("CG_WORD"), "[", Fe("CC_WORD"), "\\-'.]*))?(?: +<([^>]+)>)?$"])), re(De[0], "AuthorDelimiterRx", /;(?: |$)/), re(De[0], "RevisionInfoLineRx", W(["^(?:[^\\d{]*(", Fe("CC_ANY"), "*?),)? *(?!:)(", Fe("CC_ANY"), "*?)(?: *(?!^),?: *(", Fe("CC_ANY"), "*))?$"])), re(De[0], "ManpageTitleVolnumRx", W(["^(", Fe("CC_ANY"), "+?) *\\( *(", Fe("CC_ANY"), "+?) *\\)$"])), re(De[0], "ManpageNamePurposeRx", W(["^(", Fe("CC_ANY"), "+?) +- +(", Fe("CC_ANY"), "+)$"])), re(De[0], "ConditionalDirectiveRx", W(["^(\\\\)?(ifdef|ifndef|ifeval|endif)::(\\S*?(?:([,+])\\S*?)?)\\[(", Fe("CC_ANY"), "+)?\\]$"])), re(De[0], "EvalExpressionRx", W(["^(", Fe("CC_ANY"), "+?) *([=!><]=|[><]) *(", Fe("CC_ANY"), "+)$"])), re(De[0], "IncludeDirectiveRx", W(["^(\\\\)?include::([^\\s\\[](?:[^\\[]*[^\\s\\[])?)\\[(", Fe("CC_ANY"), "+)?\\]$"])), re(De[0], "TagDirectiveRx", /\b(?:tag|(e)nd)::(\S+?)\[\](?=$|[ \r])/m), re(De[0], "AttributeEntryRx", W(["^:(!?", Fe("CG_WORD"), "[^:]*):(?:[ \\t]+(", Fe("CC_ANY"), "*))?$"])), re(De[0], "InvalidAttributeNameCharsRx", W(["[^", Fe("CC_WORD"), "-]"])), re(De[0], "AttributeEntryPassMacroRx", W(["^pass:([a-z]+(?:,[a-z-]+)*)?\\[(", Fe("CC_ALL"), "*)\\]$"])), re(De[0], "AttributeReferenceRx", W(["(\\\\)?\\{(", Fe("CG_WORD"), "[", Fe("CC_WORD"), "-]*|(set|counter2?):", Fe("CC_ANY"), "+?)(\\\\)?\\}"])), re(De[0], "BlockAnchorRx", W(["^\\[\\[(?:|([", Fe("CC_ALPHA"), "_:][", Fe("CC_WORD"), "\\-:.]*)(?:, *(", Fe("CC_ANY"), "+))?)\\]\\]$"])), re(De[0], "BlockAttributeListRx", W(["^\\[(|[", Fe("CC_WORD"), `.#%{,"']`, Fe("CC_ANY"), "*)\\]$"])), re(De[0], "BlockAttributeLineRx", W(["^\\[(?:|[", Fe("CC_WORD"), `.#%{,"']`, Fe("CC_ANY"), "*|\\[(?:|[", Fe("CC_ALPHA"), "_:][", Fe("CC_WORD"), "\\-:.]*(?:, *", Fe("CC_ANY"), "+)?)\\])\\]$"])), re(De[0], "BlockTitleRx", W(["^\\.(\\.?[^ \\t.]", Fe("CC_ANY"), "*)$"])), re(De[0], "AdmonitionParagraphRx", W(["^(", Fe("ADMONITION_STYLES").$to_a().$join("|"), "):[ \\t]+"])), re(De[0], "LiteralParagraphRx", W(["^([ \\t]+", Fe("CC_ANY"), "*)$"])), re(De[0], "AtxSectionTitleRx", W(["^(=={0,5})[ \\t]+(", Fe("CC_ANY"), "+?)(?:[ \\t]+\\1)?$"])), re(De[0], "ExtAtxSectionTitleRx", W(["^(=={0,5}|#\\#{0,5})[ \\t]+(", Fe("CC_ANY"), "+?)(?:[ \\t]+\\1)?$"])), re(De[0], "SetextSectionTitleRx", W(["^((?!\\.)", Fe("CC_ANY"), "*?", Fe("CG_ALNUM"), Fe("CC_ANY"), "*)$"])), re(De[0], "InlineSectionAnchorRx", W([" (\\\\)?\\[\\[([", Fe("CC_ALPHA"), "_:][", Fe("CC_WORD"), "\\-:.]*)(?:, *(", Fe("CC_ANY"), "+))?\\]\\]$"])), re(De[0], "InvalidSectionIdCharsRx", W(["<[^>]+>|&(?:[a-z][a-z]+\\d{0,2}|#\\d\\d\\d{0,4}|#x[\\da-f][\\da-f][\\da-f]{0,3});|[^ ", Fe("CC_WORD"), "\\-.]+?"])), re(De[0], "SectionLevelStyleRx", /^sect\d$/), re(De[0], "AnyListRx", W(["^(?:[ \\t]*(?:-|\\*\\**|\\.\\.*|\\u2022|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))[ \\t]|(?!//[^/])[ \\t]*[^ \\t]", Fe("CC_ANY"), "*?(?::::{0,2}|;;)(?:$|[ \\t])|<(?:\\d+|\\.)>[ \\t])"])), re(De[0], "UnorderedListRx", W(["^[ \\t]*(-|\\*\\**|\\u2022)[ \\t]+(", Fe("CC_ANY"), "*)$"])), re(De[0], "OrderedListRx", W(["^[ \\t]*(\\.\\.*|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))[ \\t]+(", Fe("CC_ANY"), "*)$"])), re(De[0], "OrderedListMarkerRxMap", $e(["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"], { arabic: /\d+\./, loweralpha: /[a-z]\./, lowerroman: /[ivx]+\)/, upperalpha: /[A-Z]\./, upperroman: /[IVX]+\)/ })), re(De[0], "DescriptionListRx", W(["^(?!//[^/])[ \\t]*([^ \\t]", Fe("CC_ANY"), "*?)(:::{0,2}|;;)(?:$|[ \\t]+(", Fe("CC_ANY"), "*)$)"])), re(De[0], "DescriptionListSiblingRx", $e(["::", ":::", "::::", ";;"], { "::": W(["^(?!//[^/])[ \\t]*([^ \\t]", Fe("CC_ANY"), "*?[^:]|[^ \\t:])(::)(?:$|[ \\t]+(", Fe("CC_ANY"), "*)$)"]), ":::": W(["^(?!//[^/])[ \\t]*([^ \\t]", Fe("CC_ANY"), "*?[^:]|[^ \\t:])(:::)(?:$|[ \\t]+(", Fe("CC_ANY"), "*)$)"]), "::::": W(["^(?!//[^/])[ \\t]*([^ \\t]", Fe("CC_ANY"), "*?[^:]|[^ \\t:])(::::)(?:$|[ \\t]+(", Fe("CC_ANY"), "*)$)"]), ";;": W(["^(?!//[^/])[ \\t]*([^ \\t]", Fe("CC_ANY"), "*?)(;;)(?:$|[ \\t]+(", Fe("CC_ANY"), "*)$)"]) })), re(De[0], "CalloutListRx", W(["^<(\\d+|\\.)>[ \\t]+(", Fe("CC_ANY"), "*)$"])), re(De[0], "CalloutExtractRx", /((?:\/\/|#|--|;;) ?)?(\\)?<!?(|--)(\d+|\.)\3>(?=(?: ?\\?<!?\3(?:\d+|\.)\3>)*$)/), re(De[0], "CalloutExtractRxt", "(\\\\)?<()(\\d+|\\.)>(?=(?: ?\\\\?<(?:\\d+|\\.)>)*$)"), re(De[0], "CalloutExtractRxMap", S(O("Hash"), "new", [], function(Ge, tt) {
        var Ye;
        return Ge == null && (Ge = ke), tt == null && (tt = ke), Ye = [tt, W(["(", Z(tt["$empty?"]()) ? "" : "" + O("Regexp").$escape(tt) + " ?", ")?", Fe("CalloutExtractRxt")])], S(Ge, "[]=", Ye), Ye[Ye.length - 1];
      })), re(De[0], "CalloutScanRx", W(["\\\\?<!?(|--)(\\d+|\\.)\\1>(?=(?: ?\\\\?<!?\\1(?:\\d+|\\.)\\1>)*", Fe("CC_EOL"), ")"])), re(De[0], "CalloutSourceRx", W(["((?://|#|--|;;) ?)?(\\\\)?&lt;!?(|--)(\\d+|\\.)\\3&gt;(?=(?: ?\\\\?&lt;!?\\3(?:\\d+|\\.)\\3&gt;)*", Fe("CC_EOL"), ")"])), re(De[0], "CalloutSourceRxt", "(\\\\)?&lt;()(\\d+|\\.)&gt;(?=(?: ?\\\\?&lt;(?:\\d+|\\.)&gt;)*" + Fe("CC_EOL") + ")"), re(De[0], "CalloutSourceRxMap", S(O("Hash"), "new", [], function(Ge, tt) {
        var Ye;
        return Ge == null && (Ge = ke), tt == null && (tt = ke), Ye = [tt, W(["(", Z(tt["$empty?"]()) ? "" : "" + O("Regexp").$escape(tt) + " ?", ")?", Fe("CalloutSourceRxt")])], S(Ge, "[]=", Ye), Ye[Ye.length - 1];
      })), re(De[0], "ListRxMap", $e(["ulist", "olist", "dlist", "colist"], { ulist: Fe("UnorderedListRx"), olist: Fe("OrderedListRx"), dlist: Fe("DescriptionListRx"), colist: Fe("CalloutListRx") })), re(De[0], "ColumnSpecRx", /^(?:(\d+)\*)?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?(\d+%?|~)?([a-z])?$/), re(De[0], "CellSpecStartRx", /^[ \t]*(?:(\d+(?:\.\d*)?|(?:\d*\.)?\d+)([*+]))?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?([a-z])?$/), re(De[0], "CellSpecEndRx", /[ \t]+(?:(\d+(?:\.\d*)?|(?:\d*\.)?\d+)([*+]))?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?([a-z])?$/), re(De[0], "CustomBlockMacroRx", W(["^(", Fe("CG_WORD"), "[", Fe("CC_WORD"), "-]*)::(|\\S|\\S", Fe("CC_ANY"), "*?\\S)\\[(", Fe("CC_ANY"), "+)?\\]$"])), re(De[0], "BlockMediaMacroRx", W(["^(image|video|audio)::(\\S|\\S", Fe("CC_ANY"), "*?\\S)\\[(", Fe("CC_ANY"), "+)?\\]$"])), re(De[0], "BlockTocMacroRx", W(["^toc::\\[(", Fe("CC_ANY"), "+)?\\]$"])), re(De[0], "InlineAnchorRx", W(["(\\\\)?(?:\\[\\[([", Fe("CC_ALPHA"), "_:][", Fe("CC_WORD"), "\\-:.]*)(?:, *(", Fe("CC_ANY"), "+?))?\\]\\]|anchor:([", Fe("CC_ALPHA"), "_:][", Fe("CC_WORD"), "\\-:.]*)\\[(?:\\]|(", Fe("CC_ANY"), "*?[^\\\\])\\]))"])), re(De[0], "InlineAnchorScanRx", W(["(?:^|[^\\\\\\[])\\[\\[([", Fe("CC_ALPHA"), "_:][", Fe("CC_WORD"), "\\-:.]*)(?:, *(", Fe("CC_ANY"), "+?))?\\]\\]|(?:^|[^\\\\])anchor:([", Fe("CC_ALPHA"), "_:][", Fe("CC_WORD"), "\\-:.]*)\\[(?:\\]|(", Fe("CC_ANY"), "*?[^\\\\])\\])"])), re(De[0], "LeadingInlineAnchorRx", W(["^\\[\\[([", Fe("CC_ALPHA"), "_:][", Fe("CC_WORD"), "\\-:.]*)(?:, *(", Fe("CC_ANY"), "+?))?\\]\\]"])), re(De[0], "InlineBiblioAnchorRx", W(["^\\[\\[\\[([", Fe("CC_ALPHA"), "_:][", Fe("CC_WORD"), "\\-:.]*)(?:, *(", Fe("CC_ANY"), "+?))?\\]\\]\\]"])), re(De[0], "InlineEmailRx", W(["([\\\\>:/])?", Fe("CG_WORD"), "(?:&amp;|[", Fe("CC_WORD"), "\\-.%+])*@", Fe("CG_ALNUM"), "[", Fe("CC_ALNUM"), "_\\-.]*\\.[a-zA-Z]{2,5}\\b"])), re(De[0], "InlineFootnoteMacroRx", W(["\\\\?footnote(?:(ref):|:([", Fe("CC_WORD"), "-]+)?)\\[(?:|(", Fe("CC_ALL"), "*?[^\\\\]))\\](?!</a>)"], "m")), re(De[0], "InlineImageMacroRx", W(["\\\\?i(?:mage|con):([^:\\s\\[](?:[^\\n\\[]*[^\\s\\[])?)\\[(|", Fe("CC_ALL"), "*?[^\\\\])\\]"], "m")), re(De[0], "InlineIndextermMacroRx", W(["\\\\?(?:(indexterm2?):\\[(", Fe("CC_ALL"), "*?[^\\\\])\\]|\\(\\((", Fe("CC_ALL"), "+?)\\)\\)(?!\\)))"], "m")), re(De[0], "InlineKbdBtnMacroRx", W(["(\\\\)?(kbd|btn):\\[(", Fe("CC_ALL"), "*?[^\\\\])\\]"], "m")), re(De[0], "InlineLinkRx", W(["(^|link:|", Fe("CG_BLANK"), `|&lt;|[>\\(\\)\\[\\];"'])(\\\\?(?:https?|file|ftp|irc)://)(?:([^\\s\\[\\]]+)\\[(|`, Fe("CC_ALL"), "*?[^\\\\])\\]|([^\\s\\[\\]<]*([^\\s,.?!\\[\\]<\\)])))"], "m")), re(De[0], "InlineLinkMacroRx", W(["\\\\?(?:link|(mailto)):(|[^:\\s\\[][^\\s\\[]*)\\[(|", Fe("CC_ALL"), "*?[^\\\\])\\]"], "m")), re(De[0], "MacroNameRx", W(["^", Fe("CG_WORD"), "[", Fe("CC_WORD"), "-]*$"])), re(De[0], "InlineStemMacroRx", W(["\\\\?(stem|(?:latex|ascii)math):([a-z]+(?:,[a-z-]+)*)?\\[(", Fe("CC_ALL"), "*?[^\\\\])\\]"], "m")), re(De[0], "InlineMenuMacroRx", W(["\\\\?menu:(", Fe("CG_WORD"), "|[", Fe("CC_WORD"), "&][^\\n\\[]*[^\\s\\[])\\[ *(?:|(", Fe("CC_ALL"), "*?[^\\\\]))\\]"], "m")), re(De[0], "InlineMenuRx", W(['\\\\?"([', Fe("CC_WORD"), '&][^"]*?[ \\n]+&gt;[ \\n]+[^"]*)"'])), re(De[0], "InlinePassRx", Be(!1, ["+", "-]", W(["((?:^|[^", Fe("CC_WORD"), ";:\\\\])(?=(\\[)|\\+)|\\\\(?=\\[)|(?=\\\\\\+))(?:\\2(x-|[^\\]]+ x-)\\]|(?:\\[([^\\]]+)\\])?(?=(\\\\)?\\+))(\\5?(\\+|`)(\\S|\\S", Fe("CC_ALL"), "*?\\S)\\7)(?!", Fe("CG_WORD"), ")"], "m")], !0, ["`", ke, W(["(^|[^`", Fe("CC_WORD"), "])(?:(\\Z)()|\\[([^\\]]+)\\](?=(\\\\))?)?(\\5?(`)([^`\\s]|[^`\\s]", Fe("CC_ALL"), "*?\\S)\\7)(?![`", Fe("CC_WORD"), "])"], "m")])), re(De[0], "InlinePassMacroRx", W(["(?:(?:(\\\\?)\\[([^\\]]+)\\])?(\\\\{0,2})(\\+\\+\\+?|\\$\\$)(", Fe("CC_ALL"), "*?)\\4|(\\\\?)pass:([a-z]+(?:,[a-z-]+)*)?\\[(|", Fe("CC_ALL"), "*?[^\\\\])\\])"], "m")), re(De[0], "InlineXrefMacroRx", W(["\\\\?(?:&lt;&lt;([", Fe("CC_WORD"), "#/.:{]", Fe("CC_ALL"), "*?)&gt;&gt;|xref:([", Fe("CC_WORD"), "#/.:{]", Fe("CC_ALL"), "*?)\\[(?:\\]|(", Fe("CC_ALL"), "*?[^\\\\])\\]))"], "m")), re(De[0], "HardLineBreakRx", W(["^(", Fe("CC_ANY"), "*) \\+$"], "m")), re(De[0], "MarkdownThematicBreakRx", /^ {0,3}([-*_])( *)\1\2\1$/), re(De[0], "ExtLayoutBreakRx", /^(?:'{3,}|<{3,}|([-*_])( *)\1\2\1)$/), re(De[0], "BlankLineRx", /\n{2,}/), re(De[0], "EscapedSpaceRx", /\\([ \t\n])/), re(De[0], "ReplaceableTextRx", /[&']|--|\.\.\.|\([CRT]M?\)/), re(De[0], "SpaceDelimiterRx", /([^\\])[ \t\n]+/), re(De[0], "SubModifierSniffRx", /[+-]/), re(De[0], "TrailingDigitsRx", /\d+$/), re(De[0], "UriSniffRx", W(["^", Fe("CG_ALPHA"), "[", Fe("CC_ALNUM"), ".+-]+:/{0,2}"])), re(De[0], "XmlSanitizeRx", /<[^>]+>/);
    }(V[0], V);
  }, Opal.modules["asciidoctor/substitutors"] = function(u) {
    var se = u.module, re = u.const_set, W = u.hash2, $e = u.hash, S = u.rb_plus, Z = u.regexp, Be = u.not, V = u.truthy, ke = u.send, O = u.def, Ke = u.alias, xe = u.gvars, He = u.eqeq, De = u.to_ary, Fe = u.neqeq, ot = u.to_a, Ge = u.eqeqeq, tt = u.rb_gt, Ye = u.slice, We = u.rb_minus, st = u.rb_lt, L = u.rb_times, je = [], k = u.nil, Ze = u.$$$;
    return u.add_stubs("freeze,+,keys,!,empty?,===,[],join,include?,extract_passthroughs,each,sub_specialchars,sub_quotes,sub_attributes,sub_replacements,sub_macros,highlight_source,sub_callouts,sub_post_replacements,warn,logger,restore_passthroughs,clear,split,apply_subs,gsub,match?,compat_mode,convert_quoted_text,attributes,==,shift,store_attribute,!=,attribute_undefined,counter,key?,downcase,attribute_missing,info,squeeze,delete,reject,start_with?,do_replacement,inline_macros?,extensions,inline_macros,regexp,instance,slice,length,names,config,merge,[]=,normalize_text,parse_attributes,process_method,expand_subs,text=,text,convert,class,strip,index,min,compact,>,end_with?,map,chop,new,pop,rstrip,register,tr,basename,parse,lstrip,split_simple_csv,-,partition,extract_attributes_from_text,sub,encode_uri_component,style,extname?,rindex,catalog,info?,fetch,outfilesuffix,natural_xrefs,resolve_id,find,footnotes,id,<,size,<<,attr?,attr,to_s,read_next_id,callouts,highlight?,syntax_highlighter,sub_source,extract_callouts,name,to_i,to_sym,resolve_lines_to_highlight,highlight,nil_or_empty?,restore_callouts,count,to_a,|,sort,*,parse_quoted_text_attributes,resolve_pass_subs,basebackend?,error,chr,drop,&,resolve_subs,resolve_block_subs,parse_into,private,shorthand_property_syntax,each_char"), function(nt, ee) {
      var U = se(nt, "Asciidoctor"), ze = [U].concat(ee);
      return function(Se, Ie) {
        var Ae = se(Se, "Substitutors"), de = [Ae].concat(Ie), Ee = u.$r(de);
        return re(de[0], "SpecialCharsRx", /[<&>]/), re(de[0], "SpecialCharsTr", W([">", "<", "&"], { ">": "&gt;", "<": "&lt;", "&": "&amp;" })), re(de[0], "QuotedTextSniffRx", $e(!1, /[*_`#^~]/, !0, /[*'_+#^~]/)), re(de[0], "BASIC_SUBS", ["specialcharacters"]).$freeze(), re(de[0], "HEADER_SUBS", ["specialcharacters", "attributes"]).$freeze(), re(de[0], "NO_SUBS", []).$freeze(), re(de[0], "NORMAL_SUBS", ["specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"]).$freeze(), re(de[0], "REFTEXT_SUBS", ["specialcharacters", "quotes", "replacements"]).$freeze(), re(de[0], "VERBATIM_SUBS", ["specialcharacters", "callouts"]).$freeze(), re(de[0], "SUB_GROUPS", W(["none", "normal", "verbatim", "specialchars"], { none: Ee("NO_SUBS"), normal: Ee("NORMAL_SUBS"), verbatim: Ee("VERBATIM_SUBS"), specialchars: Ee("BASIC_SUBS") })), re(de[0], "SUB_HINTS", W(["a", "m", "n", "p", "q", "r", "c", "v"], { a: "attributes", m: "macros", n: "normal", p: "post_replacements", q: "quotes", r: "replacements", c: "specialcharacters", v: "verbatim" })), re(de[0], "SUB_OPTIONS", W(["block", "inline"], { block: S(S(Ee("SUB_GROUPS").$keys(), Ee("NORMAL_SUBS")), ["callouts"]), inline: S(Ee("SUB_GROUPS").$keys(), Ee("NORMAL_SUBS")) })), re(de[0], "CAN", ""), re(de[0], "DEL", ""), re(de[0], "PASS_START", ""), re(de[0], "PASS_END", ""), re(de[0], "PassSlotRx", Z([Ee("PASS_START"), "(\\d+)", Ee("PASS_END")])), re(de[0], "HighlightedPassSlotRx", Z(["<span\\b[^>]*>", Ee("PASS_START"), "</span>[^\\d]*(\\d+)[^\\d]*<span\\b[^>]*>", Ee("PASS_END"), "</span>"])), re(de[0], "RS", "\\"), re(de[0], "R_SB", "]"), re(de[0], "ESC_R_SB", "\\]"), re(de[0], "PLUS", "+"), O(Ae, "$apply_subs", function(G, B) {
          var le = this, oe = k, he = k, j = k, v = k;
          return le.passthroughs == null && (le.passthroughs = k), le.passthroughs_locked == null && (le.passthroughs_locked = k), B == null && (B = Ee("NORMAL_SUBS")), V(G["$empty?"]()) || Be(B) ? G : (V(oe = Ze("Array")["$==="](G)) && (G = V(G["$[]"](1)) ? G.$join(Ee("LF")) : G["$[]"](0)), V(B["$include?"]("macros")) && (G = le.$extract_passthroughs(G), V(le.passthroughs["$empty?"]()) || (he = le.passthroughs, le.passthroughs_locked = V(j = le.passthroughs_locked) ? j : v = !0)), ke(B, "each", [], function p(E) {
            var M = p.$$s == null ? this : p.$$s;
            switch (E == null && (E = k), E) {
              case "specialcharacters":
                return G = M.$sub_specialchars(G);
              case "quotes":
                return G = M.$sub_quotes(G);
              case "attributes":
                return V(G["$include?"](Ee("ATTR_REF_HEAD"))) ? G = M.$sub_attributes(G) : k;
              case "replacements":
                return G = M.$sub_replacements(G);
              case "macros":
                return G = M.$sub_macros(G);
              case "highlight":
                return G = M.$highlight_source(G, B["$include?"]("callouts"));
              case "callouts":
                return V(B["$include?"]("highlight")) ? k : G = M.$sub_callouts(G);
              case "post_replacements":
                return G = M.$sub_post_replacements(G);
              default:
                return M.$logger().$warn("unknown substitution type " + E);
            }
          }, { $$s: le }), V(he) && (G = le.$restore_passthroughs(G), V(v) && (he.$clear(), le.passthroughs_locked = k)), V(oe) ? G.$split(Ee("LF"), -1) : G);
        }, -2), O(Ae, "$apply_normal_subs", function(G) {
          var B = this;
          return B.$apply_subs(G, Ee("NORMAL_SUBS"));
        }), O(Ae, "$apply_header_subs", function(G) {
          var B = this;
          return B.$apply_subs(G, Ee("HEADER_SUBS"));
        }), Ke(Ae, "apply_title_subs", "apply_subs"), O(Ae, "$apply_reftext_subs", function(G) {
          var B = this;
          return B.$apply_subs(G, Ee("REFTEXT_SUBS"));
        }), O(Ae, "$sub_specialchars", function(G) {
          return V(G["$include?"](">")) || V(G["$include?"]("&")) || V(G["$include?"]("<")) ? G.$gsub(Ee("SpecialCharsRx"), Ee("SpecialCharsTr")) : G;
        }), Ke(Ae, "sub_specialcharacters", "sub_specialchars"), O(Ae, "$sub_quotes", function(G) {
          var B = this, le = k;
          return B.document == null && (B.document = k), V(Ee("QuotedTextSniffRx")["$[]"](le = B.document.$compat_mode())["$match?"](G)) && ke(Ee("QUOTE_SUBS")["$[]"](le), "each", [], function oe(he, j, v) {
            var p = oe.$$s == null ? this : oe.$$s;
            return he == null && (he = k), j == null && (j = k), v == null && (v = k), G = ke(G, "gsub", [v], function E() {
              var M = E.$$s == null ? this : E.$$s;
              return xe["~"] == null && (xe["~"] = k), M.$convert_quoted_text(xe["~"], he, j);
            }, { $$s: p });
          }, { $$s: B }), G;
        }), O(Ae, "$sub_attributes", function(G, B) {
          var le = this, oe = k, he = k, j = k, v = k, p = k, E = k, M = k, x = k;
          return le.document == null && (le.document = k), B == null && (B = W([], {})), oe = le.document.$attributes(), he = j = v = p = E = M = k, G = ke(G, "gsub", [Ee("AttributeReferenceRx")], function T() {
            var q, K, me = T.$$s == null ? this : T.$$s, ue = k, ye = k, Pe = k, Ve = k, et = k, at = k;
            if (me.document == null && (me.document = k), He((q = xe["~"]) === k ? k : q["$[]"](1), Ee("RS")) || He((q = xe["~"]) === k ? k : q["$[]"](4), Ee("RS")))
              return "{" + ((q = xe["~"]) === k ? k : q["$[]"](2)) + "}";
            if (V((q = xe["~"]) === k ? k : q["$[]"](3)))
              switch ((ue = ((q = xe["~"]) === k ? k : q["$[]"](2)).$split(":", 3)).$shift()) {
                case "set":
                  return K = Ee("Parser").$store_attribute(ue["$[]"](0), V(ye = ue["$[]"](1)) ? ye : "", me.document), q = De(K), q[0] == null || q[0], Pe = q[1] == null ? k : q[1], V(Pe) || Fe(E = V(ye = E) ? ye : V(Ve = oe["$[]"]("attribute-undefined")) ? Ve : Ee("Compliance").$attribute_undefined(), "drop-line") ? he = p = Ee("DEL") : he = j = Ee("CAN");
                case "counter2":
                  return ke(me.document, "counter", ot(ue)), he = p = Ee("DEL");
                default:
                  return ke(me.document, "counter", ot(ue));
              }
            else {
              if (V(oe["$key?"](et = ((q = xe["~"]) === k ? k : q["$[]"](2)).$downcase())))
                return oe["$[]"](et);
              if (V(Pe = Ee("INTRINSIC_ATTRIBUTES")["$[]"](et)))
                return Pe;
              switch (M = V(ye = M) ? ye : V(Ve = V(at = B["$[]"]("attribute_missing")) ? at : oe["$[]"]("attribute-missing")) ? Ve : Ee("Compliance").$attribute_missing()) {
                case "drop":
                  return he = p = Ee("DEL");
                case "drop-line":
                  return He(v = V(ye = v) ? ye : V(Ve = B["$[]"]("drop_line_severity")) ? Ve : "info", "info") && ke(me.$logger(), "info", [], function() {
                    return "dropping line containing reference to missing attribute: " + et;
                  }), he = j = Ee("CAN");
                case "warn":
                  return me.$logger().$warn("skipping reference to missing attribute: " + et), (q = xe["~"]) === k ? k : q["$[]"](0);
                default:
                  return (q = xe["~"]) === k ? k : q["$[]"](0);
              }
            }
          }, { $$s: le }), V(he) ? V(p) ? (x = G.$squeeze(Ee("DEL")).$split(Ee("LF"), -1), V(j) ? ke(x, "reject", [], function(q) {
            var K = k, me = k, ue = k;
            return q == null && (q = k), V(K = V(me = V(ue = q["$=="](Ee("DEL"))) ? ue : q["$=="](Ee("CAN"))) ? me : q["$start_with?"](Ee("CAN"))) ? K : q["$include?"](Ee("CAN"));
          }).$join(Ee("LF")).$delete(Ee("DEL")) : ke(x, "reject", [], function(q) {
            return q == null && (q = k), q["$=="](Ee("DEL"));
          }).$join(Ee("LF")).$delete(Ee("DEL"))) : V(G["$include?"](Ee("LF"))) ? ke(G.$split(Ee("LF"), -1), "reject", [], function(q) {
            var K = k, me = k;
            return q == null && (q = k), V(K = V(me = q["$=="](Ee("CAN"))) ? me : q["$start_with?"](Ee("CAN"))) ? K : q["$include?"](Ee("CAN"));
          }).$join(Ee("LF")) : "" : G;
        }, -2), O(Ae, "$sub_replacements", function(G) {
          var B = this;
          return V(Ee("ReplaceableTextRx")["$match?"](G)) && ke(Ee("REPLACEMENTS"), "each", [], function le(oe, he, j) {
            var v = le.$$s == null ? this : le.$$s;
            return oe == null && (oe = k), he == null && (he = k), j == null && (j = k), G = ke(G, "gsub", [oe], function p() {
              var E = p.$$s == null ? this : p.$$s;
              return xe["~"] == null && (xe["~"] = k), E.$do_replacement(xe["~"], he, j);
            }, { $$s: v });
          }, { $$s: B }), G;
        }), O(Ae, "$sub_macros", function(G) {
          var B = this, le = k, oe = k, he = k, j = k, v = k, p = k, E = k, M = k;
          return B.document == null && (B.document = k), B.parent == null && (B.parent = k), B.context == null && (B.context = k), le = G["$include?"]("["), oe = G["$include?"](":"), he = V(j = le) ? oe : j, v = V(j = he) ? G["$include?"](":[") : j, p = (E = B.document).$attributes(), V(M = E.$extensions()) && V(M["$inline_macros?"]()) && ke(M.$inline_macros(), "each", [], function x(T) {
            var q = x.$$s == null ? this : x.$$s;
            return T == null && (T = k), G = ke(G, "gsub", [T.$instance().$regexp()], function K() {
              var me, ue, ye = K.$$s == null ? this : K.$$s, Pe = k, Ve = k, et = k, at = k, rt = k, ft = k, _t = k, ht = k, pt = k;
              return xe["~"] == null && (xe["~"] = k), V((Pe = (me = xe["~"]) === k ? k : me["$[]"](0))["$start_with?"](Ee("RS"))) ? ((me = xe["~"]) === k ? k : me["$[]"](0)).$slice(1, ((me = xe["~"]) === k ? k : me["$[]"](0)).$length()) : (V(xe["~"].$names()["$empty?"]()) ? (me = [(ue = xe["~"]) === k ? k : ue["$[]"](1), (ue = xe["~"]) === k ? k : ue["$[]"](2)], Ve = me[0], et = me[1]) : (me = [function() {
                try {
                  return xe["~"]["$[]"]("target");
                } catch (vt) {
                  if (u.rescue(vt, [Ee("StandardError")]))
                    try {
                      return k;
                    } finally {
                      u.pop_exception();
                    }
                  else
                    throw vt;
                }
              }(), function() {
                try {
                  return xe["~"]["$[]"]("content");
                } catch (vt) {
                  if (u.rescue(vt, [Ee("StandardError")]))
                    try {
                      return k;
                    } finally {
                      u.pop_exception();
                    }
                  else
                    throw vt;
                }
              }()], Ve = me[0], et = me[1]), at = V(rt = (ft = T.$config())["$[]"]("default_attrs")) ? rt.$merge() : W([], {}), V(et) && (V(et["$empty?"]()) ? He(ft["$[]"]("content_model"), "attributes") || at["$[]="]("text", et) : (et = ye.$normalize_text(et, !0, !0), He(ft["$[]"]("content_model"), "attributes") ? ye.$parse_attributes(et, V(j = V(_t = ft["$[]"]("positional_attrs")) ? _t : ft["$[]"]("pos_attrs")) ? j : [], W(["into"], { into: at })) : at["$[]="]("text", et)), Ve = V(j = Ve) ? j : He(ft["$[]"]("format"), "short") ? et : Ve), Ge(Ee("Inline"), ht = T.$process_method()["$[]"](ye, Ve, at)) ? (V(pt = ht.$attributes().$delete("subs")) && V(pt = ye.$expand_subs(pt, "custom inline macro")) && ht["$text="](ye.$apply_subs(ht.$text(), pt)), ht.$convert()) : V(ht) ? (ke(ye.$logger(), "info", [], function() {
                return "expected substitution value for custom inline macro to be of type Inline; got " + ht.$class() + ": " + Pe;
              }), ht) : "");
            }, { $$s: q });
          }, { $$s: B }), V(p["$key?"]("experimental")) && (V(v) && (V(G["$include?"]("kbd:")) || V(G["$include?"]("btn:"))) && (G = ke(G, "gsub", [Ee("InlineKbdBtnMacroRx")], function x() {
            var T, q = x.$$s == null ? this : x.$$s, K = k, me = k, ue = k;
            return V((T = xe["~"]) === k ? k : T["$[]"](1)) ? ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length()) : He((T = xe["~"]) === k ? k : T["$[]"](2), "kbd") ? (V((K = ((T = xe["~"]) === k ? k : T["$[]"](3)).$strip())["$include?"](Ee("R_SB"))) && (K = K.$gsub(Ee("ESC_R_SB"), Ee("R_SB"))), V(tt(K.$length(), 1)) && V(me = V(me = K.$index(",", 1)) ? [me, K.$index("+", 1)].$compact().$min() : K.$index("+", 1)) ? (ue = K.$slice(me, 1), V(K["$end_with?"](ue)) ? (K = ke(K.$chop().$split(ue, -1), "map", [], function(Pe) {
              return Pe == null && (Pe = k), Pe.$strip();
            }), K["$[]="](-1, S(K["$[]"](-1), ue))) : K = ke(K.$split(ue), "map", [], function(Pe) {
              return Pe == null && (Pe = k), Pe.$strip();
            })) : K = [K], Ee("Inline").$new(q, "kbd", k, W(["attributes"], { attributes: W(["keys"], { keys: K }) })).$convert()) : Ee("Inline").$new(q, "button", q.$normalize_text((T = xe["~"]) === k ? k : T["$[]"](3), !0, !0)).$convert();
          }, { $$s: B })), V(he) && V(G["$include?"]("menu:")) && (G = ke(G, "gsub", [Ee("InlineMenuMacroRx")], function x() {
            var T, q = x.$$s == null ? this : x.$$s, K = k, me = k, ue = k, ye = k, Pe = k;
            return V(((T = xe["~"]) === k ? k : T["$[]"](0))["$start_with?"](Ee("RS"))) ? ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length()) : (K = (T = xe["~"]) === k ? k : T["$[]"](1), V(me = (T = xe["~"]) === k ? k : T["$[]"](2)) ? (V(me["$include?"](Ee("R_SB"))) && (me = me.$gsub(Ee("ESC_R_SB"), Ee("R_SB"))), V(ue = V(me["$include?"]("&gt;")) ? "&gt;" : V(me["$include?"](",")) ? "," : k) ? (ye = ke(me.$split(ue), "map", [], function(et) {
              return et == null && (et = k), et.$strip();
            }), Pe = ye.$pop()) : (T = [[], me.$rstrip()], ye = T[0], Pe = T[1])) : (T = [[], k], ye = T[0], Pe = T[1]), Ee("Inline").$new(q, "menu", k, W(["attributes"], { attributes: W(["menu", "submenus", "menuitem"], { menu: K, submenus: ye, menuitem: Pe }) })).$convert());
          }, { $$s: B })), V(G["$include?"]('"')) && V(G["$include?"]("&gt;")) && (G = ke(G, "gsub", [Ee("InlineMenuRx")], function x() {
            var T, q, K, me = x.$$s == null ? this : x.$$s, ue = k, ye = k, Pe = k;
            return V(((T = xe["~"]) === k ? k : T["$[]"](0))["$start_with?"](Ee("RS"))) ? ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length()) : (q = ke(((K = xe["~"]) === k ? k : K["$[]"](1)).$split("&gt;"), "map", [], function(et) {
              return et == null && (et = k), et.$strip();
            }), T = De(q), ue = T[0] == null ? k : T[0], ye = Ye(T, 1), Pe = ye.$pop(), Ee("Inline").$new(me, "menu", k, W(["attributes"], { attributes: W(["menu", "submenus", "menuitem"], { menu: ue, submenus: ye, menuitem: Pe }) })).$convert());
          }, { $$s: B }))), V(he) && (V(G["$include?"]("image:")) || V(G["$include?"]("icon:"))) && (G = ke(G, "gsub", [Ee("InlineImageMacroRx")], function x() {
            var T, q = x.$$s == null ? this : x.$$s, K = k, me = k, ue = k, ye = k;
            return V(((T = xe["~"]) === k ? k : T["$[]"](0))["$start_with?"](Ee("RS"))) ? ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length()) : (V(((T = xe["~"]) === k ? k : T["$[]"](0))["$start_with?"]("icon:")) ? (T = ["icon", ["size"]], K = T[0], me = T[1]) : (T = ["image", ["alt", "width", "height"]], K = T[0], me = T[1]), ue = (T = xe["~"]) === k ? k : T["$[]"](1), ye = q.$parse_attributes((T = xe["~"]) === k ? k : T["$[]"](2), me, W(["unescape_input"], { unescape_input: !0 })), He(K, "icon") || (E.$register("images", ue), ye["$[]="]("imagesdir", p["$[]"]("imagesdir"))), V(j = ye["$[]"]("alt")) || ye["$[]="]("alt", (T = ["default-alt", Ee("Helpers").$basename(ue, !0).$tr("_-", " ")], ke(ye, "[]=", T), T[T.length - 1])), Ee("Inline").$new(q, "image", k, W(["type", "target", "attributes"], { type: K, target: ue, attributes: ye })).$convert());
          }, { $$s: B })), (V(G["$include?"]("((")) && V(G["$include?"]("))")) || V(v) && V(G["$include?"]("dexterm"))) && (G = ke(G, "gsub", [Ee("InlineIndextermMacroRx")], function x() {
            var T, q, K = x.$$s == null ? this : x.$$s, me = k, ue = k, ye = k, Pe = k, Ve = k, et = k, at = k, rt = k, ft = k, _t = k, ht = k, pt = k, vt = k, Et = k;
            switch ((T = xe["~"]) === k ? k : T["$[]"](1)) {
              case "indexterm":
                return V(((T = xe["~"]) === k ? k : T["$[]"](0))["$start_with?"](Ee("RS"))) ? ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length()) : (V((me = K.$normalize_text((T = xe["~"]) === k ? k : T["$[]"](2), !0, !0))["$include?"]("=")) ? V(ue = (ye = Ee("AttributeList").$new(me, K).$parse())["$[]"](1)) ? (ye["$[]="]("terms", [ue]), V(Pe = ye["$[]"]("see-also")) && ye["$[]="]("see-also", V(Pe["$include?"](",")) ? ke(Pe.$split(","), "map", [], function(Nt) {
                  return Nt == null && (Nt = k), Nt.$lstrip();
                }) : [Pe])) : ye = W(["terms"], { terms: me }) : ye = W(["terms"], { terms: K.$split_simple_csv(me) }), Ee("Inline").$new(K, "indexterm", k, W(["attributes"], { attributes: ye })).$convert());
              case "indexterm2":
                return V(((T = xe["~"]) === k ? k : T["$[]"](0))["$start_with?"](Ee("RS"))) ? ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length()) : (V((Ve = K.$normalize_text((T = xe["~"]) === k ? k : T["$[]"](2), !0, !0))["$include?"]("=")) && (Ve = V(et = V(at = (ye = Ee("AttributeList").$new(Ve, K).$parse())["$[]"](1)) ? at : ye = k) ? et : Ve, V(ye) && V(Pe = ye["$[]"]("see-also")) && ye["$[]="]("see-also", V(Pe["$include?"](",")) ? ke(Pe.$split(","), "map", [], function(Nt) {
                  return Nt == null && (Nt = k), Nt.$lstrip();
                }) : [Pe])), Ee("Inline").$new(K, "indexterm", Ve, W(["attributes", "type"], { attributes: ye, type: "visible" })).$convert());
              default:
                if (rt = (T = xe["~"]) === k ? k : T["$[]"](3), V(((T = xe["~"]) === k ? k : T["$[]"](0))["$start_with?"](Ee("RS"))))
                  if (V(rt["$start_with?"]("(")) && V(rt["$end_with?"](")")))
                    rt = rt.$slice(1, We(rt.$length(), 2)), T = [!0, "(", ")"], ft = T[0], _t = T[1], ht = T[2];
                  else
                    return ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length());
                else
                  ft = !0, V(rt["$start_with?"]("(")) ? V(rt["$end_with?"](")")) ? (T = [rt.$slice(1, We(rt.$length(), 2)), !1], rt = T[0], ft = T[1]) : (T = [rt.$slice(1, rt.$length()), "(", ""], rt = T[0], _t = T[1], ht = T[2]) : V(rt["$end_with?"](")")) && (T = [rt.$chop(), "", ")"], rt = T[0], _t = T[1], ht = T[2]);
                return V(ft) ? (V((Ve = K.$normalize_text(rt, !0))["$include?"](";&")) && (V(Ve["$include?"](" &gt;&gt; ")) ? (q = Ve.$partition(" &gt;&gt; "), T = De(q), Ve = T[0] == null ? k : T[0], T[1] == null || T[1], pt = T[2] == null ? k : T[2], ye = W(["see"], { see: pt })) : V(Ve["$include?"](" &amp;&gt; ")) && (q = Ve.$split(" &amp;&gt; "), T = De(q), Ve = T[0] == null ? k : T[0], Pe = Ye(T, 1), ye = W(["see-also"], { "see-also": Pe }))), vt = Ee("Inline").$new(K, "indexterm", Ve, W(["attributes", "type"], { attributes: ye, type: "visible" })).$convert()) : (ye = W([], {}), V((Et = K.$normalize_text(rt, !0))["$include?"](";&")) && (V(Et["$include?"](" &gt;&gt; ")) ? (q = Et.$partition(" &gt;&gt; "), T = De(q), Et = T[0] == null ? k : T[0], T[1] == null || T[1], pt = T[2] == null ? k : T[2], ye["$[]="]("see", pt)) : V(Et["$include?"](" &amp;&gt; ")) && (q = Et.$split(" &amp;&gt; "), T = De(q), Et = T[0] == null ? k : T[0], Pe = Ye(T, 1), ye["$[]="]("see-also", Pe))), ye["$[]="]("terms", K.$split_simple_csv(Et)), vt = Ee("Inline").$new(K, "indexterm", k, W(["attributes"], { attributes: ye })).$convert()), V(_t) ? "" + _t + vt + ht : vt;
            }
          }, { $$s: B })), V(oe) && V(G["$include?"]("://")) && (G = ke(G, "gsub", [Ee("InlineLinkRx")], function x() {
            var T, q, K = x.$$s == null ? this : x.$$s, me = k, ue = k, ye = k, Pe = k, Ve = k, et = k, at = k, rt = k, ft = k;
            if (V((me = S((T = xe["~"]) === k ? k : T["$[]"](2), V(j = (T = xe["~"]) === k ? k : T["$[]"](3)) ? j : (T = xe["~"]) === k ? k : T["$[]"](5)))["$start_with?"](Ee("RS"))))
              return S(((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(0, ue = ((T = xe["~"]) === k ? k : T["$[]"](1)).$length()), ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(S(ue, 1), ((T = xe["~"]) === k ? k : T["$[]"](0)).$length()));
            if (T = [(q = xe["~"]) === k ? k : q["$[]"](1), ""], ye = T[0], Pe = T[1], V((T = xe["~"]) === k ? k : T["$[]"](4)))
              He(ye, "link:") && (ye = ""), V((Ve = (T = xe["~"]) === k ? k : T["$[]"](4))["$empty?"]()) && (Ve = k);
            else {
              switch (ye) {
                case "link:":
                case '"':
                case "'":
                  return (T = xe["~"]) === k ? k : T["$[]"](0);
              }
              switch ((T = xe["~"]) === k ? k : T["$[]"](6)) {
                case ";":
                  if (V(ye["$start_with?"]("&lt;")) && V(me["$end_with?"]("&gt;")) ? (ye = ye.$slice(4, ye.$length()), me = me.$slice(0, We(me.$length(), 4))) : V((me = me.$chop())["$end_with?"](")")) ? (me = me.$chop(), Pe = ");") : Pe = ";", V(me["$end_with?"]("://")))
                    return (T = xe["~"]) === k ? k : T["$[]"](0);
                  break;
                case ":":
                  if (V((me = me.$chop())["$end_with?"](")")) ? (me = me.$chop(), Pe = "):") : Pe = ":", V(me["$end_with?"]("://")))
                    return (T = xe["~"]) === k ? k : T["$[]"](0);
                  break;
              }
            }
            return T = [k, W(["type"], { type: "link" })], et = T[0], at = T[1], V(Ve) ? (V(Ve["$include?"](Ee("R_SB"))) && (rt = Ve = Ve.$gsub(Ee("ESC_R_SB"), Ee("R_SB"))), Be(E.$compat_mode()) && V(Ve["$include?"]("=")) && (q = K.$extract_attributes_from_text(Ve, ""), T = De(q), Ve = T[0] == null ? k : T[0], et = T[1] == null ? k : T[1], rt = Ve, at["$[]="]("id", et["$[]"]("id"))), V(Ve["$end_with?"]("^")) && (rt = Ve = Ve.$chop(), V(et) ? V(j = et["$[]"]("window")) || et["$[]="]("window", "_blank") : et = W(["window"], { window: "_blank" })), V(rt) && V(rt["$empty?"]()) && (Ve = V(p["$key?"]("hide-uri-scheme")) ? me.$sub(Ee("UriSniffRx"), "") : me, ft = !0)) : (Ve = V(p["$key?"]("hide-uri-scheme")) ? me.$sub(Ee("UriSniffRx"), "") : me, ft = !0), V(ft) && (V(et) ? et["$[]="]("role", V(et["$key?"]("role")) ? "bare " + et["$[]"]("role") : "bare") : et = W(["role"], { role: "bare" })), E.$register("links", (T = ["target", me], ke(at, "[]=", T), T[T.length - 1])), V(et) && at["$[]="]("attributes", et), "" + ye + Ee("Inline").$new(K, "anchor", Ve, at).$convert() + Pe;
          }, { $$s: B })), V(he) && (V(G["$include?"]("link:")) || V(G["$include?"]("ilto:"))) && (G = ke(G, "gsub", [Ee("InlineLinkMacroRx")], function x() {
            var T, q, K = x.$$s == null ? this : x.$$s, me = k, ue = k, ye = k, Pe = k, Ve = k, et = k;
            return V(((T = xe["~"]) === k ? k : T["$[]"](0))["$start_with?"](Ee("RS"))) ? ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length()) : (V(me = (T = xe["~"]) === k ? k : T["$[]"](1)) ? ue = S("mailto:", ye = (T = xe["~"]) === k ? k : T["$[]"](2)) : ue = (T = xe["~"]) === k ? k : T["$[]"](2), T = [k, W(["type"], { type: "link" })], Pe = T[0], Ve = T[1], V((et = (T = xe["~"]) === k ? k : T["$[]"](3))["$empty?"]()) || (V(et["$include?"](Ee("R_SB"))) && (et = et.$gsub(Ee("ESC_R_SB"), Ee("R_SB"))), V(me) ? Be(E.$compat_mode()) && V(et["$include?"](",")) && (q = K.$extract_attributes_from_text(et, ""), T = De(q), et = T[0] == null ? k : T[0], Pe = T[1] == null ? k : T[1], Ve["$[]="]("id", Pe["$[]"]("id")), V(Pe["$key?"](2)) && (V(Pe["$key?"](3)) ? ue = "" + ue + "?subject=" + Ee("Helpers").$encode_uri_component(Pe["$[]"](2)) + "&amp;body=" + Ee("Helpers").$encode_uri_component(Pe["$[]"](3)) : ue = "" + ue + "?subject=" + Ee("Helpers").$encode_uri_component(Pe["$[]"](2)))) : Be(E.$compat_mode()) && V(et["$include?"]("=")) && (q = K.$extract_attributes_from_text(et, ""), T = De(q), et = T[0] == null ? k : T[0], Pe = T[1] == null ? k : T[1], Ve["$[]="]("id", Pe["$[]"]("id"))), V(et["$end_with?"]("^")) && (et = et.$chop(), V(Pe) ? V(j = Pe["$[]"]("window")) || Pe["$[]="]("window", "_blank") : Pe = W(["window"], { window: "_blank" }))), V(et["$empty?"]()) && (V(me) ? et = ye : (V(p["$key?"]("hide-uri-scheme")) ? V((et = ue.$sub(Ee("UriSniffRx"), ""))["$empty?"]()) && (et = ue) : et = ue, V(Pe) ? Pe["$[]="]("role", V(Pe["$key?"]("role")) ? "bare " + Pe["$[]"]("role") : "bare") : Pe = W(["role"], { role: "bare" }))), E.$register("links", (T = ["target", ue], ke(Ve, "[]=", T), T[T.length - 1])), V(Pe) && Ve["$[]="]("attributes", Pe), Ee("Inline").$new(K, "anchor", et, Ve).$convert());
          }, { $$s: B })), V(G["$include?"]("@")) && (G = ke(G, "gsub", [Ee("InlineEmailRx")], function x() {
            var T, q = x.$$s == null ? this : x.$$s, K = k, me = k;
            return V((T = xe["~"]) === k ? k : T["$[]"](1)) ? He((T = xe["~"]) === k ? k : T["$[]"](1), Ee("RS")) ? ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length()) : (T = xe["~"]) === k ? k : T["$[]"](0) : (K = S("mailto:", me = (T = xe["~"]) === k ? k : T["$[]"](0)), E.$register("links", K), Ee("Inline").$new(q, "anchor", me, W(["type", "target"], { type: "link", target: K })).$convert());
          }, { $$s: B })), V(le) && He(B.context, "list_item") && He(B.parent.$style(), "bibliography") && (G = ke(G, "sub", [Ee("InlineBiblioAnchorRx")], function x() {
            var T, q = x.$$s == null ? this : x.$$s;
            return Ee("Inline").$new(q, "anchor", (T = xe["~"]) === k ? k : T["$[]"](2), W(["type", "id"], { type: "bibref", id: (T = xe["~"]) === k ? k : T["$[]"](1) })).$convert();
          }, { $$s: B })), (V(le) && V(G["$include?"]("[[")) || V(he) && V(G["$include?"]("or:"))) && (G = ke(G, "gsub", [Ee("InlineAnchorRx")], function x() {
            var T, q = x.$$s == null ? this : x.$$s, K = k, me = k;
            return V((T = xe["~"]) === k ? k : T["$[]"](1)) ? ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length()) : (V(K = (T = xe["~"]) === k ? k : T["$[]"](2)) ? me = (T = xe["~"]) === k ? k : T["$[]"](3) : (K = (T = xe["~"]) === k ? k : T["$[]"](4), V(me = (T = xe["~"]) === k ? k : T["$[]"](5)) && V(me["$include?"](Ee("R_SB"))) && (me = me.$gsub(Ee("ESC_R_SB"), Ee("R_SB")))), Ee("Inline").$new(q, "anchor", me, W(["type", "id"], { type: "ref", id: K })).$convert());
          }, { $$s: B })), (V(G["$include?"]("&")) && V(G["$include?"](";&l")) || V(he) && V(G["$include?"]("xref:"))) && (G = ke(G, "gsub", [Ee("InlineXrefMacroRx")], function x() {
            var T, q, K = x.$$s == null ? this : x.$$s, me = k, ue = k, ye = k, Pe = k, Ve = k, et = k, at = k, rt = k, ft = k, _t = k;
            return V(((T = xe["~"]) === k ? k : T["$[]"](0))["$start_with?"](Ee("RS"))) ? ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length()) : (me = W([], {}), V(ue = (T = xe["~"]) === k ? k : T["$[]"](1)) ? V(ue["$include?"](",")) && (q = ue.$partition(","), T = De(q), ue = T[0] == null ? k : T[0], T[1] == null || T[1], ye = T[2] == null ? k : T[2], V((ye = ye.$lstrip())["$empty?"]()) && (ye = k)) : (Pe = !0, ue = (T = xe["~"]) === k ? k : T["$[]"](2), V(ye = (T = xe["~"]) === k ? k : T["$[]"](3)) && (V(ye["$include?"](Ee("R_SB"))) && (ye = ye.$gsub(Ee("ESC_R_SB"), Ee("R_SB"))), Be(E.$compat_mode()) && V(ye["$include?"]("=")) && (q = K.$extract_attributes_from_text(ye), T = De(q), ye = T[0] == null ? k : T[0], me = T[1] == null ? k : T[1]))), V(E.$compat_mode()) ? Ve = ue : V(et = ue.$index("#")) && Fe(ue["$[]"](We(et, 1)), "&") ? V(tt(et, 0)) ? (V(tt(at = We(We(ue.$length(), 1), et), 0)) ? (T = [ue.$slice(0, et), ue.$slice(S(et, 1), at)], rt = T[0], Ve = T[1]) : rt = ue.$chop(), V(Pe) ? V(rt["$end_with?"](".adoc")) ? ft = rt = rt.$slice(0, We(rt.$length(), 5)) : Be(Ee("Helpers")["$extname?"](rt)) && (ft = rt) : V(ke(rt, "end_with?", ot(Ee("ASCIIDOC_EXTENSIONS").$keys()))) ? ft = rt = rt.$slice(0, rt.$rindex(".")) : ft = rt) : (T = [ue, ue.$slice(1, ue.$length())], _t = T[0], Ve = T[1]) : V(Pe) ? V(ue["$end_with?"](".adoc")) ? ft = rt = ue.$slice(0, We(ue.$length(), 5)) : V(Ee("Helpers")["$extname?"](ue)) ? rt = ue : Ve = ue : Ve = ue, V(_t) ? (ue = Ve, V(K.$logger()["$info?"]()) && Be(E.$catalog()["$[]"]("refs")["$[]"](ue)) && K.$logger().$info("possible invalid reference: " + ue)) : V(rt) ? V(ft) && (He(E.$attributes()["$[]"]("docname"), rt) || V(E.$catalog()["$[]"]("includes")["$[]"](rt))) ? V(Ve) ? (T = [Ve, k, "#" + Ve], ue = T[0], rt = T[1], _t = T[2], V(K.$logger()["$info?"]()) && Be(E.$catalog()["$[]"]("refs")["$[]"](ue)) && K.$logger().$info("possible invalid reference: " + ue)) : (T = [k, k, "#"], ue = T[0], rt = T[1], _t = T[2]) : (T = [rt, "" + (V(j = E.$attributes()["$[]"]("relfileprefix")) ? j : "") + rt + (V(ft) ? E.$attributes().$fetch("relfilesuffix", E.$outfilesuffix()) : "")], ue = T[0], rt = T[1], V(Ve) ? (T = ["" + ue + "#" + Ve, "" + rt + "#" + Ve], ue = T[0], _t = T[1]) : _t = rt) : V(E.$compat_mode()) || Be(Ee("Compliance").$natural_xrefs()) ? (T = [Ve, "#" + Ve], ue = T[0], _t = T[1], V(K.$logger()["$info?"]()) && Be(E.$catalog()["$[]"]("refs")["$[]"](ue)) && K.$logger().$info("possible invalid reference: " + ue)) : V(E.$catalog()["$[]"]("refs")["$[]"](Ve)) ? (T = [Ve, "#" + Ve], ue = T[0], _t = T[1]) : (V(Ve["$include?"](" ")) || Fe(Ve.$downcase(), Ve)) && V(ue = E.$resolve_id(Ve)) ? (T = [ue, "#" + ue], Ve = T[0], _t = T[1]) : (T = [Ve, "#" + Ve], ue = T[0], _t = T[1], V(K.$logger()["$info?"]()) && K.$logger().$info("possible invalid reference: " + ue)), me["$[]="]("path", rt), me["$[]="]("fragment", Ve), me["$[]="]("refid", ue), Ee("Inline").$new(K, "anchor", ye, W(["type", "target", "attributes"], { type: "xref", target: _t, attributes: me })).$convert());
          }, { $$s: B })), V(he) && V(G["$include?"]("tnote")) && (G = ke(G, "gsub", [Ee("InlineFootnoteMacroRx")], function x() {
            var T, q, K, me = x.$$s == null ? this : x.$$s, ue = k, ye = k, Pe = k, Ve = k, et = k, at = k;
            if (V(((T = xe["~"]) === k ? k : T["$[]"](0))["$start_with?"](Ee("RS"))))
              return ((T = xe["~"]) === k ? k : T["$[]"](0)).$slice(1, ((T = xe["~"]) === k ? k : T["$[]"](0)).$length());
            if (V((T = xe["~"]) === k ? k : T["$[]"](1)))
              if (V((T = xe["~"]) === k ? k : T["$[]"](3)))
                q = ((K = xe["~"]) === k ? k : K["$[]"](3)).$split(",", 2), T = De(q), ue = T[0] == null ? k : T[0], ye = T[1] == null ? k : T[1], V(E.$compat_mode()) || me.$logger().$warn("found deprecated footnoteref macro: " + ((T = xe["~"]) === k ? k : T["$[]"](0)) + "; use footnote macro with target instead");
              else
                return (T = xe["~"]) === k ? k : T["$[]"](0);
            else
              ue = (T = xe["~"]) === k ? k : T["$[]"](2), ye = (T = xe["~"]) === k ? k : T["$[]"](3);
            if (V(ue))
              V(Pe = ke(E.$footnotes(), "find", [], function(ft) {
                return ft == null && (ft = k), ft.$id()["$=="](ue);
              })) ? (T = [Pe.$index(), Pe.$text()], Ve = T[0], ye = T[1], T = ["xref", ue, k], et = T[0], at = T[1], ue = T[2]) : V(ye) ? (ye = me.$restore_passthroughs(me.$normalize_text(ye, !0, !0)), Ve = E.$counter("footnote-number"), E.$register("footnotes", Ze(Ee("Document"), "Footnote").$new(Ve, ue, ye)), T = ["ref", k], et = T[0], at = T[1]) : (me.$logger().$warn("invalid footnote reference: " + ue), T = ["xref", ue, ue, k], et = T[0], at = T[1], ye = T[2], ue = T[3]);
            else if (V(ye))
              ye = me.$restore_passthroughs(me.$normalize_text(ye, !0, !0)), Ve = E.$counter("footnote-number"), E.$register("footnotes", Ze(Ee("Document"), "Footnote").$new(Ve, ue, ye)), et = at = k;
            else
              return (T = xe["~"]) === k ? k : T["$[]"](0);
            return Ee("Inline").$new(me, "footnote", ye, W(["attributes", "id", "target", "type"], { attributes: W(["index"], { index: Ve }), id: ue, target: at, type: et })).$convert();
          }, { $$s: B })), G;
        }), O(Ae, "$sub_post_replacements", function(G) {
          var B = this, le = k, oe = k;
          return B.document == null && (B.document = k), B.attributes == null && (B.attributes = k), V(B.attributes["$[]"]("hardbreaks-option")) || V(B.document.$attributes()["$[]"]("hardbreaks-option")) ? (le = G.$split(Ee("LF"), -1), V(st(le.$size(), 2)) ? G : (oe = le.$pop(), ke(le, "map", [], function he(j) {
            var v = he.$$s == null ? this : he.$$s;
            return j == null && (j = k), Ee("Inline").$new(v, "break", V(j["$end_with?"](Ee("HARD_LINE_BREAK"))) ? j.$slice(0, We(j.$length(), 2)) : j, W(["type"], { type: "line" })).$convert();
          }, { $$s: B })["$<<"](oe).$join(Ee("LF")))) : V(G["$include?"](Ee("PLUS"))) && V(G["$include?"](Ee("HARD_LINE_BREAK"))) ? ke(G, "gsub", [Ee("HardLineBreakRx")], function he() {
            var j, v = he.$$s == null ? this : he.$$s;
            return Ee("Inline").$new(v, "break", (j = xe["~"]) === k ? k : j["$[]"](1), W(["type"], { type: "line" })).$convert();
          }, { $$s: B }) : G;
        }), O(Ae, "$sub_source", function(G, B) {
          var le = this;
          return V(B) ? le.$sub_callouts(le.$sub_specialchars(G)) : le.$sub_specialchars(G);
        }), O(Ae, "$sub_callouts", function(G) {
          var B = this, le = k, oe = k;
          return le = V(B["$attr?"]("line-comment")) ? Ee("CalloutSourceRxMap")["$[]"](B.$attr("line-comment")) : Ee("CalloutSourceRx"), oe = 0, ke(G, "gsub", [le], function he() {
            var j, v = he.$$s == null ? this : he.$$s, p = k;
            return v.document == null && (v.document = k), V((j = xe["~"]) === k ? k : j["$[]"](2)) ? ((j = xe["~"]) === k ? k : j["$[]"](0)).$sub(Ee("RS"), "") : Ee("Inline").$new(v, "callout", He((j = xe["~"]) === k ? k : j["$[]"](4), ".") ? (oe = S(oe, 1)).$to_s() : (j = xe["~"]) === k ? k : j["$[]"](4), W(["id", "attributes"], { id: v.document.$callouts().$read_next_id(), attributes: W(["guard"], { guard: V(p = (j = xe["~"]) === k ? k : j["$[]"](1)) ? p : He((j = xe["~"]) === k ? k : j["$[]"](3), "--") ? ["<!--", "-->"] : k }) })).$convert();
          }, { $$s: B });
        }), O(Ae, "$highlight_source", function(G, B) {
          var le, oe, he = this, j = k, v = k, p = k, E = k, M = k, x = k, T = k, q = k, K = k, me = k;
          return he.document == null && (he.document = k), he.passthroughs == null && (he.passthroughs = k), V(j = he.document.$syntax_highlighter()) && V(j["$highlight?"]()) ? (V(B) && (oe = he.$extract_callouts(G), le = De(oe), G = le[0] == null ? k : le[0], v = le[1] == null ? k : le[1]), p = he.document.$attributes(), E = j.$name(), V(x = V(he["$attr?"]("linenums")) ? (V(T = p["$[]"]("" + E + "-linenums-mode")) ? T : "table").$to_sym() : k) && V(st(M = he.$attr("start", 1).$to_i(), 1)) && (M = 1), V(he["$attr?"]("highlight")) && (q = he.$resolve_lines_to_highlight(G, he.$attr("highlight"), M)), oe = j.$highlight(he, G, he.$attr("language"), W(["callouts", "css_mode", "highlight_lines", "number_lines", "start_line_number", "style"], { callouts: v, css_mode: (V(T = p["$[]"]("" + E + "-css")) ? T : "class").$to_sym(), highlight_lines: q, number_lines: x, start_line_number: M, style: p["$[]"]("" + E + "-style") })), le = De(oe), K = le[0] == null ? k : le[0], me = le[1] == null ? k : le[1], V(he.passthroughs["$empty?"]()) || (K = K.$gsub(Ee("HighlightedPassSlotRx"), "" + Ee("PASS_START") + "\\1" + Ee("PASS_END"))), V(v["$nil_or_empty?"]()) ? K : he.$restore_callouts(K, v, me)) : he.$sub_source(G, B);
        }), O(Ae, "$resolve_lines_to_highlight", function(G, B, le) {
          var oe = k, he = k;
          return le == null && (le = k), oe = [], V(B["$include?"](" ")) && (B = B.$delete(" ")), ke(V(B["$include?"](",")) ? B.$split(",") : B.$split(";"), "map", [], function(v) {
            var p, E, M = k, x = k, T = k, q = k, K = k;
            return v == null && (v = k), V(v["$start_with?"]("!")) && (v = v.$slice(1, v.$length()), M = !0), V(x = V(v["$include?"]("..")) ? ".." : V(v["$include?"]("-")) ? "-" : k) ? (E = v.$partition(x), p = De(E), T = p[0] == null ? k : p[0], p[1] == null || p[1], q = p[2] == null ? k : p[2], (V(q["$empty?"]()) || V(st(q = q.$to_i(), 0))) && (q = S(G.$count(Ee("LF")), 1)), V(M) ? oe = We(oe, u.Range.$new(T.$to_i(), q, !1).$to_a()) : oe = oe["$|"](u.Range.$new(T.$to_i(), q, !1).$to_a())) : V(M) ? oe.$delete(v.$to_i()) : Be(oe["$include?"](K = v.$to_i())) ? oe["$<<"](K) : k;
          }), He(he = V(le) ? We(le, 1) : 0, 0) || (oe = ke(oe, "map", [], function(v) {
            return v == null && (v = k), We(v, he);
          })), oe.$sort();
        }, -3), O(Ae, "$extract_passthroughs", function(G) {
          var B, le, oe = this, he = k, j = k, v = k, p = k, E = k;
          return oe.document == null && (oe.document = k), oe.passthroughs == null && (oe.passthroughs = k), he = oe.document.$compat_mode(), j = oe.passthroughs, (V(G["$include?"]("++")) || V(G["$include?"]("$$")) || V(G["$include?"]("ss:"))) && (G = ke(G, "gsub", [Ee("InlinePassMacroRx")], function M() {
            var x, T = M.$$s == null ? this : M.$$s, q = k, K = k, me = k, ue = k, ye = k, Pe = k, Ve = k, et = k, at = k;
            if (V(q = (x = xe["~"]) === k ? k : x["$[]"](4))) {
              if (V(he) && He(q, "++"))
                return (V((x = xe["~"]) === k ? k : x["$[]"](2)) ? "" + ((x = xe["~"]) === k ? k : x["$[]"](1)) + "[" + ((x = xe["~"]) === k ? k : x["$[]"](2)) + "]" + ((x = xe["~"]) === k ? k : x["$[]"](3)) : "" + ((x = xe["~"]) === k ? k : x["$[]"](1)) + ((x = xe["~"]) === k ? k : x["$[]"](3))) + "++" + T.$extract_passthroughs((x = xe["~"]) === k ? k : x["$[]"](5)) + "++";
              if (V(K = (x = xe["~"]) === k ? k : x["$[]"](2))) {
                if (V(tt(me = ((x = xe["~"]) === k ? k : x["$[]"](3)).$length(), 0)))
                  return "" + ((x = xe["~"]) === k ? k : x["$[]"](1)) + "[" + K + "]" + L(Ee("RS"), We(me, 1)) + q + ((x = xe["~"]) === k ? k : x["$[]"](5)) + q;
                He((x = xe["~"]) === k ? k : x["$[]"](1), Ee("RS")) ? ue = "[" + K + "]" : He(q, "++") ? He(K, "x-") ? (ye = !0, Pe = W([], {})) : V(K["$end_with?"](" x-")) ? (ye = !0, Pe = T.$parse_quoted_text_attributes(K.$slice(0, We(K.$length(), 3)))) : Pe = T.$parse_quoted_text_attributes(K) : Pe = T.$parse_quoted_text_attributes(K);
              } else if (V(tt(me = ((x = xe["~"]) === k ? k : x["$[]"](3)).$length(), 0)))
                return "" + L(Ee("RS"), We(me, 1)) + q + ((x = xe["~"]) === k ? k : x["$[]"](5)) + q;
              Ve = He(q, "+++") ? [] : Ee("BASIC_SUBS"), V(Pe) ? V(ye) ? j["$[]="](et = j.$size(), W(["text", "subs", "type", "attributes"], { text: (x = xe["~"]) === k ? k : x["$[]"](5), subs: Ee("NORMAL_SUBS"), type: "monospaced", attributes: Pe })) : j["$[]="](et = j.$size(), W(["text", "subs", "type", "attributes"], { text: (x = xe["~"]) === k ? k : x["$[]"](5), subs: Ve, type: "unquoted", attributes: Pe })) : j["$[]="](et = j.$size(), W(["text", "subs"], { text: (x = xe["~"]) === k ? k : x["$[]"](5), subs: Ve }));
            } else {
              if (He((x = xe["~"]) === k ? k : x["$[]"](6), Ee("RS")))
                return ((x = xe["~"]) === k ? k : x["$[]"](0)).$slice(1, ((x = xe["~"]) === k ? k : x["$[]"](0)).$length());
              V(Ve = (x = xe["~"]) === k ? k : x["$[]"](7)) ? j["$[]="](et = j.$size(), W(["text", "subs"], { text: T.$normalize_text((x = xe["~"]) === k ? k : x["$[]"](8), k, !0), subs: T.$resolve_pass_subs(Ve) })) : j["$[]="](et = j.$size(), W(["text"], { text: T.$normalize_text((x = xe["~"]) === k ? k : x["$[]"](8), k, !0) }));
            }
            return "" + (V(at = ue) ? at : "") + Ee("PASS_START") + et + Ee("PASS_END");
          }, { $$s: oe })), le = Ee("InlinePassRx")["$[]"](he), B = De(le), v = B[0] == null ? k : B[0], p = B[1] == null ? k : B[1], E = B[2] == null ? k : B[2], (V(G["$include?"](v)) || V(p) && V(G["$include?"](p))) && (G = ke(G, "gsub", [E], function M() {
            var x, T = M.$$s == null ? this : M.$$s, q = k, K = k, me = k, ue = k, ye = k, Pe = k, Ve = k, et = k, at = k, rt = k, ft = k, _t = k;
            if (q = (x = xe["~"]) === k ? k : x["$[]"](1), K = V(me = (x = xe["~"]) === k ? k : x["$[]"](4)) ? me : (x = xe["~"]) === k ? k : x["$[]"](3), V((x = xe["~"]) === k ? k : x["$[]"](5)) && (ue = !0), ye = (x = xe["~"]) === k ? k : x["$[]"](6), Pe = (x = xe["~"]) === k ? k : x["$[]"](7), Ve = (x = xe["~"]) === k ? k : x["$[]"](8), V(he) ? et = !0 : V(K) && (He(K, "x-") || V(K["$end_with?"](" x-"))) && (et = at = !0), V(K)) {
              if (V(ue))
                return "" + q + "[" + K + "]" + ye.$slice(1, ye.$length());
              if (He(q, Ee("RS"))) {
                if (V(at) && He(Pe, "`"))
                  return "" + q + "[" + K + "]" + ye;
                q = "[" + K + "]";
              } else
                V(at) ? rt = He(K, "x-") ? W([], {}) : T.$parse_quoted_text_attributes(K.$slice(0, We(K.$length(), 3))) : rt = T.$parse_quoted_text_attributes(K);
            } else {
              if (V(ue))
                return "" + q + ye.$slice(1, ye.$length());
              if (V(he) && He(q, Ee("RS")))
                return ye;
            }
            return V(he) ? j["$[]="](ft = j.$size(), W(["text", "subs", "attributes", "type"], { text: Ve, subs: Ee("BASIC_SUBS"), attributes: rt, type: "monospaced" })) : V(rt) ? V(et) ? (_t = He(Pe, "`") ? Ee("BASIC_SUBS") : Ee("NORMAL_SUBS"), j["$[]="](ft = j.$size(), W(["text", "subs", "attributes", "type"], { text: Ve, subs: _t, attributes: rt, type: "monospaced" }))) : j["$[]="](ft = j.$size(), W(["text", "subs", "attributes", "type"], { text: Ve, subs: Ee("BASIC_SUBS"), attributes: rt, type: "unquoted" })) : j["$[]="](ft = j.$size(), W(["text", "subs"], { text: Ve, subs: Ee("BASIC_SUBS") })), "" + q + Ee("PASS_START") + ft + Ee("PASS_END");
          }, { $$s: oe })), V(G["$include?"](":")) && (V(G["$include?"]("stem:")) || V(G["$include?"]("math:"))) && (G = ke(G, "gsub", [Ee("InlineStemMacroRx")], function M() {
            var x, T = M.$$s == null ? this : M.$$s, q = k, K = k, me = k, ue = k;
            return T.document == null && (T.document = k), V(((x = xe["~"]) === k ? k : x["$[]"](0))["$start_with?"](Ee("RS"))) ? ((x = xe["~"]) === k ? k : x["$[]"](0)).$slice(1, ((x = xe["~"]) === k ? k : x["$[]"](0)).$length()) : (He(q = ((x = xe["~"]) === k ? k : x["$[]"](1)).$to_sym(), "stem") && (q = Ee("STEM_TYPE_ALIASES")["$[]"](T.document.$attributes()["$[]"]("stem")).$to_sym()), K = (x = xe["~"]) === k ? k : x["$[]"](2), me = T.$normalize_text((x = xe["~"]) === k ? k : x["$[]"](3), k, !0), He(q, "latexmath") && V(me["$start_with?"]("$")) && V(me["$end_with?"]("$")) && (me = me.$slice(1, We(me.$length(), 2))), K = V(K) ? T.$resolve_pass_subs(K) : V(T.document["$basebackend?"]("html")) ? Ee("BASIC_SUBS") : k, j["$[]="](ue = j.$size(), W(["text", "subs", "type"], { text: me, subs: K, type: q })), "" + Ee("PASS_START") + ue + Ee("PASS_END"));
          }, { $$s: oe })), G;
        }), O(Ae, "$restore_passthroughs", function(G) {
          var B = this, le = k;
          return B.passthroughs == null && (B.passthroughs = k), le = B.passthroughs, ke(G, "gsub", [Ee("PassSlotRx")], function oe() {
            var he, j = oe.$$s == null ? this : oe.$$s, v = k, p = k, E = k, M = k, x = k;
            return V(v = le["$[]"](((he = xe["~"]) === k ? k : he["$[]"](1)).$to_i())) ? (p = j.$apply_subs(v["$[]"]("text"), v["$[]"]("subs")), V(E = v["$[]"]("type")) && (V(M = v["$[]"]("attributes")) && (x = M["$[]"]("id")), p = Ee("Inline").$new(j, "quoted", p, W(["type", "id", "attributes"], { type: E, id: x, attributes: M })).$convert()), V(p["$include?"](Ee("PASS_START"))) ? j.$restore_passthroughs(p) : p) : (j.$logger().$error("unresolved passthrough detected: " + G), "??pass??");
          }, { $$s: B });
        }), O(Ae, "$resolve_subs", function(G, B, le, oe) {
          var he = this, j = k, v = k, p = k, E = k;
          return B == null && (B = "block"), le == null && (le = k), oe == null && (oe = k), V(G["$nil_or_empty?"]()) || (j = k, V(G["$include?"](" ")) && (G = G.$delete(" ")), v = Ee("SubModifierSniffRx")["$match?"](G), ke(G.$split(","), "each", [], function(x) {
            var T = k, q = k, K = k, me = k, ue = k, ye = k;
            if (x == null && (x = k), T = k, V(v) && (He(q = x.$chr(), "+") ? (T = "append", x = x.$slice(1, x.$length())) : He(q, "-") ? (T = "remove", x = x.$slice(1, x.$length())) : V(x["$end_with?"]("+")) && (T = "prepend", x = x.$chop())), x = x.$to_sym(), He(B, "inline") && (He(x, "verbatim") || He(x, "v")) ? K = Ee("BASIC_SUBS") : V(Ee("SUB_GROUPS")["$key?"](x)) ? K = Ee("SUB_GROUPS")["$[]"](x) : He(B, "inline") && He(x.$length(), 1) && V(Ee("SUB_HINTS")["$key?"](x)) ? (me = Ee("SUB_HINTS")["$[]"](x), V(ue = Ee("SUB_GROUPS")["$[]"](me)) ? K = ue : K = [me]) : K = [x], V(T))
              switch (j = V(ye = j) ? ye : V(le) ? le.$drop(0) : [], T) {
                case "append":
                  return j = S(j, K);
                case "prepend":
                  return j = S(K, j);
                case "remove":
                  return j = We(j, K);
                default:
                  return k;
              }
            else
              return j = V(ye = j) ? ye : [], j = S(j, K);
          }), !V(j)) ? k : (p = j["$&"](Ee("SUB_OPTIONS")["$[]"](B)), V(We(j, p)["$empty?"]()) || (E = We(j, p), he.$logger().$warn("invalid substitution type" + (V(tt(E.$size(), 1)) ? "s" : "") + (V(oe) ? " for " : "") + oe + ": " + E.$join(", "))), p);
        }, -2), O(Ae, "$resolve_block_subs", function(G, B, le) {
          var oe = this;
          return oe.$resolve_subs(G, "block", B, le);
        }), O(Ae, "$resolve_pass_subs", function(G) {
          var B = this;
          return B.$resolve_subs(G, "inline", k, "passthrough macro");
        }), O(Ae, "$expand_subs", function(G, B) {
          var le = this, oe = k, he = k, j = k;
          return B == null && (B = k), Ge(Ze("Symbol"), oe = G) ? He(G, "none") ? k : V(he = Ee("SUB_GROUPS")["$[]"](G)) ? he : [G] : Ge(Ze("Array"), oe) ? (j = [], ke(G, "each", [], function(p) {
            var E = k;
            return p == null && (p = k), He(p, "none") ? k : V(E = Ee("SUB_GROUPS")["$[]"](p)) ? j = S(j, E) : j["$<<"](p);
          }), V(j["$empty?"]()) ? k : j) : le.$resolve_subs(G, "inline", k, B);
        }, -2), O(Ae, "$commit_subs", function() {
          var G = this, B = k, le = k, oe = k, he = k, j = k;
          if (G.default_subs == null && (G.default_subs = k), G.content_model == null && (G.content_model = k), G.context == null && (G.context = k), G.subs == null && (G.subs = k), G.attributes == null && (G.attributes = k), G.document == null && (G.document = k), G.style == null && (G.style = k), !V(B = G.default_subs))
            switch (G.content_model) {
              case "simple":
                B = Ee("NORMAL_SUBS");
                break;
              case "verbatim":
                B = He(G.context, "verse") ? Ee("NORMAL_SUBS") : Ee("VERBATIM_SUBS");
                break;
              case "raw":
                B = He(G.context, "stem") ? Ee("BASIC_SUBS") : Ee("NO_SUBS");
                break;
              default:
                return G.subs;
            }
          return V(le = G.attributes["$[]"]("subs")) ? G.subs = V(oe = G.$resolve_block_subs(le, B, G.context)) ? oe : [] : G.subs = B.$drop(0), He(G.context, "listing") && He(G.style, "source") && V(j = G.document.$syntax_highlighter()) && V(j["$highlight?"]()) && V(he = G.subs.$index("specialcharacters")) && G.subs["$[]="](he, "highlight"), k;
        }), O(Ae, "$parse_attributes", function(G, B, le) {
          var oe = this, he = k, j = k;
          return oe.document == null && (oe.document = k), B == null && (B = []), le == null && (le = W([], {})), V(V(G) ? G["$empty?"]() : !0) ? W([], {}) : (V(le["$[]"]("unescape_input")) && (G = oe.$normalize_text(G, !0, !0)), V(le["$[]"]("sub_input")) && V(G["$include?"](Ee("ATTR_REF_HEAD"))) && (G = oe.document.$sub_attributes(G)), V(le["$[]"]("sub_result")) && (he = oe), V(j = le["$[]"]("into")) ? Ee("AttributeList").$new(G, he).$parse_into(j, B) : Ee("AttributeList").$new(G, he).$parse(B));
        }, -2), Ae.$private(), O(Ae, "$extract_attributes_from_text", function(G, B) {
          var le = this, oe = k, he = k, j = k;
          return B == null && (B = k), oe = V(G["$include?"](Ee("LF"))) ? G.$tr(Ee("LF"), " ") : G, V(he = (j = Ee("AttributeList").$new(oe, le).$parse())["$[]"](1)) ? He(he, oe) ? [G, j.$clear()] : [he, j] : [B, j];
        }, -2), O(Ae, "$extract_callouts", function(G) {
          var B = this, le = k, oe = k, he = k, j = k, v = k;
          return le = W([], {}), oe = he = 0, j = k, v = V(B["$attr?"]("line-comment")) ? Ee("CalloutExtractRxMap")["$[]"](B.$attr("line-comment")) : Ee("CalloutExtractRx"), G = ke(G.$split(Ee("LF"), -1), "map", [], function(E) {
            return E == null && (E = k), he = S(he, 1), ke(E, "gsub", [v], function() {
              var x, T = k;
              return V((x = xe["~"]) === k ? k : x["$[]"](2)) ? ((x = xe["~"]) === k ? k : x["$[]"](0)).$sub(Ee("RS"), "") : ((V(T = le["$[]"](he)) ? T : (x = [he, []], ke(le, "[]=", x), x[x.length - 1]))["$<<"]([V(T = (x = xe["~"]) === k ? k : x["$[]"](1)) ? T : He((x = xe["~"]) === k ? k : x["$[]"](3), "--") ? ["<!--", "-->"] : k, He((x = xe["~"]) === k ? k : x["$[]"](4), ".") ? (oe = S(oe, 1)).$to_s() : (x = xe["~"]) === k ? k : x["$[]"](4)]), j = he, "");
            });
          }).$join(Ee("LF")), V(j) ? He(j, he) && (G = "" + G + Ee("LF")) : le = k, [G, le];
        }), O(Ae, "$restore_callouts", function(G, B, le) {
          var oe = this, he = k, j = k;
          return le == null && (le = k), V(le) ? (he = G.$slice(0, le), G = G.$slice(le, G.$length())) : he = "", j = 0, S(he, ke(G.$split(Ee("LF"), -1), "map", [], function v(p) {
            var E, M, x = v.$$s == null ? this : v.$$s, T = k, q = k, K = k;
            return x.document == null && (x.document = k), p == null && (p = k), V(T = B.$delete(j = S(j, 1))) ? He(T.$size(), 1) ? (M = T["$[]"](0), E = De(M), q = E[0] == null ? k : E[0], K = E[1] == null ? k : E[1], "" + p + Ee("Inline").$new(x, "callout", K, W(["id", "attributes"], { id: x.document.$callouts().$read_next_id(), attributes: W(["guard"], { guard: q }) })).$convert()) : "" + p + ke(T, "map", [], function me(ue, ye) {
              var Pe = me.$$s == null ? this : me.$$s;
              return Pe.document == null && (Pe.document = k), ue == null && (ue = k), ye == null && (ye = k), Ee("Inline").$new(Pe, "callout", ye, W(["id", "attributes"], { id: Pe.document.$callouts().$read_next_id(), attributes: W(["guard"], { guard: ue }) })).$convert();
            }, { $$s: x }).$join(" ") : p;
          }, { $$s: oe }).$join(Ee("LF")));
        }, -3), O(Ae, "$convert_quoted_text", function(G, B, le) {
          var oe = this, he = k, j = k, v = k, p = k, E = k;
          if (V(G["$[]"](0)["$start_with?"](Ee("RS"))))
            if (He(le, "constrained") && V(he = G["$[]"](2)))
              j = "[" + he + "]";
            else
              return G["$[]"](0).$slice(1, G["$[]"](0).$length());
          return He(le, "constrained") ? V(j) ? "" + j + Ee("Inline").$new(oe, "quoted", G["$[]"](3), W(["type"], { type: B })).$convert() : (V(v = G["$[]"](2)) && (p = (E = oe.$parse_quoted_text_attributes(v))["$[]"]("id"), He(B, "mark") && (B = "unquoted")), "" + G["$[]"](1) + Ee("Inline").$new(oe, "quoted", G["$[]"](3), W(["type", "id", "attributes"], { type: B, id: p, attributes: E })).$convert()) : (V(v = G["$[]"](1)) && (p = (E = oe.$parse_quoted_text_attributes(v))["$[]"]("id"), He(B, "mark") && (B = "unquoted")), Ee("Inline").$new(oe, "quoted", G["$[]"](2), W(["type", "id", "attributes"], { type: B, id: p, attributes: E })).$convert());
        }), O(Ae, "$do_replacement", function(G, B, le) {
          var oe = k;
          if (V((oe = G["$[]"](0))["$include?"](Ee("RS"))))
            return oe.$sub(Ee("RS"), "");
          switch (le) {
            case "none":
              return B;
            case "bounding":
              return S(S(G["$[]"](1), B), G["$[]"](2));
            default:
              return S(G["$[]"](1), B);
          }
        }), O(Ae, "$parse_quoted_text_attributes", function(G) {
          var B, le, oe = this, he = k, j = k, v = k, p = k, E = k;
          return V(G["$include?"](Ee("ATTR_REF_HEAD"))) && (G = oe.$sub_attributes(G)), V(G["$include?"](",")) && (G = G.$slice(0, G.$index(","))), V((G = G.$strip())["$empty?"]()) ? W([], {}) : V(G["$start_with?"](".", "#")) && V(Ee("Compliance").$shorthand_property_syntax()) ? (le = G.$partition("#"), B = De(le), he = B[0] == null ? k : B[0], B[1] == null || B[1], j = B[2] == null ? k : B[2], v = W([], {}), V(j["$empty?"]()) ? V(tt(he.$length(), 1)) && v["$[]="]("role", he.$tr(".", " ").$lstrip()) : (le = j.$partition("."), B = De(le), p = B[0] == null ? k : B[0], B[1] == null || B[1], E = B[2] == null ? k : B[2], V(p["$empty?"]()) || v["$[]="]("id", p), V(E["$empty?"]()) ? V(tt(he.$length(), 1)) && v["$[]="]("role", he.$tr(".", " ").$lstrip()) : V(tt(he.$length(), 1)) ? v["$[]="]("role", S(S(he, "."), E).$tr(".", " ").$lstrip()) : v["$[]="]("role", E.$tr(".", " "))), v) : W(["role"], { role: G });
        }), O(Ae, "$normalize_text", function(G, B, le) {
          return B == null && (B = k), le == null && (le = k), V(G["$empty?"]()) || (V(B) && (G = G.$strip().$tr(Ee("LF"), " ")), V(le) && V(G["$include?"](Ee("R_SB"))) && (G = G.$gsub(Ee("ESC_R_SB"), Ee("R_SB")))), G;
        }, -2), O(Ae, "$split_simple_csv", function(G) {
          var B = k, le = k, oe = k;
          return V(G["$empty?"]()) ? [] : V(G["$include?"]('"')) ? (B = [], le = "", oe = k, ke(G, "each_char", [], function(j) {
            switch (j == null && (j = k), j) {
              case ",":
                return V(oe) ? le = S(le, j) : (B["$<<"](le.$strip()), le = "");
              case '"':
                return oe = oe["$!"]();
              default:
                return le = S(le, j);
            }
          }), B["$<<"](le.$strip())) : ke(G.$split(","), "map", [], function(j) {
            return j == null && (j = k), j.$strip();
          });
        });
      }(ze[0], ze);
    }(je[0], je);
  }, Opal.modules["asciidoctor/version"] = function(u) {
    var se = u.module, re = u.const_set, W = [];
    return u.nil, function($e, S) {
      var Z = se($e, "Asciidoctor"), Be = [Z].concat(S);
      return re(Be[0], "VERSION", "2.0.20");
    }(W[0], W);
  }, Opal.modules["asciidoctor/abstract_node"] = function(u) {
    var se = u.module, re = u.klass, W = u.hash2, $e = u.eqeq, S = u.truthy, Z = u.def, Be = u.send, V = u.rb_minus, ke = u.eqeqeq, O = u.rb_lt, Ke = u.not, xe = u.to_ary, He = [], De = u.nil, Fe = u.$$$;
    return u.add_stubs("include,attr_reader,attr_accessor,==,document,to_s,[],merge,raise,converter,attributes,key?,[]=,delete,tap,new,each_key,end_with?,<<,slice,-,length,update,split,include?,===,join,empty?,apply_reftext_subs,attr?,attr,extname?,image_uri,<,safe,normalize_web_path,uriish?,encode_spaces_in_uri,generate_data_uri_from_uri,generate_data_uri,extname,normalize_system_path,readable?,strict_encode64,binread,warn,logger,require_library,!,open_uri,content_type,read,base_dir,root?,path_resolver,system_path,web_path,!=,prepare_source_string,fetch,read_asset"), function(ot, Ge) {
      var tt = se(ot, "Asciidoctor"), Ye = [tt].concat(Ge);
      return function(We, st, L) {
        var je = re(We, st, "AbstractNode"), k = [je].concat(L), Ze = u.$r(k), nt = je.$$prototype;
        return nt.document = nt.attributes = nt.parent = De, je.$include(Ze("Logging")), je.$include(Ze("Substitutors")), je.$attr_reader("attributes"), je.$attr_reader("context"), je.$attr_reader("document"), je.$attr_accessor("id"), je.$attr_reader("node_name"), je.$attr_reader("parent"), Z(je, "$initialize", function(U, ze, Se) {
          var Ie = this, Ae = De;
          return Se == null && (Se = W([], {})), $e(ze, "document") ? Ie.document = Ie : S(U) && (Ie.document = (Ie.parent = U).$document()), Ie.node_name = (Ie.context = ze).$to_s(), Ie.attributes = S(Ae = Se["$[]"]("attributes")) ? Ae.$merge() : W([], {}), Ie.passthroughs = [];
        }, -3), Z(je, "$block?", function() {
          var U = this;
          return U.$raise(Fe("NotImplementedError"));
        }), Z(je, "$inline?", function() {
          var U = this;
          return U.$raise(Fe("NotImplementedError"));
        }), Z(je, "$converter", function() {
          var U = this;
          return U.document.$converter();
        }), Z(je, "$parent=", function(U) {
          var ze, Se = this;
          return ze = [U, U.$document()], Se.parent = ze[0], Se.document = ze[1], ze;
        }), Z(je, "$attr", function(U, ze, Se) {
          var Ie = this, Ae = De, de = De, Ee = De, te = De;
          return ze == null && (ze = De), Se == null && (Se = De), S(Ae = Ie.attributes["$[]"](U.$to_s())) ? Ae : S(de = S(Ee = S(te = Se) ? Ie.parent : te) ? Ie.document.$attributes()["$[]"](($e(Se, !0) ? U : Se).$to_s()) : Ee) ? de : ze;
        }, -2), Z(je, "$attr?", function(U, ze, Se) {
          var Ie = this, Ae = De;
          return ze == null && (ze = De), Se == null && (Se = De), S(ze) ? ze["$=="](S(Ae = Ie.attributes["$[]"](U.$to_s())) ? Ae : S(Se) && S(Ie.parent) ? Ie.document.$attributes()["$[]"](($e(Se, !0) ? U : Se).$to_s()) : De) : S(Ae = Ie.attributes["$key?"](U.$to_s())) ? Ae : S(Se) && S(Ie.parent) ? Ie.document.$attributes()["$key?"](($e(Se, !0) ? U : Se).$to_s()) : !1;
        }, -2), Z(je, "$set_attr", function(U, ze, Se) {
          var Ie = this;
          return ze == null && (ze = ""), Se == null && (Se = !0), $e(Se, !1) && S(Ie.attributes["$key?"](U)) ? !1 : (Ie.attributes["$[]="](U, ze), !0);
        }, -2), Z(je, "$remove_attr", function(U) {
          var ze = this;
          return ze.attributes.$delete(U);
        }), Z(je, "$option?", function(U) {
          var ze = this;
          return !!S(ze.attributes["$[]"]("" + U + "-option"));
        }), Z(je, "$set_option", function(U) {
          var ze = this;
          return ze.attributes["$[]="]("" + U + "-option", ""), De;
        }), Z(je, "$enabled_options", function() {
          var U = this;
          return Be(Fe("Set").$new(), "tap", [], function ze(Se) {
            var Ie = ze.$$s == null ? this : ze.$$s;
            return Ie.attributes == null && (Ie.attributes = De), Se == null && (Se = De), Be(Ie.attributes, "each_key", [], function(de) {
              return de == null && (de = De), S(de.$to_s()["$end_with?"]("-option")) ? Se["$<<"](de.$slice(0, V(de.$length(), 7))) : De;
            });
          }, { $$s: U });
        }), Z(je, "$update_attributes", function(U) {
          var ze = this;
          return ze.attributes.$update(U);
        }), Z(je, "$role", function() {
          var U = this;
          return U.attributes["$[]"]("role");
        }), Z(je, "$roles", function() {
          var U = this, ze = De;
          return S(ze = U.attributes["$[]"]("role")) ? ze.$split() : [];
        }), Z(je, "$role?", function(U) {
          var ze = this;
          return U == null && (U = De), S(U) ? U["$=="](ze.attributes["$[]"]("role")) : ze.attributes["$key?"]("role");
        }, -1), Z(je, "$has_role?", function(U) {
          var ze = this, Se = De;
          return S(Se = ze.attributes["$[]"]("role")) ? (" " + Se + " ")["$include?"](" " + U + " ") : !1;
        }), Z(je, "$role=", function(U) {
          var ze, Se = this;
          return ze = ["role", ke(Fe("Array"), U) ? U.$join(" ") : U], Be(Se.attributes, "[]=", ze), ze[ze.length - 1];
        }), Z(je, "$add_role", function(U) {
          var ze = this, Se = De;
          return S(Se = ze.attributes["$[]"]("role")) ? S((" " + Se + " ")["$include?"](" " + U + " ")) ? !1 : (ze.attributes["$[]="]("role", "" + Se + " " + U), !0) : (ze.attributes["$[]="]("role", U), !0);
        }), Z(je, "$remove_role", function(U) {
          var ze = this, Se = De;
          return S(Se = ze.attributes["$[]"]("role")) && S((Se = Se.$split()).$delete(U)) ? (S(Se["$empty?"]()) ? ze.attributes.$delete("role") : ze.attributes["$[]="]("role", Se.$join(" ")), !0) : !1;
        }), Z(je, "$reftext", function() {
          var U = this, ze = De;
          return S(ze = U.attributes["$[]"]("reftext")) ? U.$apply_reftext_subs(ze) : De;
        }), Z(je, "$reftext?", function() {
          var U = this;
          return U.attributes["$key?"]("reftext");
        }), Z(je, "$icon_uri", function(U) {
          var ze = this, Se = De;
          return S(ze["$attr?"]("icon")) ? (Se = ze.$attr("icon"), S(Ze("Helpers")["$extname?"](Se)) || (Se = "" + Se + "." + ze.document.$attr("icontype", "png"))) : Se = "" + U + "." + ze.document.$attr("icontype", "png"), ze.$image_uri(Se, "iconsdir");
        }), Z(je, "$image_uri", function(U, ze) {
          var Se = this, Ie = De, Ae = De;
          return ze == null && (ze = "imagesdir"), S(O((Ie = Se.document).$safe(), Fe(Ze("SafeMode"), "SECURE"))) && S(Ie["$attr?"]("data-uri")) ? S(Ze("Helpers")["$uriish?"](U)) && S(U = Ze("Helpers").$encode_spaces_in_uri(U)) || S(ze) && S(Ae = Ie.$attr(ze)) && S(Ze("Helpers")["$uriish?"](Ae)) && S(U = Se.$normalize_web_path(U, Ae, !1)) ? S(Ie["$attr?"]("allow-uri-read")) ? Se.$generate_data_uri_from_uri(U, Ie["$attr?"]("cache-uri")) : U : Se.$generate_data_uri(U, ze) : Se.$normalize_web_path(U, S(ze) ? Ie.$attr(ze) : De);
        }, -2), Z(je, "$media_uri", function(U, ze) {
          var Se = this;
          return ze == null && (ze = "imagesdir"), Se.$normalize_web_path(U, S(ze) ? Se.document.$attr(ze) : De);
        }, -2), Z(je, "$generate_data_uri", function(U, ze) {
          var Se = this, Ie = De, Ae = De, de = De;
          return ze == null && (ze = De), S(Ie = Ze("Helpers").$extname(U, De)) ? Ae = $e(Ie, ".svg") ? "image/svg+xml" : "image/" + Ie.$slice(1, Ie.$length()) : Ae = "application/octet-stream", S(ze) ? de = Se.$normalize_system_path(U, Se.document.$attr(ze), De, W(["target_name"], { target_name: "image" })) : de = Se.$normalize_system_path(U), S(Fe("File")["$readable?"](de)) ? "data:" + Ae + ";base64," + Fe("Base64").$strict_encode64(Fe("File").$binread(de)) : (Se.$logger().$warn("image to embed not found or not readable: " + de), "data:" + Ae + ";base64,");
        }, -2), Z(je, "$generate_data_uri_from_uri", function(U, ze) {
          var Se, Ie, Ae = this, de = De, Ee = De;
          ze == null && (ze = !1), S(ze) ? Ze("Helpers").$require_library("open-uri/cached", "open-uri-cached") : Ke(Ze("RUBY_ENGINE_OPAL")) && Fe("OpenURI");
          try {
            return Ie = Be(Fe("OpenURI"), "open_uri", [U, Ze("URI_READ_MODE")], function(G) {
              return G == null && (G = De), [G.$content_type(), G.$read()];
            }), Se = xe(Ie), de = Se[0] == null ? De : Se[0], Ee = Se[1] == null ? De : Se[1], "data:" + de + ";base64," + Fe("Base64").$strict_encode64(Ee);
          } catch (te) {
            if (u.rescue(te, [Ze("StandardError")]))
              try {
                return Ae.$logger().$warn("could not retrieve image data from URI: " + U), U;
              } finally {
                u.pop_exception();
              }
            else
              throw te;
          }
        }, -2), Z(je, "$normalize_asset_path", function(U, ze, Se) {
          var Ie = this;
          return ze == null && (ze = "path"), Se == null && (Se = !0), Ie.$normalize_system_path(U, Ie.document.$base_dir(), De, W(["target_name", "recover"], { target_name: ze, recover: Se }));
        }, -2), Z(je, "$normalize_system_path", function(U, ze, Se, Ie) {
          var Ae = this, de = De, Ee = De;
          return ze == null && (ze = De), Se == null && (Se = De), Ie == null && (Ie = W([], {})), S(O((de = Ae.document).$safe(), Fe(Ze("SafeMode"), "SAFE"))) ? S(ze) ? S(de.$path_resolver()["$root?"](ze)) || (ze = Fe("File").$join(de.$base_dir(), ze)) : ze = de.$base_dir() : (ze = S(Ee = ze) ? Ee : de.$base_dir(), Se = S(Ee = Se) ? Ee : de.$base_dir()), de.$path_resolver().$system_path(U, ze, Se, Ie);
        }, -2), Z(je, "$normalize_web_path", function(U, ze, Se) {
          var Ie = this;
          return ze == null && (ze = De), Se == null && (Se = !0), S(Se) && S(Ze("Helpers")["$uriish?"](U)) ? Ze("Helpers").$encode_spaces_in_uri(U) : Ie.document.$path_resolver().$web_path(U, ze);
        }, -2), Z(je, "$read_asset", function(U, ze) {
          var Se = this, Ie = De;
          return ze == null && (ze = W([], {})), ke(Fe("Hash"), ze) || (ze = W(["warn_on_failure"], { warn_on_failure: ze["$!="](!1) })), S(Fe("File")["$readable?"](U)) ? S(ze["$[]"]("normalize")) ? Ze("Helpers").$prepare_source_string(Fe("File").$read(U, W(["mode"], { mode: Ze("FILE_READ_MODE") }))).$join(Ze("LF")) : Fe("File").$read(U, W(["mode"], { mode: Ze("FILE_READ_MODE") })) : (S(ze["$[]"]("warn_on_failure")) && Se.$logger().$warn("" + (S(Ie = Se.$attr("docfile")) ? Ie : "<stdin>") + ": " + (S(Ie = ze["$[]"]("label")) ? Ie : "file") + " does not exist or cannot be read: " + U), De);
        }, -2), Z(je, "$read_contents", function(U, ze) {
          var Se = this, Ie = De, Ae = De, de = De, Ee = De;
          if (ze == null && (ze = W([], {})), Ie = Se.document, S(Ze("Helpers")["$uriish?"](U)) || S(Ae = ze["$[]"]("start")) && S(Ze("Helpers")["$uriish?"](Ae)) && S(U = Ie.$path_resolver().$web_path(U, Ae)))
            if (S(Ie["$attr?"]("allow-uri-read"))) {
              S(Ie["$attr?"]("cache-uri")) && Ze("Helpers").$require_library("open-uri/cached", "open-uri-cached");
              try {
                S(ze["$[]"]("normalize")) ? de = Ze("Helpers").$prepare_source_string(Be(Fe("OpenURI"), "open_uri", [U, Ze("URI_READ_MODE")], function(G) {
                  return G == null && (G = De), G.$read();
                })).$join(Ze("LF")) : de = Be(Fe("OpenURI"), "open_uri", [U, Ze("URI_READ_MODE")], function(G) {
                  return G == null && (G = De), G.$read();
                });
              } catch (te) {
                if (u.rescue(te, [Ze("StandardError")]))
                  try {
                    S(ze.$fetch("warn_on_failure", !0)) && Se.$logger().$warn("could not retrieve contents of " + (S(Ee = ze["$[]"]("label")) ? Ee : "asset") + " at URI: " + U);
                  } finally {
                    u.pop_exception();
                  }
                else
                  throw te;
              }
            } else
              S(ze.$fetch("warn_on_failure", !0)) && Se.$logger().$warn("cannot retrieve contents of " + (S(Ee = ze["$[]"]("label")) ? Ee : "asset") + " at URI: " + U + " (allow-uri-read attribute not enabled)");
          else
            U = Se.$normalize_system_path(U, ze["$[]"]("start"), De, W(["target_name"], { target_name: S(Ee = ze["$[]"]("label")) ? Ee : "asset" })), de = Se.$read_asset(U, W(["normalize", "warn_on_failure", "label"], { normalize: ze["$[]"]("normalize"), warn_on_failure: ze.$fetch("warn_on_failure", !0), label: ze["$[]"]("label") }));
          return S(de) && S(ze["$[]"]("warn_if_empty")) && S(de["$empty?"]()) && Se.$logger().$warn("contents of " + (S(Ee = ze["$[]"]("label")) ? Ee : "asset") + " is empty: " + U), de;
        }, -2), Z(je, "$is_uri?", function(U) {
          return Ze("Helpers")["$uriish?"](U);
        });
      }(Ye[0], null, Ye);
    }(He[0], He);
  }, Opal.modules["asciidoctor/abstract_block"] = function(u) {
    var se = u.module, re = u.klass, W = u.hash2, $e = u.send2, S = u.find_super, Z = u.eqeq, Be = u.eqeqeq, V = u.def, ke = u.return_val, O = u.truthy, Ke = u.alias, xe = u.send, He = u.rb_plus, De = u.not, Fe = u.neqeq, ot = [], Ge = u.nil, tt = u.$$$;
    return u.add_stubs("attr_reader,attr_writer,attr_accessor,==,===,level,file,lineno,playback_attributes,convert,converter,join,map,to_s,parent,parent=,<<,empty?,Integer,find_by_internal,to_proc,find_by,context,[],items,+,find_index,include?,next_adjacent_block,blocks,select,sub_specialchars,match?,sub_replacements,title,apply_title_subs,delete,!,reftext,nil_or_empty?,sub_placeholder,sub_quotes,compat_mode,attributes,chomp,increment_and_store_counter,index=,numbered,sectname,numeral=,counter,caption=,numeral,int_to_roman,each,assign_numeral,reindex_sections,protected,has_role?,raise,header?,!=,flatten,head,rows,merge,body,foot,style,inner_document"), function(Ye, We) {
      var st = se(Ye, "Asciidoctor"), L = [st].concat(We), je = u.$r(L);
      return function(k, Ze, nt) {
        var ee = re(k, Ze, "AbstractBlock"), U = [ee].concat(nt), ze = u.$r(U), Se = ee.$$prototype;
        return Se.source_location = Se.document = Se.attributes = Se.blocks = Se.numeral = Se.context = Se.parent = Se.caption = Se.style = Se.converted_title = Se.title = Se.subs = Se.next_section_index = Se.next_section_ordinal = Se.id = Se.header = Ge, ee.$attr_reader("blocks"), ee.$attr_writer("caption"), ee.$attr_accessor("content_model"), ee.$attr_accessor("level"), ee.$attr_accessor("numeral"), ee.$attr_accessor("source_location"), ee.$attr_accessor("style"), ee.$attr_reader("subs"), V(ee, "$initialize", function Ie(Ae, de, Ee) {
          var te = Ie.$$p || Ge, G = this;
          return Ie.$$p = null, Ee == null && (Ee = W([], {})), $e(G, S(G, "initialize", Ie, !1, !0), "initialize", [Ae, de, Ee], te), G.content_model = "compound", G.blocks = [], G.subs = [], G.id = G.title = G.caption = G.numeral = G.style = G.default_subs = G.source_location = Ge, Z(de, "document") || Z(de, "section") ? (G.level = G.next_section_index = 0, G.next_section_ordinal = 1) : Be(ze("AbstractBlock"), Ae) ? G.level = Ae.$level() : G.level = Ge;
        }, -3), V(ee, "$block?", ke(!0)), V(ee, "$inline?", ke(!1)), V(ee, "$file", function() {
          var Ae = this, de = Ge;
          return O(de = Ae.source_location) ? Ae.source_location.$file() : de;
        }), V(ee, "$lineno", function() {
          var Ae = this, de = Ge;
          return O(de = Ae.source_location) ? Ae.source_location.$lineno() : de;
        }), V(ee, "$convert", function() {
          var Ae = this;
          return Ae.document.$playback_attributes(Ae.attributes), Ae.$converter().$convert(Ae);
        }), Ke(ee, "render", "convert"), V(ee, "$content", function() {
          var Ae = this;
          return xe(Ae.blocks, "map", [], function(Ee) {
            return Ee == null && (Ee = Ge), Ee.$convert();
          }).$join(ze("LF"));
        }), V(ee, "$context=", function(Ae) {
          var de = this;
          return de.node_name = (de.context = Ae).$to_s();
        }), V(ee, "$<<", function(Ae) {
          var de = this;
          return Z(Ae.$parent(), de) || Ae["$parent="](de), de.blocks["$<<"](Ae), de;
        }), Ke(ee, "append", "<<"), V(ee, "$blocks?", function() {
          var Ae = this;
          return !O(Ae.blocks["$empty?"]());
        }), V(ee, "$sections?", ke(!1)), V(ee, "$number", function() {
          var Ae = this;
          try {
            return Ae.$Integer(Ae.numeral);
          } catch (de) {
            if (u.rescue(de, [ze("StandardError")]))
              try {
                return Ae.numeral;
              } finally {
                u.pop_exception();
              }
            else
              throw de;
          }
        }), V(ee, "$number=", function(Ae) {
          var de = this;
          return de.numeral = Ae.$to_s();
        }), V(ee, "$find_by", function Ie(Ae) {
          var de = Ie.$$p || Ge, Ee = this, te = Ge;
          Ie.$$p = null, Ae == null && (Ae = W([], {}));
          try {
            return xe(Ee, "find_by_internal", [Ae, te = []], de.$to_proc());
          } catch (G) {
            if (u.rescue(G, [tt("StopIteration")]))
              try {
                return te;
              } finally {
                u.pop_exception();
              }
            else
              throw G;
          }
        }, -1), Ke(ee, "query", "find_by"), V(ee, "$next_adjacent_block", function() {
          var Ae = this, de = Ge, Ee = Ge;
          return Z(Ae.context, "document") ? Ge : Z((de = Ae.parent).$context(), "dlist") && Z(Ae.context, "list_item") ? O(Ee = de.$items()["$[]"](He(xe(de.$items(), "find_index", [], function te(G, B) {
            var le = te.$$s == null ? this : te.$$s, oe = Ge;
            return G == null && (G = Ge), B == null && (B = Ge), O(oe = G["$include?"](le)) ? oe : B["$=="](le);
          }, { $$s: Ae }), 1))) ? Ee : de.$next_adjacent_block() : O(Ee = de.$blocks()["$[]"](He(de.$blocks().$find_index(Ae), 1))) ? Ee : de.$next_adjacent_block();
        }), V(ee, "$sections", function() {
          var Ae = this;
          return xe(Ae.blocks, "select", [], function(Ee) {
            return Ee == null && (Ee = Ge), Ee.$context()["$=="]("section");
          });
        }), V(ee, "$alt", function() {
          var Ae = this, de = Ge;
          return O(de = Ae.attributes["$[]"]("alt")) ? Z(de, Ae.attributes["$[]"]("default-alt")) ? Ae.$sub_specialchars(de) : (de = Ae.$sub_specialchars(de), O(ze("ReplaceableTextRx")["$match?"](de)) ? Ae.$sub_replacements(de) : de) : "";
        }), V(ee, "$caption", function() {
          var Ae = this;
          return Z(Ae.context, "admonition") ? Ae.attributes["$[]"]("textlabel") : Ae.caption;
        }), V(ee, "$captioned_title", function() {
          var Ae = this;
          return "" + Ae.caption + Ae.$title();
        }), V(ee, "$list_marker_keyword", function(Ae) {
          var de = this, Ee = Ge;
          return Ae == null && (Ae = Ge), ze("ORDERED_LIST_KEYWORDS")["$[]"](O(Ee = Ae) ? Ee : de.style);
        }, -1), V(ee, "$title", function() {
          var Ae = this, de = Ge, Ee = Ge;
          return Ae.converted_title = O(de = Ae.converted_title) ? de : O(Ee = Ae.title) ? Ae.$apply_title_subs(Ae.title) : Ee;
        }), V(ee, "$title?", function() {
          var Ae = this;
          return !!O(Ae.title);
        }), V(ee, "$title=", function(Ae) {
          var de = this;
          return de.converted_title = Ge, de.title = Ae;
        }), V(ee, "$sub?", function(Ae) {
          var de = this;
          return de.subs["$include?"](Ae);
        }), V(ee, "$remove_sub", function(Ae) {
          var de = this;
          return de.subs.$delete(Ae), Ge;
        }), V(ee, "$xreftext", function(Ae) {
          var de = this, Ee = Ge, te = Ge, G = Ge, B = Ge;
          if (Ae == null && (Ae = Ge), O(Ee = de.$reftext()) && De(Ee["$empty?"]()))
            return Ee;
          if (O(Ae) && O(de.title) && De(de.caption["$nil_or_empty?"]()))
            switch (Ae) {
              case "full":
                return te = de.$sub_placeholder(de.$sub_quotes(O(de.document.$compat_mode()) ? "``%s''" : '"`%s`"'), de.$title()), O(de.numeral) && O(B = ze("CAPTION_ATTRIBUTE_NAMES")["$[]"](de.context)) && O(G = de.document.$attributes()["$[]"](B)) ? "" + G + " " + de.numeral + ", " + te : "" + de.caption.$chomp(". ") + ", " + te;
              case "short":
                return O(de.numeral) && O(B = ze("CAPTION_ATTRIBUTE_NAMES")["$[]"](de.context)) && O(G = de.document.$attributes()["$[]"](B)) ? "" + G + " " + de.numeral : de.caption.$chomp(". ");
              default:
                return de.$title();
            }
          else
            return de.$title();
        }, -1), V(ee, "$assign_caption", function(Ae, de) {
          var Ee = this, te = Ge, G = Ge, B = Ge;
          return de == null && (de = Ee.context), O(Ee.caption) || De(Ee.title) || O(Ee.caption = O(te = Ae) ? te : Ee.document.$attributes()["$[]"]("caption")) || O(B = ze("CAPTION_ATTRIBUTE_NAMES")["$[]"](de)) && O(G = Ee.document.$attributes()["$[]"](B)) && (Ee.caption = "" + G + " " + (Ee.numeral = Ee.document.$increment_and_store_counter("" + de + "-number", Ee)) + ". "), Ge;
        }, -2), V(ee, "$assign_numeral", function(Ae) {
          var de, Ee = this, te = Ge, G = Ge, B = Ge;
          return Ee.next_section_index = He((de = [Ee.next_section_index], xe(Ae, "index=", de), de[de.length - 1]), 1), O(te = Ae.$numbered()) && (Z(G = Ae.$sectname(), "appendix") ? (Ae["$numeral="](Ee.document.$counter("appendix-number", "A")), Ae["$caption="](O(B = Ee.document.$attributes()["$[]"]("appendix-caption")) ? "" + B + " " + Ae.$numeral() + ": " : "" + Ae.$numeral() + ". ")) : Z(G, "chapter") || Z(te, "chapter") ? Ae["$numeral="](Ee.document.$counter("chapter-number", 1).$to_s()) : (Ae["$numeral="](Z(G, "part") ? ze("Helpers").$int_to_roman(Ee.next_section_ordinal) : Ee.next_section_ordinal.$to_s()), Ee.next_section_ordinal = He(Ee.next_section_ordinal, 1))), Ge;
        }), V(ee, "$reindex_sections", function() {
          var Ae = this;
          return Ae.next_section_index = 0, Ae.next_section_ordinal = 1, xe(Ae.blocks, "each", [], function de(Ee) {
            var te = de.$$s == null ? this : de.$$s;
            return Ee == null && (Ee = Ge), Z(Ee.$context(), "section") ? (te.$assign_numeral(Ee), Ee.$reindex_sections()) : Ge;
          }, { $$s: Ae });
        }), ee.$protected(), V(ee, "$find_by_internal", function Ie(Ae, de) {
          var Ee = Ie.$$p || Ge, te = this, G = Ge, B = Ge, le = Ge, oe = Ge, he = Ge, j = Ge;
          if (Ie.$$p = null, Ae == null && (Ae = W([], {})), de == null && (de = []), (O(oe = O(he = Ae["$[]"]("context")) ? Ge : !0) || Z(he, te.context)) && (De(le = Ae["$[]"]("style")) || Z(le, te.style)) && (De(B = Ae["$[]"]("role")) || O(te["$has_role?"](B))) && (De(G = Ae["$[]"]("id")) || Z(G, te.id)))
            if (Ee !== Ge)
              if (O(j = u.yield1(Ee, te)))
                switch (j) {
                  case "prune":
                    return de["$<<"](te), O(G) && te.$raise(tt("StopIteration")), de;
                  case "reject":
                    return O(G) && te.$raise(tt("StopIteration")), de;
                  case "stop":
                    te.$raise(tt("StopIteration"));
                    break;
                  default:
                    de["$<<"](te), O(G) && te.$raise(tt("StopIteration"));
                }
              else
                O(G) && te.$raise(tt("StopIteration"));
            else
              de["$<<"](te), O(G) && te.$raise(tt("StopIteration"));
          switch (te.context) {
            case "document":
              Z(he, "document") || (O(te["$header?"]()) && (O(oe) || Z(he, "section")) && xe(te.header, "find_by_internal", [Ae, de], Ee.$to_proc()), xe(te.blocks, "each", [], function(p) {
                return p == null && (p = Ge), Z(he, "section") && Fe(p.$context(), "section") ? Ge : xe(p, "find_by_internal", [Ae, de], Ee.$to_proc());
              }));
              break;
            case "dlist":
              (O(oe) || Fe(he, "section")) && xe(te.blocks.$flatten(), "each", [], function(p) {
                return p == null && (p = Ge), O(p) ? xe(p, "find_by_internal", [Ae, de], Ee.$to_proc()) : Ge;
              });
              break;
            case "table":
              O(Ae["$[]"]("traverse_documents")) ? (xe(te.$rows().$head(), "each", [], function(p) {
                return p == null && (p = Ge), xe(p, "each", [], function(M) {
                  return M == null && (M = Ge), xe(M, "find_by_internal", [Ae, de], Ee.$to_proc());
                });
              }), Z(he, "inner_document") && (Ae = Ae.$merge(W(["context"], { context: "document" }))), xe(He(te.$rows().$body(), te.$rows().$foot()), "each", [], function(p) {
                return p == null && (p = Ge), xe(p, "each", [], function(M) {
                  return M == null && (M = Ge), xe(M, "find_by_internal", [Ae, de], Ee.$to_proc()), Z(M.$style(), "asciidoc") ? xe(M.$inner_document(), "find_by_internal", [Ae, de], Ee.$to_proc()) : Ge;
                });
              })) : xe(He(He(te.$rows().$head(), te.$rows().$body()), te.$rows().$foot()), "each", [], function(p) {
                return p == null && (p = Ge), xe(p, "each", [], function(M) {
                  return M == null && (M = Ge), xe(M, "find_by_internal", [Ae, de], Ee.$to_proc());
                });
              });
              break;
            default:
              xe(te.blocks, "each", [], function(p) {
                return p == null && (p = Ge), Z(he, "section") && Fe(p.$context(), "section") ? Ge : xe(p, "find_by_internal", [Ae, de], Ee.$to_proc());
              });
          }
          return de;
        }, -1);
      }(L[0], je("AbstractNode"), L);
    }(ot[0], ot);
  }, Opal.modules["asciidoctor/attribute_list"] = function(u) {
    var se = u.module, re = u.klass, W = u.const_set, $e = u.hash, S = u.regexp, Z = u.hash2, Be = u.def, V = u.truthy, ke = u.rb_plus, O = u.send, Ke = u.defs, xe = u.eqeqeq, He = u.eqeq, De = u.rb_times, Fe = [], ot = u.nil, Ge = u.$$$;
    return u.add_stubs("new,[],update,parse,parse_attribute,eos?,skip_delimiter,+,rekey,each_with_index,[]=,private,skip_blank,===,peek,parse_attribute_value,get_byte,start_with?,scan_name,end_with?,rstrip,string,==,unscan,scan_to_delimiter,*,include?,delete,each,split,empty?,apply_subs,scan_to_quote,gsub,skip,scan"), function(tt, Ye) {
      var We = se(tt, "Asciidoctor"), st = [We].concat(Ye);
      return function(L, je, k) {
        var Ze = re(L, je, "AttributeList"), nt = [Ze].concat(k), ee = u.$r(nt), U = Ze.$$prototype;
        return U.attributes = U.scanner = U.delimiter = U.block = U.delimiter_skip_pattern = U.delimiter_boundary_pattern = ot, W(nt[0], "APOS", "'"), W(nt[0], "BACKSLASH", "\\"), W(nt[0], "QUOT", '"'), W(nt[0], "BoundaryRx", $e(ee("QUOT"), /.*?[^\\](?=")/, ee("APOS"), /.*?[^\\](?=')/, ",", /.*?(?=[ \t]*(,|$))/)), W(nt[0], "EscapedQuotes", $e(ee("QUOT"), '\\"', ee("APOS"), "\\'")), W(nt[0], "NameRx", S([ee("CG_WORD"), "[", ee("CC_WORD"), "\\-.]*"])), W(nt[0], "BlankRx", /[ \t]+/), W(nt[0], "SkipRx", Z([","], { ",": /[ \t]*(,|$)/ })), Be(Ze, "$initialize", function(Se, Ie, Ae) {
          var de = this;
          return Ie == null && (Ie = ot), Ae == null && (Ae = ","), de.scanner = Ge("StringScanner").$new(Se), de.block = Ie, de.delimiter = Ae, de.delimiter_skip_pattern = ee("SkipRx")["$[]"](Ae), de.delimiter_boundary_pattern = ee("BoundaryRx")["$[]"](Ae), de.attributes = ot;
        }, -2), Be(Ze, "$parse_into", function(Se, Ie) {
          var Ae = this;
          return Ie == null && (Ie = []), Se.$update(Ae.$parse(Ie));
        }, -2), Be(Ze, "$parse", function(Se) {
          var Ie = this, Ae = ot;
          if (Se == null && (Se = []), V(Ie.attributes))
            return Ie.attributes;
          for (Ie.attributes = Z([], {}), Ae = 0; V(Ie.$parse_attribute(Ae, Se)) && !V(Ie.scanner["$eos?"]()); )
            Ie.$skip_delimiter(), Ae = ke(Ae, 1);
          return Ie.attributes;
        }, -1), Be(Ze, "$rekey", function(Se) {
          var Ie = this;
          return ee("AttributeList").$rekey(Ie.attributes, Se);
        }), Ke(Ze, "$rekey", function(Se, Ie) {
          return O(Ie, "each_with_index", [], function(de, Ee) {
            var te, G = ot;
            return de == null && (de = ot), Ee == null && (Ee = ot), V(de) && V(G = Se["$[]"](ke(Ee, 1))) ? (te = [de, G], O(Se, "[]=", te), te[te.length - 1]) : ot;
          }), Se;
        }), Ze.$private(), Be(Ze, "$parse_attribute", function(Se, Ie) {
          var Ae = this, de = ot, Ee = ot, te = ot, G = ot, B = ot, le = ot, oe = ot, he = ot, j = ot, v = ot;
          if (de = !0, Ae.$skip_blank(), xe(ee("QUOT"), Ee = Ae.scanner.$peek(1)))
            te = Ae.$parse_attribute_value(Ae.scanner.$get_byte());
          else if (xe(ee("APOS"), Ee))
            te = Ae.$parse_attribute_value(Ae.scanner.$get_byte()), V(te["$start_with?"](ee("APOS"))) || (G = !0);
          else if (B = V(le = V(oe = te = Ae.$scan_name()) ? Ae.$skip_blank() : oe) ? le : 0, V(Ae.scanner["$eos?"]())) {
            if (!(V(te) || V(Ae.scanner.$string().$rstrip()["$end_with?"](Ae.delimiter))))
              return ot;
            de = ot;
          } else if (He(he = Ae.scanner.$get_byte(), Ae.delimiter))
            Ae.scanner.$unscan();
          else if (V(te))
            if (He(he, "=")) {
              if (Ae.$skip_blank(), xe(ee("QUOT"), le = he = Ae.scanner.$get_byte()))
                j = Ae.$parse_attribute_value(he);
              else if (xe(ee("APOS"), le))
                j = Ae.$parse_attribute_value(he), V(j["$start_with?"](ee("APOS"))) || (G = !0);
              else if (xe(Ae.delimiter, le))
                j = "", Ae.scanner.$unscan();
              else if (xe(ot, le))
                j = "";
              else if (j = "" + he + Ae.$scan_to_delimiter(), He(j, "None"))
                return !0;
            } else
              te = "" + te + De(" ", B) + he + Ae.$scan_to_delimiter();
          else
            te = "" + he + Ae.$scan_to_delimiter();
          if (V(j))
            switch (te) {
              case "options":
              case "opts":
                V(j["$include?"](",")) ? (V(j["$include?"](" ")) && (j = j.$delete(" ")), O(j.$split(","), "each", [], function p(E) {
                  var M, x = p.$$s == null ? this : p.$$s;
                  return x.attributes == null && (x.attributes = ot), E == null && (E = ot), V(E["$empty?"]()) ? ot : (M = ["" + E + "-option", ""], O(x.attributes, "[]=", M), M[M.length - 1]);
                }, { $$s: Ae })) : V(j["$empty?"]()) || Ae.attributes["$[]="]("" + j + "-option", "");
                break;
              default:
                if (V(G) && V(Ae.block))
                  switch (te) {
                    case "title":
                    case "reftext":
                      Ae.attributes["$[]="](te, j);
                      break;
                    default:
                      Ae.attributes["$[]="](te, Ae.block.$apply_subs(j));
                  }
                else
                  Ae.attributes["$[]="](te, j);
            }
          else
            V(G) && V(Ae.block) && (te = Ae.block.$apply_subs(te)), V(v = Ie["$[]"](Se)) && V(te) && Ae.attributes["$[]="](v, te), Ae.attributes["$[]="](ke(Se, 1), te);
          return de;
        }), Be(Ze, "$parse_attribute_value", function(Se) {
          var Ie = this, Ae = ot;
          return He(Ie.scanner.$peek(1), Se) ? (Ie.scanner.$get_byte(), "") : V(Ae = Ie.$scan_to_quote(Se)) ? (Ie.scanner.$get_byte(), V(Ae["$include?"](ee("BACKSLASH"))) ? Ae.$gsub(ee("EscapedQuotes")["$[]"](Se), Se) : Ae) : "" + Se + Ie.$scan_to_delimiter();
        }), Be(Ze, "$skip_blank", function() {
          var Se = this;
          return Se.scanner.$skip(ee("BlankRx"));
        }), Be(Ze, "$skip_delimiter", function() {
          var Se = this;
          return Se.scanner.$skip(Se.delimiter_skip_pattern);
        }), Be(Ze, "$scan_name", function() {
          var Se = this;
          return Se.scanner.$scan(ee("NameRx"));
        }), Be(Ze, "$scan_to_delimiter", function() {
          var Se = this;
          return Se.scanner.$scan(Se.delimiter_boundary_pattern);
        }), Be(Ze, "$scan_to_quote", function(Se) {
          var Ie = this;
          return Ie.scanner.$scan(ee("BoundaryRx")["$[]"](Se));
        });
      }(st[0], null, st);
    }(Fe[0], Fe);
  }, Opal.modules["asciidoctor/block"] = function(u) {
    var se = u.module, re = u.klass, W = u.const_set, $e = u.hash2, S = u.alias, Z = u.send2, Be = u.find_super, V = u.truthy, ke = u.eqeqeq, O = u.def, Ke = u.rb_lt, xe = u.eqeq, He = [], De = u.nil, Fe = u.$$$;
    return u.add_stubs("default=,context,attr_accessor,[],key?,===,drop,delete,[]=,to_s,commit_subs,nil_or_empty?,prepare_source_string,apply_subs,join,<,size,empty?,rstrip,shift,pop,==,warn,logger,class,object_id,inspect"), function(ot, Ge) {
      var tt = se(ot, "Asciidoctor"), Ye = [tt].concat(Ge), We = u.$r(Ye);
      return function(st, L, je) {
        var k = re(st, L, "Block"), Ze = [k].concat(je), nt = u.$r(Ze), ee = k.$$prototype;
        return ee.attributes = ee.content_model = ee.lines = ee.subs = ee.blocks = ee.context = ee.style = De, W(Ze[0], "DEFAULT_CONTENT_MODEL", $e(["audio", "image", "listing", "literal", "stem", "open", "page_break", "pass", "thematic_break", "video"], { audio: "empty", image: "empty", listing: "verbatim", literal: "verbatim", stem: "raw", open: "compound", page_break: "empty", pass: "raw", thematic_break: "empty", video: "empty" }))["$default="]("simple"), S(k, "blockname", "context"), k.$attr_accessor("lines"), O(k, "$initialize", function U(ze, Se, Ie) {
          var Ae = U.$$p || De, de = this, Ee = De, te = De, G = De;
          return U.$$p = null, Ie == null && (Ie = $e([], {})), Z(de, Be(de, "initialize", U, !1, !0), "initialize", [ze, Se, Ie], Ae), de.content_model = V(Ee = Ie["$[]"]("content_model")) ? Ee : nt("DEFAULT_CONTENT_MODEL")["$[]"](Se), V(Ie["$key?"]("subs")) ? V(te = Ie["$[]"]("subs")) ? (ke("default", Ee = te) ? de.default_subs = Ie["$[]"]("default_subs") : ke(Fe("Array"), Ee) ? (de.default_subs = te.$drop(0), de.attributes.$delete("subs")) : (de.default_subs = De, de.attributes["$[]="]("subs", te.$to_s())), de.$commit_subs()) : (de.default_subs = [], de.attributes.$delete("subs")) : de.default_subs = De, V((G = Ie["$[]"]("source"))["$nil_or_empty?"]()) ? de.lines = [] : ke(Fe("String"), G) ? de.lines = nt("Helpers").$prepare_source_string(G) : de.lines = G.$drop(0);
        }, -3), O(k, "$content", function U() {
          var ze = U.$$p || De, Se = this, Ie = De, Ae = De, de = De, Ee = De;
          switch (U.$$p = null, Se.content_model) {
            case "compound":
              return Z(Se, Be(Se, "content", U, !1, !0), "content", [], ze);
            case "simple":
              return Se.$apply_subs(Se.lines.$join(nt("LF")), Se.subs);
            case "verbatim":
            case "raw":
              if (Ie = Se.$apply_subs(Se.lines, Se.subs), V(Ke(Ie.$size(), 2)))
                return V(Ae = Ie["$[]"](0)) ? Ae : "";
              for (; V(V(Ae = de = Ie["$[]"](0)) ? de.$rstrip()["$empty?"]() : Ae); )
                Ie.$shift();
              for (; V(V(Ae = Ee = Ie["$[]"](-1)) ? Ee.$rstrip()["$empty?"]() : Ae); )
                Ie.$pop();
              return Ie.$join(nt("LF"));
            default:
              return xe(Se.content_model, "empty") || Se.$logger().$warn("unknown content model '" + Se.content_model + "' for block: " + Se), De;
          }
        }), O(k, "$source", function() {
          var ze = this;
          return ze.lines.$join(nt("LF"));
        }), O(k, "$to_s", function() {
          var ze = this, Se = De;
          return Se = xe(ze.content_model, "compound") ? "blocks: " + ze.blocks.$size() : "lines: " + ze.lines.$size(), "#<" + ze.$class() + "@" + ze.$object_id() + " {context: " + ze.context.$inspect() + ", content_model: " + ze.content_model.$inspect() + ", style: " + ze.style.$inspect() + ", " + Se + "}>";
        });
      }(Ye[0], We("AbstractBlock"), Ye);
    }(He[0], He);
  }, Opal.modules["asciidoctor/callouts"] = function(u) {
    var se = u.module, re = u.klass, W = u.def, $e = u.hash2, S = u.rb_plus, Z = u.truthy, Be = u.rb_le, V = u.rb_minus, ke = u.send, O = u.eqeq, Ke = u.rb_lt, xe = [], He = u.nil;
    return u.add_stubs("next_list,<<,current_list,to_i,generate_next_callout_id,+,<=,size,[],-,chop,join,map,==,<,private,generate_callout_id"), function(De, Fe) {
      var ot = se(De, "Asciidoctor"), Ge = [ot].concat(Fe);
      return function(tt, Ye) {
        var We = re(tt, Ye, "Callouts"), st = We.$$prototype;
        return st.co_index = st.lists = st.list_index = He, W(We, "$initialize", function() {
          var je = this;
          return je.lists = [], je.list_index = 0, je.$next_list();
        }), W(We, "$register", function(je) {
          var k = this, Ze = He;
          return k.$current_list()["$<<"]($e(["ordinal", "id"], { ordinal: je.$to_i(), id: Ze = k.$generate_next_callout_id() })), k.co_index = S(k.co_index, 1), Ze;
        }), W(We, "$read_next_id", function() {
          var je = this, k = He, Ze = He;
          return k = He, Ze = je.$current_list(), Z(Be(je.co_index, Ze.$size())) && (k = Ze["$[]"](V(je.co_index, 1))["$[]"]("id")), je.co_index = S(je.co_index, 1), k;
        }), W(We, "$callout_ids", function(je) {
          var k = this;
          return ke(k.$current_list(), "map", [], function(nt) {
            return nt == null && (nt = He), O(nt["$[]"]("ordinal"), je) ? "" + nt["$[]"]("id") + " " : "";
          }).$join().$chop();
        }), W(We, "$current_list", function() {
          var je = this;
          return je.lists["$[]"](V(je.list_index, 1));
        }), W(We, "$next_list", function() {
          var je = this;
          return je.list_index = S(je.list_index, 1), Z(Ke(je.lists.$size(), je.list_index)) && je.lists["$<<"]([]), je.co_index = 1, He;
        }), W(We, "$rewind", function() {
          var je = this;
          return je.list_index = 1, je.co_index = 1, He;
        }), We.$private(), W(We, "$generate_next_callout_id", function() {
          var je = this;
          return je.$generate_callout_id(je.list_index, je.co_index);
        }), W(We, "$generate_callout_id", function(je, k) {
          return "CO" + je + "-" + k;
        });
      }(Ge[0], null);
    }(xe[0], xe);
  }, Opal.modules["asciidoctor/converter/composite"] = function(u) {
    var se = u.module, re = u.klass, W = u.slice, $e = u.extract_kwargs, S = u.ensure_kwargs, Z = u.send, Be = u.truthy, V = u.def, ke = u.thrower, O = [], Ke = u.nil, xe = u.$$$;
    return u.add_stubs("attr_reader,each,respond_to?,composed,init_backend_traits,backend_traits,new,[]=,find_converter,convert,converter_for,node_name,[],handles?,raise"), function(He, De) {
      var Fe = se(He, "Asciidoctor"), ot = [Fe].concat(De), Ge = u.$r(ot);
      return function(tt, Ye) {
        var We = re(tt, Ye, "CompositeConverter"), st = We.$$prototype;
        return st.converter_cache = st.converters = Ke, We.$attr_reader("converters"), V(We, "$initialize", function(je, k, Ze) {
          var nt, ee, U, ze, Se = this;
          return nt = W(arguments, 1), ee = $e(nt), ee = S(ee), U = nt, ze = ee.$$smap.backend_traits_source, ze == null && (ze = Ke), Se.backend = je, Z(Se.converters = U, "each", [], function Ie(Ae) {
            var de = Ie.$$s == null ? this : Ie.$$s;
            return Ae == null && (Ae = Ke), Be(Ae["$respond_to?"]("composed")) ? Ae.$composed(de) : Ke;
          }, { $$s: Se }), Be(ze) && Se.$init_backend_traits(ze.$backend_traits()), Se.converter_cache = Z(xe("Hash"), "new", [], function Ie(Ae, de) {
            var Ee, te = Ie.$$s == null ? this : Ie.$$s;
            return Ae == null && (Ae = Ke), de == null && (de = Ke), Ee = [de, te.$find_converter(de)], Z(Ae, "[]=", Ee), Ee[Ee.length - 1];
          }, { $$s: Se });
        }, -2), V(We, "$convert", function(je, k, Ze) {
          var nt = this, ee = Ke;
          return k == null && (k = Ke), Ze == null && (Ze = Ke), nt.$converter_for(k = Be(ee = k) ? ee : je.$node_name()).$convert(je, k, Ze);
        }, -2), V(We, "$converter_for", function(je) {
          var k = this;
          return k.converter_cache["$[]"](je);
        }), V(We, "$find_converter", function(je) {
          try {
            var k = ke("return"), Ze = this;
            return Z(Ze.converters, "each", [], function(ee) {
              if (ee == null && (ee = Ke), Be(ee["$handles?"](je)))
                k.$throw(ee);
              else
                return Ke;
            }, { $$ret: k }), Ze.$raise("Could not find a converter to handle transform: " + je);
          } catch (nt) {
            if (nt === k)
              return nt.$v;
            throw nt;
          }
        });
      }(Ge("Converter"), xe(Ge("Converter"), "Base"));
    }(O[0], O);
  }, Opal.modules["asciidoctor/converter"] = function(u) {
    var se = u.module, re = u.hash2, W = u.def, $e = u.return_val, S = u.truthy, Z = u.eqeq, Be = u.defs, V = u.send, ke = u.alias, O = u.slice, Ke = u.to_a, xe = u.extract_kwargs, He = u.ensure_kwargs, De = u.eqeqeq, Fe = u.Class, ot = u.klass, Ge = u.class_variable_set, tt = u.class_variable_get, Ye = u.rb_plus, We = u.gvars, st = [], L = u.nil, je = u.$$$;
    return u.add_stubs("autoload,attr_reader,raise,class,[],sub,slice,length,==,[]=,backend_traits,derive_backend_traits,register,map,to_s,new,create,default,each,default=,registry,for,===,supports_templates?,merge,private,include,delete,clear,send,extend,private_class_method,node_name,+,name,receiver,warn,logger,respond_to?,content"), function(k, Ze) {
      var nt = se(k, "Asciidoctor"), ee = [nt].concat(Ze);
      return function(U, ze) {
        var Se = se(U, "Converter"), Ie = [Se].concat(ze), Ae = u.$r(Ie);
        return Se.$autoload("CompositeConverter", "asciidoctor/converter/composite"), Se.$attr_reader("backend"), W(Se, "$initialize", function(Ee, te) {
          var G = this;
          return te == null && (te = re([], {})), G.backend = Ee;
        }, -2), W(Se, "$convert", function(Ee, te, G) {
          var B = this;
          return B.backend == null && (B.backend = L), B.$raise(je("NotImplementedError"), "" + B.$class() + " (backend: " + B.backend + ") must implement the #convert method");
        }, -2), W(Se, "$handles?", $e(!0)), Be(Se, "$derive_backend_traits", function(Ee, te) {
          var G = L, B = L, le = L;
          return te == null && (te = L), S(Ee) ? (S(G = Ae("DEFAULT_EXTENSIONS")["$[]"](te = S(B = te) ? B : Ee.$sub(Ae("TrailingDigitsRx"), ""))) ? le = G.$slice(1, G.$length()) : G = "." + (le = te), Z(le, "html") ? re(["basebackend", "filetype", "htmlsyntax", "outfilesuffix"], { basebackend: te, filetype: le, htmlsyntax: "html", outfilesuffix: G }) : re(["basebackend", "filetype", "outfilesuffix"], { basebackend: te, filetype: le, outfilesuffix: G })) : re([], {});
        }, -2), function(de, Ee) {
          var te = se(de, "BackendTraits"), G = [te].concat(Ee), B = u.$r(G);
          return W(te, "$basebackend", function(oe) {
            var he, j = this;
            return oe == null && (oe = L), S(oe) ? (he = ["basebackend", oe], V(j.$backend_traits(oe), "[]=", he), he[he.length - 1]) : j.$backend_traits()["$[]"]("basebackend");
          }, -1), W(te, "$filetype", function(oe) {
            var he, j = this;
            return oe == null && (oe = L), S(oe) ? (he = ["filetype", oe], V(j.$backend_traits(), "[]=", he), he[he.length - 1]) : j.$backend_traits()["$[]"]("filetype");
          }, -1), W(te, "$htmlsyntax", function(oe) {
            var he, j = this;
            return oe == null && (oe = L), S(oe) ? (he = ["htmlsyntax", oe], V(j.$backend_traits(), "[]=", he), he[he.length - 1]) : j.$backend_traits()["$[]"]("htmlsyntax");
          }, -1), W(te, "$outfilesuffix", function(oe) {
            var he, j = this;
            return oe == null && (oe = L), S(oe) ? (he = ["outfilesuffix", oe], V(j.$backend_traits(), "[]=", he), he[he.length - 1]) : j.$backend_traits()["$[]"]("outfilesuffix");
          }, -1), W(te, "$supports_templates", function(oe) {
            var he, j = this;
            return oe == null && (oe = !0), he = ["supports_templates", oe], V(j.$backend_traits(), "[]=", he), he[he.length - 1];
          }, -1), W(te, "$supports_templates?", function() {
            var oe = this;
            return oe.$backend_traits()["$[]"]("supports_templates");
          }), W(te, "$init_backend_traits", function(oe) {
            var he = this, j = L;
            return oe == null && (oe = L), he.backend_traits = S(j = oe) ? j : re([], {});
          }, -1), W(te, "$backend_traits", function(oe) {
            var he = this, j = L;
            return he.backend_traits == null && (he.backend_traits = L), he.backend == null && (he.backend = L), oe == null && (oe = L), he.backend_traits = S(j = he.backend_traits) ? j : B("Converter").$derive_backend_traits(he.backend, oe);
          }, -1), ke(te, "backend_info", "backend_traits"), Be(te, "$derive_backend_traits", function(oe, he) {
            return he == null && (he = L), B("Converter").$derive_backend_traits(oe, he);
          }, -2);
        }(Ie[0], Ie), function(de, Ee) {
          var te = se(de, "Config"), G = [te].concat(Ee), B = u.$r(G);
          return W(te, "$register_for", function(oe) {
            var he, j, v = this;
            return he = O(arguments), j = he, V(B("Converter"), "register", [v].concat(Ke(V(j, "map", [], function(E) {
              return E == null && (E = L), E.$to_s();
            }))));
          }, -1);
        }(Ie[0], Ie), function(de, Ee) {
          var te = se(de, "Factory"), G = [te].concat(Ee), B = u.$r(G);
          return Be(te, "$new", function(oe, he) {
            var j, v, p, E;
            return j = O(arguments), v = xe(j), v = He(v), j.length > 0 && (p = j.shift()), p == null && (p = L), E = v.$$smap.proxy_default, E == null && (E = !0), S(E) ? B("DefaultFactoryProxy").$new(p) : B("CustomFactory").$new(p);
          }, -1), Be(te, "$default", function(oe) {
            return O(arguments), B("Converter");
          }, -1), Be(te, "$create", function(oe, he) {
            var j = this;
            return he == null && (he = re([], {})), j.$default().$create(oe, he);
          }, -2), W(te, "$register", function(oe, he) {
            var j, v, p = this;
            return j = O(arguments, 1), v = j, V(v, "each", [], function E(M) {
              var x, T = E.$$s == null ? this : E.$$s;
              return M == null && (M = L), Z(M, "*") ? (x = [oe], V(T.$registry(), "default=", x), x[x.length - 1]) : (x = [M, oe], V(T.$registry(), "[]=", x), x[x.length - 1]);
            }, { $$s: p });
          }, -2), W(te, "$for", function(oe) {
            var he = this;
            return he.$registry()["$[]"](oe);
          }), W(te, "$create", function(oe, he) {
            var j = this, v = L, p = L, E = L;
            return he == null && (he = re([], {})), S(v = j.$for(oe)) ? (De(Fe, v) && (v = v.$new(oe, he)), S(p = he["$[]"]("template_dirs")) && De(B("BackendTraits"), v) && S(v["$supports_templates?"]()) ? B("CompositeConverter").$new(oe, B("TemplateConverter").$new(oe, p, he), v, re(["backend_traits_source"], { backend_traits_source: v })) : v) : S(p = he["$[]"]("template_dirs")) ? S(E = he["$[]"]("delegate_backend")) && S(v = j.$for(E)) ? (De(Fe, v) && (v = v.$new(E, he)), B("CompositeConverter").$new(oe, B("TemplateConverter").$new(oe, p, he), v, re(["backend_traits_source"], { backend_traits_source: v }))) : B("TemplateConverter").$new(oe, p, he) : L;
          }, -2), W(te, "$converters", function() {
            var oe = this;
            return oe.$registry().$merge();
          }), te.$private(), W(te, "$registry", function() {
            var oe = this;
            return oe.$raise(je("NotImplementedError"), "" + B("Factory") + " subclass " + oe.$class() + " must implement the #registry method");
          });
        }(Ie[0], Ie), function(de, Ee, te) {
          var G = ot(de, Ee, "CustomFactory"), B = [G].concat(te), le = u.$r(B);
          return G.$include(le("Factory")), W(G, "$initialize", function(he) {
            var j = this;
            return he == null && (he = L), S(he) ? (he["$default="](he.$delete("*")), j.registry = he) : j.registry = re([], {});
          }, -1), W(G, "$unregister_all", function() {
            var he, j = this;
            return he = [L], V(j.$registry().$clear(), "default=", he), he[he.length - 1];
          }), G.$private(), G.$attr_reader("registry");
        }(Ie[0], null, Ie), function(de, Ee) {
          var te = se(de, "DefaultFactory"), G = [te].concat(Ee), B = u.$r(G);
          return te.$include(B("Factory")), te.$private(), Ge(G[0], "@@registry", re([], {})), W(te, "$registry", function() {
            return tt(G[0], "@@registry", !1);
          }), L;
        }(Ie[0], Ie), function(de, Ee, te) {
          var G = ot(de, Ee, "DefaultFactoryProxy"), B = [G].concat(te), le = u.$r(B);
          return G.$include(le("DefaultFactory")), L;
        }(Ie[0], Ae("CustomFactory"), Ie), Be(Se, "$included", function(Ee) {
          return Ee.$send("include", Ae("BackendTraits")), Ee.$extend(Ae("Config"));
        }), Se.$private_class_method("included"), function(de, Ee, te) {
          var G = ot(de, Ee, "Base"), B = [G].concat(te), le = u.$r(B), oe = G.$$prototype;
          return oe.backend = L, G.$include(le("Logging")), G.$include(le("Converter")), W(G, "$convert", function(j, v, p) {
            var E = this, M = L;
            We["!"] == null && (We["!"] = L), v == null && (v = j.$node_name()), p == null && (p = L);
            try {
              return S(p) ? E.$send(Ye("convert_", v), j, p) : E.$send(Ye("convert_", v), j);
            } catch (x) {
              if (u.rescue(x, [le("StandardError")]))
                try {
                  return De(je("NoMethodError"), M = We["!"]) && Z(M.$receiver(), E) && Z(M.$name().$to_s(), v) || E.$raise(), E.$logger().$warn("missing convert handler for " + M.$name() + " node in " + E.backend + " backend (" + E.$class() + ")"), L;
                } finally {
                  u.pop_exception();
                }
              else
                throw x;
            }
          }, -2), W(G, "$handles?", function(j) {
            var v = this;
            return v["$respond_to?"]("convert_" + j);
          }), W(G, "$content_only", function(j) {
            return j.$content();
          }), W(G, "$skip", $e(L));
        }(Ie[0], null, Ie), Se.$extend(Ae("DefaultFactory"));
      }(ee[0], ee);
    }(st[0], st);
  }, Opal.modules["asciidoctor/document"] = function(u) {
    var se = u.module, re = u.klass, W = u.const_set, $e = u.send, S = u.alias, Z = u.truthy, Be = u.def, V = u.hash2, ke = u.not, O = u.to_ary, Ke = u.return_ivar, xe = u.send2, He = u.find_super, De = u.rb_minus, Fe = u.eqeq, ot = u.eqeqeq, Ge = u.hash, tt = u.rb_ge, Ye = u.rb_plus, We = u.neqeq, st = u.thrower, L = u.rb_gt, je = u.rb_lt, k = u.gvars, Ze = u.to_a, nt = [], ee = u.nil, U = u.$$$;
    return u.add_stubs("new,target,attr_reader,nil?,<<,[],[]=,main,include?,strip,squeeze,gsub,!,empty?,rpartition,attr_accessor,catalog,delete,base_dir,options,merge,instance_variable_get,attributes,safe,compat_mode,outfilesuffix,sourcemap,path_resolver,converter,extensions,syntax_highlighter,each,end_with?,start_with?,slice,-,length,chop,==,downcase,===,extname,value_for_name,key?,freeze,attribute_undefined,attribute_missing,update,&,keys,name_for_value,expand_path,pwd,to_s,>=,+,abs,to_i,delete_if,update_doctype_attributes,cursor,parse,restore_attributes,update_backend_attributes,fetch,fill_datetime_attributes,activate,groups,create,to_proc,preprocessors?,preprocessors,process_method,tree_processors?,tree_processors,!=,counter,nil_or_empty?,attribute_locked?,nextval,value,save_to,increment_and_store_counter,register,tap,xreftext,>,source,source_lines,doctitle,sectname=,title=,first_section,title,reftext,<,find,context,header?,assign_numeral,clear_playback_attributes,save_attributes,name,negate,rewind,replace,apply_attribute_value_subs,delete?,start,doctype,content_model,warn,logger,content,convert,postprocessors?,postprocessors,record,write,respond_to?,chomp,class,write_alternate_pages,map,split,resolve_docinfo_subs,normalize_system_path,read_asset,apply_subs,docinfo_processors?,join,concat,compact,docinfo_processors,object_id,inspect,size,private,=~,resolve_pass_subs,apply_header_subs,limit_bytesize,bytesize,valid_encoding?,byteslice,resolve_subs,utc,at,Integer,now,index,strftime,year,utc_offset,partition,create_converter,basebackend,filetype,htmlsyntax,derive_backend_traits,raise"), function(ze, Se) {
      var Ie = se(ze, "Asciidoctor"), Ae = [Ie].concat(Se), de = u.$r(Ae);
      return function(Ee, te, G) {
        var B = re(Ee, te, "Document"), le = [B].concat(G), oe = u.$r(le), he = B.$$prototype;
        return he.attributes = he.safe = he.sourcemap = he.reader = he.base_dir = he.parsed = he.parent_document = he.extensions = he.options = he.counters = he.catalog = he.reftexts = he.next_section_index = he.header = he.blocks = he.header_attributes = he.attributes_modified = he.backend = he.attribute_overrides = he.timings = he.converter = he.outfilesuffix = he.docinfo_processor_extensions = he.document = he.max_attribute_value_size = he.id = he.doctype = ee, W(le[0], "ImageReference", $e(U("Struct"), "new", ["target", "imagesdir"], function j() {
          var v = j.$$s == null ? this : j.$$s;
          return S(v, "to_s", "target");
        }, { $$s: B })), W(le[0], "Footnote", U("Struct").$new("index", "id", "text")), function(j, v) {
          var p = re(j, v, "AttributeEntry");
          return p.$attr_reader("name", "value", "negate"), Be(p, "$initialize", function(M, x, T) {
            var q = this;
            return T == null && (T = ee), q.name = M, q.value = x, q.negate = Z(T["$nil?"]()) ? x["$nil?"]() : T;
          }, -3), Be(p, "$save_to", function(M) {
            var x, T = this, q = ee;
            return (Z(q = M["$[]"]("attribute_entries")) ? q : (x = ["attribute_entries", []], $e(M, "[]=", x), x[x.length - 1]))["$<<"](T), T;
          });
        }(le[0], null), function(j, v, p) {
          var E = re(j, v, "Title"), M = [E].concat(p), x = u.$r(M), T = E.$$prototype;
          return T.subtitle = ee, E.$attr_reader("main"), S(E, "title", "main"), E.$attr_reader("subtitle"), E.$attr_reader("combined"), Be(E, "$initialize", function(K, me) {
            var ue, ye, Pe = this, Ve = ee, et = ee;
            return me == null && (me = V([], {})), Z(Pe.sanitized = me["$[]"]("sanitize")) && Z(K["$include?"]("<")) && (K = K.$gsub(x("XmlSanitizeRx"), "").$squeeze(" ").$strip()), Z((Ve = Z(et = me["$[]"]("separator")) ? et : ":")["$empty?"]()) || ke(K["$include?"](Ve = "" + Ve + " ")) ? (Pe.main = K, Pe.subtitle = ee) : (ye = K.$rpartition(Ve), ue = O(ye), Pe.main = ue[0] == null ? ee : ue[0], ue[1] == null || ue[1], Pe.subtitle = ue[2] == null ? ee : ue[2]), Pe.combined = K;
          }, -2), Be(E, "$sanitized?", Ke("sanitized")), Be(E, "$subtitle?", function() {
            var K = this;
            return !!Z(K.subtitle);
          }), Be(E, "$to_s", Ke("combined"));
        }(le[0], null, le), W(le[0], "Author", U("Struct").$new("name", "firstname", "middlename", "lastname", "initials", "email")), B.$attr_reader("safe"), B.$attr_reader("compat_mode"), B.$attr_reader("backend"), B.$attr_reader("doctype"), B.$attr_accessor("sourcemap"), B.$attr_reader("catalog"), S(B, "references", "catalog"), B.$attr_reader("counters"), B.$attr_reader("header"), B.$attr_reader("base_dir"), B.$attr_reader("options"), B.$attr_reader("outfilesuffix"), B.$attr_reader("parent_document"), B.$attr_reader("reader"), B.$attr_reader("path_resolver"), B.$attr_reader("converter"), B.$attr_reader("syntax_highlighter"), B.$attr_reader("extensions"), Be(B, "$initialize", function j(v, p) {
          var E, M, x, T;
          j.$$p;
          var q = this, K = ee, me = ee, ue = ee, ye = ee, Pe = ee, Ve = ee, et = ee, at = ee, rt = ee, ft = ee, _t = ee, ht = ee, pt = ee, vt = ee, Et = ee, Pt = ee, Nt = ee, Yt = ee;
          return j.$$p = null, v == null && (v = ee), p == null && (p = V([], {})), xe(q, He(q, "initialize", j, !1, !0), "initialize", [q, "document"], null), Z(K = p.$delete("parent")) ? (q.parent_document = K, Z(me = p["$[]"]("base_dir")) || p["$[]="]("base_dir", K.$base_dir()), Z(K.$options()["$[]"]("catalog_assets")) && p["$[]="]("catalog_assets", !0), Z(K.$options()["$[]"]("to_dir")) && p["$[]="]("to_dir", K.$options()["$[]"]("to_dir")), q.catalog = K.$catalog().$merge(V(["footnotes"], { footnotes: [] })), q.attribute_overrides = ue = K.$instance_variable_get("@attribute_overrides").$merge(K.$attributes()), ue.$delete("compat-mode"), ye = ue.$delete("doctype"), ue.$delete("notitle"), ue.$delete("showtitle"), ue.$delete("toc"), q.attributes["$[]="]("toc-placement", Z(me = ue.$delete("toc-placement")) ? me : "auto"), ue.$delete("toc-position"), q.safe = K.$safe(), Z(q.compat_mode = K.$compat_mode()) && q.attributes["$[]="]("compat-mode", ""), q.outfilesuffix = K.$outfilesuffix(), q.sourcemap = K.$sourcemap(), q.timings = ee, q.path_resolver = K.$path_resolver(), q.converter = K.$converter(), Pe = ee, q.extensions = K.$extensions(), q.syntax_highlighter = K.$syntax_highlighter()) : (q.parent_document = ee, q.catalog = V(["ids", "refs", "footnotes", "links", "images", "callouts", "includes"], { ids: V([], {}), refs: V([], {}), footnotes: [], links: [], images: [], callouts: oe("Callouts").$new(), includes: V([], {}) }), q.attribute_overrides = ue = V([], {}), $e(Z(me = p["$[]"]("attributes")) ? me : V([], {}), "each", [], function(Dt, Lt) {
            var Bt;
            return Dt == null && (Dt = ee), Lt == null && (Lt = ee), Z(Dt["$end_with?"]("@")) ? Z(Dt["$start_with?"]("!")) ? (Bt = [Dt.$slice(1, De(Dt.$length(), 2)), !1], Dt = Bt[0], Lt = Bt[1]) : Z(Dt["$end_with?"]("!@")) ? (Bt = [Dt.$slice(0, De(Dt.$length(), 2)), !1], Dt = Bt[0], Lt = Bt[1]) : (Bt = [Dt.$chop(), "" + Lt + "@"], Dt = Bt[0], Lt = Bt[1]) : Z(Dt["$start_with?"]("!")) ? (Bt = [Dt.$slice(1, Dt.$length()), Fe(Lt, "@") ? !1 : ee], Dt = Bt[0], Lt = Bt[1]) : Z(Dt["$end_with?"]("!")) && (Bt = [Dt.$chop(), Fe(Lt, "@") ? !1 : ee], Dt = Bt[0], Lt = Bt[1]), Bt = [Dt.$downcase(), Lt], $e(ue, "[]=", Bt), Bt[Bt.length - 1];
          }), ot(U("String"), Ve = p["$[]"]("to_file")) && ue["$[]="]("outfilesuffix", oe("Helpers").$extname(Ve)), ke(et = p["$[]"]("safe")) ? q.safe = U(oe("SafeMode"), "SECURE") : ot(U("Integer"), et) ? q.safe = et : q.safe = function() {
            try {
              return oe("SafeMode").$value_for_name(et);
            } catch (Ft) {
              if (u.rescue(Ft, [oe("StandardError")]))
                try {
                  return U(oe("SafeMode"), "SECURE");
                } finally {
                  u.pop_exception();
                }
              else
                throw Ft;
            }
          }(), at = p.$delete("input_mtime"), q.compat_mode = ue["$key?"]("compat-mode"), q.sourcemap = p["$[]"]("sourcemap"), q.timings = p.$delete("timings"), q.path_resolver = oe("PathResolver").$new(), Pe = Z((E = U("::", "Asciidoctor", "skip_raise")) && U(E, "Extensions", "skip_raise") ? "constant" : ee) || Z(p["$key?"]("extensions")) ? U(U("Asciidoctor"), "Extensions") : ee, q.extensions = ee, Z(p["$key?"]("header_footer")) && ke(p["$key?"]("standalone")) && p["$[]="]("standalone", p["$[]"]("header_footer"))), q.parsed = q.reftexts = q.header = q.header_attributes = ee, q.counters = V([], {}), q.attributes_modified = U("Set").$new(), q.docinfo_processor_extensions = V([], {}), rt = p["$[]"]("standalone"), (q.options = p).$freeze(), ft = q.attributes, Z(K) || (ft["$[]="]("attribute-undefined", oe("Compliance").$attribute_undefined()), ft["$[]="]("attribute-missing", oe("Compliance").$attribute_missing()), ft.$update(oe("DEFAULT_ATTRIBUTES"))), Z(rt) ? (ue["$[]="]("embedded", ee), ft["$[]="]("copycss", ""), ft["$[]="]("iconfont-remote", ""), ft["$[]="]("stylesheet", ""), ft["$[]="]("webfonts", "")) : (ue["$[]="]("embedded", ""), Z(ue["$key?"]("showtitle")) && Fe(ue.$keys()["$&"](["notitle", "showtitle"])["$[]"](-1), "showtitle") ? ue["$[]="]("notitle", Ge(ee, "", !1, "@", "@", !1)["$[]"](ue["$[]"]("showtitle"))) : Z(ue["$key?"]("notitle")) ? ue["$[]="]("showtitle", Ge(ee, "", !1, "@", "@", !1)["$[]"](ue["$[]"]("notitle"))) : ft["$[]="]("notitle", "")), ue["$[]="]("asciidoctor", ""), ue["$[]="]("asciidoctor-version", U(U("Asciidoctor"), "VERSION")), ue["$[]="]("safe-mode-name", _t = oe("SafeMode").$name_for_value(q.safe)), ue["$[]="]("safe-mode-" + _t, ""), ue["$[]="]("safe-mode-level", q.safe), Z(me = ue["$[]"]("max-include-depth")) || ue["$[]="]("max-include-depth", 64), Z(me = ue["$[]"]("allow-uri-read")) || ue["$[]="]("allow-uri-read", ee), Z(ue["$key?"]("numbered")) && ue["$[]="]("sectnums", ue.$delete("numbered")), Z(ue["$key?"]("hardbreaks")) && ue["$[]="]("hardbreaks-option", ue.$delete("hardbreaks")), Z(ht = p["$[]"]("base_dir")) ? q.base_dir = (M = ["docdir", U("File").$expand_path(ht)], $e(ue, "[]=", M), M[M.length - 1]) : Z(ue["$[]"]("docdir")) ? q.base_dir = ue["$[]"]("docdir") : q.base_dir = (M = ["docdir", U("Dir").$pwd()], $e(ue, "[]=", M), M[M.length - 1]), Z(pt = p["$[]"]("backend")) && ue["$[]="]("backend", pt.$to_s()), Z(vt = p["$[]"]("doctype")) && ue["$[]="]("doctype", vt.$to_s()), Z(tt(q.safe, U(oe("SafeMode"), "SERVER"))) ? (Z(me = ue["$[]"]("copycss")) || ue["$[]="]("copycss", ee), Z(me = ue["$[]"]("source-highlighter")) || ue["$[]="]("source-highlighter", ee), Z(me = ue["$[]"]("backend")) || ue["$[]="]("backend", oe("DEFAULT_BACKEND")), ke(K) && Z(ue["$key?"]("docfile")) && ue["$[]="]("docfile", ue["$[]"]("docfile")["$[]"](u.Range.$new(Ye(ue["$[]"]("docdir").$length(), 1), -1, !1))), ue["$[]="]("docdir", ""), Z(me = ue["$[]"]("user-home")) || ue["$[]="]("user-home", "."), Z(tt(q.safe, U(oe("SafeMode"), "SECURE"))) && (Z(ue["$key?"]("max-attribute-value-size")) || ue["$[]="]("max-attribute-value-size", 4096), Z(ue["$key?"]("linkcss")) || ue["$[]="]("linkcss", ""), Z(me = ue["$[]"]("icons")) || ue["$[]="]("icons", ee))) : Z(me = ue["$[]"]("user-home")) || ue["$[]="]("user-home", oe("USER_HOME")), q.max_attribute_value_size = Z(Et = Z(me = ue["$[]"]("max-attribute-value-size")) ? me : (M = ["max-attribute-value-size", ee], $e(ue, "[]=", M), M[M.length - 1])) ? Et.$to_i().$abs() : ee, $e(ue, "delete_if", [], function(Dt, Lt) {
            var Bt, Xt = ee;
            return Dt == null && (Dt = ee), Lt == null && (Lt = ee), Z(Lt) ? (ot(U("String"), Lt) && Z(Lt["$end_with?"]("@")) && (Bt = [Lt.$chop(), !0], Lt = Bt[0], Xt = Bt[1]), ft["$[]="](Dt, Lt)) : (ft.$delete(Dt), Xt = Lt["$=="](!1)), Xt;
          }), Z(K) ? (q.backend = ft["$[]"]("backend"), Fe(q.doctype = (M = ["doctype", ye], $e(ft, "[]=", M), M[M.length - 1]), oe("DEFAULT_DOCTYPE")) || q.$update_doctype_attributes(oe("DEFAULT_DOCTYPE")), q.reader = oe("Reader").$new(v, p["$[]"]("cursor")), Z(q.sourcemap) && (q.source_location = q.reader.$cursor()), oe("Parser").$parse(q.reader, q), q.$restore_attributes(), q.parsed = !0) : (q.backend = ee, Fe(Pt = Z(me = ft["$[]"]("backend")) ? me : oe("DEFAULT_BACKEND"), "manpage") ? q.doctype = (M = ["doctype", (x = ["doctype", "manpage"], $e(ue, "[]=", x), x[x.length - 1])], $e(ft, "[]=", M), M[M.length - 1]) : q.doctype = Z(me = ft["$[]"]("doctype")) ? me : (M = ["doctype", oe("DEFAULT_DOCTYPE")], $e(ft, "[]=", M), M[M.length - 1]), q.$update_backend_attributes(Pt, !0), Z(me = ft["$[]"]("stylesdir")) || ft["$[]="]("stylesdir", "."), Z(me = ft["$[]"]("iconsdir")) || ft["$[]="]("iconsdir", "" + ft.$fetch("imagesdir", "./images") + "/icons"), q.$fill_datetime_attributes(ft, at), Z(Pe) && (Z(Nt = p["$[]"]("extension_registry")) ? (ot(U(oe("Extensions"), "Registry"), Nt) || Z((T = U("::", "AsciidoctorJ", "skip_raise")) && (x = U(T, "Extensions", "skip_raise")) && (M = U(x, "ExtensionRegistry", "skip_raise")) ? "constant" : ee) && ot(U(U(U("AsciidoctorJ"), "Extensions"), "ExtensionRegistry"), Nt)) && (q.extensions = Nt.$activate(q)) : Z((Yt = p["$[]"]("extensions"))["$nil?"]()) ? Z(oe("Extensions").$groups()["$empty?"]()) || (q.extensions = U(oe("Extensions"), "Registry").$new().$activate(q)) : ot(U("Proc"), Yt) && (q.extensions = $e(oe("Extensions"), "create", [], Yt.$to_proc()).$activate(q))), q.reader = oe("PreprocessorReader").$new(q, v, U(oe("Reader"), "Cursor").$new(ft["$[]"]("docfile"), q.base_dir), V(["normalize"], { normalize: !0 })), Z(q.sourcemap) ? q.source_location = q.reader.$cursor() : ee);
        }, -1), Be(B, "$parse", function(v) {
          var p = this, E = ee, M = ee;
          return v == null && (v = ee), Z(p.parsed) ? p : (E = p, Z(v) && (p.reader = oe("PreprocessorReader").$new(E, v, U(oe("Reader"), "Cursor").$new(p.attributes["$[]"]("docfile"), p.base_dir), V(["normalize"], { normalize: !0 })), Z(p.sourcemap) && (p.source_location = p.reader.$cursor())), Z(M = Z(p.parent_document) ? ee : p.extensions) && Z(M["$preprocessors?"]()) && $e(M.$preprocessors(), "each", [], function x(T) {
            var q = x.$$s == null ? this : x.$$s, K = ee;
            return q.reader == null && (q.reader = ee), T == null && (T = ee), q.reader = Z(K = T.$process_method()["$[]"](E, q.reader)) ? K : q.reader;
          }, { $$s: p }), oe("Parser").$parse(p.reader, E, V(["header_only"], { header_only: p.options["$[]"]("parse_header_only") })), p.$restore_attributes(), Z(M) && Z(M["$tree_processors?"]()) && $e(M.$tree_processors(), "each", [], function(T) {
            var q = ee;
            return T == null && (T = ee), Z(q = T.$process_method()["$[]"](E)) && ot(oe("Document"), q) && We(q, E) ? E = q : ee;
          }), p.parsed = !0, E);
        }, -1), Be(B, "$parsed?", Ke("parsed")), Be(B, "$counter", function(v, p) {
          var E, M = this, x = ee, T = ee, q = ee;
          return p == null && (p = ee), Z(M.parent_document) ? M.parent_document.$counter(v, p) : (Z(T = M["$attribute_locked?"](v)) && Z(x = M.counters["$[]"](v)) || ke((x = M.attributes["$[]"](v))["$nil_or_empty?"]()) ? q = (E = [v, oe("Helpers").$nextval(x)], $e(M.counters, "[]=", E), E[E.length - 1]) : Z(p) ? q = (E = [v, Fe(p, p.$to_i().$to_s()) ? p.$to_i() : p], $e(M.counters, "[]=", E), E[E.length - 1]) : q = (E = [v, 1], $e(M.counters, "[]=", E), E[E.length - 1]), Z(T) || M.attributes["$[]="](v, q), q);
        }, -2), Be(B, "$increment_and_store_counter", function(v, p) {
          var E = this;
          return oe("AttributeEntry").$new(v, E.$counter(v)).$save_to(p.$attributes()).$value();
        }), S(B, "counter_increment", "increment_and_store_counter"), Be(B, "$register", function(v, p) {
          var E = this, M = ee, x = ee, T = ee;
          switch (v) {
            case "ids":
              return E.$register("refs", [M = p["$[]"](0), oe("Inline").$new(E, "anchor", p["$[]"](1), V(["type", "id"], { type: "ref", id: M }))]);
            case "refs":
              return x = E.catalog["$[]"]("refs"), Z(x["$[]"](p["$[]"](0))) || x["$[]="](p["$[]"](0), T = p["$[]"](1)), T;
            case "footnotes":
              return E.catalog["$[]"](v)["$<<"](p);
            default:
              return Z(E.options["$[]"]("catalog_assets")) ? E.catalog["$[]"](v)["$<<"](Fe(v, "images") ? oe("ImageReference").$new(p, E.attributes["$[]"]("imagesdir")) : p) : ee;
          }
        }), Be(B, "$resolve_id", function(v) {
          var p = this, E = ee, M = ee;
          return Z(p.reftexts) ? p.reftexts["$[]"](v) : Z(p.parsed) ? $e(p.reftexts = V([], {}), "tap", [], function x(T) {
            var q = x.$$s == null ? this : x.$$s;
            return q.catalog == null && (q.catalog = ee), T == null && (T = ee), $e(q.catalog["$[]"]("refs"), "each", [], function(me, ue) {
              var ye, Pe = ee;
              return me == null && (me = ee), ue == null && (ue = ee), Z(Pe = T["$[]"](ue.$xreftext())) ? Pe : (ye = [ue.$xreftext(), me], $e(T, "[]=", ye), ye[ye.length - 1]);
            });
          }, { $$s: p })["$[]"](v) : (E = ee, p.reftexts = M = V([], {}), function() {
            try {
              var x = st("break");
              return $e(p.catalog["$[]"]("refs"), "each", [], function(q, K) {
                var me, ue = ee, ye = ee;
                return q == null && (q = ee), K == null && (K = ee), Fe(ue = K.$xreftext(), v) && (E = q, x.$throw()), Z(ye = M["$[]"](ue)) ? ye : (me = [ue, q], $e(M, "[]=", me), me[me.length - 1]);
              });
            } catch (T) {
              if (T === x)
                return T.$v;
              throw T;
            }
          }(), p.reftexts = ee, E);
        }), Be(B, "$sections?", function() {
          var v = this;
          return L(v.next_section_index, 0);
        }), Be(B, "$footnotes?", function() {
          var v = this;
          return !Z(v.catalog["$[]"]("footnotes")["$empty?"]());
        }), Be(B, "$footnotes", function() {
          var v = this;
          return v.catalog["$[]"]("footnotes");
        }), Be(B, "$callouts", function() {
          var v = this;
          return v.catalog["$[]"]("callouts");
        }), Be(B, "$nested?", function() {
          var v = this;
          return !!Z(v.parent_document);
        }), Be(B, "$embedded?", function() {
          var v = this;
          return v.attributes["$key?"]("embedded");
        }), Be(B, "$extensions?", function() {
          var v = this;
          return !!Z(v.extensions);
        }), Be(B, "$source", function() {
          var v = this;
          return Z(v.reader) ? v.reader.$source() : ee;
        }), Be(B, "$source_lines", function() {
          var v = this;
          return Z(v.reader) ? v.reader.$source_lines() : ee;
        }), Be(B, "$basebackend?", function(v) {
          var p = this;
          return p.attributes["$[]"]("basebackend")["$=="](v);
        }), Be(B, "$title", function() {
          var v = this;
          return v.$doctitle();
        }), Be(B, "$title=", function(v) {
          var p, E = this, M = ee;
          return Z(M = E.header) || (M = E.header = oe("Section").$new(E, 0))["$sectname="]("header"), p = [v], $e(M, "title=", p), p[p.length - 1];
        }), Be(B, "$doctitle", function(v) {
          var p = this, E = ee, M = ee, x = ee, T = ee;
          if (v == null && (v = V([], {})), !Z(E = p.attributes["$[]"]("title"))) {
            if (Z(M = p.$first_section()))
              E = M.$title();
            else if (ke(Z(x = v["$[]"]("use_fallback")) ? E = p.attributes["$[]"]("untitled-label") : x))
              return ee;
          }
          return Z(T = v["$[]"]("partition")) ? oe("Title").$new(E, v.$merge(V(["separator"], { separator: Fe(T, !0) ? p.attributes["$[]"]("title-separator") : T }))) : Z(v["$[]"]("sanitize")) && Z(E["$include?"]("<")) ? E.$gsub(oe("XmlSanitizeRx"), "").$squeeze(" ").$strip() : E;
        }, -1), S(B, "name", "doctitle"), Be(B, "$xreftext", function(v) {
          var p = this, E = ee;
          return Z(E = p.$reftext()) && ke(E["$empty?"]()) ? E : p.$title();
        }, -1), Be(B, "$author", function() {
          var v = this;
          return v.attributes["$[]"]("author");
        }), Be(B, "$authors", function() {
          var v = this, p = ee, E = ee, M = ee, x = ee, T = ee;
          if (Z((p = v.attributes)["$key?"]("author"))) {
            if (E = [oe("Author").$new(p["$[]"]("author"), p["$[]"]("firstname"), p["$[]"]("middlename"), p["$[]"]("lastname"), p["$[]"]("authorinitials"), p["$[]"]("email"))], Z(L(M = Z(x = p["$[]"]("authorcount")) ? x : 0, 1)))
              for (T = 1; Z(je(T, M)); )
                T = Ye(T, 1), E["$<<"](oe("Author").$new(p["$[]"]("author_" + T), p["$[]"]("firstname_" + T), p["$[]"]("middlename_" + T), p["$[]"]("lastname_" + T), p["$[]"]("authorinitials_" + T), p["$[]"]("email_" + T)));
            return E;
          } else
            return [];
        }), Be(B, "$revdate", function() {
          var v = this;
          return v.attributes["$[]"]("revdate");
        }), Be(B, "$notitle", function() {
          var v = this;
          return v.attributes["$key?"]("notitle");
        }), Be(B, "$noheader", function() {
          var v = this;
          return v.attributes["$key?"]("noheader");
        }), Be(B, "$nofooter", function() {
          var v = this;
          return v.attributes["$key?"]("nofooter");
        }), Be(B, "$first_section", function() {
          var v = this, p = ee;
          return Z(p = v.header) ? p : $e(v.blocks, "find", [], function(M) {
            return M == null && (M = ee), M.$context()["$=="]("section");
          });
        }), Be(B, "$header?", function() {
          var v = this;
          return !!Z(v.header);
        }), S(B, "has_header?", "header?"), Be(B, "$<<", function j(v) {
          var p = j.$$p || ee, E = this;
          return j.$$p = null, Fe(v.$context(), "section") && E.$assign_numeral(v), xe(E, He(E, "<<", j, !1, !0), "<<", [v], p);
        }), Be(B, "$finalize_header", function(v, p) {
          var E = this;
          return p == null && (p = !0), E.$clear_playback_attributes(v), E.$save_attributes(), Z(p) || v["$[]="]("invalid-header", !0), v;
        }, -2), Be(B, "$playback_attributes", function(v) {
          var p = this;
          return Z(v["$key?"]("attribute_entries")) ? $e(v["$[]"]("attribute_entries"), "each", [], function E(M) {
            var x = E.$$s == null ? this : E.$$s, T = ee;
            return x.attributes == null && (x.attributes = ee), M == null && (M = ee), T = M.$name(), Z(M.$negate()) ? (x.attributes.$delete(T), Fe(T, "compat-mode") ? x.compat_mode = !1 : ee) : (x.attributes["$[]="](T, M.$value()), Fe(T, "compat-mode") ? x.compat_mode = !0 : ee);
          }, { $$s: p }) : ee;
        }), Be(B, "$restore_attributes", function() {
          var v = this;
          return Z(v.parent_document) || v.catalog["$[]"]("callouts").$rewind(), v.attributes.$replace(v.header_attributes);
        }), Be(B, "$set_attribute", function(v, p) {
          var E = this, M = ee;
          if (p == null && (p = ""), Z(E["$attribute_locked?"](v)))
            return ee;
          if (Z(p["$empty?"]()) || (p = E.$apply_attribute_value_subs(p)), Z(E.header_attributes))
            E.attributes["$[]="](v, p);
          else {
            switch (v) {
              case "backend":
                E.$update_backend_attributes(p, Z(M = E.attributes_modified["$delete?"]("htmlsyntax")) ? p["$=="](E.backend) : M);
                break;
              case "doctype":
                E.$update_doctype_attributes(p);
                break;
              default:
                E.attributes["$[]="](v, p);
            }
            E.attributes_modified["$<<"](v);
          }
          return p;
        }, -2), Be(B, "$delete_attribute", function(v) {
          var p = this;
          return Z(p["$attribute_locked?"](v)) ? !1 : (p.attributes.$delete(v), p.attributes_modified["$<<"](v), !0);
        }), Be(B, "$attribute_locked?", function(v) {
          var p = this;
          return p.attribute_overrides["$key?"](v);
        }), Be(B, "$set_header_attribute", function(v, p, E) {
          var M = this, x = ee, T = ee;
          return p == null && (p = ""), E == null && (E = !0), x = Z(T = M.header_attributes) ? T : M.attributes, Fe(E, !1) && Z(x["$key?"](v)) ? !1 : (x["$[]="](v, p), !0);
        }, -2), Be(B, "$convert", function(v) {
          var p, E = this, M = ee, x = ee, T = ee, q = ee, K = ee;
          return v == null && (v = V([], {})), Z(E.timings) && E.timings.$start("convert"), Z(E.parsed) || E.$parse(), Z(tt(E.safe, U(oe("SafeMode"), "SERVER"))) || Z(v["$empty?"]()) || (Z((p = ["outfile", v["$[]"]("outfile")], $e(E.attributes, "[]=", p), p[p.length - 1])) || E.attributes.$delete("outfile"), Z((p = ["outdir", v["$[]"]("outdir")], $e(E.attributes, "[]=", p), p[p.length - 1])) || E.attributes.$delete("outdir")), Fe(E.$doctype(), "inline") ? Z(M = Z(x = E.blocks["$[]"](0)) ? x : E.header) && (Fe(M.$content_model(), "compound") || Fe(M.$content_model(), "empty") ? E.$logger().$warn("no inline candidate; use the inline doctype to convert a single paragragh, verbatim, or raw block") : T = M.$content()) : (Z(v["$key?"]("standalone")) ? q = Z(v["$[]"]("standalone")) ? "document" : "embedded" : Z(v["$key?"]("header_footer")) ? q = Z(v["$[]"]("header_footer")) ? "document" : "embedded" : q = Z(E.options["$[]"]("standalone")) ? "document" : "embedded", T = E.converter.$convert(E, q)), Z(E.parent_document) || Z(K = E.extensions) && Z(K["$postprocessors?"]()) && $e(K.$postprocessors(), "each", [], function me(ue) {
            var ye = me.$$s == null ? this : me.$$s;
            return ue == null && (ue = ee), T = ue.$process_method()["$[]"](ye, T);
          }, { $$s: E }), Z(E.timings) && E.timings.$record("convert"), T;
        }, -1), S(B, "render", "convert"), Be(B, "$write", function(v, p) {
          var E = this;
          return Z(E.timings) && E.timings.$start("write"), ot(oe("Writer"), E.converter) ? E.converter.$write(v, p) : (Z(p["$respond_to?"]("write")) ? Z(v["$nil_or_empty?"]()) || (p.$write(v.$chomp()), p.$write(oe("LF"))) : U("File").$write(p, v, V(["mode"], { mode: oe("FILE_WRITE_MODE") })), Fe(E.backend, "manpage") && ot(U("String"), p) && Z(E.converter.$class()["$respond_to?"]("write_alternate_pages")) && E.converter.$class().$write_alternate_pages(E.attributes["$[]"]("mannames"), E.attributes["$[]"]("manvolnum"), p)), Z(E.timings) && E.timings.$record("write"), ee;
        }), Be(B, "$content", function j() {
          var v = j.$$p || ee, p = this;
          return j.$$p = null, p.attributes.$delete("title"), xe(p, He(p, "content", j, !1, !0), "content", [], v);
        }), Be(B, "$docinfo", function(v, p) {
          var E, M = this, x = ee, T = ee, q = ee, K = ee, me = ee, ue = ee, ye = ee, Pe = ee, Ve = ee, et = ee;
          return v == null && (v = "head"), p == null && (p = ee), Z(je(M.$safe(), U(oe("SafeMode"), "SECURE"))) && (Fe(v, "head") || (x = "-" + v), p = Z(T = p) ? T : M.outfilesuffix, Z((q = M.attributes["$[]"]("docinfo"))["$nil_or_empty?"]()) ? Z(M.attributes["$key?"]("docinfo2")) ? q = ["private", "shared"] : Z(M.attributes["$key?"]("docinfo1")) ? q = ["shared"] : q = Z(q) ? ["private"] : ee : q = $e(q.$split(","), "map", [], function(rt) {
            return rt == null && (rt = ee), rt.$strip();
          }), Z(q) && (K = [], E = ["docinfo" + x + p, M.attributes["$[]"]("docinfodir"), M.$resolve_docinfo_subs()], me = E[0], ue = E[1], ye = E[2], Z(q["$&"](["shared", "shared-" + v])["$empty?"]()) || (Pe = M.$normalize_system_path(me, ue), Z(Ve = M.$read_asset(Pe, V(["normalize"], { normalize: !0 }))) && K["$<<"](M.$apply_subs(Ve, ye))), Z(M.attributes["$[]"]("docname")["$nil_or_empty?"]()) || Z(q["$&"](["private", "private-" + v])["$empty?"]()) || (Pe = M.$normalize_system_path("" + M.attributes["$[]"]("docname") + "-" + me, ue), Z(et = M.$read_asset(Pe, V(["normalize"], { normalize: !0 }))) && K["$<<"](M.$apply_subs(et, ye))))), Z(M.extensions) && Z(M["$docinfo_processors?"](v)) ? (Z(T = K) ? T : []).$concat($e(M.docinfo_processor_extensions["$[]"](v), "map", [], function at(rt) {
            var ft = at.$$s == null ? this : at.$$s;
            return rt == null && (rt = ee), rt.$process_method()["$[]"](ft);
          }, { $$s: M }).$compact()).$join(oe("LF")) : Z(K) ? K.$join(oe("LF")) : "";
        }, -1), Be(B, "$docinfo_processors?", function(v) {
          var p, E = this;
          return v == null && (v = "head"), Z(E.docinfo_processor_extensions["$key?"](v)) ? E.docinfo_processor_extensions["$[]"](v)["$!="](!1) : Z(E.extensions) && Z(E.document.$extensions()["$docinfo_processors?"](v)) ? (p = [v, E.document.$extensions().$docinfo_processors(v)], $e(E.docinfo_processor_extensions, "[]=", p), p[p.length - 1])["$!"]()["$!"]() : (p = [v, !1], $e(E.docinfo_processor_extensions, "[]=", p), p[p.length - 1]);
        }, -1), Be(B, "$to_s", function() {
          var v = this, p = ee;
          return "#<" + v.$class() + "@" + v.$object_id() + " {doctype: " + v.$doctype().$inspect() + ", doctitle: " + (Z(p = v.header) ? v.header.$title() : p).$inspect() + ", blocks: " + v.blocks.$size() + "}>";
        }), B.$private(), Be(B, "$apply_attribute_value_subs", function(v) {
          var p, E = this;
          return Z(oe("AttributeEntryPassMacroRx")["$=~"](v)) ? (v = (p = k["~"]) === ee ? ee : p["$[]"](2), Z((p = k["~"]) === ee ? ee : p["$[]"](1)) && (v = E.$apply_subs(v, E.$resolve_pass_subs((p = k["~"]) === ee ? ee : p["$[]"](1))))) : v = E.$apply_header_subs(v), Z(E.max_attribute_value_size) ? E.$limit_bytesize(v, E.max_attribute_value_size) : v;
        }), Be(B, "$limit_bytesize", function(v, p) {
          if (Z(L(v.$bytesize(), p)))
            for (; !Z((v = v.$byteslice(0, p))["$valid_encoding?"]()); )
              p = De(p, 1);
          return v;
        }), Be(B, "$resolve_docinfo_subs", function() {
          var v = this;
          return Z(v.attributes["$key?"]("docinfosubs")) ? v.$resolve_subs(v.attributes["$[]"]("docinfosubs"), "block", ee, "docinfo") : ["attributes"];
        }), Be(B, "$create_converter", function(v, p) {
          var E = this, M = ee, x = ee, T = ee, q = ee, K = ee;
          return M = V(["document", "htmlsyntax"], { document: E, htmlsyntax: E.attributes["$[]"]("htmlsyntax") }), Z(x = Z(T = (q = E.options)["$[]"]("template_dirs")) ? T : q["$[]"]("template_dir")) && (M["$[]="]("template_dirs", [].concat(Ze(x))), M["$[]="]("template_cache", q.$fetch("template_cache", !0)), M["$[]="]("template_engine", q["$[]"]("template_engine")), M["$[]="]("template_engine_options", q["$[]"]("template_engine_options")), M["$[]="]("eruby", q["$[]"]("eruby")), M["$[]="]("safe", E.safe), Z(p) && M["$[]="]("delegate_backend", p)), Z(K = q["$[]"]("converter")) ? U(oe("Converter"), "CustomFactory").$new(Ge(v, K)).$create(v, M) : q.$fetch("converter_factory", oe("Converter")).$create(v, M);
        }), Be(B, "$clear_playback_attributes", function(v) {
          return v.$delete("attribute_entries");
        }), Be(B, "$save_attributes", function() {
          var v = this, p = ee, E = ee, M = ee, x = ee, T = ee, q = ee, K = ee, me = ee, ue = ee, ye = ee, Pe = ee, Ve = ee, et = ee, at = ee;
          if (Z((E = v.attributes)["$key?"]("doctitle")) || ke(p = v.$doctitle()) || E["$[]="]("doctitle", p), v.id = Z(M = v.id) ? M : E["$[]"]("css-signature"), Z(x = Z(E.$delete("toc2")) ? "left" : E["$[]"]("toc")) && (T = Z(q = E.$fetch("toc-placement", "macro")) && We(q, "auto") ? q : E["$[]"]("toc-position"), !(Z(x["$empty?"]()) && Z(T["$nil_or_empty?"]())))) {
            switch (K = "left", me = "toc2", ue = Z(T["$nil_or_empty?"]()) ? Z(x["$empty?"]()) ? K : x : T, E["$[]="]("toc", ""), E["$[]="]("toc-placement", "auto"), ue) {
              case "left":
              case "<":
              case "&lt;":
                E["$[]="]("toc-position", "left");
                break;
              case "right":
              case ">":
              case "&gt;":
                E["$[]="]("toc-position", "right");
                break;
              case "top":
              case "^":
                E["$[]="]("toc-position", "top");
                break;
              case "bottom":
              case "v":
                E["$[]="]("toc-position", "bottom");
                break;
              case "preamble":
              case "macro":
                E["$[]="]("toc-position", "content"), E["$[]="]("toc-placement", ue), me = ee;
                break;
              default:
                E.$delete("toc-position"), me = ee;
            }
            Z(me) && (Z(M = E["$[]"]("toc-class")) || E["$[]="]("toc-class", me));
          }
          if (Z(ye = E["$[]"]("icons")) && ke(E["$key?"]("icontype")))
            switch (ye) {
              case "":
              case "font":
                break;
              default:
                E["$[]="]("icons", ""), Fe(ye, "image") || E["$[]="]("icontype", ye);
            }
          return Z(v.compat_mode = E["$key?"]("compat-mode")) && Z(E["$key?"]("language")) && E["$[]="]("source-language", E["$[]"]("language")), Z(v.parent_document) || (Fe(Pe = E["$[]"]("basebackend"), "html") ? Z(Ve = E["$[]"]("source-highlighter")) && ke(E["$[]"]("" + Ve + "-unavailable")) && (Z(et = v.options["$[]"]("syntax_highlighter_factory")) ? v.syntax_highlighter = et.$create(Ve, v.backend, V(["document"], { document: v })) : Z(at = v.options["$[]"]("syntax_highlighters")) ? v.syntax_highlighter = U(oe("SyntaxHighlighter"), "DefaultFactoryProxy").$new(at).$create(Ve, v.backend, V(["document"], { document: v })) : v.syntax_highlighter = oe("SyntaxHighlighter").$create(Ve, v.backend, V(["document"], { document: v }))) : Fe(Pe, "docbook") && (Z(v["$attribute_locked?"]("toc")) || Z(v.attributes_modified["$include?"]("toc")) || E["$[]="]("toc", ""), Z(v["$attribute_locked?"]("sectnums")) || Z(v.attributes_modified["$include?"]("sectnums")) || E["$[]="]("sectnums", "")), v.outfilesuffix = E["$[]"]("outfilesuffix"), $e(oe("FLEXIBLE_ATTRIBUTES"), "each", [], function rt(ft) {
            var _t = rt.$$s == null ? this : rt.$$s;
            return _t.attribute_overrides == null && (_t.attribute_overrides = ee), ft == null && (ft = ee), Z(_t.attribute_overrides["$key?"](ft)) && Z(_t.attribute_overrides["$[]"](ft)) ? _t.attribute_overrides.$delete(ft) : ee;
          }, { $$s: v })), v.header_attributes = E.$merge();
        }), Be(B, "$fill_datetime_attributes", function(v, p) {
          var E, M = this, x = ee, T = ee, q = ee, K = ee, me = ee, ue = ee, ye = ee, Pe = ee;
          return x = Z(U("ENV")["$key?"]("SOURCE_DATE_EPOCH")) ? T = U("Time").$at(M.$Integer(U("ENV")["$[]"]("SOURCE_DATE_EPOCH"))).$utc() : U("Time").$now(), Z(q = v["$[]"]("localdate")) ? Z(K = v["$[]"]("localyear")) || v["$[]="]("localyear", Fe(q.$index("-"), 4) ? q.$slice(0, 4) : ee) : (q = (E = ["localdate", x.$strftime("%F")], $e(v, "[]=", E), E[E.length - 1]), Z(K = v["$[]"]("localyear")) || v["$[]="]("localyear", x.$year().$to_s())), me = Z(K = v["$[]"]("localtime")) ? K : (E = ["localtime", x.$strftime("%T " + (Fe(x.$utc_offset(), 0) ? "UTC" : "%z"))], $e(v, "[]=", E), E[E.length - 1]), Z(K = v["$[]"]("localdatetime")) || v["$[]="]("localdatetime", "" + q + " " + me), p = Z(K = Z(ue = T) ? ue : p) ? K : x, Z(ye = v["$[]"]("docdate")) ? Z(K = v["$[]"]("docyear")) || v["$[]="]("docyear", Fe(ye.$index("-"), 4) ? ye.$slice(0, 4) : ee) : (ye = (E = ["docdate", p.$strftime("%F")], $e(v, "[]=", E), E[E.length - 1]), Z(K = v["$[]"]("docyear")) || v["$[]="]("docyear", p.$year().$to_s())), Pe = Z(K = v["$[]"]("doctime")) ? K : (E = ["doctime", p.$strftime("%T " + (Fe(p.$utc_offset(), 0) ? "UTC" : "%z"))], $e(v, "[]=", E), E[E.length - 1]), Z(K = v["$[]"]("docdatetime")) || v["$[]="]("docdatetime", "" + ye + " " + Pe), ee;
        }), Be(B, "$update_backend_attributes", function(v, p) {
          var E, M, x = this, T = ee, q = ee, K = ee, me = ee, ue = ee, ye = ee, Pe = ee, Ve = ee, et = ee, at = ee, rt = ee, ft = ee, _t = ee, ht = ee;
          return p == null && (p = ee), Z(p) || We(v, x.backend) ? (T = x.backend, q = (K = x.attributes)["$[]"]("basebackend"), me = x.doctype, Z(v["$include?"](":")) && (M = v.$partition(":"), E = O(M), ue = E[0] == null ? ee : E[0], E[1] == null || E[1], v = E[2] == null ? ee : E[2]), Z(v["$start_with?"]("xhtml")) ? (K["$[]="]("htmlsyntax", "xml"), v = v.$slice(1, v.$length())) : Z(v["$start_with?"]("html")) && (Z(ye = K["$[]"]("htmlsyntax")) || K["$[]="]("htmlsyntax", "html")), v = Z(ye = oe("BACKEND_ALIASES")["$[]"](v)) ? ye : v, Z(ue) && (E = [ue, v], v = E[0], Pe = E[1]), Z(me) ? (Z(T) && (K.$delete("backend-" + T), K.$delete("backend-" + T + "-doctype-" + me)), K["$[]="]("backend-" + v + "-doctype-" + me, ""), K["$[]="]("doctype-" + me, "")) : Z(T) && K.$delete("backend-" + T), K["$[]="]("backend-" + v, ""), x.backend = (E = ["backend", v], $e(K, "[]=", E), E[E.length - 1]), ot(U(oe("Converter"), "BackendTraits"), Ve = x.$create_converter(v, Pe)) ? (et = Ve.$basebackend(), at = Ve.$filetype(), Z(rt = Ve.$htmlsyntax()) && K["$[]="]("htmlsyntax", rt), Z(p) ? Z(ye = K["$[]"]("outfilesuffix")) || K["$[]="]("outfilesuffix", Ve.$outfilesuffix()) : Z(x["$attribute_locked?"]("outfilesuffix")) || K["$[]="]("outfilesuffix", Ve.$outfilesuffix())) : Z(Ve) ? (ft = oe("Converter").$derive_backend_traits(v), et = ft["$[]"]("basebackend"), at = ft["$[]"]("filetype"), Z(p) ? Z(ye = K["$[]"]("outfilesuffix")) || K["$[]="]("outfilesuffix", ft["$[]"]("outfilesuffix")) : Z(x["$attribute_locked?"]("outfilesuffix")) || K["$[]="]("outfilesuffix", ft["$[]"]("outfilesuffix"))) : x.$raise(U("NotImplementedError"), "asciidoctor: FAILED: missing converter for backend '" + v + "'. Processing aborted."), x.converter = Ve, Z(_t = K["$[]"]("filetype")) && K.$delete("filetype-" + _t), K["$[]="]("filetype", at), K["$[]="]("filetype-" + at, ""), Z(ht = oe("DEFAULT_PAGE_WIDTHS")["$[]"](et)) ? K["$[]="]("pagewidth", ht) : K.$delete("pagewidth"), We(et, q) && (Z(me) ? (Z(q) && (K.$delete("basebackend-" + q), K.$delete("basebackend-" + q + "-doctype-" + me)), K["$[]="]("basebackend-" + et + "-doctype-" + me, "")) : Z(q) && K.$delete("basebackend-" + q), K["$[]="]("basebackend-" + et, ""), K["$[]="]("basebackend", et)), v) : ee;
        }, -2), Be(B, "$update_doctype_attributes", function(v) {
          var p, E = this, M = ee, x = ee, T = ee, q = ee;
          return Z(v) && We(v, E.doctype) ? (p = [E.backend, (M = E.attributes)["$[]"]("basebackend"), E.doctype], x = p[0], T = p[1], q = p[2], Z(q) ? (M.$delete("doctype-" + q), Z(x) && (M.$delete("backend-" + x + "-doctype-" + q), M["$[]="]("backend-" + x + "-doctype-" + v, "")), Z(T) && (M.$delete("basebackend-" + T + "-doctype-" + q), M["$[]="]("basebackend-" + T + "-doctype-" + v, ""))) : (Z(x) && M["$[]="]("backend-" + x + "-doctype-" + v, ""), Z(T) && M["$[]="]("basebackend-" + T + "-doctype-" + v, "")), M["$[]="]("doctype-" + v, ""), E.doctype = (p = ["doctype", v], $e(M, "[]=", p), p[p.length - 1])) : ee;
        });
      }(Ae[0], de("AbstractBlock"), Ae);
    }(nt[0], nt);
  }, Opal.modules["asciidoctor/inline"] = function(u) {
    var se = u.module, re = u.klass, W = u.hash2, $e = u.send2, S = u.find_super, Z = u.def, Be = u.return_val, V = u.alias, ke = u.truthy, O = [], Ke = u.nil;
    return u.add_stubs("attr_accessor,attr_reader,[],convert,converter,attr,==,apply_reftext_subs,reftext"), function(xe, He) {
      var De = se(xe, "Asciidoctor"), Fe = [De].concat(He), ot = u.$r(Fe);
      return function(Ge, tt) {
        var Ye = re(Ge, tt, "Inline"), We = Ye.$$prototype;
        return We.text = We.type = Ke, Ye.$attr_accessor("text"), Ye.$attr_reader("type"), Ye.$attr_accessor("target"), Z(Ye, "$initialize", function st(L, je, k, Ze) {
          st.$$p;
          var nt = this;
          return st.$$p = null, k == null && (k = Ke), Ze == null && (Ze = W([], {})), $e(nt, S(nt, "initialize", st, !1, !0), "initialize", [L, je, Ze], null), nt.node_name = "inline_" + je, nt.text = k, nt.id = Ze["$[]"]("id"), nt.type = Ze["$[]"]("type"), nt.target = Ze["$[]"]("target");
        }, -3), Z(Ye, "$block?", Be(!1)), Z(Ye, "$inline?", Be(!0)), Z(Ye, "$convert", function() {
          var L = this;
          return L.$converter().$convert(L);
        }), V(Ye, "render", "convert"), Z(Ye, "$alt", function() {
          var L = this, je = Ke;
          return ke(je = L.$attr("alt")) ? je : "";
        }), Z(Ye, "$reftext?", function() {
          var L = this, je = Ke, k = Ke;
          return ke(je = L.text) ? ke(k = L.type["$=="]("ref")) ? k : L.type["$=="]("bibref") : je;
        }), Z(Ye, "$reftext", function() {
          var L = this, je = Ke;
          return ke(je = L.text) ? L.$apply_reftext_subs(je) : Ke;
        }), Z(Ye, "$xreftext", function(L) {
          var je = this;
          return je.$reftext();
        }, -1);
      }(Fe[0], ot("AbstractNode"));
    }(O[0], O);
  }, Opal.modules["asciidoctor/list"] = function(u) {
    var se = u.module, re = u.klass, W = u.alias, $e = u.hash2, S = u.send2, Z = u.find_super, Be = u.def, V = u.truthy, ke = u.eqeq, O = [], Ke = u.nil;
    return u.add_stubs("blocks,blocks?,==,next_list,callouts,convert,class,object_id,inspect,size,items,parent,attr_accessor,level,drop,nil_or_empty?,apply_subs,attr_writer,empty?,===,[],outline?,!,simple?,source,shift,context"), function(xe, He) {
      var De = se(xe, "Asciidoctor"), Fe = [De].concat(He), ot = u.$r(Fe);
      return function(Ge, tt) {
        var Ye = re(Ge, tt, "List"), We = Ye.$$prototype;
        return We.context = We.document = We.style = Ke, W(Ye, "items", "blocks"), W(Ye, "content", "blocks"), W(Ye, "items?", "blocks?"), Be(Ye, "$initialize", function st(L, je, k) {
          var Ze = st.$$p || Ke, nt = this;
          return st.$$p = null, k == null && (k = $e([], {})), S(nt, Z(nt, "initialize", st, !1, !0), "initialize", [L, je, k], Ze);
        }, -3), Be(Ye, "$outline?", function() {
          var L = this, je = Ke;
          return V(je = L.context["$=="]("ulist")) ? je : L.context["$=="]("olist");
        }), Be(Ye, "$convert", function st() {
          var L = st.$$p || Ke, je = this, k = Ke;
          return st.$$p = null, ke(je.context, "colist") ? (k = S(je, Z(je, "convert", st, !1, !0), "convert", [], L), je.document.$callouts().$next_list(), k) : S(je, Z(je, "convert", st, !1, !0), "convert", [], L);
        }), W(Ye, "render", "convert"), Be(Ye, "$to_s", function() {
          var L = this;
          return "#<" + L.$class() + "@" + L.$object_id() + " {context: " + L.context.$inspect() + ", style: " + L.style.$inspect() + ", items: " + L.$items().$size() + "}>";
        });
      }(Fe[0], ot("AbstractBlock")), function(Ge, tt, Ye) {
        var We = re(Ge, tt, "ListItem"), st = [We].concat(Ye), L = u.$r(st), je = We.$$prototype;
        return je.text = je.subs = je.blocks = Ke, W(We, "list", "parent"), We.$attr_accessor("marker"), Be(We, "$initialize", function k(Ze, nt) {
          k.$$p;
          var ee = this;
          return k.$$p = null, nt == null && (nt = Ke), S(ee, Z(ee, "initialize", k, !1, !0), "initialize", [Ze, "list_item"], null), ee.text = nt, ee.level = Ze.$level(), ee.subs = L("NORMAL_SUBS").$drop(0);
        }, -2), Be(We, "$text?", function() {
          var Ze = this;
          return !V(Ze.text["$nil_or_empty?"]());
        }), Be(We, "$text", function() {
          var Ze = this, nt = Ke;
          return V(nt = Ze.text) ? Ze.$apply_subs(Ze.text, Ze.subs) : nt;
        }), We.$attr_writer("text"), Be(We, "$simple?", function() {
          var Ze = this, nt = Ke, ee = Ke, U = Ke, ze = Ke;
          return V(nt = Ze.blocks["$empty?"]()) ? nt : V(ee = V(U = Ze.blocks.$size()["$=="](1)) ? L("List")["$==="](ze = Ze.blocks["$[]"](0)) : U) ? ze["$outline?"]() : ee;
        }), Be(We, "$compound?", function() {
          var Ze = this;
          return Ze["$simple?"]()["$!"]();
        }), Be(We, "$fold_first", function() {
          var Ze = this;
          return Ze.text = V(Ze.text["$nil_or_empty?"]()) ? Ze.blocks.$shift().$source() : "" + Ze.text + L("LF") + Ze.blocks.$shift().$source(), Ke;
        }), Be(We, "$to_s", function() {
          var Ze = this, nt = Ke;
          return "#<" + Ze.$class() + "@" + Ze.$object_id() + " {list_context: " + Ze.$parent().$context().$inspect() + ", text: " + Ze.text.$inspect() + ", blocks: " + (V(nt = Ze.blocks) ? nt : []).$size() + "}>";
        });
      }(Fe[0], ot("AbstractBlock"), Fe);
    }(O[0], O);
  }, Opal.modules["asciidoctor/parser"] = function(u) {
    var se = u.module, re = u.klass, W = u.const_set, $e = u.send, S = u.truthy, Z = u.hash2, Be = u.to_ary, V = u.defs, ke = u.eqeq, O = u.not, Ke = u.gvars, xe = u.neqeq, He = u.rb_plus, De = u.rb_lt, Fe = u.rb_gt, ot = u.to_a, Ge = u.eqeqeq, tt = u.rb_minus, Ye = u.rb_times, We = u.thrower, st = [], L = u.nil, je = u.$$$;
    return u.add_stubs("include,new,proc,start_with?,match?,is_delimited_block?,private_class_method,parse_document_header,[],has_more_lines?,next_section,assign_numeral,<<,blocks,skip_blank_lines,parse_block_metadata_lines,attributes,is_next_line_doctitle?,[]=,finalize_header,nil_or_empty?,title=,sourcemap,cursor,parse_section_title,id=,include?,sub_specialchars,sub_attributes,source_location=,header,attribute_locked?,id,clear,delete,instance_variable_get,parse_header_metadata,==,!,register,process_authors,update,doctype,parse_manpage_header,=~,downcase,error,logger,message_with_context,cursor_at_line,backend,save,is_next_line_section?,initialize_section,join,map,read_lines_until,lstrip,split,title,restore_save,discard_save,header?,empty?,context,!=,attr?,attr,key?,document,+,level,special,sectname,to_i,<,>,warn,next_block,blocks?,style,style=,parent=,content_model,content_model=,lines,subs,size,context=,shift,unwrap_standalone_preamble,source_location,merge,fetch,parse_block_metadata_line,extensions,block_macros?,mark,read_line,terminator,to_s,masq,to_sym,registered_for_block?,debug?,debug,cursor_at_mark,strict_verbatim_paragraphs,unshift_line,markdown_syntax,keys,chr,uniform?,length,end_with?,parse_attributes,attribute_missing,tr,basename,assign_caption,registered_for_block_macro?,config,process_method,replace,parse_callout_list,callouts,===,parse_list,parse_description_list,underline_style_section_titles,is_section_title?,peek_line,atx_section_title?,generate_id,level=,read_paragraph_lines,adjust_indentation!,map!,slice,pop,build_block,apply_subs,chop,catalog_inline_anchors,rekey,index,strip,-,parse_table,each,raise,title?,update_attributes,commit_subs,sub?,catalog_callouts,source,remove_sub,block_terminates_paragraph,to_proc,nil?,parse_blocks,parse_list_item,items,scan,gsub,count,advance,dup,match,callout_ids,next_list,catalog_inline_anchor,marker=,catalog_inline_biblio_anchor,set_option,text=,resolve_ordered_list_marker,read_lines_for_list_item,skip_line_comments,unshift_lines,fold_first,text?,is_sibling_list_item?,concat,find,casecmp,sectname=,special=,numbered=,numbered,lineno,peek_lines,setext_section_title?,abs,cursor_at_prev_line,process_attribute_entries,next_line_empty?,apply_header_subs,rstrip,each_with_index,compact,to_h,squeeze,to_a,parse_style_attribute,process_attribute_entry,skip_comment_lines,store_attribute,sanitize_attribute_name,set_attribute,save_to,delete_attribute,ord,int_to_roman,resolve_list_marker,parse_colspecs,create_columns,has_header_option=,format,starts_with_delimiter?,close_open_cell,parse_cellspec,delimiter,match_delimiter,pre_match,post_match,buffer_has_unclosed_quotes?,skip_past_delimiter,buffer=,buffer,skip_past_escaped_delimiter,keep_cell_open,push_cellspec,close_cell,cell_open?,columns,assign_column_widths,partition_header_footer,upto,partition,shorthand_property_syntax,each_char,yield_buffered_attribute,any?,*,each_byte,%"), function(k, Ze) {
      var nt = se(k, "Asciidoctor"), ee = [nt].concat(Ze);
      return function(U, ze, Se) {
        var Ie = re(U, ze, "Parser"), Ae = [Ie].concat(Se), de = u.$r(Ae);
        return Ie.$include(de("Logging")), W(Ae[0], "BlockMatchData", de("Struct").$new("context", "masq", "tip", "terminator")), W(Ae[0], "TAB", "	"), W(Ae[0], "TabIndentRx", /^\t+/), W(Ae[0], "StartOfBlockProc", $e(Ie, "proc", [], function Ee(te) {
          var G = Ee.$$s == null ? this : Ee.$$s, B = L, le = L;
          return te == null && (te = L), S(B = S(le = te["$start_with?"]("[")) ? de("BlockAttributeLineRx")["$match?"](te) : le) ? B : G["$is_delimited_block?"](te);
        }, { $$s: Ie })), W(Ae[0], "StartOfListProc", $e(Ie, "proc", [], function(te) {
          return te == null && (te = L), de("AnyListRx")["$match?"](te);
        })), W(Ae[0], "StartOfBlockOrListProc", $e(Ie, "proc", [], function Ee(te) {
          var G = Ee.$$s == null ? this : Ee.$$s, B = L, le = L, oe = L;
          return te == null && (te = L), S(B = S(le = G["$is_delimited_block?"](te)) ? le : S(oe = te["$start_with?"]("[")) ? de("BlockAttributeLineRx")["$match?"](te) : oe) ? B : de("AnyListRx")["$match?"](te);
        }, { $$s: Ie })), W(Ae[0], "NoOp", L), W(Ae[0], "AuthorKeys", ["author", "authorinitials", "firstname", "middlename", "lastname", "email"]), W(Ae[0], "TableCellHorzAlignments", Z(["<", ">", "^"], { "<": "left", ">": "right", "^": "center" })), W(Ae[0], "TableCellVertAlignments", Z(["<", ">", "^"], { "<": "top", ">": "bottom", "^": "middle" })), W(Ae[0], "TableCellStyles", Z(["d", "s", "e", "m", "h", "l", "a"], { d: "none", s: "strong", e: "emphasis", m: "monospaced", h: "header", l: "literal", a: "asciidoc" })), Ie.$private_class_method("new"), V(Ie, "$parse", function(te, G, B) {
          var le, oe, he = this, j = L, v = L, p = L;
          if (B == null && (B = Z([], {})), j = he.$parse_document_header(te, G, v = B["$[]"]("header_only")), !S(v))
            for (; S(te["$has_more_lines?"]()); )
              oe = he.$next_section(te, G, j), le = Be(oe), p = le[0] == null ? L : le[0], j = le[1] == null ? L : le[1], S(p) && (G.$assign_numeral(p), G.$blocks()["$<<"](p));
          return G;
        }, -3), V(Ie, "$parse_document_header", function(te, G, B) {
          var le, oe, he, j = this, v = L, p = L, E = L, M = L, x = L, T = L, q = L, K = L, me = L, ue = L, ye = L, Pe = L, Ve = L, et = L, at = L;
          return B == null && (B = !1), v = S(te.$skip_blank_lines()) ? j.$parse_block_metadata_lines(te, G) : Z([], {}), p = G.$attributes(), S(E = j["$is_next_line_doctitle?"](te, v, p["$[]"]("leveloffset"))) && S(v["$[]"]("title")) ? (p["$[]="]("authorcount", 0), G.$finalize_header(v, !1)) : (S((M = p["$[]"]("doctitle"))["$nil_or_empty?"]()) || G["$title="](x = M), S(E) ? (S(G.$sourcemap()) && (T = te.$cursor()), oe = j.$parse_section_title(te, G), le = Be(oe), he = [le[0] == null ? L : le[0]], $e(G, "id=", he), he[he.length - 1], le[1] == null || le[1], q = le[2] == null ? L : le[2], le[3] == null || le[3], K = le[4] == null ? L : le[4], S(x) ? q = L : (G["$title="](q), S((le = ["doctitle", x = G.$sub_specialchars(q)], $e(p, "[]=", le), le[le.length - 1])["$include?"](de("ATTR_REF_HEAD"))) && p["$[]="]("doctitle", x = G.$sub_attributes(x, Z(["attribute_missing"], { attribute_missing: "skip" })))), S(T) && G.$header()["$source_location="](T), S(K) || S(G["$attribute_locked?"]("compat-mode")) || p["$[]="]("compat-mode", ""), S(me = v["$[]"]("separator")) && (S(G["$attribute_locked?"]("title-separator")) || p["$[]="]("title-separator", me)), S(ue = v["$[]"]("id")) ? G["$id="](ue) : ue = G.$id(), S(ye = v["$[]"]("role")) && p["$[]="]("role", ye), S(Pe = v["$[]"]("reftext")) && p["$[]="]("reftext", Pe), v.$clear(), (Ve = G.$instance_variable_get("@attributes_modified")).$delete("doctitle"), j.$parse_header_metadata(te, G, L), S(Ve["$include?"]("doctitle")) ? S((M = p["$[]"]("doctitle"))["$nil_or_empty?"]()) || ke(M, x) ? p["$[]="]("doctitle", x) : G["$title="](M) : O(q) && Ve["$<<"]("doctitle"), S(ue) && G.$register("refs", [ue, G])) : S(et = p["$[]"]("author")) ? (at = j.$process_authors(et, !0, !1), S(p["$[]"]("authorinitials")) && at.$delete("authorinitials"), p.$update(at)) : S(et = p["$[]"]("authors")) ? (at = j.$process_authors(et, !0), p.$update(at)) : p["$[]="]("authorcount", 0), ke(G.$doctype(), "manpage") && j.$parse_manpage_header(te, G, v, B), G.$finalize_header(v));
        }, -3), V(Ie, "$parse_manpage_header", function(te, G, B, le) {
          var oe, he = this, j = L, v = L, p = L, E = L, M = L, x = L, T = L, q = L, K = L, me = L, ue = L, ye = L;
          return le == null && (le = !1), S(de("ManpageTitleVolnumRx")["$=~"]((j = G.$attributes())["$[]"]("doctitle"))) ? (j["$[]="]("manvolnum", v = (oe = Ke["~"]) === L ? L : oe["$[]"](2)), j["$[]="]("mantitle", (S((p = (oe = Ke["~"]) === L ? L : oe["$[]"](1))["$include?"](de("ATTR_REF_HEAD"))) ? G.$sub_attributes(p) : p).$downcase())) : (he.$logger().$error(he.$message_with_context("non-conforming manpage title", Z(["source_location"], { source_location: te.$cursor_at_line(1) }))), j["$[]="]("mantitle", S(E = S(M = j["$[]"]("doctitle")) ? M : j["$[]"]("docname")) ? E : "command"), j["$[]="]("manvolnum", v = "1")), S(x = j["$[]"]("manname")) && S(j["$[]"]("manpurpose")) ? (S(E = j["$[]"]("manname-title")) || j["$[]="]("manname-title", "Name"), j["$[]="]("mannames", [x]), ke(G.$backend(), "manpage") && (j["$[]="]("docname", x), j["$[]="]("outfilesuffix", "." + v))) : S(le) || (te.$skip_blank_lines(), te.$save(), B.$update(he.$parse_block_metadata_lines(te, G)), S(T = he["$is_next_line_section?"](te, Z([], {}))) ? ke(T, 1) ? (q = he.$initialize_section(te, G, Z([], {})), K = $e(te.$read_lines_until(Z(["break_on_blank_lines", "skip_line_comments"], { break_on_blank_lines: !0, skip_line_comments: !0 })), "map", [], function(Ve) {
            return Ve == null && (Ve = L), Ve.$lstrip();
          }).$join(" "), S(de("ManpageNamePurposeRx")["$=~"](K)) ? (S((x = (oe = Ke["~"]) === L ? L : oe["$[]"](1))["$include?"](de("ATTR_REF_HEAD"))) && (x = G.$sub_attributes(x)), S(x["$include?"](",")) ? x = (me = $e(x.$split(","), "map", [], function(Ve) {
            return Ve == null && (Ve = L), Ve.$lstrip();
          }))["$[]"](0) : me = [x], S((ue = (oe = Ke["~"]) === L ? L : oe["$[]"](2))["$include?"](de("ATTR_REF_HEAD"))) && (ue = G.$sub_attributes(ue)), S(E = j["$[]"]("manname-title")) || j["$[]="]("manname-title", q.$title()), S(q.$id()) && j["$[]="]("manname-id", q.$id()), j["$[]="]("manname", x), j["$[]="]("mannames", me), j["$[]="]("manpurpose", ue), ke(G.$backend(), "manpage") && (j["$[]="]("docname", x), j["$[]="]("outfilesuffix", "." + v))) : ye = "non-conforming name section body") : ye = "name section must be at level 1" : ye = "name section expected", S(ye) ? (te.$restore_save(), he.$logger().$error(he.$message_with_context(ye, Z(["source_location"], { source_location: te.$cursor() }))), j["$[]="]("manname", x = S(E = j["$[]"]("docname")) ? E : "command"), j["$[]="]("mannames", [x]), ke(G.$backend(), "manpage") && (j["$[]="]("docname", x), j["$[]="]("outfilesuffix", "." + v))) : te.$discard_save()), L;
        }, -4), V(Ie, "$next_section", function(te, G, B) {
          var le, oe, he = this, j = L, v = L, p = L, E = L, M = L, x = L, T = L, q = L, K = L, me = L, ue = L, ye = L, Pe = L, Ve = L, et = L, at = L, rt = L, ft = L, _t = L, ht = L;
          for (B == null && (B = Z([], {})), j = v = p = !1, ke(G.$context(), "document") && S(G.$blocks()["$empty?"]()) && (S(E = G["$header?"]()) || S(B.$delete("invalid-header")) || O(he["$is_next_line_section?"](te, B))) ? (M = (x = G).$doctype()["$=="]("book"), (S(E) || S(M) && xe(B["$[]"](1), "abstract")) && (j = v = de("Block").$new(G, "preamble", Z(["content_model"], { content_model: "compound" })), S(M) && S(G["$attr?"]("preface-title")) && j["$title="](G.$attr("preface-title")), G.$blocks()["$<<"](j)), T = G, q = 0, S(G.$attributes()["$key?"]("fragment")) ? K = -1 : S(M) ? (le = [1, 0], K = le[0], me = le[1]) : K = 1) : (M = (x = G.$document()).$doctype()["$=="]("book"), T = he.$initialize_section(te, G, B), B = S(ue = B["$[]"]("title")) ? Z(["title"], { title: ue }) : Z([], {}), K = He(q = T.$level(), 1), ke(q, 0) ? p = M : ke(q, 1) && S(T.$special()) && (ke(ye = T.$sectname(), "appendix") || ke(ye, "preface") || ke(ye, "abstract") || (K = L))), te.$skip_blank_lines(); S(te["$has_more_lines?"]()); ) {
            if (he.$parse_block_metadata_lines(te, x, B), S(Pe = he["$is_next_line_section?"](te, B)))
              if (S(x["$attr?"]("leveloffset")) && (Pe = He(Pe, x.$attr("leveloffset").$to_i()), S(De(Pe, 0)) && (Pe = 0)), S(Fe(Pe, q)))
                S(K) ? ke(Pe, K) || S(me) && ke(Pe, me) || S(De(K, 0)) || (Ve = S(me) ? "expected levels " + me + " or " + K : "expected level " + K, he.$logger().$warn(he.$message_with_context("section title out of sequence: " + Ve + ", got level " + Pe, Z(["source_location"], { source_location: te.$cursor() })))) : he.$logger().$error(he.$message_with_context("" + ye + " sections do not support nested sections", Z(["source_location"], { source_location: te.$cursor() }))), oe = he.$next_section(te, T, B), le = Be(oe), et = le[0] == null ? L : le[0], B = le[1] == null ? L : le[1], T.$assign_numeral(et), T.$blocks()["$<<"](et);
              else if (ke(Pe, 0) && ke(T, x))
                S(M) || he.$logger().$error(he.$message_with_context("level 0 sections can only be used when doctype is book", Z(["source_location"], { source_location: te.$cursor() }))), oe = he.$next_section(te, T, B), le = Be(oe), et = le[0] == null ? L : le[0], B = le[1] == null ? L : le[1], T.$assign_numeral(et), T.$blocks()["$<<"](et);
              else
                break;
            else
              at = te.$cursor(), S(rt = he.$next_block(te, S(ft = v) ? ft : T, B, Z(["parse_metadata"], { parse_metadata: !1 }))) && (S(p) && (O(T["$blocks?"]()) ? xe(rt.$style(), "partintro") ? ke(rt.$style(), "open") && ke(rt.$context(), "open") ? rt["$style="]("partintro") : (rt["$parent="](v = de("Block").$new(T, "open", Z(["content_model"], { content_model: "compound" }))), v["$style="]("partintro"), T.$blocks()["$<<"](v)) : ke(rt.$content_model(), "simple") && (rt["$content_model="]("compound"), rt["$<<"](de("Block").$new(rt, "paragraph", Z(["source", "subs"], { source: rt.$lines(), subs: rt.$subs() }))), rt.$lines().$clear(), rt.$subs().$clear()) : ke(T.$blocks().$size(), 1) && (_t = T.$blocks()["$[]"](0), O(v) && ke(_t.$content_model(), "compound") ? he.$logger().$error(he.$message_with_context("illegal block content outside of partintro block", Z(["source_location"], { source_location: at }))) : xe(_t.$content_model(), "compound") && (rt["$parent="](v = de("Block").$new(T, "open", Z(["content_model"], { content_model: "compound" }))), ke(_t.$style(), (le = ["partintro"], $e(v, "style=", le), le[le.length - 1])) && (_t["$context="]("paragraph"), _t["$style="](L)), T.$blocks().$shift(), v["$<<"](_t), T.$blocks()["$<<"](v)))), (S(ft = v) ? ft : T).$blocks()["$<<"](rt), B.$clear());
            if (!S(ft = te.$skip_blank_lines()))
              break;
          }
          if (S(p))
            S(T["$blocks?"]()) && ke(T.$blocks()["$[]"](-1).$context(), "section") || he.$logger().$error(he.$message_with_context("invalid part, must have at least one section (e.g., chapter, appendix, etc.)", Z(["source_location"], { source_location: te.$cursor() })));
          else if (S(j))
            if (S(j["$blocks?"]()))
              if (S(M) || S(x.$blocks()["$[]"](1)) || O(de("Compliance").$unwrap_standalone_preamble()))
                S(x.$sourcemap()) && j["$source_location="](j.$blocks()["$[]"](0).$source_location());
              else
                for (x.$blocks().$shift(); S(ht = j.$blocks().$shift()); )
                  x["$<<"](ht);
            else
              x.$blocks().$shift();
          return [ke(T, G) ? L : T, B.$merge()];
        }, -3), V(Ie, "$next_block", function(te, G, B, le) {
          var oe, he, j = this, v = L, p = L, E = L, M = L, x = L, T = L, q = L, K = L, me = L, ue = L, ye = L, Pe = L, Ve = L, et = L, at = L, rt = L, ft = L, _t = L, ht = L, pt = L, vt = L, Et = L, Pt = L, Nt = L, Yt = L, Ft = L, Dt = L, Lt = L, Bt = L, Xt = L, Jr = L, yr = L, qt = L, Mt = L, Ut = L, fr = L, It = L, sr = L, Ar = L, pr = L, cr = L, en = L, br = L, Lr = L, Ts = L, Cs = L, Fc = L, ws = L, Bc = L;
          if (Ke["~"] == null && (Ke["~"] = L), B == null && (B = Z([], {})), le == null && (le = Z([], {})), !S(v = te.$skip_blank_lines()))
            return L;
          if (S(p = le["$[]"]("text_only")) && S(Fe(v, 0)) && (le.$delete("text_only"), p = L), E = G.$document(), S(le.$fetch("parse_metadata", !0))) {
            for (; S(j.$parse_block_metadata_line(te, E, B, le)); )
              if (te.$shift(), !S(M = te.$skip_blank_lines()))
                return L;
          }
          if (S(x = E.$extensions()) && (oe = [x["$blocks?"](), x["$block_macros?"]()], T = oe[0], q = oe[1]), te.$mark(), oe = [te.$read_line(), E.$attributes(), B["$[]"](1)], K = oe[0], me = oe[1], ue = oe[2], ye = Pe = Ve = et = L, S(at = j["$is_delimited_block?"](K, !0)) && (Pe = Ve = at.$context(), et = at.$terminator(), S(ue) ? ke(ue, Pe.$to_s()) || (S(at.$masq()["$include?"](ue)) ? Pe = ue.$to_sym() : S(at.$masq()["$include?"]("admonition")) && S(de("ADMONITION_STYLES")["$include?"](ue)) ? Pe = "admonition" : S(T) && S(x["$registered_for_block?"](ue, Pe)) ? Pe = ue.$to_sym() : (S(j.$logger()["$debug?"]()) && j.$logger().$debug(j.$message_with_context("unknown style for " + Pe + " block: " + ue, Z(["source_location"], { source_location: te.$cursor_at_mark() }))), ue = Pe.$to_s())) : ue = (oe = ["style", Pe.$to_s()], $e(B, "[]=", oe), oe[oe.length - 1])), !S(at))
            for (; S(!0); ) {
              if (S(ue) && S(de("Compliance").$strict_verbatim_paragraphs()) && S(de("VERBATIM_STYLES")["$include?"](ue))) {
                Pe = ue.$to_sym(), te.$unshift_line(K);
                break;
              }
              if (S(p))
                rt = K["$start_with?"](" ", de("TAB"));
              else if (ft = de("Compliance").$markdown_syntax(), S(K["$start_with?"](" "))) {
                if (oe = [!0, " "], rt = oe[0], _t = oe[1], S(ft) && S($e(K.$lstrip(), "start_with?", ot(de("MARKDOWN_THEMATIC_BREAK_CHARS").$keys()))) && S(de("MarkdownThematicBreakRx")["$match?"](K))) {
                  ye = de("Block").$new(G, "thematic_break", Z(["content_model"], { content_model: "empty" }));
                  break;
                }
              } else if (S(K["$start_with?"](de("TAB"))))
                oe = [!0, de("TAB")], rt = oe[0], _t = oe[1];
              else if (oe = [!1, K.$chr()], rt = oe[0], _t = oe[1], ht = S(ft) ? de("HYBRID_LAYOUT_BREAK_CHARS") : de("LAYOUT_BREAK_CHARS"), S(ht["$key?"](_t)) && S(S(ft) ? de("ExtLayoutBreakRx")["$match?"](K) : S(M = j["$uniform?"](K, _t, pt = K.$length())) ? Fe(pt, 2) : M)) {
                ye = de("Block").$new(G, ht["$[]"](_t), Z(["content_model"], { content_model: "empty" }));
                break;
              } else if (S(K["$end_with?"]("]")) && S(K["$include?"]("::"))) {
                if ((ke(_t, "i") || S(K["$start_with?"]("video:", "audio:"))) && S(de("BlockMediaMacroRx")["$=~"](K))) {
                  if (oe = [((he = Ke["~"]) === L ? L : he["$[]"](1)).$to_sym(), (he = Ke["~"]) === L ? L : he["$[]"](2), (he = Ke["~"]) === L ? L : he["$[]"](3)], vt = oe[0], Et = oe[1], Pt = oe[2], ye = de("Block").$new(G, vt, Z(["content_model"], { content_model: "empty" })), S(Pt)) {
                    switch (vt) {
                      case "video":
                        Nt = ["poster", "width", "height"];
                        break;
                      case "audio":
                        Nt = [];
                        break;
                      default:
                        Nt = ["alt", "width", "height"];
                    }
                    ye.$parse_attributes(Pt, Nt, Z(["sub_input", "into"], { sub_input: !0, into: B }));
                  }
                  if (S(B["$key?"]("style")) && B.$delete("style"), S(Et["$include?"](de("ATTR_REF_HEAD")))) {
                    if (S((Yt = ye.$sub_attributes(Et))["$empty?"]()) && ke(S(M = me["$[]"]("attribute-missing")) ? M : de("Compliance").$attribute_missing(), "drop-line") && S(ye.$sub_attributes(He(Et, " "), Z(["attribute_missing", "drop_line_severity"], { attribute_missing: "drop-line", drop_line_severity: "ignore" }))["$empty?"]()))
                      return B.$clear(), L;
                    Et = Yt;
                  }
                  ke(vt, "image") && (E.$register("images", Et), B["$[]="]("imagesdir", me["$[]"]("imagesdir")), S(M = B["$[]"]("alt")) || B["$[]="]("alt", S(Ft = ue) ? Ft : (oe = ["default-alt", de("Helpers").$basename(Et, !0).$tr("_-", " ")], $e(B, "[]=", oe), oe[oe.length - 1])), S((Dt = B.$delete("scaledwidth"))["$nil_or_empty?"]()) || B["$[]="]("scaledwidth", S(de("TrailingDigitsRx")["$match?"](Dt)) ? "" + Dt + "%" : Dt), S(B["$[]"]("title")) && (ye["$title="](Lt = B.$delete("title")), ye.$assign_caption(B.$delete("caption"), "figure"))), B["$[]="]("target", Et);
                  break;
                } else if (ke(_t, "t") && S(K["$start_with?"]("toc:")) && S(de("BlockTocMacroRx")["$=~"](K))) {
                  ye = de("Block").$new(G, "toc", Z(["content_model"], { content_model: "empty" })), S((oe = Ke["~"]) === L ? L : oe["$[]"](1)) && ye.$parse_attributes((oe = Ke["~"]) === L ? L : oe["$[]"](1), [], Z(["into"], { into: B }));
                  break;
                } else if (S(S(q) ? S(M = S(Ft = de("CustomBlockMacroRx")["$=~"](K)) ? Bt = x["$registered_for_block_macro?"]((oe = Ke["~"]) === L ? L : oe["$[]"](1)) : Ft) ? M : Xt = j.$logger()["$debug?"]() : S(M = j.$logger()["$debug?"]()) ? Xt = de("CustomBlockMacroRx")["$=~"](K) : M))
                  if (S(Xt))
                    j.$logger().$debug(j.$message_with_context("unknown name for block macro: " + ((oe = Ke["~"]) === L ? L : oe["$[]"](1)), Z(["source_location"], { source_location: te.$cursor_at_mark() })));
                  else {
                    if (Jr = (oe = Ke["~"]) === L ? L : oe["$[]"](3), S((Et = (oe = Ke["~"]) === L ? L : oe["$[]"](2))["$include?"](de("ATTR_REF_HEAD")))) {
                      if (S((Yt = G.$sub_attributes(Et))["$empty?"]()) && ke(S(M = me["$[]"]("attribute-missing")) ? M : de("Compliance").$attribute_missing(), "drop-line") && S(G.$sub_attributes(He(Et, " "), Z(["attribute_missing", "drop_line_severity"], { attribute_missing: "drop-line", drop_line_severity: "ignore" }))["$empty?"]()))
                        return B.$clear(), L;
                      Et = Yt;
                    }
                    if (ke((yr = Bt.$config())["$[]"]("content_model"), "attributes") ? S(Jr) && E.$parse_attributes(Jr, S(M = S(Ft = yr["$[]"]("positional_attrs")) ? Ft : yr["$[]"]("pos_attrs")) ? M : [], Z(["sub_input", "into"], { sub_input: !0, into: B })) : B["$[]="]("text", S(M = Jr) ? M : ""), S(qt = yr["$[]"]("default_attrs")) && $e(B, "update", [qt], function(Vr, rs) {
                      return rs == null && (rs = L), rs;
                    }), S(ye = Bt.$process_method()["$[]"](G, Et, B)) && xe(ye, G)) {
                      B.$replace(ye.$attributes());
                      break;
                    } else
                      return B.$clear(), L;
                  }
              }
              if (O(rt) && ke(_t = S(M = _t) ? M : K.$chr(), "<") && S(de("CalloutListRx")["$=~"](K))) {
                te.$unshift_line(K), ye = j.$parse_callout_list(te, Ke["~"], G, E.$callouts()), B["$[]="]("style", "arabic");
                break;
              } else if (S(de("UnorderedListRx")["$match?"](K))) {
                te.$unshift_line(K), O(ue) && Ge(de("Section"), G) && ke(G.$sectname(), "bibliography") && B["$[]="]("style", ue = "bibliography"), ye = j.$parse_list(te, "ulist", G, ue);
                break;
              } else if (S(de("OrderedListRx")["$match?"](K))) {
                te.$unshift_line(K), ye = j.$parse_list(te, "olist", G, ue), S(ye.$style()) && B["$[]="]("style", ye.$style());
                break;
              } else if ((S(K["$include?"]("::")) || S(K["$include?"](";;"))) && S(de("DescriptionListRx")["$=~"](K))) {
                te.$unshift_line(K), ye = j.$parse_description_list(te, Ke["~"], G);
                break;
              } else if ((ke(ue, "float") || ke(ue, "discrete")) && S(S(de("Compliance").$underline_style_section_titles()) ? j["$is_section_title?"](K, te.$peek_line()) : S(M = rt["$!"]()) ? j["$atx_section_title?"](K) : M)) {
                te.$unshift_line(K), he = j.$parse_section_title(te, E, B["$[]"]("id")), oe = Be(he), Mt = oe[0] == null ? L : oe[0], Ut = oe[1] == null ? L : oe[1], Lt = oe[2] == null ? L : oe[2], fr = oe[3] == null ? L : oe[3], S(Ut) && B["$[]="]("reftext", Ut), ye = de("Block").$new(G, "floating_title", Z(["content_model"], { content_model: "empty" })), ye["$title="](Lt), B.$delete("title"), ye["$id="](S(M = Mt) ? M : S(me["$key?"]("sectids")) ? de("Section").$generate_id(ye.$title(), E) : L), ye["$level="](fr);
                break;
              } else if (S(ue) && xe(ue, "normal"))
                if (S(de("PARAGRAPH_STYLES")["$include?"](ue))) {
                  Pe = ue.$to_sym(), Ve = "paragraph", te.$unshift_line(K);
                  break;
                } else if (S(de("ADMONITION_STYLES")["$include?"](ue))) {
                  Pe = "admonition", Ve = "paragraph", te.$unshift_line(K);
                  break;
                } else if (S(T) && S(x["$registered_for_block?"](ue, "paragraph"))) {
                  Pe = ue.$to_sym(), Ve = "paragraph", te.$unshift_line(K);
                  break;
                } else
                  S(j.$logger()["$debug?"]()) && j.$logger().$debug(j.$message_with_context("unknown style for paragraph: " + ue, Z(["source_location"], { source_location: te.$cursor_at_mark() }))), ue = L;
              if (te.$unshift_line(K), S(rt) && O(ue))
                It = j.$read_paragraph_lines(te, sr = ke(v, 0) ? le["$[]"]("list_type") : L, Z(["skip_line_comments"], { skip_line_comments: p })), j["$adjust_indentation!"](It), S(p) || ke(sr, "dlist") ? ye = de("Block").$new(G, "paragraph", Z(["content_model", "source", "attributes"], { content_model: "simple", source: It, attributes: B })) : ye = de("Block").$new(G, "literal", Z(["content_model", "source", "attributes"], { content_model: "verbatim", source: It, attributes: B }));
              else {
                if (It = j.$read_paragraph_lines(te, S(M = v["$=="](0)) ? le["$[]"]("list_type") : M, Z(["skip_line_comments"], { skip_line_comments: !0 })), S(p))
                  S(rt) && ke(ue, "normal") && j["$adjust_indentation!"](It), ye = de("Block").$new(G, "paragraph", Z(["content_model", "source", "attributes"], { content_model: "simple", source: It, attributes: B }));
                else if (S(de("ADMONITION_STYLE_HEADS")["$include?"](_t)) && S(K["$include?"](":")) && S(de("AdmonitionParagraphRx")["$=~"](K)))
                  It["$[]="](0, (oe = Ke["~"]) === L ? L : oe.$post_match()), B["$[]="]("name", Ar = (oe = ["style", (he = Ke["~"]) === L ? L : he["$[]"](1)], $e(B, "[]=", oe), oe[oe.length - 1]).$downcase()), B["$[]="]("textlabel", S(M = B.$delete("caption")) ? M : me["$[]"]("" + Ar + "-caption")), ye = de("Block").$new(G, "admonition", Z(["content_model", "source", "attributes"], { content_model: "simple", source: It, attributes: B }));
                else if (S(ft) && ke(_t, ">") && S(K["$start_with?"]("> "))) {
                  if ($e(It, "map!", [], function(Vr) {
                    return Vr == null && (Vr = L), ke(Vr, ">") ? Vr.$slice(1, Vr.$length()) : S(Vr["$start_with?"]("> ")) ? Vr.$slice(2, Vr.$length()) : Vr;
                  }), S(It["$[]"](-1)["$start_with?"]("-- ")) && (pr = (pr = It.$pop()).$slice(3, pr.$length()), !S(It["$empty?"]())))
                    for (; S(It["$[]"](-1)["$empty?"]()); )
                      It.$pop();
                  B["$[]="]("style", "quote"), ye = j.$build_block("quote", "compound", !1, G, de("Reader").$new(It), B), S(pr) && (he = ye.$apply_subs(pr).$split(", ", 2), oe = Be(he), cr = oe[0] == null ? L : oe[0], en = oe[1] == null ? L : oe[1], S(cr) && B["$[]="]("attribution", cr), S(en) && B["$[]="]("citetitle", en));
                } else if (ke(_t, '"') && S(Fe(It.$size(), 1)) && S(It["$[]"](-1)["$start_with?"]("-- ")) && S(It["$[]"](-2)["$end_with?"]('"'))) {
                  for (It["$[]="](0, K.$slice(1, K.$length())), pr = (pr = It.$pop()).$slice(3, pr.$length()); S(It["$[]"](-1)["$empty?"]()); )
                    It.$pop();
                  It["$<<"](It.$pop().$chop()), B["$[]="]("style", "quote"), ye = de("Block").$new(G, "quote", Z(["content_model", "source", "attributes"], { content_model: "simple", source: It, attributes: B })), he = ye.$apply_subs(pr).$split(", ", 2), oe = Be(he), cr = oe[0] == null ? L : oe[0], en = oe[1] == null ? L : oe[1], S(cr) && B["$[]="]("attribution", cr), S(en) && B["$[]="]("citetitle", en);
                } else
                  S(rt) && ke(ue, "normal") && j["$adjust_indentation!"](It), ye = de("Block").$new(G, "paragraph", Z(["content_model", "source", "attributes"], { content_model: "simple", source: It, attributes: B }));
                j.$catalog_inline_anchors(It.$join(de("LF")), ye, E, te);
              }
              break;
            }
          if (!S(ye))
            switch (Pe) {
              case "listing":
              case "source":
                (ke(Pe, "source") || O(B["$[]"](1)) && S(br = S(Ft = B["$[]"](2)) ? Ft : me["$[]"]("source-language"))) && (S(br) ? (B["$[]="]("style", "source"), B["$[]="]("language", br), de("AttributeList").$rekey(B, [L, L, "linenums"])) : (de("AttributeList").$rekey(B, [L, "language", "linenums"]), S(B["$key?"]("language")) || S(me["$key?"]("source-language")) && B["$[]="]("language", me["$[]"]("source-language"))), S(B["$key?"]("linenums")) || (S(B["$[]"]("linenums-option")) || S(me["$[]"]("source-linenums-option"))) && B["$[]="]("linenums", ""), S(B["$key?"]("indent")) || S(me["$key?"]("source-indent")) && B["$[]="]("indent", me["$[]"]("source-indent"))), ye = j.$build_block("listing", "verbatim", et, G, te, B);
                break;
              case "fenced_code":
                B["$[]="]("style", "source"), S(Fe(pt = K.$length(), 3)) && (S(Lr = (br = K.$slice(3, pt)).$index(",")) ? S(Fe(Lr, 0)) ? (br = br.$slice(0, Lr).$strip(), S(De(Lr, tt(pt, 4))) && B["$[]="]("linenums", "")) : S(Fe(pt, 4)) && B["$[]="]("linenums", "") : br = br.$lstrip()), S(br["$nil_or_empty?"]()) ? S(me["$key?"]("source-language")) && B["$[]="]("language", me["$[]"]("source-language")) : B["$[]="]("language", br), S(B["$key?"]("linenums")) || (S(B["$[]"]("linenums-option")) || S(me["$[]"]("source-linenums-option"))) && B["$[]="]("linenums", ""), S(B["$key?"]("indent")) || S(me["$key?"]("source-indent")) && B["$[]="]("indent", me["$[]"]("source-indent")), et = et.$slice(0, 3), ye = j.$build_block("listing", "verbatim", et, G, te, B);
                break;
              case "table":
                Ts = te.$cursor(), Cs = de("Reader").$new(te.$read_lines_until(Z(["terminator", "skip_line_comments", "context", "cursor"], { terminator: et, skip_line_comments: !0, context: "table", cursor: "at_mark" })), Ts), S(et["$start_with?"]("|", "!")) || S(Ft = B["$[]"]("format")) || B["$[]="]("format", S(et["$start_with?"](",")) ? "csv" : "dsv"), ye = j.$parse_table(Cs, G, B);
                break;
              case "sidebar":
                ye = j.$build_block(Pe, "compound", et, G, te, B);
                break;
              case "admonition":
                B["$[]="]("name", Ar = ue.$downcase()), B["$[]="]("textlabel", S(Ft = B.$delete("caption")) ? Ft : me["$[]"]("" + Ar + "-caption")), ye = j.$build_block(Pe, "compound", et, G, te, B);
                break;
              case "open":
              case "abstract":
              case "partintro":
                ye = j.$build_block("open", "compound", et, G, te, B);
                break;
              case "literal":
                ye = j.$build_block(Pe, "verbatim", et, G, te, B);
                break;
              case "example":
                S(B["$[]"]("collapsible-option")) && B["$[]="]("caption", ""), ye = j.$build_block(Pe, "compound", et, G, te, B);
                break;
              case "quote":
              case "verse":
                de("AttributeList").$rekey(B, [L, "attribution", "citetitle"]), ye = j.$build_block(Pe, ke(Pe, "verse") ? "verbatim" : "compound", et, G, te, B);
                break;
              case "stem":
              case "latexmath":
              case "asciimath":
                ke(Pe, "stem") && B["$[]="]("style", de("STEM_TYPE_ALIASES")["$[]"](S(Ft = B["$[]"](2)) ? Ft : me["$[]"]("stem"))), ye = j.$build_block("stem", "raw", et, G, te, B);
                break;
              case "pass":
                ye = j.$build_block(Pe, "raw", et, G, te, B);
                break;
              case "comment":
                return j.$build_block(Pe, "skip", et, G, te, B), B.$clear(), L;
              default:
                if (S(T) && S(Bt = x["$registered_for_block?"](Pe, Ve))) {
                  if (ke(Fc = (yr = Bt.$config())["$[]"]("content_model"), "skip") || (S((ws = S(Ft = yr["$[]"]("positional_attrs")) ? Ft : yr["$[]"]("pos_attrs"))["$nil_or_empty?"]()) || de("AttributeList").$rekey(B, He([L], ws)), S(qt = yr["$[]"]("default_attrs")) && $e(qt, "each", [], function(Vr, rs) {
                    var Ha;
                    return Vr == null && (Vr = L), rs == null && (rs = L), S(Ft = B["$[]"](Vr)) ? Ft : (Ha = [Vr, rs], $e(B, "[]=", Ha), Ha[Ha.length - 1]);
                  }), B["$[]="]("cloaked-context", Ve)), !S(ye = j.$build_block(Pe, Fc, et, G, te, B, Z(["extension"], { extension: Bt }))))
                    return B.$clear(), L;
                } else
                  j.$raise("Unsupported block type " + Pe + " at " + te.$cursor());
            }
          return S(E.$sourcemap()) && ye["$source_location="](te.$cursor_at_mark()), S(B["$[]"]("title")) && (ye["$title="](Lt = B.$delete("title")), S(de("CAPTION_ATTRIBUTE_NAMES")["$[]"](ye.$context())) && ye.$assign_caption(B.$delete("caption"))), ye["$style="](B["$[]"]("style")), S(Bc = S(M = ye.$id()) ? M : (oe = [B["$[]"]("id")], $e(ye, "id=", oe), oe[oe.length - 1])) && (S(S(Lt) ? Lt["$include?"](de("ATTR_REF_HEAD")) : ye["$title?"]()) && ye.$title(), S(E.$register("refs", [Bc, ye])) || j.$logger().$warn(j.$message_with_context("id assigned to block already in use: " + Bc, Z(["source_location"], { source_location: te.$cursor_at_mark() })))), S(B["$empty?"]()) || ye.$update_attributes(B), ye.$commit_subs(), S(ye["$sub?"]("callouts")) && (S(j.$catalog_callouts(ye.$source(), E)) || ye.$remove_sub("callouts")), ye;
        }, -3), V(Ie, "$read_paragraph_lines", function(te, G, B) {
          var le = L;
          return B == null && (B = Z([], {})), B["$[]="]("break_on_blank_lines", !0), B["$[]="]("break_on_list_continuation", !0), B["$[]="]("preserve_last_line", !0), le = S(G) ? S(de("Compliance").$block_terminates_paragraph()) ? de("StartOfBlockOrListProc") : de("StartOfListProc") : S(de("Compliance").$block_terminates_paragraph()) ? de("StartOfBlockProc") : de("NoOp"), $e(te, "read_lines_until", [B], le.$to_proc());
        }, -3), V(Ie, "$is_delimited_block?", function(te, G) {
          var B, le, oe = this, he = L, j = L, v = L, p = L, E = L;
          if (G == null && (G = L), !(S(Fe(he = te.$length(), 1)) && S(de("DELIMITED_BLOCK_HEADS")["$[]"](te.$slice(0, 2)))))
            return L;
          if (ke(he, 2))
            j = te, v = 2;
          else if (S(De(he, 5)) ? (j = te, v = he) : j = te.$slice(0, v = 4), S(de("Compliance").$markdown_syntax()) && S(j["$start_with?"]("`"))) {
            if (ke(v, 4)) {
              if (ke(j, "````") || xe(j = j.$chop(), "```"))
                return L;
              te = j, he = v = 3;
            } else if (xe(j, "```"))
              return L;
          } else if (ke(v, 3))
            return L;
          return le = de("DELIMITED_BLOCKS")["$[]"](j), B = Be(le), p = B[0] == null ? L : B[0], E = B[1] == null ? L : B[1], S(p) && (ke(he, v) || S(oe["$uniform?"](te.$slice(1, he), de("DELIMITED_BLOCK_TAILS")["$[]"](j), tt(he, 1)))) ? S(G) ? de("BlockMatchData").$new(p, E, j, te) : !0 : L;
        }, -2), V(Ie, "$build_block", function(te, G, B, le, oe, he, j) {
          var v, p = this, E = L, M = L, x = L, T = L, q = L, K = L, me = L, ue = L, ye = L, Pe = L, Ve = L;
          switch (j == null && (j = Z([], {})), G) {
            case "skip":
              v = [!0, "simple"], E = v[0], M = v[1];
              break;
            case "raw":
              v = [!1, "simple"], E = v[0], M = v[1];
              break;
            default:
              v = [!1, G], E = v[0], M = v[1];
          }
          switch (S(B["$nil?"]()) ? (ke(M, "verbatim") ? x = oe.$read_lines_until(Z(["break_on_blank_lines", "break_on_list_continuation"], { break_on_blank_lines: !0, break_on_list_continuation: !0 })) : (ke(G, "compound") && (G = "simple"), x = p.$read_paragraph_lines(oe, !1, Z(["skip_line_comments", "skip_processing"], { skip_line_comments: !0, skip_processing: E }))), T = L) : xe(M, "compound") ? (x = oe.$read_lines_until(Z(["terminator", "skip_processing", "context", "cursor"], { terminator: B, skip_processing: E, context: te, cursor: "at_mark" })), T = L) : ke(B, !1) ? (x = L, T = oe) : (x = L, q = oe.$cursor(), T = de("Reader").$new(oe.$read_lines_until(Z(["terminator", "skip_processing", "context", "cursor"], { terminator: B, skip_processing: E, context: te, cursor: "at_mark" })), q)), G) {
            case "verbatim":
              K = (S(me = he["$[]"]("tabsize")) ? me : le.$document().$attributes()["$[]"]("tabsize")).$to_i(), S(ue = he["$[]"]("indent")) ? p["$adjust_indentation!"](x, ue.$to_i(), K) : S(Fe(K, 0)) && p["$adjust_indentation!"](x, -1, K);
              break;
            case "skip":
              return L;
          }
          if (S(ye = j["$[]"]("extension")))
            if (he.$delete("style"), S(Pe = ye.$process_method()["$[]"](le, S(Ve = T) ? Ve : de("Reader").$new(x), he.$merge())) && xe(Pe, le))
              he.$replace(Pe.$attributes()), ke(Pe.$content_model(), "compound") && Ge(de("Block"), Pe) && O((x = Pe.$lines())["$empty?"]()) && (G = "compound", T = de("Reader").$new(x));
            else
              return L;
          else
            Pe = de("Block").$new(le, te, Z(["content_model", "source", "attributes"], { content_model: G, source: x, attributes: he }));
          return ke(G, "compound") && p.$parse_blocks(T, Pe), Pe;
        }, -7), V(Ie, "$parse_blocks", function(te, G, B) {
          var le = this, oe = L, he = L, j = L;
          if (B == null && (B = L), S(B))
            for (; S(S(oe = S(he = j = le.$next_block(te, G, B.$merge())) ? G.$blocks()["$<<"](j) : he) ? oe : te["$has_more_lines?"]()); )
              ;
          else
            for (; S(S(oe = S(he = j = le.$next_block(te, G)) ? G.$blocks()["$<<"](j) : he) ? oe : te["$has_more_lines?"]()); )
              ;
          return L;
        }, -3), V(Ie, "$parse_list", function(te, G, B, le) {
          var oe, he = this, j = L, v = L, p = L, E = L;
          for (Ke["~"] == null && (Ke["~"] = L), j = de("List").$new(B, G), v = de("ListRxMap")["$[]"](G); S(S(p = te["$has_more_lines?"]()) ? v["$=~"](te.$peek_line()) : p) && (S(E = he.$parse_list_item(te, j, Ke["~"], (oe = Ke["~"]) === L ? L : oe["$[]"](1), le)) && j.$items()["$<<"](E), !!S(p = te.$skip_blank_lines())); )
            ;
          return j;
        }), V(Ie, "$catalog_callouts", function(te, G) {
          var B = L, le = L;
          return B = !1, le = 0, S(te["$include?"]("<")) && $e(te, "scan", [de("CalloutScanRx")], function() {
            var he;
            return S(((he = Ke["~"]) === L ? L : he["$[]"](0))["$start_with?"]("\\")) || G.$callouts().$register(ke((he = Ke["~"]) === L ? L : he["$[]"](2), ".") ? (le = He(le, 1)).$to_s() : (he = Ke["~"]) === L ? L : he["$[]"](2)), B = !0;
          }), B;
        }), V(Ie, "$catalog_inline_anchor", function(te, G, B, le, oe) {
          var he = this;
          return oe == null && (oe = B.$document()), S(G) && S(G["$include?"](de("ATTR_REF_HEAD"))) && (G = oe.$sub_attributes(G)), S(oe.$register("refs", [te, de("Inline").$new(B, "anchor", G, Z(["type", "id"], { type: "ref", id: te }))])) || (Ge(de("Reader"), le) && (le = le.$cursor()), he.$logger().$warn(he.$message_with_context("id assigned to anchor already in use: " + te, Z(["source_location"], { source_location: le })))), L;
        }, -5), V(Ie, "$catalog_inline_anchors", function(te, G, B, le) {
          var oe = this;
          return (S(te["$include?"]("[[")) || S(te["$include?"]("or:"))) && $e(te, "scan", [de("InlineAnchorScanRx")], function he() {
            var j, v = he.$$s == null ? this : he.$$s, p = L, E = L, M = L, x = L;
            if (S(p = (j = Ke["~"]) === L ? L : j["$[]"](1))) {
              if (S(E = (j = Ke["~"]) === L ? L : j["$[]"](2)) && S(E["$include?"](de("ATTR_REF_HEAD"))) && S((E = B.$sub_attributes(E))["$empty?"]()))
                return L;
            } else
              p = (j = Ke["~"]) === L ? L : j["$[]"](3), S(E = (j = Ke["~"]) === L ? L : j["$[]"](4)) && (S(E["$include?"]("]")) ? (E = E.$gsub("\\]", "]"), S(E["$include?"](de("ATTR_REF_HEAD"))) && (E = B.$sub_attributes(E))) : S(E["$include?"](de("ATTR_REF_HEAD"))) && S((E = B.$sub_attributes(E))["$empty?"]()) && (E = L));
            return S(B.$register("refs", [p, de("Inline").$new(G, "anchor", E, Z(["type", "id"], { type: "ref", id: p }))])) ? L : (M = le.$cursor_at_mark(), S(Fe(x = He(((j = Ke["~"]) === L ? L : j.$pre_match()).$count(de("LF")), S(((j = Ke["~"]) === L ? L : j["$[]"](0))["$start_with?"](de("LF"))) ? 1 : 0), 0)) && (M = M.$dup()).$advance(x), v.$logger().$warn(v.$message_with_context("id assigned to anchor already in use: " + p, Z(["source_location"], { source_location: M }))));
          }, { $$s: oe }), L;
        }), V(Ie, "$catalog_inline_biblio_anchor", function(te, G, B, le) {
          var oe = this, he = L;
          return S(B.$document().$register("refs", [te, de("Inline").$new(B, "anchor", S(he = G) ? "[" + G + "]" : he, Z(["type", "id"], { type: "bibref", id: te }))])) || oe.$logger().$warn(oe.$message_with_context("id assigned to bibliography anchor already in use: " + te, Z(["source_location"], { source_location: le.$cursor() }))), L;
        }), V(Ie, "$parse_description_list", function(te, G, B) {
          var le = this, oe = L, he = L, j = L, v = L, p = L;
          for (Ke["~"] == null && (Ke["~"] = L), oe = de("List").$new(B, "dlist"), he = de("DescriptionListSiblingRx")["$[]"](G["$[]"](2)), oe.$items()["$<<"](j = le.$parse_list_item(te, oe, G, he)); S(S(v = te["$has_more_lines?"]()) ? he["$=~"](te.$peek_line()) : v); )
            p = le.$parse_list_item(te, oe, Ke["~"], he), S(j["$[]"](1)) ? oe.$items()["$<<"](j = p) : (j["$[]"](0)["$<<"](p["$[]"](0)["$[]"](0)), j["$[]="](1, p["$[]"](1)));
          return oe;
        }), V(Ie, "$parse_callout_list", function(te, G, B, le) {
          var oe = this, he = L, j = L, v = L, p = L, E = L, M = L, x = L, T = L;
          for (he = de("List").$new(B, "colist"), j = 1, v = 0; S(S(p = G) ? p : S(E = G = de("CalloutListRx").$match(te.$peek_line())) ? te.$mark() : E); )
            ke(M = G["$[]"](1), ".") && (M = (v = He(v, 1)).$to_s()), ke(M, j.$to_s()) || oe.$logger().$warn(oe.$message_with_context("callout list item index: expected " + j + ", got " + M, Z(["source_location"], { source_location: te.$cursor_at_mark() }))), S(x = oe.$parse_list_item(te, he, G, "<1>")) && (he.$items()["$<<"](x), S((T = le.$callout_ids(he.$items().$size()))["$empty?"]()) ? oe.$logger().$warn(oe.$message_with_context("no callout found for <" + he.$items().$size() + ">", Z(["source_location"], { source_location: te.$cursor_at_mark() }))) : x.$attributes()["$[]="]("coids", T)), j = He(j, 1), G = L;
          return le.$next_list(), he;
        }), V(Ie, "$parse_list_item", function(te, G, B, le, oe) {
          var he, j, v = this, p = L, E = L, M = L, x = L, T = L, q = L, K = L, me = L, ue = L, ye = L, Pe = L, Ve = L, et = L, at = L, rt = L, ft = L, _t = L, ht = L, pt = L, vt = L;
          if (oe == null && (oe = L), ke(p = G.$context(), "dlist"))
            E = !0, M = de("ListItem").$new(G, x = B["$[]"](1)), S(x["$start_with?"]("[[")) && S(de("LeadingInlineAnchorRx")["$=~"](x)) && v.$catalog_inline_anchor((he = Ke["~"]) === L ? L : he["$[]"](1), S(T = (he = Ke["~"]) === L ? L : he["$[]"](2)) ? T : ((he = Ke["~"]) === L ? L : he.$post_match()).$lstrip(), M, te), S(q = B["$[]"](3)) && (K = !0), me = de("ListItem").$new(G, q), S(G.$document().$sourcemap()) && (M["$source_location="](te.$cursor()), S(K) ? me["$source_location="](M.$source_location()) : ue = !0);
          else
            switch (K = !0, me = de("ListItem").$new(G, q = B["$[]"](2)), S(G.$document().$sourcemap()) && me["$source_location="](te.$cursor()), p) {
              case "ulist":
                me["$marker="](le), S(q["$start_with?"]("[")) && (S(oe) && ke(oe, "bibliography") ? S(de("InlineBiblioAnchorRx")["$=~"](q)) && v.$catalog_inline_biblio_anchor((he = Ke["~"]) === L ? L : he["$[]"](1), (he = Ke["~"]) === L ? L : he["$[]"](2), me, te) : S(q["$start_with?"]("[[")) ? S(de("LeadingInlineAnchorRx")["$=~"](q)) && v.$catalog_inline_anchor((he = Ke["~"]) === L ? L : he["$[]"](1), (he = Ke["~"]) === L ? L : he["$[]"](2), me, te) : S(q["$start_with?"]("[ ] ", "[x] ", "[*] ")) && (G.$set_option("checklist"), me.$attributes()["$[]="]("checkbox", ""), S(q["$start_with?"]("[ ")) || me.$attributes()["$[]="]("checked", ""), me["$text="](q.$slice(4, q.$length()))));
                break;
              case "olist":
                j = v.$resolve_ordered_list_marker(le, ye = G.$items().$size(), !0, te), he = Be(j), le = he[0] == null ? L : he[0], Pe = he[1] == null ? L : he[1], me["$marker="](le), ke(ye, 0) && O(oe) && G["$style="](S(Ve = Pe) ? Ve : (S(et = de("ORDERED_LIST_STYLES")["$[]"](tt(le.$length(), 1))) ? et : "arabic").$to_s()), S(q["$start_with?"]("[[")) && S(de("LeadingInlineAnchorRx")["$=~"](q)) && v.$catalog_inline_anchor((he = Ke["~"]) === L ? L : he["$[]"](1), (he = Ke["~"]) === L ? L : he["$[]"](2), me, te);
                break;
              default:
                me["$marker="](le), S(q["$start_with?"]("[[")) && S(de("LeadingInlineAnchorRx")["$=~"](q)) && v.$catalog_inline_anchor((he = Ke["~"]) === L ? L : he["$[]"](1), (he = Ke["~"]) === L ? L : he["$[]"](2), me, te);
            }
          if (te.$shift(), at = te.$cursor(), rt = de("Reader").$new(v.$read_lines_for_list_item(te, p, le, K), at), S(rt["$has_more_lines?"]())) {
            for (S(ue) && me["$source_location="](at), ft = rt.$skip_line_comments(), S(_t = rt.$peek_line()) && (S(ft["$empty?"]()) || rt.$unshift_lines(ft), S(_t["$empty?"]()) || (ht = !0, S(E) || (K = L))), S(pt = v.$next_block(rt, me, Z([], {}), Z(["text_only", "list_type"], { text_only: S(K) ? L : !0, list_type: p }))) && me.$blocks()["$<<"](pt); S(rt["$has_more_lines?"]()); )
              S(pt = v.$next_block(rt, me, Z([], {}), Z(["list_type"], { list_type: p }))) && me.$blocks()["$<<"](pt);
            S(ht) && S(vt = me.$blocks()["$[]"](0)) && ke(vt.$context(), "paragraph") && me.$fold_first();
          }
          return S(E) ? [[M], S(me["$text?"]()) || S(me["$blocks?"]()) ? me : L] : me;
        }, -5), V(Ie, "$read_lines_for_list_item", function(te, G, B, le) {
          var oe, he = this, j = L, v = L, p = L, E = L, M = L, x = L, T = L, q = L, K = L, me = L, ue = L, ye = L, Pe = L, Ve = L, et = L;
          for (B == null && (B = L), le == null && (le = !0), j = [], v = "inactive", p = !1, E = L, M = G["$=="]("dlist"); S(te["$has_more_lines?"]()) && (x = te.$read_line(), !S(he["$is_sibling_list_item?"](x, G, B))); ) {
            if (T = S(j["$empty?"]()) ? L : j["$[]"](-1), ke(T, de("LIST_CONTINUATION")) && (ke(v, "inactive") && (v = "active", le = !0, S(p) || j["$[]="](-1, "")), ke(x, de("LIST_CONTINUATION")))) {
              xe(v, "frozen") && (v = "frozen", j["$<<"](x)), x = L;
              continue;
            }
            if (S(q = he["$is_delimited_block?"](x, !0))) {
              if (!ke(v, "active"))
                break;
              j["$<<"](x), j.$concat(te.$read_lines_until(Z(["terminator", "read_last_line", "context"], { terminator: q.$terminator(), read_last_line: !0, context: L }))), v = "inactive";
            } else if (S(M) && xe(v, "active") && S(x["$start_with?"]("[")) && S(de("BlockAttributeLineRx")["$match?"](x))) {
              for (K = [x]; S(me = te.$peek_line()); ) {
                if (S(he["$is_delimited_block?"](me)))
                  ue = !0;
                else if (S(me["$empty?"]()) || S(me["$start_with?"]("[")) && S(de("BlockAttributeLineRx")["$match?"](me))) {
                  K["$<<"](te.$read_line());
                  continue;
                } else
                  S(de("AnyListRx")["$match?"](me)) && O(he["$is_sibling_list_item?"](me, G, B)) ? j.$concat(K) : ue = !0;
                break;
              }
              if (S(ue)) {
                te.$unshift_lines(K);
                break;
              }
            } else if (ke(v, "active") && O(x["$empty?"]()))
              S(de("LiteralParagraphRx")["$match?"](x)) ? (te.$unshift_line(x), S(M) ? j.$concat($e(te, "read_lines_until", [Z(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], { preserve_last_line: !0, break_on_blank_lines: !0, break_on_list_continuation: !0 })], function at(rt) {
                var ft = at.$$s == null ? this : at.$$s;
                return rt == null && (rt = L), ft["$is_sibling_list_item?"](rt, G, B);
              }, { $$s: he })) : j.$concat(te.$read_lines_until(Z(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], { preserve_last_line: !0, break_on_blank_lines: !0, break_on_list_continuation: !0 }))), v = "inactive") : ke(ye = x.$chr(), ".") && S(de("BlockTitleRx")["$match?"](x)) || ke(ye, "[") && S(de("BlockAttributeLineRx")["$match?"](x)) || ke(ye, ":") && S(de("AttributeEntryRx")["$match?"](x)) ? j["$<<"](x) : (S(Pe = $e(S(p) ? ["dlist"] : de("NESTABLE_LIST_CONTEXTS"), "find", [], function(rt) {
                return rt == null && (rt = L), de("ListRxMap")["$[]"](rt)["$match?"](x);
              })) && (p = !0, ke(Pe, "dlist") && S(((oe = Ke["~"]) === L ? L : oe["$[]"](3))["$nil_or_empty?"]()) && (le = !1)), j["$<<"](x), v = "inactive");
            else if (S(T) && S(T["$empty?"]())) {
              if (S(x["$empty?"]()) && (!S(x = S(Ve = te.$skip_blank_lines()) ? te.$read_line() : Ve) || S(he["$is_sibling_list_item?"](x, G, B))))
                break;
              if (ke(x, de("LIST_CONTINUATION")))
                E = j.$size(), j["$<<"](x);
              else if (S(le)) {
                if (S(he["$is_sibling_list_item?"](x, G, B)))
                  break;
                if (S(Pe = $e(de("NESTABLE_LIST_CONTEXTS"), "find", [], function(rt) {
                  return rt == null && (rt = L), de("ListRxMap")["$[]"](rt)["$=~"](x);
                })))
                  j["$<<"](x), p = !0, ke(Pe, "dlist") && S(((oe = Ke["~"]) === L ? L : oe["$[]"](3))["$nil_or_empty?"]()) && (le = !1);
                else if (S(de("LiteralParagraphRx")["$match?"](x)))
                  te.$unshift_line(x), S(M) ? j.$concat($e(te, "read_lines_until", [Z(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], { preserve_last_line: !0, break_on_blank_lines: !0, break_on_list_continuation: !0 })], function at(rt) {
                    var ft = at.$$s == null ? this : at.$$s;
                    return rt == null && (rt = L), ft["$is_sibling_list_item?"](rt, G, B);
                  }, { $$s: he })) : j.$concat(te.$read_lines_until(Z(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], { preserve_last_line: !0, break_on_blank_lines: !0, break_on_list_continuation: !0 })));
                else
                  break;
              } else
                S(p) || j.$pop(), j["$<<"](x), le = !0;
            } else
              S(x["$empty?"]()) || (le = !0), S(Pe = $e(S(p) ? ["dlist"] : de("NESTABLE_LIST_CONTEXTS"), "find", [], function(rt) {
                return rt == null && (rt = L), de("ListRxMap")["$[]"](rt)["$=~"](x);
              })) && (p = !0, ke(Pe, "dlist") && S(((oe = Ke["~"]) === L ? L : oe["$[]"](3))["$nil_or_empty?"]()) && (le = !1)), j["$<<"](x);
            x = L;
          }
          for (S(x) && te.$unshift_line(x), S(E) && j["$[]="](E, ""); !S(j["$empty?"]()); )
            if (S((et = j["$[]"](-1))["$empty?"]()))
              j.$pop();
            else {
              ke(et, de("LIST_CONTINUATION")) && j.$pop();
              break;
            }
          return j;
        }, -3), V(Ie, "$initialize_section", function(te, G, B) {
          var le, oe, he = this, j = L, v = L, p = L, E = L, M = L, x = L, T = L, q = L, K = L, me = L, ue = L, ye = L, Pe = L, Ve = L, et = L, at = L, rt = L;
          return B == null && (B = Z([], {})), j = G.$document(), v = (p = j.$doctype())["$=="]("book"), S(j.$sourcemap()) && (E = te.$cursor()), M = B["$[]"](1), oe = he.$parse_section_title(te, j, B["$[]"]("id")), le = Be(oe), x = le[0] == null ? L : le[0], T = le[1] == null ? L : le[1], q = le[2] == null ? L : le[2], K = le[3] == null ? L : le[3], me = le[4] == null ? L : le[4], S(M) ? S(v) && ke(M, "abstract") ? (le = ["chapter", 1], ue = le[0], K = le[1]) : S(M["$start_with?"]("sect")) && S(de("SectionLevelStyleRx")["$match?"](M)) ? ue = "section" : (le = [M, !0], ue = le[0], ye = le[1], ke(K, 0) && (K = 1), Pe = ue["$=="]("appendix")) : S(v) ? ue = ke(K, 0) ? "part" : S(Fe(K, 1)) ? "section" : "chapter" : ke(p, "manpage") && ke(q.$casecmp("synopsis"), 0) ? (le = ["synopsis", !0], ue = le[0], ye = le[1]) : ue = "section", S(T) && B["$[]="]("reftext", T), Ve = de("Section").$new(G, K), le = [x, q, ue, E], oe = [le[0]], $e(Ve, "id=", oe), oe[oe.length - 1], oe = [le[1]], $e(Ve, "title=", oe), oe[oe.length - 1], oe = [le[2]], $e(Ve, "sectname=", oe), oe[oe.length - 1], oe = [le[3]], $e(Ve, "source_location=", oe), oe[oe.length - 1], S(ye) ? (Ve["$special="](!0), S(Pe) ? Ve["$numbered="](!0) : ke(j.$attributes()["$[]"]("sectnums"), "all") && Ve["$numbered="](S(v) && ke(K, 1) ? "chapter" : !0)) : S(j.$attributes()["$[]"]("sectnums")) && S(Fe(K, 0)) ? Ve["$numbered="](S(Ve.$special()) ? S(et = G.$numbered()) || et : !0) : S(v) && ke(K, 0) && S(j.$attributes()["$[]"]("partnums")) && Ve["$numbered="](!0), S(at = S(et = Ve.$id()) ? et : (le = [S(j.$attributes()["$key?"]("sectids")) ? rt = de("Section").$generate_id(Ve.$title(), j) : L], $e(Ve, "id=", le), le[le.length - 1])) && (S(rt) || O(q["$include?"](de("ATTR_REF_HEAD"))) || Ve.$title(), S(j.$register("refs", [at, Ve])) || he.$logger().$warn(he.$message_with_context("id assigned to section already in use: " + at, Z(["source_location"], { source_location: te.$cursor_at_line(tt(te.$lineno(), S(me) ? 1 : 2)) })))), Ve.$update_attributes(B), te.$skip_blank_lines(), Ve;
        }, -3), V(Ie, "$is_next_line_section?", function(te, G) {
          var B = this, le = L, oe = L, he = L;
          return S(le = G["$[]"](1)) && (ke(le, "discrete") || ke(le, "float")) ? L : S(de("Compliance").$underline_style_section_titles()) ? (oe = te.$peek_lines(2, S(he = le) ? le["$=="]("comment") : he), B["$is_section_title?"](S(he = oe["$[]"](0)) ? he : "", oe["$[]"](1))) : B["$atx_section_title?"](S(he = te.$peek_line()) ? he : "");
        }), V(Ie, "$is_next_line_doctitle?", function(te, G, B) {
          var le = this, oe = L, he = L;
          return S(B) ? S(oe = he = le["$is_next_line_section?"](te, G)) ? He(he, B.$to_i())["$=="](0) : oe : le["$is_next_line_section?"](te, G)["$=="](0);
        }), V(Ie, "$is_section_title?", function(te, G) {
          var B = this, le = L;
          return G == null && (G = L), S(le = B["$atx_section_title?"](te)) ? le : S(G["$nil_or_empty?"]()) ? L : B["$setext_section_title?"](te, G);
        }, -2), V(Ie, "$atx_section_title?", function(te) {
          var G, B = L;
          return S(S(de("Compliance").$markdown_syntax()) ? S(B = te["$start_with?"]("=", "#")) ? de("ExtAtxSectionTitleRx")["$=~"](te) : B : S(B = te["$start_with?"]("=")) ? de("AtxSectionTitleRx")["$=~"](te) : B) ? tt(((G = Ke["~"]) === L ? L : G["$[]"](1)).$length(), 1) : L;
        }), V(Ie, "$setext_section_title?", function(te, G) {
          var B = this, le = L, oe = L, he = L;
          return S(oe = de("SETEXT_SECTION_LEVELS")["$[]"](he = G.$chr())) && S(B["$uniform?"](G, he, le = G.$length())) && S(de("SetextSectionTitleRx")["$match?"](te)) && S(De(tt(te.$length(), le).$abs(), 2)) ? oe : L;
        }), V(Ie, "$parse_section_title", function(te, G, B) {
          var le, oe, he = this, j = L, v = L, p = L, E = L, M = L, x = L, T = L, q = L, K = L;
          return B == null && (B = L), j = L, v = te.$read_line(), S(S(de("Compliance").$markdown_syntax()) ? S(p = v["$start_with?"]("=", "#")) ? de("ExtAtxSectionTitleRx")["$=~"](v) : p : S(p = v["$start_with?"]("=")) ? de("AtxSectionTitleRx")["$=~"](v) : p) ? (le = [tt(((oe = Ke["~"]) === L ? L : oe["$[]"](1)).$length(), 1), (oe = Ke["~"]) === L ? L : oe["$[]"](2), !0], E = le[0], M = le[1], x = le[2], S(B) || S(M["$end_with?"]("]]")) && S(de("InlineSectionAnchorRx")["$=~"](M)) && O((le = Ke["~"]) === L ? L : le["$[]"](1)) && (le = [M.$slice(0, tt(M.$length(), ((oe = Ke["~"]) === L ? L : oe["$[]"](0)).$length())), (oe = Ke["~"]) === L ? L : oe["$[]"](2), (oe = Ke["~"]) === L ? L : oe["$[]"](3)], M = le[0], B = le[1], j = le[2])) : S(de("Compliance").$underline_style_section_titles()) && S(K = te.$peek_line(!0)) && S(E = de("SETEXT_SECTION_LEVELS")["$[]"](q = K.$chr())) && S(he["$uniform?"](K, q, T = K.$length())) && S(M = S(p = de("SetextSectionTitleRx")["$=~"](v)) ? (le = Ke["~"]) === L ? L : le["$[]"](1) : p) && S(De(tt(v.$length(), T).$abs(), 2)) ? (x = !1, S(B) || S(M["$end_with?"]("]]")) && S(de("InlineSectionAnchorRx")["$=~"](M)) && O((le = Ke["~"]) === L ? L : le["$[]"](1)) && (le = [M.$slice(0, tt(M.$length(), ((oe = Ke["~"]) === L ? L : oe["$[]"](0)).$length())), (oe = Ke["~"]) === L ? L : oe["$[]"](2), (oe = Ke["~"]) === L ? L : oe["$[]"](3)], M = le[0], B = le[1], j = le[2]), te.$shift()) : he.$raise("Unrecognized section at " + te.$cursor_at_prev_line()), S(G["$attr?"]("leveloffset")) && (E = He(E, G.$attr("leveloffset").$to_i()), S(De(E, 0)) && (E = 0)), [B, j, M, E, x];
        }, -3), V(Ie, "$parse_header_metadata", function(te, G, B) {
          var le, oe = this, he = L, j = L, v = L, p = L, E = L, M = L, x = L, T = L, q = L, K = L, me = L, ue = L, ye = L, Pe = L, Ve = L, et = L, at = L, rt = L, ft = L;
          if (G == null && (G = L), B == null && (B = !0), he = S(j = G) ? G.$attributes() : j, oe.$process_attribute_entries(te, G), S(te["$has_more_lines?"]()) && O(te["$next_line_empty?"]()) ? (v = (p = oe.$process_authors(te.$read_line())).$delete("authorcount"), S(G) && S(Fe((le = ["authorcount", v], $e(he, "[]=", le), le[le.length - 1]), 0)) && ($e(p, "each", [], function(ht, pt) {
            var vt;
            return ht == null && (ht = L), pt == null && (pt = L), S(he["$key?"](ht)) ? L : (vt = [ht, G.$apply_header_subs(pt)], $e(he, "[]=", vt), vt[vt.length - 1]);
          }), E = he["$[]"]("author"), M = he["$[]"]("authorinitials"), x = he["$[]"]("authors")), p["$[]="]("authorcount", v), oe.$process_attribute_entries(te, G), S(te["$has_more_lines?"]()) && O(te["$next_line_empty?"]()) && (T = te.$read_line(), S(q = de("RevisionInfoLineRx").$match(T)) ? (K = Z([], {}), S(q["$[]"](1)) && K["$[]="]("revnumber", q["$[]"](1).$rstrip()), S((me = q["$[]"](2).$strip())["$empty?"]()) || (O(q["$[]"](1)) && S(me["$start_with?"]("v")) ? K["$[]="]("revnumber", me.$slice(1, me.$length())) : K["$[]="]("revdate", me)), S(q["$[]"](3)) && K["$[]="]("revremark", q["$[]"](3).$rstrip()), S(G) && O(K["$empty?"]()) && $e(K, "each", [], function(ht, pt) {
            var vt;
            return ht == null && (ht = L), pt == null && (pt = L), S(he["$key?"](ht)) ? L : (vt = [ht, G.$apply_header_subs(pt)], $e(he, "[]=", vt), vt[vt.length - 1]);
          })) : te.$unshift_line(T)), oe.$process_attribute_entries(te, G), te.$skip_blank_lines()) : p = Z([], {}), S(G)) {
            if (S(he["$key?"]("author")) && xe(ue = he["$[]"]("author"), E))
              ye = oe.$process_authors(ue, !0, !1), xe(he["$[]"]("authorinitials"), M) && ye.$delete("authorinitials");
            else if (S(he["$key?"]("authors")) && xe(ue = he["$[]"]("authors"), x))
              ye = oe.$process_authors(ue, !0);
            else {
              for (le = [[], 1, "author_1", !1, !1], Pe = le[0], Ve = le[1], et = le[2], at = le[3], rt = le[4]; S(he["$key?"](et)); )
                ke(ft = he["$[]"](et), p["$[]"](et)) ? (Pe["$<<"](L), rt = !0) : (Pe["$<<"](ft), at = !0), et = "author_" + (Ve = He(Ve, 1));
              S(at) ? (S(rt) && $e(Pe, "each_with_index", [], function(ht, pt) {
                var vt, Et = L;
                return ht == null && (ht = L), pt == null && (pt = L), S(ht) ? L : (vt = [pt, $e([p["$[]"]("firstname_" + (Et = He(pt, 1))), p["$[]"]("middlename_" + Et), p["$[]"]("lastname_" + Et)].$compact(), "map", [], function(Nt) {
                  return Nt == null && (Nt = L), Nt.$tr(" ", "_");
                }).$join(" ")], $e(Pe, "[]=", vt), vt[vt.length - 1]);
              }), ye = oe.$process_authors(Pe, !0, !1)) : ye = Z(["authorcount"], { authorcount: 0 });
            }
            ke(ye["$[]"]("authorcount"), 0) ? S(v) ? ye = L : he["$[]="]("authorcount", 0) : (he.$update(ye), O(he["$key?"]("email")) && S(he["$key?"]("email_1")) && he["$[]="]("email", he["$[]"]("email_1")));
          }
          return S(B) ? p.$merge(K.$to_h(), ye.$to_h()) : L;
        }, -2), V(Ie, "$process_authors", function(te, G, B) {
          var le = L, oe = L;
          return G == null && (G = !1), B == null && (B = !0), le = Z([], {}), oe = 0, $e(S(B) && S(te["$include?"](";")) ? te.$split(de("AuthorDelimiterRx")) : [].concat(ot(te)), "each", [], function(j) {
            var v, p = L, E = L, M = L, x = L, T = L, q = L, K = L;
            return j == null && (j = L), S(j["$empty?"]()) ? L : (p = Z([], {}), ke(oe = He(oe, 1), 1) ? $e(de("AuthorKeys"), "each", [], function(ue) {
              var ye;
              return ue == null && (ue = L), ye = [ue.$to_sym(), ue], $e(p, "[]=", ye), ye[ye.length - 1];
            }) : $e(de("AuthorKeys"), "each", [], function(ue) {
              var ye;
              return ue == null && (ue = L), ye = [ue.$to_sym(), "" + ue + "_" + oe], $e(p, "[]=", ye), ye[ye.length - 1];
            }), S(G) ? (S(j["$include?"]("<")) && (le["$[]="](p["$[]"]("author"), j.$tr("_", " ")), j = j.$gsub(de("XmlSanitizeRx"), "")), ke((E = j.$split(L, 3)).$size(), 3) && E["$<<"](E.$pop().$squeeze(" "))) : S(M = de("AuthorInfoLineRx").$match(j)) && (E = M.$to_a()).$shift(), S(E) ? (x = (v = [p["$[]"]("firstname"), T = E["$[]"](0).$tr("_", " ")], $e(le, "[]=", v), v[v.length - 1]), le["$[]="](p["$[]"]("authorinitials"), T.$chr()), S(E["$[]"](1)) && (S(E["$[]"](2)) ? (le["$[]="](p["$[]"]("middlename"), q = E["$[]"](1).$tr("_", " ")), le["$[]="](p["$[]"]("lastname"), K = E["$[]"](2).$tr("_", " ")), x = He(He(He(He(T, " "), q), " "), K), le["$[]="](p["$[]"]("authorinitials"), "" + T.$chr() + q.$chr() + K.$chr())) : (le["$[]="](p["$[]"]("lastname"), K = E["$[]"](1).$tr("_", " ")), x = He(He(T, " "), K), le["$[]="](p["$[]"]("authorinitials"), "" + T.$chr() + K.$chr()))), S(le["$[]"](p["$[]"]("author"))) || le["$[]="](p["$[]"]("author"), x), S(G) || O(E["$[]"](3)) || le["$[]="](p["$[]"]("email"), E["$[]"](3))) : (le["$[]="](p["$[]"]("author"), (v = [p["$[]"]("firstname"), T = j.$squeeze(" ").$strip()], $e(le, "[]=", v), v[v.length - 1])), le["$[]="](p["$[]"]("authorinitials"), T.$chr())), ke(oe, 1) ? (v = ["authors", le["$[]"](p["$[]"]("author"))], $e(le, "[]=", v), v[v.length - 1]) : (ke(oe, 2) && $e(de("AuthorKeys"), "each", [], function(ue) {
              var ye;
              return ue == null && (ue = L), S(le["$key?"](ue)) ? (ye = ["" + ue + "_1", le["$[]"](ue)], $e(le, "[]=", ye), ye[ye.length - 1]) : L;
            }), v = ["authors", "" + le["$[]"]("authors") + ", " + le["$[]"](p["$[]"]("author"))], $e(le, "[]=", v), v[v.length - 1]));
          }), le["$[]="]("authorcount", oe), le;
        }, -2), V(Ie, "$parse_block_metadata_lines", function(te, G, B, le) {
          var oe = this;
          for (B == null && (B = Z([], {})), le == null && (le = Z([], {})); S(oe.$parse_block_metadata_line(te, G, B, le)) && (te.$shift(), !!S(te.$skip_blank_lines())); )
            ;
          return B;
        }, -3), V(Ie, "$parse_block_metadata_line", function(te, G, B, le) {
          var oe, he = this, j = L, v = L, p = L, E = L, M = L, x = L;
          if (Ke["~"] == null && (Ke["~"] = L), le == null && (le = Z([], {})), S(v = te.$peek_line()) && S(S(le["$[]"]("text_only")) ? v["$start_with?"]("[", "/") : j = v["$start_with?"]("[", ".", "/", ":"))) {
            if (S(v["$start_with?"]("["))) {
              if (S(v["$start_with?"]("[["))) {
                if (S(v["$end_with?"]("]]")) && S(de("BlockAnchorRx")["$=~"](v)))
                  return B["$[]="]("id", (oe = Ke["~"]) === L ? L : oe["$[]"](1)), S(p = (oe = Ke["~"]) === L ? L : oe["$[]"](2)) && B["$[]="]("reftext", S(p["$include?"](de("ATTR_REF_HEAD"))) ? G.$sub_attributes(p) : p), !0;
              } else if (S(v["$end_with?"]("]")) && S(de("BlockAttributeListRx")["$=~"](v)))
                return E = B["$[]"](1), S(G.$parse_attributes((oe = Ke["~"]) === L ? L : oe["$[]"](1), [], Z(["sub_input", "sub_result", "into"], { sub_input: !0, sub_result: !0, into: B }))["$[]"](1)) && B["$[]="](1, S(M = he.$parse_style_attribute(B, te)) ? M : E), !0;
            } else if (S(j) && S(v["$start_with?"]("."))) {
              if (S(de("BlockTitleRx")["$=~"](v)))
                return B["$[]="]("title", (oe = Ke["~"]) === L ? L : oe["$[]"](1)), !0;
            } else if (O(j) || S(v["$start_with?"]("/"))) {
              if (S(v["$start_with?"]("//"))) {
                if (ke(v, "//"))
                  return !0;
                if (S(j) && S(he["$uniform?"](v, "/", x = v.$length()))) {
                  if (!ke(x, 3))
                    return te.$read_lines_until(Z(["terminator", "skip_first_line", "preserve_last_line", "skip_processing", "context"], { terminator: v, skip_first_line: !0, preserve_last_line: !0, skip_processing: !0, context: "comment" })), !0;
                } else if (!S(v["$start_with?"]("///")))
                  return !0;
              }
            } else if (S(j) && S(v["$start_with?"](":")) && S(de("AttributeEntryRx")["$=~"](v)))
              return he.$process_attribute_entry(te, G, B, Ke["~"]), !0;
          }
          return L;
        }, -4), V(Ie, "$process_attribute_entries", function(te, G, B) {
          var le = this;
          for (B == null && (B = L), te.$skip_comment_lines(); S(le.$process_attribute_entry(te, G, B)); )
            te.$shift(), te.$skip_comment_lines();
        }, -3), V(Ie, "$process_attribute_entry", function(te, G, B, le) {
          var oe, he = this, j = L, v = L, p = L, E = L, M = L, x = L;
          if (B == null && (B = L), le == null && (le = L), S(le) || S(le = S(te["$has_more_lines?"]()) ? de("AttributeEntryRx").$match(te.$peek_line()) : L)) {
            if (S((j = le["$[]"](2))["$nil_or_empty?"]()))
              j = "";
            else if (S(j["$end_with?"](de("LINE_CONTINUATION"), de("LINE_CONTINUATION_LEGACY"))))
              for (oe = [j.$slice(tt(j.$length(), 2), 2), j.$slice(0, tt(j.$length(), 2)).$rstrip()], v = oe[0], j = oe[1]; S(S(p = te.$advance()) ? (E = S(M = te.$peek_line()) ? M : "")["$empty?"]()["$!"]() : p) && (E = E.$lstrip(), S(x = E["$end_with?"](v)) && (E = E.$slice(0, tt(E.$length(), 2)).$rstrip()), j = "" + j + (S(j["$end_with?"](de("HARD_LINE_BREAK"))) ? de("LF") : " ") + E, !!S(x)); )
                ;
            return he.$store_attribute(le["$[]"](1), j, G, B), !0;
          } else
            return L;
        }, -3), V(Ie, "$store_attribute", function(te, G, B, le) {
          var oe = this, he = L;
          return B == null && (B = L), le == null && (le = L), S(te["$end_with?"]("!")) ? (te = te.$chop(), G = L) : S(te["$start_with?"]("!")) && (te = te.$slice(1, te.$length()), G = L), ke(te = oe.$sanitize_attribute_name(te), "numbered") ? te = "sectnums" : ke(te, "hardbreaks") ? te = "hardbreaks-option" : ke(te, "showtitle") && oe.$store_attribute("notitle", S(G) ? L : "", B, le), S(B) ? S(G) ? (ke(te, "leveloffset") && (S(G["$start_with?"]("+")) ? G = He(B.$attr("leveloffset", 0).$to_i(), G.$slice(1, G.$length()).$to_i()).$to_s() : S(G["$start_with?"]("-")) && (G = tt(B.$attr("leveloffset", 0).$to_i(), G.$slice(1, G.$length()).$to_i()).$to_s())), S(he = B.$set_attribute(te, G)) && (G = he, S(le) && je(de("Document"), "AttributeEntry").$new(te, G).$save_to(le))) : S(B.$delete_attribute(te)) && S(le) && je(de("Document"), "AttributeEntry").$new(te, G).$save_to(le) : S(le) && je(de("Document"), "AttributeEntry").$new(te, G).$save_to(le), [te, G];
        }, -3), V(Ie, "$resolve_list_marker", function(te, G, B, le, oe) {
          var he = this;
          switch (B == null && (B = 0), le == null && (le = !1), oe == null && (oe = L), te) {
            case "ulist":
              return G;
            case "olist":
              return he.$resolve_ordered_list_marker(G, B, le, oe)["$[]"](0);
            default:
              return "<1>";
          }
        }, -3), V(Ie, "$resolve_ordered_list_marker", function(te, G, B, le) {
          var oe = this, he = L, j = L, v = L;
          if (G == null && (G = 0), B == null && (B = !1), le == null && (le = L), S(te["$start_with?"](".")))
            return [te];
          switch (he = $e(de("ORDERED_LIST_STYLES"), "find", [], function(E) {
            return E == null && (E = L), de("OrderedListMarkerRxMap")["$[]"](E)["$match?"](te);
          })) {
            case "arabic":
              S(B) && (j = He(G, 1), v = te.$to_i()), te = "1.";
              break;
            case "loweralpha":
              S(B) && (j = He("a"["$[]"](0).$ord(), G).$chr(), v = te.$chop()), te = "a.";
              break;
            case "upperalpha":
              S(B) && (j = He("A"["$[]"](0).$ord(), G).$chr(), v = te.$chop()), te = "A.";
              break;
            case "lowerroman":
              S(B) && (j = de("Helpers").$int_to_roman(He(G, 1)).$downcase(), v = te.$chop()), te = "i)";
              break;
            case "upperroman":
              S(B) && (j = de("Helpers").$int_to_roman(He(G, 1)), v = te.$chop()), te = "I)";
              break;
          }
          return S(B) && xe(j, v) && oe.$logger().$warn(oe.$message_with_context("list item index: expected " + j + ", got " + v, Z(["source_location"], { source_location: le.$cursor() }))), [te, he];
        }, -2), V(Ie, "$is_sibling_list_item?", function(te, G, B) {
          var le, oe = this, he = L;
          return Ge(je("Regexp"), B) ? B["$match?"](te) : S(he = de("ListRxMap")["$[]"](G)["$=~"](te)) ? B["$=="](oe.$resolve_list_marker(G, (le = Ke["~"]) === L ? L : le["$[]"](1))) : he;
        }), V(Ie, "$parse_table", function(te, G, B) {
          var le, oe, he, j = this, v = L, p = L, E = L, M = L, x = L, T = L, q = L, K = L, me = L, ue = L, ye = L, Pe = L, Ve = L, et = L, at = L, rt = L, ft = L, _t = L;
          for (v = de("Table").$new(G, B), S(B["$key?"]("cols")) && O((p = j.$parse_colspecs(B["$[]"]("cols")))["$empty?"]()) && (v.$create_columns(p), E = !0), M = S(x = te.$skip_blank_lines()) ? x : 0, S(B["$[]"]("header-option")) ? v["$has_header_option="](!0) : ke(M, 0) && O(B["$[]"]("noheader-option")) && (v["$has_header_option="]("implicit"), T = !0), q = je(de("Table"), "ParserContext").$new(te, v, B), le = [q.$format(), -1, L], K = le[0], me = le[1], ue = le[2]; S(ye = te.$read_line()); ) {
            for (S(Pe = Fe(me = He(me, 1), 0)) && S(ye["$empty?"]()) ? (ye = L, S(ue) && (ue = He(ue, 1))) : ke(K, "psv") && (S(q["$starts_with_delimiter?"](ye)) ? (ye = ye.$slice(1, ye.$length()), q.$close_open_cell(), S(ue) && (ue = L)) : (oe = j.$parse_cellspec(ye, "start", q.$delimiter()), le = Be(oe), Ve = le[0] == null ? L : le[0], ye = le[1] == null ? L : le[1], S(Ve) ? (q.$close_open_cell(Ve), S(ue) && (ue = L)) : S(ue) && ke(ue, me) && v["$has_header_option="](T = ue = L))), S(Pe) || (te.$mark(), S(T) && (S(te["$has_more_lines?"]()) && S(te.$peek_line()["$empty?"]()) ? ue = 1 : v["$has_header_option="](T = L))), le = !1; le || S(!0); )
              if (le = !1, S(ye) && S(et = q.$match_delimiter(ye))) {
                if (oe = [et.$pre_match(), et.$post_match()], at = oe[0], rt = oe[1], Ge("csv", x = K)) {
                  if (S(q["$buffer_has_unclosed_quotes?"](at))) {
                    if (q.$skip_past_delimiter(at), S((ye = rt)["$empty?"]()))
                      break;
                    le = !0;
                    continue;
                  }
                  q["$buffer="]("" + q.$buffer() + at);
                } else if (Ge("dsv", x)) {
                  if (S(at["$end_with?"]("\\"))) {
                    if (q.$skip_past_escaped_delimiter(at), S((ye = rt)["$empty?"]())) {
                      q["$buffer="]("" + q.$buffer() + de("LF")), q.$keep_cell_open();
                      break;
                    }
                    le = !0;
                    continue;
                  }
                  q["$buffer="]("" + q.$buffer() + at);
                } else {
                  if (S(at["$end_with?"]("\\"))) {
                    if (q.$skip_past_escaped_delimiter(at), S((ye = rt)["$empty?"]())) {
                      q["$buffer="]("" + q.$buffer() + de("LF")), q.$keep_cell_open();
                      break;
                    }
                    le = !0;
                    continue;
                  }
                  he = j.$parse_cellspec(at), oe = Be(he), Ve = oe[0] == null ? L : oe[0], ft = oe[1] == null ? L : oe[1], q.$push_cellspec(Ve), q["$buffer="]("" + q.$buffer() + ft);
                }
                S((ye = rt)["$empty?"]()) && (ye = L), q.$close_cell();
              } else {
                switch (q["$buffer="]("" + q.$buffer() + ye + de("LF")), K) {
                  case "csv":
                    S(q["$buffer_has_unclosed_quotes?"]()) ? (S(ue) && ke(me, 0) && v["$has_header_option="](T = ue = L), q.$keep_cell_open()) : q.$close_cell(!0);
                    break;
                  case "dsv":
                    q.$close_cell(!0);
                    break;
                  default:
                    q.$keep_cell_open();
                }
                break;
              }
            if (S(q["$cell_open?"]()))
              S(te["$has_more_lines?"]()) || q.$close_cell(!0);
            else if (!S(x = te.$skip_blank_lines()))
              break;
          }
          return ke((_t = v.$attributes(), S(x = _t["$[]"]("colcount")) ? x : (le = ["colcount", v.$columns().$size()], $e(_t, "[]=", le), le[le.length - 1])), 0) || S(E) || v.$assign_column_widths(), S(T) && v["$has_header_option="](!0), v.$partition_header_footer(B), v;
        }), V(Ie, "$parse_colspecs", function(te) {
          var G = L;
          return S(te["$include?"](" ")) && (te = te.$delete(" ")), ke(te, te.$to_i().$to_s()) ? $e(je("Array"), "new", [te.$to_i()], function() {
            return Z(["width"], { width: 1 });
          }) : (G = [], $e(S(te["$include?"](",")) ? te.$split(",", -1) : te.$split(";", -1), "each", [], function(le) {
            var oe, he, j = L, v = L, p = L, E = L, M = L;
            return le == null && (le = L), S(le["$empty?"]()) ? G["$<<"](Z(["width"], { width: 1 })) : S(j = de("ColumnSpecRx").$match(le)) ? (v = Z([], {}), S(j["$[]"](2)) && (he = j["$[]"](2).$split("."), oe = Be(he), p = oe[0] == null ? L : oe[0], E = oe[1] == null ? L : oe[1], O(p["$nil_or_empty?"]()) && S(de("TableCellHorzAlignments")["$key?"](p)) && v["$[]="]("halign", de("TableCellHorzAlignments")["$[]"](p)), O(E["$nil_or_empty?"]()) && S(de("TableCellVertAlignments")["$key?"](E)) && v["$[]="]("valign", de("TableCellVertAlignments")["$[]"](E))), S(M = j["$[]"](3)) ? v["$[]="]("width", ke(M, "~") ? -1 : M.$to_i()) : v["$[]="]("width", 1), S(j["$[]"](4)) && S(de("TableCellStyles")["$key?"](j["$[]"](4))) && v["$[]="]("style", de("TableCellStyles")["$[]"](j["$[]"](4))), S(j["$[]"](1)) ? $e(1, "upto", [j["$[]"](1).$to_i()], function() {
              return G["$<<"](v.$merge());
            }) : G["$<<"](v)) : L;
          }), G);
        }), V(Ie, "$parse_cellspec", function(te, G, B) {
          var le, oe, he = L, j = L, v = L, p = L, E = L, M = L;
          if (G == null && (G = "end"), B == null && (B = L), le = [L, ""], he = le[0], j = le[1], ke(G, "start"))
            if (S(te["$include?"](B)))
              if (oe = te.$partition(B), le = Be(oe), v = le[0] == null ? L : le[0], le[1] == null || le[1], j = le[2] == null ? L : le[2], S(he = de("CellSpecStartRx").$match(v))) {
                if (S(he["$[]"](0)["$empty?"]()))
                  return [Z([], {}), j];
              } else
                return [L, te];
            else
              return [L, te];
          else if (S(he = de("CellSpecEndRx").$match(te))) {
            if (S(he["$[]"](0).$lstrip()["$empty?"]()))
              return [Z([], {}), te.$rstrip()];
            j = he.$pre_match();
          } else
            return [Z([], {}), te];
          if (p = Z([], {}), S(he["$[]"](1)))
            switch (oe = he["$[]"](1).$split("."), le = Be(oe), E = le[0] == null ? L : le[0], M = le[1] == null ? L : le[1], E = S(E["$nil_or_empty?"]()) ? 1 : E.$to_i(), M = S(M["$nil_or_empty?"]()) ? 1 : M.$to_i(), he["$[]"](2)) {
              case "+":
                ke(E, 1) || p["$[]="]("colspan", E), ke(M, 1) || p["$[]="]("rowspan", M);
                break;
              case "*":
                ke(E, 1) || p["$[]="]("repeatcol", E);
                break;
            }
          return S(he["$[]"](3)) && (oe = he["$[]"](3).$split("."), le = Be(oe), E = le[0] == null ? L : le[0], M = le[1] == null ? L : le[1], O(E["$nil_or_empty?"]()) && S(de("TableCellHorzAlignments")["$key?"](E)) && p["$[]="]("halign", de("TableCellHorzAlignments")["$[]"](E)), O(M["$nil_or_empty?"]()) && S(de("TableCellVertAlignments")["$key?"](M)) && p["$[]="]("valign", de("TableCellVertAlignments")["$[]"](M))), S(he["$[]"](4)) && S(de("TableCellStyles")["$key?"](he["$[]"](4))) && p["$[]="]("style", de("TableCellStyles")["$[]"](he["$[]"](4))), [p, j];
        }, -2), V(Ie, "$parse_style_attribute", function(te, G) {
          var B, le = this, oe = L, he = L, j = L, v = L, p = L, E = L;
          return G == null && (G = L), S(oe = te["$[]"](1)) && O(oe["$include?"](" ")) && S(de("Compliance").$shorthand_property_syntax()) ? (he = L, j = "", v = Z([], {}), $e(oe, "each_char", [], function M(x) {
            var T = M.$$s == null ? this : M.$$s;
            switch (x == null && (x = L), x) {
              case ".":
                return T.$yield_buffered_attribute(v, he, j, G), j = "", he = "role";
              case "#":
                return T.$yield_buffered_attribute(v, he, j, G), j = "", he = "id";
              case "%":
                return T.$yield_buffered_attribute(v, he, j, G), j = "", he = "option";
              default:
                return j = He(j, x);
            }
          }, { $$s: le }), S(he) ? (le.$yield_buffered_attribute(v, he, j, G), S(p = v["$[]"]("style")) && te["$[]="]("style", p), S(v["$key?"]("id")) && te["$[]="]("id", v["$[]"]("id")), S(v["$key?"]("role")) && te["$[]="]("role", S((E = te["$[]"]("role"))["$nil_or_empty?"]()) ? v["$[]"]("role").$join(" ") : "" + E + " " + v["$[]"]("role").$join(" ")), S(v["$key?"]("option")) && $e(v["$[]"]("option"), "each", [], function(x) {
            var T;
            return x == null && (x = L), T = ["" + x + "-option", ""], $e(te, "[]=", T), T[T.length - 1];
          }), p) : (B = ["style", oe], $e(te, "[]=", B), B[B.length - 1])) : (B = ["style", oe], $e(te, "[]=", B), B[B.length - 1]);
        }, -2), V(Ie, "$yield_buffered_attribute", function(te, G, B, le) {
          var oe, he = this, j = L;
          return S(G) ? S(B["$empty?"]()) ? S(le) ? he.$logger().$warn(he.$message_with_context("invalid empty " + G + " detected in style attribute", Z(["source_location"], { source_location: le.$cursor_at_prev_line() }))) : he.$logger().$warn("invalid empty " + G + " detected in style attribute") : ke(G, "id") ? (S(te["$key?"]("id")) && (S(le) ? he.$logger().$warn(he.$message_with_context("multiple ids detected in style attribute", Z(["source_location"], { source_location: le.$cursor_at_prev_line() }))) : he.$logger().$warn("multiple ids detected in style attribute")), te["$[]="](G, B)) : (S(j = te["$[]"](G)) ? j : (oe = [G, []], $e(te, "[]=", oe), oe[oe.length - 1]))["$<<"](B) : S(B["$empty?"]()) || te["$[]="]("style", B), L;
        }), V(Ie, "$adjust_indentation!", function(te, G, B) {
          var le = L, oe = L, he = L;
          return G == null && (G = 0), B == null && (B = 0), S(te["$empty?"]()) || (S(Fe(B, 0)) && S($e(te, "any?", [], function(v) {
            return v == null && (v = L), v["$include?"](de("TAB"));
          })) && (le = Ye(" ", B), $e(te, "map!", [], function(v) {
            var p = L, E = L, M = L, x = L, T = L;
            return v == null && (v = L), S(v["$empty?"]()) || S((p = v.$index(de("TAB")))["$nil?"]()) || ke(p, 0) && (E = 0, function() {
              try {
                var q = We("break");
                return $e(v, "each_byte", [], function(me) {
                  return me == null && (me = L), ke(me, 9) || q.$throw(), E = He(E, 1);
                });
              } catch (K) {
                if (K === q)
                  return K.$v;
                throw K;
              }
            }(), v = "" + Ye(le, E) + v.$slice(E, v.$length()), !S(v["$include?"](de("TAB")))) ? v : (M = 0, x = 0, T = "", $e(v, "each_char", [], function(K) {
              var me = L, ue = L;
              return K == null && (K = L), ke(K, de("TAB")) ? ke((me = He(x, M))["$%"](B), 0) ? (M = He(M, tt(B, 1)), T = He(T, le)) : (ke(ue = tt(B, me["$%"](B)), 1) || (M = He(M, tt(ue, 1))), T = He(T, Ye(" ", ue))) : T = He(T, K), x = He(x, 1);
            }), T);
          })), S(De(G, 0))) || (oe = L, function() {
            try {
              var j = We("break");
              return $e(te, "each", [], function(p) {
                var E = L;
                return p == null && (p = L), S(p["$empty?"]()) || (ke(E = tt(p.$length(), p.$lstrip().$length()), 0) && (oe = L, j.$throw()), S(oe) && S(De(oe, E))) ? L : oe = E;
              });
            } catch (v) {
              if (v === j)
                return v.$v;
              throw v;
            }
          }(), ke(G, 0) ? S(oe) && $e(te, "map!", [], function(v) {
            return v == null && (v = L), S(v["$empty?"]()) ? v : v.$slice(oe, v.$length());
          }) : (he = Ye(" ", G), S(oe) ? $e(te, "map!", [], function(v) {
            return v == null && (v = L), S(v["$empty?"]()) ? v : He(he, v.$slice(oe, v.$length()));
          }) : $e(te, "map!", [], function(v) {
            return v == null && (v = L), S(v["$empty?"]()) ? v : He(he, v);
          }))), L;
        }, -2), V(Ie, "$uniform?", function(te, G, B) {
          return te.$count(G)["$=="](B);
        }), V(Ie, "$sanitize_attribute_name", function(te) {
          return te.$gsub(de("InvalidAttributeNameCharsRx"), "").$downcase();
        });
      }(ee[0], null, ee);
    }(st[0], st);
  }, Opal.modules["asciidoctor/path_resolver"] = function(u) {
    var se = u.module, re = u.klass, W = u.const_set, $e = u.truthy, S = u.hash2, Z = u.def, Be = u.eqeq, V = u.alias, ke = u.rb_plus, O = u.to_ary, Ke = u.send, xe = u.not, He = u.neqeq, De = u.rb_gt, Fe = u.gvars, ot = [], Ge = u.nil, tt = u.$$$;
    return u.add_stubs("include,attr_accessor,root?,posixify,expand_path,pwd,start_with?,==,match?,absolute_path?,+,length,descends_from?,slice,to_s,relative_path_from,new,include?,tr,partition_path,each,pop,<<,join_path,[],web_root?,unc?,index,split,delete,[]=,join,raise,!,fetch,warn,logger,empty?,nil_or_empty?,chomp,!=,>,size,extract_uri_prefix,end_with?,gsub,private,=~"), function(Ye, We) {
      var st = se(Ye, "Asciidoctor"), L = [st].concat(We);
      return function(je, k, Ze) {
        var nt = re(je, k, "PathResolver"), ee = [nt].concat(Ze), U = u.$r(ee), ze = nt.$$prototype;
        return ze.file_separator = ze._partition_path_web = ze._partition_path_sys = ze.working_dir = Ge, nt.$include(U("Logging")), W(ee[0], "DOT", "."), W(ee[0], "DOT_DOT", ".."), W(ee[0], "DOT_SLASH", "./"), W(ee[0], "SLASH", "/"), W(ee[0], "BACKSLASH", "\\"), W(ee[0], "DOUBLE_SLASH", "//"), W(ee[0], "URI_CLASSLOADER", "uri:classloader:"), W(ee[0], "WindowsRootRx", /^(?:[a-zA-Z]:)?[\\\/]/), nt.$attr_accessor("file_separator"), nt.$attr_accessor("working_dir"), Z(nt, "$initialize", function(Ie, Ae) {
          var de = this, Ee = Ge, te = Ge;
          return Ie == null && (Ie = Ge), Ae == null && (Ae = Ge), de.file_separator = $e(Ee = $e(te = Ie) ? te : tt(tt("File"), "ALT_SEPARATOR")) ? Ee : tt(tt("File"), "SEPARATOR"), de.working_dir = $e(Ae) ? $e(de["$root?"](Ae)) ? de.$posixify(Ae) : tt("File").$expand_path(Ae) : tt("Dir").$pwd(), de._partition_path_sys = S([], {}), de._partition_path_web = S([], {});
        }, -1), Z(nt, "$absolute_path?", function(Ie) {
          var Ae = this, de = Ge, Ee = Ge;
          return $e(de = Ie["$start_with?"](U("SLASH"))) ? de : $e(Ee = Ae.file_separator["$=="](U("BACKSLASH"))) ? U("WindowsRootRx")["$match?"](Ie) : Ee;
        }), Be(U("RUBY_ENGINE"), "opal") && Be(tt("JAVASCRIPT_IO_MODULE"), "xmlhttprequest") ? Z(nt, "$root?", function(Ie) {
          var Ae = this, de = Ge;
          return $e(de = Ae["$absolute_path?"](Ie)) ? de : Ie["$start_with?"]("file://", "http://", "https://");
        }) : Be(tt("RUBY_ENGINE"), "jruby") ? Z(nt, "$root?", function(Ie) {
          var Ae = this, de = Ge;
          return $e(de = Ae["$absolute_path?"](Ie)) ? de : Ie["$start_with?"](U("URI_CLASSLOADER"));
        }) : V(nt, "root?", "absolute_path?"), Z(nt, "$unc?", function(Ie) {
          return Ie["$start_with?"](U("DOUBLE_SLASH"));
        }), Z(nt, "$web_root?", function(Ie) {
          return Ie["$start_with?"](U("SLASH"));
        }), Z(nt, "$descends_from?", function(Ie, Ae) {
          var de = Ge;
          return Be(Ae, Ie) ? 0 : Be(Ae, U("SLASH")) ? $e(de = Ie["$start_with?"](U("SLASH"))) ? 1 : de : $e(de = Ie["$start_with?"](ke(Ae, U("SLASH")))) ? ke(Ae.$length(), 1) : de;
        }), Z(nt, "$relative_path", function(Ie, Ae) {
          var de = this, Ee = Ge;
          if ($e(de["$root?"](Ie))) {
            if ($e(Ee = de["$descends_from?"](Ie, Ae)))
              return Ie.$slice(Ee, Ie.$length());
            try {
              return U("Pathname").$new(Ie).$relative_path_from(U("Pathname").$new(Ae)).$to_s();
            } catch (te) {
              if (u.rescue(te, [U("StandardError")]))
                try {
                  return Ie;
                } finally {
                  u.pop_exception();
                }
              else
                throw te;
            }
          } else
            return Ie;
        }), Z(nt, "$posixify", function(Ie) {
          var Ae = this;
          return $e(Ie) ? Be(Ae.file_separator, U("BACKSLASH")) && $e(Ie["$include?"](U("BACKSLASH"))) ? Ie.$tr(U("BACKSLASH"), U("SLASH")) : Ie : "";
        }), V(nt, "posixfy", "posixify"), Z(nt, "$expand_path", function(Ie) {
          var Ae, de, Ee = this, te = Ge, G = Ge, B = Ge;
          return de = Ee.$partition_path(Ie), Ae = O(de), te = Ae[0] == null ? Ge : Ae[0], G = Ae[1] == null ? Ge : Ae[1], $e(Ie["$include?"](U("DOT_DOT"))) ? (B = [], Ke(te, "each", [], function(oe) {
            return oe == null && (oe = Ge), Be(oe, U("DOT_DOT")) ? B.$pop() : B["$<<"](oe);
          }), Ee.$join_path(B, G)) : Ee.$join_path(te, G);
        }), Z(nt, "$partition_path", function(Ie, Ae) {
          var de, Ee = this, te = Ge, G = Ge, B = Ge, le = Ge, oe = Ge;
          return Ae == null && (Ae = Ge), $e(te = (G = $e(Ae) ? Ee._partition_path_web : Ee._partition_path_sys)["$[]"](Ie)) ? te : (B = Ee.$posixify(Ie), $e(Ae) ? $e(Ee["$web_root?"](B)) ? le = U("SLASH") : $e(B["$start_with?"](U("DOT_SLASH"))) && (le = U("DOT_SLASH")) : $e(Ee["$root?"](B)) ? $e(Ee["$unc?"](B)) ? le = U("DOUBLE_SLASH") : $e(B["$start_with?"](U("SLASH"))) ? le = U("SLASH") : $e(B["$start_with?"](U("URI_CLASSLOADER"))) ? le = B.$slice(0, U("URI_CLASSLOADER").$length()) : le = B.$slice(0, ke(B.$index(U("SLASH")), 1)) : $e(B["$start_with?"](U("DOT_SLASH"))) && (le = U("DOT_SLASH")), oe = ($e(le) ? B.$slice(le.$length(), B.$length()) : B).$split(U("SLASH")), oe.$delete(U("DOT")), de = [Ie, [oe, le]], Ke(G, "[]=", de), de[de.length - 1]);
        }, -2), Z(nt, "$join_path", function(Ie, Ae) {
          return Ae == null && (Ae = Ge), $e(Ae) ? "" + Ae + Ie.$join(U("SLASH")) : Ie.$join(U("SLASH"));
        }, -2), Z(nt, "$system_path", function(Ie, Ae, de, Ee) {
          var te, G, B = this, le = Ge, oe = Ge, he = Ge, j = Ge, v = Ge, p = Ge, E = Ge, M = Ge, x = Ge, T = Ge, q = Ge;
          if (Ae == null && (Ae = Ge), de == null && (de = Ge), Ee == null && (Ee = S([], {})), $e(de) && ($e(B["$root?"](de)) || B.$raise(tt("SecurityError"), "Jail is not an absolute path: " + de), de = B.$posixify(de)), $e(Ie))
            if ($e(B["$root?"](Ie))) {
              if (le = B.$expand_path(Ie), $e(de) && xe(B["$descends_from?"](le, de))) {
                if ($e(Ee.$fetch("recover", !0)))
                  return B.$logger().$warn("" + ($e(oe = Ee["$[]"]("target_name")) ? oe : "path") + " is outside of jail; recovering automatically"), G = B.$partition_path(le), te = O(G), he = te[0] == null ? Ge : te[0], G = B.$partition_path(de), te = O(G), j = te[0] == null ? Ge : te[0], v = te[1] == null ? Ge : te[1], B.$join_path(ke(j, he), v);
                B.$raise(tt("SecurityError"), "" + ($e(oe = Ee["$[]"]("target_name")) ? oe : "path") + " " + Ie + " is outside of jail: " + de + " (disallowed in safe mode)");
              }
              return le;
            } else
              G = B.$partition_path(Ie), te = O(G), he = te[0] == null ? Ge : te[0];
          else
            he = [];
          if ($e(he["$empty?"]())) {
            if ($e(Ae["$nil_or_empty?"]()))
              return $e(oe = de) ? oe : B.working_dir;
            if ($e(B["$root?"](Ae)))
              if ($e(de))
                Ae = B.$posixify(Ae);
              else
                return B.$expand_path(Ae);
            else
              G = B.$partition_path(Ae), te = O(G), he = te[0] == null ? Ge : te[0], Ae = $e(oe = de) ? oe : B.working_dir;
          } else
            $e(Ae["$nil_or_empty?"]()) ? Ae = $e(oe = de) ? oe : B.working_dir : $e(B["$root?"](Ae)) ? $e(de) && (Ae = B.$posixify(Ae)) : Ae = "" + ($e(oe = de) ? oe : B.working_dir).$chomp("/") + "/" + Ae;
          return $e(de) && $e(p = B["$descends_from?"](Ae, de)["$!"]()) && Be(B.file_separator, U("BACKSLASH")) ? (G = B.$partition_path(Ae), te = O(G), E = te[0] == null ? Ge : te[0], M = te[1] == null ? Ge : te[1], G = B.$partition_path(de), te = O(G), j = te[0] == null ? Ge : te[0], v = te[1] == null ? Ge : te[1], He(M, v) && ($e(Ee.$fetch("recover", !0)) ? (B.$logger().$warn("start path for " + ($e(oe = Ee["$[]"]("target_name")) ? oe : "path") + " is outside of jail root; recovering automatically"), E = j, p = !1) : B.$raise(tt("SecurityError"), "start path for " + ($e(oe = Ee["$[]"]("target_name")) ? oe : "path") + " " + Ae + " refers to location outside jail root: " + de + " (disallowed in safe mode)"))) : (G = B.$partition_path(Ae), te = O(G), E = te[0] == null ? Ge : te[0], v = te[1] == null ? Ge : te[1]), $e((x = ke(E, he))["$include?"](U("DOT_DOT"))) && (te = [x, []], T = te[0], x = te[1], $e(de) ? ($e(j) || (G = B.$partition_path(de), te = O(G), j = te[0] == null ? Ge : te[0]), q = !1, Ke(T, "each", [], function K(me) {
            var ue = K.$$s == null ? this : K.$$s;
            return me == null && (me = Ge), Be(me, U("DOT_DOT")) ? $e(De(x.$size(), j.$size())) ? x.$pop() : $e(Ee.$fetch("recover", !0)) ? $e(q) ? Ge : (ue.$logger().$warn("" + ($e(oe = Ee["$[]"]("target_name")) ? oe : "path") + " has illegal reference to ancestor of jail; recovering automatically"), q = !0) : ue.$raise(tt("SecurityError"), "" + ($e(oe = Ee["$[]"]("target_name")) ? oe : "path") + " " + Ie + " refers to location outside jail: " + de + " (disallowed in safe mode)") : x["$<<"](me);
          }, { $$s: B })) : Ke(T, "each", [], function(me) {
            return me == null && (me = Ge), Be(me, U("DOT_DOT")) ? x.$pop() : x["$<<"](me);
          })), $e(p) ? (le = B.$join_path(x, v), $e(B["$descends_from?"](le, de)) ? le : $e(Ee.$fetch("recover", !0)) ? (B.$logger().$warn("" + ($e(oe = Ee["$[]"]("target_name")) ? oe : "path") + " is outside of jail; recovering automatically"), $e(j) || (G = B.$partition_path(de), te = O(G), j = te[0] == null ? Ge : te[0]), B.$join_path(ke(j, he), v)) : B.$raise(tt("SecurityError"), "" + ($e(oe = Ee["$[]"]("target_name")) ? oe : "path") + " " + Ie + " is outside of jail: " + de + " (disallowed in safe mode)")) : B.$join_path(x, v);
        }, -2), Z(nt, "$web_path", function(Ie, Ae) {
          var de, Ee, te = this, G = Ge, B = Ge, le = Ge, oe = Ge, he = Ge;
          return Ae == null && (Ae = Ge), Ie = te.$posixify(Ie), Ae = te.$posixify(Ae), $e(Ae["$nil_or_empty?"]()) || $e(te["$web_root?"](Ie)) || (Ee = te.$extract_uri_prefix("" + Ae + ($e(Ae["$end_with?"](U("SLASH"))) ? "" : U("SLASH")) + Ie), de = O(Ee), Ie = de[0] == null ? Ge : de[0], G = de[1] == null ? Ge : de[1]), Ee = te.$partition_path(Ie, !0), de = O(Ee), B = de[0] == null ? Ge : de[0], le = de[1] == null ? Ge : de[1], oe = [], Ke(B, "each", [], function(v) {
            return v == null && (v = Ge), Be(v, U("DOT_DOT")) ? $e(oe["$empty?"]()) ? $e(le) && He(le, U("DOT_SLASH")) ? Ge : oe["$<<"](v) : Be(oe["$[]"](-1), U("DOT_DOT")) ? oe["$<<"](v) : oe.$pop() : oe["$<<"](v);
          }), $e((he = te.$join_path(oe, le))["$include?"](" ")) && (he = he.$gsub(" ", "%20")), $e(G) ? "" + G + he : he;
        }, -2), nt.$private(), Z(nt, "$extract_uri_prefix", function(Ie) {
          var Ae;
          return $e(Ie["$include?"](":")) && $e(U("UriSniffRx")["$=~"](Ie)) ? [Ie.$slice(((Ae = Fe["~"]) === Ge ? Ge : Ae["$[]"](0)).$length(), Ie.$length()), (Ae = Fe["~"]) === Ge ? Ge : Ae["$[]"](0)] : Ie;
        });
      }(L[0], null, L);
    }(ot[0], ot);
  }, Opal.modules["asciidoctor/reader"] = function(u) {
    var se = u.module, re = u.klass, W = u.def, $e = u.rb_plus, S = u.alias, Z = u.hash2, Be = u.not, V = u.eqeqeq, ke = u.to_ary, O = u.truthy, Ke = u.rb_gt, xe = u.send, He = u.rb_minus, De = u.thrower, Fe = u.eqeq, ot = u.rb_times, Ge = u.neqeq, tt = u.to_a, Ye = u.assign_ivar_val, We = u.send2, st = u.find_super, L = u.rb_ge, je = u.gvars, k = u.rb_lt, Ze = u.hash, nt = [], ee = u.nil, U = u.$$$;
    return u.add_stubs("include,attr_reader,+,line_info,attr_accessor,!,===,split,file,dir,dirname,path,basename,lineno,reverse,prepare_lines,empty?,nil_or_empty?,peek_line,[],>,slice,length,process_line,times,shift,read_line,<<,-,unshift_all,has_more_lines?,read_lines,join,unshift,unshift_line,unshift_lines,replace_next_line,start_with?,==,*,read_lines_until,size,clear,cursor,[]=,fetch,!=,cursor_at_mark,warn,logger,message_with_context,pop,push,respond_to?,reverse_each,new,tap,each,instance_variables,instance_variable_get,drop,instance_variable_set,class,object_id,inspect,private,prepare_source_array,prepare_source_string,chomp,valid_encoding?,to_s,raise,to_i,attributes,catalog,pop_include,parse,path=,dup,end_with?,keys,rindex,rootname,key?,attr,reverse!,>=,exceeds_max_depth?,nil?,include_processors?,extensions,extensions?,include_processors,map,skip_front_matter!,adjust_indentation!,include?,=~,preprocess_conditional_directive,preprocess_include_directive,downcase,error,none?,any?,all?,strip,send,resolve_expr_val,rstrip,sub_attributes,attribute_missing,info,parse_attributes,find,handles?,instance,process_method,safe,resolve_include_path,method,split_delimited_value,partition,<,to_a,uniq,sort,call,each_line,infinite?,push_include,delete,first,values,value?,create_include_cursor,delete_at,keep_if,read,uriish?,attr?,require_library,normalize_system_path,file?,relative_path,path_resolver,base_dir,to_f"), function(ze, Se) {
      var Ie = se(ze, "Asciidoctor"), Ae = [Ie].concat(Se), de = u.$r(Ae);
      return function(Ee, te, G) {
        var B = re(Ee, te, "Reader"), le = [B].concat(G), oe = u.$r(le), he = B.$$prototype;
        return he.file = he.lines = he.look_ahead = he.unescape_next_line = he.lineno = he.process_lines = he.dir = he.path = he.mark = he.source_lines = he.saved = ee, B.$include(oe("Logging")), function(j, v) {
          var p = re(j, v, "Cursor"), E = p.$$prototype;
          return E.lineno = E.path = ee, p.$attr_reader("file", "dir", "path", "lineno"), W(p, "$initialize", function(x, T, q, K) {
            var me, ue = this;
            return T == null && (T = ee), q == null && (q = ee), K == null && (K = 1), me = [x, T, q, K], ue.file = me[0], ue.dir = me[1], ue.path = me[2], ue.lineno = me[3], me;
          }, -2), W(p, "$advance", function(x) {
            var T = this;
            return T.lineno = $e(T.lineno, x);
          }), W(p, "$line_info", function() {
            var x = this;
            return "" + x.path + ": line " + x.lineno;
          }), S(p, "to_s", "line_info");
        }(le[0], null), B.$attr_reader("file"), B.$attr_reader("dir"), B.$attr_reader("path"), B.$attr_reader("lineno"), B.$attr_reader("source_lines"), B.$attr_accessor("process_lines"), B.$attr_accessor("unterminated"), W(B, "$initialize", function(v, p, E) {
          var M, x, T = this, q = ee;
          return v == null && (v = ee), p == null && (p = ee), E == null && (E = Z([], {})), Be(p) ? (T.file = ee, T.dir = ".", T.path = "<stdin>", T.lineno = 1) : V(U("String"), p) ? (T.file = p, x = U("File").$split(T.file), M = ke(x), T.dir = M[0] == null ? ee : M[0], T.path = M[1] == null ? ee : M[1], T.lineno = 1) : (O(T.file = p.$file()) ? (T.dir = O(q = p.$dir()) ? q : U("File").$dirname(T.file), T.path = O(q = p.$path()) ? q : U("File").$basename(T.file)) : (T.dir = O(q = p.$dir()) ? q : ".", T.path = O(q = p.$path()) ? q : "<stdin>"), T.lineno = O(q = p.$lineno()) ? q : 1), T.lines = (T.source_lines = T.$prepare_lines(v, E)).$reverse(), T.mark = ee, T.look_ahead = 0, T.process_lines = !0, T.unescape_next_line = !1, T.unterminated = ee, T.saved = ee;
        }, -1), W(B, "$has_more_lines?", function() {
          var v = this;
          return O(v.lines["$empty?"]()) ? (v.look_ahead = 0, !1) : !0;
        }), W(B, "$empty?", function() {
          var v = this;
          return O(v.lines["$empty?"]()) ? (v.look_ahead = 0, !0) : !1;
        }), S(B, "eof?", "empty?"), W(B, "$next_line_empty?", function() {
          var v = this;
          return v.$peek_line()["$nil_or_empty?"]();
        }), W(B, "$peek_line", function(v) {
          var p = this, E = ee, M = ee;
          for (v == null && (v = !1); O(!0); ) {
            if (E = p.lines["$[]"](-1), O(v) || O(Ke(p.look_ahead, 0)))
              return O(p.unescape_next_line) ? E.$slice(1, E.$length()) : E;
            if (O(E)) {
              if (O(M = p.$process_line(E)))
                return M;
            } else
              return p.look_ahead = 0, ee;
          }
        }, -1), W(B, "$peek_lines", function(v, p) {
          var E = this, M = ee, x = ee, T = ee;
          return v == null && (v = ee), p == null && (p = !1), M = E.look_ahead, x = [], function() {
            try {
              var q = De("break");
              return xe(O(T = v) ? T : oe("MAX_INT"), "times", [], function K() {
                var me = K.$$s == null ? this : K.$$s, ue = ee;
                if (me.lineno == null && (me.lineno = ee), O(ue = O(p) ? me.$shift() : me.$read_line()))
                  return x["$<<"](ue);
                O(p) && (me.lineno = He(me.lineno, 1)), q.$throw();
              }, { $$s: E });
            } catch (K) {
              if (K === q)
                return K.$v;
              throw K;
            }
          }(), O(x["$empty?"]()) || (E.$unshift_all(x), O(p) && (E.look_ahead = M)), x;
        }, -1), W(B, "$read_line", function() {
          var v = this;
          return O(Ke(v.look_ahead, 0)) || O(v["$has_more_lines?"]()) ? v.$shift() : ee;
        }), W(B, "$read_lines", function() {
          var v = this, p = ee;
          for (p = []; O(v["$has_more_lines?"]()); )
            p["$<<"](v.$shift());
          return p;
        }), S(B, "readlines", "read_lines"), W(B, "$read", function() {
          var v = this;
          return v.$read_lines().$join(oe("LF"));
        }), W(B, "$advance", function() {
          var v = this;
          return !!O(v.$shift());
        }), W(B, "$unshift_line", function(v) {
          var p = this;
          return p.$unshift(v), ee;
        }), S(B, "restore_line", "unshift_line"), W(B, "$unshift_lines", function(v) {
          var p = this;
          return p.$unshift_all(v);
        }), S(B, "restore_lines", "unshift_lines"), W(B, "$replace_next_line", function(v) {
          var p = this;
          return p.$shift(), p.$unshift(v), !0;
        }), S(B, "replace_line", "replace_next_line"), W(B, "$skip_blank_lines", function() {
          var v = this, p = ee, E = ee;
          if (O(v["$empty?"]()))
            return ee;
          for (p = 0; O(E = v.$peek_line()); )
            if (O(E["$empty?"]()))
              v.$shift(), p = $e(p, 1);
            else
              return p;
        }), W(B, "$skip_comment_lines", function() {
          var v = this, p = ee, E = ee, M = ee;
          if (O(v["$empty?"]()))
            return ee;
          for (; O(O(p = E = v.$peek_line()) ? E["$empty?"]()["$!"]() : p) && O(E["$start_with?"]("//")); )
            if (O(E["$start_with?"]("///")))
              if (O(Ke(M = E.$length(), 3)) && Fe(E, ot("/", M)))
                v.$read_lines_until(Z(["terminator", "skip_first_line", "read_last_line", "skip_processing", "context"], { terminator: E, skip_first_line: !0, read_last_line: !0, skip_processing: !0, context: "comment" }));
              else
                break;
            else
              v.$shift();
          return ee;
        }), W(B, "$skip_line_comments", function() {
          var v = this, p = ee, E = ee, M = ee;
          if (O(v["$empty?"]()))
            return [];
          for (p = []; O(O(E = M = v.$peek_line()) ? M["$empty?"]()["$!"]() : E) && O(M["$start_with?"]("//")); )
            p["$<<"](v.$shift());
          return p;
        }), W(B, "$terminate", function() {
          var v = this;
          return v.lineno = $e(v.lineno, v.lines.$size()), v.lines.$clear(), v.look_ahead = 0, ee;
        }), W(B, "$read_lines_until", function j(v) {
          var p, E = j.$$p || ee, M = this, x = ee, T = ee, q = ee, K = ee, me = ee, ue = ee, ye = ee, Pe = ee, Ve = ee, et = ee, at = ee, rt = ee, ft = ee, _t = ee, ht = ee, pt = ee;
          for (j.$$p = null, v == null && (v = Z([], {})), x = [], O(M.process_lines) && O(v["$[]"]("skip_processing")) && (M.process_lines = !1, T = !0), O(q = v["$[]"]("terminator")) ? (K = O(me = v["$[]"]("cursor")) ? me : M.$cursor(), ue = !1, ye = !1) : (ue = v["$[]"]("break_on_blank_lines"), ye = v["$[]"]("break_on_list_continuation")), Pe = v["$[]"]("skip_line_comments"), Ve = et = ee, O(v["$[]"]("skip_first_line")) && M.$shift(); O(at = M.$read_line()); ) {
            if (O(O(q) ? at["$=="](q) : O(me = O(rt = O(ft = ue) ? at["$empty?"]() : ft) ? rt : O(ft = O(_t = O(ht = ye) ? Ve : ht) ? at["$=="](oe("LIST_CONTINUATION")) : _t) ? (p = ["preserve_last_line", !0], xe(v, "[]=", p), p[p.length - 1]) : ft) ? me : O(rt = E !== ee) ? u.yield1(E, at) : rt)) {
              O(v["$[]"]("read_last_line")) && x["$<<"](at), O(v["$[]"]("preserve_last_line")) && (M.$unshift(at), et = !0);
              break;
            }
            O(Pe) && O(at["$start_with?"]("//")) && Be(at["$start_with?"]("///")) || (x["$<<"](at), Ve = !0);
          }
          return O(T) && (M.process_lines = !0, O(et) && Be(q) && (M.look_ahead = He(M.look_ahead, 1))), O(q) && Ge(q, at) && O(pt = v.$fetch("context", q)) && (Fe(K, "at_mark") && (K = M.$cursor_at_mark()), M.$logger().$warn(M.$message_with_context("unterminated " + pt + " block", Z(["source_location"], { source_location: K }))), M.unterminated = !0), x;
        }, -1), W(B, "$shift", function() {
          var v = this;
          return v.lineno = $e(v.lineno, 1), Fe(v.look_ahead, 0) || (v.look_ahead = He(v.look_ahead, 1)), v.lines.$pop();
        }), W(B, "$unshift", function(v) {
          var p = this;
          return p.lineno = He(p.lineno, 1), p.look_ahead = $e(p.look_ahead, 1), p.lines.$push(v), ee;
        }), Fe(U("RUBY_ENGINE"), "jruby") ? W(B, "$unshift_all", function(v) {
          var p = this;
          return p.lineno = He(p.lineno, v.$size()), p.look_ahead = $e(p.look_ahead, v.$size()), O(v["$respond_to?"]("reverse")) ? xe(p.lines, "push", tt(v.$reverse())) : xe(v, "reverse_each", [], function E(M) {
            var x = E.$$s == null ? this : E.$$s;
            return x.lines == null && (x.lines = ee), M == null && (M = ee), x.lines.$push(M);
          }, { $$s: p }), ee;
        }) : W(B, "$unshift_all", function(v) {
          var p = this;
          return p.lineno = He(p.lineno, v.$size()), p.look_ahead = $e(p.look_ahead, v.$size()), xe(p.lines, "push", tt(v.$reverse())), ee;
        }), W(B, "$cursor", function() {
          var v = this;
          return oe("Cursor").$new(v.file, v.dir, v.path, v.lineno);
        }), W(B, "$cursor_at_line", function(v) {
          var p = this;
          return oe("Cursor").$new(p.file, p.dir, p.path, v);
        }), W(B, "$cursor_at_mark", function() {
          var v = this;
          return O(v.mark) ? xe(oe("Cursor"), "new", tt(v.mark)) : v.$cursor();
        }), W(B, "$cursor_before_mark", function() {
          var v, p, E = this, M = ee, x = ee, T = ee, q = ee;
          return O(E.mark) ? (p = E.mark, v = ke(p), M = v[0] == null ? ee : v[0], x = v[1] == null ? ee : v[1], T = v[2] == null ? ee : v[2], q = v[3] == null ? ee : v[3], oe("Cursor").$new(M, x, T, He(q, 1))) : oe("Cursor").$new(E.file, E.dir, E.path, He(E.lineno, 1));
        }), W(B, "$cursor_at_prev_line", function() {
          var v = this;
          return oe("Cursor").$new(v.file, v.dir, v.path, He(v.lineno, 1));
        }), W(B, "$mark", function() {
          var v = this;
          return v.mark = [v.file, v.dir, v.path, v.lineno];
        }), W(B, "$line_info", function() {
          var v = this;
          return "" + v.path + ": line " + v.lineno;
        }), W(B, "$lines", function() {
          var v = this;
          return v.lines.$reverse();
        }), W(B, "$string", function() {
          var v = this;
          return v.lines.$reverse().$join(oe("LF"));
        }), W(B, "$source", function() {
          var v = this;
          return v.source_lines.$join(oe("LF"));
        }), W(B, "$save", function() {
          var v = this;
          return v.saved = xe(Z([], {}), "tap", [], function p(E) {
            var M = p.$$s == null ? this : p.$$s;
            return E == null && (E = ee), xe(M.$instance_variables(), "each", [], function x(T) {
              var q, K = x.$$s == null ? this : x.$$s, me = ee;
              return T == null && (T = ee), Fe(T, "@saved") || Fe(T, "@source_lines") ? ee : (q = [T, V(U("Array"), me = K.$instance_variable_get(T)) ? me.$drop(0) : me], xe(E, "[]=", q), q[q.length - 1]);
            }, { $$s: M });
          }, { $$s: v }), ee;
        }), W(B, "$restore_save", function() {
          var v = this;
          return O(v.saved) ? (xe(v.saved, "each", [], function p(E, M) {
            var x = p.$$s == null ? this : p.$$s;
            return E == null && (E = ee), M == null && (M = ee), x.$instance_variable_set(E, M);
          }, { $$s: v }), v.saved = ee) : ee;
        }), W(B, "$discard_save", Ye("saved", ee)), W(B, "$to_s", function() {
          var v = this;
          return "#<" + v.$class() + "@" + v.$object_id() + " {path: " + v.path.$inspect() + ", line: " + v.lineno + "}>";
        }), B.$private(), W(B, "$prepare_lines", function(v, p) {
          var E = this, M = ee;
          p == null && (p = Z([], {}));
          try {
            return O(M = p["$[]"]("normalize")) ? V(U("Array"), v) ? oe("Helpers").$prepare_source_array(v, M["$!="]("chomp")) : oe("Helpers").$prepare_source_string(v, M["$!="]("chomp")) : V(U("Array"), v) ? v.$drop(0) : O(v) ? v.$chomp().$split(oe("LF"), -1) : [];
          } catch (x) {
            if (u.rescue(x, [oe("StandardError")]))
              try {
                return O((V(U("Array"), v) ? v.$join() : v.$to_s())["$valid_encoding?"]()) ? E.$raise() : E.$raise(U("ArgumentError"), "source is either binary or contains invalid Unicode data");
              } finally {
                u.pop_exception();
              }
            else
              throw x;
          }
        }, -2), W(B, "$process_line", function(v) {
          var p = this;
          return O(p.process_lines) && (p.look_ahead = $e(p.look_ahead, 1)), v;
        });
      }(Ae[0], null, Ae), function(Ee, te, G) {
        var B = re(Ee, te, "PreprocessorReader"), le = [B].concat(G), oe = u.$r(le), he = B.$$prototype;
        return he.include_stack = he.lines = he.file = he.dir = he.path = he.lineno = he.maxdepth = he.process_lines = he.includes = he.document = he.unescape_next_line = he.include_processor_extensions = he.look_ahead = he.skipping = he.conditional_stack = ee, B.$attr_reader("include_stack"), W(B, "$initialize", function j(v, p, E, M) {
          j.$$p;
          var x = this, T = ee, q = ee;
          return j.$$p = null, p == null && (p = ee), E == null && (E = ee), M == null && (M = Z([], {})), x.document = v, We(x, st(x, "initialize", j, !1, !0), "initialize", [p, E, M], null), O(Ke(T = (O(q = v.$attributes()["$[]"]("max-include-depth")) ? q : 64).$to_i(), 0)) ? x.maxdepth = Z(["abs", "curr", "rel"], { abs: T, curr: T, rel: T }) : x.maxdepth = ee, x.include_stack = [], x.includes = v.$catalog()["$[]"]("includes"), x.skipping = !1, x.conditional_stack = [], x.include_processor_extensions = ee;
        }, -2), W(B, "$has_more_lines?", function() {
          var v = this;
          return !!O(v.$peek_line());
        }), W(B, "$empty?", function() {
          var v = this;
          return !O(v.$peek_line());
        }), S(B, "eof?", "empty?"), W(B, "$peek_line", function j(v) {
          var p = j.$$p || ee, E = this, M = ee;
          return j.$$p = null, v == null && (v = !1), O(M = We(E, st(E, "peek_line", j, !1, !0), "peek_line", [v], p)) ? M : O(E.include_stack["$empty?"]()) ? ee : (E.$pop_include(), E.$peek_line(v));
        }, -1), W(B, "$push_include", function(v, p, E, M, x) {
          var T = this, q = ee, K = ee, me = ee, ue = ee, ye = ee, Pe = ee;
          return p == null && (p = ee), E == null && (E = ee), M == null && (M = 1), x == null && (x = Z([], {})), T.include_stack["$<<"]([T.lines, T.file, T.dir, T.path, T.lineno, T.maxdepth, T.process_lines]), O(T.file = p) ? (V(U("String"), p) ? T.dir = U("File").$dirname(p) : O(oe("RUBY_ENGINE_OPAL")) ? T.dir = U("URI").$parse(U("File").$dirname(p = p.$to_s())) : ((T.dir = p.$dup())["$path="](Fe(q = U("File").$dirname(p.$path()), "/") ? "" : q), p = p.$to_s()), T.path = E = O(K = E) ? K : U("File").$basename(p), O(T.process_lines = xe(p, "end_with?", tt(oe("ASCIIDOC_EXTENSIONS").$keys()))) && (O(K = T.includes["$[]"](E.$slice(0, E.$rindex(".")))) || T.includes["$[]="](E.$slice(0, E.$rindex(".")), O(x["$[]"]("partial-option")) ? ee : !0))) : (T.dir = ".", T.process_lines = !0, O(T.path = E) ? O(K = T.includes["$[]"](oe("Helpers").$rootname(E))) || T.includes["$[]="](oe("Helpers").$rootname(E), O(x["$[]"]("partial-option")) ? ee : !0) : T.path = "<stdin>"), T.lineno = M, O(T.maxdepth) && O(x["$key?"]("depth")) && (O(Ke(me = x["$[]"]("depth").$to_i(), 0)) ? (O(Ke(ue = $e(T.include_stack.$size(), me), ye = T.maxdepth["$[]"]("abs"))) && (ue = me = ye), T.maxdepth = Z(["abs", "curr", "rel"], { abs: ye, curr: ue, rel: me })) : T.maxdepth = Z(["abs", "curr", "rel"], { abs: T.maxdepth["$[]"]("abs"), curr: T.include_stack.$size(), rel: 0 })), O((T.lines = T.$prepare_lines(v, Z(["normalize", "condense", "indent"], { normalize: O(K = T.process_lines) ? K : "chomp", condense: !1, indent: x["$[]"]("indent") })))["$empty?"]()) ? T.$pop_include() : (O(x["$key?"]("leveloffset")) ? (T.lines = $e($e([O(Pe = T.document.$attr("leveloffset")) ? ":leveloffset: " + Pe : ":leveloffset!:", ""], T.lines.$reverse()), ["", ":leveloffset: " + x["$[]"]("leveloffset")]), T.lineno = He(T.lineno, 2)) : T.lines["$reverse!"](), T.look_ahead = 0), T;
        }, -2), W(B, "$include_depth", function() {
          var v = this;
          return v.include_stack.$size();
        }), W(B, "$exceeds_max_depth?", function() {
          var v = this, p = ee, E = ee;
          return O(p = O(E = v.maxdepth) ? L(v.include_stack.$size(), v.maxdepth["$[]"]("curr")) : E) ? v.maxdepth["$[]"]("rel") : p;
        }), S(B, "exceeded_max_depth?", "exceeds_max_depth?"), W(B, "$shift", function j() {
          var v = j.$$p || ee, p = this, E = ee;
          return j.$$p = null, O(p.unescape_next_line) ? (p.unescape_next_line = !1, (E = We(p, st(p, "shift", j, !1, !0), "shift", [], v)).$slice(1, E.$length())) : We(p, st(p, "shift", j, !1, !0), "shift", [], v);
        }), W(B, "$include_processors?", function() {
          var v = this;
          return O(v.include_processor_extensions["$nil?"]()) ? O(v.document["$extensions?"]()) && O(v.document.$extensions()["$include_processors?"]()) ? (v.include_processor_extensions = v.document.$extensions().$include_processors())["$!"]()["$!"]() : v.include_processor_extensions = !1 : v.include_processor_extensions["$!="](!1);
        }), W(B, "$create_include_cursor", function(v, p, E) {
          var M = ee;
          return V(U("String"), v) ? M = U("File").$dirname(v) : O(oe("RUBY_ENGINE_OPAL")) ? M = U("File").$dirname(v = v.$to_s()) : (M = Fe(M = U("File").$dirname(v.$path()), "") ? "/" : M, v = v.$to_s()), oe("Cursor").$new(v, M, p, E);
        }), W(B, "$to_s", function() {
          var v = this;
          return "#<" + v.$class() + "@" + v.$object_id() + " {path: " + v.path.$inspect() + ", line: " + v.lineno + ", include depth: " + v.include_stack.$size() + ", include stack: [" + xe(v.include_stack, "map", [], function(E) {
            return E == null && (E = ee), E.$to_s();
          }).$join(", ") + "]}>";
        }), B.$private(), W(B, "$prepare_lines", function j(v, p) {
          var E = j.$$p || ee, M = this, x = ee, T = ee, q = ee, K = ee;
          if (j.$$p = null, p == null && (p = Z([], {})), x = We(M, st(M, "prepare_lines", j, !1, !0), "prepare_lines", [v, p], E), O(M.document) && O(M.document.$attributes()["$[]"]("skip-front-matter")) && O(T = M["$skip_front_matter!"](x)) && M.document.$attributes()["$[]="]("front-matter", T.$join(oe("LF"))), O(p.$fetch("condense", !0)))
            for (; O(O(q = K = x["$[]"](-1)) ? K["$empty?"]() : q); )
              x.$pop();
          return O(p["$[]"]("indent")) && oe("Parser")["$adjust_indentation!"](x, p["$[]"]("indent").$to_i(), M.document.$attr("tabsize").$to_i()), x;
        }, -2), W(B, "$process_line", function(v) {
          var p, E = this;
          return O(E.process_lines) ? O(v["$empty?"]()) ? (E.look_ahead = $e(E.look_ahead, 1), v) : O(v["$end_with?"]("]")) && Be(v["$start_with?"]("[")) && O(v["$include?"]("::")) ? O(v["$include?"]("if")) && O(oe("ConditionalDirectiveRx")["$=~"](v)) ? Fe((p = je["~"]) === ee ? ee : p["$[]"](1), "\\") ? (E.unescape_next_line = !0, E.look_ahead = $e(E.look_ahead, 1), v.$slice(1, v.$length())) : O(E.$preprocess_conditional_directive((p = je["~"]) === ee ? ee : p["$[]"](2), (p = je["~"]) === ee ? ee : p["$[]"](3), (p = je["~"]) === ee ? ee : p["$[]"](4), (p = je["~"]) === ee ? ee : p["$[]"](5))) ? (E.$shift(), ee) : (E.look_ahead = $e(E.look_ahead, 1), v) : O(E.skipping) ? (E.$shift(), ee) : O(v["$start_with?"]("inc", "\\inc")) && O(oe("IncludeDirectiveRx")["$=~"](v)) ? Fe((p = je["~"]) === ee ? ee : p["$[]"](1), "\\") ? (E.unescape_next_line = !0, E.look_ahead = $e(E.look_ahead, 1), v.$slice(1, v.$length())) : O(E.$preprocess_include_directive((p = je["~"]) === ee ? ee : p["$[]"](2), (p = je["~"]) === ee ? ee : p["$[]"](3))) ? ee : (E.look_ahead = $e(E.look_ahead, 1), v) : (E.look_ahead = $e(E.look_ahead, 1), v) : O(E.skipping) ? (E.$shift(), ee) : (E.look_ahead = $e(E.look_ahead, 1), v) : v;
        }), W(B, "$preprocess_conditional_directive", function(v, p, E, M) {
          var x, T = this, q = ee, K = ee, me = ee, ue = ee, ye = ee, Pe = ee;
          if (O(q = p["$empty?"]()) || (p = p.$downcase()), Fe(v, "endif"))
            return O(M) ? T.$logger().$error(T.$message_with_context("malformed preprocessor directive - text not permitted: endif::" + p + "[" + M + "]", Z(["source_location"], { source_location: T.$cursor() }))) : O(T.conditional_stack["$empty?"]()) ? T.$logger().$error(T.$message_with_context("unmatched preprocessor directive: endif::" + p + "[]", Z(["source_location"], { source_location: T.$cursor() }))) : O(q) || Fe(p, (K = T.conditional_stack["$[]"](-1))["$[]"]("target")) ? (T.conditional_stack.$pop(), T.skipping = O(T.conditional_stack["$empty?"]()) ? !1 : T.conditional_stack["$[]"](-1)["$[]"]("skipping")) : T.$logger().$error(T.$message_with_context("mismatched preprocessor directive: endif::" + p + "[], expected endif::" + K["$[]"]("target") + "[]", Z(["source_location"], { source_location: T.$cursor() }))), !0;
          if (O(T.skipping))
            me = !1;
          else
            switch (v) {
              case "ifdef":
                if (O(q))
                  return T.$logger().$error(T.$message_with_context("malformed preprocessor directive - missing target: ifdef::[" + M + "]", Z(["source_location"], { source_location: T.$cursor() }))), !0;
                switch (E) {
                  case ",":
                    me = xe(p.$split(",", -1), "none?", [], function Ve(et) {
                      var at = Ve.$$s == null ? this : Ve.$$s;
                      return at.document == null && (at.document = ee), et == null && (et = ee), at.document.$attributes()["$key?"](et);
                    }, { $$s: T });
                    break;
                  case "+":
                    me = xe(p.$split("+", -1), "any?", [], function Ve(et) {
                      var at = Ve.$$s == null ? this : Ve.$$s;
                      return at.document == null && (at.document = ee), et == null && (et = ee), at.document.$attributes()["$key?"](et)["$!"]();
                    }, { $$s: T });
                    break;
                  default:
                    me = T.document.$attributes()["$key?"](p)["$!"]();
                }
                break;
              case "ifndef":
                if (O(q))
                  return T.$logger().$error(T.$message_with_context("malformed preprocessor directive - missing target: ifndef::[" + M + "]", Z(["source_location"], { source_location: T.$cursor() }))), !0;
                switch (E) {
                  case ",":
                    me = xe(p.$split(",", -1), "any?", [], function Ve(et) {
                      var at = Ve.$$s == null ? this : Ve.$$s;
                      return at.document == null && (at.document = ee), et == null && (et = ee), at.document.$attributes()["$key?"](et);
                    }, { $$s: T });
                    break;
                  case "+":
                    me = xe(p.$split("+", -1), "all?", [], function Ve(et) {
                      var at = Ve.$$s == null ? this : Ve.$$s;
                      return at.document == null && (at.document = ee), et == null && (et = ee), at.document.$attributes()["$key?"](et);
                    }, { $$s: T });
                    break;
                  default:
                    me = T.document.$attributes()["$key?"](p);
                }
                break;
              case "ifeval":
                if (O(q))
                  if (O(M) && O(oe("EvalExpressionRx")["$=~"](M.$strip())))
                    ue = (x = je["~"]) === ee ? ee : x["$[]"](1), ye = (x = je["~"]) === ee ? ee : x["$[]"](2), Pe = (x = je["~"]) === ee ? ee : x["$[]"](3), me = function() {
                      try {
                        return !O(T.$resolve_expr_val(ue).$send(ye, T.$resolve_expr_val(Pe)));
                      } catch (Ve) {
                        if (u.rescue(Ve, [oe("StandardError")]))
                          try {
                            return !0;
                          } finally {
                            u.pop_exception();
                          }
                        else
                          throw Ve;
                      }
                    }();
                  else
                    return T.$logger().$error(T.$message_with_context("malformed preprocessor directive - " + (O(M) ? "invalid expression" : "missing expression") + ": ifeval::[" + M + "]", Z(["source_location"], { source_location: T.$cursor() }))), !0;
                else
                  return T.$logger().$error(T.$message_with_context("malformed preprocessor directive - target not permitted: ifeval::" + p + "[" + M + "]", Z(["source_location"], { source_location: T.$cursor() }))), !0;
                break;
            }
          return Fe(v, "ifeval") || Be(M) ? (O(me) && (T.skipping = !0), T.conditional_stack["$<<"](Z(["target", "skip", "skipping"], { target: p, skip: me, skipping: T.skipping }))) : O(T.skipping) || O(me) || (T.$replace_next_line(M.$rstrip()), T.$unshift(""), O(M["$start_with?"]("include::")) && (T.look_ahead = He(T.look_ahead, 1))), !0;
        }), W(B, "$preprocess_include_directive", function(v, p) {
          var E, M, x = this, T = ee, q = ee, K = ee, me = ee, ue = ee, ye = ee, Pe = ee, Ve = ee, et = ee, at = ee, rt = ee, ft = ee, _t = ee, ht = ee, pt = ee, vt = ee, Et = ee, Pt = ee, Nt = ee, Yt = ee, Ft = ee, Dt = ee, Lt = ee, Bt = ee, Xt = ee, Jr = ee, yr = ee;
          if (T = x.document, O((q = v)["$include?"](oe("ATTR_REF_HEAD"))) && O((q = T.$sub_attributes(v, Z(["attribute_missing"], { attribute_missing: Fe(K = O(me = T.$attributes()["$[]"]("attribute-missing")) ? me : oe("Compliance").$attribute_missing(), "warn") ? "drop-line" : K })))["$empty?"]()))
            return Fe(K, "drop-line") && O(T.$sub_attributes($e(v, " "), Z(["attribute_missing", "drop_line_severity"], { attribute_missing: "drop-line", drop_line_severity: "ignore" }))["$empty?"]()) ? (xe(x.$logger(), "info", [], function qt() {
              var Mt = qt.$$s == null ? this : qt.$$s;
              return Mt.$message_with_context("include dropped due to missing attribute: include::" + v + "[" + p + "]", Z(["source_location"], { source_location: Mt.$cursor() }));
            }, { $$s: x }), x.$shift(), !0) : O(T.$parse_attributes(p, [], Z(["sub_input"], { sub_input: !0 }))["$[]"]("optional-option")) ? (xe(x.$logger(), "info", [], function qt() {
              var Mt = qt.$$s == null ? this : qt.$$s;
              return Mt.$message_with_context("optional include dropped " + (Fe(K, "warn") && O(T.$sub_attributes($e(v, " "), Z(["attribute_missing", "drop_line_severity"], { attribute_missing: "drop-line", drop_line_severity: "ignore" }))["$empty?"]()) ? "due to missing attribute" : "because resolved target is blank") + ": include::" + v + "[" + p + "]", Z(["source_location"], { source_location: Mt.$cursor() }));
            }, { $$s: x }), x.$shift(), !0) : (x.$logger().$warn(x.$message_with_context("include dropped " + (Fe(K, "warn") && O(T.$sub_attributes($e(v, " "), Z(["attribute_missing", "drop_line_severity"], { attribute_missing: "drop-line", drop_line_severity: "ignore" }))["$empty?"]()) ? "due to missing attribute" : "because resolved target is blank") + ": include::" + v + "[" + p + "]", Z(["source_location"], { source_location: x.$cursor() }))), x.$replace_next_line("Unresolved directive in " + x.path + " - include::" + v + "[" + p + "]"));
          if (O(x["$include_processors?"]()) && O(ue = xe(x.include_processor_extensions, "find", [], function(Mt) {
            return Mt == null && (Mt = ee), Mt.$instance()["$handles?"](q);
          })))
            return x.$shift(), ue.$process_method()["$[]"](T, x, q, T.$parse_attributes(p, [], Z(["sub_input"], { sub_input: !0 }))), !0;
          if (O(L(T.$safe(), U(oe("SafeMode"), "SECURE"))))
            return x.$replace_next_line("link:" + q + "[role=include]");
          if (O(x.maxdepth)) {
            if (O(L(x.include_stack.$size(), x.maxdepth["$[]"]("curr"))))
              return x.$logger().$error(x.$message_with_context("maximum include depth of " + x.maxdepth["$[]"]("rel") + " exceeded", Z(["source_location"], { source_location: x.$cursor() }))), ee;
            switch (ye = T.$parse_attributes(p, [], Z(["sub_input"], { sub_input: !0 })), M = x.$resolve_include_path(q, p, ye), E = ke(M), Pe = E[0] == null ? ee : E[0], Ve = E[1] == null ? ee : E[1], et = E[2] == null ? ee : E[2], Ve) {
              case "file":
                at = U("File").$method("open"), rt = oe("FILE_READ_MODE");
                break;
              case "uri":
                at = U("OpenURI").$method("open_uri"), rt = oe("URI_READ_MODE");
                break;
              default:
                return Pe;
            }
            if (O(oe("RUBY_ENGINE_OPAL")) || O(ft = ye["$[]"]("encoding")) && O(function() {
              try {
                return U("Encoding").$find(ft);
              } catch (qt) {
                if (u.rescue(qt, [oe("StandardError")]))
                  try {
                    return ee;
                  } finally {
                    u.pop_exception();
                  }
                else
                  throw qt;
              }
            }()) && ((_t = rt.$split(":"))["$[]="](1, ft), rt = _t.$join(":")), ht = pt = ee, O(p) && (O(ye["$key?"]("lines")) ? (ht = [], xe(x.$split_delimited_value(ye["$[]"]("lines")), "each", [], function(Mt) {
              var Ut, fr, It = ee, sr = ee;
              return Mt == null && (Mt = ee), O(Mt["$include?"]("..")) ? (fr = Mt.$partition(".."), Ut = ke(fr), It = Ut[0] == null ? ee : Ut[0], Ut[1] == null || Ut[1], sr = Ut[2] == null ? ee : Ut[2], ht = $e(ht, O(sr["$empty?"]()) || O(k(sr = sr.$to_i(), 0)) ? [It.$to_i(), U(U("Float"), "INFINITY")] : u.Range.$new(It.$to_i(), sr, !1).$to_a())) : ht["$<<"](Mt.$to_i());
            }), ht = O(ht["$empty?"]()) ? ee : ht.$sort().$uniq()) : O(ye["$key?"]("tag")) ? O((vt = ye["$[]"]("tag"))["$empty?"]()) || Fe(vt, "!") || (pt = O(vt["$start_with?"]("!")) ? Ze(vt.$slice(1, vt.$length()), !1) : Ze(vt, !0)) : O(ye["$key?"]("tags")) && (pt = Z([], {}), xe(x.$split_delimited_value(ye["$[]"]("tags")), "each", [], function(Mt) {
              var Ut;
              return Mt == null && (Mt = ee), O(Mt["$empty?"]()) || Fe(Mt, "!") ? ee : O(Mt["$start_with?"]("!")) ? (Ut = [Mt.$slice(1, Mt.$length()), !1], xe(pt, "[]=", Ut), Ut[Ut.length - 1]) : (Ut = [Mt, !0], xe(pt, "[]=", Ut), Ut[Ut.length - 1]);
            }), O(pt["$empty?"]()) && (pt = ee))), O(ht)) {
              E = [[], ee, 0], Et = E[0], Pt = E[1], Nt = E[2];
              try {
                xe(at, "call", [Pe, rt], function(Mt) {
                  var Ut = ee;
                  return Mt == null && (Mt = ee), Ut = ee, function() {
                    try {
                      var fr = De("break");
                      return xe(Mt, "each_line", [], function(sr) {
                        var Ar = ee;
                        if (sr == null && (sr = ee), Nt = $e(Nt, 1), O(Ut) || V(U("Float"), Ar = ht["$[]"](0)) && O(Ut = Ar["$infinite?"]()))
                          return Pt = O(me = Pt) ? me : Nt, Et["$<<"](sr);
                        if (Fe(Ar, Nt) && (Pt = O(me = Pt) ? me : Nt, Et["$<<"](sr), ht.$shift()), O(ht["$empty?"]()))
                          fr.$throw();
                        else
                          return ee;
                      });
                    } catch (It) {
                      if (It === fr)
                        return It.$v;
                      throw It;
                    }
                  }();
                });
              } catch (qt) {
                if (u.rescue(qt, [oe("StandardError")]))
                  try {
                    return x.$logger().$error(x.$message_with_context("include " + Ve + " not readable: " + Pe, Z(["source_location"], { source_location: x.$cursor() }))), x.$replace_next_line("Unresolved directive in " + x.path + " - include::" + q + "[" + p + "]");
                  } finally {
                    u.pop_exception();
                  }
                else
                  throw qt;
              }
              x.$shift(), O(Pt) && (ye["$[]="]("partial-option", ""), x.$push_include(Et, Pe, et, Pt, ye));
            } else if (O(pt)) {
              E = [[], ee, 0, [], U("Set").$new(), ee], Et = E[0], Pt = E[1], Nt = E[2], Yt = E[3], Ft = E[4], Dt = E[5], O(pt["$key?"]("**")) ? (Lt = Bt = pt.$delete("**"), O(pt["$key?"]("*")) ? Xt = pt.$delete("*") : Be(Lt) && Fe(pt.$values().$first(), !1) && (Xt = !0)) : O(pt["$key?"]("*")) ? Fe(pt.$keys().$first(), "*") ? Lt = Bt = (Xt = pt.$delete("*"))["$!"]() : (Lt = Bt = !1, Xt = pt.$delete("*")) : Lt = Bt = pt["$value?"](!0)["$!"]();
              try {
                xe(at, "call", [Pe, rt], function qt(Mt) {
                  var Ut, fr = qt.$$s == null ? this : qt.$$s, It = ee, sr = ee;
                  return Mt == null && (Mt = ee), Ut = ["::", "[]"], It = Ut[0], sr = Ut[1], xe(Mt, "each_line", [], function Ar(pr) {
                    var cr, en, br = Ar.$$s == null ? this : Ar.$$s, Lr = ee, Ts = ee, Cs = ee;
                    return pr == null && (pr = ee), Nt = $e(Nt, 1), O(pr["$include?"](It)) && O(pr["$include?"](sr)) && O(oe("TagDirectiveRx")["$=~"](pr)) ? (Lr = (cr = je["~"]) === ee ? ee : cr["$[]"](2), O((cr = je["~"]) === ee ? ee : cr["$[]"](1)) ? Fe(Lr, Dt) ? (Yt.$pop(), en = O(Yt["$empty?"]()) ? [ee, Bt] : Yt["$[]"](-1), cr = ke(en), Dt = cr[0] == null ? ee : cr[0], Lt = cr[1] == null ? ee : cr[1], en) : O(pt["$key?"](Lr)) ? (Ts = br.$create_include_cursor(Pe, q, Nt), O(Cs = xe(Yt, "rindex", [], function(ws) {
                      return ws == null && (ws = ee), ws["$=="](Lr);
                    }, { $$has_trailing_comma_in_args: !0 })) ? (Fe(Cs, 0) ? Yt.$shift() : Yt.$delete_at(Cs), br.$logger().$warn(br.$message_with_context("mismatched end tag (expected '" + Dt + "' but found '" + Lr + "') at line " + Nt + " of include " + Ve + ": " + Pe, Z(["source_location", "include_location"], { source_location: br.$cursor(), include_location: Ts })))) : br.$logger().$warn(br.$message_with_context("unexpected end tag '" + Lr + "' at line " + Nt + " of include " + Ve + ": " + Pe, Z(["source_location", "include_location"], { source_location: br.$cursor(), include_location: Ts })))) : ee : O(pt["$key?"](Lr)) ? (O(Lt = pt["$[]"](Lr)) && Ft["$<<"](Lr), Yt["$<<"]([Dt = Lr, Lt, Nt])) : Be(Xt["$nil?"]()) ? (Lt = O(Dt) && Be(Lt) ? !1 : Xt, Yt["$<<"]([Dt = Lr, Lt, Nt])) : ee) : O(Lt) ? (Pt = O(me = Pt) ? me : Nt, Et["$<<"](pr)) : ee;
                  }, { $$s: fr });
                }, { $$s: x });
              } catch (qt) {
                if (u.rescue(qt, [oe("StandardError")]))
                  try {
                    return x.$logger().$error(x.$message_with_context("include " + Ve + " not readable: " + Pe, Z(["source_location"], { source_location: x.$cursor() }))), x.$replace_next_line("Unresolved directive in " + x.path + " - include::" + q + "[" + p + "]");
                  } finally {
                    u.pop_exception();
                  }
                else
                  throw qt;
              }
              O(Yt["$empty?"]()) || xe(Yt, "each", [], function qt(Mt, Ut, fr) {
                var It = qt.$$s == null ? this : qt.$$s;
                return Mt == null && (Mt = ee), fr == null && (fr = ee), It.$logger().$warn(It.$message_with_context("detected unclosed tag '" + Mt + "' starting at line " + fr + " of include " + Ve + ": " + Pe, Z(["source_location", "include_location"], { source_location: It.$cursor(), include_location: It.$create_include_cursor(Pe, q, fr) })));
              }, { $$s: x }), O((Jr = He(xe(pt, "keep_if", [], function(Mt, Ut) {
                return Ut == null && (Ut = ee), Ut;
              }).$keys(), Ft.$to_a()))["$empty?"]()) || x.$logger().$warn(x.$message_with_context("tag" + (O(Ke(Jr.$size(), 1)) ? "s" : "") + " '" + Jr.$join(", ") + "' not found in include " + Ve + ": " + Pe, Z(["source_location"], { source_location: x.$cursor() }))), x.$shift(), O(Pt) && (O(Bt) && Ge(Xt, !1) && O(pt["$empty?"]()) || ye["$[]="]("partial-option", ""), x.$push_include(Et, Pe, et, Pt, ye));
            } else {
              yr = ee;
              try {
                yr = xe(at, "call", [Pe, rt], function(Mt) {
                  return Mt == null && (Mt = ee), Mt.$read();
                }), x.$shift();
              } catch (qt) {
                if (u.rescue(qt, [oe("StandardError")]))
                  try {
                    return x.$logger().$error(x.$message_with_context("include " + Ve + " not readable: " + Pe, Z(["source_location"], { source_location: x.$cursor() }))), x.$replace_next_line("Unresolved directive in " + x.path + " - include::" + q + "[" + p + "]");
                  } finally {
                    u.pop_exception();
                  }
                else
                  throw qt;
              }
              x.$push_include(yr, Pe, et, 1, ye);
            }
            return !0;
          } else
            return ee;
        }), W(B, "$resolve_include_path", function(v, p, E) {
          var M, x = this, T = ee, q = ee, K = ee;
          return T = x.document, O(oe("Helpers")["$uriish?"](v)) || O(V(U("String"), x.dir) ? ee : v = "" + x.dir + "/" + v) ? O(T["$attr?"]("allow-uri-read")) ? (O(T["$attr?"]("cache-uri")) ? O((M = U("::", "OpenURI", "skip_raise")) && U(M, "Cache", "skip_raise") ? "constant" : ee) || oe("Helpers").$require_library("open-uri/cached", "open-uri-cached") : Be(oe("RUBY_ENGINE_OPAL")) && U("OpenURI"), [U("URI").$parse(v), "uri", v]) : x.$replace_next_line("link:" + v + "[role=include]") : (q = T.$normalize_system_path(v, x.dir, ee, Z(["target_name"], { target_name: "include file" })), O(U("File")["$file?"](q)) ? (K = T.$path_resolver().$relative_path(q, T.$base_dir()), [q, "file", K]) : O(E["$[]"]("optional-option")) ? (xe(x.$logger(), "info", [], function me() {
            var ue = me.$$s == null ? this : me.$$s;
            return ue.$message_with_context("optional include dropped because include file not found: " + q, Z(["source_location"], { source_location: ue.$cursor() }));
          }, { $$s: x }), x.$shift(), !0) : (x.$logger().$error(x.$message_with_context("include file not found: " + q, Z(["source_location"], { source_location: x.$cursor() }))), x.$replace_next_line("Unresolved directive in " + x.path + " - include::" + v + "[" + p + "]")));
        }), W(B, "$pop_include", function() {
          var v, p, E = this;
          return O(E.include_stack["$empty?"]()) || (p = E.include_stack.$pop(), v = ke(p), E.lines = v[0] == null ? ee : v[0], E.file = v[1] == null ? ee : v[1], E.dir = v[2] == null ? ee : v[2], E.path = v[3] == null ? ee : v[3], E.lineno = v[4] == null ? ee : v[4], E.maxdepth = v[5] == null ? ee : v[5], E.process_lines = v[6] == null ? ee : v[6], E.look_ahead = 0), ee;
        }), W(B, "$split_delimited_value", function(v) {
          return O(v["$include?"](",")) ? v.$split(",") : v.$split(";");
        }), W(B, "$skip_front_matter!", function(v, p) {
          var E = this, M = ee, x = ee, T = ee, q = ee, K = ee;
          if (p == null && (p = !0), !Fe(M = v["$[]"](0), "---"))
            return ee;
          for (x = v.$drop(0), v.$shift(), T = [], O(p) && (E.lineno = $e(E.lineno, 1)); !O(O(q = K = v["$empty?"]()) ? q : v["$[]"](0)["$=="](M)); )
            T["$<<"](v.$shift()), O(p) && (E.lineno = $e(E.lineno, 1));
          return O(K) ? (xe(v, "unshift", tt(x)), O(p) && (E.lineno = He(E.lineno, x.$size())), ee) : (v.$shift(), O(p) && (E.lineno = $e(E.lineno, 1)), T);
        }, -2), W(B, "$resolve_expr_val", function(v) {
          var p = this, E = ee;
          return O(v["$start_with?"]('"')) && O(v["$end_with?"]('"')) || O(v["$start_with?"]("'")) && O(v["$end_with?"]("'")) ? (E = !0, v = v.$slice(1, He(v.$length(), 1))) : E = !1, O(v["$include?"](oe("ATTR_REF_HEAD"))) && (v = p.document.$sub_attributes(v, Z(["attribute_missing"], { attribute_missing: "drop" }))), O(E) ? v : O(v["$empty?"]()) ? ee : Fe(v, "true") ? !0 : Fe(v, "false") ? !1 : O(v.$rstrip()["$empty?"]()) ? " " : O(v["$include?"](".")) ? v.$to_f() : v.$to_i();
        });
      }(Ae[0], de("Reader"), Ae);
    }(nt[0], nt);
  }, Opal.modules["asciidoctor/section"] = function(u) {
    var se = u.module, re = u.klass, W = u.hash2, $e = u.send2, S = u.find_super, Z = u.eqeqeq, Be = u.truthy, V = u.rb_plus, ke = u.def, O = u.alias, Ke = u.rb_gt, xe = u.eqeq, He = u.not, De = u.send, Fe = u.defs, ot = [], Ge = u.nil;
    return u.add_stubs("attr_accessor,attr_reader,===,+,level,special,title,generate_id,>,==,sectnum,!,empty?,reftext,sub_placeholder,sub_quotes,compat_mode,[],attributes,context,assign_numeral,class,object_id,inspect,size,[]=,chr,length,gsub,downcase,delete,tr_s,end_with?,chop,start_with?,slice,key?,catalog,unique_id_start_index"), function(tt, Ye) {
      var We = se(tt, "Asciidoctor"), st = [We].concat(Ye), L = u.$r(st);
      return function(je, k, Ze) {
        var nt = re(je, k, "Section"), ee = [nt].concat(Ze), U = u.$r(ee), ze = nt.$$prototype;
        return ze.document = ze.next_section_index = ze.parent = ze.level = ze.numeral = ze.numbered = ze.sectname = ze.title = ze.blocks = Ge, nt.$attr_accessor("index"), nt.$attr_accessor("sectname"), nt.$attr_accessor("special"), nt.$attr_accessor("numbered"), nt.$attr_reader("caption"), ke(nt, "$initialize", function Se(Ie, Ae, de, Ee) {
          var te;
          Se.$$p;
          var G = this, B = Ge;
          return Se.$$p = null, Ie == null && (Ie = Ge), Ae == null && (Ae = Ge), de == null && (de = !1), Ee == null && (Ee = W([], {})), $e(G, S(G, "initialize", Se, !1, !0), "initialize", [Ie, "section", Ee], null), Z(U("Section"), Ie) ? (te = [Be(B = Ae) ? B : V(Ie.$level(), 1), Ie.$special()], G.level = te[0], G.special = te[1]) : (te = [Be(B = Ae) ? B : 1, !1], G.level = te[0], G.special = te[1]), G.numbered = de, G.index = 0;
        }, -1), O(nt, "name", "title"), ke(nt, "$generate_id", function() {
          var Ie = this;
          return U("Section").$generate_id(Ie.$title(), Ie.document);
        }), ke(nt, "$sections?", function() {
          var Ie = this;
          return Ke(Ie.next_section_index, 0);
        }), ke(nt, "$sectnum", function(Ie, Ae) {
          var de = this, Ee = Ge;
          return Ie == null && (Ie = "."), Ae == null && (Ae = Ge), Ae = Be(Ee = Ae) ? Ee : xe(Ae, !1) ? "" : Ie, Be(Ke(de.level, 1)) && Z(U("Section"), de.parent) ? "" + de.parent.$sectnum(Ie, Ie) + de.numeral + Ae : "" + de.numeral + Ae;
        }, -1), ke(nt, "$xreftext", function(Ie) {
          var Ae = this, de = Ge, Ee = Ge, te = Ge, G = Ge;
          if (Ie == null && (Ie = Ge), Be(de = Ae.$reftext()) && He(de["$empty?"]()))
            return de;
          if (Be(Ie))
            if (Be(Ae.numbered))
              switch (Ie) {
                case "full":
                  return xe(Ee = Ae.sectname, "chapter") || xe(Ee, "appendix") ? te = Ae.$sub_placeholder(Ae.$sub_quotes("_%s_"), Ae.$title()) : te = Ae.$sub_placeholder(Ae.$sub_quotes(Be(Ae.document.$compat_mode()) ? "``%s''" : '"`%s`"'), Ae.$title()), Be(G = Ae.document.$attributes()["$[]"]("" + Ee + "-refsig")) ? "" + G + " " + Ae.$sectnum(".", ",") + " " + te : "" + Ae.$sectnum(".", ",") + " " + te;
                case "short":
                  return Be(G = Ae.document.$attributes()["$[]"]("" + Ae.sectname + "-refsig")) ? "" + G + " " + Ae.$sectnum(".", "") : Ae.$sectnum(".", "");
                default:
                  return xe(Ee = Ae.sectname, "chapter") || xe(Ee, "appendix") ? Ae.$sub_placeholder(Ae.$sub_quotes("_%s_"), Ae.$title()) : Ae.$title();
              }
            else
              return xe(Ee = Ae.sectname, "chapter") || xe(Ee, "appendix") ? Ae.$sub_placeholder(Ae.$sub_quotes("_%s_"), Ae.$title()) : Ae.$title();
          else
            return Ae.$title();
        }, -1), ke(nt, "$<<", function Se(Ie) {
          var Ae = Se.$$p || Ge, de = this;
          return Se.$$p = null, xe(Ie.$context(), "section") && de.$assign_numeral(Ie), $e(de, S(de, "<<", Se, !1, !0), "<<", [Ie], Ae);
        }), ke(nt, "$to_s", function Se() {
          var Ie = Se.$$p || Ge, Ae = this, de = Ge;
          return Se.$$p = null, Be(Ae.title) ? (de = Be(Ae.numbered) ? "" + Ae.$sectnum() + " " + Ae.title : Ae.title, "#<" + Ae.$class() + "@" + Ae.$object_id() + " {level: " + Ae.level + ", title: " + de.$inspect() + ", blocks: " + Ae.blocks.$size() + "}>") : $e(Ae, S(Ae, "to_s", Se, !1, !0), "to_s", [], Ie);
        }), Fe(nt, "$generate_id", function(Ie, Ae) {
          var de, Ee = Ge, te = Ge, G = Ge, B = Ge, le = Ge, oe = Ge, he = Ge, j = Ge, v = Ge, p = Ge;
          if (Ee = Ae.$attributes(), te = Be(G = Ee["$[]"]("idprefix")) ? G : "_", Be(B = Ee["$[]"]("idseparator")) ? (xe(B.$length(), 1) || He(le = B["$empty?"]()) && Be(B = (de = ["idseparator", B.$chr()], De(Ee, "[]=", de), de[de.length - 1]))) && (oe = xe(B, "-") || xe(B, ".") ? " .-" : " " + B + ".-") : (de = ["_", " _.-"], B = de[0], oe = de[1]), he = "" + te + Ie.$downcase().$gsub(U("InvalidSectionIdCharsRx"), ""), Be(le) ? he = he.$delete(" ") : (he = he.$tr_s(oe, B), Be(he["$end_with?"](B)) && (he = he.$chop()), Be(te["$empty?"]()) && Be(he["$start_with?"](B)) && (he = he.$slice(1, he.$length()))), Be(Ae.$catalog()["$[]"]("refs")["$key?"](he))) {
            for (j = Ae.$catalog()["$[]"]("refs"), v = U("Compliance").$unique_id_start_index(); Be(j["$[]"](p = "" + he + B + v)); )
              v = V(v, 1);
            return p;
          } else
            return he;
        });
      }(st[0], L("AbstractBlock"), st);
    }(ot[0], ot);
  }, Opal.modules["asciidoctor/stylesheets"] = function(u) {
    var se = u.module, re = u.klass, W = u.const_set, $e = u.return_ivar, S = u.defs, Z = u.def, Be = u.truthy, V = u.hash2, ke = [], O = u.nil, Ke = u.$$$;
    return u.add_stubs("join,new,rstrip,read,primary_stylesheet_data,write,primary_stylesheet_name,stylesheet_basename,for,read_stylesheet,coderay_stylesheet_data,coderay_stylesheet_name,pygments_stylesheet_data,pygments_stylesheet_name"), function(xe, He) {
      var De = se(xe, "Asciidoctor"), Fe = [De].concat(He);
      return function(ot, Ge, tt) {
        var Ye = re(ot, Ge, "Stylesheets"), We = [Ye].concat(tt), st = u.$r(We), L = Ye.$$prototype;
        return L.primary_stylesheet_data = O, W(We[0], "DEFAULT_STYLESHEET_NAME", "asciidoctor.css"), W(We[0], "STYLESHEETS_DIR", Ke("File").$join(st("DATA_DIR"), "stylesheets")), Ye.__instance__ = Ye.$new(), S(Ye, "$instance", $e("__instance__")), Z(Ye, "$primary_stylesheet_name", function() {
          return st("DEFAULT_STYLESHEET_NAME");
        }), Z(Ye, "$primary_stylesheet_data", function() {
          var k = this, Ze = O;
          return k.primary_stylesheet_data = Be(Ze = k.primary_stylesheet_data) ? Ze : Ke("File").$read(Ke("File").$join(st("STYLESHEETS_DIR"), "asciidoctor-default.css"), V(["mode"], { mode: st("FILE_READ_MODE") })).$rstrip();
        }), Z(Ye, "$embed_primary_stylesheet", function() {
          var k = this;
          return `<style>
` + k.$primary_stylesheet_data() + `
</style>`;
        }), Z(Ye, "$write_primary_stylesheet", function(k) {
          var Ze = this;
          return k == null && (k = "."), Ke("File").$write(Ke("File").$join(k, Ze.$primary_stylesheet_name()), Ze.$primary_stylesheet_data(), V(["mode"], { mode: st("FILE_WRITE_MODE") }));
        }, -1), Z(Ye, "$coderay_stylesheet_name", function() {
          return st("SyntaxHighlighter").$for("coderay").$stylesheet_basename();
        }), Z(Ye, "$coderay_stylesheet_data", function() {
          return st("SyntaxHighlighter").$for("coderay").$read_stylesheet();
        }), Z(Ye, "$embed_coderay_stylesheet", function() {
          var k = this;
          return `<style>
` + k.$coderay_stylesheet_data() + `
</style>`;
        }), Z(Ye, "$write_coderay_stylesheet", function(k) {
          var Ze = this;
          return k == null && (k = "."), Ke("File").$write(Ke("File").$join(k, Ze.$coderay_stylesheet_name()), Ze.$coderay_stylesheet_data(), V(["mode"], { mode: st("FILE_WRITE_MODE") }));
        }, -1), Z(Ye, "$pygments_stylesheet_name", function(k) {
          return k == null && (k = O), st("SyntaxHighlighter").$for("pygments").$stylesheet_basename(k);
        }, -1), Z(Ye, "$pygments_stylesheet_data", function(k) {
          return k == null && (k = O), st("SyntaxHighlighter").$for("pygments").$read_stylesheet(k);
        }, -1), Z(Ye, "$embed_pygments_stylesheet", function(k) {
          var Ze = this;
          return k == null && (k = O), `<style>
` + Ze.$pygments_stylesheet_data(k) + `
</style>`;
        }, -1), Z(Ye, "$write_pygments_stylesheet", function(k, Ze) {
          var nt = this;
          return k == null && (k = "."), Ze == null && (Ze = O), Ke("File").$write(Ke("File").$join(k, nt.$pygments_stylesheet_name(Ze)), nt.$pygments_stylesheet_data(Ze), V(["mode"], { mode: st("FILE_WRITE_MODE") }));
        }, -1);
      }(Fe[0], null, Fe);
    }(ke[0], ke);
  }, Opal.modules["asciidoctor/table"] = function(u) {
    var se = u.module, re = u.klass, W = u.const_set, $e = u.def, S = u.alias, Z = u.hash2, Be = u.send2, V = u.find_super, ke = u.truthy, O = u.rb_lt, Ke = u.rb_gt, xe = u.eqeq, He = u.rb_times, De = u.rb_divide, Fe = u.send, ot = u.rb_plus, Ge = u.rb_minus, tt = u.return_val, Ye = u.to_a, We = u.gvars, st = u.neqeq, L = u.return_ivar, je = u.to_ary, k = u.regexp, Ze = u.not, nt = u.thrower, ee = [], U = u.nil, ze = u.$$$;
    return u.add_stubs("attr_accessor,send,attr_reader,new,[],<,>,to_i,==,[]=,attributes,truncate,*,/,to_f,empty?,body,each,<<,size,+,assign_column_widths,warn,logger,-,update_attributes,assign_width,round,head=,map,shift,reinitialize,nil?,unshift,foot=,pop,parent,sourcemap,dup,header_row?,table,style,merge,delete,start_with?,rstrip,slice,length,advance,lstrip,strip,split,include?,readlines,catalog_inline_anchor,=~,apply_subs,attr_writer,convert,text,!=,file,lineno,include,to_set,mark,key?,nested?,document,error,message_with_context,cursor_at_prev_line,nil_or_empty?,escape,columns,match,chop,end_with?,gsub,!,push_cellspec,cell_open?,close_cell,take_cellspec,squeeze,upto,times,cursor_before_mark,rowspan,activate_rowspan,colspan,end_of_row?,close_row,private,rows,effective_column_visits"), function(Se, Ie) {
      var Ae = se(Se, "Asciidoctor"), de = [Ae].concat(Ie), Ee = u.$r(de);
      return function(te, G, B) {
        var le = re(te, G, "Table"), oe = [le].concat(B), he = u.$r(oe), j = le.$$prototype;
        return j.attributes = j.document = j.rows = j.has_header_option = j.columns = U, W(oe[0], "DEFAULT_PRECISION", 4), function(v, p) {
          var E = re(v, p, "Rows"), M = E.$$prototype;
          return M.head = M.body = M.foot = U, E.$attr_accessor("head", "foot", "body"), $e(E, "$initialize", function(T, q, K) {
            var me = this;
            return T == null && (T = []), q == null && (q = []), K == null && (K = []), me.head = T, me.foot = q, me.body = K;
          }, -1), S(E, "[]", "send"), $e(E, "$by_section", function() {
            var T = this;
            return [["head", T.head], ["body", T.body], ["foot", T.foot]];
          }), $e(E, "$to_h", function() {
            var T = this;
            return Z(["head", "body", "foot"], { head: T.head, body: T.body, foot: T.foot });
          });
        }(oe[0], null), le.$attr_accessor("columns"), le.$attr_accessor("rows"), le.$attr_accessor("has_header_option"), le.$attr_reader("caption"), $e(le, "$initialize", function v(p, E) {
          var M;
          v.$$p;
          var x = this, T = U, q = U, K = U;
          return v.$$p = null, Be(x, V(x, "initialize", v, !1, !0), "initialize", [p, "table"], null), x.rows = he("Rows").$new(), x.columns = [], x.has_header_option = !1, ke(T = E["$[]"]("width")) ? (ke(Ke(q = T.$to_i(), 100)) || ke(O(q, 1))) && (xe(q, 0) && (xe(T, "0") || xe(T, "0%")) || (q = 100)) : q = 100, x.attributes["$[]="]("tablepcwidth", q), ke(x.document.$attributes()["$[]"]("pagewidth")) && x.attributes["$[]="]("tableabswidth", xe(K = He(De(q, 100), x.document.$attributes()["$[]"]("pagewidth").$to_f()).$truncate(he("DEFAULT_PRECISION")), K.$to_i()) ? K.$to_i() : K), ke(E["$[]"]("rotate-option")) ? (M = ["orientation", "landscape"], Fe(x.attributes, "[]=", M), M[M.length - 1]) : U;
        }), $e(le, "$header_row?", function() {
          var p = this, E = U;
          return ke(E = p.has_header_option) && ke(p.rows.$body()["$empty?"]()) ? E : U;
        }), $e(le, "$create_columns", function(p) {
          var E = this, M = U, x = U, T = U, q = U;
          return M = [], x = U, T = 0, Fe(p, "each", [], function K(me) {
            var ue = K.$$s == null ? this : K.$$s, ye = U, Pe = U;
            return me == null && (me = U), ye = me["$[]"]("width"), M["$<<"](he("Column").$new(ue, M.$size(), me)), ke(O(ye, 0)) ? (x = ke(Pe = x) ? Pe : [])["$<<"](M["$[]"](-1)) : T = ot(T, ye);
          }, { $$s: E }), ke(Ke(q = (E.columns = M).$size(), 0)) && (E.attributes["$[]="]("colcount", q), ke(Ke(T, 0)) || ke(x) || (T = U), E.$assign_column_widths(T, x)), U;
        }), $e(le, "$assign_column_widths", function(p, E) {
          var M = this, x = U, T = U, q = U, K = U, me = U;
          return p == null && (p = U), E == null && (E = U), x = he("DEFAULT_PRECISION"), T = q = 0, ke(p) ? (ke(E) && (ke(Ke(p, 100)) ? (K = 0, M.$logger().$warn("total column width must not exceed 100% when using autowidth columns; got " + p + "%")) : (K = De(Ge(100, p), E.$size()).$truncate(x), xe(K.$to_i(), K) && (K = K.$to_i()), p = 100), me = Z(["width", "autowidth-option"], { width: K, "autowidth-option": "" }), Fe(E, "each", [], function(ye) {
            return ye == null && (ye = U), ye.$update_attributes(me);
          })), Fe(M.columns, "each", [], function(ye) {
            return ye == null && (ye = U), T = ot(T, q = ye.$assign_width(U, p, x));
          })) : (q = De(100, M.columns.$size()).$truncate(x), xe(q.$to_i(), q) && (q = q.$to_i()), Fe(M.columns, "each", [], function(ye) {
            return ye == null && (ye = U), T = ot(T, ye.$assign_width(q, U, x));
          })), xe(T, 100) || M.columns["$[]"](-1).$assign_width(ot(Ge(100, T), q).$round(x), U, x), U;
        }, -1), $e(le, "$partition_header_footer", function(p) {
          var E, M = this, x = U, T = U;
          return x = (E = ["rowcount", (T = M.rows.$body()).$size()], Fe(M.attributes, "[]=", E), E[E.length - 1]), ke(Ke(x, 0)) && (ke(M.has_header_option) ? (M.rows["$head="]([Fe(T.$shift(), "map", [], function(K) {
            return K == null && (K = U), K.$reinitialize(!0);
          })]), x = Ge(x, 1)) : ke(M.has_header_option["$nil?"]()) && (M.has_header_option = !1, T.$unshift(Fe(T.$shift(), "map", [], function(K) {
            return K == null && (K = U), K.$reinitialize(!1);
          })))), ke(Ke(x, 0)) && ke(p["$[]"]("footer-option")) && M.rows["$foot="]([T.$pop()]), U;
        });
      }(de[0], Ee("AbstractBlock"), de), function(te, G) {
        var B = re(te, G, "Column"), le = B.$$prototype;
        return le.attributes = U, B.$attr_accessor("style"), $e(B, "$initialize", function oe(he, j, v) {
          oe.$$p;
          var p = this;
          return oe.$$p = null, v == null && (v = Z([], {})), Be(p, V(p, "initialize", oe, !1, !0), "initialize", [he, "table_column"], null), p.style = v["$[]"]("style"), v["$[]="]("colnumber", ot(j, 1)), ke(v["$[]"]("width")) || v["$[]="]("width", 1), ke(v["$[]"]("halign")) || v["$[]="]("halign", "left"), ke(v["$[]"]("valign")) || v["$[]="]("valign", "top"), p.$update_attributes(v);
        }, -3), S(B, "table", "parent"), $e(B, "$assign_width", function(he, j, v) {
          var p, E = this, M = U;
          return ke(j) && (he = De(He(E.attributes["$[]"]("width").$to_f(), 100), j).$truncate(v), xe(he.$to_i(), he) && (he = he.$to_i())), ke(E.$parent().$attributes()["$[]"]("tableabswidth")) && E.attributes["$[]="]("colabswidth", xe(M = He(De(he, 100), E.$parent().$attributes()["$[]"]("tableabswidth")).$truncate(v), M.$to_i()) ? M.$to_i() : M), p = ["colpcwidth", he], Fe(E.attributes, "[]=", p), p[p.length - 1];
        }), $e(B, "$block?", tt(!1)), $e(B, "$inline?", tt(!1));
      }(Ee("Table"), Ee("AbstractNode")), function(te, G, B) {
        var le = re(te, G, "Cell"), oe = [le].concat(B), he = u.$r(oe), j = le.$$prototype;
        return j.document = j.reinitialize_args = j.attributes = j.cursor = j.text = j.subs = j.style = j.inner_document = j.source_location = j.colspan = j.rowspan = U, W(oe[0], "DOUBLE_LF", He(he("LF"), 2)), le.$attr_accessor("colspan"), le.$attr_accessor("rowspan"), S(le, "column", "parent"), le.$attr_reader("inner_document"), $e(le, "$initialize", function v(p, E, M, x) {
          var T;
          v.$$p;
          var q = this, K = U, me = U, ue = U, ye = U, Pe = U, Ve = U, et = U, at = U, rt = U, ft = U, _t = U, ht = U, pt = U;
          if (v.$$p = null, M == null && (M = Z([], {})), x == null && (x = Z([], {})), Be(q, V(q, "initialize", v, !1, !0), "initialize", [p, "table_cell"], null), q.cursor = q.reinitialize_args = U, ke(q.document.$sourcemap()) && (q.source_location = x["$[]"]("cursor").$dup()), ke(p) && (ke(K = p.$table()["$header_row?"]()) ? xe(K, "implicit") && ke(me = ke(ue = p.$style()) ? ue : ke(ye = M) ? M["$[]"]("style") : ye) && ((xe(me, "asciidoc") || xe(me, "literal")) && (q.reinitialize_args = [p, E, ke(ue = M) ? M.$merge() : ue, x]), me = U) : me = p.$style(), q.$update_attributes(p.$attributes())), ke(M))
            switch (ke(M["$empty?"]()) ? q.colspan = q.rowspan = U : (T = [M.$delete("colspan"), M.$delete("rowspan")], q.colspan = T[0], q.rowspan = T[1], ke(K) || (me = ke(ue = M["$[]"]("style")) ? ue : me), q.$update_attributes(M)), me) {
              case "asciidoc":
                if (Pe = !0, Ve = x["$[]"]("cursor"), ke((E = E.$rstrip())["$start_with?"](he("LF")))) {
                  for (et = 1; ke((E = E.$slice(1, E.$length()))["$start_with?"](he("LF"))); )
                    et = ot(et, 1);
                  Ve.$advance(et);
                } else
                  E = E.$lstrip();
                break;
              case "literal":
                for (at = !0, E = E.$rstrip(); ke(E["$start_with?"](he("LF"))); )
                  E = E.$slice(1, E.$length());
                break;
              default:
                rt = !0, E = ke(E) ? E.$strip() : "";
            }
          else
            q.colspan = q.rowspan = U, xe(me, "asciidoc") && (Pe = !0, Ve = x["$[]"]("cursor"));
          return ke(Pe) ? (ft = q.document.$attributes().$delete("doctitle"), _t = E.$split(he("LF"), -1), ke(_t["$empty?"]()) || ke((ht = _t["$[]"](0))["$include?"]("::")) && (pt = he("PreprocessorReader").$new(q.document, [ht]).$readlines(), xe(ht, pt["$[]"](0)) && ke(O(pt.$size(), 2)) || (_t.$shift(), ke(pt["$empty?"]()) || Fe(_t, "unshift", Ye(pt)))), q.inner_document = he("Document").$new(_t, Z(["standalone", "parent", "cursor"], { standalone: !1, parent: q.document, cursor: Ve })), ke(ft["$nil?"]()) || q.document.$attributes()["$[]="]("doctitle", ft), q.subs = U) : ke(at) ? (q.content_model = "verbatim", q.subs = he("BASIC_SUBS")) : (ke(rt) && (ke(K) ? q.cursor = x["$[]"]("cursor") : q.$catalog_inline_anchor(E, x["$[]"]("cursor"))), q.content_model = "simple", q.subs = he("NORMAL_SUBS")), q.text = E, q.style = me;
        }, -3), $e(le, "$reinitialize", function(p) {
          var E = this;
          if (ke(p))
            E.reinitialize_args = U;
          else {
            if (ke(E.reinitialize_args))
              return Fe(ze(he("Table"), "Cell"), "new", Ye(E.reinitialize_args));
            E.style = E.attributes["$[]"]("style");
          }
          return ke(E.cursor) && E.$catalog_inline_anchor(), E;
        }), $e(le, "$catalog_inline_anchor", function(p, E) {
          var M, x = this;
          return p == null && (p = x.text), E == null && (E = U), ke(E) || (M = [x.cursor, U], E = M[0], x.cursor = M[1]), ke(p["$start_with?"]("[[")) && ke(he("LeadingInlineAnchorRx")["$=~"](p)) ? he("Parser").$catalog_inline_anchor((M = We["~"]) === U ? U : M["$[]"](1), (M = We["~"]) === U ? U : M["$[]"](2), x, E, x.document) : U;
        }, -1), $e(le, "$text", function() {
          var p = this;
          return p.$apply_subs(p.text, p.subs);
        }), le.$attr_writer("text"), $e(le, "$content", function() {
          var p = this, E = U, M = U;
          return xe(E = p.style, "asciidoc") ? p.inner_document.$convert() : ke(p.text["$include?"](he("DOUBLE_LF"))) ? Fe(p.$text().$split(he("BlankLineRx")), "map", [], function x(T) {
            var q = x.$$s == null ? this : x.$$s;
            return T == null && (T = U), ke(E) && st(E, "header") ? he("Inline").$new(q.$parent(), "quoted", T, Z(["type"], { type: E })).$convert() : T;
          }, { $$s: p }) : ke((M = p.$text())["$empty?"]()) ? [] : ke(E) && st(E, "header") ? [he("Inline").$new(p.$parent(), "quoted", M, Z(["type"], { type: E })).$convert()] : [M];
        }), $e(le, "$lines", function() {
          var p = this;
          return p.text.$split(he("LF"));
        }), $e(le, "$source", L("text")), $e(le, "$file", function() {
          var p = this, E = U;
          return ke(E = p.source_location) ? p.source_location.$file() : E;
        }), $e(le, "$lineno", function() {
          var p = this, E = U;
          return ke(E = p.source_location) ? p.source_location.$lineno() : E;
        }), $e(le, "$to_s", function v() {
          var p = v.$$p || U, E = this, M = U;
          return v.$$p = null, "" + Be(E, V(E, "to_s", v, !1, !0), "to_s", [], p) + " - [text: " + E.text + ", colspan: " + (ke(M = E.colspan) ? M : 1) + ", rowspan: " + (ke(M = E.rowspan) ? M : 1) + ", attributes: " + E.attributes + "]";
        });
      }(Ee("Table"), Ee("AbstractBlock"), de), function(te, G, B) {
        var le = re(te, G, "ParserContext"), oe = [le].concat(B), he = u.$r(oe), j = le.$$prototype;
        return j.delimiter = j.delimiter_rx = j.buffer = j.cellspecs = j.cell_open = j.format = j.start_cursor_data = j.reader = j.table = j.current_row = j.colcount = j.column_visits = j.active_rowspans = j.linenum = U, le.$include(he("Logging")), W(oe[0], "FORMATS", ["psv", "csv", "dsv", "tsv"].$to_set()), W(oe[0], "DELIMITERS", Z(["psv", "csv", "dsv", "tsv", "!sv"], { psv: ["|", /\|/], csv: [",", /,/], dsv: [":", /:/], tsv: ["	", /\t/], "!sv": ["!", /!/] })), le.$attr_accessor("table"), le.$attr_accessor("format"), le.$attr_reader("colcount"), le.$attr_accessor("buffer"), le.$attr_reader("delimiter"), le.$attr_reader("delimiter_re"), $e(le, "$initialize", function(p, E, M) {
          var x, T, q = this, K = U, me = U;
          return M == null && (M = Z([], {})), q.start_cursor_data = (q.reader = p).$mark(), q.table = E, ke(M["$key?"]("format")) ? ke(he("FORMATS")["$include?"](K = M["$[]"]("format"))) ? xe(K, "tsv") ? q.format = "csv" : xe(q.format = K, "psv") && ke(E.$document()["$nested?"]()) && (K = "!sv") : (q.$logger().$error(q.$message_with_context("illegal table format: " + K, Z(["source_location"], { source_location: p.$cursor_at_prev_line() }))), x = ["psv", ke(E.$document()["$nested?"]()) ? "!sv" : "psv"], q.format = x[0], K = x[1]) : (x = ["psv", ke(E.$document()["$nested?"]()) ? "!sv" : "psv"], q.format = x[0], K = x[1]), ke(M["$key?"]("separator")) ? ke((me = M["$[]"]("separator"))["$nil_or_empty?"]()) ? (T = he("DELIMITERS")["$[]"](K), x = je(T), q.delimiter = x[0] == null ? U : x[0], q.delimiter_rx = x[1] == null ? U : x[1]) : xe(me, "\\t") ? (T = he("DELIMITERS")["$[]"]("tsv"), x = je(T), q.delimiter = x[0] == null ? U : x[0], q.delimiter_rx = x[1] == null ? U : x[1]) : (x = [me, k([ze("Regexp").$escape(me)])], q.delimiter = x[0], q.delimiter_rx = x[1]) : (T = he("DELIMITERS")["$[]"](K), x = je(T), q.delimiter = x[0] == null ? U : x[0], q.delimiter_rx = x[1] == null ? U : x[1]), q.colcount = ke(E.$columns()["$empty?"]()) ? -1 : E.$columns().$size(), q.buffer = "", q.cellspecs = [], q.cell_open = !1, q.active_rowspans = [0], q.column_visits = 0, q.current_row = [], q.linenum = -1;
        }, -3), $e(le, "$starts_with_delimiter?", function(p) {
          var E = this;
          return p["$start_with?"](E.delimiter);
        }), $e(le, "$match_delimiter", function(p) {
          var E = this;
          return E.delimiter_rx.$match(p);
        }), $e(le, "$skip_past_delimiter", function(p) {
          var E = this;
          return E.buffer = "" + E.buffer + p + E.delimiter, U;
        }), $e(le, "$skip_past_escaped_delimiter", function(p) {
          var E = this;
          return E.buffer = "" + E.buffer + p.$chop() + E.delimiter, U;
        }), $e(le, "$buffer_has_unclosed_quotes?", function(p, E) {
          var M = this, x = U, T = U, q = U, K = U;
          return p == null && (p = U), E == null && (E = '"'), xe(x = ke(p) ? ot(M.buffer, p).$strip() : M.buffer.$strip(), E) ? !0 : ke(x["$start_with?"](E)) ? (T = ot(E, E), ke(q = x["$end_with?"](E)) && ke(x["$end_with?"](T)) || ke(x["$start_with?"](T)) ? ke(K = (x = x.$gsub(T, ""))["$start_with?"](E)) ? x["$end_with?"](E)["$!"]() : K : q["$!"]()) : !1;
        }, -1), $e(le, "$take_cellspec", function() {
          var p = this;
          return p.cellspecs.$shift();
        }), $e(le, "$push_cellspec", function(p) {
          var E = this, M = U;
          return p == null && (p = Z([], {})), E.cellspecs["$<<"](ke(M = p) ? M : Z([], {})), U;
        }, -1), $e(le, "$keep_cell_open", function() {
          var p = this;
          return p.cell_open = !0, U;
        }), $e(le, "$mark_cell_closed", function() {
          var p = this;
          return p.cell_open = !1, U;
        }), $e(le, "$cell_open?", L("cell_open")), $e(le, "$cell_closed?", function() {
          var p = this;
          return p.cell_open["$!"]();
        }), $e(le, "$close_open_cell", function(p) {
          var E = this;
          return p == null && (p = Z([], {})), E.$push_cellspec(p), ke(E["$cell_open?"]()) && E.$close_cell(!0), E.$advance(), U;
        }, -1), $e(le, "$close_cell", function(p) {
          try {
            var E = nt("return"), M = this, x = U, T = U, q = U, K = U, me = U;
            return p == null && (p = !1), xe(M.format, "psv") ? (x = M.buffer, M.buffer = "", ke(T = M.$take_cellspec()) ? q = ke(K = T.$delete("repeatcol")) ? K : 1 : (M.$logger().$error(M.$message_with_context("table missing leading separator; recovering automatically", Z(["source_location"], { source_location: Fe(ze(he("Reader"), "Cursor"), "new", Ye(M.start_cursor_data)) }))), T = Z([], {}), q = 1)) : (x = M.buffer.$strip(), M.buffer = "", T = U, q = 1, xe(M.format, "csv") && Ze(x["$empty?"]()) && ke(x["$include?"](me = '"')) && (ke(x["$start_with?"](me)) && ke(x["$end_with?"](me)) ? ke(x = x.$slice(1, Ge(x.$length(), 2))) ? x = x.$strip().$squeeze(me) : (M.$logger().$error(M.$message_with_context("unclosed quote in CSV data; setting cell to empty", Z(["source_location"], { source_location: M.reader.$cursor_at_prev_line() }))), x = "") : x = x.$squeeze(me))), Fe(1, "upto", [q], function ue(ye) {
              var Pe = ue.$$s == null ? this : ue.$$s, Ve = U, et = U, at = U, rt = U;
              return Pe.colcount == null && (Pe.colcount = U), Pe.table == null && (Pe.table = U), Pe.current_row == null && (Pe.current_row = U), Pe.reader == null && (Pe.reader = U), Pe.column_visits == null && (Pe.column_visits = U), Pe.linenum == null && (Pe.linenum = U), ye == null && (ye = U), xe(Pe.colcount, -1) ? (Pe.table.$columns()["$<<"](Ve = ze(he("Table"), "Column").$new(Pe.table, Ge(ot(Pe.table.$columns().$size(), ye), 1))), ke(T) && ke(T["$key?"]("colspan")) && ke(Ke(et = Ge(T["$[]"]("colspan").$to_i(), 1), 0)) && (at = Pe.table.$columns().$size(), Fe(et, "times", [], function ft(_t) {
                var ht = ft.$$s == null ? this : ft.$$s;
                return ht.table == null && (ht.table = U), _t == null && (_t = U), ht.table.$columns()["$<<"](ze(he("Table"), "Column").$new(ht.table, ot(at, _t)));
              }, { $$s: Pe }))) : ke(Ve = Pe.table.$columns()["$[]"](Pe.current_row.$size())) || (Pe.$logger().$error(Pe.$message_with_context("dropping cell because it exceeds specified number of columns", Z(["source_location"], { source_location: Pe.reader.$cursor_before_mark() }))), E.$throw()), rt = ze(he("Table"), "Cell").$new(Ve, x, T, Z(["cursor"], { cursor: Pe.reader.$cursor_before_mark() })), Pe.reader.$mark(), Ze(rt.$rowspan()) || xe(rt.$rowspan(), 1) || Pe.$activate_rowspan(rt.$rowspan(), ke(K = rt.$colspan()) ? K : 1), Pe.column_visits = ot(Pe.column_visits, ke(K = rt.$colspan()) ? K : 1), Pe.current_row["$<<"](rt), ke(Pe["$end_of_row?"]()) && (st(Pe.colcount, -1) || ke(Ke(Pe.linenum, 0)) || ke(p) && xe(ye, q)) ? Pe.$close_row() : U;
            }, { $$s: M, $$ret: E }), M.cell_open = !1, U;
          } catch (ue) {
            if (ue === E)
              return ue.$v;
            throw ue;
          }
        }, -1), le.$private(), $e(le, "$close_row", function() {
          var p = this;
          return p.table.$rows().$body()["$<<"](p.current_row), xe(p.colcount, -1) && (p.colcount = p.column_visits), p.column_visits = 0, p.current_row = [], p.active_rowspans.$shift(), ke(p.active_rowspans["$[]"](0)) || p.active_rowspans["$[]="](0, 0), U;
        }), $e(le, "$activate_rowspan", function(p, E) {
          var M = this;
          return Fe(1, "upto", [Ge(p, 1)], function x(T) {
            var q, K = x.$$s == null ? this : x.$$s, me = U;
            return K.active_rowspans == null && (K.active_rowspans = U), T == null && (T = U), q = [T, ot(ke(me = K.active_rowspans["$[]"](T)) ? me : 0, E)], Fe(K.active_rowspans, "[]=", q), q[q.length - 1];
          }, { $$s: M }), U;
        }), $e(le, "$end_of_row?", function() {
          var p = this, E = U;
          return ke(E = p.colcount["$=="](-1)) ? E : p.$effective_column_visits()["$=="](p.colcount);
        }), $e(le, "$effective_column_visits", function() {
          var p = this;
          return ot(p.column_visits, p.active_rowspans["$[]"](0));
        }), $e(le, "$advance", function() {
          var p = this;
          return p.linenum = ot(p.linenum, 1);
        });
      }(Ee("Table"), null, de);
    }(ee[0], ee);
  }, Opal.modules["asciidoctor/writer"] = function(u) {
    var se = u.module, re = u.truthy, W = u.rb_plus, $e = u.hash2, S = u.def, Z = u.return_val, Be = [], V = u.nil, ke = u.$$$;
    return u.add_stubs("respond_to?,write,+,chomp,include"), function(O, Ke) {
      var xe = se(O, "Asciidoctor"), He = [xe].concat(Ke);
      return function(De, Fe) {
        var ot = se(De, "Writer"), Ge = [ot].concat(Fe), tt = u.$r(Ge);
        return S(ot, "$write", function(We, st) {
          return re(st["$respond_to?"]("write")) ? st.$write(W(We.$chomp(), tt("LF"))) : ke("File").$write(st, We, $e(["mode"], { mode: tt("FILE_WRITE_MODE") })), V;
        });
      }(He[0], He), function(De, Fe) {
        var ot = se(De, "VoidWriter"), Ge = [ot].concat(Fe), tt = u.$r(Ge);
        return ot.$include(tt("Writer")), S(ot, "$write", Z(V));
      }(He[0], He);
    }(Be[0], Be);
  }, Opal.modules["asciidoctor/load"] = function(u) {
    var se = u.module, re = u.hash2, W = u.truthy, $e = u.neqeq, S = u.not, Z = u.eqeqeq, Be = u.send, V = u.to_ary, ke = u.rb_plus, O = u.eqeq, Ke = u.def, xe = [], He = u.nil, De = u.$$$;
    return u.add_stubs("merge,[],start,!=,logger,key?,logger=,new,!,===,dup,tap,each,partition,[]=,split,gsub,+,respond_to?,keys,raise,join,ancestors,class,==,at,to_i,mtime,absolute_path,path,dirname,basename,extname,read,rewind,drop,record,parse,exception,message,set_backtrace,backtrace,stack_trace=,stack_trace,open,load"), function(Fe, ot) {
      var Ge = se(Fe, "Asciidoctor"), tt = [Ge].concat(ot);
      return function(Ye, We) {
        var st = [Ye].concat(We), L = u.$r(st);
        return Ke(Ye, "$load", function(k, Ze) {
          var nt, ee, U, ze, Se = this, Ie = He, Ae = He, de = He, Ee = He, te = He, G = He, B = He, le = He, oe = He, he = He;
          Ze == null && (Ze = re([], {}));
          try {
            if (Ze = Ze.$merge(), W(Ie = Ze["$[]"]("timings")) && Ie.$start("read"), W(Ze["$key?"]("logger")) && $e(Ae = Ze["$[]"]("logger"), L("LoggerManager").$logger()) && L("LoggerManager")["$logger="](W(de = Ae) ? de : L("NullLogger").$new()), S(Ee = Ze["$[]"]("attributes")) ? Ee = re([], {}) : Z(De("Hash"), Ee) ? Ee = Ee.$merge() : W((U = De("::", "Java", "skip_raise")) && (ee = De(U, "JavaUtil", "skip_raise")) && (nt = De(ee, "Map", "skip_raise")) ? "constant" : He) && Z(De(De(De("Java"), "JavaUtil"), "Map"), Ee) ? Ee = Ee.$dup() : Z(De("Array"), Ee) ? Ee = Be(re([], {}), "tap", [], function(v) {
              return v == null && (v = He), Be(Ee, "each", [], function(E) {
                var M, x, T = He, q = He, K = He;
                return E == null && (E = He), x = E.$partition("="), M = V(x), T = M[0] == null ? He : M[0], q = M[1] == null ? He : M[1], K = M[2] == null ? He : M[2], M = [T, K], Be(v, "[]=", M), M[M.length - 1];
              });
            }) : Z(De("String"), Ee) ? Ee = Be(re([], {}), "tap", [], function(v) {
              return v == null && (v = He), Be(Ee.$gsub(L("SpaceDelimiterRx"), ke("\\1", L("NULL"))).$gsub(L("EscapedSpaceRx"), "\\1").$split(L("NULL")), "each", [], function(E) {
                var M, x, T = He, q = He, K = He;
                return E == null && (E = He), x = E.$partition("="), M = V(x), T = M[0] == null ? He : M[0], q = M[1] == null ? He : M[1], K = M[2] == null ? He : M[2], M = [T, K], Be(v, "[]=", M), M[M.length - 1];
              });
            }) : W(Ee["$respond_to?"]("keys")) && W(Ee["$respond_to?"]("[]")) ? Ee = Be(re([], {}), "tap", [], function(v) {
              return v == null && (v = He), Be(Ee.$keys(), "each", [], function(E) {
                var M;
                return E == null && (E = He), M = [E, Ee["$[]"](E)], Be(v, "[]=", M), M[M.length - 1];
              });
            }) : Se.$raise(De("ArgumentError"), "illegal type for attributes option: " + Ee.$class().$ancestors().$join(" < ")), Z(De("File"), k))
              Ze["$[]="]("input_mtime", O(L("RUBY_ENGINE"), "jruby") ? De("Time").$at(k.$mtime().$to_i()) : k.$mtime()), Ee["$[]="]("docfile", te = De("File").$absolute_path(k.$path())), Ee["$[]="]("docdir", De("File").$dirname(te)), Ee["$[]="]("docname", L("Helpers").$basename(te, (ze = ["docfilesuffix", L("Helpers").$extname(te)], Be(Ee, "[]=", ze), ze[ze.length - 1]))), G = k.$read();
            else if (W(k["$respond_to?"]("read"))) {
              try {
                k.$rewind();
              } catch (j) {
                if (u.rescue(j, [L("StandardError")]))
                  try {
                  } finally {
                    u.pop_exception();
                  }
                else
                  throw j;
              }
              G = k.$read();
            } else
              Z(De("String"), k) ? G = k : Z(De("Array"), k) ? G = k.$drop(0) : W(k) && Se.$raise(De("ArgumentError"), "unsupported input type: " + k.$class());
            return W(Ie) && (Ie.$record("read"), Ie.$start("parse")), Ze["$[]="]("attributes", Ee), B = O(Ze["$[]"]("parse"), !1) ? L("Document").$new(G, Ze) : L("Document").$new(G, Ze).$parse(), W(Ie) && Ie.$record("parse"), B;
          } catch (j) {
            if (u.rescue(j, [L("StandardError")])) {
              le = j;
              try {
                try {
                  oe = "asciidoctor: FAILED: " + (W(de = Ee["$[]"]("docfile")) ? de : "<stdin>") + ": Failed to load AsciiDoc document", W(le["$respond_to?"]("exception")) ? (he = le.$exception("" + oe + " - " + le.$message()), he.$set_backtrace(le.$backtrace())) : (he = le.$class().$new(oe, le), he["$stack_trace="](le.$stack_trace()));
                } catch (v) {
                  if (u.rescue(v, [L("StandardError")]))
                    try {
                      he = le;
                    } finally {
                      u.pop_exception();
                    }
                  else
                    throw v;
                }
                return Se.$raise(he);
              } finally {
                u.pop_exception();
              }
            } else
              throw j;
          }
        }, -2), Ke(Ye, "$load_file", function(k, Ze) {
          var nt = this;
          return Ze == null && (Ze = re([], {})), Be(De("File"), "open", [k, L("FILE_READ_MODE")], function ee(U) {
            var ze = ee.$$s == null ? this : ee.$$s;
            return U == null && (U = He), ze.$load(U, Ze);
          }, { $$s: nt });
        }, -2);
      }(u.get_singleton_class(Ge), tt);
    }(xe[0], xe);
  }, Opal.modules["asciidoctor/convert"] = function(u) {
    var se = u.module, re = u.hash2, W = u.eqeqeq, $e = u.truthy, S = u.eqeq, Z = u.rb_ge, Be = u.not, V = u.rb_lt, ke = u.neqeq, O = u.def, Ke = u.send, xe = u.alias, He = [], De = u.nil, Fe = u.$$$;
    return u.add_stubs("delete,merge,===,absolute_path,path,load,respond_to?,[]=,key?,fetch,[],dirname,expand_path,join,attributes,outfilesuffix,==,raise,pwd,>=,safe,normalize_system_path,mkdir_p,directory?,!,convert,write,attr,uriish?,basebackend?,attr?,<,include?,syntax_highlighter,write_stylesheet?,write_primary_stylesheet,instance,to_s,read_asset,file?,!=,write_stylesheet,open,convert_file"), function(ot, Ge) {
      var tt = se(ot, "Asciidoctor"), Ye = [tt].concat(Ge);
      return function(We, st) {
        var L = [We].concat(st), je = u.$r(L);
        return O(We, "$convert", function(Ze, nt) {
          var ee = this, U = De, ze = De, Se = De, Ie = De, Ae = De, de = De, Ee = De, te = De, G = De, B = De, le = De, oe = De, he = De, j = De, v = De, p = De, E = De, M = De, x = De, T = De, q = De, K = De, me = De, ue = De;
          if (nt == null && (nt = re([], {})), (nt = nt.$merge()).$delete("parse"), U = nt.$delete("to_dir"), ze = nt.$delete("mkdirs"), W(!0, Se = Ie = nt.$delete("to_file")) || W(De, Se))
            $e(Ae = U) || W(Fe("File"), Ze) && (de = Fe("File").$absolute_path(Ze.$path())), Ie = De;
          else if (W(!1, Se))
            Ie = De;
          else {
            if (W("/dev/null", Se))
              return ee.$load(Ze, nt);
            $e(Ee = Ie["$respond_to?"]("write")) || nt["$[]="]("to_file", Ae = Ie);
          }
          return $e(nt["$key?"]("standalone")) || ($e(de) || $e(Ae) ? nt["$[]="]("standalone", nt.$fetch("header_footer", !0)) : $e(nt["$key?"]("header_footer")) && nt["$[]="]("standalone", nt["$[]"]("header_footer"))), $e(de) ? nt["$[]="]("to_dir", te = Fe("File").$dirname(de)) : $e(Ae) && ($e(U) ? $e(Ie) ? nt["$[]="]("to_dir", Fe("File").$dirname(Fe("File").$expand_path(Ie, U))) : nt["$[]="]("to_dir", Fe("File").$expand_path(U)) : $e(Ie) && nt["$[]="]("to_dir", Fe("File").$dirname(Fe("File").$expand_path(Ie)))), G = ee.$load(Ze, nt), $e(de) ? (B = Fe("File").$join(te, "" + G.$attributes()["$[]"]("docname") + G.$outfilesuffix()), S(B, de) && ee.$raise(Fe("IOError"), "input file and output file cannot be the same: " + B)) : $e(Ae) ? (le = $e(nt["$key?"]("base_dir")) ? Fe("File").$expand_path(nt["$[]"]("base_dir")) : Fe("Dir").$pwd(), oe = $e(Z(G.$safe(), Fe(je("SafeMode"), "SAFE"))) ? le : De, $e(U) ? (te = G.$normalize_system_path(U, le, oe, re(["target_name", "recover"], { target_name: "to_dir", recover: !1 })), $e(Ie) ? (B = G.$normalize_system_path(Ie, te, De, re(["target_name", "recover"], { target_name: "to_dir", recover: !1 })), te = Fe("File").$dirname(B)) : B = Fe("File").$join(te, "" + G.$attributes()["$[]"]("docname") + G.$outfilesuffix())) : $e(Ie) && (B = G.$normalize_system_path(Ie, le, oe, re(["target_name", "recover"], { target_name: "to_dir", recover: !1 })), te = Fe("File").$dirname(B)), W(Fe("File"), Ze) && S(B, Fe("File").$absolute_path(Ze.$path())) && ee.$raise(Fe("IOError"), "input file and output file cannot be the same: " + B), $e(ze) ? je("Helpers").$mkdir_p(te) : $e(Fe("File")["$directory?"](te)) || ee.$raise(Fe("IOError"), "target directory does not exist: " + U + " (hint: set :mkdirs option)")) : (B = Ie, te = De), $e(B) && Be(Ee) ? he = G.$convert(re(["outfile", "outdir"], { outfile: B, outdir: te })) : he = G.$convert(), $e(B) ? (G.$write(he, B), Be(Ee) && $e(V(G.$safe(), Fe(je("SafeMode"), "SECURE"))) && $e(G["$attr?"]("linkcss")) && $e(G["$attr?"]("copycss")) && $e(G["$basebackend?"]("html")) && Be($e(Se = j = G.$attr("stylesdir")) ? je("Helpers")["$uriish?"](j) : Se) && ($e(v = G.$attr("stylesheet")) && ($e(je("DEFAULT_STYLESHEET_KEYS")["$include?"](v)) ? p = !0 : Be(je("Helpers")["$uriish?"](v)) && (E = !0)), M = $e(Se = x = G.$syntax_highlighter()) ? x["$write_stylesheet?"](G) : Se, ($e(p) || $e(E) || $e(M)) && (T = G.$normalize_system_path(j, te, $e(Z(G.$safe(), Fe(je("SafeMode"), "SAFE"))) ? te : De), $e(ze) ? je("Helpers").$mkdir_p(T) : $e(Fe("File")["$directory?"](T)) || ee.$raise(Fe("IOError"), "target stylesheet directory does not exist: " + T + " (hint: set :mkdirs option)"), $e(p) ? je("Stylesheets").$instance().$write_primary_stylesheet(T) : $e(E) && (S(q = G.$attr("copycss"), "") || S(q, !0) ? q = G.$normalize_system_path(v) : q = G.$normalize_system_path(q.$to_s()), K = G.$normalize_system_path(v, T, $e(Z(G.$safe(), Fe(je("SafeMode"), "SAFE"))) ? te : De), ke(q, K) && $e(me = G.$read_asset(q, re(["warn_on_failure", "label"], { warn_on_failure: Fe("File")["$file?"](K)["$!"](), label: "stylesheet" }))) && (ke(ue = Fe("File").$dirname(K), T) && Be(Fe("File")["$directory?"](ue)) && ($e(ze) ? je("Helpers").$mkdir_p(ue) : ee.$raise(Fe("IOError"), "target stylesheet directory does not exist: " + ue + " (hint: set :mkdirs option)")), Fe("File").$write(K, me, re(["mode"], { mode: je("FILE_WRITE_MODE") })))), $e(M) && x.$write_stylesheet(G, T))), G) : he;
        }, -2), O(We, "$convert_file", function(Ze, nt) {
          var ee = this;
          return nt == null && (nt = re([], {})), Ke(Fe("File"), "open", [Ze, je("FILE_READ_MODE")], function U(ze) {
            var Se = U.$$s == null ? this : U.$$s;
            return ze == null && (ze = De), Se.$convert(ze, nt);
          }, { $$s: ee });
        }, -2), xe(We, "render", "convert"), xe(We, "render_file", "convert_file");
      }(u.get_singleton_class(tt), Ye);
    }(He[0], He);
  }, Opal.modules["asciidoctor/syntax_highlighter/highlightjs"] = function(u) {
    var se = u.module, re = u.klass, W = u.slice, $e = u.send2, S = u.find_super, Z = u.to_a, Be = u.def, V = u.hash2, ke = u.send, O = u.truthy, Ke = u.return_val, xe = u.eqeq, He = [], De = u.nil, Fe = u.$$$;
    return u.add_stubs("register_for,merge,proc,[]=,attr,[],==,attr?,join,map,split,lstrip"), function(ot, Ge) {
      var tt = se(ot, "Asciidoctor"), Ye = [tt].concat(Ge), We = u.$r(Ye);
      return function(st, L, je) {
        var k = re(st, L, "HighlightJsAdapter"), Ze = [k].concat(je), nt = u.$r(Ze);
        return k.$register_for("highlightjs", "highlight.js"), Be(k, "$initialize", function ee(U) {
          var ze, Se, Ie = ee.$$p || De, Ae = this;
          return ee.$$p = null, ze = W(arguments), Se = ze, $e(Ae, S(Ae, "initialize", ee, !1, !0), "initialize", Z(Se), Ie), Ae.name = Ae.pre_class = "highlightjs";
        }, -1), Be(k, "$format", function ee(U, ze, Se) {
          ee.$$p;
          var Ie = this;
          return ee.$$p = null, $e(Ie, S(Ie, "format", ee, !1, !0), "format", [U, ze, Se.$merge(V(["transform"], { transform: ke(Ie, "proc", [], function(de, Ee) {
            var te, G = De;
            return Ee == null && (Ee = De), te = ["class", "language-" + (O(G = ze) ? G : "none") + " hljs"], ke(Ee, "[]=", te), te[te.length - 1];
          }) }))], null);
        }), Be(k, "$docinfo?", Ke(!0)), Be(k, "$docinfo", function(U, ze, Se) {
          var Ie = De;
          return Ie = ze.$attr("highlightjsdir", "" + Se["$[]"]("cdn_base_url") + "/highlight.js/" + nt("HIGHLIGHT_JS_VERSION")), xe(U, "head") ? '<link rel="stylesheet" href="' + Ie + "/styles/" + ze.$attr("highlightjs-theme", "github") + '.min.css"' + Se["$[]"]("self_closing_tag_slash") + ">" : '<script src="' + Ie + `/highlight.min.js"><\/script>
` + (O(ze["$attr?"]("highlightjs-languages")) ? ke(ze.$attr("highlightjs-languages").$split(","), "map", [], function(de) {
            return de == null && (de = De), '<script src="' + Ie + "/languages/" + de.$lstrip() + `.min.js"><\/script>
`;
          }).$join() : "") + `<script>
if (!hljs.initHighlighting.called) {
  hljs.initHighlighting.called = true
  ;[].slice.call(document.querySelectorAll('pre.highlight > code[data-lang]')).forEach(function (el) { hljs.highlightBlock(el) })
}
<\/script>`;
        });
      }(We("SyntaxHighlighter"), Fe(We("SyntaxHighlighter"), "Base"), Ye);
    }(He[0], He);
  }, Opal.modules["asciidoctor/syntax_highlighter"] = function(u) {
    var se = u.module, re = u.hash2, W = u.def, $e = u.return_val, S = u.defs, Z = u.slice, Be = u.send, V = u.to_a, ke = u.truthy, O = u.eqeqeq, Ke = u.Class, xe = u.klass, He = u.class_variable_set, De = u.class_variable_get, Fe = u.top, ot = [], Ge = u.nil, tt = u.$$$;
    return u.add_stubs("attr_reader,raise,class,extend,private_class_method,register,map,to_s,each,[]=,registry,[],for,===,new,name,private,include,delete,join,content"), function(Ye, We) {
      var st = se(Ye, "Asciidoctor"), L = [st].concat(We);
      return function(je, k) {
        var Ze = se(je, "SyntaxHighlighter"), nt = [Ze].concat(k), ee = u.$r(nt);
        return Ze.$attr_reader("name"), W(Ze, "$initialize", function(ze, Se, Ie) {
          var Ae = this;
          return Ie == null && (Ie = re([], {})), Ae.name = Ae.pre_class = ze;
        }, -2), W(Ze, "$docinfo?", $e(Ge)), W(Ze, "$docinfo", function(ze, Se, Ie) {
          var Ae = this;
          return Ae.$raise(tt("NotImplementedError"), "" + ee("SyntaxHighlighter") + " subclass " + Ae.$class() + " must implement the #docinfo method since #docinfo? returns true");
        }), W(Ze, "$highlight?", $e(Ge)), W(Ze, "$highlight", function(ze, Se, Ie, Ae) {
          var de = this;
          return de.$raise(tt("NotImplementedError"), "" + ee("SyntaxHighlighter") + " subclass " + de.$class() + " must implement the #highlight method since #highlight? returns true");
        }), W(Ze, "$format", function(ze, Se, Ie) {
          var Ae = this;
          return Ae.$raise(tt("NotImplementedError"), "" + ee("SyntaxHighlighter") + " subclass " + Ae.$class() + " must implement the #format method");
        }), W(Ze, "$write_stylesheet?", $e(Ge)), W(Ze, "$write_stylesheet", function(ze, Se) {
          var Ie = this;
          return Ie.$raise(tt("NotImplementedError"), "" + ee("SyntaxHighlighter") + " subclass " + Ie.$class() + " must implement the #write_stylesheet method since #write_stylesheet? returns true");
        }), S(Ze, "$included", function(ze) {
          return ze.$extend(ee("Config"));
        }), Ze.$private_class_method("included"), function(U, ze) {
          var Se = se(U, "Config"), Ie = [Se].concat(ze), Ae = u.$r(Ie);
          return W(Se, "$register_for", function(Ee) {
            var te, G, B = this;
            return te = Z(arguments), G = te, Be(Ae("SyntaxHighlighter"), "register", [B].concat(V(Be(G, "map", [], function(oe) {
              return oe == null && (oe = Ge), oe.$to_s();
            }))));
          }, -1);
        }(nt[0], nt), function(U, ze) {
          var Se = se(U, "Factory"), Ie = [Se].concat(ze), Ae = u.$r(Ie);
          return W(Se, "$register", function(Ee, te) {
            var G, B, le = this;
            return G = Z(arguments, 1), B = G, Be(B, "each", [], function oe(he) {
              var j, v = oe.$$s == null ? this : oe.$$s;
              return he == null && (he = Ge), j = [he, Ee], Be(v.$registry(), "[]=", j), j[j.length - 1];
            }, { $$s: le });
          }, -2), W(Se, "$for", function(Ee) {
            var te = this;
            return te.$registry()["$[]"](Ee);
          }), W(Se, "$create", function(Ee, te, G) {
            var B = this, le = Ge;
            return te == null && (te = "html5"), G == null && (G = re([], {})), ke(le = B.$for(Ee)) ? (O(Ke, le) && (le = le.$new(Ee, te, G)), ke(le.$name()) || B.$raise(tt("NameError"), "" + le.$class() + " must specify a value for `name'"), le) : Ge;
          }, -2), Se.$private(), W(Se, "$registry", function() {
            var Ee = this;
            return Ee.$raise(tt("NotImplementedError"), "" + Ae("Factory") + " subclass " + Ee.$class() + " must implement the #registry method");
          });
        }(nt[0], nt), function(U, ze, Se) {
          var Ie = xe(U, ze, "CustomFactory"), Ae = [Ie].concat(Se), de = u.$r(Ae);
          return Ie.$include(de("Factory")), W(Ie, "$initialize", function(te) {
            var G = this, B = Ge;
            return te == null && (te = Ge), G.registry = ke(B = te) ? B : re([], {});
          }, -1), Ie.$private(), Ie.$attr_reader("registry");
        }(nt[0], null, nt), function(U, ze) {
          var Se = se(U, "DefaultFactory"), Ie = [Se].concat(ze), Ae = u.$r(Ie);
          return Se.$include(Ae("Factory")), He(Ie[0], "@@registry", re([], {})), Se.$private(), W(Se, "$registry", function() {
            return De(Ie[0], "@@registry", !1);
          }), Ge;
        }(nt[0], nt), function(U, ze, Se) {
          var Ie = xe(U, ze, "DefaultFactoryProxy"), Ae = [Ie].concat(Se), de = u.$r(Ae);
          return Ie.$include(de("DefaultFactory")), Ge;
        }(nt[0], ee("CustomFactory"), nt), function(U, ze, Se) {
          var Ie = xe(U, ze, "Base"), Ae = [Ie].concat(Se), de = u.$r(Ae), Ee = Ie.$$prototype;
          return Ee.pre_class = Ge, Ie.$include(de("SyntaxHighlighter")), W(Ie, "$format", function(G, B, le) {
            var oe = this, he = Ge, j = Ge, v = Ge, p = Ge;
            return he = ke(le["$[]"]("nowrap")) ? "" + oe.pre_class + " highlight nowrap" : "" + oe.pre_class + " highlight", ke(j = le["$[]"]("transform")) ? (j["$[]"](v = re(["class"], { class: he }), p = ke(B) ? re(["data-lang"], { "data-lang": B }) : re([], {})), ke(B = p.$delete("data-lang")) && p["$[]="]("data-lang", B), "<pre" + Be(v, "map", [], function(M, x) {
              return M == null && (M = Ge), x == null && (x = Ge), " " + M + '="' + x + '"';
            }).$join() + "><code" + Be(p, "map", [], function(M, x) {
              return M == null && (M = Ge), x == null && (x = Ge), " " + M + '="' + x + '"';
            }).$join() + ">" + G.$content() + "</code></pre>") : '<pre class="' + he + '"><code' + (ke(B) ? ' data-lang="' + B + '"' : "") + ">" + G.$content() + "</code></pre>";
          });
        }(nt[0], null, nt), Ze.$extend(ee("DefaultFactory"));
      }(L[0], L);
    }(ot[0], ot), Fe.$require("asciidoctor/syntax_highlighter.rb/../syntax_highlighter/highlightjs"), Ge;
  }, Opal.modules["asciidoctor/timings"] = function(u) {
    var se = u.module, re = u.klass, W = u.hash2, $e = u.def, S = u.send, Z = u.rb_minus, Be = u.slice, V = u.rb_plus, ke = u.truthy, O = u.rb_gt, Ke = u.gvars, xe = u.eqeq, He = u.const_set, De = [], Fe = u.nil, ot = u.$$$;
    return u.add_stubs("[]=,now,-,delete,reduce,+,[],>,time,puts,sprintf,to_f,read_parse,convert,read_parse_convert,private,==,const_defined?,clock_gettime"), function(Ge, tt) {
      var Ye = se(Ge, "Asciidoctor"), We = [Ye].concat(tt);
      return function(st, L, je) {
        var k = re(st, L, "Timings"), Ze, nt, ee, U, ze = [k].concat(je), Se = u.$r(ze), Ie = k.$$prototype;
        return Ie.timers = Ie.log = Fe, $e(k, "$initialize", function() {
          var de = this;
          return de.log = W([], {}), de.timers = W([], {});
        }), $e(k, "$start", function(de) {
          var Ee, te = this;
          return Ee = [de, te.$now()], S(te.timers, "[]=", Ee), Ee[Ee.length - 1];
        }), $e(k, "$record", function(de) {
          var Ee, te = this;
          return Ee = [de, Z(te.$now(), te.timers.$delete(de))], S(te.log, "[]=", Ee), Ee[Ee.length - 1];
        }), $e(k, "$time", function(de) {
          var Ee, te, G = this, B = Fe;
          return Ee = Be(arguments), te = Ee, B = S(te, "reduce", [0], function le(oe, he) {
            var j = le.$$s == null ? this : le.$$s, v = Fe;
            return j.log == null && (j.log = Fe), oe == null && (oe = Fe), he == null && (he = Fe), V(oe, ke(v = j.log["$[]"](he)) ? v : 0);
          }, { $$s: G }), ke(O(B, 0)) ? B : Fe;
        }, -1), $e(k, "$read", function() {
          var de = this;
          return de.$time("read");
        }), $e(k, "$parse", function() {
          var de = this;
          return de.$time("parse");
        }), $e(k, "$read_parse", function() {
          var de = this;
          return de.$time("read", "parse");
        }), $e(k, "$convert", function() {
          var de = this;
          return de.$time("convert");
        }), $e(k, "$read_parse_convert", function() {
          var de = this;
          return de.$time("read", "parse", "convert");
        }), $e(k, "$write", function() {
          var de = this;
          return de.$time("write");
        }), $e(k, "$total", function() {
          var de = this;
          return de.$time("read", "parse", "convert", "write");
        }), $e(k, "$print_report", function(de, Ee) {
          var te = this;
          return Ke.stdout == null && (Ke.stdout = Fe), de == null && (de = Ke.stdout), Ee == null && (Ee = Fe), ke(Ee) && de.$puts("Input file: " + Ee), de.$puts("  Time to read and parse source: " + te.$sprintf("%05.5f", te.$read_parse().$to_f())), de.$puts("  Time to convert document: " + te.$sprintf("%05.5f", te.$convert().$to_f())), de.$puts("  Total time (read, parse and convert): " + te.$sprintf("%05.5f", te.$read_parse_convert().$to_f()));
        }, -1), k.$private(), ke(ot("Process")["$const_defined?"]("CLOCK_MONOTONIC", !1)) && xe((Ze = ot("::", "Process", "skip_raise")) && (nt = Ze, nt) && (ee = nt) && ((U = ee.$clock_gettime) && !U.$$stub || ee["$respond_to_missing?"]("clock_gettime")) ? "method" : Fe, "method") ? (He(ze[0], "CLOCK_ID", ot(ot("Process"), "CLOCK_MONOTONIC")), $e(k, "$now", function() {
          return ot("Process").$clock_gettime(Se("CLOCK_ID"));
        })) : $e(k, "$now", function() {
          return ot("Time").$now();
        });
      }(We[0], null, We);
    }(De[0], De);
  }, Opal.modules["asciidoctor/converter/html5"] = function(u) {
    var se = u.module, re = u.klass, W = u.const_set, $e = u.hash2, S = u.regexp, Z = u.eqeq, Be = u.def, V = u.send2, ke = u.find_super, O = u.truthy, Ke = u.send, xe = u.rb_gt, He = u.rb_plus, De = u.not, Fe = u.neqeq, ot = u.rb_le, Ge = u.rb_lt, tt = u.to_ary, Ye = u.rb_times, We = u.rb_minus, st = u.gvars, L = u.return_val, je = u.alias, k = u.eqeqeq, Ze = u.slice, nt = u.to_a, ee = [], U = u.nil, ze = u.$$$;
    return u.add_stubs("register_for,default=,==,[],init_backend_traits,node_name,convert_inline_quoted,convert_paragraph,convert_inline_anchor,convert_section,convert_listing,convert_literal,convert_ulist,convert_olist,convert_dlist,convert_admonition,convert_colist,convert_embedded,convert_example,convert_floating_title,convert_image,convert_inline_break,convert_inline_button,convert_inline_callout,convert_inline_footnote,convert_inline_image,convert_inline_indexterm,convert_inline_kbd,convert_inline_menu,convert_open,convert_page_break,convert_preamble,convert_quote,convert_sidebar,convert_stem,convert_table,convert_thematic_break,convert_verse,convert_video,convert_document,convert_toc,convert_pass,convert_audio,empty?,attr,attr?,<<,include?,sub_replacements,gsub,extname,slice,length,doctitle,normalize_web_path,primary_stylesheet_data,instance,read_contents,syntax_highlighter,size,docinfo,id,sections?,doctype,role?,role,join,noheader,convert,converter,generate_manname_section,header?,notitle,title,header,each,authors,>,name,email,sub_macros,+,downcase,concat,content,!,footnotes?,footnotes,index,text,nofooter,docinfo?,[]=,delete_at,inspect,!=,to_i,attributes,document,sections,level,caption,captioned_title,<=,numbered,<,sectname,sectnum,convert_outline,title?,icon_uri,compact,media_uri,option?,append_boolean_attribute,style,items,blocks?,text?,chomp,safe,read_svg_contents,alt,image_uri,encode_attribute_value,append_link_constraint_attrs,highlight?,to_sym,format,*,-,count,end_with?,start_with?,list_marker_keyword,parent,warn,logger,context,error,content_only,new,columns,to_h,rows,colspan,rowspan,unshift,shift,split,pop,nil_or_empty?,type,===,catalog,get_root_document,xreftext,target,reftext,chop,sub,match,private,upcase,nested?,parent_document,handles?,to_s,send"), function(Se, Ie) {
      var Ae = se(Se, "Asciidoctor"), de = [Ae].concat(Ie), Ee = u.$r(de);
      return function(te, G, B) {
        var le = re(te, G, "Html5Converter"), oe = [le].concat(B), he = u.$r(oe), j = le.$$prototype;
        return j.void_element_slash = j.xml_mode = j.refs = j.resolving_xref = U, le.$register_for("html5"), W(oe[0], "QUOTE_TAGS", $e(["monospaced", "emphasis", "strong", "double", "single", "mark", "superscript", "subscript", "asciimath", "latexmath"], { monospaced: ["<code>", "</code>", !0], emphasis: ["<em>", "</em>", !0], strong: ["<strong>", "</strong>", !0], double: ["&#8220;", "&#8221;"], single: ["&#8216;", "&#8217;"], mark: ["<mark>", "</mark>", !0], superscript: ["<sup>", "</sup>", !0], subscript: ["<sub>", "</sub>", !0], asciimath: ["\\$", "\\$"], latexmath: ["\\(", "\\)"] }))["$default="](["", ""]), W(oe[0], "DropAnchorRx", /<(?:a\b[^>]*|\/a)>/), W(oe[0], "StemBreakRx", / *\\\n(?:\\?\n)*|\n\n+/), W(oe[0], "SvgPreambleRx", S(["^", he("CC_ALL"), "*?(?=<svg[\\s>])"])), W(oe[0], "SvgStartTagRx", /^<svg(?:\s[^>]*)?>/), W(oe[0], "DimensionAttributeRx", S([`\\s(?:width|height|style)=(["'])`, he("CC_ANY"), "*?\\1"])), Be(le, "$initialize", function(p, E) {
          var M = this, x = U;
          return E == null && (E = $e([], {})), M.backend = p, Z(E["$[]"]("htmlsyntax"), "xml") ? (x = "xml", M.xml_mode = !0, M.void_element_slash = "/") : (x = "html", M.xml_mode = U, M.void_element_slash = ""), M.$init_backend_traits($e(["basebackend", "filetype", "htmlsyntax", "outfilesuffix", "supports_templates"], { basebackend: "html", filetype: "html", htmlsyntax: x, outfilesuffix: ".html", supports_templates: !0 }));
        }, -2), Be(le, "$convert", function v(p, E, M) {
          var x = v.$$p || U, T = this;
          switch (v.$$p = null, E == null && (E = p.$node_name()), M == null && (M = U), E) {
            case "inline_quoted":
              return T.$convert_inline_quoted(p);
            case "paragraph":
              return T.$convert_paragraph(p);
            case "inline_anchor":
              return T.$convert_inline_anchor(p);
            case "section":
              return T.$convert_section(p);
            case "listing":
              return T.$convert_listing(p);
            case "literal":
              return T.$convert_literal(p);
            case "ulist":
              return T.$convert_ulist(p);
            case "olist":
              return T.$convert_olist(p);
            case "dlist":
              return T.$convert_dlist(p);
            case "admonition":
              return T.$convert_admonition(p);
            case "colist":
              return T.$convert_colist(p);
            case "embedded":
              return T.$convert_embedded(p);
            case "example":
              return T.$convert_example(p);
            case "floating_title":
              return T.$convert_floating_title(p);
            case "image":
              return T.$convert_image(p);
            case "inline_break":
              return T.$convert_inline_break(p);
            case "inline_button":
              return T.$convert_inline_button(p);
            case "inline_callout":
              return T.$convert_inline_callout(p);
            case "inline_footnote":
              return T.$convert_inline_footnote(p);
            case "inline_image":
              return T.$convert_inline_image(p);
            case "inline_indexterm":
              return T.$convert_inline_indexterm(p);
            case "inline_kbd":
              return T.$convert_inline_kbd(p);
            case "inline_menu":
              return T.$convert_inline_menu(p);
            case "open":
              return T.$convert_open(p);
            case "page_break":
              return T.$convert_page_break(p);
            case "preamble":
              return T.$convert_preamble(p);
            case "quote":
              return T.$convert_quote(p);
            case "sidebar":
              return T.$convert_sidebar(p);
            case "stem":
              return T.$convert_stem(p);
            case "table":
              return T.$convert_table(p);
            case "thematic_break":
              return T.$convert_thematic_break(p);
            case "verse":
              return T.$convert_verse(p);
            case "video":
              return T.$convert_video(p);
            case "document":
              return T.$convert_document(p);
            case "toc":
              return T.$convert_toc(p);
            case "pass":
              return T.$convert_pass(p);
            case "audio":
              return T.$convert_audio(p);
            default:
              return V(T, ke(T, "convert", v, !1, !0), "convert", [p, E, M], x);
          }
        }, -2), Be(le, "$convert_document", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U, me = U, ue = U, ye = U, Pe = U, Ve = U, et = U, at = U, rt = U, ft = U, _t = U, ht = U, pt = U, vt = U, Et = U, Pt = U, Nt = U, Yt = U, Ft = U, Dt = U, Lt = U;
          return M = "<br" + (x = E.void_element_slash) + ">", O((T = p.$attr("asset-uri-scheme", "https"))["$empty?"]()) || (T = "" + T + ":"), q = "" + T + "//cdnjs.cloudflare.com/ajax/libs", K = p["$attr?"]("linkcss"), me = O(p["$attr?"]("max-width")) ? ' style="max-width: ' + p.$attr("max-width") + ';"' : "", ue = ["<!DOCTYPE html>"], ye = O(p["$attr?"]("nolang")) ? "" : ' lang="' + p.$attr("lang", "en") + '"', ue["$<<"]("<html" + (O(E.xml_mode) ? ' xmlns="http://www.w3.org/1999/xhtml"' : "") + ye + ">"), ue["$<<"](`<head>
<meta charset="` + p.$attr("encoding", "UTF-8") + '"' + x + `>
<meta http-equiv="X-UA-Compatible" content="IE=edge"` + x + `>
<meta name="viewport" content="width=device-width, initial-scale=1.0"` + x + `>
<meta name="generator" content="Asciidoctor ` + p.$attr("asciidoctor-version") + '"' + x + ">"), O(p["$attr?"]("app-name")) && ue["$<<"]('<meta name="application-name" content="' + p.$attr("app-name") + '"' + x + ">"), O(p["$attr?"]("description")) && ue["$<<"]('<meta name="description" content="' + p.$attr("description") + '"' + x + ">"), O(p["$attr?"]("keywords")) && ue["$<<"]('<meta name="keywords" content="' + p.$attr("keywords") + '"' + x + ">"), O(p["$attr?"]("authors")) && ue["$<<"]('<meta name="author" content="' + (O((Pe = p.$sub_replacements(p.$attr("authors")))["$include?"]("<")) ? Pe.$gsub(he("XmlSanitizeRx"), "") : Pe) + '"' + x + ">"), O(p["$attr?"]("copyright")) && ue["$<<"]('<meta name="copyright" content="' + p.$attr("copyright") + '"' + x + ">"), O(p["$attr?"]("favicon")) && (O((Ve = p.$attr("favicon"))["$empty?"]()) ? (Ve = "favicon.ico", et = "image/x-icon") : O(at = he("Helpers").$extname(Ve, U)) ? et = Z(at, ".ico") ? "image/x-icon" : "image/" + at.$slice(1, at.$length()) : et = "image/x-icon", ue["$<<"]('<link rel="icon" type="' + et + '" href="' + Ve + '"' + x + ">")), ue["$<<"]("<title>" + p.$doctitle($e(["sanitize", "use_fallback"], { sanitize: !0, use_fallback: !0 })) + "</title>"), O(he("DEFAULT_STYLESHEET_KEYS")["$include?"](p.$attr("stylesheet"))) ? (O(rt = p.$attr("webfonts")) && ue["$<<"]('<link rel="stylesheet" href="' + T + "//fonts.googleapis.com/css?family=" + (O(rt["$empty?"]()) ? "Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700" : rt) + '"' + x + ">"), O(K) ? ue["$<<"]('<link rel="stylesheet" href="' + p.$normalize_web_path(he("DEFAULT_STYLESHEET_NAME"), p.$attr("stylesdir", ""), !1) + '"' + x + ">") : ue["$<<"](`<style>
` + he("Stylesheets").$instance().$primary_stylesheet_data() + `
</style>`)) : O(p["$attr?"]("stylesheet")) && (O(K) ? ue["$<<"]('<link rel="stylesheet" href="' + p.$normalize_web_path(p.$attr("stylesheet"), p.$attr("stylesdir", "")) + '"' + x + ">") : ue["$<<"](`<style>
` + p.$read_contents(p.$attr("stylesheet"), $e(["start", "warn_on_failure", "label"], { start: p.$attr("stylesdir"), warn_on_failure: !0, label: "stylesheet" })) + `
</style>`)), O(p["$attr?"]("icons", "font")) && (O(p["$attr?"]("iconfont-remote")) ? ue["$<<"]('<link rel="stylesheet" href="' + p.$attr("iconfont-cdn", "" + q + "/font-awesome/" + he("FONT_AWESOME_VERSION") + "/css/font-awesome.min.css") + '"' + x + ">") : (ft = "" + p.$attr("iconfont-name", "font-awesome") + ".css", ue["$<<"]('<link rel="stylesheet" href="' + p.$normalize_web_path(ft, p.$attr("stylesdir", ""), !1) + '"' + x + ">"))), O(_t = p.$syntax_highlighter()) && ue["$<<"](ht = ue.$size()), O((pt = p.$docinfo())["$empty?"]()) || ue["$<<"](pt), ue["$<<"]("</head>"), vt = O(p.$id()) ? ' id="' + p.$id() + '"' : "", O(Et = p["$sections?"]()) && O(p["$attr?"]("toc-class")) && O(p["$attr?"]("toc")) && O(p["$attr?"]("toc-placement", "auto")) ? Pt = [p.$doctype(), p.$attr("toc-class"), "toc-" + p.$attr("toc-position", "header")] : Pt = [p.$doctype()], O(p["$role?"]()) && Pt["$<<"](p.$role()), ue["$<<"]("<body" + vt + ' class="' + Pt.$join(" ") + '">'), O((pt = p.$docinfo("header"))["$empty?"]()) || ue["$<<"](pt), O(p.$noheader()) || (ue["$<<"]('<div id="header"' + me + ">"), Z(p.$doctype(), "manpage") ? (ue["$<<"]("<h1>" + p.$doctitle() + " Manual Page</h1>"), O(Et) && O(p["$attr?"]("toc")) && O(p["$attr?"]("toc-placement", "auto")) && ue["$<<"]('<div id="toc" class="' + p.$attr("toc-class", "toc") + `">
<div id="toctitle">` + p.$attr("toc-title") + `</div>
` + p.$converter().$convert(p, "outline") + `
</div>`), O(p["$attr?"]("manpurpose")) && ue["$<<"](E.$generate_manname_section(p))) : (O(p["$header?"]()) && (O(p.$notitle()) || ue["$<<"]("<h1>" + p.$header().$title() + "</h1>"), Nt = [], Yt = 1, Ke(p.$authors(), "each", [], function(Xt) {
            return Xt == null && (Xt = U), Nt["$<<"]('<span id="author' + (O(xe(Yt, 1)) ? Yt : "") + '" class="author">' + p.$sub_replacements(Xt.$name()) + "</span>" + M), O(Xt.$email()) && Nt["$<<"]('<span id="email' + (O(xe(Yt, 1)) ? Yt : "") + '" class="email">' + p.$sub_macros(Xt.$email()) + "</span>" + M), Yt = He(Yt, 1);
          }), O(p["$attr?"]("revnumber")) && Nt["$<<"]('<span id="revnumber">' + (O(Ft = p.$attr("version-label")) ? Ft : "").$downcase() + " " + p.$attr("revnumber") + (O(p["$attr?"]("revdate")) ? "," : "") + "</span>"), O(p["$attr?"]("revdate")) && Nt["$<<"]('<span id="revdate">' + p.$attr("revdate") + "</span>"), O(p["$attr?"]("revremark")) && Nt["$<<"]("" + M + '<span id="revremark">' + p.$attr("revremark") + "</span>"), O(Nt["$empty?"]()) || (ue["$<<"]('<div class="details">'), ue.$concat(Nt), ue["$<<"]("</div>"))), O(Et) && O(p["$attr?"]("toc")) && O(p["$attr?"]("toc-placement", "auto")) && ue["$<<"]('<div id="toc" class="' + p.$attr("toc-class", "toc") + `">
<div id="toctitle">` + p.$attr("toc-title") + `</div>
` + p.$converter().$convert(p, "outline") + `
</div>`)), ue["$<<"]("</div>")), ue["$<<"]('<div id="content"' + me + `>
` + p.$content() + `
</div>`), O(p["$footnotes?"]()) && De(p["$attr?"]("nofootnotes")) && (ue["$<<"]('<div id="footnotes"' + me + `>
<hr` + x + ">"), Ke(p.$footnotes(), "each", [], function(Xt) {
            return Xt == null && (Xt = U), ue["$<<"]('<div class="footnote" id="_footnotedef_' + Xt.$index() + `">
<a href="#_footnoteref_` + Xt.$index() + '">' + Xt.$index() + "</a>. " + Xt.$text() + `
</div>`);
          }), ue["$<<"]("</div>")), O(p.$nofooter()) || (ue["$<<"]('<div id="footer"' + me + ">"), ue["$<<"]('<div id="footer-text">'), O(p["$attr?"]("revnumber")) && ue["$<<"]("" + p.$attr("version-label") + " " + p.$attr("revnumber") + M), O(p["$attr?"]("last-update-label")) && De(p["$attr?"]("reproducible")) && ue["$<<"]("" + p.$attr("last-update-label") + " " + p.$attr("docdatetime")), ue["$<<"]("</div>"), ue["$<<"]("</div>")), O(_t) && (O(_t["$docinfo?"]("head")) ? ue["$[]="](ht, _t.$docinfo("head", p, $e(["cdn_base_url", "linkcss", "self_closing_tag_slash"], { cdn_base_url: q, linkcss: K, self_closing_tag_slash: x }))) : ue.$delete_at(ht), O(_t["$docinfo?"]("footer")) && ue["$<<"](_t.$docinfo("footer", p, $e(["cdn_base_url", "linkcss", "self_closing_tag_slash"], { cdn_base_url: q, linkcss: K, self_closing_tag_slash: x })))), O(p["$attr?"]("stem")) && (Dt = p.$attr("eqnums", "none"), O(Dt["$empty?"]()) && (Dt = "AMS"), Lt = ' equationNumbers: { autoNumber: "' + Dt + '" } ', ue["$<<"](`<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  messageStyle: "none",
  tex2jax: {
    inlineMath: [` + he("INLINE_MATH_DELIMITERS")["$[]"]("latexmath").$inspect() + `],
    displayMath: [` + he("BLOCK_MATH_DELIMITERS")["$[]"]("latexmath").$inspect() + `],
    ignoreClass: "nostem|nolatexmath"
  },
  asciimath2jax: {
    delimiters: [` + he("BLOCK_MATH_DELIMITERS")["$[]"]("asciimath").$inspect() + `],
    ignoreClass: "nostem|noasciimath"
  },
  TeX: {` + Lt + `}
})
MathJax.Hub.Register.StartupHook("AsciiMath Jax Ready", function () {
  MathJax.InputJax.AsciiMath.postfilterHooks.Add(function (data, node) {
    if ((node = data.script.parentNode) && (node = node.parentNode) && node.classList.contains("stemblock")) {
      data.math.root.display = "block"
    }
    return data
  })
})
<\/script>
<script src="` + q + "/mathjax/" + he("MATHJAX_VERSION") + '/MathJax.js?config=TeX-MML-AM_HTMLorMML"><\/script>')), O((pt = p.$docinfo("footer"))["$empty?"]()) || ue["$<<"](pt), ue["$<<"]("</body>"), ue["$<<"]("</html>"), ue.$join(he("LF"));
        }), Be(le, "$convert_embedded", function(p) {
          var E = this, M = U, x = U, T = U;
          return M = [], Z(p.$doctype(), "manpage") ? (O(p.$notitle()) || (x = O(p.$id()) ? ' id="' + p.$id() + '"' : "", M["$<<"]("<h1" + x + ">" + p.$doctitle() + " Manual Page</h1>")), O(p["$attr?"]("manpurpose")) && M["$<<"](E.$generate_manname_section(p))) : O(p["$header?"]()) && De(p.$notitle()) && (x = O(p.$id()) ? ' id="' + p.$id() + '"' : "", M["$<<"]("<h1" + x + ">" + p.$header().$title() + "</h1>")), O(p["$sections?"]()) && O(p["$attr?"]("toc")) && Fe(T = p.$attr("toc-placement"), "macro") && Fe(T, "preamble") && M["$<<"](`<div id="toc" class="toc">
<div id="toctitle">` + p.$attr("toc-title") + `</div>
` + p.$converter().$convert(p, "outline") + `
</div>`), M["$<<"](p.$content()), O(p["$footnotes?"]()) && De(p["$attr?"]("nofootnotes")) && (M["$<<"](`<div id="footnotes">
<hr` + E.void_element_slash + ">"), Ke(p.$footnotes(), "each", [], function(K) {
            return K == null && (K = U), M["$<<"]('<div class="footnote" id="_footnotedef_' + K.$index() + `">
<a href="#_footnoteref_` + K.$index() + '">' + K.$index() + "</a>. " + K.$text() + `
</div>`);
          }), M["$<<"]("</div>")), M.$join(he("LF"));
        }), Be(le, "$convert_outline", function(p, E) {
          var M = this, x = U, T = U, q = U, K = U, me = U, ue = U;
          return E == null && (E = $e([], {})), O(p["$sections?"]()) ? (x = O(T = E["$[]"]("sectnumlevels")) ? T : (O(q = p.$document().$attributes()["$[]"]("sectnumlevels")) ? q : 3).$to_i(), K = O(T = E["$[]"]("toclevels")) ? T : (O(q = p.$document().$attributes()["$[]"]("toclevels")) ? q : 2).$to_i(), me = p.$sections(), ue = ['<ul class="sectlevel' + me["$[]"](0).$level() + '">'], Ke(me, "each", [], function ye(Pe) {
            var Ve = ye.$$s == null ? this : ye.$$s, et = U, at = U, rt = U, ft = U;
            if (Pe == null && (Pe = U), et = Pe.$level(), O(Pe.$caption()))
              at = Pe.$captioned_title();
            else if (O(Pe.$numbered()) && O(ot(et, x)))
              if (O(Ge(et, 2)) && Z(p.$document().$doctype(), "book"))
                switch (Pe.$sectname()) {
                  case "chapter":
                    at = (O(rt = p.$document().$attributes()["$[]"]("chapter-signifier")) ? "" + rt + " " : "") + Pe.$sectnum() + " " + Pe.$title();
                    break;
                  case "part":
                    at = (O(rt = p.$document().$attributes()["$[]"]("part-signifier")) ? "" + rt + " " : "") + Pe.$sectnum(U, ":") + " " + Pe.$title();
                    break;
                  default:
                    at = "" + Pe.$sectnum() + " " + Pe.$title();
                }
              else
                at = "" + Pe.$sectnum() + " " + Pe.$title();
            else
              at = Pe.$title();
            return O(at["$include?"]("<a")) && (at = at.$gsub(he("DropAnchorRx"), "")), O(Ge(et, K)) && O(ft = Ve.$convert_outline(Pe, $e(["toclevels", "sectnumlevels"], { toclevels: K, sectnumlevels: x }))) ? (ue["$<<"]('<li><a href="#' + Pe.$id() + '">' + at + "</a>"), ue["$<<"](ft), ue["$<<"]("</li>")) : ue["$<<"]('<li><a href="#' + Pe.$id() + '">' + at + "</a></li>");
          }, { $$s: M }), ue["$<<"]("</ul>"), ue.$join(he("LF"))) : U;
        }, -2), Be(le, "$convert_section", function(p) {
          var E = U, M = U, x = U, T = U, q = U, K = U, me = U, ue = U;
          if (E = p.$document().$attributes(), M = p.$level(), O(p.$caption()))
            x = p.$captioned_title();
          else if (O(p.$numbered()) && O(ot(M, (O(T = E["$[]"]("sectnumlevels")) ? T : 3).$to_i())))
            if (O(Ge(M, 2)) && Z(p.$document().$doctype(), "book"))
              switch (p.$sectname()) {
                case "chapter":
                  x = (O(q = E["$[]"]("chapter-signifier")) ? "" + q + " " : "") + p.$sectnum() + " " + p.$title();
                  break;
                case "part":
                  x = (O(q = E["$[]"]("part-signifier")) ? "" + q + " " : "") + p.$sectnum(U, ":") + " " + p.$title();
                  break;
                default:
                  x = "" + p.$sectnum() + " " + p.$title();
              }
            else
              x = "" + p.$sectnum() + " " + p.$title();
          else
            x = p.$title();
          return O(p.$id()) ? (K = ' id="' + (me = p.$id()) + '"', O(E["$[]"]("sectlinks")) && (x = '<a class="link" href="#' + me + '">' + x + "</a>"), O(E["$[]"]("sectanchors")) && (Z(E["$[]"]("sectanchors"), "after") ? x = "" + x + '<a class="anchor" href="#' + me + '"></a>' : x = '<a class="anchor" href="#' + me + '"></a>' + x)) : K = "", Z(M, 0) ? "<h1" + K + ' class="sect0' + (O(ue = p.$role()) ? " " + ue : "") + '">' + x + `</h1>
` + p.$content() : '<div class="sect' + M + (O(ue = p.$role()) ? " " + ue : "") + `">
<h` + He(M, 1) + K + ">" + x + "</h" + He(M, 1) + `>
` + (Z(M, 1) ? `<div class="sectionbody">
` + p.$content() + `
</div>` : p.$content()) + `
</div>`;
        }), Be(le, "$convert_admonition", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U;
          return M = O(p.$id()) ? ' id="' + p.$id() + '"' : "", x = p.$attr("name"), T = O(p["$title?"]()) ? '<div class="title">' + p.$title() + `</div>
` : "", O(p.$document()["$attr?"]("icons")) ? O(p.$document()["$attr?"]("icons", "font")) && De(p["$attr?"]("icon")) ? q = '<i class="fa icon-' + x + '" title="' + p.$attr("textlabel") + '"></i>' : q = '<img src="' + p.$icon_uri(x) + '" alt="' + p.$attr("textlabel") + '"' + E.void_element_slash + ">" : q = '<div class="title">' + p.$attr("textlabel") + "</div>", "<div" + M + ' class="admonitionblock ' + x + (O(K = p.$role()) ? " " + K : "") + `">
<table>
<tr>
<td class="icon">
` + q + `
</td>
<td class="content">
` + T + p.$content() + `
</td>
</tr>
</table>
</div>`;
        }), Be(le, "$convert_audio", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U, me = U, ue = U, ye = U, Pe = U;
          return M = E.xml_mode, x = O(p.$id()) ? ' id="' + p.$id() + '"' : "", T = ["audioblock", p.$role()].$compact(), q = ' class="' + T.$join(" ") + '"', K = O(p["$title?"]()) ? '<div class="title">' + p.$title() + `</div>
` : "", me = p.$attr("start"), ue = p.$attr("end"), ye = O(me) || O(ue) ? "#t=" + (O(Pe = me) ? Pe : "") + (O(ue) ? "," + ue : "") : "", "<div" + x + q + `>
` + K + `<div class="content">
<audio src="` + p.$media_uri(p.$attr("target")) + ye + '"' + (O(p["$option?"]("autoplay")) ? E.$append_boolean_attribute("autoplay", M) : "") + (O(p["$option?"]("nocontrols")) ? "" : E.$append_boolean_attribute("controls", M)) + (O(p["$option?"]("loop")) ? E.$append_boolean_attribute("loop", M) : "") + `>
Your browser does not support the audio tag.
</audio>
</div>
</div>`;
        }), Be(le, "$convert_colist", function(p) {
          var E, M = this, x = U, T = U, q = U, K = U, me = U, ue = U;
          return x = [], T = O(p.$id()) ? ' id="' + p.$id() + '"' : "", q = ["colist", p.$style(), p.$role()].$compact(), K = ' class="' + q.$join(" ") + '"', x["$<<"]("<div" + T + K + ">"), O(p["$title?"]()) && x["$<<"]('<div class="title">' + p.$title() + "</div>"), O(p.$document()["$attr?"]("icons")) ? (x["$<<"]("<table>"), E = [p.$document()["$attr?"]("icons", "font"), 0], me = E[0], ue = E[1], Ke(p.$items(), "each", [], function ye(Pe) {
            var Ve = ye.$$s == null ? this : ye.$$s, et = U;
            return Ve.void_element_slash == null && (Ve.void_element_slash = U), Pe == null && (Pe = U), ue = He(ue, 1), O(me) ? et = '<i class="conum" data-value="' + ue + '"></i><b>' + ue + "</b>" : et = '<img src="' + p.$icon_uri("callouts/" + ue) + '" alt="' + ue + '"' + Ve.void_element_slash + ">", x["$<<"](`<tr>
<td>` + et + `</td>
<td>` + Pe.$text() + (O(Pe["$blocks?"]()) ? He(he("LF"), Pe.$content()) : "") + `</td>
</tr>`);
          }, { $$s: M }), x["$<<"]("</table>")) : (x["$<<"]("<ol>"), Ke(p.$items(), "each", [], function(Pe) {
            return Pe == null && (Pe = U), x["$<<"](`<li>
<p>` + Pe.$text() + "</p>" + (O(Pe["$blocks?"]()) ? He(he("LF"), Pe.$content()) : "") + `
</li>`);
          }), x["$<<"]("</ol>")), x["$<<"]("</div>"), x.$join(he("LF"));
        }), Be(le, "$convert_dlist", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U, me = U, ue = U;
          switch (M = [], x = O(p.$id()) ? ' id="' + p.$id() + '"' : "", p.$style()) {
            case "qanda":
              T = ["qlist", "qanda", p.$role()];
              break;
            case "horizontal":
              T = ["hdlist", p.$role()];
              break;
            default:
              T = ["dlist", p.$style(), p.$role()];
          }
          switch (q = ' class="' + T.$compact().$join(" ") + '"', M["$<<"]("<div" + x + q + ">"), O(p["$title?"]()) && M["$<<"]('<div class="title">' + p.$title() + "</div>"), p.$style()) {
            case "qanda":
              M["$<<"]("<ol>"), Ke(p.$items(), "each", [], function(Pe, Ve) {
                return Pe == null && (Pe = U), Ve == null && (Ve = U), M["$<<"]("<li>"), Ke(Pe, "each", [], function(at) {
                  return at == null && (at = U), M["$<<"]("<p><em>" + at.$text() + "</em></p>");
                }), O(Ve) && (O(Ve["$text?"]()) && M["$<<"]("<p>" + Ve.$text() + "</p>"), O(Ve["$blocks?"]()) && M["$<<"](Ve.$content())), M["$<<"]("</li>");
              }), M["$<<"]("</ol>");
              break;
            case "horizontal":
              K = E.void_element_slash, M["$<<"]("<table>"), (O(p["$attr?"]("labelwidth")) || O(p["$attr?"]("itemwidth"))) && (M["$<<"]("<colgroup>"), me = O(p["$attr?"]("labelwidth")) ? ' style="width: ' + p.$attr("labelwidth").$chomp("%") + '%;"' : "", M["$<<"]("<col" + me + K + ">"), me = O(p["$attr?"]("itemwidth")) ? ' style="width: ' + p.$attr("itemwidth").$chomp("%") + '%;"' : "", M["$<<"]("<col" + me + K + ">"), M["$<<"]("</colgroup>")), Ke(p.$items(), "each", [], function(Pe, Ve) {
                var et = U;
                return Pe == null && (Pe = U), Ve == null && (Ve = U), M["$<<"]("<tr>"), M["$<<"]('<td class="hdlist1' + (O(p["$option?"]("strong")) ? " strong" : "") + '">'), et = !0, Ke(Pe, "each", [], function(rt) {
                  return rt == null && (rt = U), O(et) || M["$<<"]("<br" + K + ">"), M["$<<"](rt.$text()), et = U;
                }), M["$<<"]("</td>"), M["$<<"]('<td class="hdlist2">'), O(Ve) && (O(Ve["$text?"]()) && M["$<<"]("<p>" + Ve.$text() + "</p>"), O(Ve["$blocks?"]()) && M["$<<"](Ve.$content())), M["$<<"]("</td>"), M["$<<"]("</tr>");
              }), M["$<<"]("</table>");
              break;
            default:
              M["$<<"]("<dl>"), ue = O(p.$style()) ? "" : ' class="hdlist1"', Ke(p.$items(), "each", [], function(Pe, Ve) {
                return Pe == null && (Pe = U), Ve == null && (Ve = U), Ke(Pe, "each", [], function(at) {
                  return at == null && (at = U), M["$<<"]("<dt" + ue + ">" + at.$text() + "</dt>");
                }), O(Ve) ? (M["$<<"]("<dd>"), O(Ve["$text?"]()) && M["$<<"]("<p>" + Ve.$text() + "</p>"), O(Ve["$blocks?"]()) && M["$<<"](Ve.$content()), M["$<<"]("</dd>")) : U;
              }), M["$<<"]("</dl>");
          }
          return M["$<<"]("</div>"), M.$join(he("LF"));
        }), Be(le, "$convert_example", function(p) {
          var E = U, M = U, x = U, T = U, q = U;
          return E = O(p.$id()) ? ' id="' + p.$id() + '"' : "", O(p["$option?"]("collapsible")) ? (M = O(p.$role()) ? ' class="' + p.$role() + '"' : "", x = O(p["$title?"]()) ? '<summary class="title">' + p.$title() + "</summary>" : '<summary class="title">Details</summary>', "<details" + E + M + (O(p["$option?"]("open")) ? " open" : "") + `>
` + x + `
<div class="content">
` + p.$content() + `
</div>
</details>`) : (T = O(p["$title?"]()) ? '<div class="title">' + p.$captioned_title() + `</div>
` : "", "<div" + E + ' class="exampleblock' + (O(q = p.$role()) ? " " + q : "") + `">
` + T + `<div class="content">
` + p.$content() + `
</div>
</div>`);
        }), Be(le, "$convert_floating_title", function(p) {
          var E = U, M = U, x = U;
          return E = "h" + He(p.$level(), 1), M = O(p.$id()) ? ' id="' + p.$id() + '"' : "", x = [p.$style(), p.$role()].$compact(), "<" + E + M + ' class="' + x.$join(" ") + '">' + p.$title() + "</" + E + ">";
        }), Be(le, "$convert_image", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U, me = U, ue = U, ye = U, Pe = U, Ve = U;
          return M = p.$attr("target"), x = O(p["$attr?"]("width")) ? ' width="' + p.$attr("width") + '"' : "", T = O(p["$attr?"]("height")) ? ' height="' + p.$attr("height") + '"' : "", (O(p["$attr?"]("format", "svg")) || O(M["$include?"](".svg"))) && O(Ge(p.$document().$safe(), ze(he("SafeMode"), "SECURE"))) ? O(p["$option?"]("inline")) ? q = O(K = E.$read_svg_contents(p, M)) ? K : '<span class="alt">' + p.$alt() + "</span>" : O(p["$option?"]("interactive")) ? (me = O(p["$attr?"]("fallback")) ? '<img src="' + p.$image_uri(p.$attr("fallback")) + '" alt="' + E.$encode_attribute_value(p.$alt()) + '"' + x + T + E.void_element_slash + ">" : '<span class="alt">' + p.$alt() + "</span>", q = '<object type="image/svg+xml" data="' + p.$image_uri(M) + '"' + x + T + ">" + me + "</object>") : q = '<img src="' + p.$image_uri(M) + '" alt="' + E.$encode_attribute_value(p.$alt()) + '"' + x + T + E.void_element_slash + ">" : q = '<img src="' + p.$image_uri(M) + '" alt="' + E.$encode_attribute_value(p.$alt()) + '"' + x + T + E.void_element_slash + ">", O(p["$attr?"]("link")) && (q = '<a class="image" href="' + p.$attr("link") + '"' + E.$append_link_constraint_attrs(p).$join() + ">" + q + "</a>"), ue = O(p.$id()) ? ' id="' + p.$id() + '"' : "", ye = ["imageblock"], O(p["$attr?"]("float")) && ye["$<<"](p.$attr("float")), O(p["$attr?"]("align")) && ye["$<<"]("text-" + p.$attr("align")), O(p.$role()) && ye["$<<"](p.$role()), Pe = ' class="' + ye.$join(" ") + '"', Ve = O(p["$title?"]()) ? `
<div class="title">` + p.$captioned_title() + "</div>" : "", "<div" + ue + Pe + `>
<div class="content">
` + q + `
</div>` + Ve + `
</div>`;
        }), Be(le, "$convert_listing", function(p) {
          var E = U, M = U, x = U, T = U, q = U, K = U, me = U, ue = U, ye = U, Pe = U, Ve = U;
          return E = O(M = p["$option?"]("nowrap")) ? M : p.$document()["$attr?"]("prewrap")["$!"](), Z(p.$style(), "source") ? (x = p.$attr("language"), O(T = p.$document().$syntax_highlighter()) ? (q = O(T["$highlight?"]()) ? $e(["css_mode", "style"], { css_mode: (O(M = (K = p.$document().$attributes())["$[]"]("" + T.$name() + "-css")) ? M : "class").$to_sym(), style: K["$[]"]("" + T.$name() + "-style") }) : $e([], {}), q["$[]="]("nowrap", E)) : (me = '<pre class="highlight' + (O(E) ? " nowrap" : "") + '"><code' + (O(x) ? ' class="language-' + x + '" data-lang="' + x + '"' : "") + ">", ue = "</code></pre>")) : (me = "<pre" + (O(E) ? ' class="nowrap"' : "") + ">", ue = "</pre>"), ye = O(p.$id()) ? ' id="' + p.$id() + '"' : "", Pe = O(p["$title?"]()) ? '<div class="title">' + p.$captioned_title() + `</div>
` : "", "<div" + ye + ' class="listingblock' + (O(Ve = p.$role()) ? " " + Ve : "") + `">
` + Pe + `<div class="content">
` + (O(T) ? T.$format(p, x, q) : He(He(me, p.$content()), ue)) + `
</div>
</div>`;
        }), Be(le, "$convert_literal", function(p) {
          var E = U, M = U, x = U, T = U, q = U;
          return E = O(p.$id()) ? ' id="' + p.$id() + '"' : "", M = O(p["$title?"]()) ? '<div class="title">' + p.$title() + `</div>
` : "", x = O(T = p.$document()["$attr?"]("prewrap")["$!"]()) ? T : p["$option?"]("nowrap"), "<div" + E + ' class="literalblock' + (O(q = p.$role()) ? " " + q : "") + `">
` + M + `<div class="content">
<pre` + (O(x) ? ' class="nowrap"' : "") + ">" + p.$content() + `</pre>
</div>
</div>`;
        }), Be(le, "$convert_stem", function(p) {
          var E, M, x = this, T = U, q = U, K = U, me = U, ue = U, ye = U, Pe = U, Ve = U;
          return T = O(p.$id()) ? ' id="' + p.$id() + '"' : "", q = O(p["$title?"]()) ? '<div class="title">' + p.$title() + `</div>
` : "", M = he("BLOCK_MATH_DELIMITERS")["$[]"](K = p.$style().$to_sym()), E = tt(M), me = E[0] == null ? U : E[0], ue = E[1] == null ? U : E[1], O(ye = p.$content()) ? (Z(K, "asciimath") && O(ye["$include?"](he("LF"))) && (Pe = "" + he("LF") + "<br" + x.void_element_slash + ">", ye = Ke(ye, "gsub", [he("StemBreakRx")], function() {
            var at;
            return "" + ue + Ye(Pe, We(((at = st["~"]) === U ? U : at["$[]"](0)).$count(he("LF")), 1)) + he("LF") + me;
          })), O(ye["$start_with?"](me)) && O(ye["$end_with?"](ue)) || (ye = "" + me + ye + ue)) : ye = "", "<div" + T + ' class="stemblock' + (O(Ve = p.$role()) ? " " + Ve : "") + `">
` + q + `<div class="content">
` + ye + `
</div>
</div>`;
        }), Be(le, "$convert_olist", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U, me = U, ue = U, ye = U;
          return M = [], x = O(p.$id()) ? ' id="' + p.$id() + '"' : "", T = ["olist", p.$style(), p.$role()].$compact(), q = ' class="' + T.$join(" ") + '"', M["$<<"]("<div" + x + q + ">"), O(p["$title?"]()) && M["$<<"]('<div class="title">' + p.$title() + "</div>"), K = O(me = p.$list_marker_keyword()) ? ' type="' + me + '"' : "", ue = O(p["$attr?"]("start")) ? ' start="' + p.$attr("start") + '"' : "", ye = O(p["$option?"]("reversed")) ? E.$append_boolean_attribute("reversed", E.xml_mode) : "", M["$<<"]('<ol class="' + p.$style() + '"' + K + ue + ye + ">"), Ke(p.$items(), "each", [], function(Ve) {
            return Ve == null && (Ve = U), O(Ve.$id()) ? M["$<<"]('<li id="' + Ve.$id() + '"' + (O(Ve.$role()) ? ' class="' + Ve.$role() + '"' : "") + ">") : O(Ve.$role()) ? M["$<<"]('<li class="' + Ve.$role() + '">') : M["$<<"]("<li>"), M["$<<"]("<p>" + Ve.$text() + "</p>"), O(Ve["$blocks?"]()) && M["$<<"](Ve.$content()), M["$<<"]("</li>");
          }), M["$<<"]("</ol>"), M["$<<"]("</div>"), M.$join(he("LF"));
        }), Be(le, "$convert_open", function(p) {
          var E = this, M = U, x = U, T = U, q = U;
          return Z(M = p.$style(), "abstract") ? Z(p.$parent(), p.$document()) && Z(p.$document().$doctype(), "book") ? (E.$logger().$warn("abstract block cannot be used in a document without a title when doctype is book. Excluding block content."), "") : (x = O(p.$id()) ? ' id="' + p.$id() + '"' : "", T = O(p["$title?"]()) ? '<div class="title">' + p.$title() + `</div>
` : "", "<div" + x + ' class="quoteblock abstract' + (O(q = p.$role()) ? " " + q : "") + `">
` + T + `<blockquote>
` + p.$content() + `
</blockquote>
</div>`) : Z(M, "partintro") && (O(xe(p.$level(), 0)) || Fe(p.$parent().$context(), "section") || Fe(p.$document().$doctype(), "book")) ? (E.$logger().$error("partintro block can only be used when doctype is book and must be a child of a book part. Excluding block content."), "") : (x = O(p.$id()) ? ' id="' + p.$id() + '"' : "", T = O(p["$title?"]()) ? '<div class="title">' + p.$title() + `</div>
` : "", "<div" + x + ' class="openblock' + (O(M) && Fe(M, "open") ? " " + M : "") + (O(q = p.$role()) ? " " + q : "") + `">
` + T + `<div class="content">
` + p.$content() + `
</div>
</div>`);
        }), Be(le, "$convert_page_break", L('<div style="page-break-after: always;"></div>')), Be(le, "$convert_paragraph", function(p) {
          var E = U;
          return O(p.$role()) ? E = (O(p.$id()) ? ' id="' + p.$id() + '"' : "") + ' class="paragraph ' + p.$role() + '"' : O(p.$id()) ? E = ' id="' + p.$id() + '" class="paragraph"' : E = ' class="paragraph"', O(p["$title?"]()) ? "<div" + E + `>
<div class="title">` + p.$title() + `</div>
<p>` + p.$content() + `</p>
</div>` : "<div" + E + `>
<p>` + p.$content() + `</p>
</div>`;
        }), je(le, "convert_pass", "content_only"), Be(le, "$convert_preamble", function(p) {
          var E = U, M = U;
          return O((E = p.$document())["$attr?"]("toc-placement", "preamble")) && O(E["$sections?"]()) && O(E["$attr?"]("toc")) ? M = `
<div id="toc" class="` + E.$attr("toc-class", "toc") + `">
<div id="toctitle">` + E.$attr("toc-title") + `</div>
` + E.$converter().$convert(E, "outline") + `
</div>` : M = "", `<div id="preamble">
<div class="sectionbody">
` + p.$content() + `
</div>` + M + `
</div>`;
        }), Be(le, "$convert_quote", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U, me = U, ue = U, ye = U, Pe = U;
          return M = O(p.$id()) ? ' id="' + p.$id() + '"' : "", x = ["quoteblock", p.$role()].$compact(), T = ' class="' + x.$join(" ") + '"', q = O(p["$title?"]()) ? `
<div class="title">` + p.$title() + "</div>" : "", K = O(p["$attr?"]("attribution")) ? p.$attr("attribution") : U, me = O(p["$attr?"]("citetitle")) ? p.$attr("citetitle") : U, O(K) || O(me) ? (ue = O(me) ? "<cite>" + me + "</cite>" : "", ye = O(K) ? "&#8212; " + K + (O(me) ? "<br" + E.void_element_slash + `>
` : "") : "", Pe = `
<div class="attribution">
` + ye + ue + `
</div>`) : Pe = "", "<div" + M + T + ">" + q + `
<blockquote>
` + p.$content() + `
</blockquote>` + Pe + `
</div>`;
        }), Be(le, "$convert_thematic_break", function(p) {
          var E = this;
          return "<hr" + E.void_element_slash + ">";
        }), Be(le, "$convert_sidebar", function(p) {
          var E = U, M = U, x = U;
          return E = O(p.$id()) ? ' id="' + p.$id() + '"' : "", M = O(p["$title?"]()) ? '<div class="title">' + p.$title() + `</div>
` : "", "<div" + E + ' class="sidebarblock' + (O(x = p.$role()) ? " " + x : "") + `">
<div class="content">
` + M + p.$content() + `
</div>
</div>`;
        }), Be(le, "$convert_table", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U, me = U, ue = U, ye = U, Pe = U, Ve = U, et = U;
          return M = [], x = O(p.$id()) ? ' id="' + p.$id() + '"' : "", Z(T = p.$attr("frame", "all", "table-frame"), "topbot") && (T = "ends"), q = ["tableblock", "frame-" + T, "grid-" + p.$attr("grid", "all", "table-grid")], O(K = p.$attr("stripes", U, "table-stripes")) && q["$<<"]("stripes-" + K), me = "", O(ue = p["$option?"]("autowidth")) && De(p["$attr?"]("width")) ? q["$<<"]("fit-content") : Z(ye = p.$attr("tablepcwidth"), 100) ? q["$<<"]("stretch") : me = ' style="width: ' + ye + '%;"', O(p["$attr?"]("float")) && q["$<<"](p.$attr("float")), O(Pe = p.$role()) && q["$<<"](Pe), Ve = ' class="' + q.$join(" ") + '"', M["$<<"]("<table" + x + Ve + me + ">"), O(p["$title?"]()) && M["$<<"]('<caption class="title">' + p.$captioned_title() + "</caption>"), O(xe(p.$attr("rowcount"), 0)) && (et = E.void_element_slash, M["$<<"]("<colgroup>"), O(ue) ? M = He(M, he("Array").$new(p.$columns().$size(), "<col" + et + ">")) : Ke(p.$columns(), "each", [], function(rt) {
            return rt == null && (rt = U), M["$<<"](O(rt["$option?"]("autowidth")) ? "<col" + et + ">" : '<col style="width: ' + rt.$attr("colpcwidth") + '%;"' + et + ">");
          }), M["$<<"]("</colgroup>"), Ke(p.$rows().$to_h(), "each", [], function(rt, ft) {
            return rt == null && (rt = U), ft == null && (ft = U), O(ft["$empty?"]()) ? U : (M["$<<"]("<t" + rt + ">"), Ke(ft, "each", [], function(ht) {
              return ht == null && (ht = U), M["$<<"]("<tr>"), Ke(ht, "each", [], function(vt) {
                var Et = U, Pt = U, Nt = U, Yt = U, Ft = U, Dt = U;
                if (vt == null && (vt = U), Z(rt, "head"))
                  Et = vt.$text();
                else
                  switch (vt.$style()) {
                    case "asciidoc":
                      Et = '<div class="content">' + vt.$content() + "</div>";
                      break;
                    case "literal":
                      Et = '<div class="literal"><pre>' + vt.$text() + "</pre></div>";
                      break;
                    default:
                      Et = O((Et = vt.$content())["$empty?"]()) ? "" : '<p class="tableblock">' + Et.$join(`</p>
<p class="tableblock">`) + "</p>";
                  }
                return Pt = Z(rt, "head") || Z(vt.$style(), "header") ? "th" : "td", Nt = ' class="tableblock halign-' + vt.$attr("halign") + " valign-" + vt.$attr("valign") + '"', Yt = O(vt.$colspan()) ? ' colspan="' + vt.$colspan() + '"' : "", Ft = O(vt.$rowspan()) ? ' rowspan="' + vt.$rowspan() + '"' : "", Dt = O(p.$document()["$attr?"]("cellbgcolor")) ? ' style="background-color: ' + p.$document().$attr("cellbgcolor") + ';"' : "", M["$<<"]("<" + Pt + Nt + Yt + Ft + Dt + ">" + Et + "</" + Pt + ">");
              }), M["$<<"]("</tr>");
            }), M["$<<"]("</t" + rt + ">"));
          })), M["$<<"]("</table>"), M.$join(he("LF"));
        }), Be(le, "$convert_toc", function(p) {
          var E = U, M = U, x = U, T = U, q = U, K = U;
          return O((E = p.$document())["$attr?"]("toc-placement", "macro")) && O(E["$sections?"]()) && O(E["$attr?"]("toc")) ? (O(p.$id()) ? (M = ' id="' + p.$id() + '"', x = ' id="' + p.$id() + 'title"') : (M = ' id="toc"', x = ' id="toctitle"'), T = O(p["$title?"]()) ? p.$title() : E.$attr("toc-title"), q = O(p["$attr?"]("levels")) ? p.$attr("levels").$to_i() : U, K = O(p["$role?"]()) ? p.$role() : E.$attr("toc-class", "toc"), "<div" + M + ' class="' + K + `">
<div` + x + ' class="title">' + T + `</div>
` + E.$converter().$convert(E, "outline", $e(["toclevels"], { toclevels: q })) + `
</div>`) : "<!-- toc disabled -->";
        }), Be(le, "$convert_ulist", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U, me = U, ue = U;
          return M = [], x = O(p.$id()) ? ' id="' + p.$id() + '"' : "", T = ["ulist", p.$style(), p.$role()].$compact(), q = K = "", O(me = p["$option?"]("checklist")) ? (T.$unshift(T.$shift(), "checklist"), ue = ' class="checklist"', O(p["$option?"]("interactive")) ? O(E.xml_mode) ? (q = '<input type="checkbox" data-item-complete="1" checked="checked"/> ', K = '<input type="checkbox" data-item-complete="0"/> ') : (q = '<input type="checkbox" data-item-complete="1" checked> ', K = '<input type="checkbox" data-item-complete="0"> ') : O(p.$document()["$attr?"]("icons", "font")) ? (q = '<i class="fa fa-check-square-o"></i> ', K = '<i class="fa fa-square-o"></i> ') : (q = "&#10003; ", K = "&#10063; ")) : ue = O(p.$style()) ? ' class="' + p.$style() + '"' : "", M["$<<"]("<div" + x + ' class="' + T.$join(" ") + '">'), O(p["$title?"]()) && M["$<<"]('<div class="title">' + p.$title() + "</div>"), M["$<<"]("<ul" + ue + ">"), Ke(p.$items(), "each", [], function(Pe) {
            return Pe == null && (Pe = U), O(Pe.$id()) ? M["$<<"]('<li id="' + Pe.$id() + '"' + (O(Pe.$role()) ? ' class="' + Pe.$role() + '"' : "") + ">") : O(Pe.$role()) ? M["$<<"]('<li class="' + Pe.$role() + '">') : M["$<<"]("<li>"), O(me) && O(Pe["$attr?"]("checkbox")) ? M["$<<"]("<p>" + (O(Pe["$attr?"]("checked")) ? q : K) + Pe.$text() + "</p>") : M["$<<"]("<p>" + Pe.$text() + "</p>"), O(Pe["$blocks?"]()) && M["$<<"](Pe.$content()), M["$<<"]("</li>");
          }), M["$<<"]("</ul>"), M["$<<"]("</div>"), M.$join(he("LF"));
        }), Be(le, "$convert_verse", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U, me = U, ue = U, ye = U, Pe = U;
          return M = O(p.$id()) ? ' id="' + p.$id() + '"' : "", x = ["verseblock", p.$role()].$compact(), T = ' class="' + x.$join(" ") + '"', q = O(p["$title?"]()) ? `
<div class="title">` + p.$title() + "</div>" : "", K = O(p["$attr?"]("attribution")) ? p.$attr("attribution") : U, me = O(p["$attr?"]("citetitle")) ? p.$attr("citetitle") : U, O(K) || O(me) ? (ue = O(me) ? "<cite>" + me + "</cite>" : "", ye = O(K) ? "&#8212; " + K + (O(me) ? "<br" + E.void_element_slash + `>
` : "") : "", Pe = `
<div class="attribution">
` + ye + ue + `
</div>`) : Pe = "", "<div" + M + T + ">" + q + `
<pre class="content">` + p.$content() + "</pre>" + Pe + `
</div>`;
        }), Be(le, "$convert_video", function(p) {
          var E, M, x = this, T = U, q = U, K = U, me = U, ue = U, ye = U, Pe = U, Ve = U, et = U, at = U, rt = U, ft = U, _t = U, ht = U, pt = U, vt = U, Et = U, Pt = U, Nt = U, Yt = U, Ft = U, Dt = U, Lt = U, Bt = U, Xt = U, Jr = U, yr = U, qt = U, Mt = U, Ut = U, fr = U, It = U, sr = U, Ar = U, pr = U, cr = U, en = U;
          switch (T = x.xml_mode, q = O(p.$id()) ? ' id="' + p.$id() + '"' : "", K = ["videoblock"], O(p["$attr?"]("float")) && K["$<<"](p.$attr("float")), O(p["$attr?"]("align")) && K["$<<"]("text-" + p.$attr("align")), O(p.$role()) && K["$<<"](p.$role()), me = ' class="' + K.$join(" ") + '"', ue = O(p["$title?"]()) ? `
<div class="title">` + p.$title() + "</div>" : "", ye = O(p["$attr?"]("width")) ? ' width="' + p.$attr("width") + '"' : "", Pe = O(p["$attr?"]("height")) ? ' height="' + p.$attr("height") + '"' : "", p.$attr("poster")) {
            case "vimeo":
              return O((Ve = p.$document().$attr("asset-uri-scheme", "https"))["$empty?"]()) || (Ve = "" + Ve + ":"), et = O(p["$attr?"]("start")) ? "#at=" + p.$attr("start") : "", at = ["?"], M = p.$attr("target").$split("/", 2), E = tt(M), rt = E[0] == null ? U : E[0], ft = E[1] == null ? U : E[1], _t = O(ft = O(ht = ft) ? ht : p.$attr("hash")) ? "" + (O(ht = at.$pop()) ? ht : "&amp;") + "h=" + ft : "", pt = O(p["$option?"]("autoplay")) ? "" + (O(ht = at.$pop()) ? ht : "&amp;") + "autoplay=1" : "", vt = O(p["$option?"]("loop")) ? "" + (O(ht = at.$pop()) ? ht : "&amp;") + "loop=1" : "", Et = O(p["$option?"]("muted")) ? "" + (O(ht = at.$pop()) ? ht : "&amp;") + "muted=1" : "", "<div" + q + me + ">" + ue + `
<div class="content">
<iframe` + ye + Pe + ' src="' + Ve + "//player.vimeo.com/video/" + rt + _t + pt + vt + Et + et + '" frameborder="0"' + (O(p["$option?"]("nofullscreen")) ? "" : x.$append_boolean_attribute("allowfullscreen", T)) + `></iframe>
</div>
</div>`;
            case "youtube":
              return O((Ve = p.$document().$attr("asset-uri-scheme", "https"))["$empty?"]()) || (Ve = "" + Ve + ":"), Pt = O(p["$option?"]("related")) ? 1 : 0, Nt = O(p["$attr?"]("start")) ? "&amp;start=" + p.$attr("start") : "", Yt = O(p["$attr?"]("end")) ? "&amp;end=" + p.$attr("end") : "", pt = O(p["$option?"]("autoplay")) ? "&amp;autoplay=1" : "", vt = O(Ft = p["$option?"]("loop")) ? "&amp;loop=1" : "", Dt = O(p["$option?"]("muted")) ? "&amp;mute=1" : "", Lt = O(p["$option?"]("nocontrols")) ? "&amp;controls=0" : "", O(p["$option?"]("nofullscreen")) ? (Bt = "&amp;fs=0", Xt = "") : (Bt = "", Xt = x.$append_boolean_attribute("allowfullscreen", T)), Jr = O(p["$option?"]("modest")) ? "&amp;modestbranding=1" : "", yr = O(p["$attr?"]("theme")) ? "&amp;theme=" + p.$attr("theme") : "", qt = O(p["$attr?"]("lang")) ? "&amp;hl=" + p.$attr("lang") : "", M = p.$attr("target").$split("/", 2), E = tt(M), rt = E[0] == null ? U : E[0], Mt = E[1] == null ? U : E[1], O(Mt = O(ht = Mt) ? ht : p.$attr("list")) ? Ut = "&amp;list=" + Mt : (M = rt.$split(",", 2), E = tt(M), rt = E[0] == null ? U : E[0], fr = E[1] == null ? U : E[1], O(fr = O(ht = fr) ? ht : p.$attr("playlist")) ? Ut = "&amp;playlist=" + rt + "," + fr : Ut = O(Ft) ? "&amp;playlist=" + rt : ""), "<div" + q + me + ">" + ue + `
<div class="content">
<iframe` + ye + Pe + ' src="' + Ve + "//www.youtube.com/embed/" + rt + "?rel=" + Pt + Nt + Yt + pt + vt + Dt + Lt + Ut + Bt + Jr + yr + qt + '" frameborder="0"' + Xt + `></iframe>
</div>
</div>`;
            default:
              return It = O((sr = p.$attr("poster"))["$nil_or_empty?"]()) ? "" : ' poster="' + p.$media_uri(sr) + '"', Ar = O((sr = p.$attr("preload"))["$nil_or_empty?"]()) ? "" : ' preload="' + sr + '"', pr = p.$attr("start"), cr = p.$attr("end"), en = O(pr) || O(cr) ? "#t=" + (O(ht = pr) ? ht : "") + (O(cr) ? "," + cr : "") : "", "<div" + q + me + ">" + ue + `
<div class="content">
<video src="` + p.$media_uri(p.$attr("target")) + en + '"' + ye + Pe + It + (O(p["$option?"]("autoplay")) ? x.$append_boolean_attribute("autoplay", T) : "") + (O(p["$option?"]("muted")) ? x.$append_boolean_attribute("muted", T) : "") + (O(p["$option?"]("nocontrols")) ? "" : x.$append_boolean_attribute("controls", T)) + (O(p["$option?"]("loop")) ? x.$append_boolean_attribute("loop", T) : "") + Ar + `>
Your browser does not support the video tag.
</video>
</div>
</div>`;
          }
        }), Be(le, "$convert_inline_anchor", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U, me = U, ue = U, ye = U, Pe = U;
          switch (p.$type()) {
            case "xref":
              return O(M = p.$attributes()["$[]"]("path")) ? (x = E.$append_link_constraint_attrs(p, O(p.$role()) ? [' class="' + p.$role() + '"'] : []).$join(), T = O(q = p.$text()) ? q : M) : (x = O(p.$role()) ? ' class="' + p.$role() + '"' : "", O(T = p.$text()) || (k(he("AbstractNode"), K = O(q = (E.refs = O(me = E.refs) ? me : p.$document().$catalog()["$[]"]("refs"))["$[]"](ue = p.$attributes()["$[]"]("refid"))) ? q : O(ue["$nil_or_empty?"]()) ? ye = E.$get_root_document(p) : U) ? O(E.resolving_xref = O(q = E.resolving_xref) ? q : Pe = !0) && O(Pe) ? (O(T = K.$xreftext(p.$attr("xrefstyle", U, !0))) ? O(T["$include?"]("<a")) && (T = T.$gsub(he("DropAnchorRx"), "")) : T = O(ye) ? "[^top]" : "[" + ue + "]", E.resolving_xref = U) : T = O(ye) ? "[^top]" : "[" + ue + "]" : T = "[" + ue + "]")), '<a href="' + p.$target() + '"' + x + ">" + T + "</a>";
            case "ref":
              return '<a id="' + p.$id() + '"></a>';
            case "link":
              return x = O(p.$id()) ? [' id="' + p.$id() + '"'] : [], O(p.$role()) && x["$<<"](' class="' + p.$role() + '"'), O(p["$attr?"]("title")) && x["$<<"](' title="' + p.$attr("title") + '"'), '<a href="' + p.$target() + '"' + E.$append_link_constraint_attrs(p, x).$join() + ">" + p.$text() + "</a>";
            case "bibref":
              return '<a id="' + p.$id() + '"></a>[' + (O(q = p.$reftext()) ? q : p.$id()) + "]";
            default:
              return E.$logger().$warn("unknown anchor type: " + p.$type().$inspect()), U;
          }
        }), Be(le, "$convert_inline_break", function(p) {
          var E = this;
          return "" + p.$text() + "<br" + E.void_element_slash + ">";
        }), Be(le, "$convert_inline_button", function(p) {
          return '<b class="button">' + p.$text() + "</b>";
        }), Be(le, "$convert_inline_callout", function(p) {
          var E = this, M = U, x = U;
          return O(p.$document()["$attr?"]("icons", "font")) ? '<i class="conum" data-value="' + p.$text() + '"></i><b>(' + p.$text() + ")</b>" : O(p.$document()["$attr?"]("icons")) ? (M = p.$icon_uri("callouts/" + p.$text()), '<img src="' + M + '" alt="' + p.$text() + '"' + E.void_element_slash + ">") : k(ze("Array"), x = p.$attributes()["$[]"]("guard")) ? '&lt;!--<b class="conum">(' + p.$text() + ")</b>--&gt;" : "" + x + '<b class="conum">(' + p.$text() + ")</b>";
        }), Be(le, "$convert_inline_footnote", function(p) {
          var E = U, M = U;
          return O(E = p.$attr("index")) ? Z(p.$type(), "xref") ? '<sup class="footnoteref">[<a class="footnote" href="#_footnotedef_' + E + '" title="View footnote.">' + E + "</a>]</sup>" : (M = O(p.$id()) ? ' id="_footnote_' + p.$id() + '"' : "", '<sup class="footnote"' + M + '>[<a id="_footnoteref_' + E + '" class="footnote" href="#_footnotedef_' + E + '" title="View footnote.">' + E + "</a>]</sup>") : Z(p.$type(), "xref") ? '<sup class="footnoteref red" title="Unresolved footnote reference.">[' + p.$text() + "]</sup>" : U;
        }), Be(le, "$convert_inline_image", function(p) {
          var E = this, M = U, x = U, T = U, q = U, K = U, me = U, ue = U, ye = U, Pe = U, Ve = U;
          return M = p.$target(), Z(x = O(T = p.$type()) ? T : "image", "icon") ? Z(q = p.$document().$attr("icons"), "font") ? (K = "fa fa-" + M, O(p["$attr?"]("size")) && (K = "" + K + " fa-" + p.$attr("size")), O(p["$attr?"]("flip")) ? K = "" + K + " fa-flip-" + p.$attr("flip") : O(p["$attr?"]("rotate")) && (K = "" + K + " fa-rotate-" + p.$attr("rotate")), me = O(p["$attr?"]("title")) ? ' title="' + p.$attr("title") + '"' : "", ue = '<i class="' + K + '"' + me + "></i>") : O(q) ? (me = O(p["$attr?"]("width")) ? ' width="' + p.$attr("width") + '"' : "", O(p["$attr?"]("height")) && (me = "" + me + ' height="' + p.$attr("height") + '"'), O(p["$attr?"]("title")) && (me = "" + me + ' title="' + p.$attr("title") + '"'), ue = '<img src="' + p.$icon_uri(M) + '" alt="' + E.$encode_attribute_value(p.$alt()) + '"' + me + E.void_element_slash + ">") : ue = "[" + p.$alt() + "&#93;" : (me = O(p["$attr?"]("width")) ? ' width="' + p.$attr("width") + '"' : "", O(p["$attr?"]("height")) && (me = "" + me + ' height="' + p.$attr("height") + '"'), O(p["$attr?"]("title")) && (me = "" + me + ' title="' + p.$attr("title") + '"'), (O(p["$attr?"]("format", "svg")) || O(M["$include?"](".svg"))) && O(Ge(p.$document().$safe(), ze(he("SafeMode"), "SECURE"))) ? O(p["$option?"]("inline")) ? ue = O(T = E.$read_svg_contents(p, M)) ? T : '<span class="alt">' + p.$alt() + "</span>" : O(p["$option?"]("interactive")) ? (ye = O(p["$attr?"]("fallback")) ? '<img src="' + p.$image_uri(p.$attr("fallback")) + '" alt="' + E.$encode_attribute_value(p.$alt()) + '"' + me + E.void_element_slash + ">" : '<span class="alt">' + p.$alt() + "</span>", ue = '<object type="image/svg+xml" data="' + p.$image_uri(M) + '"' + me + ">" + ye + "</object>") : ue = '<img src="' + p.$image_uri(M) + '" alt="' + E.$encode_attribute_value(p.$alt()) + '"' + me + E.void_element_slash + ">" : ue = '<img src="' + p.$image_uri(M) + '" alt="' + E.$encode_attribute_value(p.$alt()) + '"' + me + E.void_element_slash + ">"), O(p["$attr?"]("link")) && (ue = '<a class="image" href="' + p.$attr("link") + '"' + E.$append_link_constraint_attrs(p).$join() + ">" + ue + "</a>"), Pe = x, O(Ve = p.$role()) ? Pe = O(p["$attr?"]("float")) ? "" + Pe + " " + p.$attr("float") + " " + Ve : "" + Pe + " " + Ve : O(p["$attr?"]("float")) && (Pe = "" + Pe + " " + p.$attr("float")), '<span class="' + Pe + '">' + ue + "</span>";
        }), Be(le, "$convert_inline_indexterm", function(p) {
          return Z(p.$type(), "visible") ? p.$text() : "";
        }), Be(le, "$convert_inline_kbd", function(p) {
          var E = U;
          return Z((E = p.$attr("keys")).$size(), 1) ? "<kbd>" + E["$[]"](0) + "</kbd>" : '<span class="keyseq"><kbd>' + E.$join("</kbd>+<kbd>") + "</kbd></span>";
        }), Be(le, "$convert_inline_menu", function(p) {
          var E = U, M = U, x = U, T = U, q = U;
          return E = O(p.$document()["$attr?"]("icons", "font")) ? '&#160;<i class="fa fa-angle-right caret"></i> ' : '&#160;<b class="caret">&#8250;</b> ', M = "</b>" + E + '<b class="submenu">', x = p.$attr("menu"), O((T = p.$attr("submenus"))["$empty?"]()) ? O(q = p.$attr("menuitem")) ? '<span class="menuseq"><b class="menu">' + x + "</b>" + E + '<b class="menuitem">' + q + "</b></span>" : '<b class="menuref">' + x + "</b>" : '<span class="menuseq"><b class="menu">' + x + "</b>" + E + '<b class="submenu">' + T.$join(M) + "</b>" + E + '<b class="menuitem">' + p.$attr("menuitem") + "</b></span>";
        }), Be(le, "$convert_inline_quoted", function(p) {
          var E, M, x = U, T = U, q = U, K = U;
          return M = he("QUOTE_TAGS")["$[]"](p.$type()), E = tt(M), x = E[0] == null ? U : E[0], T = E[1] == null ? U : E[1], q = E[2] == null ? U : E[2], O(p.$id()) ? (K = O(p.$role()) ? ' class="' + p.$role() + '"' : "", O(q) ? "" + x.$chop() + ' id="' + p.$id() + '"' + K + ">" + p.$text() + T : '<span id="' + p.$id() + '"' + K + ">" + x + p.$text() + T + "</span>") : O(p.$role()) ? O(q) ? "" + x.$chop() + ' class="' + p.$role() + '">' + p.$text() + T : '<span class="' + p.$role() + '">' + x + p.$text() + T + "</span>" : "" + x + p.$text() + T;
        }), Be(le, "$read_svg_contents", function(p, E) {
          var M = U, x = U, T = U, q = U;
          if (O(M = p.$read_contents(E, $e(["start", "normalize", "label", "warn_if_empty"], { start: p.$document().$attr("imagesdir"), normalize: !0, label: "SVG", warn_if_empty: !0 })))) {
            if (O(M["$empty?"]()))
              return U;
            O(M["$start_with?"]("<svg")) || (M = M.$sub(he("SvgPreambleRx"), "")), x = T = q = U, Ke(["width", "height"], "each", [], function(me) {
              var ue = U, ye = U;
              if (me == null && (me = U), !O(p["$attr?"](me)))
                return U;
              if (!O(T)) {
                if (Z(q = O(ue = q) ? ue : O(ye = M.$match(he("SvgStartTagRx"))) ? ye : "no_match", "no_match"))
                  return U;
                T = (x = q["$[]"](0)).$gsub(he("DimensionAttributeRx"), "");
              }
              return T = "" + T.$chop() + " " + me + '="' + p.$attr(me) + '">';
            }), O(T) && (M = "" + T + M["$[]"](u.Range.$new(x.$length(), -1, !1)));
          }
          return M;
        }), le.$private(), Be(le, "$append_boolean_attribute", function(p, E) {
          return O(E) ? " " + p + '="' + p + '"' : " " + p;
        }), Be(le, "$append_link_constraint_attrs", function(p, E) {
          var M = U, x = U;
          return E == null && (E = []), O(p["$option?"]("nofollow")) && (M = "nofollow"), O(x = p.$attributes()["$[]"]("window")) ? (E["$<<"](' target="' + x + '"'), (Z(x, "_blank") || O(p["$option?"]("noopener"))) && E["$<<"](O(M) ? ' rel="' + M + ' noopener"' : ' rel="noopener"')) : O(M) && E["$<<"](' rel="' + M + '"'), E;
        }, -2), Be(le, "$encode_attribute_value", function(p) {
          return O(p["$include?"]('"')) ? p.$gsub('"', "&quot;") : p;
        }), Be(le, "$generate_manname_section", function(p) {
          var E = U, M = U, x = U, T = U, q = U;
          return E = p.$attr("manname-title", "Name"), O(x = p.$sections()["$[]"](0)) && Z(M = x.$title(), M.$upcase()) && (E = E.$upcase()), T = O(q = p.$attr("manname-id")) ? ' id="' + q + '"' : "", "<h2" + T + ">" + E + `</h2>
<div class="sectionbody">
<p>` + p.$attr("mannames").$join(", ") + " - " + p.$attr("manpurpose") + `</p>
</div>`;
        }), Be(le, "$get_root_document", function(p) {
          for (; O((p = p.$document())["$nested?"]()); )
            p = p.$parent_document();
          return p;
        }), Be(le, "$method_missing", function v(p, E) {
          var M, x, T = v.$$p || U, q = this, K = U;
          return v.$$p = null, M = Ze(arguments, 1), x = M, De((K = p.$to_s())["$start_with?"]("convert_")) && O(q["$handles?"](K)) ? Ke(q, "send", ["convert_" + K].concat(nt(x))) : V(q, ke(q, "method_missing", v, !1, !0), "method_missing", [p].concat(nt(x)), T);
        }, -2), Be(le, "$respond_to_missing?", function(p, E) {
          var M = this, x = U, T = U;
          return Ze(arguments, 1), O(x = (T = p.$to_s())["$start_with?"]("convert_")["$!"]()) ? M["$handles?"](T) : x;
        }, -2);
      }(Ee("Converter"), ze(Ee("Converter"), "Base"), de);
    }(ee[0], ee);
  }, Opal.modules["asciidoctor/extensions"] = function(u) {
    var se = u.module, re = u.klass, W = u.truthy, $e = u.hash2, S = u.def, Z = u.send, Be = u.alias, V = u.slice, ke = u.rb_plus, O = u.eqeq, Ke = u.rb_gt, xe = u.not, He = u.eqeqeq, De = u.to_a, Fe = u.to_ary, ot = u.const_set, Ge = u.return_val, tt = u.send2, Ye = u.find_super, We = u.NilClass, st = u.class_variable_set, L = u.class_variable_get, je = u.regexp, k = u.Class, Ze = u.return_ivar, nt = u.rb_lt, ee = u.rb_minus, U = u.hash, ze = [], Se = u.nil, Ie = u.$$$;
    return u.add_stubs("[]=,config,const_defined?,singleton_class?,include,const_get,extend,enable_dsl,attr_reader,merge,class,update,raise,document,==,doctype,[],+,level,delete,>,casecmp,new,title=,sectname=,special=,fetch,numbered=,attr?,!,key?,special,numbered,id=,generate_id,title,update_attributes,tr,basename,create_block,assign_caption,===,parse_blocks,empty?,include?,sub_attributes,parse,each,define_method,unshift,shift,send,size,receiver,binding,define_singleton_method,instance_exec,to_proc,call,option,content_model,flatten,positional_attributes,default_attributes,respond_to?,to_s,partition,to_i,<<,compact,inspect,resolve_attributes,attr_accessor,to_set,contexts,match?,resolve_regexp,format,method,register,reset,values,groups,arity,activate,add_document_processor,tree_processor,tree_processors?,tree_processors,any?,select,add_syntax_processor,to_sym,instance_variable_get,kind,private,join,map,split,capitalize,instance_variable_set,resolve_args,singleton_class,process_block_given?,source_location,freeze,resolve_class,<,update_config,as_symbol,name,name=,pop,-,-@,next_auto_id,generate_name,each_with_object"), function(Ae, de) {
      var Ee = se(Ae, "Asciidoctor"), te = [Ee].concat(de);
      return function(G, B) {
        var le = se(G, "Extensions"), oe = [le].concat(B), he = u.$r(oe);
        return function(j, v, p) {
          var E = re(j, v, "Processor"), M = [E].concat(p), x = u.$r(M), T = E.$$prototype;
          return T.config = Se, function(q, K) {
            return S(q, "$config", function() {
              var ue = this, ye = Se;
              return ue.config == null && (ue.config = Se), ue.config = W(ye = ue.config) ? ye : $e([], {});
            }), S(q, "$option", function(ue, ye) {
              var Pe, Ve = this;
              return Pe = [ue, ye], Z(Ve.$config(), "[]=", Pe), Pe[Pe.length - 1];
            }), S(q, "$enable_dsl", function() {
              var ue = this;
              return W(ue["$const_defined?"]("DSL")) ? W(ue["$singleton_class?"]()) ? ue.$include(ue.$const_get("DSL")) : ue.$extend(ue.$const_get("DSL")) : Se;
            }), Be(q, "use_dsl", "enable_dsl");
          }(u.get_singleton_class(E)), E.$attr_reader("config"), S(E, "$initialize", function(K) {
            var me = this;
            return K == null && (K = $e([], {})), me.config = me.$class().$config().$merge(K);
          }, -1), S(E, "$update_config", function(K) {
            var me = this;
            return me.config.$update(K);
          }), S(E, "$process", function(K) {
            var me = this;
            return V(arguments), me.$raise(Ie("NotImplementedError"), "" + x("Processor") + " subclass " + me.$class() + " must implement the #process method");
          }, -1), S(E, "$create_section", function(K, me, ue, ye) {
            var Pe, Ve, et = Se, at = Se, rt = Se, ft = Se, _t = Se, ht = Se, pt = Se, vt = Se, Et = Se, Pt = Se;
            return ye == null && (ye = $e([], {})), et = K.$document(), at = (rt = et.$doctype())["$=="]("book"), ft = W(_t = ye["$[]"]("level")) ? _t : ke(K.$level(), 1), W(ht = ue.$delete("style")) ? W(at) && O(ht, "abstract") ? (Pe = ["chapter", 1], pt = Pe[0], ft = Pe[1]) : (Pe = [ht, !0], pt = Pe[0], vt = Pe[1], O(ft, 0) && (ft = 1)) : W(at) ? pt = O(ft, 0) ? "part" : W(Ke(ft, 1)) ? "section" : "chapter" : O(rt, "manpage") && O(me.$casecmp("synopsis"), 0) ? (Pe = ["synopsis", !0], pt = Pe[0], vt = Pe[1]) : pt = "section", Et = x("Section").$new(K, ft), Pe = [me, pt], Ve = [Pe[0]], Z(Et, "title=", Ve), Ve[Ve.length - 1], Ve = [Pe[1]], Z(Et, "sectname=", Ve), Ve[Ve.length - 1], W(vt) ? (Et["$special="](!0), W(ye.$fetch("numbered", ht["$=="]("appendix"))) ? Et["$numbered="](!0) : xe(ye["$key?"]("numbered")) && W(et["$attr?"]("sectnums", "all")) && Et["$numbered="](W(at) && O(ft, 1) ? "chapter" : !0)) : W(Ke(ft, 0)) ? W(ye.$fetch("numbered", et["$attr?"]("sectnums"))) && Et["$numbered="](W(Et.$special()) ? W(_t = K.$numbered()) || _t : !0) : W(ye.$fetch("numbered", W(_t = at) ? et["$attr?"]("partnums") : _t)) && Et["$numbered="](!0), O(Pt = ue["$[]"]("id"), !1) ? ue.$delete("id") : Et["$id="]((Pe = ["id", W(_t = Pt) ? _t : W(et["$attr?"]("sectids")) ? x("Section").$generate_id(Et.$title(), et) : Se], Z(ue, "[]=", Pe), Pe[Pe.length - 1])), Et.$update_attributes(ue), Et;
          }, -4), S(E, "$create_block", function(K, me, ue, ye, Pe) {
            return Pe == null && (Pe = $e([], {})), x("Block").$new(K, me, $e(["source", "attributes"], { source: ue, attributes: ye }).$merge(Pe));
          }, -5), S(E, "$create_list", function(K, me, ue) {
            var ye = Se;
            return ue == null && (ue = Se), ye = x("List").$new(K, me), W(ue) && ye.$update_attributes(ue), ye;
          }, -3), S(E, "$create_list_item", function(K, me) {
            return me == null && (me = Se), x("ListItem").$new(K, me);
          }, -2), S(E, "$create_image_block", function(K, me, ue) {
            var ye, Pe = this, Ve = Se, et = Se, at = Se;
            return ue == null && (ue = $e([], {})), W(Ve = me["$[]"]("target")) || Pe.$raise(Ie("ArgumentError"), "Unable to create an image block, target attribute is required"), W(me["$[]"]("alt")) || me["$[]="]("alt", (ye = ["default-alt", x("Helpers").$basename(Ve, !0).$tr("_-", " ")], Z(me, "[]=", ye), ye[ye.length - 1])), et = W(me["$key?"]("title")) ? me.$delete("title") : Se, at = Pe.$create_block(K, "image", Se, me, ue), W(et) && (at["$title="](et), at.$assign_caption(me.$delete("caption"), "figure")), at;
          }, -3), S(E, "$create_inline", function(K, me, ue, ye) {
            return ye == null && (ye = $e([], {})), x("Inline").$new(K, me, ue, O(me, "quoted") ? $e(["type"], { type: "unquoted" }).$merge(ye) : ye);
          }, -4), S(E, "$parse_content", function(K, me, ue) {
            var ye = Se;
            return ue == null && (ue = Se), ye = He(x("Reader"), me) ? me : x("Reader").$new(me), x("Parser").$parse_blocks(ye, K, ue), K;
          }, -3), S(E, "$parse_attributes", function(K, me, ue) {
            var ye = Se;
            return ue == null && (ue = $e([], {})), W(W(me) ? me["$empty?"]() : !0) ? $e([], {}) : (W(ue["$[]"]("sub_attributes")) && W(me["$include?"](x("ATTR_REF_HEAD"))) && (me = K.$sub_attributes(me)), x("AttributeList").$new(me).$parse(W(ye = ue["$[]"]("positional_attributes")) ? ye : []));
          }, -3), Z([["create_paragraph", "create_block", "paragraph"], ["create_open_block", "create_block", "open"], ["create_example_block", "create_block", "example"], ["create_pass_block", "create_block", "pass"], ["create_listing_block", "create_block", "listing"], ["create_literal_block", "create_block", "literal"], ["create_anchor", "create_inline", "anchor"], ["create_inline_pass", "create_inline", "quoted"]], "each", [], function q(K, me, ue) {
            var ye = q.$$s == null ? this : q.$$s;
            return K == null && (K = Se), me == null && (me = Se), ue == null && (ue = Se), Z(ye, "define_method", [K], function Pe(Ve) {
              var et, at, rt = Pe.$$s == null ? this : Pe.$$s;
              return et = V(arguments), at = et, at.$unshift(at.$shift(), ue), Z(rt, "send", [me].concat(De(at)));
            }, { $$arity: -1, $$s: ye });
          }, { $$s: E });
        }(oe[0], null, oe), function(j) {
          var v = se(j, "ProcessorDsl");
          return S(v, "$option", function(E, M) {
            var x, T = this;
            return x = [E, M], Z(T.$config(), "[]=", x), x[x.length - 1];
          }), S(v, "$process", function p(E) {
            var M = p.$$p || Se, x, T, q, K = this, me = Se;
            return K.process_block == null && (K.process_block = Se), p.$$p = null, x = V(arguments), T = x, M !== Se ? (W(T["$empty?"]()) || K.$raise(Ie("ArgumentError"), "wrong number of arguments (given " + T.$size() + ", expected 0)"), W(M.$binding()) && O(K, M.$binding().$receiver()) || (me = K, Z(M, "define_singleton_method", ["call"], function(ye) {
              var Pe, Ve;
              return Pe = V(arguments), Ve = Pe, Z(me, "instance_exec", De(Ve), M.$to_proc());
            }, -1)), K.process_block = M) : W((q = K.process_block, q != null && q !== Se ? "instance-variable" : Se)) ? Z(K.process_block, "call", De(T)) : K.$raise(Ie("NotImplementedError"), "" + K.$class() + " #process method called before being registered");
          }, -1), S(v, "$process_block_given?", function() {
            var E, M = this;
            return E = M.process_block, E != null && E !== Se ? "instance-variable" : Se;
          });
        }(oe[0]), function(j, v) {
          var p = se(j, "DocumentProcessorDsl"), E = [p].concat(v), M = u.$r(E);
          return p.$include(M("ProcessorDsl")), S(p, "$prefer", function() {
            var T = this;
            return T.$option("position", ">>");
          });
        }(oe[0], oe), function(j, v) {
          var p = se(j, "SyntaxProcessorDsl"), E = [p].concat(v), M = u.$r(E);
          return p.$include(M("ProcessorDsl")), S(p, "$named", function(T) {
            var q = this;
            return He(M("Processor"), q) ? q.name = T : q.$option("name", T);
          }), S(p, "$content_model", function(T) {
            var q = this;
            return q.$option("content_model", T);
          }), Be(p, "parse_content_as", "content_model"), S(p, "$positional_attributes", function(T) {
            var q, K, me = this;
            return q = V(arguments), K = q, me.$option("positional_attrs", K.$flatten());
          }, -1), Be(p, "name_positional_attributes", "positional_attributes"), Be(p, "positional_attrs", "positional_attributes"), S(p, "$default_attributes", function(T) {
            var q = this;
            return q.$option("default_attrs", T);
          }), Be(p, "default_attrs", "default_attributes"), S(p, "$resolve_attributes", function(T) {
            var q, K, me, ue = this, ye = Se, Pe = Se, Ve = Se;
            return q = V(arguments), K = q, W(Ke(K.$size(), 1)) || W((K = K.$fetch(0, !0))["$respond_to?"]("to_sym")) && (K = [K]), He(!0, ye = K) ? (ue.$option("positional_attrs", []), ue.$option("default_attrs", $e([], {}))) : He(Ie("Array"), ye) ? (me = [[], $e([], {})], Pe = me[0], Ve = me[1], Z(K, "each", [], function(at) {
              var rt, ft, _t = Se, ht = Se, pt = Se;
              return at == null && (at = Se), W((at = at.$to_s())["$include?"]("=")) ? (ft = at.$partition("="), rt = Fe(ft), _t = rt[0] == null ? Se : rt[0], rt[1] == null || rt[1], ht = rt[2] == null ? Se : rt[2], W(_t["$include?"](":")) && (ft = _t.$partition(":"), rt = Fe(ft), pt = rt[0] == null ? Se : rt[0], rt[1] == null || rt[1], _t = rt[2] == null ? Se : rt[2], pt = O(pt, "@") ? Pe.$size() : pt.$to_i(), Pe["$[]="](pt, _t)), rt = [_t, ht], Z(Ve, "[]=", rt), rt[rt.length - 1]) : W(at["$include?"](":")) ? (ft = at.$partition(":"), rt = Fe(ft), pt = rt[0] == null ? Se : rt[0], rt[1] == null || rt[1], _t = rt[2] == null ? Se : rt[2], pt = O(pt, "@") ? Pe.$size() : pt.$to_i(), rt = [pt, _t], Z(Pe, "[]=", rt), rt[rt.length - 1]) : Pe["$<<"](at);
            }), ue.$option("positional_attrs", Pe.$compact()), ue.$option("default_attrs", Ve)) : He(Ie("Hash"), ye) ? (me = [[], $e([], {})], Pe = me[0], Ve = me[1], Z(K, "each", [], function(at, rt) {
              var ft, _t, ht = Se, pt = Se;
              return at == null && (at = Se), rt == null && (rt = Se), W((ht = at.$to_s())["$include?"](":")) && (_t = ht.$partition(":"), ft = Fe(_t), pt = ft[0] == null ? Se : ft[0], ft[1] == null || ft[1], ht = ft[2] == null ? Se : ft[2], pt = O(pt, "@") ? Pe.$size() : pt.$to_i(), Pe["$[]="](pt, ht)), W(rt) ? (ft = [ht, rt], Z(Ve, "[]=", ft), ft[ft.length - 1]) : Se;
            }), ue.$option("positional_attrs", Pe.$compact()), ue.$option("default_attrs", Ve)) : ue.$raise(Ie("ArgumentError"), "unsupported attributes specification for macro: " + K.$inspect());
          }, -1), Be(p, "resolves_attributes", "resolve_attributes");
        }(oe[0], oe), function(j, v, p) {
          var E = re(j, v, "Preprocessor"), M = [E].concat(p), x = u.$r(M);
          return S(E, "$process", function(q, K) {
            var me = this;
            return me.$raise(Ie("NotImplementedError"), "" + x("Preprocessor") + " subclass " + me.$class() + " must implement the #process method");
          });
        }(oe[0], he("Processor"), oe), ot(he("Preprocessor"), "DSL", he("DocumentProcessorDsl")), function(j, v, p) {
          var E = re(j, v, "TreeProcessor"), M = [E].concat(p), x = u.$r(M);
          return S(E, "$process", function(q) {
            var K = this;
            return K.$raise(Ie("NotImplementedError"), "" + x("TreeProcessor") + " subclass " + K.$class() + " must implement the #process method");
          });
        }(oe[0], he("Processor"), oe), ot(he("TreeProcessor"), "DSL", he("DocumentProcessorDsl")), ot(oe[0], "Treeprocessor", he("TreeProcessor")), function(j, v, p) {
          var E = re(j, v, "Postprocessor"), M = [E].concat(p), x = u.$r(M);
          return S(E, "$process", function(q, K) {
            var me = this;
            return me.$raise(Ie("NotImplementedError"), "" + x("Postprocessor") + " subclass " + me.$class() + " must implement the #process method");
          });
        }(oe[0], he("Processor"), oe), ot(he("Postprocessor"), "DSL", he("DocumentProcessorDsl")), function(j, v, p) {
          var E = re(j, v, "IncludeProcessor"), M = [E].concat(p), x = u.$r(M);
          return S(E, "$process", function(q, K, me, ue) {
            var ye = this;
            return ye.$raise(Ie("NotImplementedError"), "" + x("IncludeProcessor") + " subclass " + ye.$class() + " must implement the #process method");
          }), S(E, "$handles?", Ge(!0));
        }(oe[0], he("Processor"), oe), function(j, v) {
          var p = se(j, "IncludeProcessorDsl"), E = [p].concat(v), M = u.$r(E);
          return p.$include(M("DocumentProcessorDsl")), S(p, "$handles?", function x(T) {
            var q = x.$$p || Se, K, me, ue, ye = this;
            return ye.handles_block == null && (ye.handles_block = Se), x.$$p = null, K = V(arguments), me = K, q !== Se ? (W(me["$empty?"]()) || ye.$raise(Ie("ArgumentError"), "wrong number of arguments (given " + me.$size() + ", expected 0)"), ye.handles_block = q) : W((ue = ye.handles_block, ue != null && ue !== Se ? "instance-variable" : Se)) ? ye.handles_block.$call(me["$[]"](0)) : !0;
          }, -1);
        }(oe[0], oe), ot(he("IncludeProcessor"), "DSL", he("IncludeProcessorDsl")), function(j, v, p) {
          var E = re(j, v, "DocinfoProcessor"), M = [E].concat(p), x = u.$r(M), T = E.$$prototype;
          return T.config = Se, S(E, "$initialize", function q(K) {
            var me;
            q.$$p;
            var ue = this, ye = Se;
            return q.$$p = null, K == null && (K = $e([], {})), tt(ue, Ye(ue, "initialize", q, !1, !0), "initialize", [K], null), W(ye = ue.config["$[]"]("location")) ? ye : (me = ["location", "head"], Z(ue.config, "[]=", me), me[me.length - 1]);
          }, -1), S(E, "$process", function(K) {
            var me = this;
            return me.$raise(Ie("NotImplementedError"), "" + x("DocinfoProcessor") + " subclass " + me.$class() + " must implement the #process method");
          });
        }(oe[0], he("Processor"), oe), function(j, v) {
          var p = se(j, "DocinfoProcessorDsl"), E = [p].concat(v), M = u.$r(E);
          return p.$include(M("DocumentProcessorDsl")), S(p, "$at_location", function(T) {
            var q = this;
            return q.$option("location", T);
          });
        }(oe[0], oe), ot(he("DocinfoProcessor"), "DSL", he("DocinfoProcessorDsl")), function(j, v, p) {
          var E = re(j, v, "BlockProcessor"), M = [E].concat(p), x = u.$r(M), T = E.$$prototype;
          return T.config = Se, E.$attr_accessor("name"), S(E, "$initialize", function q(K, me) {
            var ue;
            q.$$p;
            var ye = this, Pe = Se;
            return q.$$p = null, K == null && (K = Se), me == null && (me = $e([], {})), tt(ye, Ye(ye, "initialize", q, !1, !0), "initialize", [me], null), ye.name = W(Pe = K) ? Pe : ye.config["$[]"]("name"), He(We, Pe = ye.config["$[]"]("contexts")) ? W(ye.config["$[]"]("contexts")) || ye.config["$[]="]("contexts", ["open", "paragraph"].$to_set()) : He(Ie("Symbol"), Pe) ? ye.config["$[]="]("contexts", [ye.config["$[]"]("contexts")].$to_set()) : ye.config["$[]="]("contexts", ye.config["$[]"]("contexts").$to_set()), W(Pe = ye.config["$[]"]("content_model")) ? Pe : (ue = ["content_model", "compound"], Z(ye.config, "[]=", ue), ue[ue.length - 1]);
          }, -1), S(E, "$process", function(K, me, ue) {
            var ye = this;
            return ye.$raise(Ie("NotImplementedError"), "" + x("BlockProcessor") + " subclass " + ye.$class() + " must implement the #process method");
          });
        }(oe[0], he("Processor"), oe), function(j, v) {
          var p = se(j, "BlockProcessorDsl"), E = [p].concat(v), M = u.$r(E);
          return p.$include(M("SyntaxProcessorDsl")), S(p, "$contexts", function(T) {
            var q, K, me = this;
            return q = V(arguments), K = q, me.$option("contexts", K.$flatten().$to_set());
          }, -1), Be(p, "on_contexts", "contexts"), Be(p, "on_context", "contexts"), Be(p, "bind_to", "contexts");
        }(oe[0], oe), ot(he("BlockProcessor"), "DSL", he("BlockProcessorDsl")), function(j, v, p) {
          var E = re(j, v, "MacroProcessor"), M = [E].concat(p), x = u.$r(M), T = E.$$prototype;
          return T.config = Se, E.$attr_accessor("name"), S(E, "$initialize", function q(K, me) {
            var ue;
            q.$$p;
            var ye = this, Pe = Se;
            return q.$$p = null, K == null && (K = Se), me == null && (me = $e([], {})), tt(ye, Ye(ye, "initialize", q, !1, !0), "initialize", [me], null), ye.name = W(Pe = K) ? Pe : ye.config["$[]"]("name"), W(Pe = ye.config["$[]"]("content_model")) ? Pe : (ue = ["content_model", "attributes"], Z(ye.config, "[]=", ue), ue[ue.length - 1]);
          }, -1), S(E, "$process", function(K, me, ue) {
            var ye = this;
            return ye.$raise(Ie("NotImplementedError"), "" + x("MacroProcessor") + " subclass " + ye.$class() + " must implement the #process method");
          });
        }(oe[0], he("Processor"), oe), function(j, v) {
          var p = se(j, "MacroProcessorDsl"), E = [p].concat(v), M = u.$r(E);
          return p.$include(M("SyntaxProcessorDsl")), S(p, "$resolve_attributes", function x(T) {
            var q, K, me = x.$$p || Se, ue = this;
            return x.$$p = null, q = V(arguments), K = q, O(K.$size(), 1) && xe(K["$[]"](0)) ? ue.$option("content_model", "text") : (tt(ue, Ye(ue, "resolve_attributes", x, !1, !0), "resolve_attributes", De(K), me), ue.$option("content_model", "attributes"));
          }, -1), Be(p, "resolves_attributes", "resolve_attributes");
        }(oe[0], oe), function(j, v, p) {
          var E = re(j, v, "BlockMacroProcessor"), M = [E].concat(p), x = u.$r(M), T = E.$$prototype;
          return T.name = Se, S(E, "$name", function() {
            var K = this;
            return W(x("MacroNameRx")["$match?"](K.name.$to_s())) || K.$raise(Ie("ArgumentError"), "invalid name for block macro: " + K.name), K.name;
          });
        }(oe[0], he("MacroProcessor"), oe), ot(he("BlockMacroProcessor"), "DSL", he("MacroProcessorDsl")), function(j, v, p) {
          var E = re(j, v, "InlineMacroProcessor"), M = [E].concat(p), x = u.$r(M), T = E.$$prototype;
          return T.config = T.name = Se, st(M[0], "@@rx_cache", $e([], {})), S(E, "$regexp", function() {
            var K, me = this, ue = Se;
            return W(ue = me.config["$[]"]("regexp")) ? ue : (K = ["regexp", me.$resolve_regexp(me.name.$to_s(), me.config["$[]"]("format"))], Z(me.config, "[]=", K), K[K.length - 1]);
          }), S(E, "$resolve_regexp", function(K, me) {
            var ue, ye = this, Pe = Se;
            return W(x("MacroNameRx")["$match?"](K)) || ye.$raise(Ie("ArgumentError"), "invalid name for inline macro: " + K), W(Pe = L(M[0], "@@rx_cache", !1)["$[]"]([K, me])) ? Pe : (ue = [[K, me], je(["\\\\?", K, ":", O(me, "short") ? "(){0}" : "(\\S+?)", "\\[(|", x("CC_ANY"), "*?[^\\\\])\\]"])], Z(L(M[0], "@@rx_cache", !1), "[]=", ue), ue[ue.length - 1]);
          });
        }(oe[0], he("MacroProcessor"), oe), function(j, v) {
          var p = se(j, "InlineMacroProcessorDsl"), E = [p].concat(v), M = u.$r(E);
          return p.$include(M("MacroProcessorDsl")), S(p, "$format", function(T) {
            var q = this;
            return q.$option("format", T);
          }), Be(p, "match_format", "format"), Be(p, "using_format", "format"), S(p, "$match", function(T) {
            var q = this;
            return q.$option("regexp", T);
          });
        }(oe[0], oe), ot(he("InlineMacroProcessor"), "DSL", he("InlineMacroProcessorDsl")), function(j, v) {
          var p = re(j, v, "Extension");
          return p.$attr_reader("kind"), p.$attr_reader("config"), p.$attr_reader("instance"), S(p, "$initialize", function(M, x, T) {
            var q = this;
            return q.kind = M, q.instance = x, q.config = T;
          });
        }(oe[0], null), function(j, v) {
          var p = re(j, v, "ProcessorExtension");
          return p.$attr_reader("process_method"), S(p, "$initialize", function E(M, x, T) {
            E.$$p;
            var q = this, K = Se;
            return E.$$p = null, T == null && (T = Se), tt(q, Ye(q, "initialize", E, !1, !0), "initialize", [M, x, x.$config()], null), q.process_method = W(K = T) ? K : x.$method("process");
          }, -3);
        }(oe[0], he("Extension")), function(j, v, p) {
          var E = re(j, v, "Group"), M = [E].concat(p);
          return function(x, T) {
            var q = [x].concat(T), K = u.$r(q);
            return S(x, "$register", function(ue) {
              var ye = this;
              return ue == null && (ue = Se), K("Extensions").$register(ue, ye);
            }, -1);
          }(u.get_singleton_class(E), M), S(E, "$activate", function(T) {
            var q = this;
            return q.$raise(Ie("NotImplementedError"));
          });
        }(oe[0], null, oe), function(j, v, p) {
          var E = re(j, v, "Registry"), M = [E].concat(p), x = u.$r(M), T = E.$$prototype;
          return T.document = T.groups = T.preprocessor_extensions = T.tree_processor_extensions = T.postprocessor_extensions = T.include_processor_extensions = T.docinfo_processor_extensions = T.block_extensions = T.block_macro_extensions = T.inline_macro_extensions = Se, E.$attr_reader("document"), E.$attr_reader("groups"), S(E, "$initialize", function(K) {
            var me = this;
            return K == null && (K = $e([], {})), me.groups = K, me.$reset(), me.preprocessor_extensions = me.tree_processor_extensions = me.postprocessor_extensions = me.include_processor_extensions = me.docinfo_processor_extensions = me.block_extensions = me.block_macro_extensions = me.inline_macro_extensions = Se, me.document = Se;
          }, -1), S(E, "$activate", function(K) {
            var me = this, ue = Se;
            return W(me.document) && me.$reset(), me.document = K, W((ue = ke(x("Extensions").$groups().$values(), me.groups.$values()))["$empty?"]()) || Z(ue, "each", [], function ye(Pe) {
              var Ve = ye.$$s == null ? this : ye.$$s, et = Se;
              if (Pe == null && (Pe = Se), He(Ie("Proc"), et = Pe))
                switch (Pe.$arity()) {
                  case 0:
                  case -1:
                    return Z(Ve, "instance_exec", [], Pe.$to_proc());
                  case 1:
                    return Pe.$call(Ve);
                  default:
                    return Se;
                }
              else
                return He(k, et) ? Pe.$new().$activate(Ve) : Pe.$activate(Ve);
            }, { $$s: me }), me;
          }), S(E, "$preprocessor", function q(K) {
            var me = q.$$p || Se, ue, ye, Pe = this;
            return q.$$p = null, ue = V(arguments), ye = ue, Z(Pe, "add_document_processor", ["preprocessor", ye], me.$to_proc());
          }, -1), S(E, "$preprocessors?", function() {
            var K = this;
            return K.preprocessor_extensions["$!"]()["$!"]();
          }), S(E, "$preprocessors", Ze("preprocessor_extensions")), S(E, "$tree_processor", function q(K) {
            var me = q.$$p || Se, ue, ye, Pe = this;
            return q.$$p = null, ue = V(arguments), ye = ue, Z(Pe, "add_document_processor", ["tree_processor", ye], me.$to_proc());
          }, -1), S(E, "$tree_processors?", function() {
            var K = this;
            return K.tree_processor_extensions["$!"]()["$!"]();
          }), S(E, "$tree_processors", Ze("tree_processor_extensions")), Be(E, "treeprocessor", "tree_processor"), Be(E, "treeprocessors?", "tree_processors?"), Be(E, "treeprocessors", "tree_processors"), S(E, "$postprocessor", function q(K) {
            var me = q.$$p || Se, ue, ye, Pe = this;
            return q.$$p = null, ue = V(arguments), ye = ue, Z(Pe, "add_document_processor", ["postprocessor", ye], me.$to_proc());
          }, -1), S(E, "$postprocessors?", function() {
            var K = this;
            return K.postprocessor_extensions["$!"]()["$!"]();
          }), S(E, "$postprocessors", Ze("postprocessor_extensions")), S(E, "$include_processor", function q(K) {
            var me = q.$$p || Se, ue, ye, Pe = this;
            return q.$$p = null, ue = V(arguments), ye = ue, Z(Pe, "add_document_processor", ["include_processor", ye], me.$to_proc());
          }, -1), S(E, "$include_processors?", function() {
            var K = this;
            return K.include_processor_extensions["$!"]()["$!"]();
          }), S(E, "$include_processors", Ze("include_processor_extensions")), S(E, "$docinfo_processor", function q(K) {
            var me = q.$$p || Se, ue, ye, Pe = this;
            return q.$$p = null, ue = V(arguments), ye = ue, Z(Pe, "add_document_processor", ["docinfo_processor", ye], me.$to_proc());
          }, -1), S(E, "$docinfo_processors?", function(K) {
            var me = this;
            return K == null && (K = Se), W(me.docinfo_processor_extensions) ? W(K) ? Z(me.docinfo_processor_extensions, "any?", [], function(ye) {
              return ye == null && (ye = Se), ye.$config()["$[]"]("location")["$=="](K);
            }) : !0 : !1;
          }, -1), S(E, "$docinfo_processors", function(K) {
            var me = this;
            return K == null && (K = Se), W(me.docinfo_processor_extensions) ? W(K) ? Z(me.docinfo_processor_extensions, "select", [], function(ye) {
              return ye == null && (ye = Se), ye.$config()["$[]"]("location")["$=="](K);
            }) : me.docinfo_processor_extensions : Se;
          }, -1), S(E, "$block", function q(K) {
            var me = q.$$p || Se, ue, ye, Pe = this;
            return q.$$p = null, ue = V(arguments), ye = ue, Z(Pe, "add_syntax_processor", ["block", ye], me.$to_proc());
          }, -1), S(E, "$blocks?", function() {
            var K = this;
            return K.block_extensions["$!"]()["$!"]();
          }), S(E, "$registered_for_block?", function(K, me) {
            var ue = this, ye = Se;
            return W(ye = ue.block_extensions["$[]"](K.$to_sym())) && W(ye.$config()["$[]"]("contexts")["$include?"](me)) ? ye : !1;
          }), S(E, "$find_block_extension", function(K) {
            var me = this;
            return me.block_extensions["$[]"](K.$to_sym());
          }), S(E, "$block_macro", function q(K) {
            var me = q.$$p || Se, ue, ye, Pe = this;
            return q.$$p = null, ue = V(arguments), ye = ue, Z(Pe, "add_syntax_processor", ["block_macro", ye], me.$to_proc());
          }, -1), S(E, "$block_macros?", function() {
            var K = this;
            return K.block_macro_extensions["$!"]()["$!"]();
          }), S(E, "$registered_for_block_macro?", function(K) {
            var me = this, ue = Se;
            return W(ue = me.block_macro_extensions["$[]"](K.$to_sym())) ? ue : !1;
          }), S(E, "$find_block_macro_extension", function(K) {
            var me = this;
            return me.block_macro_extensions["$[]"](K.$to_sym());
          }), S(E, "$inline_macro", function q(K) {
            var me = q.$$p || Se, ue, ye, Pe = this;
            return q.$$p = null, ue = V(arguments), ye = ue, Z(Pe, "add_syntax_processor", ["inline_macro", ye], me.$to_proc());
          }, -1), S(E, "$inline_macros?", function() {
            var K = this;
            return K.inline_macro_extensions["$!"]()["$!"]();
          }), S(E, "$registered_for_inline_macro?", function(K) {
            var me = this, ue = Se;
            return W(ue = me.inline_macro_extensions["$[]"](K.$to_sym())) ? ue : !1;
          }), S(E, "$find_inline_macro_extension", function(K) {
            var me = this;
            return me.inline_macro_extensions["$[]"](K.$to_sym());
          }), S(E, "$inline_macros", function() {
            var K = this;
            return K.inline_macro_extensions.$values();
          }), S(E, "$prefer", function q(K) {
            var me = q.$$p || Se, ue, ye, Pe = this, Ve = Se, et = Se, at = Se;
            return q.$$p = null, ue = V(arguments), ye = ue, Ve = He(x("ProcessorExtension"), et = ye.$shift()) ? et : Z(Pe, "send", [et].concat(De(ye)), me.$to_proc()), at = Pe.$instance_variable_get(("@" + Ve.$kind() + "_extensions").$to_sym()), at.$unshift(at.$delete(Ve)), Ve;
          }, -1), E.$private(), S(E, "$add_document_processor", function q(K, me) {
            var ue = q.$$p || Se, ye, Pe, Ve = this, et = Se, at = Se, rt = Se, ft = Se, _t = Se, ht = Se, pt = Se, vt = Se, Et = Se, Pt = Se, Nt = Se;
            return q.$$p = null, et = K.$to_s().$tr("_", " "), at = Z(et.$split(), "map", [], function(Ft) {
              return Ft == null && (Ft = Se), Ft.$capitalize();
            }).$join().$to_sym(), rt = x("Extensions").$const_get(at, !1), ft = W(Ie("::", "AsciidoctorJ", "skip_raise") ? "constant" : Se) ? Ie(Ie("AsciidoctorJ"), "Extensions").$const_get(at, !1) : Se, _t = W(ht = Ve.$instance_variable_get(("@" + K + "_extensions").$to_sym())) ? ht : Ve.$instance_variable_set(("@" + K + "_extensions").$to_sym(), []), ue !== Se ? (pt = Ve.$resolve_args(me, 1), (vt = rt.$new(pt)).$singleton_class().$enable_dsl(), O(ue.$arity(), 0) ? Z(vt, "instance_exec", [], ue.$to_proc()) : u.yield1(ue, vt), W(vt["$process_block_given?"]()) || Ve.$raise(Ie("NoMethodError"), "No block specified to process " + et + " extension at " + ue.$source_location().$join(":")), vt.$freeze(), Et = x("ProcessorExtension").$new(K, vt)) : (Pe = Ve.$resolve_args(me, 2), ye = Fe(Pe), vt = ye[0] == null ? Se : ye[0], pt = ye[1] == null ? Se : ye[1], W(Pt = x("Helpers").$resolve_class(vt)) ? (W(nt(Pt, rt)) || W(ft) && W(nt(Pt, ft)) || Ve.$raise(Ie("ArgumentError"), "Invalid type for " + et + " extension: " + vt), Nt = Pt.$new(pt), Nt.$freeze(), Et = x("ProcessorExtension").$new(K, Nt)) : He(rt, vt) || W(ft) && He(ft, vt) ? (vt.$update_config(pt), vt.$freeze(), Et = x("ProcessorExtension").$new(K, vt)) : Ve.$raise(Ie("ArgumentError"), "Invalid arguments specified for registering " + et + " extension: " + me)), O(Et.$config()["$[]"]("position"), ">>") ? _t.$unshift(Et) : _t["$<<"](Et), Et;
          }), S(E, "$add_syntax_processor", function q(K, me) {
            var ue = q.$$p || Se, ye, Pe, Ve = this, et = Se, at = Se, rt = Se, ft = Se, _t = Se, ht = Se, pt = Se, vt = Se, Et = Se, Pt = Se, Nt = Se;
            return q.$$p = null, et = K.$to_s().$tr("_", " "), at = Z(et.$split(), "map", [], function(Ft) {
              return Ft == null && (Ft = Se), Ft.$capitalize();
            })["$<<"]("Processor").$join().$to_sym(), rt = x("Extensions").$const_get(at, !1), ft = W(Ie("::", "AsciidoctorJ", "skip_raise") ? "constant" : Se) ? Ie(Ie("AsciidoctorJ"), "Extensions").$const_get(at, !1) : Se, _t = W(ht = Ve.$instance_variable_get(("@" + K + "_extensions").$to_sym())) ? ht : Ve.$instance_variable_set(("@" + K + "_extensions").$to_sym(), $e([], {})), ue !== Se ? (Pe = Ve.$resolve_args(me, 2), ye = Fe(Pe), pt = ye[0] == null ? Se : ye[0], vt = ye[1] == null ? Se : ye[1], (Et = rt.$new(Ve.$as_symbol(pt), vt)).$singleton_class().$enable_dsl(), O(ue.$arity(), 0) ? Z(Et, "instance_exec", [], ue.$to_proc()) : u.yield1(ue, Et), W(pt = Ve.$as_symbol(Et.$name())) || Ve.$raise(Ie("ArgumentError"), "No name specified for " + et + " extension at " + ue.$source_location().$join(":")), W(Et["$process_block_given?"]()) || Ve.$raise(Ie("NoMethodError"), "No block specified to process " + et + " extension at " + ue.$source_location().$join(":")), Et.$freeze(), ye = [pt, x("ProcessorExtension").$new(K, Et)], Z(_t, "[]=", ye), ye[ye.length - 1]) : (Pe = Ve.$resolve_args(me, 3), ye = Fe(Pe), Et = ye[0] == null ? Se : ye[0], pt = ye[1] == null ? Se : ye[1], vt = ye[2] == null ? Se : ye[2], W(Pt = x("Helpers").$resolve_class(Et)) ? (W(nt(Pt, rt)) || W(ft) && W(nt(Pt, ft)) || Ve.$raise(Ie("ArgumentError"), "Class specified for " + et + " extension does not inherit from " + rt + ": " + Et), Nt = Pt.$new(Ve.$as_symbol(pt), vt), W(pt = Ve.$as_symbol(Nt.$name())) || Ve.$raise(Ie("ArgumentError"), "No name specified for " + et + " extension: " + Et), Nt.$freeze(), ye = [pt, x("ProcessorExtension").$new(K, Nt)], Z(_t, "[]=", ye), ye[ye.length - 1]) : He(rt, Et) || W(ft) && He(ft, Et) ? (Et.$update_config(vt), W(pt = W(pt) ? (ye = [Ve.$as_symbol(pt)], Z(Et, "name=", ye), ye[ye.length - 1]) : Ve.$as_symbol(Et.$name())) || Ve.$raise(Ie("ArgumentError"), "No name specified for " + et + " extension: " + Et), Et.$freeze(), ye = [pt, x("ProcessorExtension").$new(K, Et)], Z(_t, "[]=", ye), ye[ye.length - 1]) : Ve.$raise(Ie("ArgumentError"), "Invalid arguments specified for registering " + et + " extension: " + me));
          }), S(E, "$reset", function() {
            var K = this;
            return K.preprocessor_extensions = K.tree_processor_extensions = K.postprocessor_extensions = K.include_processor_extensions = K.docinfo_processor_extensions = K.block_extensions = K.block_macro_extensions = K.inline_macro_extensions = Se, K.document = Se;
          }), S(E, "$resolve_args", function(K, me) {
            var ue = Se, ye = Se;
            return ue = He(Ie("Hash"), K["$[]"](-1)) ? K.$pop() : $e([], {}), O(me, 1) ? ue : (W(Ke(ye = ee(ee(me, 1), K.$size()), 0)) ? K = ke(K, Ie("Array").$new(ye)) : W(nt(ye, 0)) && K.$pop(ye["$-@"]()), K["$<<"](ue), K);
          }), S(E, "$as_symbol", function(K) {
            return W(K) ? K.$to_sym() : Se;
          });
        }(oe[0], null, oe), function(j, v) {
          var p = [j].concat(v), E = u.$r(p);
          return S(j, "$generate_name", function() {
            var x = this;
            return "extgrp" + x.$next_auto_id();
          }), S(j, "$next_auto_id", function() {
            var x = this, T = Se;
            return x.auto_id == null && (x.auto_id = Se), x.auto_id = W(T = x.auto_id) ? T : -1, x.auto_id = ke(x.auto_id, 1);
          }), S(j, "$groups", function() {
            var x = this, T = Se;
            return x.groups == null && (x.groups = Se), x.groups = W(T = x.groups) ? T : $e([], {});
          }), S(j, "$create", function M(x) {
            var T = M.$$p || Se, q = this, K = Se;
            return M.$$p = null, x == null && (x = Se), T !== Se ? E("Registry").$new(U(W(K = x) ? K : q.$generate_name(), T)) : E("Registry").$new();
          }, -1), S(j, "$register", function M(x) {
            var T = M.$$p || Se, q, K, me, ue = this, ye = Se, Pe = Se, Ve = Se, et = Se, at = Se;
            return M.$$p = null, q = V(arguments), K = q, ye = K.$size(), T !== Se ? Pe = T : W(Ve = K.$pop()) ? Pe = W(et = E("Helpers").$resolve_class(Ve)) ? et : Ve : ue.$raise(Ie("ArgumentError"), "Extension group to register not specified"), at = W(et = K.$pop()) ? et : ue.$generate_name(), W(K["$empty?"]()) || ue.$raise(Ie("ArgumentError"), "Wrong number of arguments (" + ye + " for 1..2)"), me = [at.$to_sym(), Pe], Z(ue.$groups(), "[]=", me), me[me.length - 1];
          }, -1), S(j, "$unregister_all", function() {
            var x = this;
            return x.groups = $e([], {}), Se;
          }), S(j, "$unregister", function(x) {
            var T, q, K = this;
            return T = V(arguments), q = T, Z(q, "each_with_object", [K.$groups()], function(ue, ye) {
              return ue == null && (ue = Se), ye == null && (ye = Se), ye.$delete(ue.$to_sym());
            }), Se;
          }, -1);
        }(u.get_singleton_class(le), oe);
      }(te[0], te);
    }(ze[0], ze);
  }, Opal.modules["asciidoctor/js/asciidoctor_ext/stylesheet"] = function(u) {
    var se = u.module, re = u.klass, W = u.truthy, $e = u.def, S = [], Z = u.nil, Be = u.$$$;
    return u.add_stubs("rstrip,read,join"), function(V, ke) {
      var O = se(V, "Asciidoctor"), Ke = [O].concat(ke);
      return function(xe, He) {
        var De = re(xe, He, "Stylesheets"), Fe = De.$$prototype;
        return Fe.primary_stylesheet_data = Z, $e(De, "$primary_stylesheet_data", function() {
          var Ge = this, tt = Z;
          return Ge.primary_stylesheet_data = W(tt = Ge.primary_stylesheet_data) ? tt : Be("IO").$read(Be("File").$join("css", "asciidoctor.css")).$rstrip();
        });
      }(Ke[0], null);
    }(S[0], S);
  }, Opal.modules["asciidoctor/js/asciidoctor_ext/document"] = function(u) {
    var se = u.module, re = u.klass, W = u.def, $e = [];
    return u.nil, function(S, Z) {
      var Be = se(S, "Asciidoctor"), V = [Be].concat(Z), ke = u.$r(V);
      return function(O, Ke) {
        var xe = re(O, Ke, "Document");
        return W(xe, "$fill_datetime_attributes", function(De, Fe) {
          var ot = u.truthy, Ge = u.falsy, tt = u.nil, Ye, We, st, L, je, k, Ze, nt, ee = function(M, x) {
            return x === 0 ? M.getUTCFullYear() : M.getFullYear();
          }, U = function(M, x) {
            return x === 0 ? M.getUTCMonth() : M.getMonth();
          }, ze = function(M, x) {
            return x === 0 ? M.getUTCDate() : M.getDate();
          }, Se = function(M, x) {
            return x === 0 ? M.getUTCHours() : M.getHours();
          }, Ie = /* @__PURE__ */ new Date();
          if (u.const_get_qualified("::", "ENV")["$key?"]("SOURCE_DATE_EPOCH") ? (Ie.setTime(parseInt(u.const_get_qualified("::", "ENV")["$[]"]("SOURCE_DATE_EPOCH")) * 1e3), We = Ie, Ye = 0) : Ye = -Ie.getTimezoneOffset() / 60, ot(st = De["$[]"]("localdate")))
            Ge(L = De["$[]"]("localyear")) && (L = st.indexOf("-") === 4 ? st.substring(0, 4) : tt, De["$[]="]("localyear", L));
          else {
            var Ae = ee(Ie, Ye).toString(), de = ("0" + (U(Ie, Ye) + 1)).slice(-2), Ee = ("0" + ze(Ie, Ye)).slice(-2);
            st = Ae + "-" + de + "-" + Ee, De["$[]="]("localdate", st), L = Ae, De["$[]="]("localyear", Ae);
          }
          if (Ge(je = De["$[]"]("localtime"))) {
            var te = ("0" + Se(Ie, Ye)).slice(-2), G = ("0" + Ie.getMinutes()).slice(-2), B = ("0" + Ie.getSeconds()).slice(-2), le;
            Ye === 0 ? le = "UTC" : Ye > 0 ? le = ("+0" + Ye * 100).slice(-5) : le = ("-0" + -Ye * 100).slice(-5), je = te + ":" + G + ":" + B + " " + le, De["$[]="]("localtime", je);
          }
          if (Ge(k = De["$[]"]("localdatetime")) && (k = st + " " + je, De["$[]="]("localdatetime", k)), ot(We) ? Fe = We : ot(Fe) ? Ye = -Fe.getTimezoneOffset() / 60 : Fe = Ie, ot(Ze = De["$[]"]("docdate")))
            De["$[]="]("docyear", Ze.indexOf("-") === 4 ? Ze.substring(0, 4) : tt);
          else {
            var oe = ee(Fe, Ye).toString(), he = ("0" + (U(Fe, Ye) + 1)).slice(-2), j = ("0" + ze(Fe, Ye)).slice(-2);
            Ze = oe + "-" + he + "-" + j, De["$[]="]("docdate", Ze), Ge(De["$[]"]("docyear")) && De["$[]="]("docyear", oe);
          }
          if (Ge(nt = De["$[]"]("doctime"))) {
            var v = ("0" + Se(Fe, Ye)).slice(-2), p = ("0" + Fe.getMinutes()).slice(-2), E = ("0" + Fe.getSeconds()).slice(-2), le;
            Ye === 0 ? le = "UTC" : Ye > 0 ? le = ("+0" + Ye * 100).slice(-5) : le = ("-0" + -Ye * 100).slice(-5), nt = v + ":" + p + ":" + E + " " + le, De["$[]="]("doctime", nt);
          }
          return Ge(De["$[]"]("docdatetime")) && De["$[]="]("docdatetime", Ze + " " + nt), tt;
        });
      }(V[0], ke("AbstractBlock"));
    }($e[0], $e);
  }, Opal.modules["asciidoctor/js/asciidoctor_ext/substitutors"] = function(u) {
    var se = u.module, re = u.def, W = [];
    return u.nil, function($e, S) {
      var Z = se($e, "Asciidoctor"), Be = [Z].concat(S);
      return function(V) {
        var ke = se(V, "Substitutors");
        return re(ke, "$sub_placeholder", function(Ke, xe) {
          return Ke.replace("%s", xe);
        });
      }(Be[0]);
    }(W[0], W);
  }, Opal.modules["asciidoctor/js/asciidoctor_ext/parser"] = function(u) {
    var se = u.module, re = u.klass, W = u.truthy, $e = u.defs, S = [];
    return u.nil, function(Z, Be) {
      var V = se(Z, "Asciidoctor"), ke = [V].concat(Be);
      return function(O, Ke) {
        var xe = re(O, Ke, "Parser");
        return W(String.prototype.repeat) ? $e(xe, "$uniform?", function(De, Fe, ot) {
          return Fe.repeat(ot) === De;
        }) : $e(xe, "$uniform?", function(De, Fe, ot) {
          return Array.apply(null, { length: ot }).map(function() {
            return Fe;
          }).join("") === De;
        });
      }(ke[0], null);
    }(S[0], S);
  }, Opal.modules["asciidoctor/js/asciidoctor_ext/syntax_highlighter"] = function(u) {
    var se = u.module, re = u.truthy, W = u.def, $e = [], S = u.nil;
    return u.add_stubs("key?,registry,[],include?,include,empty?,debug,logger,join,keys"), function(Z, Be) {
      var V = se(Z, "Asciidoctor"), ke = [V].concat(Be);
      return function(O, Ke) {
        var xe = se(O, "SyntaxHighlighter"), He = [xe].concat(Ke);
        return function(De, Fe) {
          var ot = se(De, "Factory"), Ge = [ot].concat(Fe), tt = u.$r(Ge);
          return W(ot, "$for", function(We) {
            var st = this;
            return re(st.$registry()["$key?"](We)) ? st.$registry()["$[]"](We) : (re(st["$include?"](tt("Logging"))) || st.$include(tt("Logging")), re(st.$registry()["$empty?"]()) ? st.$logger().$debug("no syntax highlighter available, functionality disabled.") : st.$logger().$debug("syntax highlighter named '" + We + "' is not available, must be one of: '" + st.$registry().$keys().$join("', '") + "'."), S);
          });
        }(He[0], He);
      }(ke[0], ke);
    }($e[0], $e);
  }, Opal.modules["asciidoctor/js/asciidoctor_ext"] = function(u) {
    var se = u.top;
    u.nil, u.add_stubs("require"), se.$require("asciidoctor/js/asciidoctor_ext/stylesheet"), se.$require("asciidoctor/js/asciidoctor_ext/document"), se.$require("asciidoctor/js/asciidoctor_ext/substitutors"), se.$require("asciidoctor/js/asciidoctor_ext/parser"), se.$require("asciidoctor/js/asciidoctor_ext/syntax_highlighter"), se.$require("asciidoctor/js/asciidoctor_ext/browser");
  }, Opal.modules["asciidoctor/js/opal_ext/logger"] = function(u) {
    var se = u.klass, re = u.def, W = u.truthy, $e = u.rb_lt, S = [], Z = u.nil;
    return u.add_stubs("chr,rjust,message_as_string,<,write,call,[]"), function(Be, V, ke) {
      var O = se(Be, V, "Logger"), Ke = [O].concat(ke), xe = u.$r(Ke), He = O.$$prototype;
      return He.level = He.progname = He.pipe = He.formatter = Z, function(De, Fe) {
        var ot = se(De, Fe, "Formatter");
        return re(ot, "$call", function(tt, Ye, We, st) {
          var L = this, je = Z;
          return je = Ye.getFullYear() + "-" + ("0" + (Ye.getMonth() + 1)).slice(-2) + "-" + ("0" + Ye.getDate()).slice(-2) + "T" + ("0" + Ye.getHours()).slice(-2) + ":" + ("0" + Ye.getMinutes()).slice(-2) + ":" + ("0" + Ye.getSeconds()).slice(-2) + "." + ("00" + (/* @__PURE__ */ new Date()).getMilliseconds() * 1e3).slice(-6), "" + tt.$chr() + ", [" + je + "] " + tt.$rjust(5) + " -- " + We + ": " + L.$message_as_string(st);
        });
      }(Ke[0], null), re(O, "$add", function De(Fe, ot, Ge) {
        var tt = De.$$p || Z, Ye = this, We = Z;
        return De.$$p = null, ot == null && (ot = Z), Ge == null && (Ge = Z), W($e(Fe = W(We = Fe) ? We : xe("UNKNOWN"), Ye.level)) || (Ge = W(We = Ge) ? We : Ye.progname, W(ot) || (tt !== Z ? ot = u.yieldX(tt, []) : (ot = Ge, Ge = Ye.progname)), Ye.pipe.$write(Ye.formatter.$call(W(We = xe("SEVERITY_LABELS")["$[]"](Fe)) ? We : "ANY", /* @__PURE__ */ new Date(), Ge, ot))), !0;
      }, -2);
    }(S[0], null, S);
  }, Opal.modules["asciidoctor/js/postscript"] = function(u) {
    var se = u.top;
    return u.nil, u.add_stubs("require"), se.$require("asciidoctor/converter/composite"), se.$require("asciidoctor/converter/html5"), se.$require("asciidoctor/extensions"), se.$require("asciidoctor/js/asciidoctor_ext"), se.$require("asciidoctor/js/opal_ext/logger");
  }, Opal.queue(function(u) {
    var se = u.module, re = u.const_set, W = u.send, $e = u.to_ary, S = u.defs, Z = u.def, Be = u.truthy, V = u.hash2, ke = u.eqeq, O = u.rb_minus, Ke = u.regexp, xe = u.top, He = [], De = u.nil, Fe = u.$$$;
    return u.add_stubs("require,==,to_h,sort,map,constants,const_get,downcase,to_s,<=>,upcase,[],values,new,attr_reader,instance_variable_set,send,singleton_class,<<,define,dirname,absolute_path,join,home,pwd,to_set,tap,each,chr,each_key,[]=,slice,length,-,merge,default=,drop,insert"), xe.$require("set"), xe.$require("asciidoctor/js"), function(ot, Ge) {
      var tt = se(ot, "Asciidoctor"), Ye = [tt].concat(Ge), We = u.$r(Ye), st = De;
      return re(Ye[0], "RUBY_ENGINE_OPAL", re(Ye[0], "RUBY_ENGINE", Fe("RUBY_ENGINE"))["$=="]("opal")), function(L, je) {
        var k = se(L, "SafeMode"), Ze = [k].concat(je);
        return re(Ze[0], "UNSAFE", 0), re(Ze[0], "SAFE", 1), re(Ze[0], "SERVER", 10), re(Ze[0], "SECURE", 20), k.names_by_value = W(W(k.$constants(!1), "map", [], function nt(ee) {
          var U = nt.$$s == null ? this : nt.$$s;
          return ee == null && (ee = De), [U.$const_get(ee), ee.$to_s().$downcase()];
        }, { $$s: k }), "sort", [], function(ee, U) {
          var ze, Se, Ie = De, Ae = De;
          return ee == null && (ee = De), U == null && (U = De), Se = ee, ze = $e(Se), Ie = ze[0] == null ? De : ze[0], Se = U, ze = $e(Se), Ae = ze[0] == null ? De : ze[0], Ie["$<=>"](Ae);
        }, { $$has_top_level_mlhs_arg: !0 }).$to_h(), S(k, "$value_for_name", function(ee) {
          var U = this;
          return U.$const_get(ee.$upcase(), !1);
        }), S(k, "$name_for_value", function(ee) {
          var U = this;
          return U.names_by_value == null && (U.names_by_value = De), U.names_by_value["$[]"](ee);
        }), S(k, "$names", function() {
          var ee = this;
          return ee.names_by_value == null && (ee.names_by_value = De), ee.names_by_value.$values();
        });
      }(Ye[0], Ye), function(L, je) {
        var k = se(L, "Compliance");
        return k.keys = Fe("Set").$new(), function(Ze, nt) {
          return Ze.$attr_reader("keys"), Z(Ze, "$define", function(U, ze) {
            var Se = this;
            return Se.keys == null && (Se.keys = De), Se.$instance_variable_set("@" + U, ze), Se.$singleton_class().$send("attr_accessor", U), Se.keys["$<<"](U), De;
          });
        }(u.get_singleton_class(k)), k.$define("block_terminates_paragraph", !0), k.$define("strict_verbatim_paragraphs", !0), k.$define("underline_style_section_titles", !0), k.$define("unwrap_standalone_preamble", !0), k.$define("attribute_missing", "skip"), k.$define("attribute_undefined", "drop-line"), k.$define("shorthand_property_syntax", !0), k.$define("natural_xrefs", !0), k.$define("unique_id_start_index", 2), k.$define("markdown_syntax", !0);
      }(Ye[0]), Be(We("ROOT_DIR", "skip_raise") ? "constant" : De) || re(Ye[0], "ROOT_DIR", Fe("File").$dirname(Fe("File").$absolute_path("."))), re(Ye[0], "LIB_DIR", Fe("File").$join(We("ROOT_DIR"), "lib")), re(Ye[0], "DATA_DIR", Fe("File").$join(We("ROOT_DIR"), "data")), re(Ye[0], "USER_HOME", function() {
        try {
          return Fe("Dir").$home();
        } catch (L) {
          if (u.rescue(L, [We("StandardError")]))
            try {
              return Be(st = Fe("ENV")["$[]"]("HOME")) ? st : Fe("Dir").$pwd();
            } finally {
              u.pop_exception();
            }
          else
            throw L;
        }
      }()), re(Ye[0], "LF", `
`), re(Ye[0], "NULL", "\0"), re(Ye[0], "TAB", "	"), re(Ye[0], "MAX_INT", 9007199254740991), re(Ye[0], "UTF_8", Fe(Fe("Encoding"), "UTF_8")), re(Ye[0], "BOM_BYTES_UTF_8", [239, 187, 191]), re(Ye[0], "BOM_BYTES_UTF_16LE", [255, 254]), re(Ye[0], "BOM_BYTES_UTF_16BE", [254, 255]), re(Ye[0], "FILE_READ_MODE", Be(We("RUBY_ENGINE_OPAL")) ? "r" : "rb:utf-8:utf-8"), re(Ye[0], "URI_READ_MODE", We("FILE_READ_MODE")), re(Ye[0], "FILE_WRITE_MODE", Be(We("RUBY_ENGINE_OPAL")) ? "w" : "w:utf-8"), re(Ye[0], "DEFAULT_DOCTYPE", "article"), re(Ye[0], "DEFAULT_BACKEND", "html5"), re(Ye[0], "DEFAULT_STYLESHEET_KEYS", ["", "DEFAULT"].$to_set()), re(Ye[0], "DEFAULT_STYLESHEET_NAME", "asciidoctor.css"), re(Ye[0], "BACKEND_ALIASES", V(["html", "docbook"], { html: "html5", docbook: "docbook5" })), re(Ye[0], "DEFAULT_PAGE_WIDTHS", V(["docbook"], { docbook: 425 })), re(Ye[0], "DEFAULT_EXTENSIONS", V(["html", "docbook", "pdf", "epub", "manpage", "asciidoc"], { html: ".html", docbook: ".xml", pdf: ".pdf", epub: ".epub", manpage: ".man", asciidoc: ".adoc" })), re(Ye[0], "ASCIIDOC_EXTENSIONS", V([".adoc", ".asciidoc", ".asc", ".ad", ".txt"], { ".adoc": !0, ".asciidoc": !0, ".asc": !0, ".ad": !0, ".txt": !0 })), re(Ye[0], "SETEXT_SECTION_LEVELS", V(["=", "-", "~", "^", "+"], { "=": 0, "-": 1, "~": 2, "^": 3, "+": 4 })), re(Ye[0], "ADMONITION_STYLES", ["NOTE", "TIP", "IMPORTANT", "WARNING", "CAUTION"].$to_set()), re(Ye[0], "ADMONITION_STYLE_HEADS", W(Fe("Set").$new(), "tap", [], function(je) {
        return je == null && (je = De), W(We("ADMONITION_STYLES"), "each", [], function(Ze) {
          return Ze == null && (Ze = De), je["$<<"](Ze.$chr());
        });
      })), re(Ye[0], "PARAGRAPH_STYLES", ["comment", "example", "literal", "listing", "normal", "open", "pass", "quote", "sidebar", "source", "verse", "abstract", "partintro"].$to_set()), re(Ye[0], "VERBATIM_STYLES", ["literal", "listing", "source", "verse"].$to_set()), re(Ye[0], "DELIMITED_BLOCKS", V(["--", "----", "....", "====", "****", "____", "++++", "|===", ",===", ":===", "!===", "////", "```"], { "--": ["open", ["comment", "example", "literal", "listing", "pass", "quote", "sidebar", "source", "verse", "admonition", "abstract", "partintro"].$to_set()], "----": ["listing", ["literal", "source"].$to_set()], "....": ["literal", ["listing", "source"].$to_set()], "====": ["example", ["admonition"].$to_set()], "****": ["sidebar", Fe("Set").$new()], ____: ["quote", ["verse"].$to_set()], "++++": ["pass", ["stem", "latexmath", "asciimath"].$to_set()], "|===": ["table", Fe("Set").$new()], ",===": ["table", Fe("Set").$new()], ":===": ["table", Fe("Set").$new()], "!===": ["table", Fe("Set").$new()], "////": ["comment", Fe("Set").$new()], "```": ["fenced_code", Fe("Set").$new()] })), re(Ye[0], "DELIMITED_BLOCK_HEADS", W(V([], {}), "tap", [], function(je) {
        return je == null && (je = De), W(We("DELIMITED_BLOCKS"), "each_key", [], function(Ze) {
          var nt;
          return Ze == null && (Ze = De), nt = [Ze.$slice(0, 2), !0], W(je, "[]=", nt), nt[nt.length - 1];
        });
      })), re(Ye[0], "DELIMITED_BLOCK_TAILS", W(V([], {}), "tap", [], function(je) {
        return je == null && (je = De), W(We("DELIMITED_BLOCKS"), "each_key", [], function(Ze) {
          var nt;
          return Ze == null && (Ze = De), ke(Ze.$length(), 4) ? (nt = [Ze, Ze["$[]"](O(Ze.$length(), 1))], W(je, "[]=", nt), nt[nt.length - 1]) : De;
        });
      })), re(Ye[0], "CAPTION_ATTRIBUTE_NAMES", V(["example", "figure", "listing", "table"], { example: "example-caption", figure: "figure-caption", listing: "listing-caption", table: "table-caption" })), re(Ye[0], "LAYOUT_BREAK_CHARS", V(["'", "<"], { "'": "thematic_break", "<": "page_break" })), re(Ye[0], "MARKDOWN_THEMATIC_BREAK_CHARS", V(["-", "*", "_"], { "-": "thematic_break", "*": "thematic_break", _: "thematic_break" })), re(Ye[0], "HYBRID_LAYOUT_BREAK_CHARS", We("LAYOUT_BREAK_CHARS").$merge(We("MARKDOWN_THEMATIC_BREAK_CHARS"))), re(Ye[0], "NESTABLE_LIST_CONTEXTS", ["ulist", "olist", "dlist"]), re(Ye[0], "ORDERED_LIST_STYLES", ["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"]), re(Ye[0], "ORDERED_LIST_KEYWORDS", V(["loweralpha", "lowerroman", "upperalpha", "upperroman"], { loweralpha: "a", lowerroman: "i", upperalpha: "A", upperroman: "I" })), re(Ye[0], "ATTR_REF_HEAD", "{"), re(Ye[0], "LIST_CONTINUATION", "+"), re(Ye[0], "HARD_LINE_BREAK", " +"), re(Ye[0], "LINE_CONTINUATION", " \\"), re(Ye[0], "LINE_CONTINUATION_LEGACY", " +"), re(Ye[0], "BLOCK_MATH_DELIMITERS", V(["asciimath", "latexmath"], { asciimath: ["\\$", "\\$"], latexmath: ["\\[", "\\]"] })), re(Ye[0], "INLINE_MATH_DELIMITERS", V(["asciimath", "latexmath"], { asciimath: ["\\$", "\\$"], latexmath: ["\\(", "\\)"] })), re(Ye[0], "STEM_TYPE_ALIASES", V(["latexmath", "latex", "tex"], { latexmath: "latexmath", latex: "latexmath", tex: "latexmath" }))["$default="]("asciimath"), re(Ye[0], "FONT_AWESOME_VERSION", "4.7.0"), re(Ye[0], "HIGHLIGHT_JS_VERSION", "9.18.3"), re(Ye[0], "MATHJAX_VERSION", "2.7.9"), re(Ye[0], "DEFAULT_ATTRIBUTES", V(["appendix-caption", "appendix-refsig", "caution-caption", "chapter-refsig", "example-caption", "figure-caption", "important-caption", "last-update-label", "note-caption", "part-refsig", "prewrap", "sectids", "section-refsig", "table-caption", "tip-caption", "toc-placement", "toc-title", "untitled-label", "version-label", "warning-caption"], { "appendix-caption": "Appendix", "appendix-refsig": "Appendix", "caution-caption": "Caution", "chapter-refsig": "Chapter", "example-caption": "Example", "figure-caption": "Figure", "important-caption": "Important", "last-update-label": "Last updated", "note-caption": "Note", "part-refsig": "Part", prewrap: "", sectids: "", "section-refsig": "Section", "table-caption": "Table", "tip-caption": "Tip", "toc-placement": "auto", "toc-title": "Table of Contents", "untitled-label": "Untitled", "version-label": "Version", "warning-caption": "Warning" })), re(Ye[0], "FLEXIBLE_ATTRIBUTES", ["sectnums"]), re(Ye[0], "INTRINSIC_ATTRIBUTES", V(["startsb", "endsb", "vbar", "caret", "asterisk", "tilde", "plus", "backslash", "backtick", "blank", "empty", "sp", "two-colons", "two-semicolons", "nbsp", "deg", "zwsp", "quot", "apos", "lsquo", "rsquo", "ldquo", "rdquo", "wj", "brvbar", "pp", "cpp", "amp", "lt", "gt"], { startsb: "[", endsb: "]", vbar: "|", caret: "^", asterisk: "*", tilde: "~", plus: "&#43;", backslash: "\\", backtick: "`", blank: "", empty: "", sp: " ", "two-colons": "::", "two-semicolons": ";;", nbsp: "&#160;", deg: "&#176;", zwsp: "&#8203;", quot: "&#34;", apos: "&#39;", lsquo: "&#8216;", rsquo: "&#8217;", ldquo: "&#8220;", rdquo: "&#8221;", wj: "&#8288;", brvbar: "&#166;", pp: "&#43;&#43;", cpp: "C&#43;&#43;", amp: "&", lt: "<", gt: ">" })), re(Ye[0], "QUOTE_SUBS", W(V([], {}), "tap", [], function(je) {
        var k = De, Ze = De;
        return je == null && (je = De), je["$[]="](!1, k = [["strong", "unconstrained", Ke(["\\\\?(?:\\[([^\\]]+)\\])?\\*\\*(", We("CC_ALL"), "+?)\\*\\*"], "m")], ["strong", "constrained", Ke(["(^|[^", We("CC_WORD"), ";:}])(?:\\[([^\\]]+)\\])?\\*(\\S|\\S", We("CC_ALL"), "*?\\S)\\*(?!", We("CG_WORD"), ")"], "m")], ["double", "constrained", Ke(["(^|[^", We("CC_WORD"), ';:}])(?:\\[([^\\]]+)\\])?"`(\\S|\\S', We("CC_ALL"), '*?\\S)`"(?!', We("CG_WORD"), ")"], "m")], ["single", "constrained", Ke(["(^|[^", We("CC_WORD"), ";:`}])(?:\\[([^\\]]+)\\])?'`(\\S|\\S", We("CC_ALL"), "*?\\S)`'(?!", We("CG_WORD"), ")"], "m")], ["monospaced", "unconstrained", Ke(["\\\\?(?:\\[([^\\]]+)\\])?``(", We("CC_ALL"), "+?)``"], "m")], ["monospaced", "constrained", Ke(["(^|[^", We("CC_WORD"), ";:\"'`}])(?:\\[([^\\]]+)\\])?`(\\S|\\S", We("CC_ALL"), "*?\\S)`(?![", We("CC_WORD"), "\"'`])"], "m")], ["emphasis", "unconstrained", Ke(["\\\\?(?:\\[([^\\]]+)\\])?__(", We("CC_ALL"), "+?)__"], "m")], ["emphasis", "constrained", Ke(["(^|[^", We("CC_WORD"), ";:}])(?:\\[([^\\]]+)\\])?_(\\S|\\S", We("CC_ALL"), "*?\\S)_(?!", We("CG_WORD"), ")"], "m")], ["mark", "unconstrained", Ke(["\\\\?(?:\\[([^\\]]+)\\])?##(", We("CC_ALL"), "+?)##"], "m")], ["mark", "constrained", Ke(["(^|[^", We("CC_WORD"), "&;:}])(?:\\[([^\\]]+)\\])?#(\\S|\\S", We("CC_ALL"), "*?\\S)#(?!", We("CG_WORD"), ")"], "m")], ["superscript", "unconstrained", /\\?(?:\[([^\]]+)\])?\^(\S+?)\^/], ["subscript", "unconstrained", /\\?(?:\[([^\]]+)\])?~(\S+?)~/]]), je["$[]="](!0, Ze = k.$drop(0)), Ze["$[]="](2, ["double", "constrained", Ke(["(^|[^", We("CC_WORD"), ";:}])(?:\\[([^\\]]+)\\])?``(\\S|\\S", We("CC_ALL"), "*?\\S)''(?!", We("CG_WORD"), ")"], "m")]), Ze["$[]="](3, ["single", "constrained", Ke(["(^|[^", We("CC_WORD"), ";:}])(?:\\[([^\\]]+)\\])?`(\\S|\\S", We("CC_ALL"), "*?\\S)'(?!", We("CG_WORD"), ")"], "m")]), Ze["$[]="](4, ["monospaced", "unconstrained", Ke(["\\\\?(?:\\[([^\\]]+)\\])?\\+\\+(", We("CC_ALL"), "+?)\\+\\+"], "m")]), Ze["$[]="](5, ["monospaced", "constrained", Ke(["(^|[^", We("CC_WORD"), ";:}])(?:\\[([^\\]]+)\\])?\\+(\\S|\\S", We("CC_ALL"), "*?\\S)\\+(?!", We("CG_WORD"), ")"], "m")]), Ze.$insert(3, ["emphasis", "constrained", Ke(["(^|[^", We("CC_WORD"), ";:}])(?:\\[([^\\]]+)\\])?'(\\S|\\S", We("CC_ALL"), "*?\\S)'(?!", We("CG_WORD"), ")"], "m")]);
      })), re(Ye[0], "REPLACEMENTS", [[/\\?\(C\)/, "&#169;", "none"], [/\\?\(R\)/, "&#174;", "none"], [/\\?\(TM\)/, "&#8482;", "none"], [/(?: |\n|^|\\)--(?: |\n|$)/, "&#8201;&#8212;&#8201;", "none"], [Ke(["(", We("CG_WORD"), ")\\\\?--(?=", We("CG_WORD"), ")"]), "&#8212;&#8203;", "leading"], [/\\?\.\.\./, "&#8230;&#8203;", "none"], [/\\?`'/, "&#8217;", "none"], [Ke(["(", We("CG_ALNUM"), ")\\\\?'(?=", We("CG_ALPHA"), ")"]), "&#8217;", "leading"], [/\\?-&gt;/, "&#8594;", "none"], [/\\?=&gt;/, "&#8658;", "none"], [/\\?&lt;-/, "&#8592;", "none"], [/\\?&lt;=/, "&#8656;", "none"], [/\\?(&)amp;((?:[a-zA-Z][a-zA-Z]+\d{0,2}|#\d\d\d{0,4}|#x[\da-fA-F][\da-fA-F][\da-fA-F]{0,3});)/, "", "bounding"]]), De;
    }(He[0], He), xe.$require("asciidoctor.rb/../asciidoctor/core_ext"), xe.$require("asciidoctor.rb/../asciidoctor/helpers"), xe.$require("asciidoctor.rb/../asciidoctor/logging"), xe.$require("asciidoctor.rb/../asciidoctor/rx"), xe.$require("asciidoctor.rb/../asciidoctor/substitutors"), xe.$require("asciidoctor.rb/../asciidoctor/version"), xe.$require("asciidoctor.rb/../asciidoctor/abstract_node"), xe.$require("asciidoctor.rb/../asciidoctor/abstract_block"), xe.$require("asciidoctor.rb/../asciidoctor/attribute_list"), xe.$require("asciidoctor.rb/../asciidoctor/block"), xe.$require("asciidoctor.rb/../asciidoctor/callouts"), xe.$require("asciidoctor.rb/../asciidoctor/converter"), xe.$require("asciidoctor.rb/../asciidoctor/document"), xe.$require("asciidoctor.rb/../asciidoctor/inline"), xe.$require("asciidoctor.rb/../asciidoctor/list"), xe.$require("asciidoctor.rb/../asciidoctor/parser"), xe.$require("asciidoctor.rb/../asciidoctor/path_resolver"), xe.$require("asciidoctor.rb/../asciidoctor/reader"), xe.$require("asciidoctor.rb/../asciidoctor/section"), xe.$require("asciidoctor.rb/../asciidoctor/stylesheets"), xe.$require("asciidoctor.rb/../asciidoctor/table"), xe.$require("asciidoctor.rb/../asciidoctor/writer"), xe.$require("asciidoctor.rb/../asciidoctor/load"), xe.$require("asciidoctor.rb/../asciidoctor/convert"), xe.$require("asciidoctor.rb/../asciidoctor/syntax_highlighter"), xe.$require("asciidoctor.rb/../asciidoctor/timings"), xe.$require("asciidoctor/js/postscript");
  });
  const e = function(u) {
    return u && !u.$$is_hash ? Opal.hash2(Object.keys(u), u) : u;
  }, r = function(u) {
    const se = {};
    if (u) {
      const re = u.$$smap;
      for (const $e in re) {
        const S = re[$e];
        se[$e] = S === Opal.nil ? void 0 : S;
      }
      const W = u.$$map;
      if (W) {
        const $e = [];
        for (const S in W) {
          const Z = W[S], Be = Z.value, V = Z.key - 1;
          $e[V] = Be === Opal.nil ? void 0 : Be;
        }
        $e.length > 0 && (se.$positional = $e);
      }
    }
    return se;
  }, n = function(u) {
    const se = {};
    if (u) {
      const re = u.$$keys;
      for (const W in re) {
        const $e = re[W].value;
        se[W.toString()] = $e === Opal.nil ? void 0 : $e;
      }
    }
    return se;
  }, i = function(u) {
    if (u = e(u), u) {
      const se = u["$[]"]("converter");
      se && se !== Opal.nil && u["$[]="]("converter", s(se));
      const re = u["$[]"]("attributes");
      re && typeof re == "object" && re.constructor.name === "Object" && (u = u.$dup(), u["$[]="]("attributes", e(re)));
    }
    return u;
  }, s = function(u) {
    const se = function(ke) {
      return Object.assign(
        {},
        ke.basebackend ? { basebackend: ke.basebackend } : {},
        ke.outfilesuffix ? { outfilesuffix: ke.outfilesuffix } : {},
        ke.filetype ? { filetype: ke.filetype } : {},
        ke.htmlsyntax ? { htmlsyntax: ke.htmlsyntax } : {},
        ke.supports_templates ? { supports_templates: ke.supports_templates } : {}
      );
    }, re = function(ke, O) {
      ke.backend_traits ? O.backend_traits = e(ke.backend_traits) : ke.backendTraits ? O.backend_traits = e(ke.backendTraits) : (ke.basebackend || ke.outfilesuffix || ke.filetype || ke.htmlsyntax || ke.supports_templates) && (O.backend_traits = e(se(ke)));
    }, W = function(ke, O) {
      Be(ke, O, "$handles?", "handles", function() {
        return !0;
      });
    }, $e = function(ke, O) {
      Be(ke, O, "$composed", "composed");
    }, S = function(ke, O) {
      Be(ke, O, "$==", "==", function(Ke) {
        return O === Ke;
      });
    }, Z = function(ke, O) {
      Be(ke, O, "$send", "send", function(Ke) {
        const [, ...xe] = Array.from(arguments), He = O["$" + Ke];
        if (He)
          return He.apply(O, xe);
        throw new Error(`undefined method \`${Ke}\` for \`${O.toString()}\``);
      });
    }, Be = function(ke, O, Ke, xe, He) {
      typeof ke[Ke] > "u" && (typeof ke[xe] == "function" ? O[Ke] = ke[xe] : He && (O[Ke] = He));
    }, V = function(ke) {
      typeof ke["$respond_to?"] != "function" && (ke["$respond_to?"] = function(O) {
        return typeof this[O] == "function";
      });
    };
    if (typeof u == "function") {
      const ke = o(it, u.constructor.name, {
        initialize: function(O, Ke) {
          const xe = this, He = new u(O, Ke);
          Object.assign(this, He), re(He, xe);
          const De = Object.getOwnPropertyNames(u.prototype);
          for (let Fe = 0; Fe < De.length; Fe++) {
            const ot = De[Fe];
            ot !== "constructor" && (xe[ot] = He[ot]);
          }
          typeof He.$convert > "u" && typeof He.convert == "function" && (xe.$convert = He.convert), W(He, xe), $e(He, xe), V(xe), xe.super(O, Ke);
        }
      });
      return ke.$extend(dt), ke;
    }
    if (typeof u == "object") {
      if (typeof u.$convert > "u" && typeof u.convert == "function" && (u.$convert = u.convert), re(u, u), u.backend_traits) {
        const ke = [
          "basebackend",
          "filetype",
          "htmlsyntax",
          "outfilesuffix",
          "supports_templates",
          "supports_templates?",
          "init_backend_traits",
          "backend_traits"
        ];
        for (const O of ke)
          u["$" + O] = dt.prototype["$" + O];
        u.$$meta = dt;
      }
      return W(u, u), $e(u, u), S(u, u), Z(u, u), V(u), u;
    }
    return u;
  };
  function o(u, se, re, W, $e) {
    const S = Opal.klass(Opal.Object, u, se, function() {
    });
    let Z, Be, V;
    const ke = {};
    for (const xe in re)
      Object.prototype.hasOwnProperty.call(re, xe) && function(He) {
        const De = re[He];
        if (He === "postConstruct")
          Z = De;
        else if (He === "initialize")
          Be = De;
        else if (He === "constructor")
          V = De;
        else {
          W && Object.prototype.hasOwnProperty.call(W, He) && (ke[He] = !0);
          let Fe;
          Opal.def(S, "$" + He, Fe = function() {
            let ot;
            $e && Object.prototype.hasOwnProperty.call($e, He) ? ot = $e[He](arguments) : ot = arguments;
            const Ge = Fe.$$p;
            return Ge && (ot[ot.length] = function() {
              return Opal.yield1(Ge);
            }, ot.length += 1, Fe.$$p = null), De.apply(this, ot);
          });
        }
      }(xe);
    let O;
    typeof V == "function" ? O = function() {
      const xe = Array.from(arguments);
      for (let De = 0; De < xe.length; De++)
        typeof xe[De] == "object" && "$$smap" in xe[De] && (xe[De] = r(xe[De]));
      xe.unshift(null);
      const He = new (Function.prototype.bind.apply(V, xe))();
      Object.assign(this, He), typeof Z == "function" && Z.bind(this)();
    } : typeof Be == "function" ? O = function() {
      const xe = Array.from(arguments);
      for (let He = 0; He < xe.length; He++)
        typeof xe[He] == "object" && "$$smap" in xe[He] && (xe[He] = r(xe[He]));
      Be.apply(this, xe), typeof Z == "function" && Z.bind(this)();
    } : O = function() {
      Opal.send(this, Opal.find_super_dispatcher(this, "initialize", O)), typeof Z == "function" && Z.bind(this)();
    }, Opal.def(S, "$initialize", O);
    let Ke;
    Opal.def(S, "super", Ke = function(xe) {
      if (typeof xe == "function")
        Opal.send(this, Opal.find_super_dispatcher(this, xe.name, xe));
      else {
        const He = Array.from(arguments);
        for (let De = 0; De < He.length; De++)
          typeof He[De] == "object" && (He[De] = e(He[De]));
        Opal.send(this, Opal.find_super_dispatcher(this, "initialize", O), He);
      }
    });
    for (const xe in re)
      Ke[xe] = function() {
        const He = Array.from(arguments);
        for (let Fe = 0; Fe < He.length; Fe++)
          typeof He[Fe] == "object" && typeof He[Fe].constructor == "function" && He[Fe].constructor.name === "Object" && (He[Fe] = e(He[Fe]));
        const De = S.$$prototype;
        return Opal.send(De, Opal.find_super_dispatcher(De, xe, De[`$${xe}`]), He);
      };
    if (W)
      for (const xe in W)
        Object.prototype.hasOwnProperty.call(W, xe) && !Object.prototype.hasOwnProperty.call(ke, xe) && function(He) {
          const De = W[He];
          Opal.def(S, "$" + He, function() {
            return De.apply(this, arguments);
          });
        }(xe);
    return S;
  }
  const a = Opal.Asciidoctor.$$class;
  a.prototype.getCoreVersion = function() {
    return this.$$const.VERSION;
  }, a.prototype.getRuntime = function() {
    return {
      ioModule: Opal.const_get_qualified("::", "JAVASCRIPT_IO_MODULE"),
      platform: Opal.const_get_qualified("::", "JAVASCRIPT_PLATFORM"),
      engine: Opal.const_get_qualified("::", "JAVASCRIPT_ENGINE"),
      framework: Opal.const_get_qualified("::", "JAVASCRIPT_FRAMEWORK")
    };
  }, a.prototype.convert = function(u, se) {
    typeof u == "object" && u.constructor.name === "Buffer" && (u = u.toString("utf8"));
    const re = se && se.to_file;
    typeof re == "object" && re.constructor.name === "Writable" && typeof re.write == "function" && (re["$respond_to?"] = (S) => S === "write", re.$object_id = () => "", re.$write = function(S) {
      this.write(S);
    });
    const W = i(se), $e = this.$convert(u, W);
    return typeof re == "object" && re.constructor.name === "Writable" && typeof re.end == "function" && re.end(), $e === Opal.nil ? "" : $e;
  }, a.prototype.convertFile = function(u, se) {
    return this.$convert_file(u, i(se));
  }, a.prototype.load = function(u, se) {
    return typeof u == "object" && u.constructor.name === "Buffer" && (u = u.toString("utf8")), this.$load(u, i(se));
  }, a.prototype.loadFile = function(u, se) {
    return this.$load_file(u, i(se));
  };
  const l = Opal.Asciidoctor.AbstractBlock;
  l.prototype.getContentModel = function() {
    const u = this.content_model;
    return u === Opal.nil ? void 0 : u;
  }, l.prototype.setContentModel = function(u) {
    this.content_model = u;
  }, l.prototype.append = function(u) {
    return this.$append(u), this;
  }, l.prototype.getTitle = function() {
    const u = this.$title();
    return u === Opal.nil ? void 0 : u;
  }, l.prototype.setTitle = function(u) {
    return u = typeof u > "u" ? Opal.nil : u, this["$title="](u);
  }, l.prototype.assignCaption = function(u, se) {
    u = typeof u > "u" ? Opal.nil : u, se = typeof se > "u" ? null : se, this.$assign_caption(u, se);
  }, l.prototype.getCaptionedTitle = function() {
    return this.$captioned_title();
  }, l.prototype.getStyle = function() {
    const u = this.style;
    return u === Opal.nil ? void 0 : u;
  }, l.prototype.setStyle = function(u) {
    this.style = u;
  }, l.prototype.getSourceLocation = function() {
    const u = this.source_location;
    if (u !== Opal.nil)
      return u.getFile = function() {
        const se = this.file;
        return se === Opal.nil ? void 0 : se;
      }, u.getDirectory = function() {
        const se = this.dir;
        return se === Opal.nil ? void 0 : se;
      }, u.getPath = function() {
        const se = this.path;
        return se === Opal.nil ? void 0 : se;
      }, u.getLineNumber = function() {
        const se = this.lineno;
        return se === Opal.nil ? void 0 : se;
      }, u;
  }, l.prototype.getCaption = function() {
    const u = this.$caption();
    return u === Opal.nil ? void 0 : u;
  }, l.prototype.setCaption = function(u) {
    this.caption = typeof u > "u" ? Opal.nil : u;
  }, l.prototype.getLevel = function() {
    const u = this.level;
    return u === Opal.nil ? void 0 : u;
  }, l.prototype.getSubstitutions = function() {
    return this.subs;
  }, l.prototype.hasSubstitution = function(u) {
    return this["$sub?"](u);
  }, l.prototype.removeSubstitution = function(u) {
    this.$remove_sub(u);
  }, l.prototype.hasBlocks = function() {
    return this.blocks.length > 0;
  }, l.prototype.getBlocks = function() {
    return this.blocks;
  }, l.prototype.getContent = function() {
    const u = this.$content();
    return u === Opal.nil ? void 0 : u;
  }, l.prototype.convert = function() {
    return this.$convert();
  }, l.prototype.findBy = function(u, se) {
    return typeof se > "u" && typeof u == "function" ? Opal.send(this, "find_by", null, u) : typeof se == "function" ? Opal.send(this, "find_by", [e(u)], se) : this.$find_by(e(u));
  }, l.prototype.getLineNumber = function() {
    const u = this.$lineno();
    return u === Opal.nil ? void 0 : u;
  }, l.prototype.hasSections = function() {
    return this.next_section_index !== Opal.nil && this.next_section_index > 0;
  }, l.prototype.getSections = function() {
    return this.$sections();
  }, l.prototype.getNumeral = function() {
    const u = this.$numeral();
    return u === Opal.nil ? void 0 : u;
  }, l.prototype.setNumeral = function(u) {
    this["$numeral="](u);
  }, l.prototype.hasTitle = function() {
    return this["$title?"]();
  }, l.prototype.getAlt = function() {
    return this.$alt();
  };
  const c = Opal.Asciidoctor.Section;
  c.create = function(u, se, re, W) {
    return W && W.attributes && (W.attributes = e(W.attributes)), this.$new(u, se, re, e(W));
  }, c.prototype.setLevel = function(u) {
    this.level = u;
  }, c.prototype.getIndex = function() {
    return this.index;
  }, c.prototype.setIndex = function(u) {
    this.index = u;
  }, c.prototype.getSectionName = function() {
    const u = this.sectname;
    return u === Opal.nil ? void 0 : u;
  }, c.prototype.setSectionName = function(u) {
    this.sectname = u;
  }, c.prototype.getSectionNumeral = function() {
    return this.$sectnum();
  }, c.prototype.getSectionNumber = c.prototype.getSectionNumeral, c.prototype.isSpecial = function() {
    return this.special;
  }, c.prototype.setSpecial = function(u) {
    this.special = u;
  }, c.prototype.isNumbered = function() {
    return this.numbered;
  }, c.prototype.getCaption = function() {
    const u = this.caption;
    return u === Opal.nil ? void 0 : u;
  }, c.prototype.getName = function() {
    return this.getTitle();
  };
  const f = Opal.Asciidoctor.Block;
  f.create = function(u, se, re) {
    return re && re.attributes && (re.attributes = e(re.attributes)), this.$new(u, se, e(re));
  }, f.prototype.getSource = function() {
    return this.$source();
  }, f.prototype.getSourceLines = function() {
    return this.lines;
  };
  const m = Opal.Asciidoctor.AbstractNode;
  m.prototype.applySubstitutions = function(u, se) {
    return this.$apply_subs(u, se);
  }, m.prototype.resolveSubstitutions = function(u, se, re, W) {
    typeof se > "u" && (se = "block"), typeof re > "u" && (re = Opal.nil), typeof W > "u" && (W = Opal.nil);
    const $e = this.$resolve_subs(u, se, re, W);
    return $e === Opal.nil ? void 0 : $e;
  }, m.prototype.resolveBlockSubstitutions = function(u, se, re) {
    return this.resolveSubstitutions(u, "block", se, re);
  }, m.prototype.resolvePassSubstitutions = function(u) {
    return this.resolveSubstitutions(u, "inline", void 0, "passthrough macro");
  }, m.prototype.getNodeName = function() {
    return this.node_name;
  }, m.prototype.getAttributes = function() {
    return r(this.attributes);
  }, m.prototype.getAttribute = function(u, se, re) {
    const W = this.$attr(u, se, re);
    return W === Opal.nil ? void 0 : W;
  }, m.prototype.hasAttribute = function(u) {
    return u in this.attributes.$$smap;
  }, m.prototype.isAttribute = function(u, se, re) {
    return this["$attr?"](u, se, re);
  }, m.prototype.setAttribute = function(u, se, re) {
    return typeof re > "u" && (re = !0), this.$set_attr(u, se, re);
  }, m.prototype.removeAttribute = function(u) {
    const se = this.$remove_attr(u);
    return se === Opal.nil ? void 0 : se;
  }, m.prototype.getDocument = function() {
    return this.document;
  }, m.prototype.getParent = function() {
    const u = this.parent;
    return u === Opal.nil ? void 0 : u;
  }, m.prototype.isInline = function() {
    return this["$inline?"]();
  }, m.prototype.isBlock = function() {
    return this["$block?"]();
  }, m.prototype.isRole = function(u) {
    return this["$role?"](u);
  }, m.prototype.getRole = function() {
    const u = this.$role();
    return u === Opal.nil ? void 0 : u;
  }, m.prototype.setRole = function(u) {
    return Array.isArray(u) || typeof u == "string" && arguments.length === 1 ? this["$role="](u) : this["$role="](Array.from(arguments));
  }, m.prototype.hasRole = function(u) {
    return this["$has_role?"](u);
  }, m.prototype.getRoles = function() {
    return this.$roles();
  }, m.prototype.addRole = function(u) {
    return this.$add_role(u);
  }, m.prototype.removeRole = function(u) {
    return this.$remove_role(u);
  }, m.prototype.isReftext = function() {
    return this["$reftext?"]();
  }, m.prototype.getReftext = function() {
    const u = this.$reftext();
    return u === Opal.nil ? void 0 : u;
  }, m.prototype.getContext = function() {
    const u = this.context;
    return typeof u == "string" ? u : u.toString();
  }, m.prototype.getId = function() {
    const u = this.id;
    return u === Opal.nil ? void 0 : u;
  }, m.prototype.setId = function(u) {
    this.id = u;
  }, m.prototype.isOption = function(u) {
    return this["$option?"](u);
  }, m.prototype.setOption = function(u) {
    return this.$set_option(u);
  }, m.prototype.getIconUri = function(u) {
    return this.$icon_uri(u);
  }, m.prototype.getMediaUri = function(u, se) {
    return this.$media_uri(u, se);
  }, m.prototype.getImageUri = function(u, se) {
    return this.$image_uri(u, se);
  }, m.prototype.getConverter = function() {
    return this.$converter();
  }, m.prototype.readContents = function(u, se) {
    return this.$read_contents(u, e(se));
  }, m.prototype.readAsset = function(u, se) {
    const re = this.$read_asset(u, e(se));
    return re === Opal.nil ? void 0 : re;
  }, m.prototype.normalizeWebPath = function(u, se, re) {
    return this.$normalize_web_path(u, se, re);
  }, m.prototype.normalizeSystemPath = function(u, se, re, W) {
    return this.$normalize_system_path(u, se, re, e(W));
  }, m.prototype.normalizeAssetPath = function(u, se, re) {
    return this.$normalize_asset_path(u, se, re);
  };
  const b = Opal.Asciidoctor.Document;
  b.prototype.append = function(u) {
    return this["$<<"](u), this;
  }, b.prototype.getSyntaxHighlighter = function() {
    const u = this.syntax_highlighter, se = u.__proto__;
    return se && (typeof se["$highlight?"] == "function" && (se.handlesHighlighting = function() {
      const re = se["$highlight?"]();
      return re === Opal.nil ? !1 : re;
    }), typeof se["$docinfo?"] == "function" && (se.hasDocinfo = se["$docinfo?"]), typeof se.$format == "function" && (se.format = function(re, W, $e) {
      return this.$format(re, W, e($e));
    }), typeof se.$docinfo == "function" && (se.docinfo = function(re, W, $e) {
      return this.$docinfo(re, W, e($e));
    })), u;
  }, b.prototype.getRefs = function() {
    return r(this.catalog.$$smap.refs);
  }, b.prototype.getImages = function() {
    return this.catalog.$$smap.images;
  }, b.prototype.getLinks = function() {
    return this.catalog.$$smap.links;
  }, b.prototype.hasFootnotes = function() {
    return this["$footnotes?"]();
  }, b.prototype.getFootnotes = function() {
    return this.$footnotes();
  }, b.prototype.getHeader = function() {
    return this.header;
  }, b.prototype.setAttribute = function(u, se) {
    return this.$set_attribute(u, se);
  }, b.prototype.removeAttribute = function(u) {
    this.attributes.$delete(u), this.attribute_overrides.$delete(u);
  }, b.prototype.convert = function(u) {
    const se = this.$convert(e(u));
    return se === Opal.nil ? "" : se;
  }, b.prototype.write = function(u, se) {
    return this.$write(u, se);
  }, b.prototype.getAuthor = function() {
    return this.$author();
  }, b.prototype.getSource = function() {
    return this.$source();
  }, b.prototype.getSourceLines = function() {
    return this.$source_lines();
  }, b.prototype.isNested = function() {
    return this["$nested?"]();
  }, b.prototype.isEmbedded = function() {
    return this["$embedded?"]();
  }, b.prototype.hasExtensions = function() {
    return this["$extensions?"]();
  }, b.prototype.getDoctype = function() {
    return this.doctype;
  }, b.prototype.getBackend = function() {
    return this.backend;
  }, b.prototype.isBasebackend = function(u) {
    return this["$basebackend?"](u);
  }, b.prototype.getTitle = function() {
    const u = this.$title();
    return u === Opal.nil ? void 0 : u;
  }, b.prototype.setTitle = function(u) {
    return this["$title="](u);
  }, b.prototype.getDocumentTitle = function(u) {
    const se = this.$doctitle(e(u));
    return se === Opal.nil ? void 0 : se;
  }, b.prototype.getDoctitle = b.prototype.getDocumentTitle, b.prototype.getCatalog = function() {
    return r(this.catalog);
  }, b.prototype.getReferences = b.prototype.getCatalog, b.prototype.getRevisionDate = function() {
    return this.getAttribute("revdate");
  }, b.prototype.getRevdate = function() {
    return this.getRevisionDate();
  }, b.prototype.getRevisionNumber = function() {
    return this.getAttribute("revnumber");
  }, b.prototype.getRevisionRemark = function() {
    return this.getAttribute("revremark");
  }, b.prototype.setHeaderAttribute = function(u, se, re) {
    return typeof re > "u" && (re = !0), typeof se > "u" && (se = ""), this.$set_header_attribute(u, se, re);
  }, b.prototype.getAuthors = function() {
    return this.$authors();
  };
  const C = b.Footnote;
  C.prototype.getIndex = function() {
    const u = this.$$data.index;
    return u === Opal.nil ? void 0 : u;
  }, C.prototype.getId = function() {
    const u = this.$$data.id;
    return u === Opal.nil ? void 0 : u;
  }, C.prototype.getText = function() {
    const u = this.$$data.text;
    return u === Opal.nil ? void 0 : u;
  };
  const N = b.ImageReference;
  N.prototype.getTarget = function() {
    return this.$$data.target;
  }, N.prototype.getImagesDirectory = function() {
    const u = this.$$data.imagesdir;
    return u === Opal.nil ? void 0 : u;
  };
  const z = b.Author;
  z.prototype.getName = function() {
    const u = this.$$data.name;
    return u === Opal.nil ? void 0 : u;
  }, z.prototype.getFirstName = function() {
    const u = this.$$data.firstname;
    return u === Opal.nil ? void 0 : u;
  }, z.prototype.getMiddleName = function() {
    const u = this.$$data.middlename;
    return u === Opal.nil ? void 0 : u;
  }, z.prototype.getLastName = function() {
    const u = this.$$data.lastname;
    return u === Opal.nil ? void 0 : u;
  }, z.prototype.getInitials = function() {
    const u = this.$$data.initials;
    return u === Opal.nil ? void 0 : u;
  }, z.prototype.getEmail = function() {
    const u = this.$$data.email;
    return u === Opal.nil ? void 0 : u;
  }, b.RevisionInfo = function(u, se, re) {
    this.date = u, this.number = se, this.remark = re;
  };
  const A = b.RevisionInfo;
  A.prototype.getDate = function() {
    return this.date;
  }, A.prototype.getNumber = function() {
    return this.number;
  }, A.prototype.getRemark = function() {
    return this.remark;
  }, A.prototype.isEmpty = function() {
    return this.date === void 0 && this.number === void 0 && this.remark === void 0;
  };
  const Q = Opal.Asciidoctor.SafeMode;
  Q.getValueForName = function(u) {
    return this.$value_for_name(u);
  }, Q.getNameForValue = function(u) {
    const se = this.$name_for_value(u);
    return se === Opal.nil ? void 0 : se;
  }, Q.getNames = function() {
    return this.$names();
  };
  const Te = Opal.Asciidoctor.Callouts;
  Te.create = function() {
    return this.$new();
  }, Te.prototype.register = function(u) {
    return this.$register(u);
  }, Te.prototype.readNextId = function() {
    return this.$read_next_id();
  }, Te.prototype.getCalloutIds = function(u) {
    return this.$callout_ids(u);
  }, Te.prototype.getLists = function() {
    const u = this.lists;
    if (u && u.length > 0)
      for (let se = 0; se < u.length; se++) {
        const re = u[se];
        if (re && re.length > 0)
          for (let W = 0; W < re.length; W++)
            typeof re[W] == "object" && "$$smap" in re[W] && (re[W] = r(re[W]));
      }
    return u;
  }, Te.prototype.getListIndex = function() {
    return this.list_index;
  }, Te.prototype.getCurrentList = function() {
    const u = this.$current_list();
    if (u && u.length > 0)
      for (let se = 0; se < u.length; se++)
        typeof u[se] == "object" && "$$smap" in u[se] && (u[se] = r(u[se]));
    return u;
  }, Te.prototype.nextList = function() {
    return this.$nextList();
  }, Te.prototype.rewind = function() {
    return this.$rewind();
  }, b.prototype.getRevisionInfo = function() {
    return new b.RevisionInfo(this.getRevisionDate(), this.getRevisionNumber(), this.getRevisionRemark());
  }, b.prototype.hasRevisionInfo = function() {
    return !this.getRevisionInfo().isEmpty();
  }, b.prototype.getNotitle = function() {
    return this.$notitle();
  }, b.prototype.getNoheader = function() {
    return this.$noheader();
  }, b.prototype.getNofooter = function() {
    return this.$nofooter();
  }, b.prototype.hasHeader = function() {
    return this["$header?"]();
  }, b.prototype.playbackAttributes = function(u) {
    if (u = e(u), u) {
      const se = u["$[]"]("attribute_entries");
      if (se && Array.isArray(se)) {
        const re = [];
        for (let W = 0; W < se.length; W++) {
          const $e = se[W];
          $e && typeof $e == "object" && $e.constructor.name === "Object" && ($e.$name = function() {
            return this.name;
          }, $e.$value = function() {
            return this.value;
          }, $e.$negate = function() {
            return this.negate;
          }), re.push($e);
        }
        u["$[]="]("attribute_entries", re);
      }
    }
    this.$playback_attributes(u);
  }, b.prototype.deleteAttribute = function(u) {
    return this.$delete_attribute(u);
  }, b.prototype.isAttributeLocked = function(u) {
    return this["$attribute_locked?"](u);
  }, b.prototype.restoreAttributes = function() {
    return this.$restore_attributes();
  }, b.prototype.parse = function(u) {
    return this.$parse(u);
  }, b.prototype.getDocinfo = function(u, se) {
    return this.$docinfo(u, se);
  }, b.prototype.hasDocinfoProcessors = function(u) {
    return this["$docinfo_processors?"](u);
  }, b.prototype.incrementAndStoreCounter = function(u, se) {
    return this.$increment_and_store_counter(u, se);
  }, b.prototype.counterIncrement = b.prototype.incrementAndStoreCounter, b.prototype.counter = function(u, se) {
    return this.$counter(u, se);
  }, b.prototype.getSafe = function() {
    return this.safe;
  }, b.prototype.getCompatMode = function() {
    return this.compat_mode;
  }, b.prototype.getSourcemap = function() {
    const u = this.sourcemap;
    return u === Opal.nil ? !1 : u;
  }, b.prototype.setSourcemap = function(u) {
    this.sourcemap = u;
  }, b.prototype.getCounters = function() {
    return r(this.counters);
  }, b.prototype.getCallouts = function() {
    return this.$callouts();
  }, b.prototype.getBaseDir = function() {
    return this.base_dir;
  }, b.prototype.getOptions = function() {
    return r(this.options);
  }, b.prototype.getOutfilesuffix = function() {
    return this.outfilesuffix;
  }, b.prototype.getParentDocument = function() {
    const u = this.parent_document;
    return u === Opal.nil ? void 0 : u;
  }, b.prototype.getReader = function() {
    return this.reader;
  }, b.prototype.getConverter = function() {
    return this.converter;
  }, b.prototype.getExtensions = function() {
    const u = this.extensions;
    return u === Opal.nil ? void 0 : u;
  };
  const ce = b.Title;
  ce.prototype.getMain = function() {
    return this.main;
  }, ce.prototype.getCombined = function() {
    return this.combined;
  }, ce.prototype.getSubtitle = function() {
    const u = this.subtitle;
    return u === Opal.nil ? void 0 : u;
  }, ce.prototype.isSanitized = function() {
    const u = this["$sanitized?"]();
    return u === Opal.nil ? !1 : u;
  }, ce.prototype.hasSubtitle = function() {
    return this["$subtitle?"]();
  };
  const ge = Opal.Asciidoctor.Inline;
  ge.create = function(u, se, re, W) {
    return this.$new(u, se, re, i(W));
  }, ge.prototype.convert = function() {
    return this.$convert();
  }, ge.prototype.getText = function() {
    const u = this.$text();
    return u === Opal.nil ? void 0 : u;
  }, ge.prototype.getType = function() {
    return this.$type();
  }, ge.prototype.getTarget = function() {
    const u = this.$target();
    return u === Opal.nil ? void 0 : u;
  }, ge.prototype.getAlt = function() {
    return this.$alt();
  };
  const Y = Opal.Asciidoctor.List;
  Y.prototype.hasItems = function() {
    return this["$items?"]();
  }, Y.prototype.getItems = function() {
    return this.blocks;
  };
  const fe = Opal.Asciidoctor.ListItem;
  fe.prototype.getText = function() {
    return this.$text();
  }, fe.prototype.setText = function(u) {
    return this["$text="](u);
  }, fe.prototype.hasText = function() {
    return this["$text?"]();
  }, fe.prototype.getMarker = function() {
    return this.marker;
  }, fe.prototype.setMarker = function(u) {
    this.marker = u;
  }, fe.prototype.getList = function() {
    return this.$list();
  }, fe.prototype.getParent = fe.prototype.getList;
  const ae = Opal.Asciidoctor.Reader;
  ae.prototype.pushInclude = function(u, se, re, W, $e) {
    return this.$push_include(u, se, re, W, e($e));
  }, ae.prototype.getCursor = function() {
    return this.$cursor();
  }, ae.prototype.getLines = function() {
    return this.$lines();
  }, ae.prototype.getString = function() {
    return this.$string();
  }, ae.prototype.hasMoreLines = function() {
    return this["$has_more_lines?"]();
  }, ae.prototype.isEmpty = function() {
    return this["$empty?"]();
  }, ae.prototype.peekLine = function(u) {
    u = u || !1;
    const se = this.$peek_line(u);
    return se === Opal.nil ? void 0 : se;
  }, ae.prototype.readLine = function() {
    const u = this.$read_line();
    return u === Opal.nil ? void 0 : u;
  }, ae.prototype.readLines = function() {
    return this.$read_lines();
  }, ae.prototype.read = function() {
    return this.$read();
  }, ae.prototype.advance = function() {
    return this.$advance();
  };
  const Re = Opal.Asciidoctor.Reader.Cursor;
  Re.prototype.getFile = function() {
    const u = this.file;
    return u === Opal.nil ? void 0 : u;
  }, Re.prototype.getDirectory = function() {
    const u = this.dir;
    return u === Opal.nil ? void 0 : u;
  }, Re.prototype.getPath = function() {
    const u = this.path;
    return u === Opal.nil ? void 0 : u;
  }, Re.prototype.getLineNumber = function() {
    return this.lineno;
  };
  function pe(u, se) {
    const re = Opal.const_get_qualified(Opal.Logger, "Formatter");
    return o(re, u, se, {}, {
      call: function(W) {
        for (let $e = 0; $e < W.length; $e++)
          typeof W[$e] == "object" && "$$smap" in W[$e] && (W[$e] = r(W[$e]));
        return W;
      }
    });
  }
  function Ce(u, se) {
    const re = Opal.const_get_qualified(Opal.Asciidoctor, "Logger");
    return o(re, u, se, {}, {
      add: function(W) {
        if (W.length >= 2 && typeof W[2] == "object" && "$$smap" in W[2]) {
          const $e = W[2], S = r($e);
          S.getText = function() {
            return this.text;
          }, S.getSourceLocation = function() {
            return this.source_location;
          }, S.$inspect = function() {
            const Z = this.getSourceLocation();
            return Z ? Z.getPath() + ": line " + Z.getLineNumber() + ": " + this.getText() : this.getText();
          }, W[2] = S;
        }
        return W.length >= 1 && (W[1] = W[1] === Opal.nil ? void 0 : W[1]), W;
      }
    });
  }
  const J = Opal.const_get_qualified(Opal.Asciidoctor, "LoggerManager", !0);
  Opal.Asciidoctor.LoggerManager = J, J.getLogger = function() {
    return this.$logger();
  }, J.setLogger = function(u) {
    this["$logger="](u);
  }, J.newLogger = function(u, se) {
    return Ce(u, se).$new();
  }, J.newFormatter = function(u, se) {
    return pe(u, se).$new();
  };
  const R = Opal.const_get_qualified(Opal.Logger, "Severity", !0);
  Opal.Asciidoctor.LoggerSeverity = R, R.get = function(u) {
    return R.$constants()[u];
  };
  const ve = Opal.const_get_qualified(Opal.Logger, "Formatter", !0);
  Opal.Asciidoctor.LoggerFormatter = ve, ve.prototype.call = function(u, se, re, W) {
    return this.$call(R.get(u), se, re, W);
  };
  const F = Opal.const_get_qualified(Opal.Asciidoctor, "MemoryLogger", !0);
  Opal.Asciidoctor.MemoryLogger = F, F.create = function() {
    return this.$new();
  }, F.prototype.getMessages = function() {
    const u = this.messages, se = [];
    for (let re = 0; re < u.length; re++) {
      const W = u[re], $e = r(W);
      typeof $e.message == "string" ? $e.getText = function() {
        return this.message;
      } : ($e.message = r($e.message), $e.getText = function() {
        return this.message.text;
      }), $e.getSeverity = function() {
        return this.severity.toString();
      }, $e.getSourceLocation = function() {
        return this.message.source_location;
      }, se.push($e);
    }
    return se;
  };
  const ne = Opal.const_get_qualified(Opal.Asciidoctor, "Logging", !0);
  Opal.Asciidoctor.Logging = ne, ne.getLogger = function() {
    return J.$logger();
  }, ne.createLogMessage = function(u, se) {
    return ne.prototype.$message_with_context(u, e(se));
  }, ae.prototype.getLogger = ne.getLogger, ae.prototype.createLogMessage = ne.createLogMessage, m.prototype.getLogger = ne.getLogger, m.prototype.createLogMessage = ne.createLogMessage;
  const H = Opal.const_get_qualified(Opal.Asciidoctor, "Logger", !0);
  Opal.Asciidoctor.Logger = H, H.prototype.getMaxSeverity = function() {
    const u = this.max_severity;
    return u === Opal.nil ? void 0 : u;
  }, H.prototype.getFormatter = function() {
    return this.formatter;
  }, H.prototype.setFormatter = function(u) {
    this.formatter = u;
  }, H.prototype.getLevel = function() {
    return this.level;
  }, H.prototype.setLevel = function(u) {
    this.level = u;
  }, H.prototype.getProgramName = function() {
    return this.progname;
  }, H.prototype.setProgramName = function(u) {
    this.progname = u;
  };
  const we = Opal.const_get_qualified("::", "Logger"), _e = function(u, se, re) {
    u["$" + se](re);
  };
  we.prototype.add = function(u, se, re) {
    const W = typeof u == "string" ? R[u.toUpperCase()] : u;
    this.$add(W, se, re);
  }, we.prototype.log = we.prototype.add, we.prototype.debug = function(u) {
    _e(this, "debug", u);
  }, we.prototype.info = function(u) {
    _e(this, "info", u);
  }, we.prototype.warn = function(u) {
    _e(this, "warn", u);
  }, we.prototype.error = function(u) {
    _e(this, "error", u);
  }, we.prototype.fatal = function(u) {
    _e(this, "fatal", u);
  }, we.prototype.isDebugEnabled = function() {
    return this["$debug?"]();
  }, we.prototype.isInfoEnabled = function() {
    return this["$info?"]();
  }, we.prototype.isWarnEnabled = function() {
    return this["$warn?"]();
  }, we.prototype.isErrorEnabled = function() {
    return this["$error?"]();
  }, we.prototype.isFatalEnabled = function() {
    return this["$fatal?"]();
  };
  const X = Opal.const_get_qualified(Opal.Asciidoctor, "NullLogger", !0);
  Opal.Asciidoctor.NullLogger = X, X.create = function() {
    return this.$new();
  }, X.prototype.getMaxSeverity = function() {
    return this.max_severity;
  }, Opal.Asciidoctor.StopIteration = Opal.StopIteration;
  const w = Opal.const_get_qualified(Opal.Asciidoctor, "Timings", !0);
  Opal.Asciidoctor.Timings = w, w.create = function() {
    return this.$new();
  }, w.prototype.printReport = function(u, se) {
    let re;
    if (u)
      if (typeof u.$add == "function")
        re = function(W) {
          u.$add(1, W);
        };
      else if (typeof u.log == "function")
        re = u.log;
      else if (typeof u.write == "function")
        re = function(W) {
          u.write(W, "utf-8");
        };
      else
        throw new Error("The output should be a Stream (with a write function), an object with a log function or a Ruby Logger (with a add function)");
    else
      re = function(W) {
        Opal.gvars.stdout.$write(W);
      };
    se && re("Input file: " + se), re(" Time to read and parse source: " + this.$read_parse().toFixed(2)), re(" Time to convert document: " + this.$convert().toFixed(2)), re(" Total time (read, parse and convert): " + this.$read_parse_convert().toFixed(2));
  };
  const h = Opal.const_get_qualified(Opal.Asciidoctor, "SyntaxHighlighter", !0);
  Opal.Asciidoctor.SyntaxHighlighter = h, h.register = function(u, se) {
    const re = typeof u == "string" ? u : u[0];
    if (typeof se == "function") {
      const S = se.prototype, Z = Object.getOwnPropertyNames(S);
      se = {};
      for (const Be in Z) {
        const V = Z[Be];
        se[V] = S[V];
      }
    }
    const W = o(d, re, se, {}, {
      format: function($e) {
        return $e.length >= 2 && typeof $e[2] == "object" && "$$smap" in $e[2] && ($e[2] = r($e[2])), $e.length >= 1 && ($e[1] = $e[1] === Opal.nil ? void 0 : $e[1]), $e;
      },
      highlight: function($e) {
        if ($e.length >= 3 && typeof $e[3] == "object" && "$$smap" in $e[3]) {
          let S = $e[3];
          S = r(S);
          for (const Z in S) {
            const Be = S[Z];
            if (Z === "callouts") {
              const V = n(Be);
              for (const ke in V) {
                const O = V[ke];
                for (let Ke = 0; Ke < O.length; Ke++) {
                  const xe = O[Ke];
                  for (let He = 0; He < xe.length; He++)
                    xe[He] = xe[He] === Opal.nil ? void 0 : xe[He];
                }
              }
              S[Z] = V;
            } else
              S[Z] = Be === Opal.nil ? void 0 : Be;
          }
          $e[3] = S;
        }
        return $e.length >= 2 && ($e[2] = $e[2] === Opal.nil ? void 0 : $e[2]), $e;
      }
    });
    for (const $e in se)
      Object.prototype.hasOwnProperty.call(se, $e) && function(S) {
        const Z = se[S];
        S === "handlesHighlighting" ? Opal.def(W, "$highlight?", function() {
          return Z.call();
        }) : S === "hasDocinfo" && Opal.def(W, "$docinfo?", function(Be) {
          return Z.apply(this, [Be]);
        });
      }($e);
    return Opal.def(W, "$name", function() {
      return re;
    }), h.$register(W, u), W;
  }, h.get = function(u) {
    const se = h.$for(u);
    return se === Opal.nil ? void 0 : se;
  }, h.for = h.get;
  const d = Opal.const_get_qualified(h, "Base", !0);
  Opal.Asciidoctor.SyntaxHighlighterBase = d, d.prototype.registerFor = function(u) {
    h.$register(this, u);
  };
  const _ = Opal.Asciidoctor.Table;
  _.create = function(u, se) {
    return this.$new(u, e(se));
  }, _.prototype.getCaption = function() {
    return this.caption;
  }, _.prototype.getRows = function() {
    return this.rows;
  }, _.prototype.getColumns = function() {
    return this.columns;
  }, _.prototype.getHeadRows = function() {
    return this.rows.head;
  }, _.prototype.hasHeadRows = function() {
    return this.rows !== Opal.nil && this.rows.head.length > 0;
  }, _.prototype.getBodyRows = function() {
    return this.rows.body;
  }, _.prototype.hasBodyRows = function() {
    return this.rows !== Opal.nil && this.rows.body.length > 0;
  }, _.prototype.getFootRows = function() {
    return this.rows.foot;
  }, _.prototype.hasFootRows = function() {
    return this.rows !== Opal.nil && this.rows.foot.length > 0;
  }, _.prototype.hasHeaderOption = function() {
    return this.has_header_option;
  }, _.prototype.hasFooterOption = function() {
    return this.isOption("footer");
  }, _.prototype.hasAutowidthOption = function() {
    return this.isOption("autowidth");
  }, _.prototype.getRowCount = function() {
    return this.getAttribute("rowcount");
  }, _.prototype.setRowCount = function(u) {
    this.setAttribute("rowcount", u);
  }, _.prototype.getColumnCount = function() {
    return this.getAttribute("colcount");
  }, _.prototype.setColumnCount = function(u) {
    this.setAttribute("colcount", u);
  };
  const g = Opal.Asciidoctor.Table.Rows;
  g.create = function(u, se, re) {
    return this.$new(u, se, re);
  }, g.prototype.getHead = function() {
    return this.head;
  }, g.prototype.getFoot = function() {
    return this.foot;
  }, g.prototype.getBody = function() {
    return this.body;
  }, g.prototype.bySection = function() {
    return [["head", this.head], ["body", this.body], ["foot", this.foot]];
  };
  const $ = Opal.Asciidoctor.Table.Column;
  $.create = function(u, se, re) {
    return this.$new(u, se, e(re));
  }, $.prototype.getColumnNumber = function() {
    return this.getAttribute("colnumber");
  }, $.prototype.getWidth = function() {
    return this.getAttribute("width");
  }, $.prototype.getHorizontalAlign = function() {
    return this.getAttribute("halign");
  }, $.prototype.getVerticalAlign = function() {
    return this.getAttribute("valign");
  }, $.prototype.getStyle = function() {
    const u = this.style;
    return u === Opal.nil ? void 0 : u;
  };
  const I = Opal.Asciidoctor.Table.Cell;
  I.create = function(u, se, re, W) {
    return this.$new(u, se, e(re), e(W));
  }, I.prototype.getColumnSpan = function() {
    const u = this.colspan;
    return u === Opal.nil ? void 0 : u;
  }, I.prototype.setColumnSpan = function(u) {
    return this["$colspan="](u);
  }, I.prototype.getRowSpan = function() {
    const u = this.rowspan;
    return u === Opal.nil ? void 0 : u;
  }, I.prototype.setRowSpan = function(u) {
    return this["$rowspan="](u);
  }, I.prototype.getContent = function() {
    return this.$content();
  }, I.prototype.getText = function() {
    return this.$text();
  }, I.prototype.getSource = function() {
    return this.$source();
  }, I.prototype.getLines = function() {
    return this.$lines();
  }, I.prototype.getLineNumber = function() {
    const u = this.$lineno();
    return u === Opal.nil ? void 0 : u;
  }, I.prototype.getFile = function() {
    const u = this.$file();
    return u === Opal.nil ? void 0 : u;
  }, I.prototype.getStyle = function() {
    const u = this.$style();
    return u === Opal.nil ? void 0 : u;
  }, I.prototype.getColumn = function() {
    const u = this.$column();
    return u === Opal.nil ? void 0 : u;
  }, I.prototype.getWidth = function() {
    return this.getAttribute("width");
  }, I.prototype.getColumnPercentageWidth = function() {
    return this.getAttribute("colpcwidth");
  }, I.prototype.getInnerDocument = function() {
    const u = this.inner_document;
    return u === Opal.nil ? void 0 : u;
  };
  const D = Opal.Asciidoctor.Converter.TemplateConverter;
  if (D) {
    Opal.Asciidoctor.TemplateConverter = D, D.create = function(se, re, W) {
      W && W.template_cache && (W.template_cache = e(W.template_cache)), this.$new(se, re, e(W));
    }, D.getCache = function() {
      const se = r(this.caches);
      if (se) {
        if (se.scans) {
          se.scans = r(se.scans);
          for (const re in se.scans)
            se.scans[re] = r(se.scans[re]);
        }
        se.templates && (se.templates = r(se.templates));
      }
      return se;
    }, D.clearCache = function() {
      this.$clear_caches();
    }, D.prototype.convert = function(se, re, W) {
      return this.$convert(se, re, e(W));
    }, D.prototype.handles = function(se) {
      return this["$handles?"](se);
    }, D.prototype.getContentOnly = function(se) {
      return this.$content_only(se);
    }, D.prototype.skip = function(se) {
      this.$skip(se);
    }, D.prototype.getTemplates = function() {
      return r(this.$templates());
    }, D.prototype.register = function(se, re) {
      return this.$register(se, re);
    };
    const u = {};
    u.registry = {}, Opal.Asciidoctor.TemplateEngine = u, u.register = function(se, re) {
      if (typeof se == "string")
        this.registry[se] = re;
      else
        for (let W = 0; W < se.length; W++) {
          const $e = se[W];
          this.registry[$e] = re;
        }
    };
  }
  const ie = Opal.Asciidoctor.Converter.CompositeConverter;
  ie && (Opal.Asciidoctor.CompositeConverter = ie, ie.prototype.convert = function(u, se, re) {
    return this.$convert(u, se, e(re));
  }, ie.prototype.getContentOnly = function(u) {
    return this.$content_only(u);
  }, ie.prototype.skip = function(u) {
    this.$skip(u);
  }, ie.prototype.getConverters = function() {
    return this.converters;
  }, ie.prototype.getConverter = function(u) {
    const se = this.$converter_for(u);
    return se === Opal.nil ? void 0 : se;
  }, ie.prototype.findConverter = function(u) {
    return this.$find_converter(u);
  });
  const Me = Opal.const_get_qualified(Opal.Asciidoctor, "Converter");
  Opal.Asciidoctor.Converter = Me, Me.prototype.convert = function(u, se, re) {
    return this.$convert(u, se, e(re));
  }, Me.create = function(u, se) {
    return this.$create(u, e(se));
  };
  const Je = Opal.Asciidoctor.Converter.Factory, it = Opal.Asciidoctor.Converter.Base;
  Opal.Asciidoctor.ConverterFactory = Je;
  const dt = Opal.Asciidoctor.Converter.BackendTraits;
  Opal.Asciidoctor.ConverterBackendTraits = dt, Je.register = function(u, se) {
    const re = [s(u)].concat(se);
    return Me.$register.apply(Me, re);
  }, Je.getDefault = function(u) {
    return this.$default(u);
  }, Je.prototype.create = function(u, se) {
    return this.$create(u, e(se));
  }, Je.getRegistry = function() {
    return r(Me.$registry());
  }, Je.for = function(u) {
    const se = Me.$for(u);
    return se === Opal.nil ? void 0 : se;
  }, Je.unregisterAll = function() {
    const u = Me.DefaultFactory.$$cvars["@@registry"];
    Me.DefaultFactory.$$cvars["@@registry"] = e({ html5: u["$[]"]("html5") });
  };
  const St = Opal.Asciidoctor.Converter.Html5Converter;
  Opal.Asciidoctor.Html5Converter = St, St.create = function() {
    return this.$new();
  }, St.prototype.convert = function(u, se, re) {
    return this.$convert(u, se, re);
  };
  const gt = function(u) {
    return u.$$arity = u.length, u;
  }, wt = function(u, se, re, W) {
    return typeof re == "object" || re.$$is_class ? u["$" + se](re, W) : Opal.send(u, se, W && [W], gt(re));
  }, bt = Opal.const_get_qualified(Opal.Asciidoctor, "Extensions");
  Opal.Asciidoctor.Extensions = bt, bt.create = function(u, se) {
    return typeof u == "function" && typeof se > "u" ? Opal.send(this, "create", null, gt(u)) : typeof se == "function" ? Opal.send(this, "create", [u], gt(se)) : this.$create();
  }, bt.register = function(u, se) {
    return typeof u == "function" && typeof se > "u" ? Opal.send(this, "register", null, gt(u)) : Opal.send(this, "register", [u], gt(se));
  }, bt.getGroups = function() {
    return r(this.$groups());
  }, bt.unregisterAll = function() {
    this.$unregister_all();
  }, bt.unregister = function() {
    const u = Array.prototype.concat.apply([], arguments), se = this.$groups(), re = {};
    let W = 0;
    const $e = se.$$keys;
    for (; W < $e.length; W++) {
      const S = $e[W];
      re[S.toString()] = S;
    }
    for (let S = 0; S < u.length; S++) {
      const Z = u[S];
      Z in re && Opal.hash_delete(se, re[Z]);
    }
  };
  const Tt = bt.Registry;
  Tt.prototype.getGroups = bt.getGroups, Tt.prototype.unregisterAll = function() {
    this.groups = Opal.hash();
  }, Tt.prototype.unregister = bt.unregister, Tt.prototype.prefer = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), typeof se == "object" || se.$$is_class ? this.$prefer(u, se) : Opal.send(this, "prefer", u && [u], gt(se));
  }, Tt.prototype.block = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), wt(this, "block", se, u);
  }, Tt.prototype.inlineMacro = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), wt(this, "inline_macro", se, u);
  }, Tt.prototype.includeProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), wt(this, "include_processor", se, u);
  }, Tt.prototype.blockMacro = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), wt(this, "block_macro", se, u);
  }, Tt.prototype.treeProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), wt(this, "tree_processor", se, u);
  }, Tt.prototype.postprocessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), wt(this, "postprocessor", se, u);
  }, Tt.prototype.preprocessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), wt(this, "preprocessor", se, u);
  }, Tt.prototype.docinfoProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), wt(this, "docinfo_processor", se, u);
  }, Tt.prototype.hasPreprocessors = function() {
    return this["$preprocessors?"]();
  }, Tt.prototype.hasTreeProcessors = function() {
    return this["$tree_processors?"]();
  }, Tt.prototype.hasIncludeProcessors = function() {
    return this["$include_processors?"]();
  }, Tt.prototype.hasPostprocessors = function() {
    return this["$postprocessors?"]();
  }, Tt.prototype.hasDocinfoProcessors = function(u) {
    return this["$docinfo_processors?"](u);
  }, Tt.prototype.hasBlocks = function() {
    return this["$blocks?"]();
  }, Tt.prototype.hasBlockMacros = function() {
    return this["$block_macros?"]();
  }, Tt.prototype.hasInlineMacros = function() {
    return this["$inline_macros?"]();
  }, Tt.prototype.getPreprocessors = function() {
    return this.$preprocessors();
  }, Tt.prototype.getTreeProcessors = function() {
    return this.$tree_processors();
  }, Tt.prototype.getIncludeProcessors = function() {
    return this.$include_processors();
  }, Tt.prototype.getPostprocessors = function() {
    return this.$postprocessors();
  }, Tt.prototype.getDocinfoProcessors = function(u) {
    return this.$docinfo_processors(u);
  }, Tt.prototype.getBlocks = function() {
    return this.block_extensions.$values();
  }, Tt.prototype.getBlockMacros = function() {
    return this.block_macro_extensions.$values();
  }, Tt.prototype.getInlineMacros = function() {
    return this.$inline_macros();
  }, Tt.prototype.getInlineMacroFor = function(u) {
    const se = this["$registered_for_inline_macro?"](u);
    return se === !1 ? void 0 : se;
  }, Tt.prototype.getBlockFor = function(u, se) {
    if (typeof se > "u") {
      const W = this.$find_block_extension(u);
      return W === Opal.nil ? void 0 : W;
    }
    const re = this["$registered_for_block?"](u, se);
    return re === !1 ? void 0 : re;
  }, Tt.prototype.getBlockMacroFor = function(u) {
    const se = this["$registered_for_block_macro?"](u);
    return se === !1 ? void 0 : se;
  };
  const yt = bt.Processor;
  yt.prototype.prepend = function() {
    this.$option("position", ">>");
  }, yt.prototype.process = function(u) {
    const se = {
      apply: function(W, $e, S) {
        for (let Z = 0; Z < S.length; Z++)
          typeof S[Z] == "object" && "$$smap" in S[Z] && (S[Z] = r(S[Z]));
        return W.apply($e, S);
      }
    }, re = new Proxy(u, se);
    return Opal.send(this, "process", null, gt(re));
  }, yt.prototype.named = function(u) {
    return this.$named(u);
  }, yt.prototype.createBlock = function(u, se, re, W, $e) {
    return this.$create_block(u, se, re, e(W), e($e));
  }, yt.prototype.createList = function(u, se, re) {
    return this.$create_list(u, se, e(re));
  }, yt.prototype.createListItem = function(u, se) {
    return this.$create_list_item(u, se);
  }, yt.prototype.createImageBlock = function(u, se, re) {
    return this.$create_image_block(u, e(se), e(re));
  }, yt.prototype.createParagraph = function(u, se, re, W) {
    return this.$create_paragraph(u, se, e(re), e(W));
  }, yt.prototype.createOpenBlock = function(u, se, re, W) {
    return this.$create_open_block(u, se, e(re), e(W));
  }, yt.prototype.createExampleBlock = function(u, se, re, W) {
    return this.$create_example_block(u, se, e(re), e(W));
  }, yt.prototype.createPassBlock = function(u, se, re, W) {
    return this.$create_pass_block(u, se, e(re), e(W));
  }, yt.prototype.createListingBlock = function(u, se, re, W) {
    return this.$create_listing_block(u, se, e(re), e(W));
  }, yt.prototype.createLiteralBlock = function(u, se, re, W) {
    return this.$create_literal_block(u, se, e(re), e(W));
  }, yt.prototype.createAnchor = function(u, se, re) {
    return re && re.attributes && (re.attributes = e(re.attributes)), this.$create_anchor(u, se, e(re));
  }, yt.prototype.createInlinePass = function(u, se, re) {
    return re && re.attributes && (re.attributes = e(re.attributes)), this.$create_inline_pass(u, se, e(re));
  }, yt.prototype.createInline = function(u, se, re, W) {
    return W && W.attributes && (W.attributes = e(W.attributes)), this.$create_inline(u, se, re, e(W));
  }, yt.prototype.parseContent = function(u, se, re) {
    return this.$parse_content(u, se, e(re));
  }, yt.prototype.parseAttributes = function(u, se, re) {
    return re && re.attributes && (re.attributes = e(re.attributes)), r(this.$parse_attributes(u, se, e(re)));
  }, yt.prototype.positionalAttributes = function(u) {
    return this.$positional_attrs(u);
  }, yt.prototype.resolveAttributes = function(u) {
    return typeof u == "object" && !Array.isArray(u) ? this.$resolves_attributes(e(u)) : arguments.length > 1 ? this.$resolves_attributes(Array.prototype.slice.call(arguments)) : typeof u > "u" ? this.$resolves_attributes(Opal.nil) : this.$resolves_attributes(u);
  }, yt.prototype.resolvesAttributes = yt.prototype.resolveAttributes, yt.prototype.getConfig = function() {
    return r(this.config);
  }, yt.prototype.option = function(u, se) {
    this.$option(u, se);
  };
  const Qe = bt.BlockProcessor;
  Qe.prototype.defaultAttributes = function(u) {
    this.$default_attributes(e(u));
  }, Qe.prototype.onContext = function(u) {
    return this.$on_context(u);
  }, Qe.prototype.onContexts = function(u) {
    return this.$on_contexts(Array.prototype.slice.call(arguments));
  }, Qe.prototype.getName = function() {
    const u = this.name;
    return u === Opal.nil ? void 0 : u;
  }, Qe.prototype.parseContentAs = function(u) {
    this.$parse_content_as(u);
  };
  const Ne = bt.BlockMacroProcessor;
  Ne.prototype.defaultAttributes = function(u) {
    this.$default_attributes(e(u));
  }, Ne.prototype.getName = function() {
    const u = this.name;
    return u === Opal.nil ? void 0 : u;
  }, Ne.prototype.parseContentAs = function(u) {
    this.$parse_content_as(u);
  };
  const Le = bt.InlineMacroProcessor;
  Le.prototype.defaultAttributes = function(u) {
    this.$default_attributes(e(u));
  }, Le.prototype.getName = function() {
    const u = this.name;
    return u === Opal.nil ? void 0 : u;
  }, Le.prototype.parseContentAs = function(u) {
    this.$parse_content_as(u);
  }, Le.prototype.matchFormat = function(u) {
    this.$match_format(u);
  }, Le.prototype.match = function(u) {
    this.$match(u);
  };
  const qe = bt.IncludeProcessor;
  qe.prototype.handles = function(u) {
    return Opal.send(this, "handles?", null, gt(u));
  }, qe.prototype.prefer = function() {
    this.$prefer();
  };
  const y = bt.TreeProcessor;
  y.prototype.prefer = function() {
    this.$prefer();
  };
  const P = bt.Postprocessor;
  P.prototype.prefer = function() {
    this.$prefer();
  };
  const be = bt.Preprocessor;
  be.prototype.prefer = function() {
    this.$prefer();
  };
  const Oe = bt.DocinfoProcessor;
  Oe.prototype.prefer = function() {
    this.$prefer();
  }, Oe.prototype.atLocation = function(u) {
    this.$at_location(u);
  };
  function Ue(u, se, re) {
    const W = Opal.const_get_qualified(bt, u);
    return o(W, se, re, {
      "handles?": function() {
        return !0;
      }
    });
  }
  bt.createPostprocessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), Ue("Postprocessor", u, se);
  }, bt.newPostprocessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), this.createPostprocessor(u, se).$new();
  }, bt.createPreprocessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), Ue("Preprocessor", u, se);
  }, bt.newPreprocessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), this.createPreprocessor(u, se).$new();
  }, bt.createTreeProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), Ue("TreeProcessor", u, se);
  }, bt.newTreeProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), this.createTreeProcessor(u, se).$new();
  }, bt.createIncludeProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), Ue("IncludeProcessor", u, se);
  }, bt.newIncludeProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), this.createIncludeProcessor(u, se).$new();
  }, bt.createDocinfoProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), Ue("DocinfoProcessor", u, se);
  }, bt.newDocinfoProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), this.createDocinfoProcessor(u, se).$new();
  }, bt.createBlockProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), Ue("BlockProcessor", u, se);
  }, bt.newBlockProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), this.createBlockProcessor(u, se).$new();
  }, bt.createInlineMacroProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), Ue("InlineMacroProcessor", u, se);
  }, bt.newInlineMacroProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), this.createInlineMacroProcessor(u, se).$new();
  }, bt.createBlockMacroProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), Ue("BlockMacroProcessor", u, se);
  }, bt.newBlockMacroProcessor = function(u, se) {
    return arguments.length === 1 && (se = u, u = null), this.createBlockMacroProcessor(u, se).$new();
  };
  var Xe = "3.0.2";
  return Opal.Asciidoctor.prototype.getVersion = function() {
    return Xe;
  }, Opal.Asciidoctor;
}
const dw = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: uw
}, Symbol.toStringTag, { value: "Module" })), fw = /* @__PURE__ */ cw(dw);
var pw = fw;
const _w = /* @__PURE__ */ xa(pw);
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
let d_ = class extends hc {
  constructor(e) {
    if (super(e), this.et = ur, e.type !== ci.CHILD)
      throw Error(this.constructor.directiveName + "() can only be used in child bindings");
  }
  render(e) {
    if (e === ur || e == null)
      return this.vt = void 0, this.et = e;
    if (e === Sn)
      return e;
    if (typeof e != "string")
      throw Error(this.constructor.directiveName + "() called with a non-string value");
    if (e === this.et)
      return this.vt;
    this.et = e;
    const r = [e];
    return r.raw = r, this.vt = { _$litType$: this.constructor.resultType, strings: r, values: [] };
  }
};
d_.directiveName = "unsafeHTML", d_.resultType = 1;
const Ms = _c(d_);
function dS(t) {
  return t instanceof Map ? t.clear = t.delete = t.set = function() {
    throw new Error("map is read-only");
  } : t instanceof Set && (t.add = t.clear = t.delete = function() {
    throw new Error("set is read-only");
  }), Object.freeze(t), Object.getOwnPropertyNames(t).forEach((e) => {
    const r = t[e], n = typeof r;
    (n === "object" || n === "function") && !Object.isFrozen(r) && dS(r);
  }), t;
}
class Vm {
  /**
   * @param {CompiledMode} mode
   */
  constructor(e) {
    e.data === void 0 && (e.data = {}), this.data = e.data, this.isMatchIgnored = !1;
  }
  ignoreMatch() {
    this.isMatchIgnored = !0;
  }
}
function fS(t) {
  return t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
}
function Ai(t, ...e) {
  const r = /* @__PURE__ */ Object.create(null);
  for (const n in t)
    r[n] = t[n];
  return e.forEach(function(n) {
    for (const i in n)
      r[i] = n[i];
  }), /** @type {T} */
  r;
}
const hw = "</span>", Wm = (t) => !!t.scope, mw = (t, { prefix: e }) => {
  if (t.startsWith("language:"))
    return t.replace("language:", "language-");
  if (t.includes(".")) {
    const r = t.split(".");
    return [
      `${e}${r.shift()}`,
      ...r.map((n, i) => `${n}${"_".repeat(i + 1)}`)
    ].join(" ");
  }
  return `${e}${t}`;
};
class gw {
  /**
   * Creates a new HTMLRenderer
   *
   * @param {Tree} parseTree - the parse tree (must support `walk` API)
   * @param {{classPrefix: string}} options
   */
  constructor(e, r) {
    this.buffer = "", this.classPrefix = r.classPrefix, e.walk(this);
  }
  /**
   * Adds texts to the output stream
   *
   * @param {string} text */
  addText(e) {
    this.buffer += fS(e);
  }
  /**
   * Adds a node open to the output stream (if needed)
   *
   * @param {Node} node */
  openNode(e) {
    if (!Wm(e))
      return;
    const r = mw(
      e.scope,
      { prefix: this.classPrefix }
    );
    this.span(r);
  }
  /**
   * Adds a node close to the output stream (if needed)
   *
   * @param {Node} node */
  closeNode(e) {
    Wm(e) && (this.buffer += hw);
  }
  /**
   * returns the accumulated buffer
  */
  value() {
    return this.buffer;
  }
  // helpers
  /**
   * Builds a span element
   *
   * @param {string} className */
  span(e) {
    this.buffer += `<span class="${e}">`;
  }
}
const Km = (t = {}) => {
  const e = { children: [] };
  return Object.assign(e, t), e;
};
class Ch {
  constructor() {
    this.rootNode = Km(), this.stack = [this.rootNode];
  }
  get top() {
    return this.stack[this.stack.length - 1];
  }
  get root() {
    return this.rootNode;
  }
  /** @param {Node} node */
  add(e) {
    this.top.children.push(e);
  }
  /** @param {string} scope */
  openNode(e) {
    const r = Km({ scope: e });
    this.add(r), this.stack.push(r);
  }
  closeNode() {
    if (this.stack.length > 1)
      return this.stack.pop();
  }
  closeAllNodes() {
    for (; this.closeNode(); )
      ;
  }
  toJSON() {
    return JSON.stringify(this.rootNode, null, 4);
  }
  /**
   * @typedef { import("./html_renderer").Renderer } Renderer
   * @param {Renderer} builder
   */
  walk(e) {
    return this.constructor._walk(e, this.rootNode);
  }
  /**
   * @param {Renderer} builder
   * @param {Node} node
   */
  static _walk(e, r) {
    return typeof r == "string" ? e.addText(r) : r.children && (e.openNode(r), r.children.forEach((n) => this._walk(e, n)), e.closeNode(r)), e;
  }
  /**
   * @param {Node} node
   */
  static _collapse(e) {
    typeof e != "string" && e.children && (e.children.every((r) => typeof r == "string") ? e.children = [e.children.join("")] : e.children.forEach((r) => {
      Ch._collapse(r);
    }));
  }
}
class $w extends Ch {
  /**
   * @param {*} options
   */
  constructor(e) {
    super(), this.options = e;
  }
  /**
   * @param {string} text
   */
  addText(e) {
    e !== "" && this.add(e);
  }
  /** @param {string} scope */
  startScope(e) {
    this.openNode(e);
  }
  endScope() {
    this.closeNode();
  }
  /**
   * @param {Emitter & {root: DataNode}} emitter
   * @param {string} name
   */
  __addSublanguage(e, r) {
    const n = e.root;
    r && (n.scope = `language:${r}`), this.add(n);
  }
  toHTML() {
    return new gw(this, this.options).value();
  }
  finalize() {
    return this.closeAllNodes(), !0;
  }
}
function ra(t) {
  return t ? typeof t == "string" ? t : t.source : null;
}
function pS(t) {
  return vs("(?=", t, ")");
}
function bw(t) {
  return vs("(?:", t, ")*");
}
function Ew(t) {
  return vs("(?:", t, ")?");
}
function vs(...t) {
  return t.map((r) => ra(r)).join("");
}
function vw(t) {
  const e = t[t.length - 1];
  return typeof e == "object" && e.constructor === Object ? (t.splice(t.length - 1, 1), e) : {};
}
function wh(...t) {
  return "(" + (vw(t).capture ? "" : "?:") + t.map((n) => ra(n)).join("|") + ")";
}
function _S(t) {
  return new RegExp(t.toString() + "|").exec("").length - 1;
}
function Sw(t, e) {
  const r = t && t.exec(e);
  return r && r.index === 0;
}
const yw = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
function Ah(t, { joinWith: e }) {
  let r = 0;
  return t.map((n) => {
    r += 1;
    const i = r;
    let s = ra(n), o = "";
    for (; s.length > 0; ) {
      const a = yw.exec(s);
      if (!a) {
        o += s;
        break;
      }
      o += s.substring(0, a.index), s = s.substring(a.index + a[0].length), a[0][0] === "\\" && a[1] ? o += "\\" + String(Number(a[1]) + i) : (o += a[0], a[0] === "(" && r++);
    }
    return o;
  }).map((n) => `(${n})`).join(e);
}
const Tw = /\b\B/, hS = "[a-zA-Z]\\w*", Rh = "[a-zA-Z_]\\w*", mS = "\\b\\d+(\\.\\d+)?", gS = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)", $S = "\\b(0b[01]+)", Cw = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~", ww = (t = {}) => {
  const e = /^#![ ]*\//;
  return t.binary && (t.begin = vs(
    e,
    /.*\b/,
    t.binary,
    /\b.*/
  )), Ai({
    scope: "meta",
    begin: e,
    end: /$/,
    relevance: 0,
    /** @type {ModeCallback} */
    "on:begin": (r, n) => {
      r.index !== 0 && n.ignoreMatch();
    }
  }, t);
}, na = {
  begin: "\\\\[\\s\\S]",
  relevance: 0
}, Aw = {
  scope: "string",
  begin: "'",
  end: "'",
  illegal: "\\n",
  contains: [na]
}, Rw = {
  scope: "string",
  begin: '"',
  end: '"',
  illegal: "\\n",
  contains: [na]
}, xw = {
  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
}, mc = function(t, e, r = {}) {
  const n = Ai(
    {
      scope: "comment",
      begin: t,
      end: e,
      contains: []
    },
    r
  );
  n.contains.push({
    scope: "doctag",
    // hack to avoid the space from being included. the space is necessary to
    // match here to prevent the plain text rule below from gobbling up doctags
    begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
    excludeBegin: !0,
    relevance: 0
  });
  const i = wh(
    // list of common 1 and 2 letter words in English
    "I",
    "a",
    "is",
    "so",
    "us",
    "to",
    "at",
    "if",
    "in",
    "it",
    "on",
    // note: this is not an exhaustive list of contractions, just popular ones
    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
    // contractions - can't we'd they're let's, etc
    /[A-Za-z]+[-][a-z]+/,
    // `no-way`, etc.
    /[A-Za-z][a-z]{2,}/
    // allow capitalized words at beginning of sentences
  );
  return n.contains.push(
    {
      // TODO: how to include ", (, ) without breaking grammars that use these for
      // comment delimiters?
      // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
      // ---
      // this tries to find sequences of 3 english words in a row (without any
      // "programming" type syntax) this gives us a strong signal that we've
      // TRULY found a comment - vs perhaps scanning with the wrong language.
      // It's possible to find something that LOOKS like the start of the
      // comment - but then if there is no readable text - good chance it is a
      // false match and not a comment.
      //
      // for a visual example please see:
      // https://github.com/highlightjs/highlight.js/issues/2827
      begin: vs(
        /[ ]+/,
        // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
        "(",
        i,
        /[.]?[:]?([.][ ]|[ ])/,
        "){3}"
      )
      // look for 3 words in a row
    }
  ), n;
}, Nw = mc("//", "$"), kw = mc("/\\*", "\\*/"), Iw = mc("#", "$"), Ow = {
  scope: "number",
  begin: mS,
  relevance: 0
}, Dw = {
  scope: "number",
  begin: gS,
  relevance: 0
}, Mw = {
  scope: "number",
  begin: $S,
  relevance: 0
}, Lw = {
  scope: "regexp",
  begin: /\/(?=[^/\n]*\/)/,
  end: /\/[gimuy]*/,
  contains: [
    na,
    {
      begin: /\[/,
      end: /\]/,
      relevance: 0,
      contains: [na]
    }
  ]
}, Pw = {
  scope: "title",
  begin: hS,
  relevance: 0
}, Fw = {
  scope: "title",
  begin: Rh,
  relevance: 0
}, Bw = {
  // excludes method names from keyword processing
  begin: "\\.\\s*" + Rh,
  relevance: 0
}, Uw = function(t) {
  return Object.assign(
    t,
    {
      /** @type {ModeCallback} */
      "on:begin": (e, r) => {
        r.data._beginMatch = e[1];
      },
      /** @type {ModeCallback} */
      "on:end": (e, r) => {
        r.data._beginMatch !== e[1] && r.ignoreMatch();
      }
    }
  );
};
var Ka = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  APOS_STRING_MODE: Aw,
  BACKSLASH_ESCAPE: na,
  BINARY_NUMBER_MODE: Mw,
  BINARY_NUMBER_RE: $S,
  COMMENT: mc,
  C_BLOCK_COMMENT_MODE: kw,
  C_LINE_COMMENT_MODE: Nw,
  C_NUMBER_MODE: Dw,
  C_NUMBER_RE: gS,
  END_SAME_AS_BEGIN: Uw,
  HASH_COMMENT_MODE: Iw,
  IDENT_RE: hS,
  MATCH_NOTHING_RE: Tw,
  METHOD_GUARD: Bw,
  NUMBER_MODE: Ow,
  NUMBER_RE: mS,
  PHRASAL_WORDS_MODE: xw,
  QUOTE_STRING_MODE: Rw,
  REGEXP_MODE: Lw,
  RE_STARTERS_RE: Cw,
  SHEBANG: ww,
  TITLE_MODE: Pw,
  UNDERSCORE_IDENT_RE: Rh,
  UNDERSCORE_TITLE_MODE: Fw
});
function qw(t, e) {
  t.input[t.index - 1] === "." && e.ignoreMatch();
}
function zw(t, e) {
  t.className !== void 0 && (t.scope = t.className, delete t.className);
}
function Gw(t, e) {
  e && t.beginKeywords && (t.begin = "\\b(" + t.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)", t.__beforeBegin = qw, t.keywords = t.keywords || t.beginKeywords, delete t.beginKeywords, t.relevance === void 0 && (t.relevance = 0));
}
function Yw(t, e) {
  Array.isArray(t.illegal) && (t.illegal = wh(...t.illegal));
}
function Hw(t, e) {
  if (t.match) {
    if (t.begin || t.end)
      throw new Error("begin & end are not supported with match");
    t.begin = t.match, delete t.match;
  }
}
function Vw(t, e) {
  t.relevance === void 0 && (t.relevance = 1);
}
const Ww = (t, e) => {
  if (!t.beforeMatch)
    return;
  if (t.starts)
    throw new Error("beforeMatch cannot be used with starts");
  const r = Object.assign({}, t);
  Object.keys(t).forEach((n) => {
    delete t[n];
  }), t.keywords = r.keywords, t.begin = vs(r.beforeMatch, pS(r.begin)), t.starts = {
    relevance: 0,
    contains: [
      Object.assign(r, { endsParent: !0 })
    ]
  }, t.relevance = 0, delete r.beforeMatch;
}, Kw = [
  "of",
  "and",
  "for",
  "in",
  "not",
  "or",
  "if",
  "then",
  "parent",
  // common variable name
  "list",
  // common variable name
  "value"
  // common variable name
], Qw = "keyword";
function bS(t, e, r = Qw) {
  const n = /* @__PURE__ */ Object.create(null);
  return typeof t == "string" ? i(r, t.split(" ")) : Array.isArray(t) ? i(r, t) : Object.keys(t).forEach(function(s) {
    Object.assign(
      n,
      bS(t[s], e, s)
    );
  }), n;
  function i(s, o) {
    e && (o = o.map((a) => a.toLowerCase())), o.forEach(function(a) {
      const l = a.split("|");
      n[l[0]] = [s, jw(l[0], l[1])];
    });
  }
}
function jw(t, e) {
  return e ? Number(e) : Xw(t) ? 0 : 1;
}
function Xw(t) {
  return Kw.includes(t.toLowerCase());
}
const Qm = {}, fs = (t) => {
  console.error(t);
}, jm = (t, ...e) => {
  console.log(`WARN: ${t}`, ...e);
}, As = (t, e) => {
  Qm[`${t}/${e}`] || (console.log(`Deprecated as of ${t}. ${e}`), Qm[`${t}/${e}`] = !0);
}, Ml = new Error();
function ES(t, e, { key: r }) {
  let n = 0;
  const i = t[r], s = {}, o = {};
  for (let a = 1; a <= e.length; a++)
    o[a + n] = i[a], s[a + n] = !0, n += _S(e[a - 1]);
  t[r] = o, t[r]._emit = s, t[r]._multi = !0;
}
function Zw(t) {
  if (Array.isArray(t.begin)) {
    if (t.skip || t.excludeBegin || t.returnBegin)
      throw fs("skip, excludeBegin, returnBegin not compatible with beginScope: {}"), Ml;
    if (typeof t.beginScope != "object" || t.beginScope === null)
      throw fs("beginScope must be object"), Ml;
    ES(t, t.begin, { key: "beginScope" }), t.begin = Ah(t.begin, { joinWith: "" });
  }
}
function Jw(t) {
  if (Array.isArray(t.end)) {
    if (t.skip || t.excludeEnd || t.returnEnd)
      throw fs("skip, excludeEnd, returnEnd not compatible with endScope: {}"), Ml;
    if (typeof t.endScope != "object" || t.endScope === null)
      throw fs("endScope must be object"), Ml;
    ES(t, t.end, { key: "endScope" }), t.end = Ah(t.end, { joinWith: "" });
  }
}
function eA(t) {
  t.scope && typeof t.scope == "object" && t.scope !== null && (t.beginScope = t.scope, delete t.scope);
}
function tA(t) {
  eA(t), typeof t.beginScope == "string" && (t.beginScope = { _wrap: t.beginScope }), typeof t.endScope == "string" && (t.endScope = { _wrap: t.endScope }), Zw(t), Jw(t);
}
function rA(t) {
  function e(o, a) {
    return new RegExp(
      ra(o),
      "m" + (t.case_insensitive ? "i" : "") + (t.unicodeRegex ? "u" : "") + (a ? "g" : "")
    );
  }
  class r {
    constructor() {
      this.matchIndexes = {}, this.regexes = [], this.matchAt = 1, this.position = 0;
    }
    // @ts-ignore
    addRule(a, l) {
      l.position = this.position++, this.matchIndexes[this.matchAt] = l, this.regexes.push([l, a]), this.matchAt += _S(a) + 1;
    }
    compile() {
      this.regexes.length === 0 && (this.exec = () => null);
      const a = this.regexes.map((l) => l[1]);
      this.matcherRe = e(Ah(a, { joinWith: "|" }), !0), this.lastIndex = 0;
    }
    /** @param {string} s */
    exec(a) {
      this.matcherRe.lastIndex = this.lastIndex;
      const l = this.matcherRe.exec(a);
      if (!l)
        return null;
      const c = l.findIndex((m, b) => b > 0 && m !== void 0), f = this.matchIndexes[c];
      return l.splice(0, c), Object.assign(l, f);
    }
  }
  class n {
    constructor() {
      this.rules = [], this.multiRegexes = [], this.count = 0, this.lastIndex = 0, this.regexIndex = 0;
    }
    // @ts-ignore
    getMatcher(a) {
      if (this.multiRegexes[a])
        return this.multiRegexes[a];
      const l = new r();
      return this.rules.slice(a).forEach(([c, f]) => l.addRule(c, f)), l.compile(), this.multiRegexes[a] = l, l;
    }
    resumingScanAtSamePosition() {
      return this.regexIndex !== 0;
    }
    considerAll() {
      this.regexIndex = 0;
    }
    // @ts-ignore
    addRule(a, l) {
      this.rules.push([a, l]), l.type === "begin" && this.count++;
    }
    /** @param {string} s */
    exec(a) {
      const l = this.getMatcher(this.regexIndex);
      l.lastIndex = this.lastIndex;
      let c = l.exec(a);
      if (this.resumingScanAtSamePosition() && !(c && c.index === this.lastIndex)) {
        const f = this.getMatcher(0);
        f.lastIndex = this.lastIndex + 1, c = f.exec(a);
      }
      return c && (this.regexIndex += c.position + 1, this.regexIndex === this.count && this.considerAll()), c;
    }
  }
  function i(o) {
    const a = new n();
    return o.contains.forEach((l) => a.addRule(l.begin, { rule: l, type: "begin" })), o.terminatorEnd && a.addRule(o.terminatorEnd, { type: "end" }), o.illegal && a.addRule(o.illegal, { type: "illegal" }), a;
  }
  function s(o, a) {
    const l = (
      /** @type CompiledMode */
      o
    );
    if (o.isCompiled)
      return l;
    [
      zw,
      // do this early so compiler extensions generally don't have to worry about
      // the distinction between match/begin
      Hw,
      tA,
      Ww
    ].forEach((f) => f(o, a)), t.compilerExtensions.forEach((f) => f(o, a)), o.__beforeBegin = null, [
      Gw,
      // do this later so compiler extensions that come earlier have access to the
      // raw array if they wanted to perhaps manipulate it, etc.
      Yw,
      // default to 1 relevance if not specified
      Vw
    ].forEach((f) => f(o, a)), o.isCompiled = !0;
    let c = null;
    return typeof o.keywords == "object" && o.keywords.$pattern && (o.keywords = Object.assign({}, o.keywords), c = o.keywords.$pattern, delete o.keywords.$pattern), c = c || /\w+/, o.keywords && (o.keywords = bS(o.keywords, t.case_insensitive)), l.keywordPatternRe = e(c, !0), a && (o.begin || (o.begin = /\B|\b/), l.beginRe = e(l.begin), !o.end && !o.endsWithParent && (o.end = /\B|\b/), o.end && (l.endRe = e(l.end)), l.terminatorEnd = ra(l.end) || "", o.endsWithParent && a.terminatorEnd && (l.terminatorEnd += (o.end ? "|" : "") + a.terminatorEnd)), o.illegal && (l.illegalRe = e(
      /** @type {RegExp | string} */
      o.illegal
    )), o.contains || (o.contains = []), o.contains = [].concat(...o.contains.map(function(f) {
      return nA(f === "self" ? o : f);
    })), o.contains.forEach(function(f) {
      s(
        /** @type Mode */
        f,
        l
      );
    }), o.starts && s(o.starts, a), l.matcher = i(l), l;
  }
  if (t.compilerExtensions || (t.compilerExtensions = []), t.contains && t.contains.includes("self"))
    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
  return t.classNameAliases = Ai(t.classNameAliases || {}), s(
    /** @type Mode */
    t
  );
}
function vS(t) {
  return t ? t.endsWithParent || vS(t.starts) : !1;
}
function nA(t) {
  return t.variants && !t.cachedVariants && (t.cachedVariants = t.variants.map(function(e) {
    return Ai(t, { variants: null }, e);
  })), t.cachedVariants ? t.cachedVariants : vS(t) ? Ai(t, { starts: t.starts ? Ai(t.starts) : null }) : Object.isFrozen(t) ? Ai(t) : t;
}
var iA = "11.9.0";
class sA extends Error {
  constructor(e, r) {
    super(e), this.name = "HTMLInjectionError", this.html = r;
  }
}
const Wc = fS, Xm = Ai, Zm = Symbol("nomatch"), oA = 7, SS = function(t) {
  const e = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ Object.create(null), n = [];
  let i = !0;
  const s = "Could not find the language '{}', did you forget to load/include a language module?", o = { disableAutodetect: !0, name: "Plain text", contains: [] };
  let a = {
    ignoreUnescapedHTML: !1,
    throwUnescapedHTML: !1,
    noHighlightRe: /^(no-?highlight)$/i,
    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
    classPrefix: "hljs-",
    cssSelector: "pre code",
    languages: null,
    // beta configuration options, subject to change, welcome to discuss
    // https://github.com/highlightjs/highlight.js/issues/1086
    __emitter: $w
  };
  function l(we) {
    return a.noHighlightRe.test(we);
  }
  function c(we) {
    let _e = we.className + " ";
    _e += we.parentNode ? we.parentNode.className : "";
    const X = a.languageDetectRe.exec(_e);
    if (X) {
      const w = pe(X[1]);
      return w || (jm(s.replace("{}", X[1])), jm("Falling back to no-highlight mode for this block.", we)), w ? X[1] : "no-highlight";
    }
    return _e.split(/\s+/).find((w) => l(w) || pe(w));
  }
  function f(we, _e, X) {
    let w = "", h = "";
    typeof _e == "object" ? (w = we, X = _e.ignoreIllegals, h = _e.language) : (As("10.7.0", "highlight(lang, code, ...args) has been deprecated."), As("10.7.0", `Please use highlight(code, options) instead.
https://github.com/highlightjs/highlight.js/issues/2277`), h = we, w = _e), X === void 0 && (X = !0);
    const d = {
      code: w,
      language: h
    };
    ne("before:highlight", d);
    const _ = d.result ? d.result : m(d.language, d.code, X);
    return _.code = d.code, ne("after:highlight", _), _;
  }
  function m(we, _e, X, w) {
    const h = /* @__PURE__ */ Object.create(null);
    function d(Ue, Xe) {
      return Ue.keywords[Xe];
    }
    function _() {
      if (!Qe.keywords) {
        Le.addText(qe);
        return;
      }
      let Ue = 0;
      Qe.keywordPatternRe.lastIndex = 0;
      let Xe = Qe.keywordPatternRe.exec(qe), u = "";
      for (; Xe; ) {
        u += qe.substring(Ue, Xe.index);
        const se = bt.case_insensitive ? Xe[0].toLowerCase() : Xe[0], re = d(Qe, se);
        if (re) {
          const [W, $e] = re;
          if (Le.addText(u), u = "", h[se] = (h[se] || 0) + 1, h[se] <= oA && (y += $e), W.startsWith("_"))
            u += Xe[0];
          else {
            const S = bt.classNameAliases[W] || W;
            I(Xe[0], S);
          }
        } else
          u += Xe[0];
        Ue = Qe.keywordPatternRe.lastIndex, Xe = Qe.keywordPatternRe.exec(qe);
      }
      u += qe.substring(Ue), Le.addText(u);
    }
    function g() {
      if (qe === "")
        return;
      let Ue = null;
      if (typeof Qe.subLanguage == "string") {
        if (!e[Qe.subLanguage]) {
          Le.addText(qe);
          return;
        }
        Ue = m(Qe.subLanguage, qe, !0, Ne[Qe.subLanguage]), Ne[Qe.subLanguage] = /** @type {CompiledMode} */
        Ue._top;
      } else
        Ue = C(qe, Qe.subLanguage.length ? Qe.subLanguage : null);
      Qe.relevance > 0 && (y += Ue.relevance), Le.__addSublanguage(Ue._emitter, Ue.language);
    }
    function $() {
      Qe.subLanguage != null ? g() : _(), qe = "";
    }
    function I(Ue, Xe) {
      Ue !== "" && (Le.startScope(Xe), Le.addText(Ue), Le.endScope());
    }
    function D(Ue, Xe) {
      let u = 1;
      const se = Xe.length - 1;
      for (; u <= se; ) {
        if (!Ue._emit[u]) {
          u++;
          continue;
        }
        const re = bt.classNameAliases[Ue[u]] || Ue[u], W = Xe[u];
        re ? I(W, re) : (qe = W, _(), qe = ""), u++;
      }
    }
    function ie(Ue, Xe) {
      return Ue.scope && typeof Ue.scope == "string" && Le.openNode(bt.classNameAliases[Ue.scope] || Ue.scope), Ue.beginScope && (Ue.beginScope._wrap ? (I(qe, bt.classNameAliases[Ue.beginScope._wrap] || Ue.beginScope._wrap), qe = "") : Ue.beginScope._multi && (D(Ue.beginScope, Xe), qe = "")), Qe = Object.create(Ue, { parent: { value: Qe } }), Qe;
    }
    function Me(Ue, Xe, u) {
      let se = Sw(Ue.endRe, u);
      if (se) {
        if (Ue["on:end"]) {
          const re = new Vm(Ue);
          Ue["on:end"](Xe, re), re.isMatchIgnored && (se = !1);
        }
        if (se) {
          for (; Ue.endsParent && Ue.parent; )
            Ue = Ue.parent;
          return Ue;
        }
      }
      if (Ue.endsWithParent)
        return Me(Ue.parent, Xe, u);
    }
    function Je(Ue) {
      return Qe.matcher.regexIndex === 0 ? (qe += Ue[0], 1) : (Oe = !0, 0);
    }
    function it(Ue) {
      const Xe = Ue[0], u = Ue.rule, se = new Vm(u), re = [u.__beforeBegin, u["on:begin"]];
      for (const W of re)
        if (W && (W(Ue, se), se.isMatchIgnored))
          return Je(Xe);
      return u.skip ? qe += Xe : (u.excludeBegin && (qe += Xe), $(), !u.returnBegin && !u.excludeBegin && (qe = Xe)), ie(u, Ue), u.returnBegin ? 0 : Xe.length;
    }
    function dt(Ue) {
      const Xe = Ue[0], u = _e.substring(Ue.index), se = Me(Qe, Ue, u);
      if (!se)
        return Zm;
      const re = Qe;
      Qe.endScope && Qe.endScope._wrap ? ($(), I(Xe, Qe.endScope._wrap)) : Qe.endScope && Qe.endScope._multi ? ($(), D(Qe.endScope, Ue)) : re.skip ? qe += Xe : (re.returnEnd || re.excludeEnd || (qe += Xe), $(), re.excludeEnd && (qe = Xe));
      do
        Qe.scope && Le.closeNode(), !Qe.skip && !Qe.subLanguage && (y += Qe.relevance), Qe = Qe.parent;
      while (Qe !== se.parent);
      return se.starts && ie(se.starts, Ue), re.returnEnd ? 0 : Xe.length;
    }
    function St() {
      const Ue = [];
      for (let Xe = Qe; Xe !== bt; Xe = Xe.parent)
        Xe.scope && Ue.unshift(Xe.scope);
      Ue.forEach((Xe) => Le.openNode(Xe));
    }
    let gt = {};
    function wt(Ue, Xe) {
      const u = Xe && Xe[0];
      if (qe += Ue, u == null)
        return $(), 0;
      if (gt.type === "begin" && Xe.type === "end" && gt.index === Xe.index && u === "") {
        if (qe += _e.slice(Xe.index, Xe.index + 1), !i) {
          const se = new Error(`0 width match regex (${we})`);
          throw se.languageName = we, se.badRule = gt.rule, se;
        }
        return 1;
      }
      if (gt = Xe, Xe.type === "begin")
        return it(Xe);
      if (Xe.type === "illegal" && !X) {
        const se = new Error('Illegal lexeme "' + u + '" for mode "' + (Qe.scope || "<unnamed>") + '"');
        throw se.mode = Qe, se;
      } else if (Xe.type === "end") {
        const se = dt(Xe);
        if (se !== Zm)
          return se;
      }
      if (Xe.type === "illegal" && u === "")
        return 1;
      if (be > 1e5 && be > Xe.index * 3)
        throw new Error("potential infinite loop, way more iterations than matches");
      return qe += u, u.length;
    }
    const bt = pe(we);
    if (!bt)
      throw fs(s.replace("{}", we)), new Error('Unknown language: "' + we + '"');
    const Tt = rA(bt);
    let yt = "", Qe = w || Tt;
    const Ne = {}, Le = new a.__emitter(a);
    St();
    let qe = "", y = 0, P = 0, be = 0, Oe = !1;
    try {
      if (bt.__emitTokens)
        bt.__emitTokens(_e, Le);
      else {
        for (Qe.matcher.considerAll(); ; ) {
          be++, Oe ? Oe = !1 : Qe.matcher.considerAll(), Qe.matcher.lastIndex = P;
          const Ue = Qe.matcher.exec(_e);
          if (!Ue)
            break;
          const Xe = _e.substring(P, Ue.index), u = wt(Xe, Ue);
          P = Ue.index + u;
        }
        wt(_e.substring(P));
      }
      return Le.finalize(), yt = Le.toHTML(), {
        language: we,
        value: yt,
        relevance: y,
        illegal: !1,
        _emitter: Le,
        _top: Qe
      };
    } catch (Ue) {
      if (Ue.message && Ue.message.includes("Illegal"))
        return {
          language: we,
          value: Wc(_e),
          illegal: !0,
          relevance: 0,
          _illegalBy: {
            message: Ue.message,
            index: P,
            context: _e.slice(P - 100, P + 100),
            mode: Ue.mode,
            resultSoFar: yt
          },
          _emitter: Le
        };
      if (i)
        return {
          language: we,
          value: Wc(_e),
          illegal: !1,
          relevance: 0,
          errorRaised: Ue,
          _emitter: Le,
          _top: Qe
        };
      throw Ue;
    }
  }
  function b(we) {
    const _e = {
      value: Wc(we),
      illegal: !1,
      relevance: 0,
      _top: o,
      _emitter: new a.__emitter(a)
    };
    return _e._emitter.addText(we), _e;
  }
  function C(we, _e) {
    _e = _e || a.languages || Object.keys(e);
    const X = b(we), w = _e.filter(pe).filter(J).map(
      ($) => m($, we, !1)
    );
    w.unshift(X);
    const h = w.sort(($, I) => {
      if ($.relevance !== I.relevance)
        return I.relevance - $.relevance;
      if ($.language && I.language) {
        if (pe($.language).supersetOf === I.language)
          return 1;
        if (pe(I.language).supersetOf === $.language)
          return -1;
      }
      return 0;
    }), [d, _] = h, g = d;
    return g.secondBest = _, g;
  }
  function N(we, _e, X) {
    const w = _e && r[_e] || X;
    we.classList.add("hljs"), we.classList.add(`language-${w}`);
  }
  function z(we) {
    let _e = null;
    const X = c(we);
    if (l(X))
      return;
    if (ne(
      "before:highlightElement",
      { el: we, language: X }
    ), we.dataset.highlighted) {
      console.log("Element previously highlighted. To highlight again, first unset `dataset.highlighted`.", we);
      return;
    }
    if (we.children.length > 0 && (a.ignoreUnescapedHTML || (console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."), console.warn("https://github.com/highlightjs/highlight.js/wiki/security"), console.warn("The element with unescaped HTML:"), console.warn(we)), a.throwUnescapedHTML))
      throw new sA(
        "One of your code blocks includes unescaped HTML.",
        we.innerHTML
      );
    _e = we;
    const w = _e.textContent, h = X ? f(w, { language: X, ignoreIllegals: !0 }) : C(w);
    we.innerHTML = h.value, we.dataset.highlighted = "yes", N(we, X, h.language), we.result = {
      language: h.language,
      // TODO: remove with version 11.0
      re: h.relevance,
      relevance: h.relevance
    }, h.secondBest && (we.secondBest = {
      language: h.secondBest.language,
      relevance: h.secondBest.relevance
    }), ne("after:highlightElement", { el: we, result: h, text: w });
  }
  function A(we) {
    a = Xm(a, we);
  }
  const Q = () => {
    ge(), As("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
  };
  function Te() {
    ge(), As("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
  }
  let ce = !1;
  function ge() {
    if (document.readyState === "loading") {
      ce = !0;
      return;
    }
    document.querySelectorAll(a.cssSelector).forEach(z);
  }
  function Y() {
    ce && ge();
  }
  typeof window < "u" && window.addEventListener && window.addEventListener("DOMContentLoaded", Y, !1);
  function fe(we, _e) {
    let X = null;
    try {
      X = _e(t);
    } catch (w) {
      if (fs("Language definition for '{}' could not be registered.".replace("{}", we)), i)
        fs(w);
      else
        throw w;
      X = o;
    }
    X.name || (X.name = we), e[we] = X, X.rawDefinition = _e.bind(null, t), X.aliases && Ce(X.aliases, { languageName: we });
  }
  function ae(we) {
    delete e[we];
    for (const _e of Object.keys(r))
      r[_e] === we && delete r[_e];
  }
  function Re() {
    return Object.keys(e);
  }
  function pe(we) {
    return we = (we || "").toLowerCase(), e[we] || e[r[we]];
  }
  function Ce(we, { languageName: _e }) {
    typeof we == "string" && (we = [we]), we.forEach((X) => {
      r[X.toLowerCase()] = _e;
    });
  }
  function J(we) {
    const _e = pe(we);
    return _e && !_e.disableAutodetect;
  }
  function R(we) {
    we["before:highlightBlock"] && !we["before:highlightElement"] && (we["before:highlightElement"] = (_e) => {
      we["before:highlightBlock"](
        Object.assign({ block: _e.el }, _e)
      );
    }), we["after:highlightBlock"] && !we["after:highlightElement"] && (we["after:highlightElement"] = (_e) => {
      we["after:highlightBlock"](
        Object.assign({ block: _e.el }, _e)
      );
    });
  }
  function ve(we) {
    R(we), n.push(we);
  }
  function F(we) {
    const _e = n.indexOf(we);
    _e !== -1 && n.splice(_e, 1);
  }
  function ne(we, _e) {
    const X = we;
    n.forEach(function(w) {
      w[X] && w[X](_e);
    });
  }
  function H(we) {
    return As("10.7.0", "highlightBlock will be removed entirely in v12.0"), As("10.7.0", "Please use highlightElement now."), z(we);
  }
  Object.assign(t, {
    highlight: f,
    highlightAuto: C,
    highlightAll: ge,
    highlightElement: z,
    // TODO: Remove with v12 API
    highlightBlock: H,
    configure: A,
    initHighlighting: Q,
    initHighlightingOnLoad: Te,
    registerLanguage: fe,
    unregisterLanguage: ae,
    listLanguages: Re,
    getLanguage: pe,
    registerAliases: Ce,
    autoDetection: J,
    inherit: Xm,
    addPlugin: ve,
    removePlugin: F
  }), t.debugMode = function() {
    i = !1;
  }, t.safeMode = function() {
    i = !0;
  }, t.versionString = iA, t.regex = {
    concat: vs,
    lookahead: pS,
    either: wh,
    optional: Ew,
    anyNumberOfTimes: bw
  };
  for (const we in Ka)
    typeof Ka[we] == "object" && dS(Ka[we]);
  return Object.assign(t, Ka), t;
}, Qs = SS({});
Qs.newInstance = () => SS({});
var aA = Qs;
Qs.HighlightJS = Qs;
Qs.default = Qs;
var Kc, Jm;
function lA() {
  if (Jm)
    return Kc;
  Jm = 1;
  function t(e) {
    const r = "[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+", s = "далее " + "возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ", l = "загрузитьизфайла " + "вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ", C = "разделительстраниц разделительстрок символтабуляции " + "ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон " + "acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища " + "wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ", w = "webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля " + "автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени форматкартинки ширинаподчиненныхэлементовформы " + "виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента " + "авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных " + "использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц " + "отображениевремениэлементовпланировщика " + "типфайлаформатированногодокумента " + "обходрезультатазапроса типзаписизапроса " + "видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов " + "доступкфайлу режимдиалогавыборафайла режимоткрытияфайла " + "типизмеренияпостроителязапроса " + "видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений " + "wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs форматдатыjson экранированиесимволовjson " + "видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных использованиеусловногооформлениякомпоновкиданных " + "важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты статусразборапочтовогосообщения " + "режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации " + "расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии типхранилищасертификатовкриптографии " + "кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip режимсохраненияпутейzip уровеньсжатияzip " + "звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp " + "направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса " + "httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса типномерадокумента типномеразадачи типформы удалениедвижений " + "важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты", _ = "comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных " + "comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура фиксированноесоответствие фиксированныймассив ", g = "null истина ложь неопределено", $ = e.inherit(e.NUMBER_MODE), I = {
      className: "string",
      begin: '"|\\|',
      end: '"|$',
      contains: [{ begin: '""' }]
    }, D = {
      begin: "'",
      end: "'",
      excludeBegin: !0,
      excludeEnd: !0,
      contains: [
        {
          className: "number",
          begin: "\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}"
        }
      ]
    }, ie = e.inherit(e.C_LINE_COMMENT_MODE), Me = {
      className: "meta",
      begin: "#|&",
      end: "$",
      keywords: {
        $pattern: r,
        keyword: s + l
      },
      contains: [ie]
    }, Je = {
      className: "symbol",
      begin: "~",
      end: ";|:",
      excludeEnd: !0
    }, it = {
      className: "function",
      variants: [
        {
          begin: "процедура|функция",
          end: "\\)",
          keywords: "процедура функция"
        },
        {
          begin: "конецпроцедуры|конецфункции",
          keywords: "конецпроцедуры конецфункции"
        }
      ],
      contains: [
        {
          begin: "\\(",
          end: "\\)",
          endsParent: !0,
          contains: [
            {
              className: "params",
              begin: r,
              end: ",",
              excludeEnd: !0,
              endsWithParent: !0,
              keywords: {
                $pattern: r,
                keyword: "знач",
                literal: g
              },
              contains: [
                $,
                I,
                D
              ]
            },
            ie
          ]
        },
        e.inherit(e.TITLE_MODE, { begin: r })
      ]
    };
    return {
      name: "1C:Enterprise",
      case_insensitive: !0,
      keywords: {
        $pattern: r,
        keyword: s,
        built_in: C,
        class: w,
        type: _,
        literal: g
      },
      contains: [
        Me,
        it,
        ie,
        Je,
        $,
        I,
        D
      ]
    };
  }
  return Kc = t, Kc;
}
var Qc, eg;
function cA() {
  if (eg)
    return Qc;
  eg = 1;
  function t(e) {
    const r = e.regex, n = /^[a-zA-Z][a-zA-Z0-9-]*/, i = [
      "ALPHA",
      "BIT",
      "CHAR",
      "CR",
      "CRLF",
      "CTL",
      "DIGIT",
      "DQUOTE",
      "HEXDIG",
      "HTAB",
      "LF",
      "LWSP",
      "OCTET",
      "SP",
      "VCHAR",
      "WSP"
    ], s = e.COMMENT(/;/, /$/), o = {
      scope: "symbol",
      match: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+)?/
    }, a = {
      scope: "symbol",
      match: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+)?/
    }, l = {
      scope: "symbol",
      match: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+)?/
    }, c = {
      scope: "symbol",
      match: /%[si](?=".*")/
    }, f = {
      scope: "attribute",
      match: r.concat(n, /(?=\s*=)/)
    };
    return {
      name: "Augmented Backus-Naur Form",
      illegal: /[!@#$^&',?+~`|:]/,
      keywords: i,
      contains: [
        {
          scope: "operator",
          match: /=\/?/
        },
        f,
        s,
        o,
        a,
        l,
        c,
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE
      ]
    };
  }
  return Qc = t, Qc;
}
var jc, tg;
function uA() {
  if (tg)
    return jc;
  tg = 1;
  function t(e) {
    const r = e.regex, n = [
      "GET",
      "POST",
      "HEAD",
      "PUT",
      "DELETE",
      "CONNECT",
      "OPTIONS",
      "PATCH",
      "TRACE"
    ];
    return {
      name: "Apache Access Log",
      contains: [
        // IP
        {
          className: "number",
          begin: /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?\b/,
          relevance: 5
        },
        // Other numbers
        {
          className: "number",
          begin: /\b\d+\b/,
          relevance: 0
        },
        // Requests
        {
          className: "string",
          begin: r.concat(/"/, r.either(...n)),
          end: /"/,
          keywords: n,
          illegal: /\n/,
          relevance: 5,
          contains: [
            {
              begin: /HTTP\/[12]\.\d'/,
              relevance: 5
            }
          ]
        },
        // Dates
        {
          className: "string",
          // dates must have a certain length, this prevents matching
          // simple array accesses a[123] and [] and other common patterns
          // found in other languages
          begin: /\[\d[^\]\n]{8,}\]/,
          illegal: /\n/,
          relevance: 1
        },
        {
          className: "string",
          begin: /\[/,
          end: /\]/,
          illegal: /\n/,
          relevance: 0
        },
        // User agent / relevance boost
        {
          className: "string",
          begin: /"Mozilla\/\d\.\d \(/,
          end: /"/,
          illegal: /\n/,
          relevance: 3
        },
        // Strings
        {
          className: "string",
          begin: /"/,
          end: /"/,
          illegal: /\n/,
          relevance: 0
        }
      ]
    };
  }
  return jc = t, jc;
}
var Xc, rg;
function dA() {
  if (rg)
    return Xc;
  rg = 1;
  function t(e) {
    const r = e.regex, n = /[a-zA-Z_$][a-zA-Z0-9_$]*/, i = r.concat(
      n,
      r.concat("(\\.", n, ")*")
    ), s = /([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)/, o = {
      className: "rest_arg",
      begin: /[.]{3}/,
      end: n,
      relevance: 10
    };
    return {
      name: "ActionScript",
      aliases: ["as"],
      keywords: {
        keyword: [
          "as",
          "break",
          "case",
          "catch",
          "class",
          "const",
          "continue",
          "default",
          "delete",
          "do",
          "dynamic",
          "each",
          "else",
          "extends",
          "final",
          "finally",
          "for",
          "function",
          "get",
          "if",
          "implements",
          "import",
          "in",
          "include",
          "instanceof",
          "interface",
          "internal",
          "is",
          "namespace",
          "native",
          "new",
          "override",
          "package",
          "private",
          "protected",
          "public",
          "return",
          "set",
          "static",
          "super",
          "switch",
          "this",
          "throw",
          "try",
          "typeof",
          "use",
          "var",
          "void",
          "while",
          "with"
        ],
        literal: [
          "true",
          "false",
          "null",
          "undefined"
        ]
      },
      contains: [
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.C_NUMBER_MODE,
        {
          match: [
            /\bpackage/,
            /\s+/,
            i
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          match: [
            /\b(?:class|interface|extends|implements)/,
            /\s+/,
            n
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          className: "meta",
          beginKeywords: "import include",
          end: /;/,
          keywords: { keyword: "import include" }
        },
        {
          beginKeywords: "function",
          end: /[{;]/,
          excludeEnd: !0,
          illegal: /\S/,
          contains: [
            e.inherit(e.TITLE_MODE, { className: "title.function" }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              contains: [
                e.APOS_STRING_MODE,
                e.QUOTE_STRING_MODE,
                e.C_LINE_COMMENT_MODE,
                e.C_BLOCK_COMMENT_MODE,
                o
              ]
            },
            { begin: r.concat(/:\s*/, s) }
          ]
        },
        e.METHOD_GUARD
      ],
      illegal: /#/
    };
  }
  return Xc = t, Xc;
}
var Zc, ng;
function fA() {
  if (ng)
    return Zc;
  ng = 1;
  function t(e) {
    const r = "\\d(_|\\d)*", n = "[eE][-+]?" + r, i = r + "(\\." + r + ")?(" + n + ")?", s = "\\w+", a = "\\b(" + (r + "#" + s + "(\\." + s + ")?#(" + n + ")?") + "|" + i + ")", l = "[A-Za-z](_?[A-Za-z0-9.])*", c = `[]\\{\\}%#'"`, f = e.COMMENT("--", "$"), m = {
      // TODO: These spaces are not required by the Ada syntax
      // however, I have yet to see handwritten Ada code where
      // someone does not put spaces around :
      begin: "\\s+:\\s+",
      end: "\\s*(:=|;|\\)|=>|$)",
      // endsWithParent: true,
      // returnBegin: true,
      illegal: c,
      contains: [
        {
          // workaround to avoid highlighting
          // named loops and declare blocks
          beginKeywords: "loop for declare others",
          endsParent: !0
        },
        {
          // properly highlight all modifiers
          className: "keyword",
          beginKeywords: "not null constant access function procedure in out aliased exception"
        },
        {
          className: "type",
          begin: l,
          endsParent: !0,
          relevance: 0
        }
      ]
    };
    return {
      name: "Ada",
      case_insensitive: !0,
      keywords: {
        keyword: [
          "abort",
          "else",
          "new",
          "return",
          "abs",
          "elsif",
          "not",
          "reverse",
          "abstract",
          "end",
          "accept",
          "entry",
          "select",
          "access",
          "exception",
          "of",
          "separate",
          "aliased",
          "exit",
          "or",
          "some",
          "all",
          "others",
          "subtype",
          "and",
          "for",
          "out",
          "synchronized",
          "array",
          "function",
          "overriding",
          "at",
          "tagged",
          "generic",
          "package",
          "task",
          "begin",
          "goto",
          "pragma",
          "terminate",
          "body",
          "private",
          "then",
          "if",
          "procedure",
          "type",
          "case",
          "in",
          "protected",
          "constant",
          "interface",
          "is",
          "raise",
          "use",
          "declare",
          "range",
          "delay",
          "limited",
          "record",
          "when",
          "delta",
          "loop",
          "rem",
          "while",
          "digits",
          "renames",
          "with",
          "do",
          "mod",
          "requeue",
          "xor"
        ],
        literal: [
          "True",
          "False"
        ]
      },
      contains: [
        f,
        // strings "foobar"
        {
          className: "string",
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        // characters ''
        {
          // character literals always contain one char
          className: "string",
          begin: /'.'/
        },
        {
          // number literals
          className: "number",
          begin: a,
          relevance: 0
        },
        {
          // Attributes
          className: "symbol",
          begin: "'" + l
        },
        {
          // package definition, maybe inside generic
          className: "title",
          begin: "(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?",
          end: "(is|$)",
          keywords: "package body",
          excludeBegin: !0,
          excludeEnd: !0,
          illegal: c
        },
        {
          // function/procedure declaration/definition
          // maybe inside generic
          begin: "(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+",
          end: "(\\bis|\\bwith|\\brenames|\\)\\s*;)",
          keywords: "overriding function procedure with is renames return",
          // we need to re-match the 'function' keyword, so that
          // the title mode below matches only exactly once
          returnBegin: !0,
          contains: [
            f,
            {
              // name of the function/procedure
              className: "title",
              begin: "(\\bwith\\s+)?\\b(function|procedure)\\s+",
              end: "(\\(|\\s+|$)",
              excludeBegin: !0,
              excludeEnd: !0,
              illegal: c
            },
            // 'self'
            // // parameter types
            m,
            {
              // return type
              className: "type",
              begin: "\\breturn\\s+",
              end: "(\\s+|;|$)",
              keywords: "return",
              excludeBegin: !0,
              excludeEnd: !0,
              // we are done with functions
              endsParent: !0,
              illegal: c
            }
          ]
        },
        {
          // new type declarations
          // maybe inside generic
          className: "type",
          begin: "\\b(sub)?type\\s+",
          end: "\\s+",
          keywords: "type",
          excludeBegin: !0,
          illegal: c
        },
        // see comment above the definition
        m
        // no markup
        // relevance boosters for small snippets
        // {begin: '\\s*=>\\s*'},
        // {begin: '\\s*:=\\s*'},
        // {begin: '\\s+:=\\s+'},
      ]
    };
  }
  return Zc = t, Zc;
}
var Jc, ig;
function pA() {
  if (ig)
    return Jc;
  ig = 1;
  function t(e) {
    const r = {
      className: "built_in",
      begin: "\\b(void|bool|int8|int16|int32|int64|int|uint8|uint16|uint32|uint64|uint|string|ref|array|double|float|auto|dictionary)"
    }, n = {
      className: "symbol",
      begin: "[a-zA-Z0-9_]+@"
    }, i = {
      className: "keyword",
      begin: "<",
      end: ">",
      contains: [
        r,
        n
      ]
    };
    return r.contains = [i], n.contains = [i], {
      name: "AngelScript",
      aliases: ["asc"],
      keywords: [
        "for",
        "in|0",
        "break",
        "continue",
        "while",
        "do|0",
        "return",
        "if",
        "else",
        "case",
        "switch",
        "namespace",
        "is",
        "cast",
        "or",
        "and",
        "xor",
        "not",
        "get|0",
        "in",
        "inout|10",
        "out",
        "override",
        "set|0",
        "private",
        "public",
        "const",
        "default|0",
        "final",
        "shared",
        "external",
        "mixin|10",
        "enum",
        "typedef",
        "funcdef",
        "this",
        "super",
        "import",
        "from",
        "interface",
        "abstract|0",
        "try",
        "catch",
        "protected",
        "explicit",
        "property"
      ],
      // avoid close detection with C# and JS
      illegal: "(^using\\s+[A-Za-z0-9_\\.]+;$|\\bfunction\\s*[^\\(])",
      contains: [
        {
          // 'strings'
          className: "string",
          begin: "'",
          end: "'",
          illegal: "\\n",
          contains: [e.BACKSLASH_ESCAPE],
          relevance: 0
        },
        // """heredoc strings"""
        {
          className: "string",
          begin: '"""',
          end: '"""'
        },
        {
          // "strings"
          className: "string",
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [e.BACKSLASH_ESCAPE],
          relevance: 0
        },
        e.C_LINE_COMMENT_MODE,
        // single-line comments
        e.C_BLOCK_COMMENT_MODE,
        // comment blocks
        {
          // metadata
          className: "string",
          begin: "^\\s*\\[",
          end: "\\]"
        },
        {
          // interface or namespace declaration
          beginKeywords: "interface namespace",
          end: /\{/,
          illegal: "[;.\\-]",
          contains: [
            {
              // interface or namespace name
              className: "symbol",
              begin: "[a-zA-Z0-9_]+"
            }
          ]
        },
        {
          // class declaration
          beginKeywords: "class",
          end: /\{/,
          illegal: "[;.\\-]",
          contains: [
            {
              // class name
              className: "symbol",
              begin: "[a-zA-Z0-9_]+",
              contains: [
                {
                  begin: "[:,]\\s*",
                  contains: [
                    {
                      className: "symbol",
                      begin: "[a-zA-Z0-9_]+"
                    }
                  ]
                }
              ]
            }
          ]
        },
        r,
        // built-in types
        n,
        // object handles
        {
          // literals
          className: "literal",
          begin: "\\b(null|true|false)"
        },
        {
          // numbers
          className: "number",
          relevance: 0,
          begin: "(-?)(\\b0[xXbBoOdD][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?f?|\\.\\d+f?)([eE][-+]?\\d+f?)?)"
        }
      ]
    };
  }
  return Jc = t, Jc;
}
var eu, sg;
function _A() {
  if (sg)
    return eu;
  sg = 1;
  function t(e) {
    const r = {
      className: "number",
      begin: /[$%]\d+/
    }, n = {
      className: "number",
      begin: /\b\d+/
    }, i = {
      className: "number",
      begin: /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?/
    }, s = {
      className: "number",
      begin: /:\d{1,5}/
    };
    return {
      name: "Apache config",
      aliases: ["apacheconf"],
      case_insensitive: !0,
      contains: [
        e.HASH_COMMENT_MODE,
        {
          className: "section",
          begin: /<\/?/,
          end: />/,
          contains: [
            i,
            s,
            // low relevance prevents us from claming XML/HTML where this rule would
            // match strings inside of XML tags
            e.inherit(e.QUOTE_STRING_MODE, { relevance: 0 })
          ]
        },
        {
          className: "attribute",
          begin: /\w+/,
          relevance: 0,
          // keywords aren’t needed for highlighting per se, they only boost relevance
          // for a very generally defined mode (starts with a word, ends with line-end
          keywords: { _: [
            "order",
            "deny",
            "allow",
            "setenv",
            "rewriterule",
            "rewriteengine",
            "rewritecond",
            "documentroot",
            "sethandler",
            "errordocument",
            "loadmodule",
            "options",
            "header",
            "listen",
            "serverroot",
            "servername"
          ] },
          starts: {
            end: /$/,
            relevance: 0,
            keywords: { literal: "on off all deny allow" },
            contains: [
              {
                className: "meta",
                begin: /\s\[/,
                end: /\]$/
              },
              {
                className: "variable",
                begin: /[\$%]\{/,
                end: /\}/,
                contains: [
                  "self",
                  r
                ]
              },
              i,
              n,
              e.QUOTE_STRING_MODE
            ]
          }
        }
      ],
      illegal: /\S/
    };
  }
  return eu = t, eu;
}
var tu, og;
function hA() {
  if (og)
    return tu;
  og = 1;
  function t(e) {
    const r = e.regex, n = e.inherit(
      e.QUOTE_STRING_MODE,
      { illegal: null }
    ), i = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      contains: [
        "self",
        e.C_NUMBER_MODE,
        n
      ]
    }, s = e.COMMENT(/--/, /$/), o = e.COMMENT(
      /\(\*/,
      /\*\)/,
      { contains: [
        "self",
        // allow nesting
        s
      ] }
    ), a = [
      s,
      o,
      e.HASH_COMMENT_MODE
    ], l = [
      /apart from/,
      /aside from/,
      /instead of/,
      /out of/,
      /greater than/,
      /isn't|(doesn't|does not) (equal|come before|come after|contain)/,
      /(greater|less) than( or equal)?/,
      /(starts?|ends|begins?) with/,
      /contained by/,
      /comes (before|after)/,
      /a (ref|reference)/,
      /POSIX (file|path)/,
      /(date|time) string/,
      /quoted form/
    ], c = [
      /clipboard info/,
      /the clipboard/,
      /info for/,
      /list (disks|folder)/,
      /mount volume/,
      /path to/,
      /(close|open for) access/,
      /(get|set) eof/,
      /current date/,
      /do shell script/,
      /get volume settings/,
      /random number/,
      /set volume/,
      /system attribute/,
      /system info/,
      /time to GMT/,
      /(load|run|store) script/,
      /scripting components/,
      /ASCII (character|number)/,
      /localized string/,
      /choose (application|color|file|file name|folder|from list|remote application|URL)/,
      /display (alert|dialog)/
    ];
    return {
      name: "AppleScript",
      aliases: ["osascript"],
      keywords: {
        keyword: "about above after against and around as at back before beginning behind below beneath beside between but by considering contain contains continue copy div does eighth else end equal equals error every exit fifth first for fourth from front get given global if ignoring in into is it its last local me middle mod my ninth not of on onto or over prop property put ref reference repeat returning script second set seventh since sixth some tell tenth that the|0 then third through thru timeout times to transaction try until where while whose with without",
        literal: "AppleScript false linefeed return pi quote result space tab true",
        built_in: "alias application boolean class constant date file integer list number real record string text activate beep count delay launch log offset read round run say summarize write character characters contents day frontmost id item length month name|0 paragraph paragraphs rest reverse running time version weekday word words year"
      },
      contains: [
        n,
        e.C_NUMBER_MODE,
        {
          className: "built_in",
          begin: r.concat(
            /\b/,
            r.either(...c),
            /\b/
          )
        },
        {
          className: "built_in",
          begin: /^\s*return\b/
        },
        {
          className: "literal",
          begin: /\b(text item delimiters|current application|missing value)\b/
        },
        {
          className: "keyword",
          begin: r.concat(
            /\b/,
            r.either(...l),
            /\b/
          )
        },
        {
          beginKeywords: "on",
          illegal: /[${=;\n]/,
          contains: [
            e.UNDERSCORE_TITLE_MODE,
            i
          ]
        },
        ...a
      ],
      illegal: /\/\/|->|=>|\[\[/
    };
  }
  return tu = t, tu;
}
var ru, ag;
function mA() {
  if (ag)
    return ru;
  ag = 1;
  function t(e) {
    const r = "[A-Za-z_][0-9A-Za-z_]*", n = {
      keyword: [
        "if",
        "for",
        "while",
        "var",
        "new",
        "function",
        "do",
        "return",
        "void",
        "else",
        "break"
      ],
      literal: [
        "BackSlash",
        "DoubleQuote",
        "false",
        "ForwardSlash",
        "Infinity",
        "NaN",
        "NewLine",
        "null",
        "PI",
        "SingleQuote",
        "Tab",
        "TextFormatting",
        "true",
        "undefined"
      ],
      built_in: [
        "Abs",
        "Acos",
        "All",
        "Angle",
        "Any",
        "Area",
        "AreaGeodetic",
        "Array",
        "Asin",
        "Atan",
        "Atan2",
        "Attachments",
        "Average",
        "Back",
        "Bearing",
        "Boolean",
        "Buffer",
        "BufferGeodetic",
        "Ceil",
        "Centroid",
        "Clip",
        "Concatenate",
        "Console",
        "Constrain",
        "Contains",
        "ConvertDirection",
        "Cos",
        "Count",
        "Crosses",
        "Cut",
        "Date",
        "DateAdd",
        "DateDiff",
        "Day",
        "Decode",
        "DefaultValue",
        "Densify",
        "DensifyGeodetic",
        "Dictionary",
        "Difference",
        "Disjoint",
        "Distance",
        "DistanceGeodetic",
        "Distinct",
        "Domain",
        "DomainCode",
        "DomainName",
        "EnvelopeIntersects",
        "Equals",
        "Erase",
        "Exp",
        "Expects",
        "Extent",
        "Feature",
        "FeatureSet",
        "FeatureSetByAssociation",
        "FeatureSetById",
        "FeatureSetByName",
        "FeatureSetByPortalItem",
        "FeatureSetByRelationshipName",
        "Filter",
        "Find",
        "First",
        "Floor",
        "FromCharCode",
        "FromCodePoint",
        "FromJSON",
        "GdbVersion",
        "Generalize",
        "Geometry",
        "GetFeatureSet",
        "GetUser",
        "GroupBy",
        "Guid",
        "Hash",
        "HasKey",
        "Hour",
        "IIf",
        "Includes",
        "IndexOf",
        "Insert",
        "Intersection",
        "Intersects",
        "IsEmpty",
        "IsNan",
        "ISOMonth",
        "ISOWeek",
        "ISOWeekday",
        "ISOYear",
        "IsSelfIntersecting",
        "IsSimple",
        "Left|0",
        "Length",
        "Length3D",
        "LengthGeodetic",
        "Log",
        "Lower",
        "Map",
        "Max",
        "Mean",
        "Mid",
        "Millisecond",
        "Min",
        "Minute",
        "Month",
        "MultiPartToSinglePart",
        "Multipoint",
        "NextSequenceValue",
        "None",
        "Now",
        "Number",
        "Offset|0",
        "OrderBy",
        "Overlaps",
        "Point",
        "Polygon",
        "Polyline",
        "Pop",
        "Portal",
        "Pow",
        "Proper",
        "Push",
        "Random",
        "Reduce",
        "Relate",
        "Replace",
        "Resize",
        "Reverse",
        "Right|0",
        "RingIsClockwise",
        "Rotate",
        "Round",
        "Schema",
        "Second",
        "SetGeometry",
        "Simplify",
        "Sin",
        "Slice",
        "Sort",
        "Splice",
        "Split",
        "Sqrt",
        "Stdev",
        "SubtypeCode",
        "SubtypeName",
        "Subtypes",
        "Sum",
        "SymmetricDifference",
        "Tan",
        "Text",
        "Timestamp",
        "ToCharCode",
        "ToCodePoint",
        "Today",
        "ToHex",
        "ToLocal",
        "Top|0",
        "Touches",
        "ToUTC",
        "TrackAccelerationAt",
        "TrackAccelerationWindow",
        "TrackCurrentAcceleration",
        "TrackCurrentDistance",
        "TrackCurrentSpeed",
        "TrackCurrentTime",
        "TrackDistanceAt",
        "TrackDistanceWindow",
        "TrackDuration",
        "TrackFieldWindow",
        "TrackGeometryWindow",
        "TrackIndex",
        "TrackSpeedAt",
        "TrackSpeedWindow",
        "TrackStartTime",
        "TrackWindow",
        "Trim",
        "TypeOf",
        "Union",
        "Upper",
        "UrlEncode",
        "Variance",
        "Week",
        "Weekday",
        "When",
        "Within",
        "Year"
      ]
    }, i = {
      className: "symbol",
      begin: "\\$[datastore|feature|layer|map|measure|sourcefeature|sourcelayer|targetfeature|targetlayer|value|view]+"
    }, s = {
      className: "number",
      variants: [
        { begin: "\\b(0[bB][01]+)" },
        { begin: "\\b(0[oO][0-7]+)" },
        { begin: e.C_NUMBER_RE }
      ],
      relevance: 0
    }, o = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: n,
      contains: []
      // defined later
    }, a = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        e.BACKSLASH_ESCAPE,
        o
      ]
    };
    o.contains = [
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      a,
      s,
      e.REGEXP_MODE
    ];
    const l = o.contains.concat([
      e.C_BLOCK_COMMENT_MODE,
      e.C_LINE_COMMENT_MODE
    ]);
    return {
      name: "ArcGIS Arcade",
      case_insensitive: !0,
      keywords: n,
      contains: [
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        a,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        i,
        s,
        {
          // object attr container
          begin: /[{,]\s*/,
          relevance: 0,
          contains: [
            {
              begin: r + "\\s*:",
              returnBegin: !0,
              relevance: 0,
              contains: [
                {
                  className: "attr",
                  begin: r,
                  relevance: 0
                }
              ]
            }
          ]
        },
        {
          // "value" container
          begin: "(" + e.RE_STARTERS_RE + "|\\b(return)\\b)\\s*",
          keywords: "return",
          contains: [
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            e.REGEXP_MODE,
            {
              className: "function",
              begin: "(\\(.*?\\)|" + r + ")\\s*=>",
              returnBegin: !0,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    { begin: r },
                    { begin: /\(\s*\)/ },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: !0,
                      excludeEnd: !0,
                      keywords: n,
                      contains: l
                    }
                  ]
                }
              ]
            }
          ],
          relevance: 0
        },
        {
          beginKeywords: "function",
          end: /\{/,
          excludeEnd: !0,
          contains: [
            e.inherit(e.TITLE_MODE, {
              className: "title.function",
              begin: r
            }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: !0,
              excludeEnd: !0,
              contains: l
            }
          ],
          illegal: /\[|%/
        },
        { begin: /\$[(.]/ }
      ],
      illegal: /#(?!!)/
    };
  }
  return ru = t, ru;
}
var nu, lg;
function gA() {
  if (lg)
    return nu;
  lg = 1;
  function t(r) {
    const n = r.regex, i = r.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), s = "decltype\\(auto\\)", o = "[a-zA-Z_]\\w*::", l = "(?!struct)(" + s + "|" + n.optional(o) + "[a-zA-Z_]\\w*" + n.optional("<[^<>]+>") + ")", c = {
      className: "type",
      begin: "\\b[a-z\\d_]*_t\\b"
    }, m = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [r.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(" + "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)" + "|.)",
          end: "'",
          illegal: "."
        },
        r.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    }, b = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01']+)" },
        { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
      ],
      relevance: 0
    }, C = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        r.inherit(m, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        i,
        r.C_BLOCK_COMMENT_MODE
      ]
    }, N = {
      className: "title",
      begin: n.optional(o) + r.IDENT_RE,
      relevance: 0
    }, z = n.optional(o) + r.IDENT_RE + "\\s*\\(", A = [
      "alignas",
      "alignof",
      "and",
      "and_eq",
      "asm",
      "atomic_cancel",
      "atomic_commit",
      "atomic_noexcept",
      "auto",
      "bitand",
      "bitor",
      "break",
      "case",
      "catch",
      "class",
      "co_await",
      "co_return",
      "co_yield",
      "compl",
      "concept",
      "const_cast|10",
      "consteval",
      "constexpr",
      "constinit",
      "continue",
      "decltype",
      "default",
      "delete",
      "do",
      "dynamic_cast|10",
      "else",
      "enum",
      "explicit",
      "export",
      "extern",
      "false",
      "final",
      "for",
      "friend",
      "goto",
      "if",
      "import",
      "inline",
      "module",
      "mutable",
      "namespace",
      "new",
      "noexcept",
      "not",
      "not_eq",
      "nullptr",
      "operator",
      "or",
      "or_eq",
      "override",
      "private",
      "protected",
      "public",
      "reflexpr",
      "register",
      "reinterpret_cast|10",
      "requires",
      "return",
      "sizeof",
      "static_assert",
      "static_cast|10",
      "struct",
      "switch",
      "synchronized",
      "template",
      "this",
      "thread_local",
      "throw",
      "transaction_safe",
      "transaction_safe_dynamic",
      "true",
      "try",
      "typedef",
      "typeid",
      "typename",
      "union",
      "using",
      "virtual",
      "volatile",
      "while",
      "xor",
      "xor_eq"
    ], Q = [
      "bool",
      "char",
      "char16_t",
      "char32_t",
      "char8_t",
      "double",
      "float",
      "int",
      "long",
      "short",
      "void",
      "wchar_t",
      "unsigned",
      "signed",
      "const",
      "static"
    ], Te = [
      "any",
      "auto_ptr",
      "barrier",
      "binary_semaphore",
      "bitset",
      "complex",
      "condition_variable",
      "condition_variable_any",
      "counting_semaphore",
      "deque",
      "false_type",
      "future",
      "imaginary",
      "initializer_list",
      "istringstream",
      "jthread",
      "latch",
      "lock_guard",
      "multimap",
      "multiset",
      "mutex",
      "optional",
      "ostringstream",
      "packaged_task",
      "pair",
      "promise",
      "priority_queue",
      "queue",
      "recursive_mutex",
      "recursive_timed_mutex",
      "scoped_lock",
      "set",
      "shared_future",
      "shared_lock",
      "shared_mutex",
      "shared_timed_mutex",
      "shared_ptr",
      "stack",
      "string_view",
      "stringstream",
      "timed_mutex",
      "thread",
      "true_type",
      "tuple",
      "unique_lock",
      "unique_ptr",
      "unordered_map",
      "unordered_multimap",
      "unordered_multiset",
      "unordered_set",
      "variant",
      "vector",
      "weak_ptr",
      "wstring",
      "wstring_view"
    ], ce = [
      "abort",
      "abs",
      "acos",
      "apply",
      "as_const",
      "asin",
      "atan",
      "atan2",
      "calloc",
      "ceil",
      "cerr",
      "cin",
      "clog",
      "cos",
      "cosh",
      "cout",
      "declval",
      "endl",
      "exchange",
      "exit",
      "exp",
      "fabs",
      "floor",
      "fmod",
      "forward",
      "fprintf",
      "fputs",
      "free",
      "frexp",
      "fscanf",
      "future",
      "invoke",
      "isalnum",
      "isalpha",
      "iscntrl",
      "isdigit",
      "isgraph",
      "islower",
      "isprint",
      "ispunct",
      "isspace",
      "isupper",
      "isxdigit",
      "labs",
      "launder",
      "ldexp",
      "log",
      "log10",
      "make_pair",
      "make_shared",
      "make_shared_for_overwrite",
      "make_tuple",
      "make_unique",
      "malloc",
      "memchr",
      "memcmp",
      "memcpy",
      "memset",
      "modf",
      "move",
      "pow",
      "printf",
      "putchar",
      "puts",
      "realloc",
      "scanf",
      "sin",
      "sinh",
      "snprintf",
      "sprintf",
      "sqrt",
      "sscanf",
      "std",
      "stderr",
      "stdin",
      "stdout",
      "strcat",
      "strchr",
      "strcmp",
      "strcpy",
      "strcspn",
      "strlen",
      "strncat",
      "strncmp",
      "strncpy",
      "strpbrk",
      "strrchr",
      "strspn",
      "strstr",
      "swap",
      "tan",
      "tanh",
      "terminate",
      "to_underlying",
      "tolower",
      "toupper",
      "vfprintf",
      "visit",
      "vprintf",
      "vsprintf"
    ], fe = {
      type: Q,
      keyword: A,
      literal: [
        "NULL",
        "false",
        "nullopt",
        "nullptr",
        "true"
      ],
      built_in: ["_Pragma"],
      _type_hints: Te
    }, ae = {
      className: "function.dispatch",
      relevance: 0,
      keywords: {
        // Only for relevance, not highlighting.
        _hint: ce
      },
      begin: n.concat(
        /\b/,
        /(?!decltype)/,
        /(?!if)/,
        /(?!for)/,
        /(?!switch)/,
        /(?!while)/,
        r.IDENT_RE,
        n.lookahead(/(<[^<>]+>|)\s*\(/)
      )
    }, Re = [
      ae,
      C,
      c,
      i,
      r.C_BLOCK_COMMENT_MODE,
      b,
      m
    ], pe = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: fe,
      contains: Re.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: fe,
          contains: Re.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    }, Ce = {
      className: "function",
      begin: "(" + l + "[\\*&\\s]+)+" + z,
      returnBegin: !0,
      end: /[{;=]/,
      excludeEnd: !0,
      keywords: fe,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: s,
          keywords: fe,
          relevance: 0
        },
        {
          begin: z,
          returnBegin: !0,
          contains: [N],
          relevance: 0
        },
        // needed because we do not have look-behind on the below rule
        // to prevent it from grabbing the final : in a :: pair
        {
          begin: /::/,
          relevance: 0
        },
        // initializers
        {
          begin: /:/,
          endsWithParent: !0,
          contains: [
            m,
            b
          ]
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: fe,
          relevance: 0,
          contains: [
            i,
            r.C_BLOCK_COMMENT_MODE,
            m,
            b,
            c,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: fe,
              relevance: 0,
              contains: [
                "self",
                i,
                r.C_BLOCK_COMMENT_MODE,
                m,
                b,
                c
              ]
            }
          ]
        },
        c,
        i,
        r.C_BLOCK_COMMENT_MODE,
        C
      ]
    };
    return {
      name: "C++",
      aliases: [
        "cc",
        "c++",
        "h++",
        "hpp",
        "hh",
        "hxx",
        "cxx"
      ],
      keywords: fe,
      illegal: "</",
      classNameAliases: { "function.dispatch": "built_in" },
      contains: [].concat(
        pe,
        Ce,
        ae,
        Re,
        [
          C,
          {
            // containers: ie, `vector <int> rooms (9);`
            begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",
            end: ">",
            keywords: fe,
            contains: [
              "self",
              c
            ]
          },
          {
            begin: r.IDENT_RE + "::",
            keywords: fe
          },
          {
            match: [
              // extra complexity to deal with `enum class` and `enum struct`
              /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
              /\s+/,
              /\w+/
            ],
            className: {
              1: "keyword",
              3: "title.class"
            }
          }
        ]
      )
    };
  }
  function e(r) {
    const n = {
      type: [
        "boolean",
        "byte",
        "word",
        "String"
      ],
      built_in: [
        "KeyboardController",
        "MouseController",
        "SoftwareSerial",
        "EthernetServer",
        "EthernetClient",
        "LiquidCrystal",
        "RobotControl",
        "GSMVoiceCall",
        "EthernetUDP",
        "EsploraTFT",
        "HttpClient",
        "RobotMotor",
        "WiFiClient",
        "GSMScanner",
        "FileSystem",
        "Scheduler",
        "GSMServer",
        "YunClient",
        "YunServer",
        "IPAddress",
        "GSMClient",
        "GSMModem",
        "Keyboard",
        "Ethernet",
        "Console",
        "GSMBand",
        "Esplora",
        "Stepper",
        "Process",
        "WiFiUDP",
        "GSM_SMS",
        "Mailbox",
        "USBHost",
        "Firmata",
        "PImage",
        "Client",
        "Server",
        "GSMPIN",
        "FileIO",
        "Bridge",
        "Serial",
        "EEPROM",
        "Stream",
        "Mouse",
        "Audio",
        "Servo",
        "File",
        "Task",
        "GPRS",
        "WiFi",
        "Wire",
        "TFT",
        "GSM",
        "SPI",
        "SD"
      ],
      _hints: [
        "setup",
        "loop",
        "runShellCommandAsynchronously",
        "analogWriteResolution",
        "retrieveCallingNumber",
        "printFirmwareVersion",
        "analogReadResolution",
        "sendDigitalPortPair",
        "noListenOnLocalhost",
        "readJoystickButton",
        "setFirmwareVersion",
        "readJoystickSwitch",
        "scrollDisplayRight",
        "getVoiceCallStatus",
        "scrollDisplayLeft",
        "writeMicroseconds",
        "delayMicroseconds",
        "beginTransmission",
        "getSignalStrength",
        "runAsynchronously",
        "getAsynchronously",
        "listenOnLocalhost",
        "getCurrentCarrier",
        "readAccelerometer",
        "messageAvailable",
        "sendDigitalPorts",
        "lineFollowConfig",
        "countryNameWrite",
        "runShellCommand",
        "readStringUntil",
        "rewindDirectory",
        "readTemperature",
        "setClockDivider",
        "readLightSensor",
        "endTransmission",
        "analogReference",
        "detachInterrupt",
        "countryNameRead",
        "attachInterrupt",
        "encryptionType",
        "readBytesUntil",
        "robotNameWrite",
        "readMicrophone",
        "robotNameRead",
        "cityNameWrite",
        "userNameWrite",
        "readJoystickY",
        "readJoystickX",
        "mouseReleased",
        "openNextFile",
        "scanNetworks",
        "noInterrupts",
        "digitalWrite",
        "beginSpeaker",
        "mousePressed",
        "isActionDone",
        "mouseDragged",
        "displayLogos",
        "noAutoscroll",
        "addParameter",
        "remoteNumber",
        "getModifiers",
        "keyboardRead",
        "userNameRead",
        "waitContinue",
        "processInput",
        "parseCommand",
        "printVersion",
        "readNetworks",
        "writeMessage",
        "blinkVersion",
        "cityNameRead",
        "readMessage",
        "setDataMode",
        "parsePacket",
        "isListening",
        "setBitOrder",
        "beginPacket",
        "isDirectory",
        "motorsWrite",
        "drawCompass",
        "digitalRead",
        "clearScreen",
        "serialEvent",
        "rightToLeft",
        "setTextSize",
        "leftToRight",
        "requestFrom",
        "keyReleased",
        "compassRead",
        "analogWrite",
        "interrupts",
        "WiFiServer",
        "disconnect",
        "playMelody",
        "parseFloat",
        "autoscroll",
        "getPINUsed",
        "setPINUsed",
        "setTimeout",
        "sendAnalog",
        "readSlider",
        "analogRead",
        "beginWrite",
        "createChar",
        "motorsStop",
        "keyPressed",
        "tempoWrite",
        "readButton",
        "subnetMask",
        "debugPrint",
        "macAddress",
        "writeGreen",
        "randomSeed",
        "attachGPRS",
        "readString",
        "sendString",
        "remotePort",
        "releaseAll",
        "mouseMoved",
        "background",
        "getXChange",
        "getYChange",
        "answerCall",
        "getResult",
        "voiceCall",
        "endPacket",
        "constrain",
        "getSocket",
        "writeJSON",
        "getButton",
        "available",
        "connected",
        "findUntil",
        "readBytes",
        "exitValue",
        "readGreen",
        "writeBlue",
        "startLoop",
        "IPAddress",
        "isPressed",
        "sendSysex",
        "pauseMode",
        "gatewayIP",
        "setCursor",
        "getOemKey",
        "tuneWrite",
        "noDisplay",
        "loadImage",
        "switchPIN",
        "onRequest",
        "onReceive",
        "changePIN",
        "playFile",
        "noBuffer",
        "parseInt",
        "overflow",
        "checkPIN",
        "knobRead",
        "beginTFT",
        "bitClear",
        "updateIR",
        "bitWrite",
        "position",
        "writeRGB",
        "highByte",
        "writeRed",
        "setSpeed",
        "readBlue",
        "noStroke",
        "remoteIP",
        "transfer",
        "shutdown",
        "hangCall",
        "beginSMS",
        "endWrite",
        "attached",
        "maintain",
        "noCursor",
        "checkReg",
        "checkPUK",
        "shiftOut",
        "isValid",
        "shiftIn",
        "pulseIn",
        "connect",
        "println",
        "localIP",
        "pinMode",
        "getIMEI",
        "display",
        "noBlink",
        "process",
        "getBand",
        "running",
        "beginSD",
        "drawBMP",
        "lowByte",
        "setBand",
        "release",
        "bitRead",
        "prepare",
        "pointTo",
        "readRed",
        "setMode",
        "noFill",
        "remove",
        "listen",
        "stroke",
        "detach",
        "attach",
        "noTone",
        "exists",
        "buffer",
        "height",
        "bitSet",
        "circle",
        "config",
        "cursor",
        "random",
        "IRread",
        "setDNS",
        "endSMS",
        "getKey",
        "micros",
        "millis",
        "begin",
        "print",
        "write",
        "ready",
        "flush",
        "width",
        "isPIN",
        "blink",
        "clear",
        "press",
        "mkdir",
        "rmdir",
        "close",
        "point",
        "yield",
        "image",
        "BSSID",
        "click",
        "delay",
        "read",
        "text",
        "move",
        "peek",
        "beep",
        "rect",
        "line",
        "open",
        "seek",
        "fill",
        "size",
        "turn",
        "stop",
        "home",
        "find",
        "step",
        "tone",
        "sqrt",
        "RSSI",
        "SSID",
        "end",
        "bit",
        "tan",
        "cos",
        "sin",
        "pow",
        "map",
        "abs",
        "max",
        "min",
        "get",
        "run",
        "put"
      ],
      literal: [
        "DIGITAL_MESSAGE",
        "FIRMATA_STRING",
        "ANALOG_MESSAGE",
        "REPORT_DIGITAL",
        "REPORT_ANALOG",
        "INPUT_PULLUP",
        "SET_PIN_MODE",
        "INTERNAL2V56",
        "SYSTEM_RESET",
        "LED_BUILTIN",
        "INTERNAL1V1",
        "SYSEX_START",
        "INTERNAL",
        "EXTERNAL",
        "DEFAULT",
        "OUTPUT",
        "INPUT",
        "HIGH",
        "LOW"
      ]
    }, i = t(r), s = (
      /** @type {Record<string,any>} */
      i.keywords
    );
    return s.type = [
      ...s.type,
      ...n.type
    ], s.literal = [
      ...s.literal,
      ...n.literal
    ], s.built_in = [
      ...s.built_in,
      ...n.built_in
    ], s._hints = n._hints, i.name = "Arduino", i.aliases = ["ino"], i.supersetOf = "cpp", i;
  }
  return nu = e, nu;
}
var iu, cg;
function $A() {
  if (cg)
    return iu;
  cg = 1;
  function t(e) {
    const r = { variants: [
      e.COMMENT("^[ \\t]*(?=#)", "$", {
        relevance: 0,
        excludeBegin: !0
      }),
      e.COMMENT("[;@]", "$", { relevance: 0 }),
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE
    ] };
    return {
      name: "ARM Assembly",
      case_insensitive: !0,
      aliases: ["arm"],
      keywords: {
        $pattern: "\\.?" + e.IDENT_RE,
        meta: (
          // GNU preprocs
          ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND "
        ),
        built_in: "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 w0 w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16 w17 w18 w19 w20 w21 w22 w23 w24 w25 w26 w27 w28 w29 w30 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 pc lr sp ip sl sb fp a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 {PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @"
      },
      contains: [
        {
          className: "keyword",
          begin: "\\b(adc|(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|wfe|wfi|yield)(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?[sptrx]?(?=\\s)"
          // followed by space
        },
        r,
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          relevance: 0
        },
        {
          className: "title",
          begin: "\\|",
          end: "\\|",
          illegal: "\\n",
          relevance: 0
        },
        {
          className: "number",
          variants: [
            {
              // hex
              begin: "[#$=]?0x[0-9a-f]+"
            },
            {
              // bin
              begin: "[#$=]?0b[01]+"
            },
            {
              // literal
              begin: "[#$=]\\d+"
            },
            {
              // bare number
              begin: "\\b\\d+"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            {
              // GNU ARM syntax
              begin: "^[ \\t]*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
            },
            {
              // ARM syntax
              begin: "^[a-z_\\.\\$][a-z0-9_\\.\\$]+"
            },
            {
              // label reference
              begin: "[=#]\\w+"
            }
          ],
          relevance: 0
        }
      ]
    };
  }
  return iu = t, iu;
}
var su, ug;
function bA() {
  if (ug)
    return su;
  ug = 1;
  function t(e) {
    const r = e.regex, n = r.concat(/[\p{L}_]/u, r.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u), i = /[\p{L}0-9._:-]+/u, s = {
      className: "symbol",
      begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
    }, o = {
      begin: /\s/,
      contains: [
        {
          className: "keyword",
          begin: /#?[a-z_][a-z1-9_-]+/,
          illegal: /\n/
        }
      ]
    }, a = e.inherit(o, {
      begin: /\(/,
      end: /\)/
    }), l = e.inherit(e.APOS_STRING_MODE, { className: "string" }), c = e.inherit(e.QUOTE_STRING_MODE, { className: "string" }), f = {
      endsWithParent: !0,
      illegal: /</,
      relevance: 0,
      contains: [
        {
          className: "attr",
          begin: i,
          relevance: 0
        },
        {
          begin: /=\s*/,
          relevance: 0,
          contains: [
            {
              className: "string",
              endsParent: !0,
              variants: [
                {
                  begin: /"/,
                  end: /"/,
                  contains: [s]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [s]
                },
                { begin: /[^\s"'=<>`]+/ }
              ]
            }
          ]
        }
      ]
    };
    return {
      name: "HTML, XML",
      aliases: [
        "html",
        "xhtml",
        "rss",
        "atom",
        "xjb",
        "xsd",
        "xsl",
        "plist",
        "wsf",
        "svg"
      ],
      case_insensitive: !0,
      unicodeRegex: !0,
      contains: [
        {
          className: "meta",
          begin: /<![a-z]/,
          end: />/,
          relevance: 10,
          contains: [
            o,
            c,
            l,
            a,
            {
              begin: /\[/,
              end: /\]/,
              contains: [
                {
                  className: "meta",
                  begin: /<![a-z]/,
                  end: />/,
                  contains: [
                    o,
                    a,
                    c,
                    l
                  ]
                }
              ]
            }
          ]
        },
        e.COMMENT(
          /<!--/,
          /-->/,
          { relevance: 10 }
        ),
        {
          begin: /<!\[CDATA\[/,
          end: /\]\]>/,
          relevance: 10
        },
        s,
        // xml processing instructions
        {
          className: "meta",
          end: /\?>/,
          variants: [
            {
              begin: /<\?xml/,
              relevance: 10,
              contains: [
                c
              ]
            },
            {
              begin: /<\?[a-z][a-z0-9]+/
            }
          ]
        },
        {
          className: "tag",
          /*
          The lookahead pattern (?=...) ensures that 'begin' only matches
          '<style' as a single word, followed by a whitespace or an
          ending bracket.
          */
          begin: /<style(?=\s|>)/,
          end: />/,
          keywords: { name: "style" },
          contains: [f],
          starts: {
            end: /<\/style>/,
            returnEnd: !0,
            subLanguage: [
              "css",
              "xml"
            ]
          }
        },
        {
          className: "tag",
          // See the comment in the <style tag about the lookahead pattern
          begin: /<script(?=\s|>)/,
          end: />/,
          keywords: { name: "script" },
          contains: [f],
          starts: {
            end: /<\/script>/,
            returnEnd: !0,
            subLanguage: [
              "javascript",
              "handlebars",
              "xml"
            ]
          }
        },
        // we need this for now for jSX
        {
          className: "tag",
          begin: /<>|<\/>/
        },
        // open tag
        {
          className: "tag",
          begin: r.concat(
            /</,
            r.lookahead(r.concat(
              n,
              // <tag/>
              // <tag>
              // <tag ...
              r.either(/\/>/, />/, /\s/)
            ))
          ),
          end: /\/?>/,
          contains: [
            {
              className: "name",
              begin: n,
              relevance: 0,
              starts: f
            }
          ]
        },
        // close tag
        {
          className: "tag",
          begin: r.concat(
            /<\//,
            r.lookahead(r.concat(
              n,
              />/
            ))
          ),
          contains: [
            {
              className: "name",
              begin: n,
              relevance: 0
            },
            {
              begin: />/,
              relevance: 0,
              endsParent: !0
            }
          ]
        }
      ]
    };
  }
  return su = t, su;
}
var ou, dg;
function EA() {
  if (dg)
    return ou;
  dg = 1;
  function t(e) {
    const r = e.regex, n = {
      begin: "^'{3,}[ \\t]*$",
      relevance: 10
    }, i = [
      // escaped constrained formatting marks (i.e., \* \_ or \`)
      { begin: /\\[*_`]/ },
      // escaped unconstrained formatting marks (i.e., \\** \\__ or \\``)
      // must ignore until the next formatting marks
      // this rule might not be 100% compliant with Asciidoctor 2.0 but we are entering undefined behavior territory...
      { begin: /\\\\\*{2}[^\n]*?\*{2}/ },
      { begin: /\\\\_{2}[^\n]*_{2}/ },
      { begin: /\\\\`{2}[^\n]*`{2}/ },
      // guard: constrained formatting mark may not be preceded by ":", ";" or
      // "}". match these so the constrained rule doesn't see them
      { begin: /[:;}][*_`](?![*_`])/ }
    ], s = [
      // inline unconstrained strong (single line)
      {
        className: "strong",
        begin: /\*{2}([^\n]+?)\*{2}/
      },
      // inline unconstrained strong (multi-line)
      {
        className: "strong",
        begin: r.concat(
          /\*\*/,
          /((\*(?!\*)|\\[^\n]|[^*\n\\])+\n)+/,
          /(\*(?!\*)|\\[^\n]|[^*\n\\])*/,
          /\*\*/
        ),
        relevance: 0
      },
      // inline constrained strong (single line)
      {
        className: "strong",
        // must not precede or follow a word character
        begin: /\B\*(\S|\S[^\n]*?\S)\*(?!\w)/
      },
      // inline constrained strong (multi-line)
      {
        className: "strong",
        // must not precede or follow a word character
        begin: /\*[^\s]([^\n]+\n)+([^\n]+)\*/
      }
    ], o = [
      // inline unconstrained emphasis (single line)
      {
        className: "emphasis",
        begin: /_{2}([^\n]+?)_{2}/
      },
      // inline unconstrained emphasis (multi-line)
      {
        className: "emphasis",
        begin: r.concat(
          /__/,
          /((_(?!_)|\\[^\n]|[^_\n\\])+\n)+/,
          /(_(?!_)|\\[^\n]|[^_\n\\])*/,
          /__/
        ),
        relevance: 0
      },
      // inline constrained emphasis (single line)
      {
        className: "emphasis",
        // must not precede or follow a word character
        begin: /\b_(\S|\S[^\n]*?\S)_(?!\w)/
      },
      // inline constrained emphasis (multi-line)
      {
        className: "emphasis",
        // must not precede or follow a word character
        begin: /_[^\s]([^\n]+\n)+([^\n]+)_/
      },
      // inline constrained emphasis using single quote (legacy)
      {
        className: "emphasis",
        // must not follow a word character or be followed by a single quote or space
        begin: "\\B'(?!['\\s])",
        end: "(\\n{2}|')",
        // allow escaped single quote followed by word char
        contains: [
          {
            begin: "\\\\'\\w",
            relevance: 0
          }
        ],
        relevance: 0
      }
    ], a = {
      className: "symbol",
      begin: "^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+",
      relevance: 10
    }, l = {
      className: "bullet",
      begin: "^(\\*+|-+|\\.+|[^\\n]+?::)\\s+"
    };
    return {
      name: "AsciiDoc",
      aliases: ["adoc"],
      contains: [
        // block comment
        e.COMMENT(
          "^/{4,}\\n",
          "\\n/{4,}$",
          // can also be done as...
          // '^/{4,}$',
          // '^/{4,}$',
          { relevance: 10 }
        ),
        // line comment
        e.COMMENT(
          "^//",
          "$",
          { relevance: 0 }
        ),
        // title
        {
          className: "title",
          begin: "^\\.\\w.*$"
        },
        // example, admonition & sidebar blocks
        {
          begin: "^[=\\*]{4,}\\n",
          end: "\\n^[=\\*]{4,}$",
          relevance: 10
        },
        // headings
        {
          className: "section",
          relevance: 10,
          variants: [
            { begin: "^(={1,6})[ 	].+?([ 	]\\1)?$" },
            { begin: "^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$" }
          ]
        },
        // document attributes
        {
          className: "meta",
          begin: "^:.+?:",
          end: "\\s",
          excludeEnd: !0,
          relevance: 10
        },
        // block attributes
        {
          className: "meta",
          begin: "^\\[.+?\\]$",
          relevance: 0
        },
        // quoteblocks
        {
          className: "quote",
          begin: "^_{4,}\\n",
          end: "\\n_{4,}$",
          relevance: 10
        },
        // listing and literal blocks
        {
          className: "code",
          begin: "^[\\-\\.]{4,}\\n",
          end: "\\n[\\-\\.]{4,}$",
          relevance: 10
        },
        // passthrough blocks
        {
          begin: "^\\+{4,}\\n",
          end: "\\n\\+{4,}$",
          contains: [
            {
              begin: "<",
              end: ">",
              subLanguage: "xml",
              relevance: 0
            }
          ],
          relevance: 10
        },
        l,
        a,
        ...i,
        ...s,
        ...o,
        // inline smart quotes
        {
          className: "string",
          variants: [
            { begin: "``.+?''" },
            { begin: "`.+?'" }
          ]
        },
        // inline unconstrained emphasis
        {
          className: "code",
          begin: /`{2}/,
          end: /(\n{2}|`{2})/
        },
        // inline code snippets (TODO should get same treatment as strong and emphasis)
        {
          className: "code",
          begin: "(`.+?`|\\+.+?\\+)",
          relevance: 0
        },
        // indented literal block
        {
          className: "code",
          begin: "^[ \\t]",
          end: "$",
          relevance: 0
        },
        n,
        // images and links
        {
          begin: "(link:)?(http|https|ftp|file|irc|image:?):\\S+?\\[[^[]*?\\]",
          returnBegin: !0,
          contains: [
            {
              begin: "(link|image:?):",
              relevance: 0
            },
            {
              className: "link",
              begin: "\\w",
              end: "[^\\[]+",
              relevance: 0
            },
            {
              className: "string",
              begin: "\\[",
              end: "\\]",
              excludeBegin: !0,
              excludeEnd: !0,
              relevance: 0
            }
          ],
          relevance: 10
        }
      ]
    };
  }
  return ou = t, ou;
}
var au, fg;
function vA() {
  if (fg)
    return au;
  fg = 1;
  function t(e) {
    const r = e.regex, n = [
      "false",
      "synchronized",
      "int",
      "abstract",
      "float",
      "private",
      "char",
      "boolean",
      "static",
      "null",
      "if",
      "const",
      "for",
      "true",
      "while",
      "long",
      "throw",
      "strictfp",
      "finally",
      "protected",
      "import",
      "native",
      "final",
      "return",
      "void",
      "enum",
      "else",
      "extends",
      "implements",
      "break",
      "transient",
      "new",
      "catch",
      "instanceof",
      "byte",
      "super",
      "volatile",
      "case",
      "assert",
      "short",
      "package",
      "default",
      "double",
      "public",
      "try",
      "this",
      "switch",
      "continue",
      "throws",
      "privileged",
      "aspectOf",
      "adviceexecution",
      "proceed",
      "cflowbelow",
      "cflow",
      "initialization",
      "preinitialization",
      "staticinitialization",
      "withincode",
      "target",
      "within",
      "execution",
      "getWithinTypeName",
      "handler",
      "thisJoinPoint",
      "thisJoinPointStaticPart",
      "thisEnclosingJoinPointStaticPart",
      "declare",
      "parents",
      "warning",
      "error",
      "soft",
      "precedence",
      "thisAspectInstance"
    ], i = [
      "get",
      "set",
      "args",
      "call"
    ];
    return {
      name: "AspectJ",
      keywords: n,
      illegal: /<\/|#/,
      contains: [
        e.COMMENT(
          /\/\*\*/,
          /\*\//,
          {
            relevance: 0,
            contains: [
              {
                // eat up @'s in emails to prevent them to be recognized as doctags
                begin: /\w+@/,
                relevance: 0
              },
              {
                className: "doctag",
                begin: /@[A-Za-z]+/
              }
            ]
          }
        ),
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        {
          className: "class",
          beginKeywords: "aspect",
          end: /[{;=]/,
          excludeEnd: !0,
          illegal: /[:;"\[\]]/,
          contains: [
            { beginKeywords: "extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton" },
            e.UNDERSCORE_TITLE_MODE,
            {
              begin: /\([^\)]*/,
              end: /[)]+/,
              keywords: n.concat(i),
              excludeEnd: !1
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class interface",
          end: /[{;=]/,
          excludeEnd: !0,
          relevance: 0,
          keywords: "class interface",
          illegal: /[:"\[\]]/,
          contains: [
            { beginKeywords: "extends implements" },
            e.UNDERSCORE_TITLE_MODE
          ]
        },
        {
          // AspectJ Constructs
          beginKeywords: "pointcut after before around throwing returning",
          end: /[)]/,
          excludeEnd: !1,
          illegal: /["\[\]]/,
          contains: [
            {
              begin: r.concat(e.UNDERSCORE_IDENT_RE, /\s*\(/),
              returnBegin: !0,
              contains: [e.UNDERSCORE_TITLE_MODE]
            }
          ]
        },
        {
          begin: /[:]/,
          returnBegin: !0,
          end: /[{;]/,
          relevance: 0,
          excludeEnd: !1,
          keywords: n,
          illegal: /["\[\]]/,
          contains: [
            {
              begin: r.concat(e.UNDERSCORE_IDENT_RE, /\s*\(/),
              keywords: n.concat(i),
              relevance: 0
            },
            e.QUOTE_STRING_MODE
          ]
        },
        {
          // this prevents 'new Name(...), or throw ...' from being recognized as a function definition
          beginKeywords: "new throw",
          relevance: 0
        },
        {
          // the function class is a bit different for AspectJ compared to the Java language
          className: "function",
          begin: /\w+ +\w+(\.\w+)?\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
          returnBegin: !0,
          end: /[{;=]/,
          keywords: n,
          excludeEnd: !0,
          contains: [
            {
              begin: r.concat(e.UNDERSCORE_IDENT_RE, /\s*\(/),
              returnBegin: !0,
              relevance: 0,
              contains: [e.UNDERSCORE_TITLE_MODE]
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              relevance: 0,
              keywords: n,
              contains: [
                e.APOS_STRING_MODE,
                e.QUOTE_STRING_MODE,
                e.C_NUMBER_MODE,
                e.C_BLOCK_COMMENT_MODE
              ]
            },
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        e.C_NUMBER_MODE,
        {
          // annotation is also used in this language
          className: "meta",
          begin: /@[A-Za-z]+/
        }
      ]
    };
  }
  return au = t, au;
}
var lu, pg;
function SA() {
  if (pg)
    return lu;
  pg = 1;
  function t(e) {
    const r = { begin: "`[\\s\\S]" };
    return {
      name: "AutoHotkey",
      case_insensitive: !0,
      aliases: ["ahk"],
      keywords: {
        keyword: "Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group",
        literal: "true false NOT AND OR",
        built_in: "ComSpec Clipboard ClipboardAll ErrorLevel"
      },
      contains: [
        r,
        e.inherit(e.QUOTE_STRING_MODE, { contains: [r] }),
        e.COMMENT(";", "$", { relevance: 0 }),
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          begin: e.NUMBER_RE,
          relevance: 0
        },
        {
          // subst would be the most accurate however fails the point of
          // highlighting. variable is comparably the most accurate that actually
          // has some effect
          className: "variable",
          begin: "%[a-zA-Z0-9#_$@]+%"
        },
        {
          className: "built_in",
          begin: "^\\s*\\w+\\s*(,|%)"
          // I don't really know if this is totally relevant
        },
        {
          // symbol would be most accurate however is highlighted just like
          // built_in and that makes up a lot of AutoHotkey code meaning that it
          // would fail to highlight anything
          className: "title",
          variants: [
            { begin: '^[^\\n";]+::(?!=)' },
            {
              begin: '^[^\\n";]+:(?!=)',
              // zero relevance as it catches a lot of things
              // followed by a single ':' in many languages
              relevance: 0
            }
          ]
        },
        {
          className: "meta",
          begin: "^\\s*#\\w+",
          end: "$",
          relevance: 0
        },
        {
          className: "built_in",
          begin: "A_[a-zA-Z0-9]+"
        },
        {
          // consecutive commas, not for highlighting but just for relevance
          begin: ",\\s*,"
        }
      ]
    };
  }
  return lu = t, lu;
}
var cu, _g;
function yA() {
  if (_g)
    return cu;
  _g = 1;
  function t(e) {
    const r = "ByRef Case Const ContinueCase ContinueLoop Dim Do Else ElseIf EndFunc EndIf EndSelect EndSwitch EndWith Enum Exit ExitLoop For Func Global If In Local Next ReDim Return Select Static Step Switch Then To Until Volatile WEnd While With", n = [
      "EndRegion",
      "forcedef",
      "forceref",
      "ignorefunc",
      "include",
      "include-once",
      "NoTrayIcon",
      "OnAutoItStartRegister",
      "pragma",
      "Region",
      "RequireAdmin",
      "Tidy_Off",
      "Tidy_On",
      "Tidy_Parameters"
    ], i = "True False And Null Not Or Default", s = "Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait WinWaitActive WinWaitClose WinWaitNotActive", o = { variants: [
      e.COMMENT(";", "$", { relevance: 0 }),
      e.COMMENT("#cs", "#ce"),
      e.COMMENT("#comments-start", "#comments-end")
    ] }, a = { begin: "\\$[A-z0-9_]+" }, l = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        {
          begin: /'/,
          end: /'/,
          contains: [
            {
              begin: /''/,
              relevance: 0
            }
          ]
        }
      ]
    }, c = { variants: [
      e.BINARY_NUMBER_MODE,
      e.C_NUMBER_MODE
    ] }, f = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: n },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          keywords: { keyword: "include" },
          end: "$",
          contains: [
            l,
            {
              className: "string",
              variants: [
                {
                  begin: "<",
                  end: ">"
                },
                {
                  begin: /"/,
                  end: /"/,
                  contains: [
                    {
                      begin: /""/,
                      relevance: 0
                    }
                  ]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [
                    {
                      begin: /''/,
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        l,
        o
      ]
    }, m = {
      className: "symbol",
      // begin: '@',
      // end: '$',
      // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',
      // relevance: 5
      begin: "@[A-z0-9_]+"
    }, b = {
      beginKeywords: "Func",
      end: "$",
      illegal: "\\$|\\[|%",
      contains: [
        e.inherit(e.UNDERSCORE_TITLE_MODE, { className: "title.function" }),
        {
          className: "params",
          begin: "\\(",
          end: "\\)",
          contains: [
            a,
            l,
            c
          ]
        }
      ]
    };
    return {
      name: "AutoIt",
      case_insensitive: !0,
      illegal: /\/\*/,
      keywords: {
        keyword: r,
        built_in: s,
        literal: i
      },
      contains: [
        o,
        a,
        l,
        c,
        f,
        m,
        b
      ]
    };
  }
  return cu = t, cu;
}
var uu, hg;
function TA() {
  if (hg)
    return uu;
  hg = 1;
  function t(e) {
    return {
      name: "AVR Assembly",
      case_insensitive: !0,
      keywords: {
        $pattern: "\\.?" + e.IDENT_RE,
        keyword: (
          /* mnemonic */
          "adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub subi swap tst wdr"
        ),
        built_in: (
          /* general purpose registers */
          "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf"
        ),
        meta: ".byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list .listmac .macro .nolist .org .set"
      },
      contains: [
        e.C_BLOCK_COMMENT_MODE,
        e.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        e.C_NUMBER_MODE,
        // 0x..., decimal, float
        e.BINARY_NUMBER_MODE,
        // 0b...
        {
          className: "number",
          begin: "\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)"
          // $..., 0o...
        },
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          illegal: "[^\\\\][^']"
        },
        {
          className: "symbol",
          begin: "^[A-Za-z0-9_.$]+:"
        },
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        {
          // substitution within a macro
          className: "subst",
          begin: "@[0-9]+"
        }
      ]
    };
  }
  return uu = t, uu;
}
var du, mg;
function CA() {
  if (mg)
    return du;
  mg = 1;
  function t(e) {
    const r = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d#@][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    }, n = "BEGIN END if else while do for in break continue delete next nextfile function func exit|10", i = {
      className: "string",
      contains: [e.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: /(u|b)?r?'''/,
          end: /'''/,
          relevance: 10
        },
        {
          begin: /(u|b)?r?"""/,
          end: /"""/,
          relevance: 10
        },
        {
          begin: /(u|r|ur)'/,
          end: /'/,
          relevance: 10
        },
        {
          begin: /(u|r|ur)"/,
          end: /"/,
          relevance: 10
        },
        {
          begin: /(b|br)'/,
          end: /'/
        },
        {
          begin: /(b|br)"/,
          end: /"/
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE
      ]
    };
    return {
      name: "Awk",
      keywords: { keyword: n },
      contains: [
        r,
        i,
        e.REGEXP_MODE,
        e.HASH_COMMENT_MODE,
        e.NUMBER_MODE
      ]
    };
  }
  return du = t, du;
}
var fu, gg;
function wA() {
  if (gg)
    return fu;
  gg = 1;
  function t(e) {
    const r = e.UNDERSCORE_IDENT_RE, o = {
      keyword: [
        "abstract",
        "as",
        "asc",
        "avg",
        "break",
        "breakpoint",
        "by",
        "byref",
        "case",
        "catch",
        "changecompany",
        "class",
        "client",
        "client",
        "common",
        "const",
        "continue",
        "count",
        "crosscompany",
        "delegate",
        "delete_from",
        "desc",
        "display",
        "div",
        "do",
        "edit",
        "else",
        "eventhandler",
        "exists",
        "extends",
        "final",
        "finally",
        "firstfast",
        "firstonly",
        "firstonly1",
        "firstonly10",
        "firstonly100",
        "firstonly1000",
        "flush",
        "for",
        "forceliterals",
        "forcenestedloop",
        "forceplaceholders",
        "forceselectorder",
        "forupdate",
        "from",
        "generateonly",
        "group",
        "hint",
        "if",
        "implements",
        "in",
        "index",
        "insert_recordset",
        "interface",
        "internal",
        "is",
        "join",
        "like",
        "maxof",
        "minof",
        "mod",
        "namespace",
        "new",
        "next",
        "nofetch",
        "notexists",
        "optimisticlock",
        "order",
        "outer",
        "pessimisticlock",
        "print",
        "private",
        "protected",
        "public",
        "readonly",
        "repeatableread",
        "retry",
        "return",
        "reverse",
        "select",
        "server",
        "setting",
        "static",
        "sum",
        "super",
        "switch",
        "this",
        "throw",
        "try",
        "ttsabort",
        "ttsbegin",
        "ttscommit",
        "unchecked",
        "update_recordset",
        "using",
        "validtimestate",
        "void",
        "where",
        "while"
      ],
      built_in: [
        "anytype",
        "boolean",
        "byte",
        "char",
        "container",
        "date",
        "double",
        "enum",
        "guid",
        "int",
        "int64",
        "long",
        "real",
        "short",
        "str",
        "utcdatetime",
        "var"
      ],
      literal: [
        "default",
        "false",
        "null",
        "true"
      ]
    }, a = {
      variants: [
        { match: [
          /(class|interface)\s+/,
          r,
          /\s+(extends|implements)\s+/,
          r
        ] },
        { match: [
          /class\s+/,
          r
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: o
    };
    return {
      name: "X++",
      aliases: ["x++"],
      keywords: o,
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        a
      ]
    };
  }
  return fu = t, fu;
}
var pu, $g;
function AA() {
  if ($g)
    return pu;
  $g = 1;
  function t(e) {
    const r = e.regex, n = {}, i = {
      begin: /\$\{/,
      end: /\}/,
      contains: [
        "self",
        {
          begin: /:-/,
          contains: [n]
        }
        // default values
      ]
    };
    Object.assign(n, {
      className: "variable",
      variants: [
        { begin: r.concat(
          /\$[\w\d#@][\w\d_]*/,
          // negative look-ahead tries to avoid matching patterns that are not
          // Perl at all like $ident$, @ident@, etc.
          "(?![\\w\\d])(?![$])"
        ) },
        i
      ]
    });
    const s = {
      className: "subst",
      begin: /\$\(/,
      end: /\)/,
      contains: [e.BACKSLASH_ESCAPE]
    }, o = {
      begin: /<<-?\s*(?=\w+)/,
      starts: { contains: [
        e.END_SAME_AS_BEGIN({
          begin: /(\w+)/,
          end: /(\w+)/,
          className: "string"
        })
      ] }
    }, a = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        e.BACKSLASH_ESCAPE,
        n,
        s
      ]
    };
    s.contains.push(a);
    const l = {
      match: /\\"/
    }, c = {
      className: "string",
      begin: /'/,
      end: /'/
    }, f = {
      match: /\\'/
    }, m = {
      begin: /\$?\(\(/,
      end: /\)\)/,
      contains: [
        {
          begin: /\d+#[0-9a-f]+/,
          className: "number"
        },
        e.NUMBER_MODE,
        n
      ]
    }, b = [
      "fish",
      "bash",
      "zsh",
      "sh",
      "csh",
      "ksh",
      "tcsh",
      "dash",
      "scsh"
    ], C = e.SHEBANG({
      binary: `(${b.join("|")})`,
      relevance: 10
    }), N = {
      className: "function",
      begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
      returnBegin: !0,
      contains: [e.inherit(e.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
      relevance: 0
    }, z = [
      "if",
      "then",
      "else",
      "elif",
      "fi",
      "for",
      "while",
      "until",
      "in",
      "do",
      "done",
      "case",
      "esac",
      "function",
      "select"
    ], A = [
      "true",
      "false"
    ], Q = { match: /(\/[a-z._-]+)+/ }, Te = [
      "break",
      "cd",
      "continue",
      "eval",
      "exec",
      "exit",
      "export",
      "getopts",
      "hash",
      "pwd",
      "readonly",
      "return",
      "shift",
      "test",
      "times",
      "trap",
      "umask",
      "unset"
    ], ce = [
      "alias",
      "bind",
      "builtin",
      "caller",
      "command",
      "declare",
      "echo",
      "enable",
      "help",
      "let",
      "local",
      "logout",
      "mapfile",
      "printf",
      "read",
      "readarray",
      "source",
      "type",
      "typeset",
      "ulimit",
      "unalias"
    ], ge = [
      "autoload",
      "bg",
      "bindkey",
      "bye",
      "cap",
      "chdir",
      "clone",
      "comparguments",
      "compcall",
      "compctl",
      "compdescribe",
      "compfiles",
      "compgroups",
      "compquote",
      "comptags",
      "comptry",
      "compvalues",
      "dirs",
      "disable",
      "disown",
      "echotc",
      "echoti",
      "emulate",
      "fc",
      "fg",
      "float",
      "functions",
      "getcap",
      "getln",
      "history",
      "integer",
      "jobs",
      "kill",
      "limit",
      "log",
      "noglob",
      "popd",
      "print",
      "pushd",
      "pushln",
      "rehash",
      "sched",
      "setcap",
      "setopt",
      "stat",
      "suspend",
      "ttyctl",
      "unfunction",
      "unhash",
      "unlimit",
      "unsetopt",
      "vared",
      "wait",
      "whence",
      "where",
      "which",
      "zcompile",
      "zformat",
      "zftp",
      "zle",
      "zmodload",
      "zparseopts",
      "zprof",
      "zpty",
      "zregexparse",
      "zsocket",
      "zstyle",
      "ztcp"
    ], Y = [
      "chcon",
      "chgrp",
      "chown",
      "chmod",
      "cp",
      "dd",
      "df",
      "dir",
      "dircolors",
      "ln",
      "ls",
      "mkdir",
      "mkfifo",
      "mknod",
      "mktemp",
      "mv",
      "realpath",
      "rm",
      "rmdir",
      "shred",
      "sync",
      "touch",
      "truncate",
      "vdir",
      "b2sum",
      "base32",
      "base64",
      "cat",
      "cksum",
      "comm",
      "csplit",
      "cut",
      "expand",
      "fmt",
      "fold",
      "head",
      "join",
      "md5sum",
      "nl",
      "numfmt",
      "od",
      "paste",
      "ptx",
      "pr",
      "sha1sum",
      "sha224sum",
      "sha256sum",
      "sha384sum",
      "sha512sum",
      "shuf",
      "sort",
      "split",
      "sum",
      "tac",
      "tail",
      "tr",
      "tsort",
      "unexpand",
      "uniq",
      "wc",
      "arch",
      "basename",
      "chroot",
      "date",
      "dirname",
      "du",
      "echo",
      "env",
      "expr",
      "factor",
      // "false", // keyword literal already
      "groups",
      "hostid",
      "id",
      "link",
      "logname",
      "nice",
      "nohup",
      "nproc",
      "pathchk",
      "pinky",
      "printenv",
      "printf",
      "pwd",
      "readlink",
      "runcon",
      "seq",
      "sleep",
      "stat",
      "stdbuf",
      "stty",
      "tee",
      "test",
      "timeout",
      // "true", // keyword literal already
      "tty",
      "uname",
      "unlink",
      "uptime",
      "users",
      "who",
      "whoami",
      "yes"
    ];
    return {
      name: "Bash",
      aliases: ["sh"],
      keywords: {
        $pattern: /\b[a-z][a-z0-9._-]+\b/,
        keyword: z,
        literal: A,
        built_in: [
          ...Te,
          ...ce,
          // Shell modifiers
          "set",
          "shopt",
          ...ge,
          ...Y
        ]
      },
      contains: [
        C,
        // to catch known shells and boost relevancy
        e.SHEBANG(),
        // to catch unknown shells but still highlight the shebang
        N,
        m,
        e.HASH_COMMENT_MODE,
        o,
        Q,
        a,
        l,
        c,
        f,
        n
      ]
    };
  }
  return pu = t, pu;
}
var _u, bg;
function RA() {
  if (bg)
    return _u;
  bg = 1;
  function t(e) {
    return {
      name: "BASIC",
      case_insensitive: !0,
      illegal: "^.",
      // Support explicitly typed variables that end with $%! or #.
      keywords: {
        $pattern: "[a-zA-Z][a-zA-Z0-9_$%!#]*",
        keyword: [
          "ABS",
          "ASC",
          "AND",
          "ATN",
          "AUTO|0",
          "BEEP",
          "BLOAD|10",
          "BSAVE|10",
          "CALL",
          "CALLS",
          "CDBL",
          "CHAIN",
          "CHDIR",
          "CHR$|10",
          "CINT",
          "CIRCLE",
          "CLEAR",
          "CLOSE",
          "CLS",
          "COLOR",
          "COM",
          "COMMON",
          "CONT",
          "COS",
          "CSNG",
          "CSRLIN",
          "CVD",
          "CVI",
          "CVS",
          "DATA",
          "DATE$",
          "DEFDBL",
          "DEFINT",
          "DEFSNG",
          "DEFSTR",
          "DEF|0",
          "SEG",
          "USR",
          "DELETE",
          "DIM",
          "DRAW",
          "EDIT",
          "END",
          "ENVIRON",
          "ENVIRON$",
          "EOF",
          "EQV",
          "ERASE",
          "ERDEV",
          "ERDEV$",
          "ERL",
          "ERR",
          "ERROR",
          "EXP",
          "FIELD",
          "FILES",
          "FIX",
          "FOR|0",
          "FRE",
          "GET",
          "GOSUB|10",
          "GOTO",
          "HEX$",
          "IF",
          "THEN",
          "ELSE|0",
          "INKEY$",
          "INP",
          "INPUT",
          "INPUT#",
          "INPUT$",
          "INSTR",
          "IMP",
          "INT",
          "IOCTL",
          "IOCTL$",
          "KEY",
          "ON",
          "OFF",
          "LIST",
          "KILL",
          "LEFT$",
          "LEN",
          "LET",
          "LINE",
          "LLIST",
          "LOAD",
          "LOC",
          "LOCATE",
          "LOF",
          "LOG",
          "LPRINT",
          "USING",
          "LSET",
          "MERGE",
          "MID$",
          "MKDIR",
          "MKD$",
          "MKI$",
          "MKS$",
          "MOD",
          "NAME",
          "NEW",
          "NEXT",
          "NOISE",
          "NOT",
          "OCT$",
          "ON",
          "OR",
          "PEN",
          "PLAY",
          "STRIG",
          "OPEN",
          "OPTION",
          "BASE",
          "OUT",
          "PAINT",
          "PALETTE",
          "PCOPY",
          "PEEK",
          "PMAP",
          "POINT",
          "POKE",
          "POS",
          "PRINT",
          "PRINT]",
          "PSET",
          "PRESET",
          "PUT",
          "RANDOMIZE",
          "READ",
          "REM",
          "RENUM",
          "RESET|0",
          "RESTORE",
          "RESUME",
          "RETURN|0",
          "RIGHT$",
          "RMDIR",
          "RND",
          "RSET",
          "RUN",
          "SAVE",
          "SCREEN",
          "SGN",
          "SHELL",
          "SIN",
          "SOUND",
          "SPACE$",
          "SPC",
          "SQR",
          "STEP",
          "STICK",
          "STOP",
          "STR$",
          "STRING$",
          "SWAP",
          "SYSTEM",
          "TAB",
          "TAN",
          "TIME$",
          "TIMER",
          "TROFF",
          "TRON",
          "TO",
          "USR",
          "VAL",
          "VARPTR",
          "VARPTR$",
          "VIEW",
          "WAIT",
          "WHILE",
          "WEND",
          "WIDTH",
          "WINDOW",
          "WRITE",
          "XOR"
        ]
      },
      contains: [
        e.QUOTE_STRING_MODE,
        e.COMMENT("REM", "$", { relevance: 10 }),
        e.COMMENT("'", "$", { relevance: 0 }),
        {
          // Match line numbers
          className: "symbol",
          begin: "^[0-9]+ ",
          relevance: 10
        },
        {
          // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
          className: "number",
          begin: "\\b\\d+(\\.\\d+)?([edED]\\d+)?[#!]?",
          relevance: 0
        },
        {
          // Match hexadecimal numbers (&Hxxxx)
          className: "number",
          begin: "(&[hH][0-9a-fA-F]{1,4})"
        },
        {
          // Match octal numbers (&Oxxxxxx)
          className: "number",
          begin: "(&[oO][0-7]{1,6})"
        }
      ]
    };
  }
  return _u = t, _u;
}
var hu, Eg;
function xA() {
  if (Eg)
    return hu;
  Eg = 1;
  function t(e) {
    return {
      name: "Backus–Naur Form",
      contains: [
        // Attribute
        {
          className: "attribute",
          begin: /</,
          end: />/
        },
        // Specific
        {
          begin: /::=/,
          end: /$/,
          contains: [
            {
              begin: /</,
              end: />/
            },
            // Common
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            e.APOS_STRING_MODE,
            e.QUOTE_STRING_MODE
          ]
        }
      ]
    };
  }
  return hu = t, hu;
}
var mu, vg;
function NA() {
  if (vg)
    return mu;
  vg = 1;
  function t(e) {
    const r = {
      className: "literal",
      begin: /[+-]+/,
      relevance: 0
    };
    return {
      name: "Brainfuck",
      aliases: ["bf"],
      contains: [
        e.COMMENT(
          /[^\[\]\.,\+\-<> \r\n]/,
          /[\[\]\.,\+\-<> \r\n]/,
          {
            contains: [
              {
                match: /[ ]+[^\[\]\.,\+\-<> \r\n]/,
                relevance: 0
              }
            ],
            returnEnd: !0,
            relevance: 0
          }
        ),
        {
          className: "title",
          begin: "[\\[\\]]",
          relevance: 0
        },
        {
          className: "string",
          begin: "[\\.,]",
          relevance: 0
        },
        {
          // this mode works as the only relevance counter
          // it looks ahead to find the start of a run of literals
          // so only the runs are counted as relevant
          begin: /(?=\+\+|--)/,
          contains: [r]
        },
        r
      ]
    };
  }
  return mu = t, mu;
}
var gu, Sg;
function kA() {
  if (Sg)
    return gu;
  Sg = 1;
  function t(e) {
    const r = e.regex, n = e.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), i = "decltype\\(auto\\)", s = "[a-zA-Z_]\\w*::", a = "(" + i + "|" + r.optional(s) + "[a-zA-Z_]\\w*" + r.optional("<[^<>]+>") + ")", l = {
      className: "type",
      variants: [
        { begin: "\\b[a-z\\d_]*_t\\b" },
        { match: /\batomic_[a-z]{3,6}\b/ }
      ]
    }, f = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(" + "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)" + "|.)",
          end: "'",
          illegal: "."
        },
        e.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    }, m = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01']+)" },
        { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
      ],
      relevance: 0
    }, b = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        e.inherit(f, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        n,
        e.C_BLOCK_COMMENT_MODE
      ]
    }, C = {
      className: "title",
      begin: r.optional(s) + e.IDENT_RE,
      relevance: 0
    }, N = r.optional(s) + e.IDENT_RE + "\\s*\\(", Q = {
      keyword: [
        "asm",
        "auto",
        "break",
        "case",
        "continue",
        "default",
        "do",
        "else",
        "enum",
        "extern",
        "for",
        "fortran",
        "goto",
        "if",
        "inline",
        "register",
        "restrict",
        "return",
        "sizeof",
        "struct",
        "switch",
        "typedef",
        "union",
        "volatile",
        "while",
        "_Alignas",
        "_Alignof",
        "_Atomic",
        "_Generic",
        "_Noreturn",
        "_Static_assert",
        "_Thread_local",
        // aliases
        "alignas",
        "alignof",
        "noreturn",
        "static_assert",
        "thread_local",
        // not a C keyword but is, for all intents and purposes, treated exactly like one.
        "_Pragma"
      ],
      type: [
        "float",
        "double",
        "signed",
        "unsigned",
        "int",
        "short",
        "long",
        "char",
        "void",
        "_Bool",
        "_Complex",
        "_Imaginary",
        "_Decimal32",
        "_Decimal64",
        "_Decimal128",
        // modifiers
        "const",
        "static",
        // aliases
        "complex",
        "bool",
        "imaginary"
      ],
      literal: "true false NULL",
      // TODO: apply hinting work similar to what was done in cpp.js
      built_in: "std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr"
    }, Te = [
      b,
      l,
      n,
      e.C_BLOCK_COMMENT_MODE,
      m,
      f
    ], ce = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: Q,
      contains: Te.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: Q,
          contains: Te.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    }, ge = {
      begin: "(" + a + "[\\*&\\s]+)+" + N,
      returnBegin: !0,
      end: /[{;=]/,
      excludeEnd: !0,
      keywords: Q,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: i,
          keywords: Q,
          relevance: 0
        },
        {
          begin: N,
          returnBegin: !0,
          contains: [e.inherit(C, { className: "title.function" })],
          relevance: 0
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: Q,
          relevance: 0,
          contains: [
            n,
            e.C_BLOCK_COMMENT_MODE,
            f,
            m,
            l,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: Q,
              relevance: 0,
              contains: [
                "self",
                n,
                e.C_BLOCK_COMMENT_MODE,
                f,
                m,
                l
              ]
            }
          ]
        },
        l,
        n,
        e.C_BLOCK_COMMENT_MODE,
        b
      ]
    };
    return {
      name: "C",
      aliases: ["h"],
      keywords: Q,
      // Until differentiations are added between `c` and `cpp`, `c` will
      // not be auto-detected to avoid auto-detect conflicts between C and C++
      disableAutodetect: !0,
      illegal: "</",
      contains: [].concat(
        ce,
        ge,
        Te,
        [
          b,
          {
            begin: e.IDENT_RE + "::",
            keywords: Q
          },
          {
            className: "class",
            beginKeywords: "enum class struct union",
            end: /[{;:<>=]/,
            contains: [
              { beginKeywords: "final class struct" },
              e.TITLE_MODE
            ]
          }
        ]
      ),
      exports: {
        preprocessor: b,
        strings: f,
        keywords: Q
      }
    };
  }
  return gu = t, gu;
}
var $u, yg;
function IA() {
  if (yg)
    return $u;
  yg = 1;
  function t(e) {
    const r = e.regex, n = [
      "div",
      "mod",
      "in",
      "and",
      "or",
      "not",
      "xor",
      "asserterror",
      "begin",
      "case",
      "do",
      "downto",
      "else",
      "end",
      "exit",
      "for",
      "local",
      "if",
      "of",
      "repeat",
      "then",
      "to",
      "until",
      "while",
      "with",
      "var"
    ], i = "false true", s = [
      e.C_LINE_COMMENT_MODE,
      e.COMMENT(
        /\{/,
        /\}/,
        { relevance: 0 }
      ),
      e.COMMENT(
        /\(\*/,
        /\*\)/,
        { relevance: 10 }
      )
    ], o = {
      className: "string",
      begin: /'/,
      end: /'/,
      contains: [{ begin: /''/ }]
    }, a = {
      className: "string",
      begin: /(#\d+)+/
    }, l = {
      className: "number",
      begin: "\\b\\d+(\\.\\d+)?(DT|D|T)",
      relevance: 0
    }, c = {
      className: "string",
      // not a string technically but makes sense to be highlighted in the same style
      begin: '"',
      end: '"'
    }, f = {
      match: [
        /procedure/,
        /\s+/,
        /[a-zA-Z_][\w@]*/,
        /\s*/
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: n,
          contains: [
            o,
            a,
            e.NUMBER_MODE
          ]
        },
        ...s
      ]
    }, m = [
      "Table",
      "Form",
      "Report",
      "Dataport",
      "Codeunit",
      "XMLport",
      "MenuSuite",
      "Page",
      "Query"
    ], b = {
      match: [
        /OBJECT/,
        /\s+/,
        r.either(...m),
        /\s+/,
        /\d+/,
        /\s+(?=[^\s])/,
        /.*/,
        /$/
      ],
      relevance: 3,
      scope: {
        1: "keyword",
        3: "type",
        5: "number",
        7: "title"
      }
    };
    return {
      name: "C/AL",
      case_insensitive: !0,
      keywords: {
        keyword: n,
        literal: i
      },
      illegal: /\/\*/,
      contains: [
        {
          match: /[\w]+(?=\=)/,
          scope: "attribute",
          relevance: 0
        },
        o,
        a,
        l,
        c,
        e.NUMBER_MODE,
        b,
        f
      ]
    };
  }
  return $u = t, $u;
}
var bu, Tg;
function OA() {
  if (Tg)
    return bu;
  Tg = 1;
  function t(e) {
    const r = [
      "struct",
      "enum",
      "interface",
      "union",
      "group",
      "import",
      "using",
      "const",
      "annotation",
      "extends",
      "in",
      "of",
      "on",
      "as",
      "with",
      "from",
      "fixed"
    ], n = [
      "Void",
      "Bool",
      "Int8",
      "Int16",
      "Int32",
      "Int64",
      "UInt8",
      "UInt16",
      "UInt32",
      "UInt64",
      "Float32",
      "Float64",
      "Text",
      "Data",
      "AnyPointer",
      "AnyStruct",
      "Capability",
      "List"
    ], i = [
      "true",
      "false"
    ], s = {
      variants: [
        { match: [
          /(struct|enum|interface)/,
          /\s+/,
          e.IDENT_RE
        ] },
        { match: [
          /extends/,
          /\s*\(/,
          e.IDENT_RE,
          /\s*\)/
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "Cap’n Proto",
      aliases: ["capnp"],
      keywords: {
        keyword: r,
        type: n,
        literal: i
      },
      contains: [
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        e.HASH_COMMENT_MODE,
        {
          className: "meta",
          begin: /@0x[\w\d]{16};/,
          illegal: /\n/
        },
        {
          className: "symbol",
          begin: /@\d+\b/
        },
        s
      ]
    };
  }
  return bu = t, bu;
}
var Eu, Cg;
function DA() {
  if (Cg)
    return Eu;
  Cg = 1;
  function t(e) {
    const r = [
      "assembly",
      "module",
      "package",
      "import",
      "alias",
      "class",
      "interface",
      "object",
      "given",
      "value",
      "assign",
      "void",
      "function",
      "new",
      "of",
      "extends",
      "satisfies",
      "abstracts",
      "in",
      "out",
      "return",
      "break",
      "continue",
      "throw",
      "assert",
      "dynamic",
      "if",
      "else",
      "switch",
      "case",
      "for",
      "while",
      "try",
      "catch",
      "finally",
      "then",
      "let",
      "this",
      "outer",
      "super",
      "is",
      "exists",
      "nonempty"
    ], n = [
      "shared",
      "abstract",
      "formal",
      "default",
      "actual",
      "variable",
      "late",
      "native",
      "deprecated",
      "final",
      "sealed",
      "annotation",
      "suppressWarnings",
      "small"
    ], i = [
      "doc",
      "by",
      "license",
      "see",
      "throws",
      "tagged"
    ], s = {
      className: "subst",
      excludeBegin: !0,
      excludeEnd: !0,
      begin: /``/,
      end: /``/,
      keywords: r,
      relevance: 10
    }, o = [
      {
        // verbatim string
        className: "string",
        begin: '"""',
        end: '"""',
        relevance: 10
      },
      {
        // string literal or template
        className: "string",
        begin: '"',
        end: '"',
        contains: [s]
      },
      {
        // character literal
        className: "string",
        begin: "'",
        end: "'"
      },
      {
        // numeric literal
        className: "number",
        begin: "#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?",
        relevance: 0
      }
    ];
    return s.contains = o, {
      name: "Ceylon",
      keywords: {
        keyword: r.concat(n),
        meta: i
      },
      illegal: "\\$[^01]|#[^0-9a-fA-F]",
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
        {
          // compiler annotation
          className: "meta",
          begin: '@[a-z]\\w*(?::"[^"]*")?'
        }
      ].concat(o)
    };
  }
  return Eu = t, Eu;
}
var vu, wg;
function MA() {
  if (wg)
    return vu;
  wg = 1;
  function t(e) {
    return {
      name: "Clean",
      aliases: [
        "icl",
        "dcl"
      ],
      keywords: {
        keyword: [
          "if",
          "let",
          "in",
          "with",
          "where",
          "case",
          "of",
          "class",
          "instance",
          "otherwise",
          "implementation",
          "definition",
          "system",
          "module",
          "from",
          "import",
          "qualified",
          "as",
          "special",
          "code",
          "inline",
          "foreign",
          "export",
          "ccall",
          "stdcall",
          "generic",
          "derive",
          "infix",
          "infixl",
          "infixr"
        ],
        built_in: "Int Real Char Bool",
        literal: "True False"
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          // relevance booster
          begin: "->|<-[|:]?|#!?|>>=|\\{\\||\\|\\}|:==|=:|<>"
        }
      ]
    };
  }
  return vu = t, vu;
}
var Su, Ag;
function LA() {
  if (Ag)
    return Su;
  Ag = 1;
  function t(e) {
    const r = "a-zA-Z_\\-!.?+*=<>&'", n = "[#]?[" + r + "][" + r + "0-9/;:$#]*", i = "def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord", s = {
      $pattern: n,
      built_in: (
        // Clojure keywords
        i + " cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last drop-while while intern condp case reduced cycle split-at split-with repeat replicate iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter monitor-exit macroexpand macroexpand-1 for dosync and or when when-not when-let comp juxt partial sequence memoize constantly complement identity assert peek pop doto proxy first rest cons cast coll last butlast sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize"
      )
    }, o = {
      begin: n,
      relevance: 0
    }, a = {
      scope: "number",
      relevance: 0,
      variants: [
        { match: /[-+]?0[xX][0-9a-fA-F]+N?/ },
        // hexadecimal                 // 0x2a
        { match: /[-+]?0[0-7]+N?/ },
        // octal                       // 052
        { match: /[-+]?[1-9][0-9]?[rR][0-9a-zA-Z]+N?/ },
        // variable radix from 2 to 36 // 2r101010, 8r52, 36r16
        { match: /[-+]?[0-9]+\/[0-9]+N?/ },
        // ratio                       // 1/2
        { match: /[-+]?[0-9]+((\.[0-9]*([eE][+-]?[0-9]+)?M?)|([eE][+-]?[0-9]+M?|M))/ },
        // float        // 0.42 4.2E-1M 42E1 42M
        { match: /[-+]?([1-9][0-9]*|0)N?/ }
        // int (don't match leading 0) // 42 42N
      ]
    }, l = {
      scope: "character",
      variants: [
        { match: /\\o[0-3]?[0-7]{1,2}/ },
        // Unicode Octal 0 - 377
        { match: /\\u[0-9a-fA-F]{4}/ },
        // Unicode Hex 0000 - FFFF
        { match: /\\(newline|space|tab|formfeed|backspace|return)/ },
        // special characters
        {
          match: /\\\S/,
          relevance: 0
        }
        // any non-whitespace char
      ]
    }, c = {
      scope: "regex",
      begin: /#"/,
      end: /"/,
      contains: [e.BACKSLASH_ESCAPE]
    }, f = e.inherit(e.QUOTE_STRING_MODE, { illegal: null }), m = {
      scope: "punctuation",
      match: /,/,
      relevance: 0
    }, b = e.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    ), C = {
      className: "literal",
      begin: /\b(true|false|nil)\b/
    }, N = {
      begin: "\\[|(#::?" + n + ")?\\{",
      end: "[\\]\\}]",
      relevance: 0
    }, z = {
      className: "symbol",
      begin: "[:]{1,2}" + n
    }, A = {
      begin: "\\(",
      end: "\\)"
    }, Q = {
      endsWithParent: !0,
      relevance: 0
    }, Te = {
      keywords: s,
      className: "name",
      begin: n,
      relevance: 0,
      starts: Q
    }, ce = [
      m,
      A,
      l,
      c,
      f,
      b,
      z,
      N,
      a,
      C,
      o
    ], ge = {
      beginKeywords: i,
      keywords: {
        $pattern: n,
        keyword: i
      },
      end: '(\\[|#|\\d|"|:|\\{|\\)|\\(|$)',
      contains: [
        {
          className: "title",
          begin: n,
          relevance: 0,
          excludeEnd: !0,
          // we can only have a single title
          endsParent: !0
        }
      ].concat(ce)
    };
    return A.contains = [
      ge,
      Te,
      Q
    ], Q.contains = ce, N.contains = ce, {
      name: "Clojure",
      aliases: [
        "clj",
        "edn"
      ],
      illegal: /\S/,
      contains: [
        m,
        A,
        l,
        c,
        f,
        b,
        z,
        N,
        a,
        C
      ]
    };
  }
  return Su = t, Su;
}
var yu, Rg;
function PA() {
  if (Rg)
    return yu;
  Rg = 1;
  function t(e) {
    return {
      name: "Clojure REPL",
      contains: [
        {
          className: "meta.prompt",
          begin: /^([\w.-]+|\s*#_)?=>/,
          starts: {
            end: /$/,
            subLanguage: "clojure"
          }
        }
      ]
    };
  }
  return yu = t, yu;
}
var Tu, xg;
function FA() {
  if (xg)
    return Tu;
  xg = 1;
  function t(e) {
    return {
      name: "CMake",
      aliases: ["cmake.in"],
      case_insensitive: !0,
      keywords: { keyword: (
        // scripting commands
        "break cmake_host_system_information cmake_minimum_required cmake_parse_arguments cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro endwhile execute_process file find_file find_library find_package find_path find_program foreach function get_cmake_property get_directory_property get_filename_component get_property if include include_guard list macro mark_as_advanced math message option return separate_arguments set_directory_properties set_property set site_name string unset variable_watch while add_compile_definitions add_compile_options add_custom_command add_custom_target add_definitions add_dependencies add_executable add_library add_link_options add_subdirectory add_test aux_source_directory build_command create_test_sourcelist define_property enable_language enable_testing export fltk_wrap_ui get_source_file_property get_target_property get_test_property include_directories include_external_msproject include_regular_expression install link_directories link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions set_source_files_properties set_target_properties set_tests_properties source_group target_compile_definitions target_compile_features target_compile_options target_include_directories target_link_directories target_link_libraries target_link_options target_sources try_compile try_run ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit ctest_test ctest_update ctest_upload build_name exec_program export_library_dependencies install_files install_programs install_targets load_command make_directory output_required_files remove subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or not command policy target test exists is_newer_than is_directory is_symlink is_absolute matches less greater equal less_equal greater_equal strless strgreater strequal strless_equal strgreater_equal version_less version_greater version_equal version_less_equal version_greater_equal in_list defined"
      ) },
      contains: [
        {
          className: "variable",
          begin: /\$\{/,
          end: /\}/
        },
        e.COMMENT(/#\[\[/, /]]/),
        e.HASH_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE
      ]
    };
  }
  return Tu = t, Tu;
}
var Cu, Ng;
function BA() {
  if (Ng)
    return Cu;
  Ng = 1;
  const t = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ], e = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], r = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], n = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], i = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], s = [].concat(
    i,
    r,
    n
  );
  function o(a) {
    const l = [
      "npm",
      "print"
    ], c = [
      "yes",
      "no",
      "on",
      "off"
    ], f = [
      "then",
      "unless",
      "until",
      "loop",
      "by",
      "when",
      "and",
      "or",
      "is",
      "isnt",
      "not"
    ], m = [
      "var",
      "const",
      "let",
      "function",
      "static"
    ], b = (Y) => (fe) => !Y.includes(fe), C = {
      keyword: t.concat(f).filter(b(m)),
      literal: e.concat(c),
      built_in: s.concat(l)
    }, N = "[A-Za-z$_][0-9A-Za-z$_]*", z = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: C
    }, A = [
      a.BINARY_NUMBER_MODE,
      a.inherit(a.C_NUMBER_MODE, { starts: {
        end: "(\\s*/)?",
        relevance: 0
      } }),
      // a number tries to eat the following slash to prevent treating it as a regexp
      {
        className: "string",
        variants: [
          {
            begin: /'''/,
            end: /'''/,
            contains: [a.BACKSLASH_ESCAPE]
          },
          {
            begin: /'/,
            end: /'/,
            contains: [a.BACKSLASH_ESCAPE]
          },
          {
            begin: /"""/,
            end: /"""/,
            contains: [
              a.BACKSLASH_ESCAPE,
              z
            ]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              a.BACKSLASH_ESCAPE,
              z
            ]
          }
        ]
      },
      {
        className: "regexp",
        variants: [
          {
            begin: "///",
            end: "///",
            contains: [
              z,
              a.HASH_COMMENT_MODE
            ]
          },
          {
            begin: "//[gim]{0,3}(?=\\W)",
            relevance: 0
          },
          {
            // regex can't start with space to parse x / 2 / 3 as two divisions
            // regex can't start with *, and it supports an "illegal" in the main mode
            begin: /\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/
          }
        ]
      },
      {
        begin: "@" + N
        // relevance booster
      },
      {
        subLanguage: "javascript",
        excludeBegin: !0,
        excludeEnd: !0,
        variants: [
          {
            begin: "```",
            end: "```"
          },
          {
            begin: "`",
            end: "`"
          }
        ]
      }
    ];
    z.contains = A;
    const Q = a.inherit(a.TITLE_MODE, { begin: N }), Te = "(\\(.*\\)\\s*)?\\B[-=]>", ce = {
      className: "params",
      begin: "\\([^\\(]",
      returnBegin: !0,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: C,
          contains: ["self"].concat(A)
        }
      ]
    }, ge = {
      variants: [
        { match: [
          /class\s+/,
          N,
          /\s+extends\s+/,
          N
        ] },
        { match: [
          /class\s+/,
          N
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: C
    };
    return {
      name: "CoffeeScript",
      aliases: [
        "coffee",
        "cson",
        "iced"
      ],
      keywords: C,
      illegal: /\/\*/,
      contains: [
        ...A,
        a.COMMENT("###", "###"),
        a.HASH_COMMENT_MODE,
        {
          className: "function",
          begin: "^\\s*" + N + "\\s*=\\s*" + Te,
          end: "[-=]>",
          returnBegin: !0,
          contains: [
            Q,
            ce
          ]
        },
        {
          // anonymous function start
          begin: /[:\(,=]\s*/,
          relevance: 0,
          contains: [
            {
              className: "function",
              begin: Te,
              end: "[-=]>",
              returnBegin: !0,
              contains: [ce]
            }
          ]
        },
        ge,
        {
          begin: N + ":",
          end: ":",
          returnBegin: !0,
          returnEnd: !0,
          relevance: 0
        }
      ]
    };
  }
  return Cu = o, Cu;
}
var wu, kg;
function UA() {
  if (kg)
    return wu;
  kg = 1;
  function t(e) {
    return {
      name: "Coq",
      keywords: {
        keyword: [
          "_|0",
          "as",
          "at",
          "cofix",
          "else",
          "end",
          "exists",
          "exists2",
          "fix",
          "for",
          "forall",
          "fun",
          "if",
          "IF",
          "in",
          "let",
          "match",
          "mod",
          "Prop",
          "return",
          "Set",
          "then",
          "Type",
          "using",
          "where",
          "with",
          "Abort",
          "About",
          "Add",
          "Admit",
          "Admitted",
          "All",
          "Arguments",
          "Assumptions",
          "Axiom",
          "Back",
          "BackTo",
          "Backtrack",
          "Bind",
          "Blacklist",
          "Canonical",
          "Cd",
          "Check",
          "Class",
          "Classes",
          "Close",
          "Coercion",
          "Coercions",
          "CoFixpoint",
          "CoInductive",
          "Collection",
          "Combined",
          "Compute",
          "Conjecture",
          "Conjectures",
          "Constant",
          "constr",
          "Constraint",
          "Constructors",
          "Context",
          "Corollary",
          "CreateHintDb",
          "Cut",
          "Declare",
          "Defined",
          "Definition",
          "Delimit",
          "Dependencies",
          "Dependent",
          "Derive",
          "Drop",
          "eauto",
          "End",
          "Equality",
          "Eval",
          "Example",
          "Existential",
          "Existentials",
          "Existing",
          "Export",
          "exporting",
          "Extern",
          "Extract",
          "Extraction",
          "Fact",
          "Field",
          "Fields",
          "File",
          "Fixpoint",
          "Focus",
          "for",
          "From",
          "Function",
          "Functional",
          "Generalizable",
          "Global",
          "Goal",
          "Grab",
          "Grammar",
          "Graph",
          "Guarded",
          "Heap",
          "Hint",
          "HintDb",
          "Hints",
          "Hypotheses",
          "Hypothesis",
          "ident",
          "Identity",
          "If",
          "Immediate",
          "Implicit",
          "Import",
          "Include",
          "Inductive",
          "Infix",
          "Info",
          "Initial",
          "Inline",
          "Inspect",
          "Instance",
          "Instances",
          "Intro",
          "Intros",
          "Inversion",
          "Inversion_clear",
          "Language",
          "Left",
          "Lemma",
          "Let",
          "Libraries",
          "Library",
          "Load",
          "LoadPath",
          "Local",
          "Locate",
          "Ltac",
          "ML",
          "Mode",
          "Module",
          "Modules",
          "Monomorphic",
          "Morphism",
          "Next",
          "NoInline",
          "Notation",
          "Obligation",
          "Obligations",
          "Opaque",
          "Open",
          "Optimize",
          "Options",
          "Parameter",
          "Parameters",
          "Parametric",
          "Path",
          "Paths",
          "pattern",
          "Polymorphic",
          "Preterm",
          "Print",
          "Printing",
          "Program",
          "Projections",
          "Proof",
          "Proposition",
          "Pwd",
          "Qed",
          "Quit",
          "Rec",
          "Record",
          "Recursive",
          "Redirect",
          "Relation",
          "Remark",
          "Remove",
          "Require",
          "Reserved",
          "Reset",
          "Resolve",
          "Restart",
          "Rewrite",
          "Right",
          "Ring",
          "Rings",
          "Save",
          "Scheme",
          "Scope",
          "Scopes",
          "Script",
          "Search",
          "SearchAbout",
          "SearchHead",
          "SearchPattern",
          "SearchRewrite",
          "Section",
          "Separate",
          "Set",
          "Setoid",
          "Show",
          "Solve",
          "Sorted",
          "Step",
          "Strategies",
          "Strategy",
          "Structure",
          "SubClass",
          "Table",
          "Tables",
          "Tactic",
          "Term",
          "Test",
          "Theorem",
          "Time",
          "Timeout",
          "Transparent",
          "Type",
          "Typeclasses",
          "Types",
          "Undelimit",
          "Undo",
          "Unfocus",
          "Unfocused",
          "Unfold",
          "Universe",
          "Universes",
          "Unset",
          "Unshelve",
          "using",
          "Variable",
          "Variables",
          "Variant",
          "Verbose",
          "Visibility",
          "where",
          "with"
        ],
        built_in: [
          "abstract",
          "absurd",
          "admit",
          "after",
          "apply",
          "as",
          "assert",
          "assumption",
          "at",
          "auto",
          "autorewrite",
          "autounfold",
          "before",
          "bottom",
          "btauto",
          "by",
          "case",
          "case_eq",
          "cbn",
          "cbv",
          "change",
          "classical_left",
          "classical_right",
          "clear",
          "clearbody",
          "cofix",
          "compare",
          "compute",
          "congruence",
          "constr_eq",
          "constructor",
          "contradict",
          "contradiction",
          "cut",
          "cutrewrite",
          "cycle",
          "decide",
          "decompose",
          "dependent",
          "destruct",
          "destruction",
          "dintuition",
          "discriminate",
          "discrR",
          "do",
          "double",
          "dtauto",
          "eapply",
          "eassumption",
          "eauto",
          "ecase",
          "econstructor",
          "edestruct",
          "ediscriminate",
          "eelim",
          "eexact",
          "eexists",
          "einduction",
          "einjection",
          "eleft",
          "elim",
          "elimtype",
          "enough",
          "equality",
          "erewrite",
          "eright",
          "esimplify_eq",
          "esplit",
          "evar",
          "exact",
          "exactly_once",
          "exfalso",
          "exists",
          "f_equal",
          "fail",
          "field",
          "field_simplify",
          "field_simplify_eq",
          "first",
          "firstorder",
          "fix",
          "fold",
          "fourier",
          "functional",
          "generalize",
          "generalizing",
          "gfail",
          "give_up",
          "has_evar",
          "hnf",
          "idtac",
          "in",
          "induction",
          "injection",
          "instantiate",
          "intro",
          "intro_pattern",
          "intros",
          "intuition",
          "inversion",
          "inversion_clear",
          "is_evar",
          "is_var",
          "lapply",
          "lazy",
          "left",
          "lia",
          "lra",
          "move",
          "native_compute",
          "nia",
          "nsatz",
          "omega",
          "once",
          "pattern",
          "pose",
          "progress",
          "proof",
          "psatz",
          "quote",
          "record",
          "red",
          "refine",
          "reflexivity",
          "remember",
          "rename",
          "repeat",
          "replace",
          "revert",
          "revgoals",
          "rewrite",
          "rewrite_strat",
          "right",
          "ring",
          "ring_simplify",
          "rtauto",
          "set",
          "setoid_reflexivity",
          "setoid_replace",
          "setoid_rewrite",
          "setoid_symmetry",
          "setoid_transitivity",
          "shelve",
          "shelve_unifiable",
          "simpl",
          "simple",
          "simplify_eq",
          "solve",
          "specialize",
          "split",
          "split_Rabs",
          "split_Rmult",
          "stepl",
          "stepr",
          "subst",
          "sum",
          "swap",
          "symmetry",
          "tactic",
          "tauto",
          "time",
          "timeout",
          "top",
          "transitivity",
          "trivial",
          "try",
          "tryif",
          "unfold",
          "unify",
          "until",
          "using",
          "vm_compute",
          "with"
        ]
      },
      contains: [
        e.QUOTE_STRING_MODE,
        e.COMMENT("\\(\\*", "\\*\\)"),
        e.C_NUMBER_MODE,
        {
          className: "type",
          excludeBegin: !0,
          begin: "\\|\\s*",
          end: "\\w+"
        },
        {
          // relevance booster
          begin: /[-=]>/
        }
      ]
    };
  }
  return wu = t, wu;
}
var Au, Ig;
function qA() {
  if (Ig)
    return Au;
  Ig = 1;
  function t(e) {
    return {
      name: "Caché Object Script",
      case_insensitive: !0,
      aliases: ["cls"],
      keywords: "property parameter class classmethod clientmethod extends as break catch close continue do d|0 else elseif for goto halt hang h|0 if job j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 tcommit throw trollback try tstart use view while write w|0 xecute x|0 zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit zsync ascii",
      contains: [
        {
          className: "number",
          begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
          relevance: 0
        },
        {
          className: "string",
          variants: [
            {
              begin: '"',
              end: '"',
              contains: [
                {
                  // escaped
                  begin: '""',
                  relevance: 0
                }
              ]
            }
          ]
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "comment",
          begin: /;/,
          end: "$",
          relevance: 0
        },
        {
          // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)
          className: "built_in",
          begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
        },
        {
          // Macro command: quit $$$OK
          className: "built_in",
          begin: /\$\$\$[a-zA-Z]+/
        },
        {
          // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer
          className: "built_in",
          begin: /%[a-z]+(?:\.[a-z]+)*/
        },
        {
          // Global variable: set ^globalName = 12 write ^globalName
          className: "symbol",
          begin: /\^%?[a-zA-Z][\w]*/
        },
        {
          // Some control constructions: do ##class(Package.ClassName).Method(), ##super()
          className: "keyword",
          begin: /##class|##super|#define|#dim/
        },
        // sub-languages: are not fully supported by hljs by 11/15/2015
        // left for the future implementation.
        {
          begin: /&sql\(/,
          end: /\)/,
          excludeBegin: !0,
          excludeEnd: !0,
          subLanguage: "sql"
        },
        {
          begin: /&(js|jscript|javascript)</,
          end: />/,
          excludeBegin: !0,
          excludeEnd: !0,
          subLanguage: "javascript"
        },
        {
          // this brakes first and last tag, but this is the only way to embed a valid html
          begin: /&html<\s*</,
          end: />\s*>/,
          subLanguage: "xml"
        }
      ]
    };
  }
  return Au = t, Au;
}
var Ru, Og;
function zA() {
  if (Og)
    return Ru;
  Og = 1;
  function t(e) {
    const r = e.regex, n = e.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), i = "decltype\\(auto\\)", s = "[a-zA-Z_]\\w*::", a = "(?!struct)(" + i + "|" + r.optional(s) + "[a-zA-Z_]\\w*" + r.optional("<[^<>]+>") + ")", l = {
      className: "type",
      begin: "\\b[a-z\\d_]*_t\\b"
    }, f = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(" + "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)" + "|.)",
          end: "'",
          illegal: "."
        },
        e.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    }, m = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01']+)" },
        { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
      ],
      relevance: 0
    }, b = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        e.inherit(f, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        n,
        e.C_BLOCK_COMMENT_MODE
      ]
    }, C = {
      className: "title",
      begin: r.optional(s) + e.IDENT_RE,
      relevance: 0
    }, N = r.optional(s) + e.IDENT_RE + "\\s*\\(", z = [
      "alignas",
      "alignof",
      "and",
      "and_eq",
      "asm",
      "atomic_cancel",
      "atomic_commit",
      "atomic_noexcept",
      "auto",
      "bitand",
      "bitor",
      "break",
      "case",
      "catch",
      "class",
      "co_await",
      "co_return",
      "co_yield",
      "compl",
      "concept",
      "const_cast|10",
      "consteval",
      "constexpr",
      "constinit",
      "continue",
      "decltype",
      "default",
      "delete",
      "do",
      "dynamic_cast|10",
      "else",
      "enum",
      "explicit",
      "export",
      "extern",
      "false",
      "final",
      "for",
      "friend",
      "goto",
      "if",
      "import",
      "inline",
      "module",
      "mutable",
      "namespace",
      "new",
      "noexcept",
      "not",
      "not_eq",
      "nullptr",
      "operator",
      "or",
      "or_eq",
      "override",
      "private",
      "protected",
      "public",
      "reflexpr",
      "register",
      "reinterpret_cast|10",
      "requires",
      "return",
      "sizeof",
      "static_assert",
      "static_cast|10",
      "struct",
      "switch",
      "synchronized",
      "template",
      "this",
      "thread_local",
      "throw",
      "transaction_safe",
      "transaction_safe_dynamic",
      "true",
      "try",
      "typedef",
      "typeid",
      "typename",
      "union",
      "using",
      "virtual",
      "volatile",
      "while",
      "xor",
      "xor_eq"
    ], A = [
      "bool",
      "char",
      "char16_t",
      "char32_t",
      "char8_t",
      "double",
      "float",
      "int",
      "long",
      "short",
      "void",
      "wchar_t",
      "unsigned",
      "signed",
      "const",
      "static"
    ], Q = [
      "any",
      "auto_ptr",
      "barrier",
      "binary_semaphore",
      "bitset",
      "complex",
      "condition_variable",
      "condition_variable_any",
      "counting_semaphore",
      "deque",
      "false_type",
      "future",
      "imaginary",
      "initializer_list",
      "istringstream",
      "jthread",
      "latch",
      "lock_guard",
      "multimap",
      "multiset",
      "mutex",
      "optional",
      "ostringstream",
      "packaged_task",
      "pair",
      "promise",
      "priority_queue",
      "queue",
      "recursive_mutex",
      "recursive_timed_mutex",
      "scoped_lock",
      "set",
      "shared_future",
      "shared_lock",
      "shared_mutex",
      "shared_timed_mutex",
      "shared_ptr",
      "stack",
      "string_view",
      "stringstream",
      "timed_mutex",
      "thread",
      "true_type",
      "tuple",
      "unique_lock",
      "unique_ptr",
      "unordered_map",
      "unordered_multimap",
      "unordered_multiset",
      "unordered_set",
      "variant",
      "vector",
      "weak_ptr",
      "wstring",
      "wstring_view"
    ], Te = [
      "abort",
      "abs",
      "acos",
      "apply",
      "as_const",
      "asin",
      "atan",
      "atan2",
      "calloc",
      "ceil",
      "cerr",
      "cin",
      "clog",
      "cos",
      "cosh",
      "cout",
      "declval",
      "endl",
      "exchange",
      "exit",
      "exp",
      "fabs",
      "floor",
      "fmod",
      "forward",
      "fprintf",
      "fputs",
      "free",
      "frexp",
      "fscanf",
      "future",
      "invoke",
      "isalnum",
      "isalpha",
      "iscntrl",
      "isdigit",
      "isgraph",
      "islower",
      "isprint",
      "ispunct",
      "isspace",
      "isupper",
      "isxdigit",
      "labs",
      "launder",
      "ldexp",
      "log",
      "log10",
      "make_pair",
      "make_shared",
      "make_shared_for_overwrite",
      "make_tuple",
      "make_unique",
      "malloc",
      "memchr",
      "memcmp",
      "memcpy",
      "memset",
      "modf",
      "move",
      "pow",
      "printf",
      "putchar",
      "puts",
      "realloc",
      "scanf",
      "sin",
      "sinh",
      "snprintf",
      "sprintf",
      "sqrt",
      "sscanf",
      "std",
      "stderr",
      "stdin",
      "stdout",
      "strcat",
      "strchr",
      "strcmp",
      "strcpy",
      "strcspn",
      "strlen",
      "strncat",
      "strncmp",
      "strncpy",
      "strpbrk",
      "strrchr",
      "strspn",
      "strstr",
      "swap",
      "tan",
      "tanh",
      "terminate",
      "to_underlying",
      "tolower",
      "toupper",
      "vfprintf",
      "visit",
      "vprintf",
      "vsprintf"
    ], Y = {
      type: A,
      keyword: z,
      literal: [
        "NULL",
        "false",
        "nullopt",
        "nullptr",
        "true"
      ],
      built_in: ["_Pragma"],
      _type_hints: Q
    }, fe = {
      className: "function.dispatch",
      relevance: 0,
      keywords: {
        // Only for relevance, not highlighting.
        _hint: Te
      },
      begin: r.concat(
        /\b/,
        /(?!decltype)/,
        /(?!if)/,
        /(?!for)/,
        /(?!switch)/,
        /(?!while)/,
        e.IDENT_RE,
        r.lookahead(/(<[^<>]+>|)\s*\(/)
      )
    }, ae = [
      fe,
      b,
      l,
      n,
      e.C_BLOCK_COMMENT_MODE,
      m,
      f
    ], Re = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: Y,
      contains: ae.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: Y,
          contains: ae.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    }, pe = {
      className: "function",
      begin: "(" + a + "[\\*&\\s]+)+" + N,
      returnBegin: !0,
      end: /[{;=]/,
      excludeEnd: !0,
      keywords: Y,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: i,
          keywords: Y,
          relevance: 0
        },
        {
          begin: N,
          returnBegin: !0,
          contains: [C],
          relevance: 0
        },
        // needed because we do not have look-behind on the below rule
        // to prevent it from grabbing the final : in a :: pair
        {
          begin: /::/,
          relevance: 0
        },
        // initializers
        {
          begin: /:/,
          endsWithParent: !0,
          contains: [
            f,
            m
          ]
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: Y,
          relevance: 0,
          contains: [
            n,
            e.C_BLOCK_COMMENT_MODE,
            f,
            m,
            l,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: Y,
              relevance: 0,
              contains: [
                "self",
                n,
                e.C_BLOCK_COMMENT_MODE,
                f,
                m,
                l
              ]
            }
          ]
        },
        l,
        n,
        e.C_BLOCK_COMMENT_MODE,
        b
      ]
    };
    return {
      name: "C++",
      aliases: [
        "cc",
        "c++",
        "h++",
        "hpp",
        "hh",
        "hxx",
        "cxx"
      ],
      keywords: Y,
      illegal: "</",
      classNameAliases: { "function.dispatch": "built_in" },
      contains: [].concat(
        Re,
        pe,
        fe,
        ae,
        [
          b,
          {
            // containers: ie, `vector <int> rooms (9);`
            begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",
            end: ">",
            keywords: Y,
            contains: [
              "self",
              l
            ]
          },
          {
            begin: e.IDENT_RE + "::",
            keywords: Y
          },
          {
            match: [
              // extra complexity to deal with `enum class` and `enum struct`
              /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
              /\s+/,
              /\w+/
            ],
            className: {
              1: "keyword",
              3: "title.class"
            }
          }
        ]
      )
    };
  }
  return Ru = t, Ru;
}
var xu, Dg;
function GA() {
  if (Dg)
    return xu;
  Dg = 1;
  function t(e) {
    const r = "primitive rsc_template", n = "group clone ms master location colocation order fencing_topology rsc_ticket acl_target acl_group user role tag xml";
    return {
      name: "crmsh",
      aliases: [
        "crm",
        "pcmk"
      ],
      case_insensitive: !0,
      keywords: {
        keyword: "params meta operations op rule attributes utilization" + " " + "read write deny defined not_defined in_range date spec in ref reference attribute type xpath version and or lt gt tag lte gte eq ne \\" + " " + "number string",
        literal: "Master Started Slave Stopped start promote demote stop monitor true false"
      },
      contains: [
        e.HASH_COMMENT_MODE,
        {
          beginKeywords: "node",
          starts: {
            end: "\\s*([\\w_-]+:)?",
            starts: {
              className: "title",
              end: "\\s*[\\$\\w_][\\w_-]*"
            }
          }
        },
        {
          beginKeywords: r,
          starts: {
            className: "title",
            end: "\\s*[\\$\\w_][\\w_-]*",
            starts: { end: "\\s*@?[\\w_][\\w_\\.:-]*" }
          }
        },
        {
          begin: "\\b(" + n.split(" ").join("|") + ")\\s+",
          keywords: n,
          starts: {
            className: "title",
            end: "[\\$\\w_][\\w_-]*"
          }
        },
        {
          beginKeywords: "property rsc_defaults op_defaults",
          starts: {
            className: "title",
            end: "\\s*([\\w_-]+:)?"
          }
        },
        e.QUOTE_STRING_MODE,
        {
          className: "meta",
          begin: "(ocf|systemd|service|lsb):[\\w_:-]+",
          relevance: 0
        },
        {
          className: "number",
          begin: "\\b\\d+(\\.\\d+)?(ms|s|h|m)?",
          relevance: 0
        },
        {
          className: "literal",
          begin: "[-]?(infinity|inf)",
          relevance: 0
        },
        {
          className: "attr",
          begin: /([A-Za-z$_#][\w_-]+)=/,
          relevance: 0
        },
        {
          className: "tag",
          begin: "</?",
          end: "/?>",
          relevance: 0
        }
      ]
    };
  }
  return xu = t, xu;
}
var Nu, Mg;
function YA() {
  if (Mg)
    return Nu;
  Mg = 1;
  function t(e) {
    const r = "(_?[ui](8|16|32|64|128))?", n = "(_?f(32|64))?", i = "[a-zA-Z_]\\w*[!?=]?", s = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|[=!]~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~|]|//|//=|&[-+*]=?|&\\*\\*|\\[\\][=?]?", o = "[A-Za-z_]\\w*(::\\w+)*(\\?|!)?", a = {
      $pattern: i,
      keyword: "abstract alias annotation as as? asm begin break case class def do else elsif end ensure enum extend for fun if include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? return require select self sizeof struct super then type typeof union uninitialized unless until verbatim when while with yield __DIR__ __END_LINE__ __FILE__ __LINE__",
      literal: "false nil true"
    }, l = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: a
    }, c = {
      // negative-look forward attemps to prevent false matches like:
      // @ident@ or $ident$ that might indicate this is not ruby at all
      className: "variable",
      begin: "(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"
    }, f = {
      className: "template-variable",
      variants: [
        {
          begin: "\\{\\{",
          end: "\\}\\}"
        },
        {
          begin: "\\{%",
          end: "%\\}"
        }
      ],
      keywords: a
    };
    function m(Te, ce) {
      const ge = [
        {
          begin: Te,
          end: ce
        }
      ];
      return ge[0].contains = ge, ge;
    }
    const b = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        l
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /`/,
          end: /`/
        },
        {
          begin: "%[Qwi]?\\(",
          end: "\\)",
          contains: m("\\(", "\\)")
        },
        {
          begin: "%[Qwi]?\\[",
          end: "\\]",
          contains: m("\\[", "\\]")
        },
        {
          begin: "%[Qwi]?\\{",
          end: /\}/,
          contains: m(/\{/, /\}/)
        },
        {
          begin: "%[Qwi]?<",
          end: ">",
          contains: m("<", ">")
        },
        {
          begin: "%[Qwi]?\\|",
          end: "\\|"
        },
        {
          begin: /<<-\w+$/,
          end: /^\s*\w+$/
        }
      ],
      relevance: 0
    }, C = {
      className: "string",
      variants: [
        {
          begin: "%q\\(",
          end: "\\)",
          contains: m("\\(", "\\)")
        },
        {
          begin: "%q\\[",
          end: "\\]",
          contains: m("\\[", "\\]")
        },
        {
          begin: "%q\\{",
          end: /\}/,
          contains: m(/\{/, /\}/)
        },
        {
          begin: "%q<",
          end: ">",
          contains: m("<", ">")
        },
        {
          begin: "%q\\|",
          end: "\\|"
        },
        {
          begin: /<<-'\w+'$/,
          end: /^\s*\w+$/
        }
      ],
      relevance: 0
    }, N = {
      begin: "(?!%\\})(" + e.RE_STARTERS_RE + "|\\n|\\b(case|if|select|unless|until|when|while)\\b)\\s*",
      keywords: "case if select unless until when while",
      contains: [
        {
          className: "regexp",
          contains: [
            e.BACKSLASH_ESCAPE,
            l
          ],
          variants: [
            {
              begin: "//[a-z]*",
              relevance: 0
            },
            {
              begin: "/(?!\\/)",
              end: "/[a-z]*"
            }
          ]
        }
      ],
      relevance: 0
    }, z = {
      className: "regexp",
      contains: [
        e.BACKSLASH_ESCAPE,
        l
      ],
      variants: [
        {
          begin: "%r\\(",
          end: "\\)",
          contains: m("\\(", "\\)")
        },
        {
          begin: "%r\\[",
          end: "\\]",
          contains: m("\\[", "\\]")
        },
        {
          begin: "%r\\{",
          end: /\}/,
          contains: m(/\{/, /\}/)
        },
        {
          begin: "%r<",
          end: ">",
          contains: m("<", ">")
        },
        {
          begin: "%r\\|",
          end: "\\|"
        }
      ],
      relevance: 0
    }, A = {
      className: "meta",
      begin: "@\\[",
      end: "\\]",
      contains: [e.inherit(e.QUOTE_STRING_MODE, { className: "string" })]
    }, Q = [
      f,
      b,
      C,
      z,
      N,
      A,
      c,
      e.HASH_COMMENT_MODE,
      {
        className: "class",
        beginKeywords: "class module struct",
        end: "$|;",
        illegal: /=/,
        contains: [
          e.HASH_COMMENT_MODE,
          e.inherit(e.TITLE_MODE, { begin: o }),
          {
            // relevance booster for inheritance
            begin: "<"
          }
        ]
      },
      {
        className: "class",
        beginKeywords: "lib enum union",
        end: "$|;",
        illegal: /=/,
        contains: [
          e.HASH_COMMENT_MODE,
          e.inherit(e.TITLE_MODE, { begin: o })
        ]
      },
      {
        beginKeywords: "annotation",
        end: "$|;",
        illegal: /=/,
        contains: [
          e.HASH_COMMENT_MODE,
          e.inherit(e.TITLE_MODE, { begin: o })
        ],
        relevance: 2
      },
      {
        className: "function",
        beginKeywords: "def",
        end: /\B\b/,
        contains: [
          e.inherit(e.TITLE_MODE, {
            begin: s,
            endsParent: !0
          })
        ]
      },
      {
        className: "function",
        beginKeywords: "fun macro",
        end: /\B\b/,
        contains: [
          e.inherit(e.TITLE_MODE, {
            begin: s,
            endsParent: !0
          })
        ],
        relevance: 2
      },
      {
        className: "symbol",
        begin: e.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
        relevance: 0
      },
      {
        className: "symbol",
        begin: ":",
        contains: [
          b,
          { begin: s }
        ],
        relevance: 0
      },
      {
        className: "number",
        variants: [
          { begin: "\\b0b([01_]+)" + r },
          { begin: "\\b0o([0-7_]+)" + r },
          { begin: "\\b0x([A-Fa-f0-9_]+)" + r },
          { begin: "\\b([1-9][0-9_]*[0-9]|[0-9])(\\.[0-9][0-9_]*)?([eE]_?[-+]?[0-9_]*)?" + n + "(?!_)" },
          { begin: "\\b([1-9][0-9_]*|0)" + r }
        ],
        relevance: 0
      }
    ];
    return l.contains = Q, f.contains = Q.slice(1), {
      name: "Crystal",
      aliases: ["cr"],
      keywords: a,
      contains: Q
    };
  }
  return Nu = t, Nu;
}
var ku, Lg;
function HA() {
  if (Lg)
    return ku;
  Lg = 1;
  function t(e) {
    const r = [
      "bool",
      "byte",
      "char",
      "decimal",
      "delegate",
      "double",
      "dynamic",
      "enum",
      "float",
      "int",
      "long",
      "nint",
      "nuint",
      "object",
      "sbyte",
      "short",
      "string",
      "ulong",
      "uint",
      "ushort"
    ], n = [
      "public",
      "private",
      "protected",
      "static",
      "internal",
      "protected",
      "abstract",
      "async",
      "extern",
      "override",
      "unsafe",
      "virtual",
      "new",
      "sealed",
      "partial"
    ], i = [
      "default",
      "false",
      "null",
      "true"
    ], s = [
      "abstract",
      "as",
      "base",
      "break",
      "case",
      "catch",
      "class",
      "const",
      "continue",
      "do",
      "else",
      "event",
      "explicit",
      "extern",
      "finally",
      "fixed",
      "for",
      "foreach",
      "goto",
      "if",
      "implicit",
      "in",
      "interface",
      "internal",
      "is",
      "lock",
      "namespace",
      "new",
      "operator",
      "out",
      "override",
      "params",
      "private",
      "protected",
      "public",
      "readonly",
      "record",
      "ref",
      "return",
      "scoped",
      "sealed",
      "sizeof",
      "stackalloc",
      "static",
      "struct",
      "switch",
      "this",
      "throw",
      "try",
      "typeof",
      "unchecked",
      "unsafe",
      "using",
      "virtual",
      "void",
      "volatile",
      "while"
    ], o = [
      "add",
      "alias",
      "and",
      "ascending",
      "async",
      "await",
      "by",
      "descending",
      "equals",
      "from",
      "get",
      "global",
      "group",
      "init",
      "into",
      "join",
      "let",
      "nameof",
      "not",
      "notnull",
      "on",
      "or",
      "orderby",
      "partial",
      "remove",
      "select",
      "set",
      "unmanaged",
      "value|0",
      "var",
      "when",
      "where",
      "with",
      "yield"
    ], a = {
      keyword: s.concat(o),
      built_in: r,
      literal: i
    }, l = e.inherit(e.TITLE_MODE, { begin: "[a-zA-Z](\\.?\\w)*" }), c = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01']+)" },
        { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
      ],
      relevance: 0
    }, f = {
      className: "string",
      begin: '@"',
      end: '"',
      contains: [{ begin: '""' }]
    }, m = e.inherit(f, { illegal: /\n/ }), b = {
      className: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: a
    }, C = e.inherit(b, { illegal: /\n/ }), N = {
      className: "string",
      begin: /\$"/,
      end: '"',
      illegal: /\n/,
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        e.BACKSLASH_ESCAPE,
        C
      ]
    }, z = {
      className: "string",
      begin: /\$@"/,
      end: '"',
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        { begin: '""' },
        b
      ]
    }, A = e.inherit(z, {
      illegal: /\n/,
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        { begin: '""' },
        C
      ]
    });
    b.contains = [
      z,
      N,
      f,
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      c,
      e.C_BLOCK_COMMENT_MODE
    ], C.contains = [
      A,
      N,
      m,
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      c,
      e.inherit(e.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
    ];
    const Q = { variants: [
      z,
      N,
      f,
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE
    ] }, Te = {
      begin: "<",
      end: ">",
      contains: [
        { beginKeywords: "in out" },
        l
      ]
    }, ce = e.IDENT_RE + "(<" + e.IDENT_RE + "(\\s*,\\s*" + e.IDENT_RE + ")*>)?(\\[\\])?", ge = {
      // prevents expressions like `@class` from incorrect flagging
      // `class` as a keyword
      begin: "@" + e.IDENT_RE,
      relevance: 0
    };
    return {
      name: "C#",
      aliases: [
        "cs",
        "c#"
      ],
      keywords: a,
      illegal: /::/,
      contains: [
        e.COMMENT(
          "///",
          "$",
          {
            returnBegin: !0,
            contains: [
              {
                className: "doctag",
                variants: [
                  {
                    begin: "///",
                    relevance: 0
                  },
                  { begin: "<!--|-->" },
                  {
                    begin: "</?",
                    end: ">"
                  }
                ]
              }
            ]
          }
        ),
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$",
          keywords: { keyword: "if else elif endif define undef warning error line region endregion pragma checksum" }
        },
        Q,
        c,
        {
          beginKeywords: "class interface",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:,]/,
          contains: [
            { beginKeywords: "where class" },
            l,
            Te,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          beginKeywords: "namespace",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:]/,
          contains: [
            l,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          beginKeywords: "record",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:]/,
          contains: [
            l,
            Te,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // [Attributes("")]
          className: "meta",
          begin: "^\\s*\\[(?=[\\w])",
          excludeBegin: !0,
          end: "\\]",
          excludeEnd: !0,
          contains: [
            {
              className: "string",
              begin: /"/,
              end: /"/
            }
          ]
        },
        {
          // Expression keywords prevent 'keyword Name(...)' from being
          // recognized as a function definition
          beginKeywords: "new return throw await else",
          relevance: 0
        },
        {
          className: "function",
          begin: "(" + ce + "\\s+)+" + e.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
          returnBegin: !0,
          end: /\s*[{;=]/,
          excludeEnd: !0,
          keywords: a,
          contains: [
            // prevents these from being highlighted `title`
            {
              beginKeywords: n.join(" "),
              relevance: 0
            },
            {
              begin: e.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
              returnBegin: !0,
              contains: [
                e.TITLE_MODE,
                Te
              ],
              relevance: 0
            },
            { match: /\(\)/ },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: !0,
              excludeEnd: !0,
              keywords: a,
              relevance: 0,
              contains: [
                Q,
                c,
                e.C_BLOCK_COMMENT_MODE
              ]
            },
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        ge
      ]
    };
  }
  return ku = t, ku;
}
var Iu, Pg;
function VA() {
  if (Pg)
    return Iu;
  Pg = 1;
  function t(e) {
    return {
      name: "CSP",
      case_insensitive: !1,
      keywords: {
        $pattern: "[a-zA-Z][a-zA-Z0-9_-]*",
        keyword: [
          "base-uri",
          "child-src",
          "connect-src",
          "default-src",
          "font-src",
          "form-action",
          "frame-ancestors",
          "frame-src",
          "img-src",
          "manifest-src",
          "media-src",
          "object-src",
          "plugin-types",
          "report-uri",
          "sandbox",
          "script-src",
          "style-src",
          "trusted-types",
          "unsafe-hashes",
          "worker-src"
        ]
      },
      contains: [
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        {
          className: "attribute",
          begin: "^Content",
          end: ":",
          excludeEnd: !0
        }
      ]
    };
  }
  return Iu = t, Iu;
}
var Ou, Fg;
function WA() {
  if (Fg)
    return Ou;
  Fg = 1;
  const t = (a) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: a.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        a.APOS_STRING_MODE,
        a.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: a.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], r = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ], n = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ], i = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ], s = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
    // reverse makes sure longer attributes `font-weight` are matched fully
    // instead of getting false positives on say `font`
  ].reverse();
  function o(a) {
    const l = a.regex, c = t(a), f = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ }, m = "and or not only", b = /@-?\w[\w]*(-\w+)*/, C = "[a-zA-Z-][a-zA-Z0-9_-]*", N = [
      a.APOS_STRING_MODE,
      a.QUOTE_STRING_MODE
    ];
    return {
      name: "CSS",
      case_insensitive: !0,
      illegal: /[=|'\$]/,
      keywords: { keyframePosition: "from to" },
      classNameAliases: {
        // for visual continuity with `tag {}` and because we
        // don't have a great class for this?
        keyframePosition: "selector-tag"
      },
      contains: [
        c.BLOCK_COMMENT,
        f,
        // to recognize keyframe 40% etc which are outside the scope of our
        // attribute value mode
        c.CSS_NUMBER_MODE,
        {
          className: "selector-id",
          begin: /#[A-Za-z0-9_-]+/,
          relevance: 0
        },
        {
          className: "selector-class",
          begin: "\\." + C,
          relevance: 0
        },
        c.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-pseudo",
          variants: [
            { begin: ":(" + n.join("|") + ")" },
            { begin: ":(:)?(" + i.join("|") + ")" }
          ]
        },
        // we may actually need this (12/2020)
        // { // pseudo-selector params
        //   begin: /\(/,
        //   end: /\)/,
        //   contains: [ hljs.CSS_NUMBER_MODE ]
        // },
        c.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + s.join("|") + ")\\b"
        },
        // attribute values
        {
          begin: /:/,
          end: /[;}{]/,
          contains: [
            c.BLOCK_COMMENT,
            c.HEXCOLOR,
            c.IMPORTANT,
            c.CSS_NUMBER_MODE,
            ...N,
            // needed to highlight these as strings and to avoid issues with
            // illegal characters that might be inside urls that would tigger the
            // languages illegal stack
            {
              begin: /(url|data-uri)\(/,
              end: /\)/,
              relevance: 0,
              // from keywords
              keywords: { built_in: "url data-uri" },
              contains: [
                ...N,
                {
                  className: "string",
                  // any character other than `)` as in `url()` will be the start
                  // of a string, which ends with `)` (from the parent mode)
                  begin: /[^)]/,
                  endsWithParent: !0,
                  excludeEnd: !0
                }
              ]
            },
            c.FUNCTION_DISPATCH
          ]
        },
        {
          begin: l.lookahead(/@/),
          end: "[{;]",
          relevance: 0,
          illegal: /:/,
          // break on Less variables @var: ...
          contains: [
            {
              className: "keyword",
              begin: b
            },
            {
              begin: /\s/,
              endsWithParent: !0,
              excludeEnd: !0,
              relevance: 0,
              keywords: {
                $pattern: /[a-z-]+/,
                keyword: m,
                attribute: r.join(" ")
              },
              contains: [
                {
                  begin: /[a-z-]+(?=:)/,
                  className: "attribute"
                },
                ...N,
                c.CSS_NUMBER_MODE
              ]
            }
          ]
        },
        {
          className: "selector-tag",
          begin: "\\b(" + e.join("|") + ")\\b"
        }
      ]
    };
  }
  return Ou = o, Ou;
}
var Du, Bg;
function KA() {
  if (Bg)
    return Du;
  Bg = 1;
  function t(e) {
    const r = {
      $pattern: e.UNDERSCORE_IDENT_RE,
      keyword: "abstract alias align asm assert auto body break byte case cast catch class const continue debug default delete deprecated do else enum export extern final finally for foreach foreach_reverse|10 goto if immutable import in inout int interface invariant is lazy macro mixin module new nothrow out override package pragma private protected public pure ref return scope shared static struct super switch synchronized template this throw try typedef typeid typeof union unittest version void volatile while with __FILE__ __LINE__ __gshared|10 __thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__",
      built_in: "bool cdouble cent cfloat char creal dchar delegate double dstring float function idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar wstring",
      literal: "false null true"
    }, n = "(0|[1-9][\\d_]*)", i = "(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)", s = "0[bB][01_]+", o = "([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)", a = "0[xX]" + o, l = "([eE][+-]?" + i + ")", c = "(" + i + "(\\.\\d*|" + l + ")|\\d+\\." + i + "|\\." + n + l + "?)", f = "(0[xX](" + o + "\\." + o + "|\\.?" + o + ")[pP][+-]?" + i + ")", m = "(" + n + "|" + s + "|" + a + ")", b = "(" + f + "|" + c + ")", C = `\\\\(['"\\?\\\\abfnrtv]|u[\\dA-Fa-f]{4}|[0-7]{1,3}|x[\\dA-Fa-f]{2}|U[\\dA-Fa-f]{8})|&[a-zA-Z\\d]{2,};`, N = {
      className: "number",
      begin: "\\b" + m + "(L|u|U|Lu|LU|uL|UL)?",
      relevance: 0
    }, z = {
      className: "number",
      begin: "\\b(" + b + "([fF]|L|i|[fF]i|Li)?|" + m + "(i|[fF]i|Li))",
      relevance: 0
    }, A = {
      className: "string",
      begin: "'(" + C + "|.)",
      end: "'",
      illegal: "."
    }, Te = {
      className: "string",
      begin: '"',
      contains: [{
        begin: C,
        relevance: 0
      }],
      end: '"[cwd]?'
    }, ce = {
      className: "string",
      begin: '[rq]"',
      end: '"[cwd]?',
      relevance: 5
    }, ge = {
      className: "string",
      begin: "`",
      end: "`[cwd]?"
    }, Y = {
      className: "string",
      begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
      relevance: 10
    }, fe = {
      className: "string",
      begin: 'q"\\{',
      end: '\\}"'
    }, ae = {
      className: "meta",
      begin: "^#!",
      end: "$",
      relevance: 5
    }, Re = {
      className: "meta",
      begin: "#(line)",
      end: "$",
      relevance: 5
    }, pe = {
      className: "keyword",
      begin: "@[a-zA-Z_][a-zA-Z_\\d]*"
    }, Ce = e.COMMENT(
      "\\/\\+",
      "\\+\\/",
      {
        contains: ["self"],
        relevance: 10
      }
    );
    return {
      name: "D",
      keywords: r,
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        Ce,
        Y,
        Te,
        ce,
        ge,
        fe,
        z,
        N,
        A,
        ae,
        Re,
        pe
      ]
    };
  }
  return Du = t, Du;
}
var Mu, Ug;
function QA() {
  if (Ug)
    return Mu;
  Ug = 1;
  function t(e) {
    const r = e.regex, n = {
      begin: /<\/?[A-Za-z_]/,
      end: ">",
      subLanguage: "xml",
      relevance: 0
    }, i = {
      begin: "^[-\\*]{3,}",
      end: "$"
    }, s = {
      className: "code",
      variants: [
        // TODO: fix to allow these to work with sublanguage also
        { begin: "(`{3,})[^`](.|\\n)*?\\1`*[ ]*" },
        { begin: "(~{3,})[^~](.|\\n)*?\\1~*[ ]*" },
        // needed to allow markdown as a sublanguage to work
        {
          begin: "```",
          end: "```+[ ]*$"
        },
        {
          begin: "~~~",
          end: "~~~+[ ]*$"
        },
        { begin: "`.+?`" },
        {
          begin: "(?=^( {4}|\\t))",
          // use contains to gobble up multiple lines to allow the block to be whatever size
          // but only have a single open/close tag vs one per line
          contains: [
            {
              begin: "^( {4}|\\t)",
              end: "(\\n)$"
            }
          ],
          relevance: 0
        }
      ]
    }, o = {
      className: "bullet",
      begin: "^[ 	]*([*+-]|(\\d+\\.))(?=\\s+)",
      end: "\\s+",
      excludeEnd: !0
    }, a = {
      begin: /^\[[^\n]+\]:/,
      returnBegin: !0,
      contains: [
        {
          className: "symbol",
          begin: /\[/,
          end: /\]/,
          excludeBegin: !0,
          excludeEnd: !0
        },
        {
          className: "link",
          begin: /:\s*/,
          end: /$/,
          excludeBegin: !0
        }
      ]
    }, l = /[A-Za-z][A-Za-z0-9+.-]*/, c = {
      variants: [
        // too much like nested array access in so many languages
        // to have any real relevance
        {
          begin: /\[.+?\]\[.*?\]/,
          relevance: 0
        },
        // popular internet URLs
        {
          begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
          relevance: 2
        },
        {
          begin: r.concat(/\[.+?\]\(/, l, /:\/\/.*?\)/),
          relevance: 2
        },
        // relative urls
        {
          begin: /\[.+?\]\([./?&#].*?\)/,
          relevance: 1
        },
        // whatever else, lower relevance (might not be a link at all)
        {
          begin: /\[.*?\]\(.*?\)/,
          relevance: 0
        }
      ],
      returnBegin: !0,
      contains: [
        {
          // empty strings for alt or link text
          match: /\[(?=\])/
        },
        {
          className: "string",
          relevance: 0,
          begin: "\\[",
          end: "\\]",
          excludeBegin: !0,
          returnEnd: !0
        },
        {
          className: "link",
          relevance: 0,
          begin: "\\]\\(",
          end: "\\)",
          excludeBegin: !0,
          excludeEnd: !0
        },
        {
          className: "symbol",
          relevance: 0,
          begin: "\\]\\[",
          end: "\\]",
          excludeBegin: !0,
          excludeEnd: !0
        }
      ]
    }, f = {
      className: "strong",
      contains: [],
      // defined later
      variants: [
        {
          begin: /_{2}(?!\s)/,
          end: /_{2}/
        },
        {
          begin: /\*{2}(?!\s)/,
          end: /\*{2}/
        }
      ]
    }, m = {
      className: "emphasis",
      contains: [],
      // defined later
      variants: [
        {
          begin: /\*(?![*\s])/,
          end: /\*/
        },
        {
          begin: /_(?![_\s])/,
          end: /_/,
          relevance: 0
        }
      ]
    }, b = e.inherit(f, { contains: [] }), C = e.inherit(m, { contains: [] });
    f.contains.push(C), m.contains.push(b);
    let N = [
      n,
      c
    ];
    return [
      f,
      m,
      b,
      C
    ].forEach((Q) => {
      Q.contains = Q.contains.concat(N);
    }), N = N.concat(f, m), {
      name: "Markdown",
      aliases: [
        "md",
        "mkdown",
        "mkd"
      ],
      contains: [
        {
          className: "section",
          variants: [
            {
              begin: "^#{1,6}",
              end: "$",
              contains: N
            },
            {
              begin: "(?=^.+?\\n[=-]{2,}$)",
              contains: [
                { begin: "^[=-]*$" },
                {
                  begin: "^",
                  end: "\\n",
                  contains: N
                }
              ]
            }
          ]
        },
        n,
        o,
        f,
        m,
        {
          className: "quote",
          begin: "^>\\s+",
          contains: N,
          end: "$"
        },
        s,
        i,
        c,
        a
      ]
    };
  }
  return Mu = t, Mu;
}
var Lu, qg;
function jA() {
  if (qg)
    return Lu;
  qg = 1;
  function t(e) {
    const r = {
      className: "subst",
      variants: [{ begin: "\\$[A-Za-z0-9_]+" }]
    }, n = {
      className: "subst",
      variants: [
        {
          begin: /\$\{/,
          end: /\}/
        }
      ],
      keywords: "true false null this is new super"
    }, i = {
      className: "string",
      variants: [
        {
          begin: "r'''",
          end: "'''"
        },
        {
          begin: 'r"""',
          end: '"""'
        },
        {
          begin: "r'",
          end: "'",
          illegal: "\\n"
        },
        {
          begin: 'r"',
          end: '"',
          illegal: "\\n"
        },
        {
          begin: "'''",
          end: "'''",
          contains: [
            e.BACKSLASH_ESCAPE,
            r,
            n
          ]
        },
        {
          begin: '"""',
          end: '"""',
          contains: [
            e.BACKSLASH_ESCAPE,
            r,
            n
          ]
        },
        {
          begin: "'",
          end: "'",
          illegal: "\\n",
          contains: [
            e.BACKSLASH_ESCAPE,
            r,
            n
          ]
        },
        {
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [
            e.BACKSLASH_ESCAPE,
            r,
            n
          ]
        }
      ]
    };
    n.contains = [
      e.C_NUMBER_MODE,
      i
    ];
    const s = [
      // dart:core
      "Comparable",
      "DateTime",
      "Duration",
      "Function",
      "Iterable",
      "Iterator",
      "List",
      "Map",
      "Match",
      "Object",
      "Pattern",
      "RegExp",
      "Set",
      "Stopwatch",
      "String",
      "StringBuffer",
      "StringSink",
      "Symbol",
      "Type",
      "Uri",
      "bool",
      "double",
      "int",
      "num",
      // dart:html
      "Element",
      "ElementList"
    ], o = s.map((c) => `${c}?`);
    return {
      name: "Dart",
      keywords: {
        keyword: [
          "abstract",
          "as",
          "assert",
          "async",
          "await",
          "base",
          "break",
          "case",
          "catch",
          "class",
          "const",
          "continue",
          "covariant",
          "default",
          "deferred",
          "do",
          "dynamic",
          "else",
          "enum",
          "export",
          "extends",
          "extension",
          "external",
          "factory",
          "false",
          "final",
          "finally",
          "for",
          "Function",
          "get",
          "hide",
          "if",
          "implements",
          "import",
          "in",
          "interface",
          "is",
          "late",
          "library",
          "mixin",
          "new",
          "null",
          "on",
          "operator",
          "part",
          "required",
          "rethrow",
          "return",
          "sealed",
          "set",
          "show",
          "static",
          "super",
          "switch",
          "sync",
          "this",
          "throw",
          "true",
          "try",
          "typedef",
          "var",
          "void",
          "when",
          "while",
          "with",
          "yield"
        ],
        built_in: s.concat(o).concat([
          // dart:core
          "Never",
          "Null",
          "dynamic",
          "print",
          // dart:html
          "document",
          "querySelector",
          "querySelectorAll",
          "window"
        ]),
        $pattern: /[A-Za-z][A-Za-z0-9_]*\??/
      },
      contains: [
        i,
        e.COMMENT(
          /\/\*\*(?!\/)/,
          /\*\//,
          {
            subLanguage: "markdown",
            relevance: 0
          }
        ),
        e.COMMENT(
          /\/{3,} ?/,
          /$/,
          { contains: [
            {
              subLanguage: "markdown",
              begin: ".",
              end: "$",
              relevance: 0
            }
          ] }
        ),
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "class",
          beginKeywords: "class interface",
          end: /\{/,
          excludeEnd: !0,
          contains: [
            { beginKeywords: "extends implements" },
            e.UNDERSCORE_TITLE_MODE
          ]
        },
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "@[A-Za-z]+"
        },
        {
          begin: "=>"
          // No markup, just a relevance booster
        }
      ]
    };
  }
  return Lu = t, Lu;
}
var Pu, zg;
function XA() {
  if (zg)
    return Pu;
  zg = 1;
  function t(e) {
    const r = [
      "exports",
      "register",
      "file",
      "shl",
      "array",
      "record",
      "property",
      "for",
      "mod",
      "while",
      "set",
      "ally",
      "label",
      "uses",
      "raise",
      "not",
      "stored",
      "class",
      "safecall",
      "var",
      "interface",
      "or",
      "private",
      "static",
      "exit",
      "index",
      "inherited",
      "to",
      "else",
      "stdcall",
      "override",
      "shr",
      "asm",
      "far",
      "resourcestring",
      "finalization",
      "packed",
      "virtual",
      "out",
      "and",
      "protected",
      "library",
      "do",
      "xorwrite",
      "goto",
      "near",
      "function",
      "end",
      "div",
      "overload",
      "object",
      "unit",
      "begin",
      "string",
      "on",
      "inline",
      "repeat",
      "until",
      "destructor",
      "write",
      "message",
      "program",
      "with",
      "read",
      "initialization",
      "except",
      "default",
      "nil",
      "if",
      "case",
      "cdecl",
      "in",
      "downto",
      "threadvar",
      "of",
      "try",
      "pascal",
      "const",
      "external",
      "constructor",
      "type",
      "public",
      "then",
      "implementation",
      "finally",
      "published",
      "procedure",
      "absolute",
      "reintroduce",
      "operator",
      "as",
      "is",
      "abstract",
      "alias",
      "assembler",
      "bitpacked",
      "break",
      "continue",
      "cppdecl",
      "cvar",
      "enumerator",
      "experimental",
      "platform",
      "deprecated",
      "unimplemented",
      "dynamic",
      "export",
      "far16",
      "forward",
      "generic",
      "helper",
      "implements",
      "interrupt",
      "iochecks",
      "local",
      "name",
      "nodefault",
      "noreturn",
      "nostackframe",
      "oldfpccall",
      "otherwise",
      "saveregisters",
      "softfloat",
      "specialize",
      "strict",
      "unaligned",
      "varargs"
    ], n = [
      e.C_LINE_COMMENT_MODE,
      e.COMMENT(/\{/, /\}/, { relevance: 0 }),
      e.COMMENT(/\(\*/, /\*\)/, { relevance: 10 })
    ], i = {
      className: "meta",
      variants: [
        {
          begin: /\{\$/,
          end: /\}/
        },
        {
          begin: /\(\*\$/,
          end: /\*\)/
        }
      ]
    }, s = {
      className: "string",
      begin: /'/,
      end: /'/,
      contains: [{ begin: /''/ }]
    }, o = {
      className: "number",
      relevance: 0,
      // Source: https://www.freepascal.org/docs-html/ref/refse6.html
      variants: [
        {
          // Hexadecimal notation, e.g., $7F.
          begin: "\\$[0-9A-Fa-f]+"
        },
        {
          // Octal notation, e.g., &42.
          begin: "&[0-7]+"
        },
        {
          // Binary notation, e.g., %1010.
          begin: "%[01]+"
        }
      ]
    }, a = {
      className: "string",
      begin: /(#\d+)+/
    }, l = {
      begin: e.IDENT_RE + "\\s*=\\s*class\\s*\\(",
      returnBegin: !0,
      contains: [e.TITLE_MODE]
    }, c = {
      className: "function",
      beginKeywords: "function constructor destructor procedure",
      end: /[:;]/,
      keywords: "function constructor|10 destructor|10 procedure|10",
      contains: [
        e.TITLE_MODE,
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: r,
          contains: [
            s,
            a,
            i
          ].concat(n)
        },
        i
      ].concat(n)
    };
    return {
      name: "Delphi",
      aliases: [
        "dpr",
        "dfm",
        "pas",
        "pascal"
      ],
      case_insensitive: !0,
      keywords: r,
      illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
      contains: [
        s,
        a,
        e.NUMBER_MODE,
        o,
        l,
        c,
        i
      ].concat(n)
    };
  }
  return Pu = t, Pu;
}
var Fu, Gg;
function ZA() {
  if (Gg)
    return Fu;
  Gg = 1;
  function t(e) {
    const r = e.regex;
    return {
      name: "Diff",
      aliases: ["patch"],
      contains: [
        {
          className: "meta",
          relevance: 10,
          match: r.either(
            /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
            /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
            /^--- +\d+,\d+ +----$/
          )
        },
        {
          className: "comment",
          variants: [
            {
              begin: r.either(
                /Index: /,
                /^index/,
                /={3,}/,
                /^-{3}/,
                /^\*{3} /,
                /^\+{3}/,
                /^diff --git/
              ),
              end: /$/
            },
            { match: /^\*{15}$/ }
          ]
        },
        {
          className: "addition",
          begin: /^\+/,
          end: /$/
        },
        {
          className: "deletion",
          begin: /^-/,
          end: /$/
        },
        {
          className: "addition",
          begin: /^!/,
          end: /$/
        }
      ]
    };
  }
  return Fu = t, Fu;
}
var Bu, Yg;
function JA() {
  if (Yg)
    return Bu;
  Yg = 1;
  function t(e) {
    const r = {
      begin: /\|[A-Za-z]+:?/,
      keywords: { name: "truncatewords removetags linebreaksbr yesno get_digit timesince random striptags filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort dictsortreversed default_if_none pluralize lower join center default truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize localtime utc timezone" },
      contains: [
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE
      ]
    };
    return {
      name: "Django",
      aliases: ["jinja"],
      case_insensitive: !0,
      subLanguage: "xml",
      contains: [
        e.COMMENT(/\{%\s*comment\s*%\}/, /\{%\s*endcomment\s*%\}/),
        e.COMMENT(/\{#/, /#\}/),
        {
          className: "template-tag",
          begin: /\{%/,
          end: /%\}/,
          contains: [
            {
              className: "name",
              begin: /\w+/,
              keywords: { name: "comment endcomment load templatetag ifchanged endifchanged if endif firstof for endfor ifnotequal endifnotequal widthratio extends include spaceless endspaceless regroup ifequal endifequal ssi now with cycle url filter endfilter debug block endblock else autoescape endautoescape csrf_token empty elif endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix plural get_current_language language get_available_languages get_current_language_bidi get_language_info get_language_info_list localize endlocalize localtime endlocaltime timezone endtimezone get_current_timezone verbatim" },
              starts: {
                endsWithParent: !0,
                keywords: "in by as",
                contains: [r],
                relevance: 0
              }
            }
          ]
        },
        {
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [r]
        }
      ]
    };
  }
  return Bu = t, Bu;
}
var Uu, Hg;
function eR() {
  if (Hg)
    return Uu;
  Hg = 1;
  function t(e) {
    return {
      name: "DNS Zone",
      aliases: [
        "bind",
        "zone"
      ],
      keywords: [
        "IN",
        "A",
        "AAAA",
        "AFSDB",
        "APL",
        "CAA",
        "CDNSKEY",
        "CDS",
        "CERT",
        "CNAME",
        "DHCID",
        "DLV",
        "DNAME",
        "DNSKEY",
        "DS",
        "HIP",
        "IPSECKEY",
        "KEY",
        "KX",
        "LOC",
        "MX",
        "NAPTR",
        "NS",
        "NSEC",
        "NSEC3",
        "NSEC3PARAM",
        "PTR",
        "RRSIG",
        "RP",
        "SIG",
        "SOA",
        "SRV",
        "SSHFP",
        "TA",
        "TKEY",
        "TLSA",
        "TSIG",
        "TXT"
      ],
      contains: [
        e.COMMENT(";", "$", { relevance: 0 }),
        {
          className: "meta",
          begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
        },
        // IPv6
        {
          className: "number",
          begin: "((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b"
        },
        // IPv4
        {
          className: "number",
          begin: "((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b"
        },
        e.inherit(e.NUMBER_MODE, { begin: /\b\d+[dhwm]?/ })
      ]
    };
  }
  return Uu = t, Uu;
}
var qu, Vg;
function tR() {
  if (Vg)
    return qu;
  Vg = 1;
  function t(e) {
    return {
      name: "Dockerfile",
      aliases: ["docker"],
      case_insensitive: !0,
      keywords: [
        "from",
        "maintainer",
        "expose",
        "env",
        "arg",
        "user",
        "onbuild",
        "stopsignal"
      ],
      contains: [
        e.HASH_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        {
          beginKeywords: "run cmd entrypoint volume add copy workdir label healthcheck shell",
          starts: {
            end: /[^\\]$/,
            subLanguage: "bash"
          }
        }
      ],
      illegal: "</"
    };
  }
  return qu = t, qu;
}
var zu, Wg;
function rR() {
  if (Wg)
    return zu;
  Wg = 1;
  function t(e) {
    const r = e.COMMENT(
      /^\s*@?rem\b/,
      /$/,
      { relevance: 10 }
    );
    return {
      name: "Batch file (DOS)",
      aliases: [
        "bat",
        "cmd"
      ],
      case_insensitive: !0,
      illegal: /\/\*/,
      keywords: {
        keyword: [
          "if",
          "else",
          "goto",
          "for",
          "in",
          "do",
          "call",
          "exit",
          "not",
          "exist",
          "errorlevel",
          "defined",
          "equ",
          "neq",
          "lss",
          "leq",
          "gtr",
          "geq"
        ],
        built_in: [
          "prn",
          "nul",
          "lpt3",
          "lpt2",
          "lpt1",
          "con",
          "com4",
          "com3",
          "com2",
          "com1",
          "aux",
          "shift",
          "cd",
          "dir",
          "echo",
          "setlocal",
          "endlocal",
          "set",
          "pause",
          "copy",
          "append",
          "assoc",
          "at",
          "attrib",
          "break",
          "cacls",
          "cd",
          "chcp",
          "chdir",
          "chkdsk",
          "chkntfs",
          "cls",
          "cmd",
          "color",
          "comp",
          "compact",
          "convert",
          "date",
          "dir",
          "diskcomp",
          "diskcopy",
          "doskey",
          "erase",
          "fs",
          "find",
          "findstr",
          "format",
          "ftype",
          "graftabl",
          "help",
          "keyb",
          "label",
          "md",
          "mkdir",
          "mode",
          "more",
          "move",
          "path",
          "pause",
          "print",
          "popd",
          "pushd",
          "promt",
          "rd",
          "recover",
          "rem",
          "rename",
          "replace",
          "restore",
          "rmdir",
          "shift",
          "sort",
          "start",
          "subst",
          "time",
          "title",
          "tree",
          "type",
          "ver",
          "verify",
          "vol",
          // winutils
          "ping",
          "net",
          "ipconfig",
          "taskkill",
          "xcopy",
          "ren",
          "del"
        ]
      },
      contains: [
        {
          className: "variable",
          begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
        },
        {
          className: "function",
          begin: {
            className: "symbol",
            begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)",
            relevance: 0
          }.begin,
          end: "goto:eof",
          contains: [
            e.inherit(e.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
            r
          ]
        },
        {
          className: "number",
          begin: "\\b\\d+",
          relevance: 0
        },
        r
      ]
    };
  }
  return zu = t, zu;
}
var Gu, Kg;
function nR() {
  if (Kg)
    return Gu;
  Kg = 1;
  function t(e) {
    return {
      keywords: "dsconfig",
      contains: [
        {
          className: "keyword",
          begin: "^dsconfig",
          end: /\s/,
          excludeEnd: !0,
          relevance: 10
        },
        {
          className: "built_in",
          begin: /(list|create|get|set|delete)-(\w+)/,
          end: /\s/,
          excludeEnd: !0,
          illegal: "!@#$%^&*()",
          relevance: 10
        },
        {
          className: "built_in",
          begin: /--(\w+)/,
          end: /\s/,
          excludeEnd: !0
        },
        {
          className: "string",
          begin: /"/,
          end: /"/
        },
        {
          className: "string",
          begin: /'/,
          end: /'/
        },
        {
          className: "string",
          begin: /[\w\-?]+:\w+/,
          end: /\W/,
          relevance: 0
        },
        {
          className: "string",
          begin: /\w+(\-\w+)*/,
          end: /(?=\W)/,
          relevance: 0
        },
        e.HASH_COMMENT_MODE
      ]
    };
  }
  return Gu = t, Gu;
}
var Yu, Qg;
function iR() {
  if (Qg)
    return Yu;
  Qg = 1;
  function t(e) {
    const r = {
      className: "string",
      variants: [
        e.inherit(e.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }),
        {
          begin: '(u8?|U)?R"',
          end: '"',
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          begin: "'\\\\?.",
          end: "'",
          illegal: "."
        }
      ]
    }, n = {
      className: "number",
      variants: [
        { begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)" },
        { begin: e.C_NUMBER_RE }
      ],
      relevance: 0
    }, i = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: "if else elif endif define undef ifdef ifndef" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          end: "$",
          keywords: { keyword: "include" },
          contains: [
            e.inherit(r, { className: "string" }),
            {
              className: "string",
              begin: "<",
              end: ">",
              illegal: "\\n"
            }
          ]
        },
        r,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ]
    }, s = {
      className: "variable",
      begin: /&[a-z\d_]*\b/
    }, o = {
      className: "keyword",
      begin: "/[a-z][a-z\\d-]*/"
    }, a = {
      className: "symbol",
      begin: "^\\s*[a-zA-Z_][a-zA-Z\\d_]*:"
    }, l = {
      className: "params",
      relevance: 0,
      begin: "<",
      end: ">",
      contains: [
        n,
        s
      ]
    }, c = {
      className: "title.class",
      begin: /[a-zA-Z_][a-zA-Z\d_@-]*(?=\s\{)/,
      relevance: 0.2
    }, f = {
      className: "title.class",
      begin: /^\/(?=\s*\{)/,
      relevance: 10
    }, m = {
      match: /[a-z][a-z-,]+(?=;)/,
      relevance: 0,
      scope: "attr"
    }, b = {
      relevance: 0,
      match: [
        /[a-z][a-z-,]+/,
        /\s*/,
        /=/
      ],
      scope: {
        1: "attr",
        3: "operator"
      }
    }, C = {
      scope: "punctuation",
      relevance: 0,
      // `};` combined is just to avoid tons of useless punctuation nodes
      match: /\};|[;{}]/
    };
    return {
      name: "Device Tree",
      contains: [
        f,
        s,
        o,
        a,
        c,
        b,
        m,
        l,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        n,
        r,
        i,
        C,
        {
          begin: e.IDENT_RE + "::",
          keywords: ""
        }
      ]
    };
  }
  return Yu = t, Yu;
}
var Hu, jg;
function sR() {
  if (jg)
    return Hu;
  jg = 1;
  function t(e) {
    return {
      name: "Dust",
      aliases: ["dst"],
      case_insensitive: !0,
      subLanguage: "xml",
      contains: [
        {
          className: "template-tag",
          begin: /\{[#\/]/,
          end: /\}/,
          illegal: /;/,
          contains: [
            {
              className: "name",
              begin: /[a-zA-Z\.-]+/,
              starts: {
                endsWithParent: !0,
                relevance: 0,
                contains: [e.QUOTE_STRING_MODE]
              }
            }
          ]
        },
        {
          className: "template-variable",
          begin: /\{/,
          end: /\}/,
          illegal: /;/,
          keywords: "if eq ne lt lte gt gte select default math sep"
        }
      ]
    };
  }
  return Hu = t, Hu;
}
var Vu, Xg;
function oR() {
  if (Xg)
    return Vu;
  Xg = 1;
  function t(e) {
    const r = e.COMMENT(/\(\*/, /\*\)/), n = {
      className: "attribute",
      begin: /^[ ]*[a-zA-Z]+([\s_-]+[a-zA-Z]+)*/
    }, s = {
      begin: /=/,
      end: /[.;]/,
      contains: [
        r,
        {
          className: "meta",
          begin: /\?.*\?/
        },
        {
          // terminals
          className: "string",
          variants: [
            e.APOS_STRING_MODE,
            e.QUOTE_STRING_MODE,
            {
              begin: "`",
              end: "`"
            }
          ]
        }
      ]
    };
    return {
      name: "Extended Backus-Naur Form",
      illegal: /\S/,
      contains: [
        r,
        n,
        s
      ]
    };
  }
  return Vu = t, Vu;
}
var Wu, Zg;
function aR() {
  if (Zg)
    return Wu;
  Zg = 1;
  function t(e) {
    const r = e.regex, n = "[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?", i = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?", a = {
      $pattern: n,
      keyword: [
        "after",
        "alias",
        "and",
        "case",
        "catch",
        "cond",
        "defstruct",
        "defguard",
        "do",
        "else",
        "end",
        "fn",
        "for",
        "if",
        "import",
        "in",
        "not",
        "or",
        "quote",
        "raise",
        "receive",
        "require",
        "reraise",
        "rescue",
        "try",
        "unless",
        "unquote",
        "unquote_splicing",
        "use",
        "when",
        "with|0"
      ],
      literal: [
        "false",
        "nil",
        "true"
      ]
    }, l = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: a
    }, c = {
      className: "number",
      begin: "(\\b0o[0-7_]+)|(\\b0b[01_]+)|(\\b0x[0-9a-fA-F_]+)|(-?\\b[0-9][0-9_]*(\\.[0-9_]+([eE][-+]?[0-9]+)?)?)",
      relevance: 0
    }, m = {
      match: /\\[\s\S]/,
      scope: "char.escape",
      relevance: 0
    }, b = `[/|([{<"']`, C = [
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /\//,
        end: /\//
      },
      {
        begin: /\|/,
        end: /\|/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        begin: /\[/,
        end: /\]/
      },
      {
        begin: /\{/,
        end: /\}/
      },
      {
        begin: /</,
        end: />/
      }
    ], N = (fe) => ({
      scope: "char.escape",
      begin: r.concat(/\\/, fe),
      relevance: 0
    }), z = {
      className: "string",
      begin: "~[a-z](?=" + b + ")",
      contains: C.map((fe) => e.inherit(
        fe,
        { contains: [
          N(fe.end),
          m,
          l
        ] }
      ))
    }, A = {
      className: "string",
      begin: "~[A-Z](?=" + b + ")",
      contains: C.map((fe) => e.inherit(
        fe,
        { contains: [N(fe.end)] }
      ))
    }, Q = {
      className: "regex",
      variants: [
        {
          begin: "~r(?=" + b + ")",
          contains: C.map((fe) => e.inherit(
            fe,
            {
              end: r.concat(fe.end, /[uismxfU]{0,7}/),
              contains: [
                N(fe.end),
                m,
                l
              ]
            }
          ))
        },
        {
          begin: "~R(?=" + b + ")",
          contains: C.map(
            (fe) => e.inherit(
              fe,
              {
                end: r.concat(fe.end, /[uismxfU]{0,7}/),
                contains: [N(fe.end)]
              }
            )
          )
        }
      ]
    }, Te = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        l
      ],
      variants: [
        {
          begin: /"""/,
          end: /"""/
        },
        {
          begin: /'''/,
          end: /'''/
        },
        {
          begin: /~S"""/,
          end: /"""/,
          contains: []
          // override default
        },
        {
          begin: /~S"/,
          end: /"/,
          contains: []
          // override default
        },
        {
          begin: /~S'''/,
          end: /'''/,
          contains: []
          // override default
        },
        {
          begin: /~S'/,
          end: /'/,
          contains: []
          // override default
        },
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    }, ce = {
      className: "function",
      beginKeywords: "def defp defmacro defmacrop",
      end: /\B\b/,
      // the mode is ended by the title
      contains: [
        e.inherit(e.TITLE_MODE, {
          begin: n,
          endsParent: !0
        })
      ]
    }, ge = e.inherit(ce, {
      className: "class",
      beginKeywords: "defimpl defmodule defprotocol defrecord",
      end: /\bdo\b|$|;/
    }), Y = [
      Te,
      Q,
      A,
      z,
      e.HASH_COMMENT_MODE,
      ge,
      ce,
      { begin: "::" },
      {
        className: "symbol",
        begin: ":(?![\\s:])",
        contains: [
          Te,
          { begin: i }
        ],
        relevance: 0
      },
      {
        className: "symbol",
        begin: n + ":(?!:)",
        relevance: 0
      },
      {
        // Usage of a module, struct, etc.
        className: "title.class",
        begin: /(\b[A-Z][a-zA-Z0-9_]+)/,
        relevance: 0
      },
      c,
      {
        className: "variable",
        begin: "(\\$\\W)|((\\$|@@?)(\\w+))"
      }
      // -> has been removed, capnproto always uses this grammar construct
    ];
    return l.contains = Y, {
      name: "Elixir",
      aliases: [
        "ex",
        "exs"
      ],
      keywords: a,
      contains: Y
    };
  }
  return Wu = t, Wu;
}
var Ku, Jg;
function lR() {
  if (Jg)
    return Ku;
  Jg = 1;
  function t(e) {
    const r = { variants: [
      e.COMMENT("--", "$"),
      e.COMMENT(
        /\{-/,
        /-\}/,
        { contains: ["self"] }
      )
    ] }, n = {
      className: "type",
      begin: "\\b[A-Z][\\w']*",
      // TODO: other constructors (built-in, infix).
      relevance: 0
    }, i = {
      begin: "\\(",
      end: "\\)",
      illegal: '"',
      contains: [
        {
          className: "type",
          begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
        },
        r
      ]
    }, s = {
      begin: /\{/,
      end: /\}/,
      contains: i.contains
    }, o = {
      className: "string",
      begin: "'\\\\?.",
      end: "'",
      illegal: "."
    };
    return {
      name: "Elm",
      keywords: [
        "let",
        "in",
        "if",
        "then",
        "else",
        "case",
        "of",
        "where",
        "module",
        "import",
        "exposing",
        "type",
        "alias",
        "as",
        "infix",
        "infixl",
        "infixr",
        "port",
        "effect",
        "command",
        "subscription"
      ],
      contains: [
        // Top-level constructions.
        {
          beginKeywords: "port effect module",
          end: "exposing",
          keywords: "port effect module where command subscription exposing",
          contains: [
            i,
            r
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "import",
          end: "$",
          keywords: "import as exposing",
          contains: [
            i,
            r
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "type",
          end: "$",
          keywords: "type alias",
          contains: [
            n,
            i,
            s,
            r
          ]
        },
        {
          beginKeywords: "infix infixl infixr",
          end: "$",
          contains: [
            e.C_NUMBER_MODE,
            r
          ]
        },
        {
          begin: "port",
          end: "$",
          keywords: "port",
          contains: [r]
        },
        // Literals and names.
        o,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        n,
        e.inherit(e.TITLE_MODE, { begin: "^[_a-z][\\w']*" }),
        r,
        {
          // No markup, relevance booster
          begin: "->|<-"
        }
      ],
      illegal: /;/
    };
  }
  return Ku = t, Ku;
}
var Qu, e$;
function cR() {
  if (e$)
    return Qu;
  e$ = 1;
  function t(e) {
    const r = e.regex, n = "([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)", i = r.either(
      /\b([A-Z]+[a-z0-9]+)+/,
      // ends in caps
      /\b([A-Z]+[a-z0-9]+)+[A-Z]+/
    ), s = r.concat(i, /(::\w+)*/), a = {
      "variable.constant": [
        "__FILE__",
        "__LINE__",
        "__ENCODING__"
      ],
      "variable.language": [
        "self",
        "super"
      ],
      keyword: [
        "alias",
        "and",
        "begin",
        "BEGIN",
        "break",
        "case",
        "class",
        "defined",
        "do",
        "else",
        "elsif",
        "end",
        "END",
        "ensure",
        "for",
        "if",
        "in",
        "module",
        "next",
        "not",
        "or",
        "redo",
        "require",
        "rescue",
        "retry",
        "return",
        "then",
        "undef",
        "unless",
        "until",
        "when",
        "while",
        "yield",
        ...[
          "include",
          "extend",
          "prepend",
          "public",
          "private",
          "protected",
          "raise",
          "throw"
        ]
      ],
      built_in: [
        "proc",
        "lambda",
        "attr_accessor",
        "attr_reader",
        "attr_writer",
        "define_method",
        "private_constant",
        "module_function"
      ],
      literal: [
        "true",
        "false",
        "nil"
      ]
    }, l = {
      className: "doctag",
      begin: "@[A-Za-z]+"
    }, c = {
      begin: "#<",
      end: ">"
    }, f = [
      e.COMMENT(
        "#",
        "$",
        { contains: [l] }
      ),
      e.COMMENT(
        "^=begin",
        "^=end",
        {
          contains: [l],
          relevance: 10
        }
      ),
      e.COMMENT("^__END__", e.MATCH_NOTHING_RE)
    ], m = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: a
    }, b = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        m
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /`/,
          end: /`/
        },
        {
          begin: /%[qQwWx]?\(/,
          end: /\)/
        },
        {
          begin: /%[qQwWx]?\[/,
          end: /\]/
        },
        {
          begin: /%[qQwWx]?\{/,
          end: /\}/
        },
        {
          begin: /%[qQwWx]?</,
          end: />/
        },
        {
          begin: /%[qQwWx]?\//,
          end: /\//
        },
        {
          begin: /%[qQwWx]?%/,
          end: /%/
        },
        {
          begin: /%[qQwWx]?-/,
          end: /-/
        },
        {
          begin: /%[qQwWx]?\|/,
          end: /\|/
        },
        // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
        // where ? is the last character of a preceding identifier, as in: `func?4`
        { begin: /\B\?(\\\d{1,3})/ },
        { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
        { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
        { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
        { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
        { begin: /\B\?\\?\S/ },
        // heredocs
        {
          // this guard makes sure that we have an entire heredoc and not a false
          // positive (auto-detect, etc.)
          begin: r.concat(
            /<<[-~]?'?/,
            r.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
          ),
          contains: [
            e.END_SAME_AS_BEGIN({
              begin: /(\w+)/,
              end: /(\w+)/,
              contains: [
                e.BACKSLASH_ESCAPE,
                m
              ]
            })
          ]
        }
      ]
    }, C = "[1-9](_?[0-9])*|0", N = "[0-9](_?[0-9])*", z = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal integer/float, optionally exponential or rational, optionally imaginary
        { begin: `\\b(${C})(\\.(${N}))?([eE][+-]?(${N})|r)?i?\\b` },
        // explicit decimal/binary/octal/hexadecimal integer,
        // optionally rational and/or imaginary
        { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },
        // 0-prefixed implicit octal integer, optionally rational and/or imaginary
        { begin: "\\b0(_?[0-7])+r?i?\\b" }
      ]
    }, A = {
      variants: [
        {
          match: /\(\)/
        },
        {
          className: "params",
          begin: /\(/,
          end: /(?=\))/,
          excludeBegin: !0,
          endsParent: !0,
          keywords: a
        }
      ]
    }, ae = [
      b,
      {
        variants: [
          {
            match: [
              /class\s+/,
              s,
              /\s+<\s+/,
              s
            ]
          },
          {
            match: [
              /\b(class|module)\s+/,
              s
            ]
          }
        ],
        scope: {
          2: "title.class",
          4: "title.class.inherited"
        },
        keywords: a
      },
      {
        match: [
          /(include|extend)\s+/,
          s
        ],
        scope: {
          2: "title.class"
        },
        keywords: a
      },
      {
        relevance: 0,
        match: [
          s,
          /\.new[. (]/
        ],
        scope: {
          1: "title.class"
        }
      },
      {
        relevance: 0,
        match: /\b[A-Z][A-Z_0-9]+\b/,
        className: "variable.constant"
      },
      {
        relevance: 0,
        match: i,
        scope: "title.class"
      },
      {
        match: [
          /def/,
          /\s+/,
          n
        ],
        scope: {
          1: "keyword",
          3: "title.function"
        },
        contains: [
          A
        ]
      },
      {
        // swallow namespace qualifiers before symbols
        begin: e.IDENT_RE + "::"
      },
      {
        className: "symbol",
        begin: e.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
        relevance: 0
      },
      {
        className: "symbol",
        begin: ":(?!\\s)",
        contains: [
          b,
          { begin: n }
        ],
        relevance: 0
      },
      z,
      {
        // negative-look forward attempts to prevent false matches like:
        // @ident@ or $ident$ that might indicate this is not ruby at all
        className: "variable",
        begin: "(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"
      },
      {
        className: "params",
        begin: /\|/,
        end: /\|/,
        excludeBegin: !0,
        excludeEnd: !0,
        relevance: 0,
        // this could be a lot of things (in other languages) other than params
        keywords: a
      },
      {
        // regexp container
        begin: "(" + e.RE_STARTERS_RE + "|unless)\\s*",
        keywords: "unless",
        contains: [
          {
            className: "regexp",
            contains: [
              e.BACKSLASH_ESCAPE,
              m
            ],
            illegal: /\n/,
            variants: [
              {
                begin: "/",
                end: "/[a-z]*"
              },
              {
                begin: /%r\{/,
                end: /\}[a-z]*/
              },
              {
                begin: "%r\\(",
                end: "\\)[a-z]*"
              },
              {
                begin: "%r!",
                end: "![a-z]*"
              },
              {
                begin: "%r\\[",
                end: "\\][a-z]*"
              }
            ]
          }
        ].concat(c, f),
        relevance: 0
      }
    ].concat(c, f);
    m.contains = ae, A.contains = ae;
    const J = [
      {
        begin: /^\s*=>/,
        starts: {
          end: "$",
          contains: ae
        }
      },
      {
        className: "meta.prompt",
        begin: "^(" + "[>?]>" + "|" + "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]" + "|" + "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>" + ")(?=[ ])",
        starts: {
          end: "$",
          keywords: a,
          contains: ae
        }
      }
    ];
    return f.unshift(c), {
      name: "Ruby",
      aliases: [
        "rb",
        "gemspec",
        "podspec",
        "thor",
        "irb"
      ],
      keywords: a,
      illegal: /\/\*/,
      contains: [e.SHEBANG({ binary: "ruby" })].concat(J).concat(f).concat(ae)
    };
  }
  return Qu = t, Qu;
}
var ju, t$;
function uR() {
  if (t$)
    return ju;
  t$ = 1;
  function t(e) {
    return {
      name: "ERB",
      subLanguage: "xml",
      contains: [
        e.COMMENT("<%#", "%>"),
        {
          begin: "<%[%=-]?",
          end: "[%-]?%>",
          subLanguage: "ruby",
          excludeBegin: !0,
          excludeEnd: !0
        }
      ]
    };
  }
  return ju = t, ju;
}
var Xu, r$;
function dR() {
  if (r$)
    return Xu;
  r$ = 1;
  function t(e) {
    const r = e.regex;
    return {
      name: "Erlang REPL",
      keywords: {
        built_in: "spawn spawn_link self",
        keyword: "after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse|10 query receive rem try when xor"
      },
      contains: [
        {
          className: "meta.prompt",
          begin: "^[0-9]+> ",
          relevance: 10
        },
        e.COMMENT("%", "$"),
        {
          className: "number",
          begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
          relevance: 0
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        { begin: r.concat(
          /\?(::)?/,
          /([A-Z]\w*)/,
          // at least one identifier
          /((::)[A-Z]\w*)*/
          // perhaps more
        ) },
        { begin: "->" },
        { begin: "ok" },
        { begin: "!" },
        {
          begin: "(\\b[a-z'][a-zA-Z0-9_']*:[a-z'][a-zA-Z0-9_']*)|(\\b[a-z'][a-zA-Z0-9_']*)",
          relevance: 0
        },
        {
          begin: "[A-Z][a-zA-Z0-9_']*",
          relevance: 0
        }
      ]
    };
  }
  return Xu = t, Xu;
}
var Zu, n$;
function fR() {
  if (n$)
    return Zu;
  n$ = 1;
  function t(e) {
    const r = "[a-z'][a-zA-Z0-9_']*", n = "(" + r + ":" + r + "|" + r + ")", i = {
      keyword: "after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if let not of orelse|10 query receive rem try when xor",
      literal: "false true"
    }, s = e.COMMENT("%", "$"), o = {
      className: "number",
      begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
      relevance: 0
    }, a = { begin: "fun\\s+" + r + "/\\d+" }, l = {
      begin: n + "\\(",
      end: "\\)",
      returnBegin: !0,
      relevance: 0,
      contains: [
        {
          begin: n,
          relevance: 0
        },
        {
          begin: "\\(",
          end: "\\)",
          endsWithParent: !0,
          returnEnd: !0,
          relevance: 0
          // "contains" defined later
        }
      ]
    }, c = {
      begin: /\{/,
      end: /\}/,
      relevance: 0
      // "contains" defined later
    }, f = {
      begin: "\\b_([A-Z][A-Za-z0-9_]*)?",
      relevance: 0
    }, m = {
      begin: "[A-Z][a-zA-Z0-9_]*",
      relevance: 0
    }, b = {
      begin: "#" + e.UNDERSCORE_IDENT_RE,
      relevance: 0,
      returnBegin: !0,
      contains: [
        {
          begin: "#" + e.UNDERSCORE_IDENT_RE,
          relevance: 0
        },
        {
          begin: /\{/,
          end: /\}/,
          relevance: 0
          // "contains" defined later
        }
      ]
    }, C = {
      beginKeywords: "fun receive if try case",
      end: "end",
      keywords: i
    };
    C.contains = [
      s,
      a,
      e.inherit(e.APOS_STRING_MODE, { className: "" }),
      C,
      l,
      e.QUOTE_STRING_MODE,
      o,
      c,
      f,
      m,
      b
    ];
    const N = [
      s,
      a,
      C,
      l,
      e.QUOTE_STRING_MODE,
      o,
      c,
      f,
      m,
      b
    ];
    l.contains[1].contains = N, c.contains = N, b.contains[1].contains = N;
    const z = [
      "-module",
      "-record",
      "-undef",
      "-export",
      "-ifdef",
      "-ifndef",
      "-author",
      "-copyright",
      "-doc",
      "-vsn",
      "-import",
      "-include",
      "-include_lib",
      "-compile",
      "-define",
      "-else",
      "-endif",
      "-file",
      "-behaviour",
      "-behavior",
      "-spec"
    ], A = {
      className: "params",
      begin: "\\(",
      end: "\\)",
      contains: N
    };
    return {
      name: "Erlang",
      aliases: ["erl"],
      keywords: i,
      illegal: "(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))",
      contains: [
        {
          className: "function",
          begin: "^" + r + "\\s*\\(",
          end: "->",
          returnBegin: !0,
          illegal: "\\(|#|//|/\\*|\\\\|:|;",
          contains: [
            A,
            e.inherit(e.TITLE_MODE, { begin: r })
          ],
          starts: {
            end: ";|\\.",
            keywords: i,
            contains: N
          }
        },
        s,
        {
          begin: "^-",
          end: "\\.",
          relevance: 0,
          excludeEnd: !0,
          returnBegin: !0,
          keywords: {
            $pattern: "-" + e.IDENT_RE,
            keyword: z.map((Q) => `${Q}|1.5`).join(" ")
          },
          contains: [A]
        },
        o,
        e.QUOTE_STRING_MODE,
        b,
        f,
        m,
        c,
        { begin: /\.$/ }
        // relevance booster
      ]
    };
  }
  return Zu = t, Zu;
}
var Ju, i$;
function pR() {
  if (i$)
    return Ju;
  i$ = 1;
  function t(e) {
    return {
      name: "Excel formulae",
      aliases: [
        "xlsx",
        "xls"
      ],
      case_insensitive: !0,
      keywords: {
        $pattern: /[a-zA-Z][\w\.]*/,
        built_in: [
          "ABS",
          "ACCRINT",
          "ACCRINTM",
          "ACOS",
          "ACOSH",
          "ACOT",
          "ACOTH",
          "AGGREGATE",
          "ADDRESS",
          "AMORDEGRC",
          "AMORLINC",
          "AND",
          "ARABIC",
          "AREAS",
          "ASC",
          "ASIN",
          "ASINH",
          "ATAN",
          "ATAN2",
          "ATANH",
          "AVEDEV",
          "AVERAGE",
          "AVERAGEA",
          "AVERAGEIF",
          "AVERAGEIFS",
          "BAHTTEXT",
          "BASE",
          "BESSELI",
          "BESSELJ",
          "BESSELK",
          "BESSELY",
          "BETADIST",
          "BETA.DIST",
          "BETAINV",
          "BETA.INV",
          "BIN2DEC",
          "BIN2HEX",
          "BIN2OCT",
          "BINOMDIST",
          "BINOM.DIST",
          "BINOM.DIST.RANGE",
          "BINOM.INV",
          "BITAND",
          "BITLSHIFT",
          "BITOR",
          "BITRSHIFT",
          "BITXOR",
          "CALL",
          "CEILING",
          "CEILING.MATH",
          "CEILING.PRECISE",
          "CELL",
          "CHAR",
          "CHIDIST",
          "CHIINV",
          "CHITEST",
          "CHISQ.DIST",
          "CHISQ.DIST.RT",
          "CHISQ.INV",
          "CHISQ.INV.RT",
          "CHISQ.TEST",
          "CHOOSE",
          "CLEAN",
          "CODE",
          "COLUMN",
          "COLUMNS",
          "COMBIN",
          "COMBINA",
          "COMPLEX",
          "CONCAT",
          "CONCATENATE",
          "CONFIDENCE",
          "CONFIDENCE.NORM",
          "CONFIDENCE.T",
          "CONVERT",
          "CORREL",
          "COS",
          "COSH",
          "COT",
          "COTH",
          "COUNT",
          "COUNTA",
          "COUNTBLANK",
          "COUNTIF",
          "COUNTIFS",
          "COUPDAYBS",
          "COUPDAYS",
          "COUPDAYSNC",
          "COUPNCD",
          "COUPNUM",
          "COUPPCD",
          "COVAR",
          "COVARIANCE.P",
          "COVARIANCE.S",
          "CRITBINOM",
          "CSC",
          "CSCH",
          "CUBEKPIMEMBER",
          "CUBEMEMBER",
          "CUBEMEMBERPROPERTY",
          "CUBERANKEDMEMBER",
          "CUBESET",
          "CUBESETCOUNT",
          "CUBEVALUE",
          "CUMIPMT",
          "CUMPRINC",
          "DATE",
          "DATEDIF",
          "DATEVALUE",
          "DAVERAGE",
          "DAY",
          "DAYS",
          "DAYS360",
          "DB",
          "DBCS",
          "DCOUNT",
          "DCOUNTA",
          "DDB",
          "DEC2BIN",
          "DEC2HEX",
          "DEC2OCT",
          "DECIMAL",
          "DEGREES",
          "DELTA",
          "DEVSQ",
          "DGET",
          "DISC",
          "DMAX",
          "DMIN",
          "DOLLAR",
          "DOLLARDE",
          "DOLLARFR",
          "DPRODUCT",
          "DSTDEV",
          "DSTDEVP",
          "DSUM",
          "DURATION",
          "DVAR",
          "DVARP",
          "EDATE",
          "EFFECT",
          "ENCODEURL",
          "EOMONTH",
          "ERF",
          "ERF.PRECISE",
          "ERFC",
          "ERFC.PRECISE",
          "ERROR.TYPE",
          "EUROCONVERT",
          "EVEN",
          "EXACT",
          "EXP",
          "EXPON.DIST",
          "EXPONDIST",
          "FACT",
          "FACTDOUBLE",
          "FALSE|0",
          "F.DIST",
          "FDIST",
          "F.DIST.RT",
          "FILTERXML",
          "FIND",
          "FINDB",
          "F.INV",
          "F.INV.RT",
          "FINV",
          "FISHER",
          "FISHERINV",
          "FIXED",
          "FLOOR",
          "FLOOR.MATH",
          "FLOOR.PRECISE",
          "FORECAST",
          "FORECAST.ETS",
          "FORECAST.ETS.CONFINT",
          "FORECAST.ETS.SEASONALITY",
          "FORECAST.ETS.STAT",
          "FORECAST.LINEAR",
          "FORMULATEXT",
          "FREQUENCY",
          "F.TEST",
          "FTEST",
          "FV",
          "FVSCHEDULE",
          "GAMMA",
          "GAMMA.DIST",
          "GAMMADIST",
          "GAMMA.INV",
          "GAMMAINV",
          "GAMMALN",
          "GAMMALN.PRECISE",
          "GAUSS",
          "GCD",
          "GEOMEAN",
          "GESTEP",
          "GETPIVOTDATA",
          "GROWTH",
          "HARMEAN",
          "HEX2BIN",
          "HEX2DEC",
          "HEX2OCT",
          "HLOOKUP",
          "HOUR",
          "HYPERLINK",
          "HYPGEOM.DIST",
          "HYPGEOMDIST",
          "IF",
          "IFERROR",
          "IFNA",
          "IFS",
          "IMABS",
          "IMAGINARY",
          "IMARGUMENT",
          "IMCONJUGATE",
          "IMCOS",
          "IMCOSH",
          "IMCOT",
          "IMCSC",
          "IMCSCH",
          "IMDIV",
          "IMEXP",
          "IMLN",
          "IMLOG10",
          "IMLOG2",
          "IMPOWER",
          "IMPRODUCT",
          "IMREAL",
          "IMSEC",
          "IMSECH",
          "IMSIN",
          "IMSINH",
          "IMSQRT",
          "IMSUB",
          "IMSUM",
          "IMTAN",
          "INDEX",
          "INDIRECT",
          "INFO",
          "INT",
          "INTERCEPT",
          "INTRATE",
          "IPMT",
          "IRR",
          "ISBLANK",
          "ISERR",
          "ISERROR",
          "ISEVEN",
          "ISFORMULA",
          "ISLOGICAL",
          "ISNA",
          "ISNONTEXT",
          "ISNUMBER",
          "ISODD",
          "ISREF",
          "ISTEXT",
          "ISO.CEILING",
          "ISOWEEKNUM",
          "ISPMT",
          "JIS",
          "KURT",
          "LARGE",
          "LCM",
          "LEFT",
          "LEFTB",
          "LEN",
          "LENB",
          "LINEST",
          "LN",
          "LOG",
          "LOG10",
          "LOGEST",
          "LOGINV",
          "LOGNORM.DIST",
          "LOGNORMDIST",
          "LOGNORM.INV",
          "LOOKUP",
          "LOWER",
          "MATCH",
          "MAX",
          "MAXA",
          "MAXIFS",
          "MDETERM",
          "MDURATION",
          "MEDIAN",
          "MID",
          "MIDBs",
          "MIN",
          "MINIFS",
          "MINA",
          "MINUTE",
          "MINVERSE",
          "MIRR",
          "MMULT",
          "MOD",
          "MODE",
          "MODE.MULT",
          "MODE.SNGL",
          "MONTH",
          "MROUND",
          "MULTINOMIAL",
          "MUNIT",
          "N",
          "NA",
          "NEGBINOM.DIST",
          "NEGBINOMDIST",
          "NETWORKDAYS",
          "NETWORKDAYS.INTL",
          "NOMINAL",
          "NORM.DIST",
          "NORMDIST",
          "NORMINV",
          "NORM.INV",
          "NORM.S.DIST",
          "NORMSDIST",
          "NORM.S.INV",
          "NORMSINV",
          "NOT",
          "NOW",
          "NPER",
          "NPV",
          "NUMBERVALUE",
          "OCT2BIN",
          "OCT2DEC",
          "OCT2HEX",
          "ODD",
          "ODDFPRICE",
          "ODDFYIELD",
          "ODDLPRICE",
          "ODDLYIELD",
          "OFFSET",
          "OR",
          "PDURATION",
          "PEARSON",
          "PERCENTILE.EXC",
          "PERCENTILE.INC",
          "PERCENTILE",
          "PERCENTRANK.EXC",
          "PERCENTRANK.INC",
          "PERCENTRANK",
          "PERMUT",
          "PERMUTATIONA",
          "PHI",
          "PHONETIC",
          "PI",
          "PMT",
          "POISSON.DIST",
          "POISSON",
          "POWER",
          "PPMT",
          "PRICE",
          "PRICEDISC",
          "PRICEMAT",
          "PROB",
          "PRODUCT",
          "PROPER",
          "PV",
          "QUARTILE",
          "QUARTILE.EXC",
          "QUARTILE.INC",
          "QUOTIENT",
          "RADIANS",
          "RAND",
          "RANDBETWEEN",
          "RANK.AVG",
          "RANK.EQ",
          "RANK",
          "RATE",
          "RECEIVED",
          "REGISTER.ID",
          "REPLACE",
          "REPLACEB",
          "REPT",
          "RIGHT",
          "RIGHTB",
          "ROMAN",
          "ROUND",
          "ROUNDDOWN",
          "ROUNDUP",
          "ROW",
          "ROWS",
          "RRI",
          "RSQ",
          "RTD",
          "SEARCH",
          "SEARCHB",
          "SEC",
          "SECH",
          "SECOND",
          "SERIESSUM",
          "SHEET",
          "SHEETS",
          "SIGN",
          "SIN",
          "SINH",
          "SKEW",
          "SKEW.P",
          "SLN",
          "SLOPE",
          "SMALL",
          "SQL.REQUEST",
          "SQRT",
          "SQRTPI",
          "STANDARDIZE",
          "STDEV",
          "STDEV.P",
          "STDEV.S",
          "STDEVA",
          "STDEVP",
          "STDEVPA",
          "STEYX",
          "SUBSTITUTE",
          "SUBTOTAL",
          "SUM",
          "SUMIF",
          "SUMIFS",
          "SUMPRODUCT",
          "SUMSQ",
          "SUMX2MY2",
          "SUMX2PY2",
          "SUMXMY2",
          "SWITCH",
          "SYD",
          "T",
          "TAN",
          "TANH",
          "TBILLEQ",
          "TBILLPRICE",
          "TBILLYIELD",
          "T.DIST",
          "T.DIST.2T",
          "T.DIST.RT",
          "TDIST",
          "TEXT",
          "TEXTJOIN",
          "TIME",
          "TIMEVALUE",
          "T.INV",
          "T.INV.2T",
          "TINV",
          "TODAY",
          "TRANSPOSE",
          "TREND",
          "TRIM",
          "TRIMMEAN",
          "TRUE|0",
          "TRUNC",
          "T.TEST",
          "TTEST",
          "TYPE",
          "UNICHAR",
          "UNICODE",
          "UPPER",
          "VALUE",
          "VAR",
          "VAR.P",
          "VAR.S",
          "VARA",
          "VARP",
          "VARPA",
          "VDB",
          "VLOOKUP",
          "WEBSERVICE",
          "WEEKDAY",
          "WEEKNUM",
          "WEIBULL",
          "WEIBULL.DIST",
          "WORKDAY",
          "WORKDAY.INTL",
          "XIRR",
          "XNPV",
          "XOR",
          "YEAR",
          "YEARFRAC",
          "YIELD",
          "YIELDDISC",
          "YIELDMAT",
          "Z.TEST",
          "ZTEST"
        ]
      },
      contains: [
        {
          /* matches a beginning equal sign found in Excel formula examples */
          begin: /^=/,
          end: /[^=]/,
          returnEnd: !0,
          illegal: /=/,
          /* only allow single equal sign at front of line */
          relevance: 10
        },
        /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */
        {
          /* matches a reference to a single cell */
          className: "symbol",
          begin: /\b[A-Z]{1,2}\d+\b/,
          end: /[^\d]/,
          excludeEnd: !0,
          relevance: 0
        },
        {
          /* matches a reference to a range of cells */
          className: "symbol",
          begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
          relevance: 0
        },
        e.BACKSLASH_ESCAPE,
        e.QUOTE_STRING_MODE,
        {
          className: "number",
          begin: e.NUMBER_RE + "(%)?",
          relevance: 0
        },
        /* Excel formula comments are done by putting the comment in a function call to N() */
        e.COMMENT(
          /\bN\(/,
          /\)/,
          {
            excludeBegin: !0,
            excludeEnd: !0,
            illegal: /\n/
          }
        )
      ]
    };
  }
  return Ju = t, Ju;
}
var ed, s$;
function _R() {
  if (s$)
    return ed;
  s$ = 1;
  function t(e) {
    return {
      name: "FIX",
      contains: [
        {
          begin: /[^\u2401\u0001]+/,
          end: /[\u2401\u0001]/,
          excludeEnd: !0,
          returnBegin: !0,
          returnEnd: !1,
          contains: [
            {
              begin: /([^\u2401\u0001=]+)/,
              end: /=([^\u2401\u0001=]+)/,
              returnEnd: !0,
              returnBegin: !1,
              className: "attr"
            },
            {
              begin: /=/,
              end: /([\u2401\u0001])/,
              excludeEnd: !0,
              excludeBegin: !0,
              className: "string"
            }
          ]
        }
      ],
      case_insensitive: !0
    };
  }
  return ed = t, ed;
}
var td, o$;
function hR() {
  if (o$)
    return td;
  o$ = 1;
  function t(e) {
    const r = {
      className: "string",
      begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    }, n = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        }
      ]
    }, s = {
      className: "function",
      beginKeywords: "def",
      end: /[:={\[(\n;]/,
      excludeEnd: !0,
      contains: [{
        className: "title",
        relevance: 0,
        begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
      }]
    };
    return {
      name: "Flix",
      keywords: {
        keyword: [
          "case",
          "class",
          "def",
          "else",
          "enum",
          "if",
          "impl",
          "import",
          "in",
          "lat",
          "rel",
          "index",
          "let",
          "match",
          "namespace",
          "switch",
          "type",
          "yield",
          "with"
        ],
        literal: [
          "true",
          "false"
        ]
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        r,
        n,
        s,
        e.C_NUMBER_MODE
      ]
    };
  }
  return td = t, td;
}
var rd, a$;
function mR() {
  if (a$)
    return rd;
  a$ = 1;
  function t(e) {
    const r = e.regex, n = {
      className: "params",
      begin: "\\(",
      end: "\\)"
    }, i = { variants: [
      e.COMMENT("!", "$", { relevance: 0 }),
      // allow FORTRAN 77 style comments
      e.COMMENT("^C[ ]", "$", { relevance: 0 }),
      e.COMMENT("^C$", "$", { relevance: 0 })
    ] }, s = /(_[a-z_\d]+)?/, o = /([de][+-]?\d+)?/, a = {
      className: "number",
      variants: [
        { begin: r.concat(/\b\d+/, /\.(\d*)/, o, s) },
        { begin: r.concat(/\b\d+/, o, s) },
        { begin: r.concat(/\.\d+/, o, s) }
      ],
      relevance: 0
    }, l = {
      className: "function",
      beginKeywords: "subroutine function program",
      illegal: "[${=\\n]",
      contains: [
        e.UNDERSCORE_TITLE_MODE,
        n
      ]
    }, c = {
      className: "string",
      relevance: 0,
      variants: [
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE
      ]
    };
    return {
      name: "Fortran",
      case_insensitive: !0,
      aliases: [
        "f90",
        "f95"
      ],
      keywords: {
        keyword: [
          "kind",
          "do",
          "concurrent",
          "local",
          "shared",
          "while",
          "private",
          "call",
          "intrinsic",
          "where",
          "elsewhere",
          "type",
          "endtype",
          "endmodule",
          "endselect",
          "endinterface",
          "end",
          "enddo",
          "endif",
          "if",
          "forall",
          "endforall",
          "only",
          "contains",
          "default",
          "return",
          "stop",
          "then",
          "block",
          "endblock",
          "endassociate",
          "public",
          "subroutine|10",
          "function",
          "program",
          ".and.",
          ".or.",
          ".not.",
          ".le.",
          ".eq.",
          ".ge.",
          ".gt.",
          ".lt.",
          "goto",
          "save",
          "else",
          "use",
          "module",
          "select",
          "case",
          "access",
          "blank",
          "direct",
          "exist",
          "file",
          "fmt",
          "form",
          "formatted",
          "iostat",
          "name",
          "named",
          "nextrec",
          "number",
          "opened",
          "rec",
          "recl",
          "sequential",
          "status",
          "unformatted",
          "unit",
          "continue",
          "format",
          "pause",
          "cycle",
          "exit",
          "c_null_char",
          "c_alert",
          "c_backspace",
          "c_form_feed",
          "flush",
          "wait",
          "decimal",
          "round",
          "iomsg",
          "synchronous",
          "nopass",
          "non_overridable",
          "pass",
          "protected",
          "volatile",
          "abstract",
          "extends",
          "import",
          "non_intrinsic",
          "value",
          "deferred",
          "generic",
          "final",
          "enumerator",
          "class",
          "associate",
          "bind",
          "enum",
          "c_int",
          "c_short",
          "c_long",
          "c_long_long",
          "c_signed_char",
          "c_size_t",
          "c_int8_t",
          "c_int16_t",
          "c_int32_t",
          "c_int64_t",
          "c_int_least8_t",
          "c_int_least16_t",
          "c_int_least32_t",
          "c_int_least64_t",
          "c_int_fast8_t",
          "c_int_fast16_t",
          "c_int_fast32_t",
          "c_int_fast64_t",
          "c_intmax_t",
          "C_intptr_t",
          "c_float",
          "c_double",
          "c_long_double",
          "c_float_complex",
          "c_double_complex",
          "c_long_double_complex",
          "c_bool",
          "c_char",
          "c_null_ptr",
          "c_null_funptr",
          "c_new_line",
          "c_carriage_return",
          "c_horizontal_tab",
          "c_vertical_tab",
          "iso_c_binding",
          "c_loc",
          "c_funloc",
          "c_associated",
          "c_f_pointer",
          "c_ptr",
          "c_funptr",
          "iso_fortran_env",
          "character_storage_size",
          "error_unit",
          "file_storage_size",
          "input_unit",
          "iostat_end",
          "iostat_eor",
          "numeric_storage_size",
          "output_unit",
          "c_f_procpointer",
          "ieee_arithmetic",
          "ieee_support_underflow_control",
          "ieee_get_underflow_mode",
          "ieee_set_underflow_mode",
          "newunit",
          "contiguous",
          "recursive",
          "pad",
          "position",
          "action",
          "delim",
          "readwrite",
          "eor",
          "advance",
          "nml",
          "interface",
          "procedure",
          "namelist",
          "include",
          "sequence",
          "elemental",
          "pure",
          "impure",
          "integer",
          "real",
          "character",
          "complex",
          "logical",
          "codimension",
          "dimension",
          "allocatable|10",
          "parameter",
          "external",
          "implicit|10",
          "none",
          "double",
          "precision",
          "assign",
          "intent",
          "optional",
          "pointer",
          "target",
          "in",
          "out",
          "common",
          "equivalence",
          "data"
        ],
        literal: [
          ".False.",
          ".True."
        ],
        built_in: [
          "alog",
          "alog10",
          "amax0",
          "amax1",
          "amin0",
          "amin1",
          "amod",
          "cabs",
          "ccos",
          "cexp",
          "clog",
          "csin",
          "csqrt",
          "dabs",
          "dacos",
          "dasin",
          "datan",
          "datan2",
          "dcos",
          "dcosh",
          "ddim",
          "dexp",
          "dint",
          "dlog",
          "dlog10",
          "dmax1",
          "dmin1",
          "dmod",
          "dnint",
          "dsign",
          "dsin",
          "dsinh",
          "dsqrt",
          "dtan",
          "dtanh",
          "float",
          "iabs",
          "idim",
          "idint",
          "idnint",
          "ifix",
          "isign",
          "max0",
          "max1",
          "min0",
          "min1",
          "sngl",
          "algama",
          "cdabs",
          "cdcos",
          "cdexp",
          "cdlog",
          "cdsin",
          "cdsqrt",
          "cqabs",
          "cqcos",
          "cqexp",
          "cqlog",
          "cqsin",
          "cqsqrt",
          "dcmplx",
          "dconjg",
          "derf",
          "derfc",
          "dfloat",
          "dgamma",
          "dimag",
          "dlgama",
          "iqint",
          "qabs",
          "qacos",
          "qasin",
          "qatan",
          "qatan2",
          "qcmplx",
          "qconjg",
          "qcos",
          "qcosh",
          "qdim",
          "qerf",
          "qerfc",
          "qexp",
          "qgamma",
          "qimag",
          "qlgama",
          "qlog",
          "qlog10",
          "qmax1",
          "qmin1",
          "qmod",
          "qnint",
          "qsign",
          "qsin",
          "qsinh",
          "qsqrt",
          "qtan",
          "qtanh",
          "abs",
          "acos",
          "aimag",
          "aint",
          "anint",
          "asin",
          "atan",
          "atan2",
          "char",
          "cmplx",
          "conjg",
          "cos",
          "cosh",
          "exp",
          "ichar",
          "index",
          "int",
          "log",
          "log10",
          "max",
          "min",
          "nint",
          "sign",
          "sin",
          "sinh",
          "sqrt",
          "tan",
          "tanh",
          "print",
          "write",
          "dim",
          "lge",
          "lgt",
          "lle",
          "llt",
          "mod",
          "nullify",
          "allocate",
          "deallocate",
          "adjustl",
          "adjustr",
          "all",
          "allocated",
          "any",
          "associated",
          "bit_size",
          "btest",
          "ceiling",
          "count",
          "cshift",
          "date_and_time",
          "digits",
          "dot_product",
          "eoshift",
          "epsilon",
          "exponent",
          "floor",
          "fraction",
          "huge",
          "iand",
          "ibclr",
          "ibits",
          "ibset",
          "ieor",
          "ior",
          "ishft",
          "ishftc",
          "lbound",
          "len_trim",
          "matmul",
          "maxexponent",
          "maxloc",
          "maxval",
          "merge",
          "minexponent",
          "minloc",
          "minval",
          "modulo",
          "mvbits",
          "nearest",
          "pack",
          "present",
          "product",
          "radix",
          "random_number",
          "random_seed",
          "range",
          "repeat",
          "reshape",
          "rrspacing",
          "scale",
          "scan",
          "selected_int_kind",
          "selected_real_kind",
          "set_exponent",
          "shape",
          "size",
          "spacing",
          "spread",
          "sum",
          "system_clock",
          "tiny",
          "transpose",
          "trim",
          "ubound",
          "unpack",
          "verify",
          "achar",
          "iachar",
          "transfer",
          "dble",
          "entry",
          "dprod",
          "cpu_time",
          "command_argument_count",
          "get_command",
          "get_command_argument",
          "get_environment_variable",
          "is_iostat_end",
          "ieee_arithmetic",
          "ieee_support_underflow_control",
          "ieee_get_underflow_mode",
          "ieee_set_underflow_mode",
          "is_iostat_eor",
          "move_alloc",
          "new_line",
          "selected_char_kind",
          "same_type_as",
          "extends_type_of",
          "acosh",
          "asinh",
          "atanh",
          "bessel_j0",
          "bessel_j1",
          "bessel_jn",
          "bessel_y0",
          "bessel_y1",
          "bessel_yn",
          "erf",
          "erfc",
          "erfc_scaled",
          "gamma",
          "log_gamma",
          "hypot",
          "norm2",
          "atomic_define",
          "atomic_ref",
          "execute_command_line",
          "leadz",
          "trailz",
          "storage_size",
          "merge_bits",
          "bge",
          "bgt",
          "ble",
          "blt",
          "dshiftl",
          "dshiftr",
          "findloc",
          "iall",
          "iany",
          "iparity",
          "image_index",
          "lcobound",
          "ucobound",
          "maskl",
          "maskr",
          "num_images",
          "parity",
          "popcnt",
          "poppar",
          "shifta",
          "shiftl",
          "shiftr",
          "this_image",
          "sync",
          "change",
          "team",
          "co_broadcast",
          "co_max",
          "co_min",
          "co_sum",
          "co_reduce"
        ]
      },
      illegal: /\/\*/,
      contains: [
        c,
        l,
        // allow `C = value` for assignments so they aren't misdetected
        // as Fortran 77 style comments
        {
          begin: /^C\s*=(?!=)/,
          relevance: 0
        },
        i,
        a
      ]
    };
  }
  return rd = t, rd;
}
var nd, l$;
function gR() {
  if (l$)
    return nd;
  l$ = 1;
  function t(a) {
    return new RegExp(a.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "m");
  }
  function e(a) {
    return a ? typeof a == "string" ? a : a.source : null;
  }
  function r(a) {
    return n("(?=", a, ")");
  }
  function n(...a) {
    return a.map((c) => e(c)).join("");
  }
  function i(a) {
    const l = a[a.length - 1];
    return typeof l == "object" && l.constructor === Object ? (a.splice(a.length - 1, 1), l) : {};
  }
  function s(...a) {
    return "(" + (i(a).capture ? "" : "?:") + a.map((f) => e(f)).join("|") + ")";
  }
  function o(a) {
    const l = [
      "abstract",
      "and",
      "as",
      "assert",
      "base",
      "begin",
      "class",
      "default",
      "delegate",
      "do",
      "done",
      "downcast",
      "downto",
      "elif",
      "else",
      "end",
      "exception",
      "extern",
      // "false", // literal
      "finally",
      "fixed",
      "for",
      "fun",
      "function",
      "global",
      "if",
      "in",
      "inherit",
      "inline",
      "interface",
      "internal",
      "lazy",
      "let",
      "match",
      "member",
      "module",
      "mutable",
      "namespace",
      "new",
      // "not", // built_in
      // "null", // literal
      "of",
      "open",
      "or",
      "override",
      "private",
      "public",
      "rec",
      "return",
      "static",
      "struct",
      "then",
      "to",
      // "true", // literal
      "try",
      "type",
      "upcast",
      "use",
      "val",
      "void",
      "when",
      "while",
      "with",
      "yield"
    ], c = {
      // monad builder keywords (matches before non-bang keywords)
      scope: "keyword",
      match: /\b(yield|return|let|do|match|use)!/
    }, f = [
      "if",
      "else",
      "endif",
      "line",
      "nowarn",
      "light",
      "r",
      "i",
      "I",
      "load",
      "time",
      "help",
      "quit"
    ], m = [
      "true",
      "false",
      "null",
      "Some",
      "None",
      "Ok",
      "Error",
      "infinity",
      "infinityf",
      "nan",
      "nanf"
    ], b = [
      "__LINE__",
      "__SOURCE_DIRECTORY__",
      "__SOURCE_FILE__"
    ], C = [
      // basic types
      "bool",
      "byte",
      "sbyte",
      "int8",
      "int16",
      "int32",
      "uint8",
      "uint16",
      "uint32",
      "int",
      "uint",
      "int64",
      "uint64",
      "nativeint",
      "unativeint",
      "decimal",
      "float",
      "double",
      "float32",
      "single",
      "char",
      "string",
      "unit",
      "bigint",
      // other native types or lowercase aliases
      "option",
      "voption",
      "list",
      "array",
      "seq",
      "byref",
      "exn",
      "inref",
      "nativeptr",
      "obj",
      "outref",
      "voidptr",
      // other important FSharp types
      "Result"
    ], z = {
      keyword: l,
      literal: m,
      built_in: [
        // Somewhat arbitrary list of builtin functions and values.
        // Most of them are declared in Microsoft.FSharp.Core
        // I tried to stay relevant by adding only the most idiomatic
        // and most used symbols that are not already declared as types.
        "not",
        "ref",
        "raise",
        "reraise",
        "dict",
        "readOnlyDict",
        "set",
        "get",
        "enum",
        "sizeof",
        "typeof",
        "typedefof",
        "nameof",
        "nullArg",
        "invalidArg",
        "invalidOp",
        "id",
        "fst",
        "snd",
        "ignore",
        "lock",
        "using",
        "box",
        "unbox",
        "tryUnbox",
        "printf",
        "printfn",
        "sprintf",
        "eprintf",
        "eprintfn",
        "fprintf",
        "fprintfn",
        "failwith",
        "failwithf"
      ],
      "variable.constant": b
    }, Q = {
      variants: [
        a.COMMENT(/\(\*(?!\))/, /\*\)/, {
          contains: ["self"]
        }),
        a.C_LINE_COMMENT_MODE
      ]
    }, Te = /[a-zA-Z_](\w|')*/, ce = {
      scope: "variable",
      begin: /``/,
      end: /``/
    }, ge = /\B('|\^)/, Y = {
      scope: "symbol",
      variants: [
        // the type name is a quoted identifier:
        { match: n(ge, /``.*?``/) },
        // the type name is a normal identifier (we don't use IDENTIFIER_RE because there cannot be another apostrophe here):
        { match: n(ge, a.UNDERSCORE_IDENT_RE) }
      ],
      relevance: 0
    }, fe = function({ includeEqual: $ }) {
      let I;
      $ ? I = "!%&*+-/<=>@^|~?" : I = "!%&*+-/<>@^|~?";
      const D = Array.from(I), ie = n("[", ...D.map(t), "]"), Me = s(ie, /\./), Je = n(Me, r(Me)), it = s(
        n(Je, Me, "*"),
        // Matches at least 2 chars operators
        n(ie, "+")
        // Matches at least one char operators
      );
      return {
        scope: "operator",
        match: s(
          // symbolic operators:
          it,
          // other symbolic keywords:
          // Type casting and conversion operators:
          /:\?>/,
          /:\?/,
          /:>/,
          /:=/,
          // Reference cell assignment
          /::?/,
          // : or ::
          /\$/
        ),
        // A single $ can be used as an operator
        relevance: 0
      };
    }, ae = fe({ includeEqual: !0 }), Re = fe({ includeEqual: !1 }), pe = function($, I) {
      return {
        begin: n(
          // a type annotation is a
          $,
          // should be a colon or the 'of' keyword
          r(
            // that has to be followed by
            n(
              /\s*/,
              // optional space
              s(
                // then either of:
                /\w/,
                // word
                /'/,
                // generic type name
                /\^/,
                // generic type name
                /#/,
                // flexible type name
                /``/,
                // quoted type name
                /\(/,
                // parens type expression
                /{\|/
                // anonymous type annotation
              )
            )
          )
        ),
        beginScope: I,
        // BUG: because ending with \n is necessary for some cases, multi-line type annotations are not properly supported.
        // Examples where \n is required at the end:
        // - abstract member definitions in classes: abstract Property : int * string
        // - return type annotations: let f f' = f' () : returnTypeAnnotation
        // - record fields definitions: { A : int \n B : string }
        end: r(
          s(
            /\n/,
            /=/
          )
        ),
        relevance: 0,
        // we need the known types, and we need the type constraint keywords and literals. e.g.: when 'a : null
        keywords: a.inherit(z, { type: C }),
        contains: [
          Q,
          Y,
          a.inherit(ce, { scope: null }),
          // match to avoid strange patterns inside that may break the parsing
          Re
        ]
      };
    }, Ce = pe(/:/, "operator"), J = pe(/\bof\b/, "keyword"), R = {
      begin: [
        /(^|\s+)/,
        // prevents matching the following: `match s.stype with`
        /type/,
        /\s+/,
        Te
      ],
      beginScope: {
        2: "keyword",
        4: "title.class"
      },
      end: r(/\(|=|$/),
      keywords: z,
      // match keywords in type constraints. e.g.: when 'a : null
      contains: [
        Q,
        a.inherit(ce, { scope: null }),
        // match to avoid strange patterns inside that may break the parsing
        Y,
        {
          // For visual consistency, highlight type brackets as operators.
          scope: "operator",
          match: /<|>/
        },
        Ce
        // generic types can have constraints, which are type annotations. e.g. type MyType<'T when 'T : delegate<obj * string>> =
      ]
    }, ve = {
      // computation expressions:
      scope: "computation-expression",
      // BUG: might conflict with record deconstruction. e.g. let f { Name = name } = name // will highlight f
      match: /\b[_a-z]\w*(?=\s*\{)/
    }, F = {
      // preprocessor directives and fsi commands:
      begin: [
        /^\s*/,
        n(/#/, s(...f)),
        /\b/
      ],
      beginScope: { 2: "meta" },
      end: r(/\s|$/)
    }, ne = {
      variants: [
        a.BINARY_NUMBER_MODE,
        a.C_NUMBER_MODE
      ]
    }, H = {
      scope: "string",
      begin: /"/,
      end: /"/,
      contains: [
        a.BACKSLASH_ESCAPE
      ]
    }, we = {
      scope: "string",
      begin: /@"/,
      end: /"/,
      contains: [
        {
          match: /""/
          // escaped "
        },
        a.BACKSLASH_ESCAPE
      ]
    }, _e = {
      scope: "string",
      begin: /"""/,
      end: /"""/,
      relevance: 2
    }, X = {
      scope: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: z
    }, w = {
      scope: "string",
      begin: /\$"/,
      end: /"/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        a.BACKSLASH_ESCAPE,
        X
      ]
    }, h = {
      scope: "string",
      begin: /(\$@|@\$)"/,
      end: /"/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        {
          match: /""/
        },
        a.BACKSLASH_ESCAPE,
        X
      ]
    }, d = {
      scope: "string",
      begin: /\$"""/,
      end: /"""/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        X
      ],
      relevance: 2
    }, _ = {
      scope: "string",
      match: n(
        /'/,
        s(
          /[^\\']/,
          // either a single non escaped char...
          /\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8})/
          // ...or an escape sequence
        ),
        /'/
      )
    };
    return X.contains = [
      h,
      w,
      we,
      H,
      _,
      c,
      Q,
      ce,
      Ce,
      ve,
      F,
      ne,
      Y,
      ae
    ], {
      name: "F#",
      aliases: [
        "fs",
        "f#"
      ],
      keywords: z,
      illegal: /\/\*/,
      classNameAliases: {
        "computation-expression": "keyword"
      },
      contains: [
        c,
        {
          variants: [
            d,
            h,
            w,
            _e,
            we,
            H,
            _
          ]
        },
        Q,
        ce,
        R,
        {
          // e.g. [<Attributes("")>] or [<``module``: MyCustomAttributeThatWorksOnModules>]
          // or [<Sealed; NoEquality; NoComparison; CompiledName("FSharpAsync`1")>]
          scope: "meta",
          begin: /\[</,
          end: />\]/,
          relevance: 2,
          contains: [
            ce,
            // can contain any constant value
            _e,
            we,
            H,
            _,
            ne
          ]
        },
        J,
        Ce,
        ve,
        F,
        ne,
        Y,
        ae
      ]
    };
  }
  return nd = o, nd;
}
var id, c$;
function $R() {
  if (c$)
    return id;
  c$ = 1;
  function t(e) {
    const r = e.regex, n = {
      keyword: "abort acronym acronyms alias all and assign binary card diag display else eq file files for free ge gt if integer le loop lt maximizing minimizing model models ne negative no not option options or ord positive prod put putpage puttl repeat sameas semicont semiint smax smin solve sos1 sos2 sum system table then until using while xor yes",
      literal: "eps inf na",
      built_in: "abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power randBinomial randLinear randTriangle round rPower sigmoid sign signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion handleCollect handleDelete handleStatus handleSubmit heapFree heapLimit heapSize jobHandle jobKill jobStatus jobTerminate licenseLevel licenseStatus maxExecError sleep timeClose timeComp timeElapsed timeExec timeStart"
    }, i = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: !0,
      excludeEnd: !0
    }, s = {
      className: "symbol",
      variants: [
        { begin: /=[lgenxc]=/ },
        { begin: /\$/ }
      ]
    }, o = {
      // One-line quoted comment string
      className: "comment",
      variants: [
        {
          begin: "'",
          end: "'"
        },
        {
          begin: '"',
          end: '"'
        }
      ],
      illegal: "\\n",
      contains: [e.BACKSLASH_ESCAPE]
    }, a = {
      begin: "/",
      end: "/",
      keywords: n,
      contains: [
        o,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        e.C_NUMBER_MODE
      ]
    }, l = /[a-z0-9&#*=?@\\><:,()$[\]_.{}!+%^-]+/, c = {
      // Parameter/set/variable description text
      begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
      excludeBegin: !0,
      end: "$",
      endsWithParent: !0,
      contains: [
        o,
        a,
        {
          className: "comment",
          // one comment word, then possibly more
          begin: r.concat(
            l,
            // [ ] because \s would be too broad (matching newlines)
            r.anyNumberOfTimes(r.concat(/[ ]+/, l))
          ),
          relevance: 0
        }
      ]
    };
    return {
      name: "GAMS",
      aliases: ["gms"],
      case_insensitive: !0,
      keywords: n,
      contains: [
        e.COMMENT(/^\$ontext/, /^\$offtext/),
        {
          className: "meta",
          begin: "^\\$[a-z0-9]+",
          end: "$",
          returnBegin: !0,
          contains: [
            {
              className: "keyword",
              begin: "^\\$[a-z0-9]+"
            }
          ]
        },
        e.COMMENT("^\\*", "$"),
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        // Declarations
        {
          beginKeywords: "set sets parameter parameters variable variables scalar scalars equation equations",
          end: ";",
          contains: [
            e.COMMENT("^\\*", "$"),
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            e.QUOTE_STRING_MODE,
            e.APOS_STRING_MODE,
            a,
            c
          ]
        },
        {
          // table environment
          beginKeywords: "table",
          end: ";",
          returnBegin: !0,
          contains: [
            {
              // table header row
              beginKeywords: "table",
              end: "$",
              contains: [c]
            },
            e.COMMENT("^\\*", "$"),
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            e.QUOTE_STRING_MODE,
            e.APOS_STRING_MODE,
            e.C_NUMBER_MODE
            // Table does not contain DESCTEXT or ASSIGNMENT
          ]
        },
        // Function definitions
        {
          className: "function",
          begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
          returnBegin: !0,
          contains: [
            {
              // Function title
              className: "title",
              begin: /^[a-z0-9_]+/
            },
            i,
            s
          ]
        },
        e.C_NUMBER_MODE,
        s
      ]
    };
  }
  return id = t, id;
}
var sd, u$;
function bR() {
  if (u$)
    return sd;
  u$ = 1;
  function t(e) {
    const r = {
      keyword: "bool break call callexe checkinterrupt clear clearg closeall cls comlog compile continue create debug declare delete disable dlibrary dllcall do dos ed edit else elseif enable end endfor endif endp endo errorlog errorlogat expr external fn for format goto gosub graph if keyword let lib library line load loadarray loadexe loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow matrix msym ndpclex new open output outwidth plot plotsym pop prcsn print printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen scroll setarray show sparse stop string struct system trace trap threadfor threadendfor threadbegin threadjoin threadstat threadend until use while winprint ne ge le gt lt and xor or not eq eqv",
      built_in: "abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin sylvester strtrim",
      literal: "DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES DB_TRANSACTIONS DB_UNICODE DB_VIEWS __STDIN __STDOUT __STDERR __FILE_DIR"
    }, n = e.COMMENT("@", "@"), i = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: "define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          end: "$",
          keywords: { keyword: "include" },
          contains: [
            {
              className: "string",
              begin: '"',
              end: '"',
              illegal: "\\n"
            }
          ]
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        n
      ]
    }, s = {
      begin: /\bstruct\s+/,
      end: /\s/,
      keywords: "struct",
      contains: [
        {
          className: "type",
          begin: e.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    }, o = [
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        excludeBegin: !0,
        excludeEnd: !0,
        endsWithParent: !0,
        relevance: 0,
        contains: [
          {
            // dots
            className: "literal",
            begin: /\.\.\./
          },
          e.C_NUMBER_MODE,
          e.C_BLOCK_COMMENT_MODE,
          n,
          s
        ]
      }
    ], a = {
      className: "title",
      begin: e.UNDERSCORE_IDENT_RE,
      relevance: 0
    }, l = function(C, N, z) {
      const A = e.inherit(
        {
          className: "function",
          beginKeywords: C,
          end: N,
          excludeEnd: !0,
          contains: [].concat(o)
        },
        z || {}
      );
      return A.contains.push(a), A.contains.push(e.C_NUMBER_MODE), A.contains.push(e.C_BLOCK_COMMENT_MODE), A.contains.push(n), A;
    }, c = {
      // these are explicitly named internal function calls
      className: "built_in",
      begin: "\\b(" + r.built_in.split(" ").join("|") + ")\\b"
    }, f = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [e.BACKSLASH_ESCAPE],
      relevance: 0
    }, m = {
      // className: "fn_ref",
      begin: e.UNDERSCORE_IDENT_RE + "\\s*\\(",
      returnBegin: !0,
      keywords: r,
      relevance: 0,
      contains: [
        { beginKeywords: r.keyword },
        c,
        {
          // ambiguously named function calls get a relevance of 0
          className: "built_in",
          begin: e.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    }, b = {
      // className: "fn_ref_params",
      begin: /\(/,
      end: /\)/,
      relevance: 0,
      keywords: {
        built_in: r.built_in,
        literal: r.literal
      },
      contains: [
        e.C_NUMBER_MODE,
        e.C_BLOCK_COMMENT_MODE,
        n,
        c,
        m,
        f,
        "self"
      ]
    };
    return m.contains.push(b), {
      name: "GAUSS",
      aliases: ["gss"],
      case_insensitive: !0,
      // language is case-insensitive
      keywords: r,
      illegal: /(\{[%#]|[%#]\}| <- )/,
      contains: [
        e.C_NUMBER_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        n,
        f,
        i,
        {
          className: "keyword",
          begin: /\bexternal (matrix|string|array|sparse matrix|struct|proc|keyword|fn)/
        },
        l("proc keyword", ";"),
        l("fn", "="),
        {
          beginKeywords: "for threadfor",
          end: /;/,
          // end: /\(/,
          relevance: 0,
          contains: [
            e.C_BLOCK_COMMENT_MODE,
            n,
            b
          ]
        },
        {
          // custom method guard
          // excludes method names from keyword processing
          variants: [
            { begin: e.UNDERSCORE_IDENT_RE + "\\." + e.UNDERSCORE_IDENT_RE },
            { begin: e.UNDERSCORE_IDENT_RE + "\\s*=" }
          ],
          relevance: 0
        },
        m,
        s
      ]
    };
  }
  return sd = t, sd;
}
var od, d$;
function ER() {
  if (d$)
    return od;
  d$ = 1;
  function t(e) {
    const r = "[A-Z_][A-Z0-9_.]*", n = "%", i = {
      $pattern: r,
      keyword: "IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT EQ LT GT NE GE LE OR XOR"
    }, s = {
      className: "meta",
      begin: "([O])([0-9]+)"
    }, o = e.inherit(e.C_NUMBER_MODE, { begin: "([-+]?((\\.\\d+)|(\\d+)(\\.\\d*)?))|" + e.C_NUMBER_RE }), a = [
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      e.COMMENT(/\(/, /\)/),
      o,
      e.inherit(e.APOS_STRING_MODE, { illegal: null }),
      e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
      {
        className: "name",
        begin: "([G])([0-9]+\\.?[0-9]?)"
      },
      {
        className: "name",
        begin: "([M])([0-9]+\\.?[0-9]?)"
      },
      {
        className: "attr",
        begin: "(VC|VS|#)",
        end: "(\\d+)"
      },
      {
        className: "attr",
        begin: "(VZOFX|VZOFY|VZOFZ)"
      },
      {
        className: "built_in",
        begin: "(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)",
        contains: [o],
        end: "\\]"
      },
      {
        className: "symbol",
        variants: [
          {
            begin: "N",
            end: "\\d+",
            illegal: "\\W"
          }
        ]
      }
    ];
    return {
      name: "G-code (ISO 6983)",
      aliases: ["nc"],
      // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.
      // However, most prefer all uppercase and uppercase is customary.
      case_insensitive: !0,
      keywords: i,
      contains: [
        {
          className: "meta",
          begin: n
        },
        s
      ].concat(a)
    };
  }
  return od = t, od;
}
var ad, f$;
function vR() {
  if (f$)
    return ad;
  f$ = 1;
  function t(e) {
    return {
      name: "Gherkin",
      aliases: ["feature"],
      keywords: "Feature Background Ability Business Need Scenario Scenarios Scenario Outline Scenario Template Examples Given And Then But When",
      contains: [
        {
          className: "symbol",
          begin: "\\*",
          relevance: 0
        },
        {
          className: "meta",
          begin: "@[^@\\s]+"
        },
        {
          begin: "\\|",
          end: "\\|\\w*$",
          contains: [
            {
              className: "string",
              begin: "[^|]+"
            }
          ]
        },
        {
          className: "variable",
          begin: "<",
          end: ">"
        },
        e.HASH_COMMENT_MODE,
        {
          className: "string",
          begin: '"""',
          end: '"""'
        },
        e.QUOTE_STRING_MODE
      ]
    };
  }
  return ad = t, ad;
}
var ld, p$;
function SR() {
  if (p$)
    return ld;
  p$ = 1;
  function t(e) {
    return {
      name: "GLSL",
      keywords: {
        keyword: (
          // Statements
          "break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly"
        ),
        type: "atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",
        built_in: (
          // Constants
          "gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow"
        ),
        literal: "true false"
      },
      illegal: '"',
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        }
      ]
    };
  }
  return ld = t, ld;
}
var cd, _$;
function yR() {
  if (_$)
    return cd;
  _$ = 1;
  function t(e) {
    return {
      name: "GML",
      case_insensitive: !1,
      // language is case-insensitive
      keywords: {
        keyword: [
          "#endregion",
          "#macro",
          "#region",
          "and",
          "begin",
          "break",
          "case",
          "constructor",
          "continue",
          "default",
          "delete",
          "div",
          "do",
          "else",
          "end",
          "enum",
          "exit",
          "for",
          "function",
          "globalvar",
          "if",
          "mod",
          "not",
          "or",
          "repeat",
          "return",
          "switch",
          "then",
          "until",
          "var",
          "while",
          "with",
          "xor"
        ],
        built_in: [
          "abs",
          "achievement_available",
          "achievement_event",
          "achievement_get_challenges",
          "achievement_get_info",
          "achievement_get_pic",
          "achievement_increment",
          "achievement_load_friends",
          "achievement_load_leaderboard",
          "achievement_load_progress",
          "achievement_login",
          "achievement_login_status",
          "achievement_logout",
          "achievement_post",
          "achievement_post_score",
          "achievement_reset",
          "achievement_send_challenge",
          "achievement_show",
          "achievement_show_achievements",
          "achievement_show_challenge_notifications",
          "achievement_show_leaderboards",
          "action_inherited",
          "action_kill_object",
          "ads_disable",
          "ads_enable",
          "ads_engagement_active",
          "ads_engagement_available",
          "ads_engagement_launch",
          "ads_event",
          "ads_event_preload",
          "ads_get_display_height",
          "ads_get_display_width",
          "ads_interstitial_available",
          "ads_interstitial_display",
          "ads_move",
          "ads_set_reward_callback",
          "ads_setup",
          "alarm_get",
          "alarm_set",
          "analytics_event",
          "analytics_event_ext",
          "angle_difference",
          "ansi_char",
          "application_get_position",
          "application_surface_draw_enable",
          "application_surface_enable",
          "application_surface_is_enabled",
          "arccos",
          "arcsin",
          "arctan",
          "arctan2",
          "array_copy",
          "array_create",
          "array_delete",
          "array_equals",
          "array_height_2d",
          "array_insert",
          "array_length",
          "array_length_1d",
          "array_length_2d",
          "array_pop",
          "array_push",
          "array_resize",
          "array_sort",
          "asset_get_index",
          "asset_get_type",
          "audio_channel_num",
          "audio_create_buffer_sound",
          "audio_create_play_queue",
          "audio_create_stream",
          "audio_create_sync_group",
          "audio_debug",
          "audio_destroy_stream",
          "audio_destroy_sync_group",
          "audio_emitter_create",
          "audio_emitter_exists",
          "audio_emitter_falloff",
          "audio_emitter_free",
          "audio_emitter_gain",
          "audio_emitter_get_gain",
          "audio_emitter_get_listener_mask",
          "audio_emitter_get_pitch",
          "audio_emitter_get_vx",
          "audio_emitter_get_vy",
          "audio_emitter_get_vz",
          "audio_emitter_get_x",
          "audio_emitter_get_y",
          "audio_emitter_get_z",
          "audio_emitter_pitch",
          "audio_emitter_position",
          "audio_emitter_set_listener_mask",
          "audio_emitter_velocity",
          "audio_exists",
          "audio_falloff_set_model",
          "audio_free_buffer_sound",
          "audio_free_play_queue",
          "audio_get_listener_count",
          "audio_get_listener_info",
          "audio_get_listener_mask",
          "audio_get_master_gain",
          "audio_get_name",
          "audio_get_recorder_count",
          "audio_get_recorder_info",
          "audio_get_type",
          "audio_group_is_loaded",
          "audio_group_load",
          "audio_group_load_progress",
          "audio_group_name",
          "audio_group_set_gain",
          "audio_group_stop_all",
          "audio_group_unload",
          "audio_is_paused",
          "audio_is_playing",
          "audio_listener_get_data",
          "audio_listener_orientation",
          "audio_listener_position",
          "audio_listener_set_orientation",
          "audio_listener_set_position",
          "audio_listener_set_velocity",
          "audio_listener_velocity",
          "audio_master_gain",
          "audio_music_gain",
          "audio_music_is_playing",
          "audio_pause_all",
          "audio_pause_music",
          "audio_pause_sound",
          "audio_pause_sync_group",
          "audio_play_in_sync_group",
          "audio_play_music",
          "audio_play_sound",
          "audio_play_sound_at",
          "audio_play_sound_on",
          "audio_queue_sound",
          "audio_resume_all",
          "audio_resume_music",
          "audio_resume_sound",
          "audio_resume_sync_group",
          "audio_set_listener_mask",
          "audio_set_master_gain",
          "audio_sound_gain",
          "audio_sound_get_gain",
          "audio_sound_get_listener_mask",
          "audio_sound_get_pitch",
          "audio_sound_get_track_position",
          "audio_sound_length",
          "audio_sound_pitch",
          "audio_sound_set_listener_mask",
          "audio_sound_set_track_position",
          "audio_start_recording",
          "audio_start_sync_group",
          "audio_stop_all",
          "audio_stop_music",
          "audio_stop_recording",
          "audio_stop_sound",
          "audio_stop_sync_group",
          "audio_sync_group_debug",
          "audio_sync_group_get_track_pos",
          "audio_sync_group_is_playing",
          "audio_system",
          "background_get_height",
          "background_get_width",
          "base64_decode",
          "base64_encode",
          "browser_input_capture",
          "buffer_async_group_begin",
          "buffer_async_group_end",
          "buffer_async_group_option",
          "buffer_base64_decode",
          "buffer_base64_decode_ext",
          "buffer_base64_encode",
          "buffer_copy",
          "buffer_copy_from_vertex_buffer",
          "buffer_create",
          "buffer_create_from_vertex_buffer",
          "buffer_create_from_vertex_buffer_ext",
          "buffer_delete",
          "buffer_exists",
          "buffer_fill",
          "buffer_get_address",
          "buffer_get_alignment",
          "buffer_get_size",
          "buffer_get_surface",
          "buffer_get_type",
          "buffer_load",
          "buffer_load_async",
          "buffer_load_ext",
          "buffer_load_partial",
          "buffer_md5",
          "buffer_peek",
          "buffer_poke",
          "buffer_read",
          "buffer_resize",
          "buffer_save",
          "buffer_save_async",
          "buffer_save_ext",
          "buffer_seek",
          "buffer_set_surface",
          "buffer_sha1",
          "buffer_sizeof",
          "buffer_tell",
          "buffer_write",
          "camera_apply",
          "camera_create",
          "camera_create_view",
          "camera_destroy",
          "camera_get_active",
          "camera_get_begin_script",
          "camera_get_default",
          "camera_get_end_script",
          "camera_get_proj_mat",
          "camera_get_update_script",
          "camera_get_view_angle",
          "camera_get_view_border_x",
          "camera_get_view_border_y",
          "camera_get_view_height",
          "camera_get_view_mat",
          "camera_get_view_speed_x",
          "camera_get_view_speed_y",
          "camera_get_view_target",
          "camera_get_view_width",
          "camera_get_view_x",
          "camera_get_view_y",
          "camera_set_begin_script",
          "camera_set_default",
          "camera_set_end_script",
          "camera_set_proj_mat",
          "camera_set_update_script",
          "camera_set_view_angle",
          "camera_set_view_border",
          "camera_set_view_mat",
          "camera_set_view_pos",
          "camera_set_view_size",
          "camera_set_view_speed",
          "camera_set_view_target",
          "ceil",
          "choose",
          "chr",
          "clamp",
          "clickable_add",
          "clickable_add_ext",
          "clickable_change",
          "clickable_change_ext",
          "clickable_delete",
          "clickable_exists",
          "clickable_set_style",
          "clipboard_get_text",
          "clipboard_has_text",
          "clipboard_set_text",
          "cloud_file_save",
          "cloud_string_save",
          "cloud_synchronise",
          "code_is_compiled",
          "collision_circle",
          "collision_circle_list",
          "collision_ellipse",
          "collision_ellipse_list",
          "collision_line",
          "collision_line_list",
          "collision_point",
          "collision_point_list",
          "collision_rectangle",
          "collision_rectangle_list",
          "color_get_blue",
          "color_get_green",
          "color_get_hue",
          "color_get_red",
          "color_get_saturation",
          "color_get_value",
          "colour_get_blue",
          "colour_get_green",
          "colour_get_hue",
          "colour_get_red",
          "colour_get_saturation",
          "colour_get_value",
          "cos",
          "darccos",
          "darcsin",
          "darctan",
          "darctan2",
          "date_compare_date",
          "date_compare_datetime",
          "date_compare_time",
          "date_create_datetime",
          "date_current_datetime",
          "date_date_of",
          "date_date_string",
          "date_datetime_string",
          "date_day_span",
          "date_days_in_month",
          "date_days_in_year",
          "date_get_day",
          "date_get_day_of_year",
          "date_get_hour",
          "date_get_hour_of_year",
          "date_get_minute",
          "date_get_minute_of_year",
          "date_get_month",
          "date_get_second",
          "date_get_second_of_year",
          "date_get_timezone",
          "date_get_week",
          "date_get_weekday",
          "date_get_year",
          "date_hour_span",
          "date_inc_day",
          "date_inc_hour",
          "date_inc_minute",
          "date_inc_month",
          "date_inc_second",
          "date_inc_week",
          "date_inc_year",
          "date_is_today",
          "date_leap_year",
          "date_minute_span",
          "date_month_span",
          "date_second_span",
          "date_set_timezone",
          "date_time_of",
          "date_time_string",
          "date_valid_datetime",
          "date_week_span",
          "date_year_span",
          "dcos",
          "debug_event",
          "debug_get_callstack",
          "degtorad",
          "device_get_tilt_x",
          "device_get_tilt_y",
          "device_get_tilt_z",
          "device_is_keypad_open",
          "device_mouse_check_button",
          "device_mouse_check_button_pressed",
          "device_mouse_check_button_released",
          "device_mouse_dbclick_enable",
          "device_mouse_raw_x",
          "device_mouse_raw_y",
          "device_mouse_x",
          "device_mouse_x_to_gui",
          "device_mouse_y",
          "device_mouse_y_to_gui",
          "directory_create",
          "directory_destroy",
          "directory_exists",
          "display_get_dpi_x",
          "display_get_dpi_y",
          "display_get_gui_height",
          "display_get_gui_width",
          "display_get_height",
          "display_get_orientation",
          "display_get_sleep_margin",
          "display_get_timing_method",
          "display_get_width",
          "display_mouse_get_x",
          "display_mouse_get_y",
          "display_mouse_set",
          "display_reset",
          "display_set_gui_maximise",
          "display_set_gui_maximize",
          "display_set_gui_size",
          "display_set_sleep_margin",
          "display_set_timing_method",
          "display_set_ui_visibility",
          "distance_to_object",
          "distance_to_point",
          "dot_product",
          "dot_product_3d",
          "dot_product_3d_normalised",
          "dot_product_3d_normalized",
          "dot_product_normalised",
          "dot_product_normalized",
          "draw_arrow",
          "draw_background",
          "draw_background_ext",
          "draw_background_part_ext",
          "draw_background_tiled",
          "draw_button",
          "draw_circle",
          "draw_circle_color",
          "draw_circle_colour",
          "draw_clear",
          "draw_clear_alpha",
          "draw_ellipse",
          "draw_ellipse_color",
          "draw_ellipse_colour",
          "draw_enable_alphablend",
          "draw_enable_drawevent",
          "draw_enable_swf_aa",
          "draw_flush",
          "draw_get_alpha",
          "draw_get_color",
          "draw_get_colour",
          "draw_get_lighting",
          "draw_get_swf_aa_level",
          "draw_getpixel",
          "draw_getpixel_ext",
          "draw_healthbar",
          "draw_highscore",
          "draw_light_define_ambient",
          "draw_light_define_direction",
          "draw_light_define_point",
          "draw_light_enable",
          "draw_light_get",
          "draw_light_get_ambient",
          "draw_line",
          "draw_line_color",
          "draw_line_colour",
          "draw_line_width",
          "draw_line_width_color",
          "draw_line_width_colour",
          "draw_path",
          "draw_point",
          "draw_point_color",
          "draw_point_colour",
          "draw_primitive_begin",
          "draw_primitive_begin_texture",
          "draw_primitive_end",
          "draw_rectangle",
          "draw_rectangle_color",
          "draw_rectangle_colour",
          "draw_roundrect",
          "draw_roundrect_color",
          "draw_roundrect_color_ext",
          "draw_roundrect_colour",
          "draw_roundrect_colour_ext",
          "draw_roundrect_ext",
          "draw_self",
          "draw_set_alpha",
          "draw_set_alpha_test",
          "draw_set_alpha_test_ref_value",
          "draw_set_blend_mode",
          "draw_set_blend_mode_ext",
          "draw_set_circle_precision",
          "draw_set_color",
          "draw_set_color_write_enable",
          "draw_set_colour",
          "draw_set_font",
          "draw_set_halign",
          "draw_set_lighting",
          "draw_set_swf_aa_level",
          "draw_set_valign",
          "draw_skeleton",
          "draw_skeleton_collision",
          "draw_skeleton_instance",
          "draw_skeleton_time",
          "draw_sprite",
          "draw_sprite_ext",
          "draw_sprite_general",
          "draw_sprite_part",
          "draw_sprite_part_ext",
          "draw_sprite_pos",
          "draw_sprite_stretched",
          "draw_sprite_stretched_ext",
          "draw_sprite_tiled",
          "draw_sprite_tiled_ext",
          "draw_surface",
          "draw_surface_ext",
          "draw_surface_general",
          "draw_surface_part",
          "draw_surface_part_ext",
          "draw_surface_stretched",
          "draw_surface_stretched_ext",
          "draw_surface_tiled",
          "draw_surface_tiled_ext",
          "draw_text",
          "draw_text_color",
          "draw_text_colour",
          "draw_text_ext",
          "draw_text_ext_color",
          "draw_text_ext_colour",
          "draw_text_ext_transformed",
          "draw_text_ext_transformed_color",
          "draw_text_ext_transformed_colour",
          "draw_text_transformed",
          "draw_text_transformed_color",
          "draw_text_transformed_colour",
          "draw_texture_flush",
          "draw_tile",
          "draw_tilemap",
          "draw_triangle",
          "draw_triangle_color",
          "draw_triangle_colour",
          "draw_vertex",
          "draw_vertex_color",
          "draw_vertex_colour",
          "draw_vertex_texture",
          "draw_vertex_texture_color",
          "draw_vertex_texture_colour",
          "ds_exists",
          "ds_grid_add",
          "ds_grid_add_disk",
          "ds_grid_add_grid_region",
          "ds_grid_add_region",
          "ds_grid_clear",
          "ds_grid_copy",
          "ds_grid_create",
          "ds_grid_destroy",
          "ds_grid_get",
          "ds_grid_get_disk_max",
          "ds_grid_get_disk_mean",
          "ds_grid_get_disk_min",
          "ds_grid_get_disk_sum",
          "ds_grid_get_max",
          "ds_grid_get_mean",
          "ds_grid_get_min",
          "ds_grid_get_sum",
          "ds_grid_height",
          "ds_grid_multiply",
          "ds_grid_multiply_disk",
          "ds_grid_multiply_grid_region",
          "ds_grid_multiply_region",
          "ds_grid_read",
          "ds_grid_resize",
          "ds_grid_set",
          "ds_grid_set_disk",
          "ds_grid_set_grid_region",
          "ds_grid_set_region",
          "ds_grid_shuffle",
          "ds_grid_sort",
          "ds_grid_value_disk_exists",
          "ds_grid_value_disk_x",
          "ds_grid_value_disk_y",
          "ds_grid_value_exists",
          "ds_grid_value_x",
          "ds_grid_value_y",
          "ds_grid_width",
          "ds_grid_write",
          "ds_list_add",
          "ds_list_clear",
          "ds_list_copy",
          "ds_list_create",
          "ds_list_delete",
          "ds_list_destroy",
          "ds_list_empty",
          "ds_list_find_index",
          "ds_list_find_value",
          "ds_list_insert",
          "ds_list_mark_as_list",
          "ds_list_mark_as_map",
          "ds_list_read",
          "ds_list_replace",
          "ds_list_set",
          "ds_list_shuffle",
          "ds_list_size",
          "ds_list_sort",
          "ds_list_write",
          "ds_map_add",
          "ds_map_add_list",
          "ds_map_add_map",
          "ds_map_clear",
          "ds_map_copy",
          "ds_map_create",
          "ds_map_delete",
          "ds_map_destroy",
          "ds_map_empty",
          "ds_map_exists",
          "ds_map_find_first",
          "ds_map_find_last",
          "ds_map_find_next",
          "ds_map_find_previous",
          "ds_map_find_value",
          "ds_map_read",
          "ds_map_replace",
          "ds_map_replace_list",
          "ds_map_replace_map",
          "ds_map_secure_load",
          "ds_map_secure_load_buffer",
          "ds_map_secure_save",
          "ds_map_secure_save_buffer",
          "ds_map_set",
          "ds_map_size",
          "ds_map_write",
          "ds_priority_add",
          "ds_priority_change_priority",
          "ds_priority_clear",
          "ds_priority_copy",
          "ds_priority_create",
          "ds_priority_delete_max",
          "ds_priority_delete_min",
          "ds_priority_delete_value",
          "ds_priority_destroy",
          "ds_priority_empty",
          "ds_priority_find_max",
          "ds_priority_find_min",
          "ds_priority_find_priority",
          "ds_priority_read",
          "ds_priority_size",
          "ds_priority_write",
          "ds_queue_clear",
          "ds_queue_copy",
          "ds_queue_create",
          "ds_queue_dequeue",
          "ds_queue_destroy",
          "ds_queue_empty",
          "ds_queue_enqueue",
          "ds_queue_head",
          "ds_queue_read",
          "ds_queue_size",
          "ds_queue_tail",
          "ds_queue_write",
          "ds_set_precision",
          "ds_stack_clear",
          "ds_stack_copy",
          "ds_stack_create",
          "ds_stack_destroy",
          "ds_stack_empty",
          "ds_stack_pop",
          "ds_stack_push",
          "ds_stack_read",
          "ds_stack_size",
          "ds_stack_top",
          "ds_stack_write",
          "dsin",
          "dtan",
          "effect_clear",
          "effect_create_above",
          "effect_create_below",
          "environment_get_variable",
          "event_inherited",
          "event_perform",
          "event_perform_object",
          "event_user",
          "exp",
          "external_call",
          "external_define",
          "external_free",
          "facebook_accesstoken",
          "facebook_check_permission",
          "facebook_dialog",
          "facebook_graph_request",
          "facebook_init",
          "facebook_launch_offerwall",
          "facebook_login",
          "facebook_logout",
          "facebook_post_message",
          "facebook_request_publish_permissions",
          "facebook_request_read_permissions",
          "facebook_send_invite",
          "facebook_status",
          "facebook_user_id",
          "file_attributes",
          "file_bin_close",
          "file_bin_open",
          "file_bin_position",
          "file_bin_read_byte",
          "file_bin_rewrite",
          "file_bin_seek",
          "file_bin_size",
          "file_bin_write_byte",
          "file_copy",
          "file_delete",
          "file_exists",
          "file_find_close",
          "file_find_first",
          "file_find_next",
          "file_rename",
          "file_text_close",
          "file_text_eof",
          "file_text_eoln",
          "file_text_open_append",
          "file_text_open_from_string",
          "file_text_open_read",
          "file_text_open_write",
          "file_text_read_real",
          "file_text_read_string",
          "file_text_readln",
          "file_text_write_real",
          "file_text_write_string",
          "file_text_writeln",
          "filename_change_ext",
          "filename_dir",
          "filename_drive",
          "filename_ext",
          "filename_name",
          "filename_path",
          "floor",
          "font_add",
          "font_add_enable_aa",
          "font_add_get_enable_aa",
          "font_add_sprite",
          "font_add_sprite_ext",
          "font_delete",
          "font_exists",
          "font_get_bold",
          "font_get_first",
          "font_get_fontname",
          "font_get_italic",
          "font_get_last",
          "font_get_name",
          "font_get_size",
          "font_get_texture",
          "font_get_uvs",
          "font_replace",
          "font_replace_sprite",
          "font_replace_sprite_ext",
          "font_set_cache_size",
          "font_texture_page_size",
          "frac",
          "game_end",
          "game_get_speed",
          "game_load",
          "game_load_buffer",
          "game_restart",
          "game_save",
          "game_save_buffer",
          "game_set_speed",
          "gamepad_axis_count",
          "gamepad_axis_value",
          "gamepad_button_check",
          "gamepad_button_check_pressed",
          "gamepad_button_check_released",
          "gamepad_button_count",
          "gamepad_button_value",
          "gamepad_get_axis_deadzone",
          "gamepad_get_button_threshold",
          "gamepad_get_description",
          "gamepad_get_device_count",
          "gamepad_is_connected",
          "gamepad_is_supported",
          "gamepad_set_axis_deadzone",
          "gamepad_set_button_threshold",
          "gamepad_set_color",
          "gamepad_set_colour",
          "gamepad_set_vibration",
          "gesture_double_tap_distance",
          "gesture_double_tap_time",
          "gesture_drag_distance",
          "gesture_drag_time",
          "gesture_flick_speed",
          "gesture_get_double_tap_distance",
          "gesture_get_double_tap_time",
          "gesture_get_drag_distance",
          "gesture_get_drag_time",
          "gesture_get_flick_speed",
          "gesture_get_pinch_angle_away",
          "gesture_get_pinch_angle_towards",
          "gesture_get_pinch_distance",
          "gesture_get_rotate_angle",
          "gesture_get_rotate_time",
          "gesture_get_tap_count",
          "gesture_pinch_angle_away",
          "gesture_pinch_angle_towards",
          "gesture_pinch_distance",
          "gesture_rotate_angle",
          "gesture_rotate_time",
          "gesture_tap_count",
          "get_integer",
          "get_integer_async",
          "get_login_async",
          "get_open_filename",
          "get_open_filename_ext",
          "get_save_filename",
          "get_save_filename_ext",
          "get_string",
          "get_string_async",
          "get_timer",
          "gml_pragma",
          "gml_release_mode",
          "gpu_get_alphatestenable",
          "gpu_get_alphatestfunc",
          "gpu_get_alphatestref",
          "gpu_get_blendenable",
          "gpu_get_blendmode",
          "gpu_get_blendmode_dest",
          "gpu_get_blendmode_destalpha",
          "gpu_get_blendmode_ext",
          "gpu_get_blendmode_ext_sepalpha",
          "gpu_get_blendmode_src",
          "gpu_get_blendmode_srcalpha",
          "gpu_get_colorwriteenable",
          "gpu_get_colourwriteenable",
          "gpu_get_cullmode",
          "gpu_get_fog",
          "gpu_get_lightingenable",
          "gpu_get_state",
          "gpu_get_tex_filter",
          "gpu_get_tex_filter_ext",
          "gpu_get_tex_max_aniso",
          "gpu_get_tex_max_aniso_ext",
          "gpu_get_tex_max_mip",
          "gpu_get_tex_max_mip_ext",
          "gpu_get_tex_min_mip",
          "gpu_get_tex_min_mip_ext",
          "gpu_get_tex_mip_bias",
          "gpu_get_tex_mip_bias_ext",
          "gpu_get_tex_mip_enable",
          "gpu_get_tex_mip_enable_ext",
          "gpu_get_tex_mip_filter",
          "gpu_get_tex_mip_filter_ext",
          "gpu_get_tex_repeat",
          "gpu_get_tex_repeat_ext",
          "gpu_get_texfilter",
          "gpu_get_texfilter_ext",
          "gpu_get_texrepeat",
          "gpu_get_texrepeat_ext",
          "gpu_get_zfunc",
          "gpu_get_ztestenable",
          "gpu_get_zwriteenable",
          "gpu_pop_state",
          "gpu_push_state",
          "gpu_set_alphatestenable",
          "gpu_set_alphatestfunc",
          "gpu_set_alphatestref",
          "gpu_set_blendenable",
          "gpu_set_blendmode",
          "gpu_set_blendmode_ext",
          "gpu_set_blendmode_ext_sepalpha",
          "gpu_set_colorwriteenable",
          "gpu_set_colourwriteenable",
          "gpu_set_cullmode",
          "gpu_set_fog",
          "gpu_set_lightingenable",
          "gpu_set_state",
          "gpu_set_tex_filter",
          "gpu_set_tex_filter_ext",
          "gpu_set_tex_max_aniso",
          "gpu_set_tex_max_aniso_ext",
          "gpu_set_tex_max_mip",
          "gpu_set_tex_max_mip_ext",
          "gpu_set_tex_min_mip",
          "gpu_set_tex_min_mip_ext",
          "gpu_set_tex_mip_bias",
          "gpu_set_tex_mip_bias_ext",
          "gpu_set_tex_mip_enable",
          "gpu_set_tex_mip_enable_ext",
          "gpu_set_tex_mip_filter",
          "gpu_set_tex_mip_filter_ext",
          "gpu_set_tex_repeat",
          "gpu_set_tex_repeat_ext",
          "gpu_set_texfilter",
          "gpu_set_texfilter_ext",
          "gpu_set_texrepeat",
          "gpu_set_texrepeat_ext",
          "gpu_set_zfunc",
          "gpu_set_ztestenable",
          "gpu_set_zwriteenable",
          "highscore_add",
          "highscore_clear",
          "highscore_name",
          "highscore_value",
          "http_get",
          "http_get_file",
          "http_post_string",
          "http_request",
          "iap_acquire",
          "iap_activate",
          "iap_consume",
          "iap_enumerate_products",
          "iap_product_details",
          "iap_purchase_details",
          "iap_restore_all",
          "iap_status",
          "ini_close",
          "ini_key_delete",
          "ini_key_exists",
          "ini_open",
          "ini_open_from_string",
          "ini_read_real",
          "ini_read_string",
          "ini_section_delete",
          "ini_section_exists",
          "ini_write_real",
          "ini_write_string",
          "instance_activate_all",
          "instance_activate_layer",
          "instance_activate_object",
          "instance_activate_region",
          "instance_change",
          "instance_copy",
          "instance_create",
          "instance_create_depth",
          "instance_create_layer",
          "instance_deactivate_all",
          "instance_deactivate_layer",
          "instance_deactivate_object",
          "instance_deactivate_region",
          "instance_destroy",
          "instance_exists",
          "instance_find",
          "instance_furthest",
          "instance_id_get",
          "instance_nearest",
          "instance_number",
          "instance_place",
          "instance_place_list",
          "instance_position",
          "instance_position_list",
          "int64",
          "io_clear",
          "irandom",
          "irandom_range",
          "is_array",
          "is_bool",
          "is_infinity",
          "is_int32",
          "is_int64",
          "is_matrix",
          "is_method",
          "is_nan",
          "is_numeric",
          "is_ptr",
          "is_real",
          "is_string",
          "is_struct",
          "is_undefined",
          "is_vec3",
          "is_vec4",
          "json_decode",
          "json_encode",
          "keyboard_check",
          "keyboard_check_direct",
          "keyboard_check_pressed",
          "keyboard_check_released",
          "keyboard_clear",
          "keyboard_get_map",
          "keyboard_get_numlock",
          "keyboard_key_press",
          "keyboard_key_release",
          "keyboard_set_map",
          "keyboard_set_numlock",
          "keyboard_unset_map",
          "keyboard_virtual_height",
          "keyboard_virtual_hide",
          "keyboard_virtual_show",
          "keyboard_virtual_status",
          "layer_add_instance",
          "layer_background_alpha",
          "layer_background_blend",
          "layer_background_change",
          "layer_background_create",
          "layer_background_destroy",
          "layer_background_exists",
          "layer_background_get_alpha",
          "layer_background_get_blend",
          "layer_background_get_htiled",
          "layer_background_get_id",
          "layer_background_get_index",
          "layer_background_get_speed",
          "layer_background_get_sprite",
          "layer_background_get_stretch",
          "layer_background_get_visible",
          "layer_background_get_vtiled",
          "layer_background_get_xscale",
          "layer_background_get_yscale",
          "layer_background_htiled",
          "layer_background_index",
          "layer_background_speed",
          "layer_background_sprite",
          "layer_background_stretch",
          "layer_background_visible",
          "layer_background_vtiled",
          "layer_background_xscale",
          "layer_background_yscale",
          "layer_create",
          "layer_depth",
          "layer_destroy",
          "layer_destroy_instances",
          "layer_element_move",
          "layer_exists",
          "layer_force_draw_depth",
          "layer_get_all",
          "layer_get_all_elements",
          "layer_get_depth",
          "layer_get_element_layer",
          "layer_get_element_type",
          "layer_get_forced_depth",
          "layer_get_hspeed",
          "layer_get_id",
          "layer_get_id_at_depth",
          "layer_get_name",
          "layer_get_script_begin",
          "layer_get_script_end",
          "layer_get_shader",
          "layer_get_target_room",
          "layer_get_visible",
          "layer_get_vspeed",
          "layer_get_x",
          "layer_get_y",
          "layer_has_instance",
          "layer_hspeed",
          "layer_instance_get_instance",
          "layer_is_draw_depth_forced",
          "layer_reset_target_room",
          "layer_script_begin",
          "layer_script_end",
          "layer_set_target_room",
          "layer_set_visible",
          "layer_shader",
          "layer_sprite_alpha",
          "layer_sprite_angle",
          "layer_sprite_blend",
          "layer_sprite_change",
          "layer_sprite_create",
          "layer_sprite_destroy",
          "layer_sprite_exists",
          "layer_sprite_get_alpha",
          "layer_sprite_get_angle",
          "layer_sprite_get_blend",
          "layer_sprite_get_id",
          "layer_sprite_get_index",
          "layer_sprite_get_speed",
          "layer_sprite_get_sprite",
          "layer_sprite_get_x",
          "layer_sprite_get_xscale",
          "layer_sprite_get_y",
          "layer_sprite_get_yscale",
          "layer_sprite_index",
          "layer_sprite_speed",
          "layer_sprite_x",
          "layer_sprite_xscale",
          "layer_sprite_y",
          "layer_sprite_yscale",
          "layer_tile_alpha",
          "layer_tile_blend",
          "layer_tile_change",
          "layer_tile_create",
          "layer_tile_destroy",
          "layer_tile_exists",
          "layer_tile_get_alpha",
          "layer_tile_get_blend",
          "layer_tile_get_region",
          "layer_tile_get_sprite",
          "layer_tile_get_visible",
          "layer_tile_get_x",
          "layer_tile_get_xscale",
          "layer_tile_get_y",
          "layer_tile_get_yscale",
          "layer_tile_region",
          "layer_tile_visible",
          "layer_tile_x",
          "layer_tile_xscale",
          "layer_tile_y",
          "layer_tile_yscale",
          "layer_tilemap_create",
          "layer_tilemap_destroy",
          "layer_tilemap_exists",
          "layer_tilemap_get_id",
          "layer_vspeed",
          "layer_x",
          "layer_y",
          "lengthdir_x",
          "lengthdir_y",
          "lerp",
          "ln",
          "load_csv",
          "log10",
          "log2",
          "logn",
          "make_color_hsv",
          "make_color_rgb",
          "make_colour_hsv",
          "make_colour_rgb",
          "math_get_epsilon",
          "math_set_epsilon",
          "matrix_build",
          "matrix_build_identity",
          "matrix_build_lookat",
          "matrix_build_projection_ortho",
          "matrix_build_projection_perspective",
          "matrix_build_projection_perspective_fov",
          "matrix_get",
          "matrix_multiply",
          "matrix_set",
          "matrix_stack_clear",
          "matrix_stack_is_empty",
          "matrix_stack_multiply",
          "matrix_stack_pop",
          "matrix_stack_push",
          "matrix_stack_set",
          "matrix_stack_top",
          "matrix_transform_vertex",
          "max",
          "md5_file",
          "md5_string_unicode",
          "md5_string_utf8",
          "mean",
          "median",
          "merge_color",
          "merge_colour",
          "min",
          "motion_add",
          "motion_set",
          "mouse_check_button",
          "mouse_check_button_pressed",
          "mouse_check_button_released",
          "mouse_clear",
          "mouse_wheel_down",
          "mouse_wheel_up",
          "move_bounce_all",
          "move_bounce_solid",
          "move_contact_all",
          "move_contact_solid",
          "move_outside_all",
          "move_outside_solid",
          "move_random",
          "move_snap",
          "move_towards_point",
          "move_wrap",
          "mp_grid_add_cell",
          "mp_grid_add_instances",
          "mp_grid_add_rectangle",
          "mp_grid_clear_all",
          "mp_grid_clear_cell",
          "mp_grid_clear_rectangle",
          "mp_grid_create",
          "mp_grid_destroy",
          "mp_grid_draw",
          "mp_grid_get_cell",
          "mp_grid_path",
          "mp_grid_to_ds_grid",
          "mp_linear_path",
          "mp_linear_path_object",
          "mp_linear_step",
          "mp_linear_step_object",
          "mp_potential_path",
          "mp_potential_path_object",
          "mp_potential_settings",
          "mp_potential_step",
          "mp_potential_step_object",
          "network_connect",
          "network_connect_raw",
          "network_create_server",
          "network_create_server_raw",
          "network_create_socket",
          "network_create_socket_ext",
          "network_destroy",
          "network_resolve",
          "network_send_broadcast",
          "network_send_packet",
          "network_send_raw",
          "network_send_udp",
          "network_send_udp_raw",
          "network_set_config",
          "network_set_timeout",
          "object_exists",
          "object_get_depth",
          "object_get_mask",
          "object_get_name",
          "object_get_parent",
          "object_get_persistent",
          "object_get_physics",
          "object_get_solid",
          "object_get_sprite",
          "object_get_visible",
          "object_is_ancestor",
          "object_set_mask",
          "object_set_persistent",
          "object_set_solid",
          "object_set_sprite",
          "object_set_visible",
          "ord",
          "os_get_config",
          "os_get_info",
          "os_get_language",
          "os_get_region",
          "os_is_network_connected",
          "os_is_paused",
          "os_lock_orientation",
          "os_powersave_enable",
          "parameter_count",
          "parameter_string",
          "part_emitter_burst",
          "part_emitter_clear",
          "part_emitter_create",
          "part_emitter_destroy",
          "part_emitter_destroy_all",
          "part_emitter_exists",
          "part_emitter_region",
          "part_emitter_stream",
          "part_particles_clear",
          "part_particles_count",
          "part_particles_create",
          "part_particles_create_color",
          "part_particles_create_colour",
          "part_system_automatic_draw",
          "part_system_automatic_update",
          "part_system_clear",
          "part_system_create",
          "part_system_create_layer",
          "part_system_depth",
          "part_system_destroy",
          "part_system_draw_order",
          "part_system_drawit",
          "part_system_exists",
          "part_system_get_layer",
          "part_system_layer",
          "part_system_position",
          "part_system_update",
          "part_type_alpha1",
          "part_type_alpha2",
          "part_type_alpha3",
          "part_type_blend",
          "part_type_clear",
          "part_type_color1",
          "part_type_color2",
          "part_type_color3",
          "part_type_color_hsv",
          "part_type_color_mix",
          "part_type_color_rgb",
          "part_type_colour1",
          "part_type_colour2",
          "part_type_colour3",
          "part_type_colour_hsv",
          "part_type_colour_mix",
          "part_type_colour_rgb",
          "part_type_create",
          "part_type_death",
          "part_type_destroy",
          "part_type_direction",
          "part_type_exists",
          "part_type_gravity",
          "part_type_life",
          "part_type_orientation",
          "part_type_scale",
          "part_type_shape",
          "part_type_size",
          "part_type_speed",
          "part_type_sprite",
          "part_type_step",
          "path_add",
          "path_add_point",
          "path_append",
          "path_assign",
          "path_change_point",
          "path_clear_points",
          "path_delete",
          "path_delete_point",
          "path_duplicate",
          "path_end",
          "path_exists",
          "path_flip",
          "path_get_closed",
          "path_get_kind",
          "path_get_length",
          "path_get_name",
          "path_get_number",
          "path_get_point_speed",
          "path_get_point_x",
          "path_get_point_y",
          "path_get_precision",
          "path_get_speed",
          "path_get_time",
          "path_get_x",
          "path_get_y",
          "path_insert_point",
          "path_mirror",
          "path_rescale",
          "path_reverse",
          "path_rotate",
          "path_set_closed",
          "path_set_kind",
          "path_set_precision",
          "path_shift",
          "path_start",
          "physics_apply_angular_impulse",
          "physics_apply_force",
          "physics_apply_impulse",
          "physics_apply_local_force",
          "physics_apply_local_impulse",
          "physics_apply_torque",
          "physics_draw_debug",
          "physics_fixture_add_point",
          "physics_fixture_bind",
          "physics_fixture_bind_ext",
          "physics_fixture_create",
          "physics_fixture_delete",
          "physics_fixture_set_angular_damping",
          "physics_fixture_set_awake",
          "physics_fixture_set_box_shape",
          "physics_fixture_set_chain_shape",
          "physics_fixture_set_circle_shape",
          "physics_fixture_set_collision_group",
          "physics_fixture_set_density",
          "physics_fixture_set_edge_shape",
          "physics_fixture_set_friction",
          "physics_fixture_set_kinematic",
          "physics_fixture_set_linear_damping",
          "physics_fixture_set_polygon_shape",
          "physics_fixture_set_restitution",
          "physics_fixture_set_sensor",
          "physics_get_density",
          "physics_get_friction",
          "physics_get_restitution",
          "physics_joint_delete",
          "physics_joint_distance_create",
          "physics_joint_enable_motor",
          "physics_joint_friction_create",
          "physics_joint_gear_create",
          "physics_joint_get_value",
          "physics_joint_prismatic_create",
          "physics_joint_pulley_create",
          "physics_joint_revolute_create",
          "physics_joint_rope_create",
          "physics_joint_set_value",
          "physics_joint_weld_create",
          "physics_joint_wheel_create",
          "physics_mass_properties",
          "physics_particle_count",
          "physics_particle_create",
          "physics_particle_delete",
          "physics_particle_delete_region_box",
          "physics_particle_delete_region_circle",
          "physics_particle_delete_region_poly",
          "physics_particle_draw",
          "physics_particle_draw_ext",
          "physics_particle_get_damping",
          "physics_particle_get_data",
          "physics_particle_get_data_particle",
          "physics_particle_get_density",
          "physics_particle_get_gravity_scale",
          "physics_particle_get_group_flags",
          "physics_particle_get_max_count",
          "physics_particle_get_radius",
          "physics_particle_group_add_point",
          "physics_particle_group_begin",
          "physics_particle_group_box",
          "physics_particle_group_circle",
          "physics_particle_group_count",
          "physics_particle_group_delete",
          "physics_particle_group_end",
          "physics_particle_group_get_ang_vel",
          "physics_particle_group_get_angle",
          "physics_particle_group_get_centre_x",
          "physics_particle_group_get_centre_y",
          "physics_particle_group_get_data",
          "physics_particle_group_get_inertia",
          "physics_particle_group_get_mass",
          "physics_particle_group_get_vel_x",
          "physics_particle_group_get_vel_y",
          "physics_particle_group_get_x",
          "physics_particle_group_get_y",
          "physics_particle_group_join",
          "physics_particle_group_polygon",
          "physics_particle_set_category_flags",
          "physics_particle_set_damping",
          "physics_particle_set_density",
          "physics_particle_set_flags",
          "physics_particle_set_gravity_scale",
          "physics_particle_set_group_flags",
          "physics_particle_set_max_count",
          "physics_particle_set_radius",
          "physics_pause_enable",
          "physics_remove_fixture",
          "physics_set_density",
          "physics_set_friction",
          "physics_set_restitution",
          "physics_test_overlap",
          "physics_world_create",
          "physics_world_draw_debug",
          "physics_world_gravity",
          "physics_world_update_iterations",
          "physics_world_update_speed",
          "place_empty",
          "place_free",
          "place_meeting",
          "place_snapped",
          "point_direction",
          "point_distance",
          "point_distance_3d",
          "point_in_circle",
          "point_in_rectangle",
          "point_in_triangle",
          "position_change",
          "position_destroy",
          "position_empty",
          "position_meeting",
          "power",
          "ptr",
          "push_cancel_local_notification",
          "push_get_first_local_notification",
          "push_get_next_local_notification",
          "push_local_notification",
          "radtodeg",
          "random",
          "random_get_seed",
          "random_range",
          "random_set_seed",
          "randomise",
          "randomize",
          "real",
          "rectangle_in_circle",
          "rectangle_in_rectangle",
          "rectangle_in_triangle",
          "room_add",
          "room_assign",
          "room_duplicate",
          "room_exists",
          "room_get_camera",
          "room_get_name",
          "room_get_viewport",
          "room_goto",
          "room_goto_next",
          "room_goto_previous",
          "room_instance_add",
          "room_instance_clear",
          "room_next",
          "room_previous",
          "room_restart",
          "room_set_background_color",
          "room_set_background_colour",
          "room_set_camera",
          "room_set_height",
          "room_set_persistent",
          "room_set_view",
          "room_set_view_enabled",
          "room_set_viewport",
          "room_set_width",
          "round",
          "screen_save",
          "screen_save_part",
          "script_execute",
          "script_exists",
          "script_get_name",
          "sha1_file",
          "sha1_string_unicode",
          "sha1_string_utf8",
          "shader_current",
          "shader_enable_corner_id",
          "shader_get_name",
          "shader_get_sampler_index",
          "shader_get_uniform",
          "shader_is_compiled",
          "shader_reset",
          "shader_set",
          "shader_set_uniform_f",
          "shader_set_uniform_f_array",
          "shader_set_uniform_i",
          "shader_set_uniform_i_array",
          "shader_set_uniform_matrix",
          "shader_set_uniform_matrix_array",
          "shaders_are_supported",
          "shop_leave_rating",
          "show_debug_message",
          "show_debug_overlay",
          "show_error",
          "show_message",
          "show_message_async",
          "show_question",
          "show_question_async",
          "sign",
          "sin",
          "skeleton_animation_clear",
          "skeleton_animation_get",
          "skeleton_animation_get_duration",
          "skeleton_animation_get_ext",
          "skeleton_animation_get_frame",
          "skeleton_animation_get_frames",
          "skeleton_animation_list",
          "skeleton_animation_mix",
          "skeleton_animation_set",
          "skeleton_animation_set_ext",
          "skeleton_animation_set_frame",
          "skeleton_attachment_create",
          "skeleton_attachment_get",
          "skeleton_attachment_set",
          "skeleton_bone_data_get",
          "skeleton_bone_data_set",
          "skeleton_bone_state_get",
          "skeleton_bone_state_set",
          "skeleton_collision_draw_set",
          "skeleton_get_bounds",
          "skeleton_get_minmax",
          "skeleton_get_num_bounds",
          "skeleton_skin_get",
          "skeleton_skin_list",
          "skeleton_skin_set",
          "skeleton_slot_data",
          "sprite_add",
          "sprite_add_from_surface",
          "sprite_assign",
          "sprite_collision_mask",
          "sprite_create_from_surface",
          "sprite_delete",
          "sprite_duplicate",
          "sprite_exists",
          "sprite_flush",
          "sprite_flush_multi",
          "sprite_get_bbox_bottom",
          "sprite_get_bbox_left",
          "sprite_get_bbox_right",
          "sprite_get_bbox_top",
          "sprite_get_height",
          "sprite_get_name",
          "sprite_get_number",
          "sprite_get_speed",
          "sprite_get_speed_type",
          "sprite_get_texture",
          "sprite_get_tpe",
          "sprite_get_uvs",
          "sprite_get_width",
          "sprite_get_xoffset",
          "sprite_get_yoffset",
          "sprite_merge",
          "sprite_prefetch",
          "sprite_prefetch_multi",
          "sprite_replace",
          "sprite_save",
          "sprite_save_strip",
          "sprite_set_alpha_from_sprite",
          "sprite_set_cache_size",
          "sprite_set_cache_size_ext",
          "sprite_set_offset",
          "sprite_set_speed",
          "sqr",
          "sqrt",
          "steam_activate_overlay",
          "steam_activate_overlay_browser",
          "steam_activate_overlay_store",
          "steam_activate_overlay_user",
          "steam_available_languages",
          "steam_clear_achievement",
          "steam_create_leaderboard",
          "steam_current_game_language",
          "steam_download_friends_scores",
          "steam_download_scores",
          "steam_download_scores_around_user",
          "steam_file_delete",
          "steam_file_exists",
          "steam_file_persisted",
          "steam_file_read",
          "steam_file_share",
          "steam_file_size",
          "steam_file_write",
          "steam_file_write_file",
          "steam_get_achievement",
          "steam_get_app_id",
          "steam_get_persona_name",
          "steam_get_quota_free",
          "steam_get_quota_total",
          "steam_get_stat_avg_rate",
          "steam_get_stat_float",
          "steam_get_stat_int",
          "steam_get_user_account_id",
          "steam_get_user_persona_name",
          "steam_get_user_steam_id",
          "steam_initialised",
          "steam_is_cloud_enabled_for_account",
          "steam_is_cloud_enabled_for_app",
          "steam_is_overlay_activated",
          "steam_is_overlay_enabled",
          "steam_is_screenshot_requested",
          "steam_is_user_logged_on",
          "steam_reset_all_stats",
          "steam_reset_all_stats_achievements",
          "steam_send_screenshot",
          "steam_set_achievement",
          "steam_set_stat_avg_rate",
          "steam_set_stat_float",
          "steam_set_stat_int",
          "steam_stats_ready",
          "steam_ugc_create_item",
          "steam_ugc_create_query_all",
          "steam_ugc_create_query_all_ex",
          "steam_ugc_create_query_user",
          "steam_ugc_create_query_user_ex",
          "steam_ugc_download",
          "steam_ugc_get_item_install_info",
          "steam_ugc_get_item_update_info",
          "steam_ugc_get_item_update_progress",
          "steam_ugc_get_subscribed_items",
          "steam_ugc_num_subscribed_items",
          "steam_ugc_query_add_excluded_tag",
          "steam_ugc_query_add_required_tag",
          "steam_ugc_query_set_allow_cached_response",
          "steam_ugc_query_set_cloud_filename_filter",
          "steam_ugc_query_set_match_any_tag",
          "steam_ugc_query_set_ranked_by_trend_days",
          "steam_ugc_query_set_return_long_description",
          "steam_ugc_query_set_return_total_only",
          "steam_ugc_query_set_search_text",
          "steam_ugc_request_item_details",
          "steam_ugc_send_query",
          "steam_ugc_set_item_content",
          "steam_ugc_set_item_description",
          "steam_ugc_set_item_preview",
          "steam_ugc_set_item_tags",
          "steam_ugc_set_item_title",
          "steam_ugc_set_item_visibility",
          "steam_ugc_start_item_update",
          "steam_ugc_submit_item_update",
          "steam_ugc_subscribe_item",
          "steam_ugc_unsubscribe_item",
          "steam_upload_score",
          "steam_upload_score_buffer",
          "steam_upload_score_buffer_ext",
          "steam_upload_score_ext",
          "steam_user_installed_dlc",
          "steam_user_owns_dlc",
          "string",
          "string_byte_at",
          "string_byte_length",
          "string_char_at",
          "string_copy",
          "string_count",
          "string_delete",
          "string_digits",
          "string_format",
          "string_hash_to_newline",
          "string_height",
          "string_height_ext",
          "string_insert",
          "string_length",
          "string_letters",
          "string_lettersdigits",
          "string_lower",
          "string_ord_at",
          "string_pos",
          "string_repeat",
          "string_replace",
          "string_replace_all",
          "string_set_byte_at",
          "string_upper",
          "string_width",
          "string_width_ext",
          "surface_copy",
          "surface_copy_part",
          "surface_create",
          "surface_create_ext",
          "surface_depth_disable",
          "surface_exists",
          "surface_free",
          "surface_get_depth_disable",
          "surface_get_height",
          "surface_get_texture",
          "surface_get_width",
          "surface_getpixel",
          "surface_getpixel_ext",
          "surface_reset_target",
          "surface_resize",
          "surface_save",
          "surface_save_part",
          "surface_set_target",
          "surface_set_target_ext",
          "tan",
          "texture_get_height",
          "texture_get_texel_height",
          "texture_get_texel_width",
          "texture_get_uvs",
          "texture_get_width",
          "texture_global_scale",
          "texture_set_stage",
          "tile_get_empty",
          "tile_get_flip",
          "tile_get_index",
          "tile_get_mirror",
          "tile_get_rotate",
          "tile_set_empty",
          "tile_set_flip",
          "tile_set_index",
          "tile_set_mirror",
          "tile_set_rotate",
          "tilemap_clear",
          "tilemap_get",
          "tilemap_get_at_pixel",
          "tilemap_get_cell_x_at_pixel",
          "tilemap_get_cell_y_at_pixel",
          "tilemap_get_frame",
          "tilemap_get_global_mask",
          "tilemap_get_height",
          "tilemap_get_mask",
          "tilemap_get_tile_height",
          "tilemap_get_tile_width",
          "tilemap_get_tileset",
          "tilemap_get_width",
          "tilemap_get_x",
          "tilemap_get_y",
          "tilemap_set",
          "tilemap_set_at_pixel",
          "tilemap_set_global_mask",
          "tilemap_set_mask",
          "tilemap_tileset",
          "tilemap_x",
          "tilemap_y",
          "timeline_add",
          "timeline_clear",
          "timeline_delete",
          "timeline_exists",
          "timeline_get_name",
          "timeline_max_moment",
          "timeline_moment_add_script",
          "timeline_moment_clear",
          "timeline_size",
          "typeof",
          "url_get_domain",
          "url_open",
          "url_open_ext",
          "url_open_full",
          "variable_global_exists",
          "variable_global_get",
          "variable_global_set",
          "variable_instance_exists",
          "variable_instance_get",
          "variable_instance_get_names",
          "variable_instance_set",
          "variable_struct_exists",
          "variable_struct_get",
          "variable_struct_get_names",
          "variable_struct_names_count",
          "variable_struct_remove",
          "variable_struct_set",
          "vertex_argb",
          "vertex_begin",
          "vertex_color",
          "vertex_colour",
          "vertex_create_buffer",
          "vertex_create_buffer_ext",
          "vertex_create_buffer_from_buffer",
          "vertex_create_buffer_from_buffer_ext",
          "vertex_delete_buffer",
          "vertex_end",
          "vertex_float1",
          "vertex_float2",
          "vertex_float3",
          "vertex_float4",
          "vertex_format_add_color",
          "vertex_format_add_colour",
          "vertex_format_add_custom",
          "vertex_format_add_normal",
          "vertex_format_add_position",
          "vertex_format_add_position_3d",
          "vertex_format_add_texcoord",
          "vertex_format_add_textcoord",
          "vertex_format_begin",
          "vertex_format_delete",
          "vertex_format_end",
          "vertex_freeze",
          "vertex_get_buffer_size",
          "vertex_get_number",
          "vertex_normal",
          "vertex_position",
          "vertex_position_3d",
          "vertex_submit",
          "vertex_texcoord",
          "vertex_ubyte4",
          "view_get_camera",
          "view_get_hport",
          "view_get_surface_id",
          "view_get_visible",
          "view_get_wport",
          "view_get_xport",
          "view_get_yport",
          "view_set_camera",
          "view_set_hport",
          "view_set_surface_id",
          "view_set_visible",
          "view_set_wport",
          "view_set_xport",
          "view_set_yport",
          "virtual_key_add",
          "virtual_key_delete",
          "virtual_key_hide",
          "virtual_key_show",
          "win8_appbar_add_element",
          "win8_appbar_enable",
          "win8_appbar_remove_element",
          "win8_device_touchscreen_available",
          "win8_license_initialize_sandbox",
          "win8_license_trial_version",
          "win8_livetile_badge_clear",
          "win8_livetile_badge_notification",
          "win8_livetile_notification_begin",
          "win8_livetile_notification_end",
          "win8_livetile_notification_expiry",
          "win8_livetile_notification_image_add",
          "win8_livetile_notification_secondary_begin",
          "win8_livetile_notification_tag",
          "win8_livetile_notification_text_add",
          "win8_livetile_queue_enable",
          "win8_livetile_tile_clear",
          "win8_livetile_tile_notification",
          "win8_search_add_suggestions",
          "win8_search_disable",
          "win8_search_enable",
          "win8_secondarytile_badge_notification",
          "win8_secondarytile_delete",
          "win8_secondarytile_pin",
          "win8_settingscharm_add_entry",
          "win8_settingscharm_add_html_entry",
          "win8_settingscharm_add_xaml_entry",
          "win8_settingscharm_get_xaml_property",
          "win8_settingscharm_remove_entry",
          "win8_settingscharm_set_xaml_property",
          "win8_share_file",
          "win8_share_image",
          "win8_share_screenshot",
          "win8_share_text",
          "win8_share_url",
          "window_center",
          "window_device",
          "window_get_caption",
          "window_get_color",
          "window_get_colour",
          "window_get_cursor",
          "window_get_fullscreen",
          "window_get_height",
          "window_get_visible_rects",
          "window_get_width",
          "window_get_x",
          "window_get_y",
          "window_handle",
          "window_has_focus",
          "window_mouse_get_x",
          "window_mouse_get_y",
          "window_mouse_set",
          "window_set_caption",
          "window_set_color",
          "window_set_colour",
          "window_set_cursor",
          "window_set_fullscreen",
          "window_set_max_height",
          "window_set_max_width",
          "window_set_min_height",
          "window_set_min_width",
          "window_set_position",
          "window_set_rectangle",
          "window_set_size",
          "window_view_mouse_get_x",
          "window_view_mouse_get_y",
          "window_views_mouse_get_x",
          "window_views_mouse_get_y",
          "winphone_license_trial_version",
          "winphone_tile_back_content",
          "winphone_tile_back_content_wide",
          "winphone_tile_back_image",
          "winphone_tile_back_image_wide",
          "winphone_tile_back_title",
          "winphone_tile_background_color",
          "winphone_tile_background_colour",
          "winphone_tile_count",
          "winphone_tile_cycle_images",
          "winphone_tile_front_image",
          "winphone_tile_front_image_small",
          "winphone_tile_front_image_wide",
          "winphone_tile_icon_image",
          "winphone_tile_small_background_image",
          "winphone_tile_small_icon_image",
          "winphone_tile_title",
          "winphone_tile_wide_content",
          "zip_unzip"
        ],
        literal: [
          "all",
          "false",
          "noone",
          "pointer_invalid",
          "pointer_null",
          "true",
          "undefined"
        ],
        symbol: [
          "ANSI_CHARSET",
          "ARABIC_CHARSET",
          "BALTIC_CHARSET",
          "CHINESEBIG5_CHARSET",
          "DEFAULT_CHARSET",
          "EASTEUROPE_CHARSET",
          "GB2312_CHARSET",
          "GM_build_date",
          "GM_runtime_version",
          "GM_version",
          "GREEK_CHARSET",
          "HANGEUL_CHARSET",
          "HEBREW_CHARSET",
          "JOHAB_CHARSET",
          "MAC_CHARSET",
          "OEM_CHARSET",
          "RUSSIAN_CHARSET",
          "SHIFTJIS_CHARSET",
          "SYMBOL_CHARSET",
          "THAI_CHARSET",
          "TURKISH_CHARSET",
          "VIETNAMESE_CHARSET",
          "achievement_achievement_info",
          "achievement_filter_all_players",
          "achievement_filter_favorites_only",
          "achievement_filter_friends_only",
          "achievement_friends_info",
          "achievement_leaderboard_info",
          "achievement_our_info",
          "achievement_pic_loaded",
          "achievement_show_achievement",
          "achievement_show_bank",
          "achievement_show_friend_picker",
          "achievement_show_leaderboard",
          "achievement_show_profile",
          "achievement_show_purchase_prompt",
          "achievement_show_ui",
          "achievement_type_achievement_challenge",
          "achievement_type_score_challenge",
          "asset_font",
          "asset_object",
          "asset_path",
          "asset_room",
          "asset_script",
          "asset_shader",
          "asset_sound",
          "asset_sprite",
          "asset_tiles",
          "asset_timeline",
          "asset_unknown",
          "audio_3d",
          "audio_falloff_exponent_distance",
          "audio_falloff_exponent_distance_clamped",
          "audio_falloff_inverse_distance",
          "audio_falloff_inverse_distance_clamped",
          "audio_falloff_linear_distance",
          "audio_falloff_linear_distance_clamped",
          "audio_falloff_none",
          "audio_mono",
          "audio_new_system",
          "audio_old_system",
          "audio_stereo",
          "bm_add",
          "bm_complex",
          "bm_dest_alpha",
          "bm_dest_color",
          "bm_dest_colour",
          "bm_inv_dest_alpha",
          "bm_inv_dest_color",
          "bm_inv_dest_colour",
          "bm_inv_src_alpha",
          "bm_inv_src_color",
          "bm_inv_src_colour",
          "bm_max",
          "bm_normal",
          "bm_one",
          "bm_src_alpha",
          "bm_src_alpha_sat",
          "bm_src_color",
          "bm_src_colour",
          "bm_subtract",
          "bm_zero",
          "browser_chrome",
          "browser_edge",
          "browser_firefox",
          "browser_ie",
          "browser_ie_mobile",
          "browser_not_a_browser",
          "browser_opera",
          "browser_safari",
          "browser_safari_mobile",
          "browser_tizen",
          "browser_unknown",
          "browser_windows_store",
          "buffer_bool",
          "buffer_f16",
          "buffer_f32",
          "buffer_f64",
          "buffer_fast",
          "buffer_fixed",
          "buffer_generalerror",
          "buffer_grow",
          "buffer_invalidtype",
          "buffer_network",
          "buffer_outofbounds",
          "buffer_outofspace",
          "buffer_s16",
          "buffer_s32",
          "buffer_s8",
          "buffer_seek_end",
          "buffer_seek_relative",
          "buffer_seek_start",
          "buffer_string",
          "buffer_surface_copy",
          "buffer_text",
          "buffer_u16",
          "buffer_u32",
          "buffer_u64",
          "buffer_u8",
          "buffer_vbuffer",
          "buffer_wrap",
          "button_type",
          "c_aqua",
          "c_black",
          "c_blue",
          "c_dkgray",
          "c_fuchsia",
          "c_gray",
          "c_green",
          "c_lime",
          "c_ltgray",
          "c_maroon",
          "c_navy",
          "c_olive",
          "c_orange",
          "c_purple",
          "c_red",
          "c_silver",
          "c_teal",
          "c_white",
          "c_yellow",
          "cmpfunc_always",
          "cmpfunc_equal",
          "cmpfunc_greater",
          "cmpfunc_greaterequal",
          "cmpfunc_less",
          "cmpfunc_lessequal",
          "cmpfunc_never",
          "cmpfunc_notequal",
          "cr_appstart",
          "cr_arrow",
          "cr_beam",
          "cr_cross",
          "cr_default",
          "cr_drag",
          "cr_handpoint",
          "cr_hourglass",
          "cr_none",
          "cr_size_all",
          "cr_size_nesw",
          "cr_size_ns",
          "cr_size_nwse",
          "cr_size_we",
          "cr_uparrow",
          "cull_clockwise",
          "cull_counterclockwise",
          "cull_noculling",
          "device_emulator",
          "device_ios_ipad",
          "device_ios_ipad_retina",
          "device_ios_iphone",
          "device_ios_iphone5",
          "device_ios_iphone6",
          "device_ios_iphone6plus",
          "device_ios_iphone_retina",
          "device_ios_unknown",
          "device_tablet",
          "display_landscape",
          "display_landscape_flipped",
          "display_portrait",
          "display_portrait_flipped",
          "dll_cdecl",
          "dll_stdcall",
          "ds_type_grid",
          "ds_type_list",
          "ds_type_map",
          "ds_type_priority",
          "ds_type_queue",
          "ds_type_stack",
          "ef_cloud",
          "ef_ellipse",
          "ef_explosion",
          "ef_firework",
          "ef_flare",
          "ef_rain",
          "ef_ring",
          "ef_smoke",
          "ef_smokeup",
          "ef_snow",
          "ef_spark",
          "ef_star",
          // for example ev_ are types of events
          "ev_alarm",
          "ev_animation_end",
          "ev_boundary",
          "ev_cleanup",
          "ev_close_button",
          "ev_collision",
          "ev_create",
          "ev_destroy",
          "ev_draw",
          "ev_draw_begin",
          "ev_draw_end",
          "ev_draw_post",
          "ev_draw_pre",
          "ev_end_of_path",
          "ev_game_end",
          "ev_game_start",
          "ev_gesture",
          "ev_gesture_double_tap",
          "ev_gesture_drag_end",
          "ev_gesture_drag_start",
          "ev_gesture_dragging",
          "ev_gesture_flick",
          "ev_gesture_pinch_end",
          "ev_gesture_pinch_in",
          "ev_gesture_pinch_out",
          "ev_gesture_pinch_start",
          "ev_gesture_rotate_end",
          "ev_gesture_rotate_start",
          "ev_gesture_rotating",
          "ev_gesture_tap",
          "ev_global_gesture_double_tap",
          "ev_global_gesture_drag_end",
          "ev_global_gesture_drag_start",
          "ev_global_gesture_dragging",
          "ev_global_gesture_flick",
          "ev_global_gesture_pinch_end",
          "ev_global_gesture_pinch_in",
          "ev_global_gesture_pinch_out",
          "ev_global_gesture_pinch_start",
          "ev_global_gesture_rotate_end",
          "ev_global_gesture_rotate_start",
          "ev_global_gesture_rotating",
          "ev_global_gesture_tap",
          "ev_global_left_button",
          "ev_global_left_press",
          "ev_global_left_release",
          "ev_global_middle_button",
          "ev_global_middle_press",
          "ev_global_middle_release",
          "ev_global_right_button",
          "ev_global_right_press",
          "ev_global_right_release",
          "ev_gui",
          "ev_gui_begin",
          "ev_gui_end",
          "ev_joystick1_button1",
          "ev_joystick1_button2",
          "ev_joystick1_button3",
          "ev_joystick1_button4",
          "ev_joystick1_button5",
          "ev_joystick1_button6",
          "ev_joystick1_button7",
          "ev_joystick1_button8",
          "ev_joystick1_down",
          "ev_joystick1_left",
          "ev_joystick1_right",
          "ev_joystick1_up",
          "ev_joystick2_button1",
          "ev_joystick2_button2",
          "ev_joystick2_button3",
          "ev_joystick2_button4",
          "ev_joystick2_button5",
          "ev_joystick2_button6",
          "ev_joystick2_button7",
          "ev_joystick2_button8",
          "ev_joystick2_down",
          "ev_joystick2_left",
          "ev_joystick2_right",
          "ev_joystick2_up",
          "ev_keyboard",
          "ev_keypress",
          "ev_keyrelease",
          "ev_left_button",
          "ev_left_press",
          "ev_left_release",
          "ev_middle_button",
          "ev_middle_press",
          "ev_middle_release",
          "ev_mouse",
          "ev_mouse_enter",
          "ev_mouse_leave",
          "ev_mouse_wheel_down",
          "ev_mouse_wheel_up",
          "ev_no_button",
          "ev_no_more_health",
          "ev_no_more_lives",
          "ev_other",
          "ev_outside",
          "ev_right_button",
          "ev_right_press",
          "ev_right_release",
          "ev_room_end",
          "ev_room_start",
          "ev_step",
          "ev_step_begin",
          "ev_step_end",
          "ev_step_normal",
          "ev_trigger",
          "ev_user0",
          "ev_user1",
          "ev_user2",
          "ev_user3",
          "ev_user4",
          "ev_user5",
          "ev_user6",
          "ev_user7",
          "ev_user8",
          "ev_user9",
          "ev_user10",
          "ev_user11",
          "ev_user12",
          "ev_user13",
          "ev_user14",
          "ev_user15",
          "fa_archive",
          "fa_bottom",
          "fa_center",
          "fa_directory",
          "fa_hidden",
          "fa_left",
          "fa_middle",
          "fa_readonly",
          "fa_right",
          "fa_sysfile",
          "fa_top",
          "fa_volumeid",
          "fb_login_default",
          "fb_login_fallback_to_webview",
          "fb_login_forcing_safari",
          "fb_login_forcing_webview",
          "fb_login_no_fallback_to_webview",
          "fb_login_use_system_account",
          "gamespeed_fps",
          "gamespeed_microseconds",
          "ge_lose",
          "global",
          "gp_axislh",
          "gp_axislv",
          "gp_axisrh",
          "gp_axisrv",
          "gp_face1",
          "gp_face2",
          "gp_face3",
          "gp_face4",
          "gp_padd",
          "gp_padl",
          "gp_padr",
          "gp_padu",
          "gp_select",
          "gp_shoulderl",
          "gp_shoulderlb",
          "gp_shoulderr",
          "gp_shoulderrb",
          "gp_start",
          "gp_stickl",
          "gp_stickr",
          "iap_available",
          "iap_canceled",
          "iap_ev_consume",
          "iap_ev_product",
          "iap_ev_purchase",
          "iap_ev_restore",
          "iap_ev_storeload",
          "iap_failed",
          "iap_purchased",
          "iap_refunded",
          "iap_status_available",
          "iap_status_loading",
          "iap_status_processing",
          "iap_status_restoring",
          "iap_status_unavailable",
          "iap_status_uninitialised",
          "iap_storeload_failed",
          "iap_storeload_ok",
          "iap_unavailable",
          "input_type",
          "kbv_autocapitalize_characters",
          "kbv_autocapitalize_none",
          "kbv_autocapitalize_sentences",
          "kbv_autocapitalize_words",
          "kbv_returnkey_continue",
          "kbv_returnkey_default",
          "kbv_returnkey_done",
          "kbv_returnkey_emergency",
          "kbv_returnkey_go",
          "kbv_returnkey_google",
          "kbv_returnkey_join",
          "kbv_returnkey_next",
          "kbv_returnkey_route",
          "kbv_returnkey_search",
          "kbv_returnkey_send",
          "kbv_returnkey_yahoo",
          "kbv_type_ascii",
          "kbv_type_default",
          "kbv_type_email",
          "kbv_type_numbers",
          "kbv_type_phone",
          "kbv_type_phone_name",
          "kbv_type_url",
          "layerelementtype_background",
          "layerelementtype_instance",
          "layerelementtype_oldtilemap",
          "layerelementtype_particlesystem",
          "layerelementtype_sprite",
          "layerelementtype_tile",
          "layerelementtype_tilemap",
          "layerelementtype_undefined",
          "lb_disp_none",
          "lb_disp_numeric",
          "lb_disp_time_ms",
          "lb_disp_time_sec",
          "lb_sort_ascending",
          "lb_sort_descending",
          "lb_sort_none",
          "leaderboard_type_number",
          "leaderboard_type_time_mins_secs",
          "lighttype_dir",
          "lighttype_point",
          "local",
          "matrix_projection",
          "matrix_view",
          "matrix_world",
          "mb_any",
          "mb_left",
          "mb_middle",
          "mb_none",
          "mb_right",
          "mip_markedonly",
          "mip_off",
          "mip_on",
          "network_config_connect_timeout",
          "network_config_disable_reliable_udp",
          "network_config_enable_reliable_udp",
          "network_config_use_non_blocking_socket",
          "network_socket_bluetooth",
          "network_socket_tcp",
          "network_socket_udp",
          "network_type_connect",
          "network_type_data",
          "network_type_disconnect",
          "network_type_non_blocking_connect",
          "of_challen",
          "of_challenge_tie",
          "of_challenge_win",
          "os_3ds",
          "os_android",
          "os_bb10",
          "os_ios",
          "os_linux",
          "os_macosx",
          "os_ps3",
          "os_ps4",
          "os_psvita",
          "os_switch",
          "os_symbian",
          "os_tizen",
          "os_tvos",
          "os_unknown",
          "os_uwp",
          "os_wiiu",
          "os_win32",
          "os_win8native",
          "os_windows",
          "os_winphone",
          "os_xbox360",
          "os_xboxone",
          "other",
          "ov_achievements",
          "ov_community",
          "ov_friends",
          "ov_gamegroup",
          "ov_players",
          "ov_settings",
          "path_action_continue",
          "path_action_restart",
          "path_action_reverse",
          "path_action_stop",
          "phy_debug_render_aabb",
          "phy_debug_render_collision_pairs",
          "phy_debug_render_coms",
          "phy_debug_render_core_shapes",
          "phy_debug_render_joints",
          "phy_debug_render_obb",
          "phy_debug_render_shapes",
          "phy_joint_anchor_1_x",
          "phy_joint_anchor_1_y",
          "phy_joint_anchor_2_x",
          "phy_joint_anchor_2_y",
          "phy_joint_angle",
          "phy_joint_angle_limits",
          "phy_joint_damping_ratio",
          "phy_joint_frequency",
          "phy_joint_length_1",
          "phy_joint_length_2",
          "phy_joint_lower_angle_limit",
          "phy_joint_max_force",
          "phy_joint_max_length",
          "phy_joint_max_motor_force",
          "phy_joint_max_motor_torque",
          "phy_joint_max_torque",
          "phy_joint_motor_force",
          "phy_joint_motor_speed",
          "phy_joint_motor_torque",
          "phy_joint_reaction_force_x",
          "phy_joint_reaction_force_y",
          "phy_joint_reaction_torque",
          "phy_joint_speed",
          "phy_joint_translation",
          "phy_joint_upper_angle_limit",
          "phy_particle_data_flag_category",
          "phy_particle_data_flag_color",
          "phy_particle_data_flag_colour",
          "phy_particle_data_flag_position",
          "phy_particle_data_flag_typeflags",
          "phy_particle_data_flag_velocity",
          "phy_particle_flag_colormixing",
          "phy_particle_flag_colourmixing",
          "phy_particle_flag_elastic",
          "phy_particle_flag_powder",
          "phy_particle_flag_spring",
          "phy_particle_flag_tensile",
          "phy_particle_flag_viscous",
          "phy_particle_flag_wall",
          "phy_particle_flag_water",
          "phy_particle_flag_zombie",
          "phy_particle_group_flag_rigid",
          "phy_particle_group_flag_solid",
          "pi",
          "pr_linelist",
          "pr_linestrip",
          "pr_pointlist",
          "pr_trianglefan",
          "pr_trianglelist",
          "pr_trianglestrip",
          "ps_distr_gaussian",
          "ps_distr_invgaussian",
          "ps_distr_linear",
          "ps_shape_diamond",
          "ps_shape_ellipse",
          "ps_shape_line",
          "ps_shape_rectangle",
          "pt_shape_circle",
          "pt_shape_cloud",
          "pt_shape_disk",
          "pt_shape_explosion",
          "pt_shape_flare",
          "pt_shape_line",
          "pt_shape_pixel",
          "pt_shape_ring",
          "pt_shape_smoke",
          "pt_shape_snow",
          "pt_shape_spark",
          "pt_shape_sphere",
          "pt_shape_square",
          "pt_shape_star",
          "spritespeed_framespergameframe",
          "spritespeed_framespersecond",
          "text_type",
          "tf_anisotropic",
          "tf_linear",
          "tf_point",
          "tile_flip",
          "tile_index_mask",
          "tile_mirror",
          "tile_rotate",
          "timezone_local",
          "timezone_utc",
          "tm_countvsyncs",
          "tm_sleep",
          "ty_real",
          "ty_string",
          "ugc_filetype_community",
          "ugc_filetype_microtrans",
          "ugc_list_Favorited",
          "ugc_list_Followed",
          "ugc_list_Published",
          "ugc_list_Subscribed",
          "ugc_list_UsedOrPlayed",
          "ugc_list_VotedDown",
          "ugc_list_VotedOn",
          "ugc_list_VotedUp",
          "ugc_list_WillVoteLater",
          "ugc_match_AllGuides",
          "ugc_match_Artwork",
          "ugc_match_Collections",
          "ugc_match_ControllerBindings",
          "ugc_match_IntegratedGuides",
          "ugc_match_Items",
          "ugc_match_Items_Mtx",
          "ugc_match_Items_ReadyToUse",
          "ugc_match_Screenshots",
          "ugc_match_UsableInGame",
          "ugc_match_Videos",
          "ugc_match_WebGuides",
          "ugc_query_AcceptedForGameRankedByAcceptanceDate",
          "ugc_query_CreatedByFollowedUsersRankedByPublicationDate",
          "ugc_query_CreatedByFriendsRankedByPublicationDate",
          "ugc_query_FavoritedByFriendsRankedByPublicationDate",
          "ugc_query_NotYetRated",
          "ugc_query_RankedByNumTimesReported",
          "ugc_query_RankedByPublicationDate",
          "ugc_query_RankedByTextSearch",
          "ugc_query_RankedByTotalVotesAsc",
          "ugc_query_RankedByTrend",
          "ugc_query_RankedByVote",
          "ugc_query_RankedByVotesUp",
          "ugc_result_success",
          "ugc_sortorder_CreationOrderAsc",
          "ugc_sortorder_CreationOrderDesc",
          "ugc_sortorder_ForModeration",
          "ugc_sortorder_LastUpdatedDesc",
          "ugc_sortorder_SubscriptionDateDesc",
          "ugc_sortorder_TitleAsc",
          "ugc_sortorder_VoteScoreDesc",
          "ugc_visibility_friends_only",
          "ugc_visibility_private",
          "ugc_visibility_public",
          "vertex_type_color",
          "vertex_type_colour",
          "vertex_type_float1",
          "vertex_type_float2",
          "vertex_type_float3",
          "vertex_type_float4",
          "vertex_type_ubyte4",
          "vertex_usage_binormal",
          "vertex_usage_blendindices",
          "vertex_usage_blendweight",
          "vertex_usage_color",
          "vertex_usage_colour",
          "vertex_usage_depth",
          "vertex_usage_fog",
          "vertex_usage_normal",
          "vertex_usage_position",
          "vertex_usage_psize",
          "vertex_usage_sample",
          "vertex_usage_tangent",
          "vertex_usage_texcoord",
          "vertex_usage_textcoord",
          "vk_add",
          "vk_alt",
          "vk_anykey",
          "vk_backspace",
          "vk_control",
          "vk_decimal",
          "vk_delete",
          "vk_divide",
          "vk_down",
          "vk_end",
          "vk_enter",
          "vk_escape",
          "vk_f1",
          "vk_f2",
          "vk_f3",
          "vk_f4",
          "vk_f5",
          "vk_f6",
          "vk_f7",
          "vk_f8",
          "vk_f9",
          "vk_f10",
          "vk_f11",
          "vk_f12",
          "vk_home",
          "vk_insert",
          "vk_lalt",
          "vk_lcontrol",
          "vk_left",
          "vk_lshift",
          "vk_multiply",
          "vk_nokey",
          "vk_numpad0",
          "vk_numpad1",
          "vk_numpad2",
          "vk_numpad3",
          "vk_numpad4",
          "vk_numpad5",
          "vk_numpad6",
          "vk_numpad7",
          "vk_numpad8",
          "vk_numpad9",
          "vk_pagedown",
          "vk_pageup",
          "vk_pause",
          "vk_printscreen",
          "vk_ralt",
          "vk_rcontrol",
          "vk_return",
          "vk_right",
          "vk_rshift",
          "vk_shift",
          "vk_space",
          "vk_subtract",
          "vk_tab",
          "vk_up"
        ],
        "variable.language": [
          "alarm",
          "application_surface",
          "argument",
          "argument0",
          "argument1",
          "argument2",
          "argument3",
          "argument4",
          "argument5",
          "argument6",
          "argument7",
          "argument8",
          "argument9",
          "argument10",
          "argument11",
          "argument12",
          "argument13",
          "argument14",
          "argument15",
          "argument_count",
          "argument_relative",
          "async_load",
          "background_color",
          "background_colour",
          "background_showcolor",
          "background_showcolour",
          "bbox_bottom",
          "bbox_left",
          "bbox_right",
          "bbox_top",
          "browser_height",
          "browser_width",
          "caption_health",
          "caption_lives",
          "caption_score",
          "current_day",
          "current_hour",
          "current_minute",
          "current_month",
          "current_second",
          "current_time",
          "current_weekday",
          "current_year",
          "cursor_sprite",
          "debug_mode",
          "delta_time",
          "depth",
          "direction",
          "display_aa",
          "error_last",
          "error_occurred",
          "event_action",
          "event_data",
          "event_number",
          "event_object",
          "event_type",
          "fps",
          "fps_real",
          "friction",
          "game_display_name",
          "game_id",
          "game_project_name",
          "game_save_id",
          "gamemaker_pro",
          "gamemaker_registered",
          "gamemaker_version",
          "gravity",
          "gravity_direction",
          "health",
          "hspeed",
          "iap_data",
          "id|0",
          "image_alpha",
          "image_angle",
          "image_blend",
          "image_index",
          "image_number",
          "image_speed",
          "image_xscale",
          "image_yscale",
          "instance_count",
          "instance_id",
          "keyboard_key",
          "keyboard_lastchar",
          "keyboard_lastkey",
          "keyboard_string",
          "layer",
          "lives",
          "mask_index",
          "mouse_button",
          "mouse_lastbutton",
          "mouse_x",
          "mouse_y",
          "object_index",
          "os_browser",
          "os_device",
          "os_type",
          "os_version",
          "path_endaction",
          "path_index",
          "path_orientation",
          "path_position",
          "path_positionprevious",
          "path_scale",
          "path_speed",
          "persistent",
          "phy_active",
          "phy_angular_damping",
          "phy_angular_velocity",
          "phy_bullet",
          "phy_col_normal_x",
          "phy_col_normal_y",
          "phy_collision_points",
          "phy_collision_x",
          "phy_collision_y",
          "phy_com_x",
          "phy_com_y",
          "phy_dynamic",
          "phy_fixed_rotation",
          "phy_inertia",
          "phy_kinematic",
          "phy_linear_damping",
          "phy_linear_velocity_x",
          "phy_linear_velocity_y",
          "phy_mass",
          "phy_position_x",
          "phy_position_xprevious",
          "phy_position_y",
          "phy_position_yprevious",
          "phy_rotation",
          "phy_sleeping",
          "phy_speed",
          "phy_speed_x",
          "phy_speed_y",
          "program_directory",
          "room",
          "room_caption",
          "room_first",
          "room_height",
          "room_last",
          "room_persistent",
          "room_speed",
          "room_width",
          "score",
          "self",
          "show_health",
          "show_lives",
          "show_score",
          "solid",
          "speed",
          "sprite_height",
          "sprite_index",
          "sprite_width",
          "sprite_xoffset",
          "sprite_yoffset",
          "temp_directory",
          "timeline_index",
          "timeline_loop",
          "timeline_position",
          "timeline_running",
          "timeline_speed",
          "view_angle",
          "view_camera",
          "view_current",
          "view_enabled",
          "view_hborder",
          "view_hport",
          "view_hspeed",
          "view_hview",
          "view_object",
          "view_surface_id",
          "view_vborder",
          "view_visible",
          "view_vspeed",
          "view_wport",
          "view_wview",
          "view_xport",
          "view_xview",
          "view_yport",
          "view_yview",
          "visible",
          "vspeed",
          "webgl_enabled",
          "working_directory",
          "xprevious",
          "xstart",
          "x|0",
          "yprevious",
          "ystart",
          "y|0"
        ]
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE
      ]
    };
  }
  return cd = t, cd;
}
var ud, h$;
function TR() {
  if (h$)
    return ud;
  h$ = 1;
  function t(e) {
    const o = {
      keyword: [
        "break",
        "case",
        "chan",
        "const",
        "continue",
        "default",
        "defer",
        "else",
        "fallthrough",
        "for",
        "func",
        "go",
        "goto",
        "if",
        "import",
        "interface",
        "map",
        "package",
        "range",
        "return",
        "select",
        "struct",
        "switch",
        "type",
        "var"
      ],
      type: [
        "bool",
        "byte",
        "complex64",
        "complex128",
        "error",
        "float32",
        "float64",
        "int8",
        "int16",
        "int32",
        "int64",
        "string",
        "uint8",
        "uint16",
        "uint32",
        "uint64",
        "int",
        "uint",
        "uintptr",
        "rune"
      ],
      literal: [
        "true",
        "false",
        "iota",
        "nil"
      ],
      built_in: [
        "append",
        "cap",
        "close",
        "complex",
        "copy",
        "imag",
        "len",
        "make",
        "new",
        "panic",
        "print",
        "println",
        "real",
        "recover",
        "delete"
      ]
    };
    return {
      name: "Go",
      aliases: ["golang"],
      keywords: o,
      illegal: "</",
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "string",
          variants: [
            e.QUOTE_STRING_MODE,
            e.APOS_STRING_MODE,
            {
              begin: "`",
              end: "`"
            }
          ]
        },
        {
          className: "number",
          variants: [
            {
              begin: e.C_NUMBER_RE + "[i]",
              relevance: 1
            },
            e.C_NUMBER_MODE
          ]
        },
        {
          begin: /:=/
          // relevance booster
        },
        {
          className: "function",
          beginKeywords: "func",
          end: "\\s*(\\{|$)",
          excludeEnd: !0,
          contains: [
            e.TITLE_MODE,
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              endsParent: !0,
              keywords: o,
              illegal: /["']/
            }
          ]
        }
      ]
    };
  }
  return ud = t, ud;
}
var dd, m$;
function CR() {
  if (m$)
    return dd;
  m$ = 1;
  function t(e) {
    return {
      name: "Golo",
      keywords: {
        keyword: [
          "println",
          "readln",
          "print",
          "import",
          "module",
          "function",
          "local",
          "return",
          "let",
          "var",
          "while",
          "for",
          "foreach",
          "times",
          "in",
          "case",
          "when",
          "match",
          "with",
          "break",
          "continue",
          "augment",
          "augmentation",
          "each",
          "find",
          "filter",
          "reduce",
          "if",
          "then",
          "else",
          "otherwise",
          "try",
          "catch",
          "finally",
          "raise",
          "throw",
          "orIfNull",
          "DynamicObject|10",
          "DynamicVariable",
          "struct",
          "Observable",
          "map",
          "set",
          "vector",
          "list",
          "array"
        ],
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      contains: [
        e.HASH_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "@[A-Za-z]+"
        }
      ]
    };
  }
  return dd = t, dd;
}
var fd, g$;
function wR() {
  if (g$)
    return fd;
  g$ = 1;
  function t(e) {
    return {
      name: "Gradle",
      case_insensitive: !0,
      keywords: [
        "task",
        "project",
        "allprojects",
        "subprojects",
        "artifacts",
        "buildscript",
        "configurations",
        "dependencies",
        "repositories",
        "sourceSets",
        "description",
        "delete",
        "from",
        "into",
        "include",
        "exclude",
        "source",
        "classpath",
        "destinationDir",
        "includes",
        "options",
        "sourceCompatibility",
        "targetCompatibility",
        "group",
        "flatDir",
        "doLast",
        "doFirst",
        "flatten",
        "todir",
        "fromdir",
        "ant",
        "def",
        "abstract",
        "break",
        "case",
        "catch",
        "continue",
        "default",
        "do",
        "else",
        "extends",
        "final",
        "finally",
        "for",
        "if",
        "implements",
        "instanceof",
        "native",
        "new",
        "private",
        "protected",
        "public",
        "return",
        "static",
        "switch",
        "synchronized",
        "throw",
        "throws",
        "transient",
        "try",
        "volatile",
        "while",
        "strictfp",
        "package",
        "import",
        "false",
        "null",
        "super",
        "this",
        "true",
        "antlrtask",
        "checkstyle",
        "codenarc",
        "copy",
        "boolean",
        "byte",
        "char",
        "class",
        "double",
        "float",
        "int",
        "interface",
        "long",
        "short",
        "void",
        "compile",
        "runTime",
        "file",
        "fileTree",
        "abs",
        "any",
        "append",
        "asList",
        "asWritable",
        "call",
        "collect",
        "compareTo",
        "count",
        "div",
        "dump",
        "each",
        "eachByte",
        "eachFile",
        "eachLine",
        "every",
        "find",
        "findAll",
        "flatten",
        "getAt",
        "getErr",
        "getIn",
        "getOut",
        "getText",
        "grep",
        "immutable",
        "inject",
        "inspect",
        "intersect",
        "invokeMethods",
        "isCase",
        "join",
        "leftShift",
        "minus",
        "multiply",
        "newInputStream",
        "newOutputStream",
        "newPrintWriter",
        "newReader",
        "newWriter",
        "next",
        "plus",
        "pop",
        "power",
        "previous",
        "print",
        "println",
        "push",
        "putAt",
        "read",
        "readBytes",
        "readLines",
        "reverse",
        "reverseEach",
        "round",
        "size",
        "sort",
        "splitEachLine",
        "step",
        "subMap",
        "times",
        "toInteger",
        "toList",
        "tokenize",
        "upto",
        "waitForOrKill",
        "withPrintWriter",
        "withReader",
        "withStream",
        "withWriter",
        "withWriterAppend",
        "write",
        "writeLine"
      ],
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        e.REGEXP_MODE
      ]
    };
  }
  return fd = t, fd;
}
var pd, $$;
function AR() {
  if ($$)
    return pd;
  $$ = 1;
  function t(e) {
    const r = e.regex, n = /[_A-Za-z][_0-9A-Za-z]*/;
    return {
      name: "GraphQL",
      aliases: ["gql"],
      case_insensitive: !0,
      disableAutodetect: !1,
      keywords: {
        keyword: [
          "query",
          "mutation",
          "subscription",
          "type",
          "input",
          "schema",
          "directive",
          "interface",
          "union",
          "scalar",
          "fragment",
          "enum",
          "on"
        ],
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      contains: [
        e.HASH_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        {
          scope: "punctuation",
          match: /[.]{3}/,
          relevance: 0
        },
        {
          scope: "punctuation",
          begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
          relevance: 0
        },
        {
          scope: "variable",
          begin: /\$/,
          end: /\W/,
          excludeEnd: !0,
          relevance: 0
        },
        {
          scope: "meta",
          match: /@\w+/,
          excludeEnd: !0
        },
        {
          scope: "symbol",
          begin: r.concat(n, r.lookahead(/\s*:/)),
          relevance: 0
        }
      ],
      illegal: [
        /[;<']/,
        /BEGIN/
      ]
    };
  }
  return pd = t, pd;
}
var _d, b$;
function RR() {
  if (b$)
    return _d;
  b$ = 1;
  function t(r, n = {}) {
    return n.variants = r, n;
  }
  function e(r) {
    const n = r.regex, i = "[A-Za-z0-9_$]+", s = t([
      r.C_LINE_COMMENT_MODE,
      r.C_BLOCK_COMMENT_MODE,
      r.COMMENT(
        "/\\*\\*",
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              // eat up @'s in emails to prevent them to be recognized as doctags
              begin: /\w+@/,
              relevance: 0
            },
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }
      )
    ]), o = {
      className: "regexp",
      begin: /~?\/[^\/\n]+\//,
      contains: [r.BACKSLASH_ESCAPE]
    }, a = t([
      r.BINARY_NUMBER_MODE,
      r.C_NUMBER_MODE
    ]), l = t(
      [
        {
          begin: /"""/,
          end: /"""/
        },
        {
          begin: /'''/,
          end: /'''/
        },
        {
          begin: "\\$/",
          end: "/\\$",
          relevance: 10
        },
        r.APOS_STRING_MODE,
        r.QUOTE_STRING_MODE
      ],
      { className: "string" }
    ), c = {
      match: [
        /(class|interface|trait|enum|record|extends|implements)/,
        /\s+/,
        r.UNDERSCORE_IDENT_RE
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "Groovy",
      keywords: {
        "variable.language": "this super",
        literal: "true false null",
        type: [
          "byte",
          "short",
          "char",
          "int",
          "long",
          "boolean",
          "float",
          "double",
          "void"
        ],
        keyword: [
          // groovy specific keywords
          "def",
          "as",
          "in",
          "assert",
          "trait",
          // common keywords with Java
          "abstract",
          "static",
          "volatile",
          "transient",
          "public",
          "private",
          "protected",
          "synchronized",
          "final",
          "class",
          "interface",
          "enum",
          "if",
          "else",
          "for",
          "while",
          "switch",
          "case",
          "break",
          "default",
          "continue",
          "throw",
          "throws",
          "try",
          "catch",
          "finally",
          "implements",
          "extends",
          "new",
          "import",
          "package",
          "return",
          "instanceof",
          "var"
        ]
      },
      contains: [
        r.SHEBANG({
          binary: "groovy",
          relevance: 10
        }),
        s,
        l,
        o,
        a,
        c,
        {
          className: "meta",
          begin: "@[A-Za-z]+",
          relevance: 0
        },
        {
          // highlight map keys and named parameters as attrs
          className: "attr",
          begin: i + "[ 	]*:",
          relevance: 0
        },
        {
          // catch middle element of the ternary operator
          // to avoid highlight it as a label, named parameter, or map key
          begin: /\?/,
          end: /:/,
          relevance: 0,
          contains: [
            s,
            l,
            o,
            a,
            "self"
          ]
        },
        {
          // highlight labeled statements
          className: "symbol",
          begin: "^[ 	]*" + n.lookahead(i + ":"),
          excludeBegin: !0,
          end: i + ":",
          relevance: 0
        }
      ],
      illegal: /#|<\//
    };
  }
  return _d = e, _d;
}
var hd, E$;
function xR() {
  if (E$)
    return hd;
  E$ = 1;
  function t(e) {
    return {
      name: "HAML",
      case_insensitive: !0,
      contains: [
        {
          className: "meta",
          begin: "^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$",
          relevance: 10
        },
        // FIXME these comments should be allowed to span indented lines
        e.COMMENT(
          "^\\s*(!=#|=#|-#|/).*$",
          null,
          { relevance: 0 }
        ),
        {
          begin: "^\\s*(-|=|!=)(?!#)",
          end: /$/,
          subLanguage: "ruby",
          excludeBegin: !0,
          excludeEnd: !0
        },
        {
          className: "tag",
          begin: "^\\s*%",
          contains: [
            {
              className: "selector-tag",
              begin: "\\w+"
            },
            {
              className: "selector-id",
              begin: "#[\\w-]+"
            },
            {
              className: "selector-class",
              begin: "\\.[\\w-]+"
            },
            {
              begin: /\{\s*/,
              end: /\s*\}/,
              contains: [
                {
                  begin: ":\\w+\\s*=>",
                  end: ",\\s+",
                  returnBegin: !0,
                  endsWithParent: !0,
                  contains: [
                    {
                      className: "attr",
                      begin: ":\\w+"
                    },
                    e.APOS_STRING_MODE,
                    e.QUOTE_STRING_MODE,
                    {
                      begin: "\\w+",
                      relevance: 0
                    }
                  ]
                }
              ]
            },
            {
              begin: "\\(\\s*",
              end: "\\s*\\)",
              excludeEnd: !0,
              contains: [
                {
                  begin: "\\w+\\s*=",
                  end: "\\s+",
                  returnBegin: !0,
                  endsWithParent: !0,
                  contains: [
                    {
                      className: "attr",
                      begin: "\\w+",
                      relevance: 0
                    },
                    e.APOS_STRING_MODE,
                    e.QUOTE_STRING_MODE,
                    {
                      begin: "\\w+",
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        { begin: "^\\s*[=~]\\s*" },
        {
          begin: /#\{/,
          end: /\}/,
          subLanguage: "ruby",
          excludeBegin: !0,
          excludeEnd: !0
        }
      ]
    };
  }
  return hd = t, hd;
}
var md, v$;
function NR() {
  if (v$)
    return md;
  v$ = 1;
  function t(e) {
    const r = e.regex, n = {
      $pattern: /[\w.\/]+/,
      built_in: [
        "action",
        "bindattr",
        "collection",
        "component",
        "concat",
        "debugger",
        "each",
        "each-in",
        "get",
        "hash",
        "if",
        "in",
        "input",
        "link-to",
        "loc",
        "log",
        "lookup",
        "mut",
        "outlet",
        "partial",
        "query-params",
        "render",
        "template",
        "textarea",
        "unbound",
        "unless",
        "view",
        "with",
        "yield"
      ]
    }, i = {
      $pattern: /[\w.\/]+/,
      literal: [
        "true",
        "false",
        "undefined",
        "null"
      ]
    }, s = /""|"[^"]+"/, o = /''|'[^']+'/, a = /\[\]|\[[^\]]+\]/, l = /[^\s!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]+/, c = /(\.|\/)/, f = r.either(
      s,
      o,
      a,
      l
    ), m = r.concat(
      r.optional(/\.|\.\/|\//),
      // relative or absolute path
      f,
      r.anyNumberOfTimes(r.concat(
        c,
        f
      ))
    ), b = r.concat(
      "(",
      a,
      "|",
      l,
      ")(?==)"
    ), C = { begin: m }, N = e.inherit(C, { keywords: i }), z = {
      begin: /\(/,
      end: /\)/
      // the "contains" is added below when all necessary sub-modes are defined
    }, A = {
      // fka "attribute-assignment", parameters of the form 'key=value'
      className: "attr",
      begin: b,
      relevance: 0,
      starts: {
        begin: /=/,
        end: /=/,
        starts: { contains: [
          e.NUMBER_MODE,
          e.QUOTE_STRING_MODE,
          e.APOS_STRING_MODE,
          N,
          z
        ] }
      }
    }, Q = {
      // parameters of the form '{{#with x as | y |}}...{{/with}}'
      begin: /as\s+\|/,
      keywords: { keyword: "as" },
      end: /\|/,
      contains: [
        {
          // define sub-mode in order to prevent highlighting of block-parameter named "as"
          begin: /\w+/
        }
      ]
    }, Te = {
      contains: [
        e.NUMBER_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        Q,
        A,
        N,
        z
      ],
      returnEnd: !0
      // the property "end" is defined through inheritance when the mode is used. If depends
      // on the surrounding mode, but "endsWithParent" does not work here (i.e. it includes the
      // end-token of the surrounding mode)
    }, ce = e.inherit(C, {
      className: "name",
      keywords: n,
      starts: e.inherit(Te, { end: /\)/ })
    });
    z.contains = [ce];
    const ge = e.inherit(C, {
      keywords: n,
      className: "name",
      starts: e.inherit(Te, { end: /\}\}/ })
    }), Y = e.inherit(C, {
      keywords: n,
      className: "name"
    }), fe = e.inherit(C, {
      className: "name",
      keywords: n,
      starts: e.inherit(Te, { end: /\}\}/ })
    });
    return {
      name: "Handlebars",
      aliases: [
        "hbs",
        "html.hbs",
        "html.handlebars",
        "htmlbars"
      ],
      case_insensitive: !0,
      subLanguage: "xml",
      contains: [
        {
          begin: /\\\{\{/,
          skip: !0
        },
        {
          begin: /\\\\(?=\{\{)/,
          skip: !0
        },
        e.COMMENT(/\{\{!--/, /--\}\}/),
        e.COMMENT(/\{\{!/, /\}\}/),
        {
          // open raw block "{{{{raw}}}} content not evaluated {{{{/raw}}}}"
          className: "template-tag",
          begin: /\{\{\{\{(?!\/)/,
          end: /\}\}\}\}/,
          contains: [ge],
          starts: {
            end: /\{\{\{\{\//,
            returnEnd: !0,
            subLanguage: "xml"
          }
        },
        {
          // close raw block
          className: "template-tag",
          begin: /\{\{\{\{\//,
          end: /\}\}\}\}/,
          contains: [Y]
        },
        {
          // open block statement
          className: "template-tag",
          begin: /\{\{#/,
          end: /\}\}/,
          contains: [ge]
        },
        {
          className: "template-tag",
          begin: /\{\{(?=else\}\})/,
          end: /\}\}/,
          keywords: "else"
        },
        {
          className: "template-tag",
          begin: /\{\{(?=else if)/,
          end: /\}\}/,
          keywords: "else if"
        },
        {
          // closing block statement
          className: "template-tag",
          begin: /\{\{\//,
          end: /\}\}/,
          contains: [Y]
        },
        {
          // template variable or helper-call that is NOT html-escaped
          className: "template-variable",
          begin: /\{\{\{/,
          end: /\}\}\}/,
          contains: [fe]
        },
        {
          // template variable or helper-call that is html-escaped
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [fe]
        }
      ]
    };
  }
  return md = t, md;
}
var gd, S$;
function kR() {
  if (S$)
    return gd;
  S$ = 1;
  function t(e) {
    const r = "([0-9]_*)+", n = "([0-9a-fA-F]_*)+", i = "([01]_*)+", s = "([0-7]_*)+", c = "([!#$%&*+.\\/<=>?@\\\\^~-]|(?!([(),;\\[\\]`|{}]|[_:\"']))(\\p{S}|\\p{P}))", f = { variants: [
      // Double dash forms a valid comment only if it's not part of legal lexeme.
      // See: Haskell 98 report: https://www.haskell.org/onlinereport/lexemes.html
      //
      // The commented code does the job, but we can't use negative lookbehind,
      // due to poor support by Safari browser.
      // > hljs.COMMENT(`(?<!${symbol})--+(?!${symbol})`, '$'),
      // So instead, we'll add a no-markup rule before the COMMENT rule in the rules list
      // to match the problematic infix operators that contain double dash.
      e.COMMENT("--+", "$"),
      e.COMMENT(
        /\{-/,
        /-\}/,
        { contains: ["self"] }
      )
    ] }, m = {
      className: "meta",
      begin: /\{-#/,
      end: /#-\}/
    }, b = {
      className: "meta",
      begin: "^#",
      end: "$"
    }, C = {
      className: "type",
      begin: "\\b[A-Z][\\w']*",
      // TODO: other constructors (build-in, infix).
      relevance: 0
    }, N = {
      begin: "\\(",
      end: "\\)",
      illegal: '"',
      contains: [
        m,
        b,
        {
          className: "type",
          begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
        },
        e.inherit(e.TITLE_MODE, { begin: "[_a-z][\\w']*" }),
        f
      ]
    }, z = {
      begin: /\{/,
      end: /\}/,
      contains: N.contains
    }, A = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal floating-point-literal (subsumes decimal-literal)
        { match: `\\b(${r})(\\.(${r}))?([eE][+-]?(${r}))?\\b` },
        // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
        { match: `\\b0[xX]_*(${n})(\\.(${n}))?([pP][+-]?(${r}))?\\b` },
        // octal-literal
        { match: `\\b0[oO](${s})\\b` },
        // binary-literal
        { match: `\\b0[bB](${i})\\b` }
      ]
    };
    return {
      name: "Haskell",
      aliases: ["hs"],
      keywords: "let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",
      unicodeRegex: !0,
      contains: [
        // Top-level constructions.
        {
          beginKeywords: "module",
          end: "where",
          keywords: "module where",
          contains: [
            N,
            f
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "\\bimport\\b",
          end: "$",
          keywords: "import qualified as hiding",
          contains: [
            N,
            f
          ],
          illegal: "\\W\\.|;"
        },
        {
          className: "class",
          begin: "^(\\s*)?(class|instance)\\b",
          end: "where",
          keywords: "class family instance where",
          contains: [
            C,
            N,
            f
          ]
        },
        {
          className: "class",
          begin: "\\b(data|(new)?type)\\b",
          end: "$",
          keywords: "data family type newtype deriving",
          contains: [
            m,
            C,
            N,
            z,
            f
          ]
        },
        {
          beginKeywords: "default",
          end: "$",
          contains: [
            C,
            N,
            f
          ]
        },
        {
          beginKeywords: "infix infixl infixr",
          end: "$",
          contains: [
            e.C_NUMBER_MODE,
            f
          ]
        },
        {
          begin: "\\bforeign\\b",
          end: "$",
          keywords: "foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",
          contains: [
            C,
            e.QUOTE_STRING_MODE,
            f
          ]
        },
        {
          className: "meta",
          begin: "#!\\/usr\\/bin\\/env runhaskell",
          end: "$"
        },
        // "Whitespaces".
        m,
        b,
        // Literals and names.
        // Single characters.
        {
          scope: "string",
          begin: /'(?=\\?.')/,
          end: /'/,
          contains: [
            {
              scope: "char.escape",
              match: /\\./
            }
          ]
        },
        e.QUOTE_STRING_MODE,
        A,
        C,
        e.inherit(e.TITLE_MODE, { begin: "^[_a-z][\\w']*" }),
        // No markup, prevents infix operators from being recognized as comments.
        { begin: `(?!-)${c}--+|--+(?!-)${c}` },
        f,
        {
          // No markup, relevance booster
          begin: "->|<-"
        }
      ]
    };
  }
  return gd = t, gd;
}
var $d, y$;
function IR() {
  if (y$)
    return $d;
  y$ = 1;
  function t(e) {
    const r = "[a-zA-Z_$][a-zA-Z0-9_$]*", n = /(-?)(\b0[xX][a-fA-F0-9_]+|(\b\d+(\.[\d_]*)?|\.[\d_]+)(([eE][-+]?\d+)|i32|u32|i64|f64)?)/;
    return {
      name: "Haxe",
      aliases: ["hx"],
      keywords: {
        keyword: "abstract break case cast catch continue default do dynamic else enum extern final for function here if import in inline is macro never new override package private get set public return static super switch this throw trace try typedef untyped using var while " + "Int Float String Bool Dynamic Void Array ",
        built_in: "trace this",
        literal: "true false null _"
      },
      contains: [
        {
          className: "string",
          // interpolate-able strings
          begin: "'",
          end: "'",
          contains: [
            e.BACKSLASH_ESCAPE,
            {
              className: "subst",
              // interpolation
              begin: /\$\{/,
              end: /\}/
            },
            {
              className: "subst",
              // interpolation
              begin: /\$/,
              end: /\W\}/
            }
          ]
        },
        e.QUOTE_STRING_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          begin: n,
          relevance: 0
        },
        {
          className: "variable",
          begin: "\\$" + r
        },
        {
          className: "meta",
          // compiler meta
          begin: /@:?/,
          end: /\(|$/,
          excludeEnd: !0
        },
        {
          className: "meta",
          // compiler conditionals
          begin: "#",
          end: "$",
          keywords: { keyword: "if else elseif end error" }
        },
        {
          className: "type",
          // function types
          begin: /:[ \t]*/,
          end: /[^A-Za-z0-9_ \t\->]/,
          excludeBegin: !0,
          excludeEnd: !0,
          relevance: 0
        },
        {
          className: "type",
          // types
          begin: /:[ \t]*/,
          end: /\W/,
          excludeBegin: !0,
          excludeEnd: !0
        },
        {
          className: "type",
          // instantiation
          begin: /new */,
          end: /\W/,
          excludeBegin: !0,
          excludeEnd: !0
        },
        {
          className: "title.class",
          // enums
          beginKeywords: "enum",
          end: /\{/,
          contains: [e.TITLE_MODE]
        },
        {
          className: "title.class",
          // abstracts
          begin: "\\babstract\\b(?=\\s*" + e.IDENT_RE + "\\s*\\()",
          end: /[\{$]/,
          contains: [
            {
              className: "type",
              begin: /\(/,
              end: /\)/,
              excludeBegin: !0,
              excludeEnd: !0
            },
            {
              className: "type",
              begin: /from +/,
              end: /\W/,
              excludeBegin: !0,
              excludeEnd: !0
            },
            {
              className: "type",
              begin: /to +/,
              end: /\W/,
              excludeBegin: !0,
              excludeEnd: !0
            },
            e.TITLE_MODE
          ],
          keywords: { keyword: "abstract from to" }
        },
        {
          className: "title.class",
          // classes
          begin: /\b(class|interface) +/,
          end: /[\{$]/,
          excludeEnd: !0,
          keywords: "class interface",
          contains: [
            {
              className: "keyword",
              begin: /\b(extends|implements) +/,
              keywords: "extends implements",
              contains: [
                {
                  className: "type",
                  begin: e.IDENT_RE,
                  relevance: 0
                }
              ]
            },
            e.TITLE_MODE
          ]
        },
        {
          className: "title.function",
          beginKeywords: "function",
          end: /\(/,
          excludeEnd: !0,
          illegal: /\S/,
          contains: [e.TITLE_MODE]
        }
      ],
      illegal: /<\//
    };
  }
  return $d = t, $d;
}
var bd, T$;
function OR() {
  if (T$)
    return bd;
  T$ = 1;
  function t(e) {
    return {
      name: "HSP",
      case_insensitive: !0,
      keywords: {
        $pattern: /[\w._]+/,
        keyword: "goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop"
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        {
          // multi-line string
          className: "string",
          begin: /\{"/,
          end: /"\}/,
          contains: [e.BACKSLASH_ESCAPE]
        },
        e.COMMENT(";", "$", { relevance: 0 }),
        {
          // pre-processor
          className: "meta",
          begin: "#",
          end: "$",
          keywords: { keyword: "addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib" },
          contains: [
            e.inherit(e.QUOTE_STRING_MODE, { className: "string" }),
            e.NUMBER_MODE,
            e.C_NUMBER_MODE,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // label
          className: "symbol",
          begin: "^\\*(\\w+|@)"
        },
        e.NUMBER_MODE,
        e.C_NUMBER_MODE
      ]
    };
  }
  return bd = t, bd;
}
var Ed, C$;
function DR() {
  if (C$)
    return Ed;
  C$ = 1;
  function t(e) {
    const r = e.regex, n = "HTTP/([32]|1\\.[01])", i = /[A-Za-z][A-Za-z0-9-]*/, s = {
      className: "attribute",
      begin: r.concat("^", i, "(?=\\:\\s)"),
      starts: { contains: [
        {
          className: "punctuation",
          begin: /: /,
          relevance: 0,
          starts: {
            end: "$",
            relevance: 0
          }
        }
      ] }
    }, o = [
      s,
      {
        begin: "\\n\\n",
        starts: {
          subLanguage: [],
          endsWithParent: !0
        }
      }
    ];
    return {
      name: "HTTP",
      aliases: ["https"],
      illegal: /\S/,
      contains: [
        // response
        {
          begin: "^(?=" + n + " \\d{3})",
          end: /$/,
          contains: [
            {
              className: "meta",
              begin: n
            },
            {
              className: "number",
              begin: "\\b\\d{3}\\b"
            }
          ],
          starts: {
            end: /\b\B/,
            illegal: /\S/,
            contains: o
          }
        },
        // request
        {
          begin: "(?=^[A-Z]+ (.*?) " + n + "$)",
          end: /$/,
          contains: [
            {
              className: "string",
              begin: " ",
              end: " ",
              excludeBegin: !0,
              excludeEnd: !0
            },
            {
              className: "meta",
              begin: n
            },
            {
              className: "keyword",
              begin: "[A-Z]+"
            }
          ],
          starts: {
            end: /\b\B/,
            illegal: /\S/,
            contains: o
          }
        },
        // to allow headers to work even without a preamble
        e.inherit(s, { relevance: 0 })
      ]
    };
  }
  return Ed = t, Ed;
}
var vd, w$;
function MR() {
  if (w$)
    return vd;
  w$ = 1;
  function t(e) {
    const r = "a-zA-Z_\\-!.?+*=<>&#'", n = "[" + r + "][" + r + "0-9/;:]*", i = {
      $pattern: n,
      built_in: (
        // keywords
        "!= % %= & &= * ** **= *= *map + += , --build-class-- --import-- -= . / // //= /= < << <<= <= = > >= >> >>= @ @= ^ ^= abs accumulate all and any ap-compose ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast callable calling-module-name car case cdr chain chr coll? combinations compile compress cond cons cons? continue count curry cut cycle dec def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first flatten float? fn fnc fnr for for* format fraction genexpr gensym get getattr global globals group-by hasattr hash hex id identity if if* if-not if-python2 import in inc input instance? integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass iter iterable? iterate iterator? keyword keyword? lambda last len let lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all map max merge-with method-decorator min multi-decorator multicombinations name neg? next none? nonlocal not not-in not? nth numeric? oct odd? open or ord partition permutations pos? post-route postwalk pow prewalk print product profile/calls profile/cpu put-route quasiquote quote raise range read read-str recursive-replace reduce remove repeat repeatedly repr require rest round route route-with-methods rwm second seq set-comp setattr setv some sorted string string? sum switch symbol? take take-nth take-while tee try unless unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms xi xor yield yield-from zero? zip zip-longest | |= ~"
      )
    }, s = "[-+]?\\d+(\\.\\d+)?", o = {
      begin: n,
      relevance: 0
    }, a = {
      className: "number",
      begin: s,
      relevance: 0
    }, l = e.inherit(e.QUOTE_STRING_MODE, { illegal: null }), c = e.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    ), f = {
      className: "literal",
      begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
    }, m = {
      begin: "[\\[\\{]",
      end: "[\\]\\}]",
      relevance: 0
    }, b = {
      className: "comment",
      begin: "\\^" + n
    }, C = e.COMMENT("\\^\\{", "\\}"), N = {
      className: "symbol",
      begin: "[:]{1,2}" + n
    }, z = {
      begin: "\\(",
      end: "\\)"
    }, A = {
      endsWithParent: !0,
      relevance: 0
    }, Q = {
      className: "name",
      relevance: 0,
      keywords: i,
      begin: n,
      starts: A
    }, Te = [
      z,
      l,
      b,
      C,
      c,
      N,
      m,
      a,
      f,
      o
    ];
    return z.contains = [
      e.COMMENT("comment", ""),
      Q,
      A
    ], A.contains = Te, m.contains = Te, {
      name: "Hy",
      aliases: ["hylang"],
      illegal: /\S/,
      contains: [
        e.SHEBANG(),
        z,
        l,
        b,
        C,
        c,
        N,
        m,
        a,
        f
      ]
    };
  }
  return vd = t, vd;
}
var Sd, A$;
function LR() {
  if (A$)
    return Sd;
  A$ = 1;
  function t(e) {
    const r = "\\[", n = "\\]";
    return {
      name: "Inform 7",
      aliases: ["i7"],
      case_insensitive: !0,
      keywords: {
        // Some keywords more or less unique to I7, for relevance.
        keyword: (
          // kind:
          "thing room person man woman animal container supporter backdrop door scenery open closed locked inside gender is are say understand kind of rule"
        )
      },
      contains: [
        {
          className: "string",
          begin: '"',
          end: '"',
          relevance: 0,
          contains: [
            {
              className: "subst",
              begin: r,
              end: n
            }
          ]
        },
        {
          className: "section",
          begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
          end: "$"
        },
        {
          // Rule definition
          // This is here for relevance.
          begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
          end: ":",
          contains: [
            {
              // Rule name
              begin: "\\(This",
              end: "\\)"
            }
          ]
        },
        {
          className: "comment",
          begin: r,
          end: n,
          contains: ["self"]
        }
      ]
    };
  }
  return Sd = t, Sd;
}
var yd, R$;
function PR() {
  if (R$)
    return yd;
  R$ = 1;
  function t(e) {
    const r = e.regex, n = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: /([+-]+)?[\d]+_[\d_]+/ },
        { begin: e.NUMBER_RE }
      ]
    }, i = e.COMMENT();
    i.variants = [
      {
        begin: /;/,
        end: /$/
      },
      {
        begin: /#/,
        end: /$/
      }
    ];
    const s = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d"][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    }, o = {
      className: "literal",
      begin: /\bon|off|true|false|yes|no\b/
    }, a = {
      className: "string",
      contains: [e.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: "'''",
          end: "'''",
          relevance: 10
        },
        {
          begin: '"""',
          end: '"""',
          relevance: 10
        },
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        }
      ]
    }, l = {
      begin: /\[/,
      end: /\]/,
      contains: [
        i,
        o,
        s,
        a,
        n,
        "self"
      ],
      relevance: 0
    }, c = /[A-Za-z0-9_-]+/, f = /"(\\"|[^"])*"/, m = /'[^']*'/, b = r.either(
      c,
      f,
      m
    ), C = r.concat(
      b,
      "(\\s*\\.\\s*",
      b,
      ")*",
      r.lookahead(/\s*=\s*[^#\s]/)
    );
    return {
      name: "TOML, also INI",
      aliases: ["toml"],
      case_insensitive: !0,
      illegal: /\S/,
      contains: [
        i,
        {
          className: "section",
          begin: /\[+/,
          end: /\]+/
        },
        {
          begin: C,
          className: "attr",
          starts: {
            end: /$/,
            contains: [
              i,
              l,
              o,
              s,
              a,
              n
            ]
          }
        }
      ]
    };
  }
  return yd = t, yd;
}
var Td, x$;
function FR() {
  if (x$)
    return Td;
  x$ = 1;
  function t(e) {
    const r = e.regex, n = {
      className: "params",
      begin: "\\(",
      end: "\\)"
    }, i = /(_[a-z_\d]+)?/, s = /([de][+-]?\d+)?/, o = {
      className: "number",
      variants: [
        { begin: r.concat(/\b\d+/, /\.(\d*)/, s, i) },
        { begin: r.concat(/\b\d+/, s, i) },
        { begin: r.concat(/\.\d+/, s, i) }
      ],
      relevance: 0
    };
    return {
      name: "IRPF90",
      case_insensitive: !0,
      keywords: {
        literal: ".False. .True.",
        keyword: "kind do while private call intrinsic where elsewhere type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. goto save else use module select case access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit continue format pause cycle exit c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg synchronous nopass non_overridable pass protected volatile abstract extends import non_intrinsic value deferred generic final enumerator class associate bind enum c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure integer real character complex logical dimension allocatable|10 parameter external implicit|10 none double precision assign intent optional pointer target in out common equivalence data begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read",
        built_in: "alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr num_images parity popcnt poppar shifta shiftl shiftr this_image IRP_ALIGN irp_here"
      },
      illegal: /\/\*/,
      contains: [
        e.inherit(e.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        e.inherit(e.QUOTE_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        {
          className: "function",
          beginKeywords: "subroutine function program",
          illegal: "[${=\\n]",
          contains: [
            e.UNDERSCORE_TITLE_MODE,
            n
          ]
        },
        e.COMMENT("!", "$", { relevance: 0 }),
        e.COMMENT("begin_doc", "end_doc", { relevance: 10 }),
        o
      ]
    };
  }
  return Td = t, Td;
}
var Cd, N$;
function BR() {
  if (N$)
    return Cd;
  N$ = 1;
  function t(e) {
    const r = "[A-Za-zА-Яа-яёЁ_!][A-Za-zА-Яа-яёЁ_0-9]*", n = "[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]*", i = "and и else иначе endexcept endfinally endforeach конецвсе endif конецесли endwhile конецпока except exitfor finally foreach все if если in в not не or или try while пока ", $ = "SYSRES_CONST_ACCES_RIGHT_TYPE_EDIT SYSRES_CONST_ACCES_RIGHT_TYPE_FULL SYSRES_CONST_ACCES_RIGHT_TYPE_VIEW SYSRES_CONST_ACCESS_MODE_REQUISITE_CODE SYSRES_CONST_ACCESS_NO_ACCESS_VIEW SYSRES_CONST_ACCESS_NO_ACCESS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW SYSRES_CONST_ACCESS_RIGHTS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_TYPE_CHANGE SYSRES_CONST_ACCESS_TYPE_CHANGE_CODE SYSRES_CONST_ACCESS_TYPE_EXISTS SYSRES_CONST_ACCESS_TYPE_EXISTS_CODE SYSRES_CONST_ACCESS_TYPE_FULL SYSRES_CONST_ACCESS_TYPE_FULL_CODE SYSRES_CONST_ACCESS_TYPE_VIEW SYSRES_CONST_ACCESS_TYPE_VIEW_CODE SYSRES_CONST_ACTION_TYPE_ABORT SYSRES_CONST_ACTION_TYPE_ACCEPT SYSRES_CONST_ACTION_TYPE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ADD_ATTACHMENT SYSRES_CONST_ACTION_TYPE_CHANGE_CARD SYSRES_CONST_ACTION_TYPE_CHANGE_KIND SYSRES_CONST_ACTION_TYPE_CHANGE_STORAGE SYSRES_CONST_ACTION_TYPE_CONTINUE SYSRES_CONST_ACTION_TYPE_COPY SYSRES_CONST_ACTION_TYPE_CREATE SYSRES_CONST_ACTION_TYPE_CREATE_VERSION SYSRES_CONST_ACTION_TYPE_DELETE SYSRES_CONST_ACTION_TYPE_DELETE_ATTACHMENT SYSRES_CONST_ACTION_TYPE_DELETE_VERSION SYSRES_CONST_ACTION_TYPE_DISABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE_AND_PASSWORD SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_PASSWORD SYSRES_CONST_ACTION_TYPE_EXPORT_WITH_LOCK SYSRES_CONST_ACTION_TYPE_EXPORT_WITHOUT_LOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITH_UNLOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITHOUT_UNLOCK SYSRES_CONST_ACTION_TYPE_LIFE_CYCLE_STAGE SYSRES_CONST_ACTION_TYPE_LOCK SYSRES_CONST_ACTION_TYPE_LOCK_FOR_SERVER SYSRES_CONST_ACTION_TYPE_LOCK_MODIFY SYSRES_CONST_ACTION_TYPE_MARK_AS_READED SYSRES_CONST_ACTION_TYPE_MARK_AS_UNREADED SYSRES_CONST_ACTION_TYPE_MODIFY SYSRES_CONST_ACTION_TYPE_MODIFY_CARD SYSRES_CONST_ACTION_TYPE_MOVE_TO_ARCHIVE SYSRES_CONST_ACTION_TYPE_OFF_ENCRYPTION SYSRES_CONST_ACTION_TYPE_PASSWORD_CHANGE SYSRES_CONST_ACTION_TYPE_PERFORM SYSRES_CONST_ACTION_TYPE_RECOVER_FROM_LOCAL_COPY SYSRES_CONST_ACTION_TYPE_RESTART SYSRES_CONST_ACTION_TYPE_RESTORE_FROM_ARCHIVE SYSRES_CONST_ACTION_TYPE_REVISION SYSRES_CONST_ACTION_TYPE_SEND_BY_MAIL SYSRES_CONST_ACTION_TYPE_SIGN SYSRES_CONST_ACTION_TYPE_START SYSRES_CONST_ACTION_TYPE_UNLOCK SYSRES_CONST_ACTION_TYPE_UNLOCK_FROM_SERVER SYSRES_CONST_ACTION_TYPE_VERSION_STATE SYSRES_CONST_ACTION_TYPE_VERSION_VISIBILITY SYSRES_CONST_ACTION_TYPE_VIEW SYSRES_CONST_ACTION_TYPE_VIEW_SHADOW_COPY SYSRES_CONST_ACTION_TYPE_WORKFLOW_DESCRIPTION_MODIFY SYSRES_CONST_ACTION_TYPE_WRITE_HISTORY SYSRES_CONST_ACTIVE_VERSION_STATE_PICK_VALUE SYSRES_CONST_ADD_REFERENCE_MODE_NAME SYSRES_CONST_ADDITION_REQUISITE_CODE SYSRES_CONST_ADDITIONAL_PARAMS_REQUISITE_CODE SYSRES_CONST_ADITIONAL_JOB_END_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_READ_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_START_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_STATE_REQUISITE_NAME SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE_ACTION SYSRES_CONST_ALL_ACCEPT_CONDITION_RUS SYSRES_CONST_ALL_USERS_GROUP SYSRES_CONST_ALL_USERS_GROUP_NAME SYSRES_CONST_ALL_USERS_SERVER_GROUP_NAME SYSRES_CONST_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_APP_VIEWER_TYPE_REQUISITE_CODE SYSRES_CONST_APPROVING_SIGNATURE_NAME SYSRES_CONST_APPROVING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE_CODE SYSRES_CONST_ATTACH_TYPE_COMPONENT_TOKEN SYSRES_CONST_ATTACH_TYPE_DOC SYSRES_CONST_ATTACH_TYPE_EDOC SYSRES_CONST_ATTACH_TYPE_FOLDER SYSRES_CONST_ATTACH_TYPE_JOB SYSRES_CONST_ATTACH_TYPE_REFERENCE SYSRES_CONST_ATTACH_TYPE_TASK SYSRES_CONST_AUTH_ENCODED_PASSWORD SYSRES_CONST_AUTH_ENCODED_PASSWORD_CODE SYSRES_CONST_AUTH_NOVELL SYSRES_CONST_AUTH_PASSWORD SYSRES_CONST_AUTH_PASSWORD_CODE SYSRES_CONST_AUTH_WINDOWS SYSRES_CONST_AUTHENTICATING_SIGNATURE_NAME SYSRES_CONST_AUTHENTICATING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_AUTO_ENUM_METHOD_FLAG SYSRES_CONST_AUTO_NUMERATION_CODE SYSRES_CONST_AUTO_STRONG_ENUM_METHOD_FLAG SYSRES_CONST_AUTOTEXT_NAME_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_TEXT_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_USAGE_ALL SYSRES_CONST_AUTOTEXT_USAGE_ALL_CODE SYSRES_CONST_AUTOTEXT_USAGE_SIGN SYSRES_CONST_AUTOTEXT_USAGE_SIGN_CODE SYSRES_CONST_AUTOTEXT_USAGE_WORK SYSRES_CONST_AUTOTEXT_USAGE_WORK_CODE SYSRES_CONST_AUTOTEXT_USE_ANYWHERE_CODE SYSRES_CONST_AUTOTEXT_USE_ON_SIGNING_CODE SYSRES_CONST_AUTOTEXT_USE_ON_WORK_CODE SYSRES_CONST_BEGIN_DATE_REQUISITE_CODE SYSRES_CONST_BLACK_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BLUE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BTN_PART SYSRES_CONST_CALCULATED_ROLE_TYPE_CODE SYSRES_CONST_CALL_TYPE_VARIABLE_BUTTON_VALUE SYSRES_CONST_CALL_TYPE_VARIABLE_PROGRAM_VALUE SYSRES_CONST_CANCEL_MESSAGE_FUNCTION_RESULT SYSRES_CONST_CARD_PART SYSRES_CONST_CARD_REFERENCE_MODE_NAME SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_AND_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_VALUE SYSRES_CONST_CHECK_PARAM_VALUE_DATE_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_FLOAT_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_INTEGER_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_PICK_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_REEFRENCE_PARAM_TYPE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_CODE_COMPONENT_TYPE_ADMIN SYSRES_CONST_CODE_COMPONENT_TYPE_DEVELOPER SYSRES_CONST_CODE_COMPONENT_TYPE_DOCS SYSRES_CONST_CODE_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_CODE_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_CODE_COMPONENT_TYPE_OTHER SYSRES_CONST_CODE_COMPONENT_TYPE_REFERENCE SYSRES_CONST_CODE_COMPONENT_TYPE_REPORT SYSRES_CONST_CODE_COMPONENT_TYPE_SCRIPT SYSRES_CONST_CODE_COMPONENT_TYPE_URL SYSRES_CONST_CODE_REQUISITE_ACCESS SYSRES_CONST_CODE_REQUISITE_CODE SYSRES_CONST_CODE_REQUISITE_COMPONENT SYSRES_CONST_CODE_REQUISITE_DESCRIPTION SYSRES_CONST_CODE_REQUISITE_EXCLUDE_COMPONENT SYSRES_CONST_CODE_REQUISITE_RECORD SYSRES_CONST_COMMENT_REQ_CODE SYSRES_CONST_COMMON_SETTINGS_REQUISITE_CODE SYSRES_CONST_COMP_CODE_GRD SYSRES_CONST_COMPONENT_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_COMPONENT_TYPE_ADMIN_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DEVELOPER_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DOCS SYSRES_CONST_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_COMPONENT_TYPE_EDOCS SYSRES_CONST_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_COMPONENT_TYPE_OTHER SYSRES_CONST_COMPONENT_TYPE_REFERENCE_TYPES SYSRES_CONST_COMPONENT_TYPE_REFERENCES SYSRES_CONST_COMPONENT_TYPE_REPORTS SYSRES_CONST_COMPONENT_TYPE_SCRIPTS SYSRES_CONST_COMPONENT_TYPE_URL SYSRES_CONST_COMPONENTS_REMOTE_SERVERS_VIEW_CODE SYSRES_CONST_CONDITION_BLOCK_DESCRIPTION SYSRES_CONST_CONST_FIRM_STATUS_COMMON SYSRES_CONST_CONST_FIRM_STATUS_INDIVIDUAL SYSRES_CONST_CONST_NEGATIVE_VALUE SYSRES_CONST_CONST_POSITIVE_VALUE SYSRES_CONST_CONST_SERVER_STATUS_DONT_REPLICATE SYSRES_CONST_CONST_SERVER_STATUS_REPLICATE SYSRES_CONST_CONTENTS_REQUISITE_CODE SYSRES_CONST_DATA_TYPE_BOOLEAN SYSRES_CONST_DATA_TYPE_DATE SYSRES_CONST_DATA_TYPE_FLOAT SYSRES_CONST_DATA_TYPE_INTEGER SYSRES_CONST_DATA_TYPE_PICK SYSRES_CONST_DATA_TYPE_REFERENCE SYSRES_CONST_DATA_TYPE_STRING SYSRES_CONST_DATA_TYPE_TEXT SYSRES_CONST_DATA_TYPE_VARIANT SYSRES_CONST_DATE_CLOSE_REQ_CODE SYSRES_CONST_DATE_FORMAT_DATE_ONLY_CHAR SYSRES_CONST_DATE_OPEN_REQ_CODE SYSRES_CONST_DATE_REQUISITE SYSRES_CONST_DATE_REQUISITE_CODE SYSRES_CONST_DATE_REQUISITE_NAME SYSRES_CONST_DATE_REQUISITE_TYPE SYSRES_CONST_DATE_TYPE_CHAR SYSRES_CONST_DATETIME_FORMAT_VALUE SYSRES_CONST_DEA_ACCESS_RIGHTS_ACTION_CODE SYSRES_CONST_DESCRIPTION_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_DET1_PART SYSRES_CONST_DET2_PART SYSRES_CONST_DET3_PART SYSRES_CONST_DET4_PART SYSRES_CONST_DET5_PART SYSRES_CONST_DET6_PART SYSRES_CONST_DETAIL_DATASET_KEY_REQUISITE_CODE SYSRES_CONST_DETAIL_PICK_REQUISITE_CODE SYSRES_CONST_DETAIL_REQ_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_NAME SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_NAME SYSRES_CONST_DOCUMENT_STORAGES_CODE SYSRES_CONST_DOCUMENT_TEMPLATES_TYPE_NAME SYSRES_CONST_DOUBLE_REQUISITE_CODE SYSRES_CONST_EDITOR_CLOSE_FILE_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_CLOSE_PROCESS_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_TYPE_REQUISITE_CODE SYSRES_CONST_EDITORS_APPLICATION_NAME_REQUISITE_CODE SYSRES_CONST_EDITORS_CREATE_SEVERAL_PROCESSES_REQUISITE_CODE SYSRES_CONST_EDITORS_EXTENSION_REQUISITE_CODE SYSRES_CONST_EDITORS_OBSERVER_BY_PROCESS_TYPE SYSRES_CONST_EDITORS_REFERENCE_CODE SYSRES_CONST_EDITORS_REPLACE_SPEC_CHARS_REQUISITE_CODE SYSRES_CONST_EDITORS_USE_PLUGINS_REQUISITE_CODE SYSRES_CONST_EDITORS_VIEW_DOCUMENT_OPENED_TO_EDIT_CODE SYSRES_CONST_EDOC_CARD_TYPE_REQUISITE_CODE SYSRES_CONST_EDOC_CARD_TYPES_LINK_REQUISITE_CODE SYSRES_CONST_EDOC_CERTIFICATE_AND_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_CERTIFICATE_ENCODE_CODE SYSRES_CONST_EDOC_DATE_REQUISITE_CODE SYSRES_CONST_EDOC_KIND_REFERENCE_CODE SYSRES_CONST_EDOC_KINDS_BY_TEMPLATE_ACTION_CODE SYSRES_CONST_EDOC_MANAGE_ACCESS_CODE SYSRES_CONST_EDOC_NONE_ENCODE_CODE SYSRES_CONST_EDOC_NUMBER_REQUISITE_CODE SYSRES_CONST_EDOC_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_READONLY_ACCESS_CODE SYSRES_CONST_EDOC_SHELL_LIFE_TYPE_VIEW_VALUE SYSRES_CONST_EDOC_SIZE_RESTRICTION_PRIORITY_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_CHECK_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_COMPUTER_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_DATABASE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_EDIT_IN_STORAGE_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_LOCAL_PATH_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_SHARED_SOURCE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_EDOC_TYPES_REFERENCE_CODE SYSRES_CONST_EDOC_VERSION_ACTIVE_STAGE_CODE SYSRES_CONST_EDOC_VERSION_DESIGN_STAGE_CODE SYSRES_CONST_EDOC_VERSION_OBSOLETE_STAGE_CODE SYSRES_CONST_EDOC_WRITE_ACCES_CODE SYSRES_CONST_EDOCUMENT_CARD_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_END_DATE_REQUISITE_CODE SYSRES_CONST_ENUMERATION_TYPE_REQUISITE_CODE SYSRES_CONST_EXECUTE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_EXECUTIVE_FILE_STORAGE_TYPE SYSRES_CONST_EXIST_CONST SYSRES_CONST_EXIST_VALUE SYSRES_CONST_EXPORT_LOCK_TYPE_ASK SYSRES_CONST_EXPORT_LOCK_TYPE_WITH_LOCK SYSRES_CONST_EXPORT_LOCK_TYPE_WITHOUT_LOCK SYSRES_CONST_EXPORT_VERSION_TYPE_ASK SYSRES_CONST_EXPORT_VERSION_TYPE_LAST SYSRES_CONST_EXPORT_VERSION_TYPE_LAST_ACTIVE SYSRES_CONST_EXTENSION_REQUISITE_CODE SYSRES_CONST_FILTER_NAME_REQUISITE_CODE SYSRES_CONST_FILTER_REQUISITE_CODE SYSRES_CONST_FILTER_TYPE_COMMON_CODE SYSRES_CONST_FILTER_TYPE_COMMON_NAME SYSRES_CONST_FILTER_TYPE_USER_CODE SYSRES_CONST_FILTER_TYPE_USER_NAME SYSRES_CONST_FILTER_VALUE_REQUISITE_NAME SYSRES_CONST_FLOAT_NUMBER_FORMAT_CHAR SYSRES_CONST_FLOAT_REQUISITE_TYPE SYSRES_CONST_FOLDER_AUTHOR_VALUE SYSRES_CONST_FOLDER_KIND_ANY_OBJECTS SYSRES_CONST_FOLDER_KIND_COMPONENTS SYSRES_CONST_FOLDER_KIND_EDOCS SYSRES_CONST_FOLDER_KIND_JOBS SYSRES_CONST_FOLDER_KIND_TASKS SYSRES_CONST_FOLDER_TYPE_COMMON SYSRES_CONST_FOLDER_TYPE_COMPONENT SYSRES_CONST_FOLDER_TYPE_FAVORITES SYSRES_CONST_FOLDER_TYPE_INBOX SYSRES_CONST_FOLDER_TYPE_OUTBOX SYSRES_CONST_FOLDER_TYPE_QUICK_LAUNCH SYSRES_CONST_FOLDER_TYPE_SEARCH SYSRES_CONST_FOLDER_TYPE_SHORTCUTS SYSRES_CONST_FOLDER_TYPE_USER SYSRES_CONST_FROM_DICTIONARY_ENUM_METHOD_FLAG SYSRES_CONST_FULL_SUBSTITUTE_TYPE SYSRES_CONST_FULL_SUBSTITUTE_TYPE_CODE SYSRES_CONST_FUNCTION_CANCEL_RESULT SYSRES_CONST_FUNCTION_CATEGORY_SYSTEM SYSRES_CONST_FUNCTION_CATEGORY_USER SYSRES_CONST_FUNCTION_FAILURE_RESULT SYSRES_CONST_FUNCTION_SAVE_RESULT SYSRES_CONST_GENERATED_REQUISITE SYSRES_CONST_GREEN_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_GROUP_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_NAME SYSRES_CONST_GROUP_CATEGORY_SERVICE_CODE SYSRES_CONST_GROUP_CATEGORY_SERVICE_NAME SYSRES_CONST_GROUP_COMMON_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_FULL_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_CODES_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_SERVICE_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_USER_REQUISITE_CODE SYSRES_CONST_GROUPS_REFERENCE_CODE SYSRES_CONST_GROUPS_REQUISITE_CODE SYSRES_CONST_HIDDEN_MODE_NAME SYSRES_CONST_HIGH_LVL_REQUISITE_CODE SYSRES_CONST_HISTORY_ACTION_CREATE_CODE SYSRES_CONST_HISTORY_ACTION_DELETE_CODE SYSRES_CONST_HISTORY_ACTION_EDIT_CODE SYSRES_CONST_HOUR_CHAR SYSRES_CONST_ID_REQUISITE_CODE SYSRES_CONST_IDSPS_REQUISITE_CODE SYSRES_CONST_IMAGE_MODE_COLOR SYSRES_CONST_IMAGE_MODE_GREYSCALE SYSRES_CONST_IMAGE_MODE_MONOCHROME SYSRES_CONST_IMPORTANCE_HIGH SYSRES_CONST_IMPORTANCE_LOW SYSRES_CONST_IMPORTANCE_NORMAL SYSRES_CONST_IN_DESIGN_VERSION_STATE_PICK_VALUE SYSRES_CONST_INCOMING_WORK_RULE_TYPE_CODE SYSRES_CONST_INT_REQUISITE SYSRES_CONST_INT_REQUISITE_TYPE SYSRES_CONST_INTEGER_NUMBER_FORMAT_CHAR SYSRES_CONST_INTEGER_TYPE_CHAR SYSRES_CONST_IS_GENERATED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_PUBLIC_ROLE_REQUISITE_CODE SYSRES_CONST_IS_REMOTE_USER_NEGATIVE_VALUE SYSRES_CONST_IS_REMOTE_USER_POSITIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_STORED_VALUE SYSRES_CONST_ITALIC_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_JOB_BLOCK_DESCRIPTION SYSRES_CONST_JOB_KIND_CONTROL_JOB SYSRES_CONST_JOB_KIND_JOB SYSRES_CONST_JOB_KIND_NOTICE SYSRES_CONST_JOB_STATE_ABORTED SYSRES_CONST_JOB_STATE_COMPLETE SYSRES_CONST_JOB_STATE_WORKING SYSRES_CONST_KIND_REQUISITE_CODE SYSRES_CONST_KIND_REQUISITE_NAME SYSRES_CONST_KINDS_CREATE_SHADOW_COPIES_REQUISITE_CODE SYSRES_CONST_KINDS_DEFAULT_EDOC_LIFE_STAGE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALL_TEPLATES_ALLOWED_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_LIFE_CYCLE_STAGE_CHANGING_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_MULTIPLE_ACTIVE_VERSIONS_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_SHARE_ACCES_RIGHTS_BY_DEFAULT_CODE SYSRES_CONST_KINDS_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_TYPE_REQUISITE_CODE SYSRES_CONST_KINDS_SIGNERS_REQUISITES_CODE SYSRES_CONST_KOD_INPUT_TYPE SYSRES_CONST_LAST_UPDATE_DATE_REQUISITE_CODE SYSRES_CONST_LIFE_CYCLE_START_STAGE_REQUISITE_CODE SYSRES_CONST_LILAC_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_LINK_OBJECT_KIND_COMPONENT SYSRES_CONST_LINK_OBJECT_KIND_DOCUMENT SYSRES_CONST_LINK_OBJECT_KIND_EDOC SYSRES_CONST_LINK_OBJECT_KIND_FOLDER SYSRES_CONST_LINK_OBJECT_KIND_JOB SYSRES_CONST_LINK_OBJECT_KIND_REFERENCE SYSRES_CONST_LINK_OBJECT_KIND_TASK SYSRES_CONST_LINK_REF_TYPE_REQUISITE_CODE SYSRES_CONST_LIST_REFERENCE_MODE_NAME SYSRES_CONST_LOCALIZATION_DICTIONARY_MAIN_VIEW_CODE SYSRES_CONST_MAIN_VIEW_CODE SYSRES_CONST_MANUAL_ENUM_METHOD_FLAG SYSRES_CONST_MASTER_COMP_TYPE_REQUISITE_CODE SYSRES_CONST_MASTER_TABLE_REC_ID_REQUISITE_CODE SYSRES_CONST_MAXIMIZED_MODE_NAME SYSRES_CONST_ME_VALUE SYSRES_CONST_MESSAGE_ATTENTION_CAPTION SYSRES_CONST_MESSAGE_CONFIRMATION_CAPTION SYSRES_CONST_MESSAGE_ERROR_CAPTION SYSRES_CONST_MESSAGE_INFORMATION_CAPTION SYSRES_CONST_MINIMIZED_MODE_NAME SYSRES_CONST_MINUTE_CHAR SYSRES_CONST_MODULE_REQUISITE_CODE SYSRES_CONST_MONITORING_BLOCK_DESCRIPTION SYSRES_CONST_MONTH_FORMAT_VALUE SYSRES_CONST_NAME_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_NAME_REQUISITE_CODE SYSRES_CONST_NAME_SINGULAR_REQUISITE_CODE SYSRES_CONST_NAMEAN_INPUT_TYPE SYSRES_CONST_NEGATIVE_PICK_VALUE SYSRES_CONST_NEGATIVE_VALUE SYSRES_CONST_NO SYSRES_CONST_NO_PICK_VALUE SYSRES_CONST_NO_SIGNATURE_REQUISITE_CODE SYSRES_CONST_NO_VALUE SYSRES_CONST_NONE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_NORMAL_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NORMAL_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_NORMAL_MODE_NAME SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_NOTE_REQUISITE_CODE SYSRES_CONST_NOTICE_BLOCK_DESCRIPTION SYSRES_CONST_NUM_REQUISITE SYSRES_CONST_NUM_STR_REQUISITE_CODE SYSRES_CONST_NUMERATION_AUTO_NOT_STRONG SYSRES_CONST_NUMERATION_AUTO_STRONG SYSRES_CONST_NUMERATION_FROM_DICTONARY SYSRES_CONST_NUMERATION_MANUAL SYSRES_CONST_NUMERIC_TYPE_CHAR SYSRES_CONST_NUMREQ_REQUISITE_CODE SYSRES_CONST_OBSOLETE_VERSION_STATE_PICK_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_OPTIONAL_FORM_COMP_REQCODE_PREFIX SYSRES_CONST_ORANGE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_ORIGINALREF_REQUISITE_CODE SYSRES_CONST_OURFIRM_REF_CODE SYSRES_CONST_OURFIRM_REQUISITE_CODE SYSRES_CONST_OURFIRM_VAR SYSRES_CONST_OUTGOING_WORK_RULE_TYPE_CODE SYSRES_CONST_PICK_NEGATIVE_RESULT SYSRES_CONST_PICK_POSITIVE_RESULT SYSRES_CONST_PICK_REQUISITE SYSRES_CONST_PICK_REQUISITE_TYPE SYSRES_CONST_PICK_TYPE_CHAR SYSRES_CONST_PLAN_STATUS_REQUISITE_CODE SYSRES_CONST_PLATFORM_VERSION_COMMENT SYSRES_CONST_PLUGINS_SETTINGS_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_POSITIVE_PICK_VALUE SYSRES_CONST_POWER_TO_CREATE_ACTION_CODE SYSRES_CONST_POWER_TO_SIGN_ACTION_CODE SYSRES_CONST_PRIORITY_REQUISITE_CODE SYSRES_CONST_QUALIFIED_TASK_TYPE SYSRES_CONST_QUALIFIED_TASK_TYPE_CODE SYSRES_CONST_RECSTAT_REQUISITE_CODE SYSRES_CONST_RED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_REF_ID_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_REF_REQUISITE SYSRES_CONST_REF_REQUISITE_TYPE SYSRES_CONST_REF_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_REFERENCE_RECORD_HISTORY_CREATE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_DELETE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_MODIFY_ACTION_CODE SYSRES_CONST_REFERENCE_TYPE_CHAR SYSRES_CONST_REFERENCE_TYPE_REQUISITE_NAME SYSRES_CONST_REFERENCES_ADD_PARAMS_REQUISITE_CODE SYSRES_CONST_REFERENCES_DISPLAY_REQUISITE_REQUISITE_CODE SYSRES_CONST_REMOTE_SERVER_STATUS_WORKING SYSRES_CONST_REMOTE_SERVER_TYPE_MAIN SYSRES_CONST_REMOTE_SERVER_TYPE_SECONDARY SYSRES_CONST_REMOTE_USER_FLAG_VALUE_CODE SYSRES_CONST_REPORT_APP_EDITOR_INTERNAL SYSRES_CONST_REPORT_BASE_REPORT_ID_REQUISITE_CODE SYSRES_CONST_REPORT_BASE_REPORT_REQUISITE_CODE SYSRES_CONST_REPORT_SCRIPT_REQUISITE_CODE SYSRES_CONST_REPORT_TEMPLATE_REQUISITE_CODE SYSRES_CONST_REPORT_VIEWER_CODE_REQUISITE_CODE SYSRES_CONST_REQ_ALLOW_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_RECORD_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_SERVER_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_MODE_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_EDIT_CODE SYSRES_CONST_REQ_MODE_HIDDEN_CODE SYSRES_CONST_REQ_MODE_NOT_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_VIEW_CODE SYSRES_CONST_REQ_NUMBER_REQUISITE_CODE SYSRES_CONST_REQ_SECTION_VALUE SYSRES_CONST_REQ_TYPE_VALUE SYSRES_CONST_REQUISITE_FORMAT_BY_UNIT SYSRES_CONST_REQUISITE_FORMAT_DATE_FULL SYSRES_CONST_REQUISITE_FORMAT_DATE_TIME SYSRES_CONST_REQUISITE_FORMAT_LEFT SYSRES_CONST_REQUISITE_FORMAT_RIGHT SYSRES_CONST_REQUISITE_FORMAT_WITHOUT_UNIT SYSRES_CONST_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_REQUISITE_SECTION_ACTIONS SYSRES_CONST_REQUISITE_SECTION_BUTTON SYSRES_CONST_REQUISITE_SECTION_BUTTONS SYSRES_CONST_REQUISITE_SECTION_CARD SYSRES_CONST_REQUISITE_SECTION_TABLE SYSRES_CONST_REQUISITE_SECTION_TABLE10 SYSRES_CONST_REQUISITE_SECTION_TABLE11 SYSRES_CONST_REQUISITE_SECTION_TABLE12 SYSRES_CONST_REQUISITE_SECTION_TABLE13 SYSRES_CONST_REQUISITE_SECTION_TABLE14 SYSRES_CONST_REQUISITE_SECTION_TABLE15 SYSRES_CONST_REQUISITE_SECTION_TABLE16 SYSRES_CONST_REQUISITE_SECTION_TABLE17 SYSRES_CONST_REQUISITE_SECTION_TABLE18 SYSRES_CONST_REQUISITE_SECTION_TABLE19 SYSRES_CONST_REQUISITE_SECTION_TABLE2 SYSRES_CONST_REQUISITE_SECTION_TABLE20 SYSRES_CONST_REQUISITE_SECTION_TABLE21 SYSRES_CONST_REQUISITE_SECTION_TABLE22 SYSRES_CONST_REQUISITE_SECTION_TABLE23 SYSRES_CONST_REQUISITE_SECTION_TABLE24 SYSRES_CONST_REQUISITE_SECTION_TABLE3 SYSRES_CONST_REQUISITE_SECTION_TABLE4 SYSRES_CONST_REQUISITE_SECTION_TABLE5 SYSRES_CONST_REQUISITE_SECTION_TABLE6 SYSRES_CONST_REQUISITE_SECTION_TABLE7 SYSRES_CONST_REQUISITE_SECTION_TABLE8 SYSRES_CONST_REQUISITE_SECTION_TABLE9 SYSRES_CONST_REQUISITES_PSEUDOREFERENCE_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_RIGHT_ALIGNMENT_CODE SYSRES_CONST_ROLES_REFERENCE_CODE SYSRES_CONST_ROUTE_STEP_AFTER_RUS SYSRES_CONST_ROUTE_STEP_AND_CONDITION_RUS SYSRES_CONST_ROUTE_STEP_OR_CONDITION_RUS SYSRES_CONST_ROUTE_TYPE_COMPLEX SYSRES_CONST_ROUTE_TYPE_PARALLEL SYSRES_CONST_ROUTE_TYPE_SERIAL SYSRES_CONST_SBDATASETDESC_NEGATIVE_VALUE SYSRES_CONST_SBDATASETDESC_POSITIVE_VALUE SYSRES_CONST_SBVIEWSDESC_POSITIVE_VALUE SYSRES_CONST_SCRIPT_BLOCK_DESCRIPTION SYSRES_CONST_SEARCH_BY_TEXT_REQUISITE_CODE SYSRES_CONST_SEARCHES_COMPONENT_CONTENT SYSRES_CONST_SEARCHES_CRITERIA_ACTION_NAME SYSRES_CONST_SEARCHES_EDOC_CONTENT SYSRES_CONST_SEARCHES_FOLDER_CONTENT SYSRES_CONST_SEARCHES_JOB_CONTENT SYSRES_CONST_SEARCHES_REFERENCE_CODE SYSRES_CONST_SEARCHES_TASK_CONTENT SYSRES_CONST_SECOND_CHAR SYSRES_CONST_SECTION_REQUISITE_ACTIONS_VALUE SYSRES_CONST_SECTION_REQUISITE_CARD_VALUE SYSRES_CONST_SECTION_REQUISITE_CODE SYSRES_CONST_SECTION_REQUISITE_DETAIL_1_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_2_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_3_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_4_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_5_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_6_VALUE SYSRES_CONST_SELECT_REFERENCE_MODE_NAME SYSRES_CONST_SELECT_TYPE_SELECTABLE SYSRES_CONST_SELECT_TYPE_SELECTABLE_ONLY_CHILD SYSRES_CONST_SELECT_TYPE_SELECTABLE_WITH_CHILD SYSRES_CONST_SELECT_TYPE_UNSLECTABLE SYSRES_CONST_SERVER_TYPE_MAIN SYSRES_CONST_SERVICE_USER_CATEGORY_FIELD_VALUE SYSRES_CONST_SETTINGS_USER_REQUISITE_CODE SYSRES_CONST_SIGNATURE_AND_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SIGNATURE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SINGULAR_TITLE_REQUISITE_CODE SYSRES_CONST_SQL_SERVER_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_SQL_SERVER_ENCODE_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_STANDART_ROUTES_GROUPS_REFERENCE_CODE SYSRES_CONST_STATE_REQ_NAME SYSRES_CONST_STATE_REQUISITE_ACTIVE_VALUE SYSRES_CONST_STATE_REQUISITE_CLOSED_VALUE SYSRES_CONST_STATE_REQUISITE_CODE SYSRES_CONST_STATIC_ROLE_TYPE_CODE SYSRES_CONST_STATUS_PLAN_DEFAULT_VALUE SYSRES_CONST_STATUS_VALUE_AUTOCLEANING SYSRES_CONST_STATUS_VALUE_BLUE_SQUARE SYSRES_CONST_STATUS_VALUE_COMPLETE SYSRES_CONST_STATUS_VALUE_GREEN_SQUARE SYSRES_CONST_STATUS_VALUE_ORANGE_SQUARE SYSRES_CONST_STATUS_VALUE_PURPLE_SQUARE SYSRES_CONST_STATUS_VALUE_RED_SQUARE SYSRES_CONST_STATUS_VALUE_SUSPEND SYSRES_CONST_STATUS_VALUE_YELLOW_SQUARE SYSRES_CONST_STDROUTE_SHOW_TO_USERS_REQUISITE_CODE SYSRES_CONST_STORAGE_TYPE_FILE SYSRES_CONST_STORAGE_TYPE_SQL_SERVER SYSRES_CONST_STR_REQUISITE SYSRES_CONST_STRIKEOUT_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_STRING_FORMAT_LEFT_ALIGN_CHAR SYSRES_CONST_STRING_FORMAT_RIGHT_ALIGN_CHAR SYSRES_CONST_STRING_REQUISITE_CODE SYSRES_CONST_STRING_REQUISITE_TYPE SYSRES_CONST_STRING_TYPE_CHAR SYSRES_CONST_SUBSTITUTES_PSEUDOREFERENCE_CODE SYSRES_CONST_SUBTASK_BLOCK_DESCRIPTION SYSRES_CONST_SYSTEM_SETTING_CURRENT_USER_PARAM_VALUE SYSRES_CONST_SYSTEM_SETTING_EMPTY_VALUE_PARAM_VALUE SYSRES_CONST_SYSTEM_VERSION_COMMENT SYSRES_CONST_TASK_ACCESS_TYPE_ALL SYSRES_CONST_TASK_ACCESS_TYPE_ALL_MEMBERS SYSRES_CONST_TASK_ACCESS_TYPE_MANUAL SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION_AND_PASSWORD SYSRES_CONST_TASK_ENCODE_TYPE_NONE SYSRES_CONST_TASK_ENCODE_TYPE_PASSWORD SYSRES_CONST_TASK_ROUTE_ALL_CONDITION SYSRES_CONST_TASK_ROUTE_AND_CONDITION SYSRES_CONST_TASK_ROUTE_OR_CONDITION SYSRES_CONST_TASK_STATE_ABORTED SYSRES_CONST_TASK_STATE_COMPLETE SYSRES_CONST_TASK_STATE_CONTINUED SYSRES_CONST_TASK_STATE_CONTROL SYSRES_CONST_TASK_STATE_INIT SYSRES_CONST_TASK_STATE_WORKING SYSRES_CONST_TASK_TITLE SYSRES_CONST_TASK_TYPES_GROUPS_REFERENCE_CODE SYSRES_CONST_TASK_TYPES_REFERENCE_CODE SYSRES_CONST_TEMPLATES_REFERENCE_CODE SYSRES_CONST_TEST_DATE_REQUISITE_NAME SYSRES_CONST_TEST_DEV_DATABASE_NAME SYSRES_CONST_TEST_DEV_SYSTEM_CODE SYSRES_CONST_TEST_EDMS_DATABASE_NAME SYSRES_CONST_TEST_EDMS_MAIN_CODE SYSRES_CONST_TEST_EDMS_MAIN_DB_NAME SYSRES_CONST_TEST_EDMS_SECOND_CODE SYSRES_CONST_TEST_EDMS_SECOND_DB_NAME SYSRES_CONST_TEST_EDMS_SYSTEM_CODE SYSRES_CONST_TEST_NUMERIC_REQUISITE_NAME SYSRES_CONST_TEXT_REQUISITE SYSRES_CONST_TEXT_REQUISITE_CODE SYSRES_CONST_TEXT_REQUISITE_TYPE SYSRES_CONST_TEXT_TYPE_CHAR SYSRES_CONST_TYPE_CODE_REQUISITE_CODE SYSRES_CONST_TYPE_REQUISITE_CODE SYSRES_CONST_UNDEFINED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_UNITS_SECTION_ID_REQUISITE_CODE SYSRES_CONST_UNITS_SECTION_REQUISITE_CODE SYSRES_CONST_UNOPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_NAME SYSRES_CONST_USE_ACCESS_TYPE_CODE SYSRES_CONST_USE_ACCESS_TYPE_NAME SYSRES_CONST_USER_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_USER_ADDITIONAL_INFORMATION_REQUISITE_CODE SYSRES_CONST_USER_AND_GROUP_ID_FROM_PSEUDOREFERENCE_REQUISITE_CODE SYSRES_CONST_USER_CATEGORY_NORMAL SYSRES_CONST_USER_CERTIFICATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_STATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_SUBJECT_NAME_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_THUMBPRINT_REQUISITE_CODE SYSRES_CONST_USER_COMMON_CATEGORY SYSRES_CONST_USER_COMMON_CATEGORY_CODE SYSRES_CONST_USER_FULL_NAME_REQUISITE_CODE SYSRES_CONST_USER_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_USER_LOGIN_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_SYSTEM_REQUISITE_CODE SYSRES_CONST_USER_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_USER_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_USER_SERVICE_CATEGORY SYSRES_CONST_USER_SERVICE_CATEGORY_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_NAME SYSRES_CONST_USER_STATUS_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_DEVELOPER_NAME SYSRES_CONST_USER_STATUS_DISABLED_CODE SYSRES_CONST_USER_STATUS_DISABLED_NAME SYSRES_CONST_USER_STATUS_SYSTEM_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_USER_CODE SYSRES_CONST_USER_STATUS_USER_NAME SYSRES_CONST_USER_STATUS_USER_NAME_DEPRECATED SYSRES_CONST_USER_TYPE_FIELD_VALUE_USER SYSRES_CONST_USER_TYPE_REQUISITE_CODE SYSRES_CONST_USERS_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USERS_IS_MAIN_SERVER_REQUISITE_CODE SYSRES_CONST_USERS_REFERENCE_CODE SYSRES_CONST_USERS_REGISTRATION_CERTIFICATES_ACTION_NAME SYSRES_CONST_USERS_REQUISITE_CODE SYSRES_CONST_USERS_SYSTEM_REQUISITE_CODE SYSRES_CONST_USERS_USER_ACCESS_RIGHTS_TYPR_REQUISITE_CODE SYSRES_CONST_USERS_USER_AUTHENTICATION_REQUISITE_CODE SYSRES_CONST_USERS_USER_COMPONENT_REQUISITE_CODE SYSRES_CONST_USERS_USER_GROUP_REQUISITE_CODE SYSRES_CONST_USERS_VIEW_CERTIFICATES_ACTION_NAME SYSRES_CONST_VIEW_DEFAULT_CODE SYSRES_CONST_VIEW_DEFAULT_NAME SYSRES_CONST_VIEWER_REQUISITE_CODE SYSRES_CONST_WAITING_BLOCK_DESCRIPTION SYSRES_CONST_WIZARD_FORM_LABEL_TEST_STRING  SYSRES_CONST_WIZARD_QUERY_PARAM_HEIGHT_ETALON_STRING SYSRES_CONST_WIZARD_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_WORK_RULES_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_WORK_TIME_CALENDAR_REFERENCE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORK_WORKFLOW_SOFT_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORKFLOW_ROUTE_TYPR_HARD SYSRES_CONST_WORKFLOW_ROUTE_TYPR_SOFT SYSRES_CONST_XML_ENCODING SYSRES_CONST_XREC_STAT_REQUISITE_CODE SYSRES_CONST_XRECID_FIELD_NAME SYSRES_CONST_YES SYSRES_CONST_YES_NO_2_REQUISITE_CODE SYSRES_CONST_YES_NO_REQUISITE_CODE SYSRES_CONST_YES_NO_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_YES_PICK_VALUE SYSRES_CONST_YES_VALUE " + "CR FALSE nil NO_VALUE NULL TAB TRUE YES_VALUE " + "ADMINISTRATORS_GROUP_NAME CUSTOMIZERS_GROUP_NAME DEVELOPERS_GROUP_NAME SERVICE_USERS_GROUP_NAME " + "DECISION_BLOCK_FIRST_OPERAND_PROPERTY DECISION_BLOCK_NAME_PROPERTY DECISION_BLOCK_OPERATION_PROPERTY DECISION_BLOCK_RESULT_TYPE_PROPERTY DECISION_BLOCK_SECOND_OPERAND_PROPERTY " + "ANY_FILE_EXTENTION COMPRESSED_DOCUMENT_EXTENSION EXTENDED_DOCUMENT_EXTENSION SHORT_COMPRESSED_DOCUMENT_EXTENSION SHORT_EXTENDED_DOCUMENT_EXTENSION " + "JOB_BLOCK_ABORT_DEADLINE_PROPERTY JOB_BLOCK_AFTER_FINISH_EVENT JOB_BLOCK_AFTER_QUERY_PARAMETERS_EVENT JOB_BLOCK_ATTACHMENT_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY JOB_BLOCK_BEFORE_QUERY_PARAMETERS_EVENT JOB_BLOCK_BEFORE_START_EVENT JOB_BLOCK_CREATED_JOBS_PROPERTY JOB_BLOCK_DEADLINE_PROPERTY JOB_BLOCK_EXECUTION_RESULTS_PROPERTY JOB_BLOCK_IS_PARALLEL_PROPERTY JOB_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY JOB_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY JOB_BLOCK_JOB_TEXT_PROPERTY JOB_BLOCK_NAME_PROPERTY JOB_BLOCK_NEED_SIGN_ON_PERFORM_PROPERTY JOB_BLOCK_PERFORMER_PROPERTY JOB_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY JOB_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY JOB_BLOCK_SUBJECT_PROPERTY " + "ENGLISH_LANGUAGE_CODE RUSSIAN_LANGUAGE_CODE " + "smHidden smMaximized smMinimized smNormal wmNo wmYes " + "COMPONENT_TOKEN_LINK_KIND DOCUMENT_LINK_KIND EDOCUMENT_LINK_KIND FOLDER_LINK_KIND JOB_LINK_KIND REFERENCE_LINK_KIND TASK_LINK_KIND " + "COMPONENT_TOKEN_LOCK_TYPE EDOCUMENT_VERSION_LOCK_TYPE " + "MONITOR_BLOCK_AFTER_FINISH_EVENT MONITOR_BLOCK_BEFORE_START_EVENT MONITOR_BLOCK_DEADLINE_PROPERTY MONITOR_BLOCK_INTERVAL_PROPERTY MONITOR_BLOCK_INTERVAL_TYPE_PROPERTY MONITOR_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY MONITOR_BLOCK_NAME_PROPERTY MONITOR_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY MONITOR_BLOCK_SEARCH_SCRIPT_PROPERTY " + "NOTICE_BLOCK_AFTER_FINISH_EVENT NOTICE_BLOCK_ATTACHMENT_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY NOTICE_BLOCK_BEFORE_START_EVENT NOTICE_BLOCK_CREATED_NOTICES_PROPERTY NOTICE_BLOCK_DEADLINE_PROPERTY NOTICE_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY NOTICE_BLOCK_NAME_PROPERTY NOTICE_BLOCK_NOTICE_TEXT_PROPERTY NOTICE_BLOCK_PERFORMER_PROPERTY NOTICE_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY NOTICE_BLOCK_SUBJECT_PROPERTY " + "dseAfterCancel dseAfterClose dseAfterDelete dseAfterDeleteOutOfTransaction dseAfterInsert dseAfterOpen dseAfterScroll dseAfterUpdate dseAfterUpdateOutOfTransaction dseBeforeCancel dseBeforeClose dseBeforeDelete dseBeforeDetailUpdate dseBeforeInsert dseBeforeOpen dseBeforeUpdate dseOnAnyRequisiteChange dseOnCloseRecord dseOnDeleteError dseOnOpenRecord dseOnPrepareUpdate dseOnUpdateError dseOnUpdateRatifiedRecord dseOnValidDelete dseOnValidUpdate reOnChange reOnChangeValues SELECTION_BEGIN_ROUTE_EVENT SELECTION_END_ROUTE_EVENT " + "CURRENT_PERIOD_IS_REQUIRED PREVIOUS_CARD_TYPE_NAME SHOW_RECORD_PROPERTIES_FORM " + "ACCESS_RIGHTS_SETTING_DIALOG_CODE ADMINISTRATOR_USER_CODE ANALYTIC_REPORT_TYPE asrtHideLocal asrtHideRemote CALCULATED_ROLE_TYPE_CODE COMPONENTS_REFERENCE_DEVELOPER_VIEW_CODE DCTS_TEST_PROTOCOLS_FOLDER_PATH E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED_BY_USER E_EDOC_VERSION_ALREDY_SIGNED E_EDOC_VERSION_ALREDY_SIGNED_BY_USER EDOC_TYPES_CODE_REQUISITE_FIELD_NAME EDOCUMENTS_ALIAS_NAME FILES_FOLDER_PATH FILTER_OPERANDS_DELIMITER FILTER_OPERATIONS_DELIMITER FORMCARD_NAME FORMLIST_NAME GET_EXTENDED_DOCUMENT_EXTENSION_CREATION_MODE GET_EXTENDED_DOCUMENT_EXTENSION_IMPORT_MODE INTEGRATED_REPORT_TYPE IS_BUILDER_APPLICATION_ROLE IS_BUILDER_APPLICATION_ROLE2 IS_BUILDER_USERS ISBSYSDEV LOG_FOLDER_PATH mbCancel mbNo mbNoToAll mbOK mbYes mbYesToAll MEMORY_DATASET_DESRIPTIONS_FILENAME mrNo mrNoToAll mrYes mrYesToAll MULTIPLE_SELECT_DIALOG_CODE NONOPERATING_RECORD_FLAG_FEMININE NONOPERATING_RECORD_FLAG_MASCULINE OPERATING_RECORD_FLAG_FEMININE OPERATING_RECORD_FLAG_MASCULINE PROFILING_SETTINGS_COMMON_SETTINGS_CODE_VALUE PROGRAM_INITIATED_LOOKUP_ACTION ratDelete ratEdit ratInsert REPORT_TYPE REQUIRED_PICK_VALUES_VARIABLE rmCard rmList SBRTE_PROGID_DEV SBRTE_PROGID_RELEASE STATIC_ROLE_TYPE_CODE SUPPRESS_EMPTY_TEMPLATE_CREATION SYSTEM_USER_CODE UPDATE_DIALOG_DATASET USED_IN_OBJECT_HINT_PARAM USER_INITIATED_LOOKUP_ACTION USER_NAME_FORMAT USER_SELECTION_RESTRICTIONS WORKFLOW_TEST_PROTOCOLS_FOLDER_PATH ELS_SUBTYPE_CONTROL_NAME ELS_FOLDER_KIND_CONTROL_NAME REPEAT_PROCESS_CURRENT_OBJECT_EXCEPTION_NAME " + "PRIVILEGE_COMPONENT_FULL_ACCESS PRIVILEGE_DEVELOPMENT_EXPORT PRIVILEGE_DEVELOPMENT_IMPORT PRIVILEGE_DOCUMENT_DELETE PRIVILEGE_ESD PRIVILEGE_FOLDER_DELETE PRIVILEGE_MANAGE_ACCESS_RIGHTS PRIVILEGE_MANAGE_REPLICATION PRIVILEGE_MANAGE_SESSION_SERVER PRIVILEGE_OBJECT_FULL_ACCESS PRIVILEGE_OBJECT_VIEW PRIVILEGE_RESERVE_LICENSE PRIVILEGE_SYSTEM_CUSTOMIZE PRIVILEGE_SYSTEM_DEVELOP PRIVILEGE_SYSTEM_INSTALL PRIVILEGE_TASK_DELETE PRIVILEGE_USER_PLUGIN_SETTINGS_CUSTOMIZE PRIVILEGES_PSEUDOREFERENCE_CODE " + "ACCESS_TYPES_PSEUDOREFERENCE_CODE ALL_AVAILABLE_COMPONENTS_PSEUDOREFERENCE_CODE ALL_AVAILABLE_PRIVILEGES_PSEUDOREFERENCE_CODE ALL_REPLICATE_COMPONENTS_PSEUDOREFERENCE_CODE AVAILABLE_DEVELOPERS_COMPONENTS_PSEUDOREFERENCE_CODE COMPONENTS_PSEUDOREFERENCE_CODE FILTRATER_SETTINGS_CONFLICTS_PSEUDOREFERENCE_CODE GROUPS_PSEUDOREFERENCE_CODE RECEIVE_PROTOCOL_PSEUDOREFERENCE_CODE REFERENCE_REQUISITE_PSEUDOREFERENCE_CODE REFERENCE_REQUISITES_PSEUDOREFERENCE_CODE REFTYPES_PSEUDOREFERENCE_CODE REPLICATION_SEANCES_DIARY_PSEUDOREFERENCE_CODE SEND_PROTOCOL_PSEUDOREFERENCE_CODE SUBSTITUTES_PSEUDOREFERENCE_CODE SYSTEM_SETTINGS_PSEUDOREFERENCE_CODE UNITS_PSEUDOREFERENCE_CODE USERS_PSEUDOREFERENCE_CODE VIEWERS_PSEUDOREFERENCE_CODE " + "CERTIFICATE_TYPE_ENCRYPT CERTIFICATE_TYPE_SIGN CERTIFICATE_TYPE_SIGN_AND_ENCRYPT " + "STORAGE_TYPE_FILE STORAGE_TYPE_NAS_CIFS STORAGE_TYPE_SAPERION STORAGE_TYPE_SQL_SERVER " + "COMPTYPE2_REQUISITE_DOCUMENTS_VALUE COMPTYPE2_REQUISITE_TASKS_VALUE COMPTYPE2_REQUISITE_FOLDERS_VALUE COMPTYPE2_REQUISITE_REFERENCES_VALUE " + "SYSREQ_CODE SYSREQ_COMPTYPE2 SYSREQ_CONST_AVAILABLE_FOR_WEB SYSREQ_CONST_COMMON_CODE SYSREQ_CONST_COMMON_VALUE SYSREQ_CONST_FIRM_CODE SYSREQ_CONST_FIRM_STATUS SYSREQ_CONST_FIRM_VALUE SYSREQ_CONST_SERVER_STATUS SYSREQ_CONTENTS SYSREQ_DATE_OPEN SYSREQ_DATE_CLOSE SYSREQ_DESCRIPTION SYSREQ_DESCRIPTION_LOCALIZE_ID SYSREQ_DOUBLE SYSREQ_EDOC_ACCESS_TYPE SYSREQ_EDOC_AUTHOR SYSREQ_EDOC_CREATED SYSREQ_EDOC_DELEGATE_RIGHTS_REQUISITE_CODE SYSREQ_EDOC_EDITOR SYSREQ_EDOC_ENCODE_TYPE SYSREQ_EDOC_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_EXPORT_DATE SYSREQ_EDOC_EXPORTER SYSREQ_EDOC_KIND SYSREQ_EDOC_LIFE_STAGE_NAME SYSREQ_EDOC_LOCKED_FOR_SERVER_CODE SYSREQ_EDOC_MODIFIED SYSREQ_EDOC_NAME SYSREQ_EDOC_NOTE SYSREQ_EDOC_QUALIFIED_ID SYSREQ_EDOC_SESSION_KEY SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_SIGNATURE_TYPE SYSREQ_EDOC_SIGNED SYSREQ_EDOC_STORAGE SYSREQ_EDOC_STORAGES_ARCHIVE_STORAGE SYSREQ_EDOC_STORAGES_CHECK_RIGHTS SYSREQ_EDOC_STORAGES_COMPUTER_NAME SYSREQ_EDOC_STORAGES_EDIT_IN_STORAGE SYSREQ_EDOC_STORAGES_EXECUTIVE_STORAGE SYSREQ_EDOC_STORAGES_FUNCTION SYSREQ_EDOC_STORAGES_INITIALIZED SYSREQ_EDOC_STORAGES_LOCAL_PATH SYSREQ_EDOC_STORAGES_SAPERION_DATABASE_NAME SYSREQ_EDOC_STORAGES_SEARCH_BY_TEXT SYSREQ_EDOC_STORAGES_SERVER_NAME SYSREQ_EDOC_STORAGES_SHARED_SOURCE_NAME SYSREQ_EDOC_STORAGES_TYPE SYSREQ_EDOC_TEXT_MODIFIED SYSREQ_EDOC_TYPE_ACT_CODE SYSREQ_EDOC_TYPE_ACT_DESCRIPTION SYSREQ_EDOC_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_EDOC_TYPE_ACT_SECTION SYSREQ_EDOC_TYPE_ADD_PARAMS SYSREQ_EDOC_TYPE_COMMENT SYSREQ_EDOC_TYPE_EVENT_TEXT SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_EDOC_TYPE_NAME_LOCALIZE_ID SYSREQ_EDOC_TYPE_NUMERATION_METHOD SYSREQ_EDOC_TYPE_PSEUDO_REQUISITE_CODE SYSREQ_EDOC_TYPE_REQ_CODE SYSREQ_EDOC_TYPE_REQ_DESCRIPTION SYSREQ_EDOC_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_REQ_IS_LEADING SYSREQ_EDOC_TYPE_REQ_IS_REQUIRED SYSREQ_EDOC_TYPE_REQ_NUMBER SYSREQ_EDOC_TYPE_REQ_ON_CHANGE SYSREQ_EDOC_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_EDOC_TYPE_REQ_ON_SELECT SYSREQ_EDOC_TYPE_REQ_ON_SELECT_KIND SYSREQ_EDOC_TYPE_REQ_SECTION SYSREQ_EDOC_TYPE_VIEW_CARD SYSREQ_EDOC_TYPE_VIEW_CODE SYSREQ_EDOC_TYPE_VIEW_COMMENT SYSREQ_EDOC_TYPE_VIEW_IS_MAIN SYSREQ_EDOC_TYPE_VIEW_NAME SYSREQ_EDOC_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_EDOC_VERSION_AUTHOR SYSREQ_EDOC_VERSION_CRC SYSREQ_EDOC_VERSION_DATA SYSREQ_EDOC_VERSION_EDITOR SYSREQ_EDOC_VERSION_EXPORT_DATE SYSREQ_EDOC_VERSION_EXPORTER SYSREQ_EDOC_VERSION_HIDDEN SYSREQ_EDOC_VERSION_LIFE_STAGE SYSREQ_EDOC_VERSION_MODIFIED SYSREQ_EDOC_VERSION_NOTE SYSREQ_EDOC_VERSION_SIGNATURE_TYPE SYSREQ_EDOC_VERSION_SIGNED SYSREQ_EDOC_VERSION_SIZE SYSREQ_EDOC_VERSION_SOURCE SYSREQ_EDOC_VERSION_TEXT_MODIFIED SYSREQ_EDOCKIND_DEFAULT_VERSION_STATE_CODE SYSREQ_FOLDER_KIND SYSREQ_FUNC_CATEGORY SYSREQ_FUNC_COMMENT SYSREQ_FUNC_GROUP SYSREQ_FUNC_GROUP_COMMENT SYSREQ_FUNC_GROUP_NUMBER SYSREQ_FUNC_HELP SYSREQ_FUNC_PARAM_DEF_VALUE SYSREQ_FUNC_PARAM_IDENT SYSREQ_FUNC_PARAM_NUMBER SYSREQ_FUNC_PARAM_TYPE SYSREQ_FUNC_TEXT SYSREQ_GROUP_CATEGORY SYSREQ_ID SYSREQ_LAST_UPDATE SYSREQ_LEADER_REFERENCE SYSREQ_LINE_NUMBER SYSREQ_MAIN_RECORD_ID SYSREQ_NAME SYSREQ_NAME_LOCALIZE_ID SYSREQ_NOTE SYSREQ_ORIGINAL_RECORD SYSREQ_OUR_FIRM SYSREQ_PROFILING_SETTINGS_BATCH_LOGING SYSREQ_PROFILING_SETTINGS_BATCH_SIZE SYSREQ_PROFILING_SETTINGS_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_SQL_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_START_LOGGED SYSREQ_RECORD_STATUS SYSREQ_REF_REQ_FIELD_NAME SYSREQ_REF_REQ_FORMAT SYSREQ_REF_REQ_GENERATED SYSREQ_REF_REQ_LENGTH SYSREQ_REF_REQ_PRECISION SYSREQ_REF_REQ_REFERENCE SYSREQ_REF_REQ_SECTION SYSREQ_REF_REQ_STORED SYSREQ_REF_REQ_TOKENS SYSREQ_REF_REQ_TYPE SYSREQ_REF_REQ_VIEW SYSREQ_REF_TYPE_ACT_CODE SYSREQ_REF_TYPE_ACT_DESCRIPTION SYSREQ_REF_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_ACT_ON_EXECUTE SYSREQ_REF_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_REF_TYPE_ACT_SECTION SYSREQ_REF_TYPE_ADD_PARAMS SYSREQ_REF_TYPE_COMMENT SYSREQ_REF_TYPE_COMMON_SETTINGS SYSREQ_REF_TYPE_DISPLAY_REQUISITE_NAME SYSREQ_REF_TYPE_EVENT_TEXT SYSREQ_REF_TYPE_MAIN_LEADING_REF SYSREQ_REF_TYPE_NAME_IN_SINGULAR SYSREQ_REF_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_REF_TYPE_NAME_LOCALIZE_ID SYSREQ_REF_TYPE_NUMERATION_METHOD SYSREQ_REF_TYPE_REQ_CODE SYSREQ_REF_TYPE_REQ_DESCRIPTION SYSREQ_REF_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_REQ_IS_CONTROL SYSREQ_REF_TYPE_REQ_IS_FILTER SYSREQ_REF_TYPE_REQ_IS_LEADING SYSREQ_REF_TYPE_REQ_IS_REQUIRED SYSREQ_REF_TYPE_REQ_NUMBER SYSREQ_REF_TYPE_REQ_ON_CHANGE SYSREQ_REF_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_REF_TYPE_REQ_ON_SELECT SYSREQ_REF_TYPE_REQ_ON_SELECT_KIND SYSREQ_REF_TYPE_REQ_SECTION SYSREQ_REF_TYPE_VIEW_CARD SYSREQ_REF_TYPE_VIEW_CODE SYSREQ_REF_TYPE_VIEW_COMMENT SYSREQ_REF_TYPE_VIEW_IS_MAIN SYSREQ_REF_TYPE_VIEW_NAME SYSREQ_REF_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_REFERENCE_TYPE_ID SYSREQ_STATE SYSREQ_STATЕ SYSREQ_SYSTEM_SETTINGS_VALUE SYSREQ_TYPE SYSREQ_UNIT SYSREQ_UNIT_ID SYSREQ_USER_GROUPS_GROUP_FULL_NAME SYSREQ_USER_GROUPS_GROUP_NAME SYSREQ_USER_GROUPS_GROUP_SERVER_NAME SYSREQ_USERS_ACCESS_RIGHTS SYSREQ_USERS_AUTHENTICATION SYSREQ_USERS_CATEGORY SYSREQ_USERS_COMPONENT SYSREQ_USERS_COMPONENT_USER_IS_PUBLIC SYSREQ_USERS_DOMAIN SYSREQ_USERS_FULL_USER_NAME SYSREQ_USERS_GROUP SYSREQ_USERS_IS_MAIN_SERVER SYSREQ_USERS_LOGIN SYSREQ_USERS_REFERENCE_USER_IS_PUBLIC SYSREQ_USERS_STATUS SYSREQ_USERS_USER_CERTIFICATE SYSREQ_USERS_USER_CERTIFICATE_INFO SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_NAME SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_VERSION SYSREQ_USERS_USER_CERTIFICATE_STATE SYSREQ_USERS_USER_CERTIFICATE_SUBJECT_NAME SYSREQ_USERS_USER_CERTIFICATE_THUMBPRINT SYSREQ_USERS_USER_DEFAULT_CERTIFICATE SYSREQ_USERS_USER_DESCRIPTION SYSREQ_USERS_USER_GLOBAL_NAME SYSREQ_USERS_USER_LOGIN SYSREQ_USERS_USER_MAIN_SERVER SYSREQ_USERS_USER_TYPE SYSREQ_WORK_RULES_FOLDER_ID " + "RESULT_VAR_NAME RESULT_VAR_NAME_ENG " + "AUTO_NUMERATION_RULE_ID CANT_CHANGE_ID_REQUISITE_RULE_ID CANT_CHANGE_OURFIRM_REQUISITE_RULE_ID CHECK_CHANGING_REFERENCE_RECORD_USE_RULE_ID CHECK_CODE_REQUISITE_RULE_ID CHECK_DELETING_REFERENCE_RECORD_USE_RULE_ID CHECK_FILTRATER_CHANGES_RULE_ID CHECK_RECORD_INTERVAL_RULE_ID CHECK_REFERENCE_INTERVAL_RULE_ID CHECK_REQUIRED_DATA_FULLNESS_RULE_ID CHECK_REQUIRED_REQUISITES_FULLNESS_RULE_ID MAKE_RECORD_UNRATIFIED_RULE_ID RESTORE_AUTO_NUMERATION_RULE_ID SET_FIRM_CONTEXT_FROM_RECORD_RULE_ID SET_FIRST_RECORD_IN_LIST_FORM_RULE_ID SET_IDSPS_VALUE_RULE_ID SET_NEXT_CODE_VALUE_RULE_ID SET_OURFIRM_BOUNDS_RULE_ID SET_OURFIRM_REQUISITE_RULE_ID " + "SCRIPT_BLOCK_AFTER_FINISH_EVENT SCRIPT_BLOCK_BEFORE_START_EVENT SCRIPT_BLOCK_EXECUTION_RESULTS_PROPERTY SCRIPT_BLOCK_NAME_PROPERTY SCRIPT_BLOCK_SCRIPT_PROPERTY " + "SUBTASK_BLOCK_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_AFTER_FINISH_EVENT SUBTASK_BLOCK_ASSIGN_PARAMS_EVENT SUBTASK_BLOCK_ATTACHMENTS_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY SUBTASK_BLOCK_BEFORE_START_EVENT SUBTASK_BLOCK_CREATED_TASK_PROPERTY SUBTASK_BLOCK_CREATION_EVENT SUBTASK_BLOCK_DEADLINE_PROPERTY SUBTASK_BLOCK_IMPORTANCE_PROPERTY SUBTASK_BLOCK_INITIATOR_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY SUBTASK_BLOCK_JOBS_TYPE_PROPERTY SUBTASK_BLOCK_NAME_PROPERTY SUBTASK_BLOCK_PARALLEL_ROUTE_PROPERTY SUBTASK_BLOCK_PERFORMERS_PROPERTY SUBTASK_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_REQUIRE_SIGN_PROPERTY SUBTASK_BLOCK_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_START_EVENT SUBTASK_BLOCK_STEP_CONTROL_PROPERTY SUBTASK_BLOCK_SUBJECT_PROPERTY SUBTASK_BLOCK_TASK_CONTROL_PROPERTY SUBTASK_BLOCK_TEXT_PROPERTY SUBTASK_BLOCK_UNLOCK_ATTACHMENTS_ON_STOP_PROPERTY SUBTASK_BLOCK_USE_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_WAIT_FOR_TASK_COMPLETE_PROPERTY " + "SYSCOMP_CONTROL_JOBS SYSCOMP_FOLDERS SYSCOMP_JOBS SYSCOMP_NOTICES SYSCOMP_TASKS " + "SYSDLG_CREATE_EDOCUMENT SYSDLG_CREATE_EDOCUMENT_VERSION SYSDLG_CURRENT_PERIOD SYSDLG_EDIT_FUNCTION_HELP SYSDLG_EDOCUMENT_KINDS_FOR_TEMPLATE SYSDLG_EXPORT_MULTIPLE_EDOCUMENTS SYSDLG_EXPORT_SINGLE_EDOCUMENT SYSDLG_IMPORT_EDOCUMENT SYSDLG_MULTIPLE_SELECT SYSDLG_SETUP_ACCESS_RIGHTS SYSDLG_SETUP_DEFAULT_RIGHTS SYSDLG_SETUP_FILTER_CONDITION SYSDLG_SETUP_SIGN_RIGHTS SYSDLG_SETUP_TASK_OBSERVERS SYSDLG_SETUP_TASK_ROUTE SYSDLG_SETUP_USERS_LIST SYSDLG_SIGN_EDOCUMENT SYSDLG_SIGN_MULTIPLE_EDOCUMENTS " + "SYSREF_ACCESS_RIGHTS_TYPES SYSREF_ADMINISTRATION_HISTORY SYSREF_ALL_AVAILABLE_COMPONENTS SYSREF_ALL_AVAILABLE_PRIVILEGES SYSREF_ALL_REPLICATING_COMPONENTS SYSREF_AVAILABLE_DEVELOPERS_COMPONENTS SYSREF_CALENDAR_EVENTS SYSREF_COMPONENT_TOKEN_HISTORY SYSREF_COMPONENT_TOKENS SYSREF_COMPONENTS SYSREF_CONSTANTS SYSREF_DATA_RECEIVE_PROTOCOL SYSREF_DATA_SEND_PROTOCOL SYSREF_DIALOGS SYSREF_DIALOGS_REQUISITES SYSREF_EDITORS SYSREF_EDOC_CARDS SYSREF_EDOC_TYPES SYSREF_EDOCUMENT_CARD_REQUISITES SYSREF_EDOCUMENT_CARD_TYPES SYSREF_EDOCUMENT_CARD_TYPES_REFERENCE SYSREF_EDOCUMENT_CARDS SYSREF_EDOCUMENT_HISTORY SYSREF_EDOCUMENT_KINDS SYSREF_EDOCUMENT_REQUISITES SYSREF_EDOCUMENT_SIGNATURES SYSREF_EDOCUMENT_TEMPLATES SYSREF_EDOCUMENT_TEXT_STORAGES SYSREF_EDOCUMENT_VIEWS SYSREF_FILTERER_SETUP_CONFLICTS SYSREF_FILTRATER_SETTING_CONFLICTS SYSREF_FOLDER_HISTORY SYSREF_FOLDERS SYSREF_FUNCTION_GROUPS SYSREF_FUNCTION_PARAMS SYSREF_FUNCTIONS SYSREF_JOB_HISTORY SYSREF_LINKS SYSREF_LOCALIZATION_DICTIONARY SYSREF_LOCALIZATION_LANGUAGES SYSREF_MODULES SYSREF_PRIVILEGES SYSREF_RECORD_HISTORY SYSREF_REFERENCE_REQUISITES SYSREF_REFERENCE_TYPE_VIEWS SYSREF_REFERENCE_TYPES SYSREF_REFERENCES SYSREF_REFERENCES_REQUISITES SYSREF_REMOTE_SERVERS SYSREF_REPLICATION_SESSIONS_LOG SYSREF_REPLICATION_SESSIONS_PROTOCOL SYSREF_REPORTS SYSREF_ROLES SYSREF_ROUTE_BLOCK_GROUPS SYSREF_ROUTE_BLOCKS SYSREF_SCRIPTS SYSREF_SEARCHES SYSREF_SERVER_EVENTS SYSREF_SERVER_EVENTS_HISTORY SYSREF_STANDARD_ROUTE_GROUPS SYSREF_STANDARD_ROUTES SYSREF_STATUSES SYSREF_SYSTEM_SETTINGS SYSREF_TASK_HISTORY SYSREF_TASK_KIND_GROUPS SYSREF_TASK_KINDS SYSREF_TASK_RIGHTS SYSREF_TASK_SIGNATURES SYSREF_TASKS SYSREF_UNITS SYSREF_USER_GROUPS SYSREF_USER_GROUPS_REFERENCE SYSREF_USER_SUBSTITUTION SYSREF_USERS SYSREF_USERS_REFERENCE SYSREF_VIEWERS SYSREF_WORKING_TIME_CALENDARS " + "ACCESS_RIGHTS_TABLE_NAME EDMS_ACCESS_TABLE_NAME EDOC_TYPES_TABLE_NAME " + "TEST_DEV_DB_NAME TEST_DEV_SYSTEM_CODE TEST_EDMS_DB_NAME TEST_EDMS_MAIN_CODE TEST_EDMS_MAIN_DB_NAME TEST_EDMS_SECOND_CODE TEST_EDMS_SECOND_DB_NAME TEST_EDMS_SYSTEM_CODE TEST_ISB5_MAIN_CODE TEST_ISB5_SECOND_CODE TEST_SQL_SERVER_2005_NAME TEST_SQL_SERVER_NAME " + "ATTENTION_CAPTION cbsCommandLinks cbsDefault CONFIRMATION_CAPTION ERROR_CAPTION INFORMATION_CAPTION mrCancel mrOk " + "EDOC_VERSION_ACTIVE_STAGE_CODE EDOC_VERSION_DESIGN_STAGE_CODE EDOC_VERSION_OBSOLETE_STAGE_CODE " + "cpDataEnciphermentEnabled cpDigitalSignatureEnabled cpID cpIssuer cpPluginVersion cpSerial cpSubjectName cpSubjSimpleName cpValidFromDate cpValidToDate " + "ISBL_SYNTAX NO_SYNTAX XML_SYNTAX " + "WAIT_BLOCK_AFTER_FINISH_EVENT WAIT_BLOCK_BEFORE_START_EVENT WAIT_BLOCK_DEADLINE_PROPERTY WAIT_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY WAIT_BLOCK_NAME_PROPERTY WAIT_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY " + "SYSRES_COMMON SYSRES_CONST SYSRES_MBFUNC SYSRES_SBDATA SYSRES_SBGUI SYSRES_SBINTF SYSRES_SBREFDSC SYSRES_SQLERRORS SYSRES_SYSCOMP ", Nt = "atUser atGroup atRole " + "aemEnabledAlways aemDisabledAlways aemEnabledOnBrowse aemEnabledOnEdit aemDisabledOnBrowseEmpty " + "apBegin apEnd " + "alLeft alRight " + "asmNever asmNoButCustomize asmAsLastTime asmYesButCustomize asmAlways " + "cirCommon cirRevoked " + "ctSignature ctEncode ctSignatureEncode " + "clbUnchecked clbChecked clbGrayed " + "ceISB ceAlways ceNever " + "ctDocument ctReference ctScript ctUnknown ctReport ctDialog ctFunction ctFolder ctEDocument ctTask ctJob ctNotice ctControlJob " + "cfInternal cfDisplay " + "ciUnspecified ciWrite ciRead " + "ckFolder ckEDocument ckTask ckJob ckComponentToken ckAny ckReference ckScript ckReport ckDialog " + "ctISBLEditor ctBevel ctButton ctCheckListBox ctComboBox ctComboEdit ctGrid ctDBCheckBox ctDBComboBox ctDBEdit ctDBEllipsis ctDBMemo ctDBNavigator ctDBRadioGroup ctDBStatusLabel ctEdit ctGroupBox ctInplaceHint ctMemo ctPanel ctListBox ctRadioButton ctRichEdit ctTabSheet ctWebBrowser ctImage ctHyperLink ctLabel ctDBMultiEllipsis ctRibbon ctRichView ctInnerPanel ctPanelGroup ctBitButton " + "cctDate cctInteger cctNumeric cctPick cctReference cctString cctText " + "cltInternal cltPrimary cltGUI " + "dseBeforeOpen dseAfterOpen dseBeforeClose dseAfterClose dseOnValidDelete dseBeforeDelete dseAfterDelete dseAfterDeleteOutOfTransaction dseOnDeleteError dseBeforeInsert dseAfterInsert dseOnValidUpdate dseBeforeUpdate dseOnUpdateRatifiedRecord dseAfterUpdate dseAfterUpdateOutOfTransaction dseOnUpdateError dseAfterScroll dseOnOpenRecord dseOnCloseRecord dseBeforeCancel dseAfterCancel dseOnUpdateDeadlockError dseBeforeDetailUpdate dseOnPrepareUpdate dseOnAnyRequisiteChange " + "dssEdit dssInsert dssBrowse dssInActive " + "dftDate dftShortDate dftDateTime dftTimeStamp " + "dotDays dotHours dotMinutes dotSeconds " + "dtkndLocal dtkndUTC " + "arNone arView arEdit arFull " + "ddaView ddaEdit " + "emLock emEdit emSign emExportWithLock emImportWithUnlock emChangeVersionNote emOpenForModify emChangeLifeStage emDelete emCreateVersion emImport emUnlockExportedWithLock emStart emAbort emReInit emMarkAsReaded emMarkAsUnreaded emPerform emAccept emResume emChangeRights emEditRoute emEditObserver emRecoveryFromLocalCopy emChangeWorkAccessType emChangeEncodeTypeToCertificate emChangeEncodeTypeToPassword emChangeEncodeTypeToNone emChangeEncodeTypeToCertificatePassword emChangeStandardRoute emGetText emOpenForView emMoveToStorage emCreateObject emChangeVersionHidden emDeleteVersion emChangeLifeCycleStage emApprovingSign emExport emContinue emLockFromEdit emUnLockForEdit emLockForServer emUnlockFromServer emDelegateAccessRights emReEncode " + "ecotFile ecotProcess " + "eaGet eaCopy eaCreate eaCreateStandardRoute " + "edltAll edltNothing edltQuery " + "essmText essmCard " + "esvtLast esvtLastActive esvtSpecified " + "edsfExecutive edsfArchive " + "edstSQLServer edstFile " + "edvstNone edvstEDocumentVersionCopy edvstFile edvstTemplate edvstScannedFile " + "vsDefault vsDesign vsActive vsObsolete " + "etNone etCertificate etPassword etCertificatePassword " + "ecException ecWarning ecInformation " + "estAll estApprovingOnly " + "evtLast evtLastActive evtQuery " + "fdtString fdtNumeric fdtInteger fdtDate fdtText fdtUnknown fdtWideString fdtLargeInteger " + "ftInbox ftOutbox ftFavorites ftCommonFolder ftUserFolder ftComponents ftQuickLaunch ftShortcuts ftSearch " + "grhAuto grhX1 grhX2 grhX3 " + "hltText hltRTF hltHTML " + "iffBMP iffJPEG iffMultiPageTIFF iffSinglePageTIFF iffTIFF iffPNG " + "im8bGrayscale im24bRGB im1bMonochrome " + "itBMP itJPEG itWMF itPNG " + "ikhInformation ikhWarning ikhError ikhNoIcon " + "icUnknown icScript icFunction icIntegratedReport icAnalyticReport icDataSetEventHandler icActionHandler icFormEventHandler icLookUpEventHandler icRequisiteChangeEventHandler icBeforeSearchEventHandler icRoleCalculation icSelectRouteEventHandler icBlockPropertyCalculation icBlockQueryParamsEventHandler icChangeSearchResultEventHandler icBlockEventHandler icSubTaskInitEventHandler icEDocDataSetEventHandler icEDocLookUpEventHandler icEDocActionHandler icEDocFormEventHandler icEDocRequisiteChangeEventHandler icStructuredConversionRule icStructuredConversionEventBefore icStructuredConversionEventAfter icWizardEventHandler icWizardFinishEventHandler icWizardStepEventHandler icWizardStepFinishEventHandler icWizardActionEnableEventHandler icWizardActionExecuteEventHandler icCreateJobsHandler icCreateNoticesHandler icBeforeLookUpEventHandler icAfterLookUpEventHandler icTaskAbortEventHandler icWorkflowBlockActionHandler icDialogDataSetEventHandler icDialogActionHandler icDialogLookUpEventHandler icDialogRequisiteChangeEventHandler icDialogFormEventHandler icDialogValidCloseEventHandler icBlockFormEventHandler icTaskFormEventHandler icReferenceMethod icEDocMethod icDialogMethod icProcessMessageHandler " + "isShow isHide isByUserSettings " + "jkJob jkNotice jkControlJob " + "jtInner jtLeft jtRight jtFull jtCross " + "lbpAbove lbpBelow lbpLeft lbpRight " + "eltPerConnection eltPerUser " + "sfcUndefined sfcBlack sfcGreen sfcRed sfcBlue sfcOrange sfcLilac " + "sfsItalic sfsStrikeout sfsNormal " + "ldctStandardRoute ldctWizard ldctScript ldctFunction ldctRouteBlock ldctIntegratedReport ldctAnalyticReport ldctReferenceType ldctEDocumentType ldctDialog ldctServerEvents " + "mrcrtNone mrcrtUser mrcrtMaximal mrcrtCustom " + "vtEqual vtGreaterOrEqual vtLessOrEqual vtRange " + "rdYesterday rdToday rdTomorrow rdThisWeek rdThisMonth rdThisYear rdNextMonth rdNextWeek rdLastWeek rdLastMonth " + "rdWindow rdFile rdPrinter " + "rdtString rdtNumeric rdtInteger rdtDate rdtReference rdtAccount rdtText rdtPick rdtUnknown rdtLargeInteger rdtDocument " + "reOnChange reOnChangeValues " + "ttGlobal ttLocal ttUser ttSystem " + "ssmBrowse ssmSelect ssmMultiSelect ssmBrowseModal " + "smSelect smLike smCard " + "stNone stAuthenticating stApproving " + "sctString sctStream " + "sstAnsiSort sstNaturalSort " + "svtEqual svtContain " + "soatString soatNumeric soatInteger soatDatetime soatReferenceRecord soatText soatPick soatBoolean soatEDocument soatAccount soatIntegerCollection soatNumericCollection soatStringCollection soatPickCollection soatDatetimeCollection soatBooleanCollection soatReferenceRecordCollection soatEDocumentCollection soatAccountCollection soatContents soatUnknown " + "tarAbortByUser tarAbortByWorkflowException " + "tvtAllWords tvtExactPhrase tvtAnyWord " + "usNone usCompleted usRedSquare usBlueSquare usYellowSquare usGreenSquare usOrangeSquare usPurpleSquare usFollowUp " + "utUnknown utUser utDeveloper utAdministrator utSystemDeveloper utDisconnected " + "btAnd btDetailAnd btOr btNotOr btOnly " + "vmView vmSelect vmNavigation " + "vsmSingle vsmMultiple vsmMultipleCheck vsmNoSelection " + "wfatPrevious wfatNext wfatCancel wfatFinish " + "wfepUndefined wfepText3 wfepText6 wfepText9 wfepSpinEdit wfepDropDown wfepRadioGroup wfepFlag wfepText12 wfepText15 wfepText18 wfepText21 wfepText24 wfepText27 wfepText30 wfepRadioGroupColumn1 wfepRadioGroupColumn2 wfepRadioGroupColumn3 " + "wfetQueryParameter wfetText wfetDelimiter wfetLabel " + "wptString wptInteger wptNumeric wptBoolean wptDateTime wptPick wptText wptUser wptUserList wptEDocumentInfo wptEDocumentInfoList wptReferenceRecordInfo wptReferenceRecordInfoList wptFolderInfo wptTaskInfo wptContents wptFileName wptDate " + "wsrComplete wsrGoNext wsrGoPrevious wsrCustom wsrCancel wsrGoFinal " + "wstForm wstEDocument wstTaskCard wstReferenceRecordCard wstFinal " + "waAll waPerformers waManual " + "wsbStart wsbFinish wsbNotice wsbStep wsbDecision wsbWait wsbMonitor wsbScript wsbConnector wsbSubTask wsbLifeCycleStage wsbPause " + "wdtInteger wdtFloat wdtString wdtPick wdtDateTime wdtBoolean wdtTask wdtJob wdtFolder wdtEDocument wdtReferenceRecord wdtUser wdtGroup wdtRole wdtIntegerCollection wdtFloatCollection wdtStringCollection wdtPickCollection wdtDateTimeCollection wdtBooleanCollection wdtTaskCollection wdtJobCollection wdtFolderCollection wdtEDocumentCollection wdtReferenceRecordCollection wdtUserCollection wdtGroupCollection wdtRoleCollection wdtContents wdtUserList wdtSearchDescription wdtDeadLine wdtPickSet wdtAccountCollection " + "wiLow wiNormal wiHigh " + "wrtSoft wrtHard " + "wsInit wsRunning wsDone wsControlled wsAborted wsContinued " + "wtmFull wtmFromCurrent wtmOnlyCurrent ", Yt = "AddSubString AdjustLineBreaks AmountInWords Analysis ArrayDimCount ArrayHighBound ArrayLowBound ArrayOf ArrayReDim Assert Assigned BeginOfMonth BeginOfPeriod BuildProfilingOperationAnalysis CallProcedure CanReadFile CArrayElement CDataSetRequisite ChangeDate ChangeReferenceDataset Char CharPos CheckParam CheckParamValue CompareStrings ConstantExists ControlState ConvertDateStr Copy CopyFile CreateArray CreateCachedReference CreateConnection CreateDialog CreateDualListDialog CreateEditor CreateException CreateFile CreateFolderDialog CreateInputDialog CreateLinkFile CreateList CreateLock CreateMemoryDataSet CreateObject CreateOpenDialog CreateProgress CreateQuery CreateReference CreateReport CreateSaveDialog CreateScript CreateSQLPivotFunction CreateStringList CreateTreeListSelectDialog CSelectSQL CSQL CSubString CurrentUserID CurrentUserName CurrentVersion DataSetLocateEx DateDiff DateTimeDiff DateToStr DayOfWeek DeleteFile DirectoryExists DisableCheckAccessRights DisableCheckFullShowingRestriction DisableMassTaskSendingRestrictions DropTable DupeString EditText EnableCheckAccessRights EnableCheckFullShowingRestriction EnableMassTaskSendingRestrictions EndOfMonth EndOfPeriod ExceptionExists ExceptionsOff ExceptionsOn Execute ExecuteProcess Exit ExpandEnvironmentVariables ExtractFileDrive ExtractFileExt ExtractFileName ExtractFilePath ExtractParams FileExists FileSize FindFile FindSubString FirmContext ForceDirectories Format FormatDate FormatNumeric FormatSQLDate FormatString FreeException GetComponent GetComponentLaunchParam GetConstant GetLastException GetReferenceRecord GetRefTypeByRefID GetTableID GetTempFolder IfThen In IndexOf InputDialog InputDialogEx InteractiveMode IsFileLocked IsGraphicFile IsNumeric Length LoadString LoadStringFmt LocalTimeToUTC LowerCase Max MessageBox MessageBoxEx MimeDecodeBinary MimeDecodeString MimeEncodeBinary MimeEncodeString Min MoneyInWords MoveFile NewID Now OpenFile Ord Precision Raise ReadCertificateFromFile ReadFile ReferenceCodeByID ReferenceNumber ReferenceRequisiteMode ReferenceRequisiteValue RegionDateSettings RegionNumberSettings RegionTimeSettings RegRead RegWrite RenameFile Replace Round SelectServerCode SelectSQL ServerDateTime SetConstant SetManagedFolderFieldsState ShowConstantsInputDialog ShowMessage Sleep Split SQL SQL2XLSTAB SQLProfilingSendReport StrToDate SubString SubStringCount SystemSetting Time TimeDiff Today Transliterate Trim UpperCase UserStatus UTCToLocalTime ValidateXML VarIsClear VarIsEmpty VarIsNull WorkTimeDiff WriteFile WriteFileEx WriteObjectHistory Анализ БазаДанных БлокЕсть БлокЕстьРасш БлокИнфо БлокСнять БлокСнятьРасш БлокУстановить Ввод ВводМеню ВедС ВедСпр ВерхняяГраницаМассива ВнешПрогр Восст ВременнаяПапка Время ВыборSQL ВыбратьЗапись ВыделитьСтр Вызвать Выполнить ВыпПрогр ГрафическийФайл ГруппаДополнительно ДатаВремяСерв ДеньНедели ДиалогДаНет ДлинаСтр ДобПодстр ЕПусто ЕслиТо ЕЧисло ЗамПодстр ЗаписьСправочника ЗначПоляСпр ИДТипСпр ИзвлечьДиск ИзвлечьИмяФайла ИзвлечьПуть ИзвлечьРасширение ИзмДат ИзменитьРазмерМассива ИзмеренийМассива ИмяОрг ИмяПоляСпр Индекс ИндикаторЗакрыть ИндикаторОткрыть ИндикаторШаг ИнтерактивныйРежим ИтогТблСпр КодВидВедСпр КодВидСпрПоИД КодПоAnalit КодСимвола КодСпр КолПодстр КолПроп КонМес Конст КонстЕсть КонстЗнач КонТран КопироватьФайл КопияСтр КПериод КСтрТблСпр Макс МаксСтрТблСпр Массив Меню МенюРасш Мин НаборДанныхНайтиРасш НаимВидСпр НаимПоAnalit НаимСпр НастроитьПереводыСтрок НачМес НачТран НижняяГраницаМассива НомерСпр НПериод Окно Окр Окружение ОтлИнфДобавить ОтлИнфУдалить Отчет ОтчетАнал ОтчетИнт ПапкаСуществует Пауза ПВыборSQL ПереименоватьФайл Переменные ПереместитьФайл Подстр ПоискПодстр ПоискСтр ПолучитьИДТаблицы ПользовательДополнительно ПользовательИД ПользовательИмя ПользовательСтатус Прервать ПроверитьПараметр ПроверитьПараметрЗнач ПроверитьУсловие РазбСтр РазнВремя РазнДат РазнДатаВремя РазнРабВремя РегУстВрем РегУстДат РегУстЧсл РедТекст РеестрЗапись РеестрСписокИменПарам РеестрЧтение РеквСпр РеквСпрПр Сегодня Сейчас Сервер СерверПроцессИД СертификатФайлСчитать СжПроб Символ СистемаДиректумКод СистемаИнформация СистемаКод Содержит СоединениеЗакрыть СоединениеОткрыть СоздатьДиалог СоздатьДиалогВыбораИзДвухСписков СоздатьДиалогВыбораПапки СоздатьДиалогОткрытияФайла СоздатьДиалогСохраненияФайла СоздатьЗапрос СоздатьИндикатор СоздатьИсключение СоздатьКэшированныйСправочник СоздатьМассив СоздатьНаборДанных СоздатьОбъект СоздатьОтчет СоздатьПапку СоздатьРедактор СоздатьСоединение СоздатьСписок СоздатьСписокСтрок СоздатьСправочник СоздатьСценарий СоздСпр СостСпр Сохр СохрСпр СписокСистем Спр Справочник СпрБлокЕсть СпрБлокСнять СпрБлокСнятьРасш СпрБлокУстановить СпрИзмНабДан СпрКод СпрНомер СпрОбновить СпрОткрыть СпрОтменить СпрПарам СпрПолеЗнач СпрПолеИмя СпрРекв СпрРеквВведЗн СпрРеквНовые СпрРеквПр СпрРеквПредЗн СпрРеквРежим СпрРеквТипТекст СпрСоздать СпрСост СпрСохранить СпрТблИтог СпрТблСтр СпрТблСтрКол СпрТблСтрМакс СпрТблСтрМин СпрТблСтрПред СпрТблСтрСлед СпрТблСтрСозд СпрТблСтрУд СпрТекПредст СпрУдалить СравнитьСтр СтрВерхРегистр СтрНижнРегистр СтрТблСпр СумПроп Сценарий СценарийПарам ТекВерсия ТекОрг Точн Тран Транслитерация УдалитьТаблицу УдалитьФайл УдСпр УдСтрТблСпр Уст УстановкиКонстант ФайлАтрибутСчитать ФайлАтрибутУстановить ФайлВремя ФайлВремяУстановить ФайлВыбрать ФайлЗанят ФайлЗаписать ФайлИскать ФайлКопировать ФайлМожноЧитать ФайлОткрыть ФайлПереименовать ФайлПерекодировать ФайлПереместить ФайлПросмотреть ФайлРазмер ФайлСоздать ФайлСсылкаСоздать ФайлСуществует ФайлСчитать ФайлУдалить ФмтSQLДат ФмтДат ФмтСтр ФмтЧсл Формат ЦМассивЭлемент ЦНаборДанныхРеквизит ЦПодстр ", Ft = "AltState Application CallType ComponentTokens CreatedJobs CreatedNotices ControlState DialogResult Dialogs EDocuments EDocumentVersionSource Folders GlobalIDs Job Jobs InputValue LookUpReference LookUpRequisiteNames LookUpSearch Object ParentComponent Processes References Requisite ReportName Reports Result Scripts Searches SelectedAttachments SelectedItems SelectMode Sender ServerEvents ServiceFactory ShiftState SubTask SystemDialogs Tasks Wizard Wizards Work ВызовСпособ ИмяОтчета РеквЗнач ", Dt = "IApplication IAccessRights IAccountRepository IAccountSelectionRestrictions IAction IActionList IAdministrationHistoryDescription IAnchors IApplication IArchiveInfo IAttachment IAttachmentList ICheckListBox ICheckPointedList IColumn IComponent IComponentDescription IComponentToken IComponentTokenFactory IComponentTokenInfo ICompRecordInfo IConnection IContents IControl IControlJob IControlJobInfo IControlList ICrypto ICrypto2 ICustomJob ICustomJobInfo ICustomListBox ICustomObjectWizardStep ICustomWork ICustomWorkInfo IDataSet IDataSetAccessInfo IDataSigner IDateCriterion IDateRequisite IDateRequisiteDescription IDateValue IDeaAccessRights IDeaObjectInfo IDevelopmentComponentLock IDialog IDialogFactory IDialogPickRequisiteItems IDialogsFactory IDICSFactory IDocRequisite IDocumentInfo IDualListDialog IECertificate IECertificateInfo IECertificates IEditControl IEditorForm IEdmsExplorer IEdmsObject IEdmsObjectDescription IEdmsObjectFactory IEdmsObjectInfo IEDocument IEDocumentAccessRights IEDocumentDescription IEDocumentEditor IEDocumentFactory IEDocumentInfo IEDocumentStorage IEDocumentVersion IEDocumentVersionListDialog IEDocumentVersionSource IEDocumentWizardStep IEDocVerSignature IEDocVersionState IEnabledMode IEncodeProvider IEncrypter IEvent IEventList IException IExternalEvents IExternalHandler IFactory IField IFileDialog IFolder IFolderDescription IFolderDialog IFolderFactory IFolderInfo IForEach IForm IFormTitle IFormWizardStep IGlobalIDFactory IGlobalIDInfo IGrid IHasher IHistoryDescription IHyperLinkControl IImageButton IImageControl IInnerPanel IInplaceHint IIntegerCriterion IIntegerList IIntegerRequisite IIntegerValue IISBLEditorForm IJob IJobDescription IJobFactory IJobForm IJobInfo ILabelControl ILargeIntegerCriterion ILargeIntegerRequisite ILargeIntegerValue ILicenseInfo ILifeCycleStage IList IListBox ILocalIDInfo ILocalization ILock IMemoryDataSet IMessagingFactory IMetadataRepository INotice INoticeInfo INumericCriterion INumericRequisite INumericValue IObject IObjectDescription IObjectImporter IObjectInfo IObserver IPanelGroup IPickCriterion IPickProperty IPickRequisite IPickRequisiteDescription IPickRequisiteItem IPickRequisiteItems IPickValue IPrivilege IPrivilegeList IProcess IProcessFactory IProcessMessage IProgress IProperty IPropertyChangeEvent IQuery IReference IReferenceCriterion IReferenceEnabledMode IReferenceFactory IReferenceHistoryDescription IReferenceInfo IReferenceRecordCardWizardStep IReferenceRequisiteDescription IReferencesFactory IReferenceValue IRefRequisite IReport IReportFactory IRequisite IRequisiteDescription IRequisiteDescriptionList IRequisiteFactory IRichEdit IRouteStep IRule IRuleList ISchemeBlock IScript IScriptFactory ISearchCriteria ISearchCriterion ISearchDescription ISearchFactory ISearchFolderInfo ISearchForObjectDescription ISearchResultRestrictions ISecuredContext ISelectDialog IServerEvent IServerEventFactory IServiceDialog IServiceFactory ISignature ISignProvider ISignProvider2 ISignProvider3 ISimpleCriterion IStringCriterion IStringList IStringRequisite IStringRequisiteDescription IStringValue ISystemDialogsFactory ISystemInfo ITabSheet ITask ITaskAbortReasonInfo ITaskCardWizardStep ITaskDescription ITaskFactory ITaskInfo ITaskRoute ITextCriterion ITextRequisite ITextValue ITreeListSelectDialog IUser IUserList IValue IView IWebBrowserControl IWizard IWizardAction IWizardFactory IWizardFormElement IWizardParam IWizardPickParam IWizardReferenceParam IWizardStep IWorkAccessRights IWorkDescription IWorkflowAskableParam IWorkflowAskableParams IWorkflowBlock IWorkflowBlockResult IWorkflowEnabledMode IWorkflowParam IWorkflowPickParam IWorkflowReferenceParam IWorkState IWorkTreeCustomNode IWorkTreeJobNode IWorkTreeTaskNode IXMLEditorForm SBCrypto ", Lt = $ + Nt, Bt = Ft, Xt = "null true false nil ", Jr = {
      className: "number",
      begin: e.NUMBER_RE,
      relevance: 0
    }, yr = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        }
      ]
    }, qt = {
      className: "doctag",
      begin: "\\b(?:TODO|DONE|BEGIN|END|STUB|CHG|FIXME|NOTE|BUG|XXX)\\b",
      relevance: 0
    }, Mt = {
      className: "comment",
      begin: "//",
      end: "$",
      relevance: 0,
      contains: [
        e.PHRASAL_WORDS_MODE,
        qt
      ]
    }, Ut = {
      className: "comment",
      begin: "/\\*",
      end: "\\*/",
      relevance: 0,
      contains: [
        e.PHRASAL_WORDS_MODE,
        qt
      ]
    }, fr = { variants: [
      Mt,
      Ut
    ] }, It = {
      $pattern: r,
      keyword: i,
      built_in: Lt,
      class: Bt,
      literal: Xt
    }, sr = {
      begin: "\\.\\s*" + e.UNDERSCORE_IDENT_RE,
      keywords: It,
      relevance: 0
    }, Ar = {
      className: "type",
      begin: ":[ \\t]*(" + Dt.trim().replace(/\s/g, "|") + ")",
      end: "[ \\t]*=",
      excludeEnd: !0
    }, pr = {
      className: "variable",
      keywords: It,
      begin: r,
      relevance: 0,
      contains: [
        Ar,
        sr
      ]
    }, cr = n + "\\(";
    return {
      name: "ISBL",
      case_insensitive: !0,
      keywords: It,
      illegal: "\\$|\\?|%|,|;$|~|#|@|</",
      contains: [
        {
          className: "function",
          begin: cr,
          end: "\\)$",
          returnBegin: !0,
          keywords: It,
          illegal: "[\\[\\]\\|\\$\\?%,~#@]",
          contains: [
            {
              className: "title",
              keywords: {
                $pattern: r,
                built_in: Yt
              },
              begin: cr,
              end: "\\(",
              returnBegin: !0,
              excludeEnd: !0
            },
            sr,
            pr,
            yr,
            Jr,
            fr
          ]
        },
        Ar,
        sr,
        pr,
        yr,
        Jr,
        fr
      ]
    };
  }
  return Cd = t, Cd;
}
var wd, k$;
function UR() {
  if (k$)
    return wd;
  k$ = 1;
  var t = "[0-9](_*[0-9])*", e = `\\.(${t})`, r = "[0-9a-fA-F](_*[0-9a-fA-F])*", n = {
    className: "number",
    variants: [
      // DecimalFloatingPointLiteral
      // including ExponentPart
      { begin: `(\\b(${t})((${e})|\\.)?|(${e}))[eE][+-]?(${t})[fFdD]?\\b` },
      // excluding ExponentPart
      { begin: `\\b(${t})((${e})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${e})[fFdD]?\\b` },
      { begin: `\\b(${t})[fFdD]\\b` },
      // HexadecimalFloatingPointLiteral
      { begin: `\\b0[xX]((${r})\\.?|(${r})?\\.(${r}))[pP][+-]?(${t})[fFdD]?\\b` },
      // DecimalIntegerLiteral
      { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
      // HexIntegerLiteral
      { begin: `\\b0[xX](${r})[lL]?\\b` },
      // OctalIntegerLiteral
      { begin: "\\b0(_*[0-7])*[lL]?\\b" },
      // BinaryIntegerLiteral
      { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
    ],
    relevance: 0
  };
  function i(o, a, l) {
    return l === -1 ? "" : o.replace(a, (c) => i(o, a, l - 1));
  }
  function s(o) {
    const a = o.regex, l = "[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*", c = l + i("(?:<" + l + "~~~(?:\\s*,\\s*" + l + "~~~)*>)?", /~~~/g, 2), N = {
      keyword: [
        "synchronized",
        "abstract",
        "private",
        "var",
        "static",
        "if",
        "const ",
        "for",
        "while",
        "strictfp",
        "finally",
        "protected",
        "import",
        "native",
        "final",
        "void",
        "enum",
        "else",
        "break",
        "transient",
        "catch",
        "instanceof",
        "volatile",
        "case",
        "assert",
        "package",
        "default",
        "public",
        "try",
        "switch",
        "continue",
        "throws",
        "protected",
        "public",
        "private",
        "module",
        "requires",
        "exports",
        "do",
        "sealed",
        "yield",
        "permits"
      ],
      literal: [
        "false",
        "true",
        "null"
      ],
      type: [
        "char",
        "boolean",
        "long",
        "float",
        "int",
        "byte",
        "short",
        "double"
      ],
      built_in: [
        "super",
        "this"
      ]
    }, z = {
      className: "meta",
      begin: "@" + l,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: ["self"]
          // allow nested () inside our annotation
        }
      ]
    }, A = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      keywords: N,
      relevance: 0,
      contains: [o.C_BLOCK_COMMENT_MODE],
      endsParent: !0
    };
    return {
      name: "Java",
      aliases: ["jsp"],
      keywords: N,
      illegal: /<\/|#/,
      contains: [
        o.COMMENT(
          "/\\*\\*",
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                // eat up @'s in emails to prevent them to be recognized as doctags
                begin: /\w+@/,
                relevance: 0
              },
              {
                className: "doctag",
                begin: "@[A-Za-z]+"
              }
            ]
          }
        ),
        // relevance boost
        {
          begin: /import java\.[a-z]+\./,
          keywords: "import",
          relevance: 2
        },
        o.C_LINE_COMMENT_MODE,
        o.C_BLOCK_COMMENT_MODE,
        {
          begin: /"""/,
          end: /"""/,
          className: "string",
          contains: [o.BACKSLASH_ESCAPE]
        },
        o.APOS_STRING_MODE,
        o.QUOTE_STRING_MODE,
        {
          match: [
            /\b(?:class|interface|enum|extends|implements|new)/,
            /\s+/,
            l
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          // Exceptions for hyphenated keywords
          match: /non-sealed/,
          scope: "keyword"
        },
        {
          begin: [
            a.concat(/(?!else)/, l),
            /\s+/,
            l,
            /\s+/,
            /=(?!=)/
          ],
          className: {
            1: "type",
            3: "variable",
            5: "operator"
          }
        },
        {
          begin: [
            /record/,
            /\s+/,
            l
          ],
          className: {
            1: "keyword",
            3: "title.class"
          },
          contains: [
            A,
            o.C_LINE_COMMENT_MODE,
            o.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // Expression keywords prevent 'keyword Name(...)' from being
          // recognized as a function definition
          beginKeywords: "new throw return else",
          relevance: 0
        },
        {
          begin: [
            "(?:" + c + "\\s+)",
            o.UNDERSCORE_IDENT_RE,
            /\s*(?=\()/
          ],
          className: { 2: "title.function" },
          keywords: N,
          contains: [
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: N,
              relevance: 0,
              contains: [
                z,
                o.APOS_STRING_MODE,
                o.QUOTE_STRING_MODE,
                n,
                o.C_BLOCK_COMMENT_MODE
              ]
            },
            o.C_LINE_COMMENT_MODE,
            o.C_BLOCK_COMMENT_MODE
          ]
        },
        n,
        z
      ]
    };
  }
  return wd = s, wd;
}
var Ad, I$;
function qR() {
  if (I$)
    return Ad;
  I$ = 1;
  const t = "[A-Za-z$_][0-9A-Za-z$_]*", e = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ], r = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], n = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], i = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], s = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], o = [
    "arguments",
    "this",
    "super",
    "console",
    "window",
    "document",
    "localStorage",
    "sessionStorage",
    "module",
    "global"
    // Node.js
  ], a = [].concat(
    s,
    n,
    i
  );
  function l(c) {
    const f = c.regex, m = (D, { after: ie }) => {
      const Me = "</" + D[0].slice(1);
      return D.input.indexOf(Me, ie) !== -1;
    }, b = t, C = {
      begin: "<>",
      end: "</>"
    }, N = /<[A-Za-z0-9\\._:-]+\s*\/>/, z = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      /**
       * @param {RegExpMatchArray} match
       * @param {CallbackResponse} response
       */
      isTrulyOpeningTag: (D, ie) => {
        const Me = D[0].length + D.index, Je = D.input[Me];
        if (
          // HTML should not include another raw `<` inside a tag
          // nested type?
          // `<Array<Array<number>>`, etc.
          Je === "<" || // the , gives away that this is not HTML
          // `<T, A extends keyof T, V>`
          Je === ","
        ) {
          ie.ignoreMatch();
          return;
        }
        Je === ">" && (m(D, { after: Me }) || ie.ignoreMatch());
        let it;
        const dt = D.input.substring(Me);
        if (it = dt.match(/^\s*=/)) {
          ie.ignoreMatch();
          return;
        }
        if ((it = dt.match(/^\s+extends\s+/)) && it.index === 0) {
          ie.ignoreMatch();
          return;
        }
      }
    }, A = {
      $pattern: t,
      keyword: e,
      literal: r,
      built_in: a,
      "variable.language": o
    }, Q = "[0-9](_?[0-9])*", Te = `\\.(${Q})`, ce = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", ge = {
      className: "number",
      variants: [
        // DecimalLiteral
        { begin: `(\\b(${ce})((${Te})|\\.)?|(${Te}))[eE][+-]?(${Q})\\b` },
        { begin: `\\b(${ce})\\b((${Te})\\b|\\.)?|(${Te})\\b` },
        // DecimalBigIntegerLiteral
        { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
        // NonDecimalIntegerLiteral
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
        // LegacyOctalIntegerLiteral (does not include underscore separators)
        // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
        { begin: "\\b0[0-7]+n?\\b" }
      ],
      relevance: 0
    }, Y = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: A,
      contains: []
      // defined later
    }, fe = {
      begin: "html`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          c.BACKSLASH_ESCAPE,
          Y
        ],
        subLanguage: "xml"
      }
    }, ae = {
      begin: "css`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          c.BACKSLASH_ESCAPE,
          Y
        ],
        subLanguage: "css"
      }
    }, Re = {
      begin: "gql`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          c.BACKSLASH_ESCAPE,
          Y
        ],
        subLanguage: "graphql"
      }
    }, pe = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        c.BACKSLASH_ESCAPE,
        Y
      ]
    }, J = {
      className: "comment",
      variants: [
        c.COMMENT(
          /\/\*\*(?!\/)/,
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                begin: "(?=@[A-Za-z]+)",
                relevance: 0,
                contains: [
                  {
                    className: "doctag",
                    begin: "@[A-Za-z]+"
                  },
                  {
                    className: "type",
                    begin: "\\{",
                    end: "\\}",
                    excludeEnd: !0,
                    excludeBegin: !0,
                    relevance: 0
                  },
                  {
                    className: "variable",
                    begin: b + "(?=\\s*(-)|$)",
                    endsParent: !0,
                    relevance: 0
                  },
                  // eat spaces (not newlines) so we can find
                  // types or variables
                  {
                    begin: /(?=[^\n])\s/,
                    relevance: 0
                  }
                ]
              }
            ]
          }
        ),
        c.C_BLOCK_COMMENT_MODE,
        c.C_LINE_COMMENT_MODE
      ]
    }, R = [
      c.APOS_STRING_MODE,
      c.QUOTE_STRING_MODE,
      fe,
      ae,
      Re,
      pe,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      ge
      // This is intentional:
      // See https://github.com/highlightjs/highlight.js/issues/3288
      // hljs.REGEXP_MODE
    ];
    Y.contains = R.concat({
      // we need to pair up {} inside our subst to prevent
      // it from ending too early by matching another }
      begin: /\{/,
      end: /\}/,
      keywords: A,
      contains: [
        "self"
      ].concat(R)
    });
    const ve = [].concat(J, Y.contains), F = ve.concat([
      // eat recursive parens in sub expressions
      {
        begin: /\(/,
        end: /\)/,
        keywords: A,
        contains: ["self"].concat(ve)
      }
    ]), ne = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: !0,
      excludeEnd: !0,
      keywords: A,
      contains: F
    }, H = {
      variants: [
        // class Car extends vehicle
        {
          match: [
            /class/,
            /\s+/,
            b,
            /\s+/,
            /extends/,
            /\s+/,
            f.concat(b, "(", f.concat(/\./, b), ")*")
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            5: "keyword",
            7: "title.class.inherited"
          }
        },
        // class Car
        {
          match: [
            /class/,
            /\s+/,
            b
          ],
          scope: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    }, we = {
      relevance: 0,
      match: f.either(
        // Hard coded exceptions
        /\bJSON/,
        // Float32Array, OutT
        /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
        // CSSFactory, CSSFactoryT
        /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
        // FPs, FPsT
        /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
        // P
        // single letters are not highlighted
        // BLAH
        // this will be flagged as a UPPER_CASE_CONSTANT instead
      ),
      className: "title.class",
      keywords: {
        _: [
          // se we still get relevance credit for JS library classes
          ...n,
          ...i
        ]
      }
    }, _e = {
      label: "use_strict",
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    }, X = {
      variants: [
        {
          match: [
            /function/,
            /\s+/,
            b,
            /(?=\s*\()/
          ]
        },
        // anonymous function
        {
          match: [
            /function/,
            /\s*(?=\()/
          ]
        }
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      label: "func.def",
      contains: [ne],
      illegal: /%/
    }, w = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    function h(D) {
      return f.concat("(?!", D.join("|"), ")");
    }
    const d = {
      match: f.concat(
        /\b/,
        h([
          ...s,
          "super",
          "import"
        ]),
        b,
        f.lookahead(/\(/)
      ),
      className: "title.function",
      relevance: 0
    }, _ = {
      begin: f.concat(/\./, f.lookahead(
        f.concat(b, /(?![0-9A-Za-z$_(])/)
      )),
      end: b,
      excludeBegin: !0,
      keywords: "prototype",
      className: "property",
      relevance: 0
    }, g = {
      match: [
        /get|set/,
        /\s+/,
        b,
        /(?=\()/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          // eat to avoid empty params
          begin: /\(\)/
        },
        ne
      ]
    }, $ = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + c.UNDERSCORE_IDENT_RE + ")\\s*=>", I = {
      match: [
        /const|var|let/,
        /\s+/,
        b,
        /\s*/,
        /=\s*/,
        /(async\s*)?/,
        // async is optional
        f.lookahead($)
      ],
      keywords: "async",
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        ne
      ]
    };
    return {
      name: "JavaScript",
      aliases: ["js", "jsx", "mjs", "cjs"],
      keywords: A,
      // this will be extended by TypeScript
      exports: { PARAMS_CONTAINS: F, CLASS_REFERENCE: we },
      illegal: /#(?![$_A-z])/,
      contains: [
        c.SHEBANG({
          label: "shebang",
          binary: "node",
          relevance: 5
        }),
        _e,
        c.APOS_STRING_MODE,
        c.QUOTE_STRING_MODE,
        fe,
        ae,
        Re,
        pe,
        J,
        // Skip numbers when they are part of a variable name
        { match: /\$\d+/ },
        ge,
        we,
        {
          className: "attr",
          begin: b + f.lookahead(":"),
          relevance: 0
        },
        I,
        {
          // "value" container
          begin: "(" + c.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          relevance: 0,
          contains: [
            J,
            c.REGEXP_MODE,
            {
              className: "function",
              // we have to count the parens to make sure we actually have the
              // correct bounding ( ) before the =>.  There could be any number of
              // sub-expressions inside also surrounded by parens.
              begin: $,
              returnBegin: !0,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    {
                      begin: c.UNDERSCORE_IDENT_RE,
                      relevance: 0
                    },
                    {
                      className: null,
                      begin: /\(\s*\)/,
                      skip: !0
                    },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: !0,
                      excludeEnd: !0,
                      keywords: A,
                      contains: F
                    }
                  ]
                }
              ]
            },
            {
              // could be a comma delimited list of params to a function call
              begin: /,/,
              relevance: 0
            },
            {
              match: /\s+/,
              relevance: 0
            },
            {
              // JSX
              variants: [
                { begin: C.begin, end: C.end },
                { match: N },
                {
                  begin: z.begin,
                  // we carefully check the opening tag to see if it truly
                  // is a tag and not a false positive
                  "on:begin": z.isTrulyOpeningTag,
                  end: z.end
                }
              ],
              subLanguage: "xml",
              contains: [
                {
                  begin: z.begin,
                  end: z.end,
                  skip: !0,
                  contains: ["self"]
                }
              ]
            }
          ]
        },
        X,
        {
          // prevent this from getting swallowed up by function
          // since they appear "function like"
          beginKeywords: "while if switch catch for"
        },
        {
          // we have to count the parens to make sure we actually have the correct
          // bounding ( ).  There could be any number of sub-expressions inside
          // also surrounded by parens.
          begin: "\\b(?!function)" + c.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
          // end parens
          returnBegin: !0,
          label: "func.def",
          contains: [
            ne,
            c.inherit(c.TITLE_MODE, { begin: b, className: "title.function" })
          ]
        },
        // catch ... so it won't trigger the property rule below
        {
          match: /\.\.\./,
          relevance: 0
        },
        _,
        // hack: prevents detection of keywords in some circumstances
        // .keyword()
        // $keyword = x
        {
          match: "\\$" + b,
          relevance: 0
        },
        {
          match: [/\bconstructor(?=\s*\()/],
          className: { 1: "title.function" },
          contains: [ne]
        },
        d,
        w,
        H,
        g,
        {
          match: /\$[(.]/
          // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
        }
      ]
    };
  }
  return Ad = l, Ad;
}
var Rd, O$;
function zR() {
  if (O$)
    return Rd;
  O$ = 1;
  function t(e) {
    const n = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      contains: [{
        begin: /[\w-]+ *=/,
        returnBegin: !0,
        relevance: 0,
        contains: [
          {
            className: "attr",
            begin: /[\w-]+/
          }
        ]
      }],
      relevance: 0
    }, i = {
      className: "function",
      begin: /:[\w\-.]+/,
      relevance: 0
    }, s = {
      className: "string",
      begin: /\B([\/.])[\w\-.\/=]+/
    }, o = {
      className: "params",
      begin: /--[\w\-=\/]+/
    };
    return {
      name: "JBoss CLI",
      aliases: ["wildfly-cli"],
      keywords: {
        $pattern: "[a-z-]+",
        keyword: "alias batch cd clear command connect connection-factory connection-info data-source deploy deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias undeploy unset version xa-data-source",
        // module
        literal: "true false"
      },
      contains: [
        e.HASH_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        o,
        i,
        s,
        n
      ]
    };
  }
  return Rd = t, Rd;
}
var xd, D$;
function GR() {
  if (D$)
    return xd;
  D$ = 1;
  function t(e) {
    const r = {
      className: "attr",
      begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
      relevance: 1.01
    }, n = {
      match: /[{}[\],:]/,
      className: "punctuation",
      relevance: 0
    }, i = [
      "true",
      "false",
      "null"
    ], s = {
      scope: "literal",
      beginKeywords: i.join(" ")
    };
    return {
      name: "JSON",
      keywords: {
        literal: i
      },
      contains: [
        r,
        n,
        e.QUOTE_STRING_MODE,
        s,
        e.C_NUMBER_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ],
      illegal: "\\S"
    };
  }
  return xd = t, xd;
}
var Nd, M$;
function YR() {
  if (M$)
    return Nd;
  M$ = 1;
  function t(e) {
    const r = "[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*", o = {
      $pattern: r,
      keyword: [
        "baremodule",
        "begin",
        "break",
        "catch",
        "ccall",
        "const",
        "continue",
        "do",
        "else",
        "elseif",
        "end",
        "export",
        "false",
        "finally",
        "for",
        "function",
        "global",
        "if",
        "import",
        "in",
        "isa",
        "let",
        "local",
        "macro",
        "module",
        "quote",
        "return",
        "true",
        "try",
        "using",
        "where",
        "while"
      ],
      literal: [
        "ARGS",
        "C_NULL",
        "DEPOT_PATH",
        "ENDIAN_BOM",
        "ENV",
        "Inf",
        "Inf16",
        "Inf32",
        "Inf64",
        "InsertionSort",
        "LOAD_PATH",
        "MergeSort",
        "NaN",
        "NaN16",
        "NaN32",
        "NaN64",
        "PROGRAM_FILE",
        "QuickSort",
        "RoundDown",
        "RoundFromZero",
        "RoundNearest",
        "RoundNearestTiesAway",
        "RoundNearestTiesUp",
        "RoundToZero",
        "RoundUp",
        "VERSION|0",
        "devnull",
        "false",
        "im",
        "missing",
        "nothing",
        "pi",
        "stderr",
        "stdin",
        "stdout",
        "true",
        "undef",
        "π",
        "ℯ"
      ],
      built_in: [
        "AbstractArray",
        "AbstractChannel",
        "AbstractChar",
        "AbstractDict",
        "AbstractDisplay",
        "AbstractFloat",
        "AbstractIrrational",
        "AbstractMatrix",
        "AbstractRange",
        "AbstractSet",
        "AbstractString",
        "AbstractUnitRange",
        "AbstractVecOrMat",
        "AbstractVector",
        "Any",
        "ArgumentError",
        "Array",
        "AssertionError",
        "BigFloat",
        "BigInt",
        "BitArray",
        "BitMatrix",
        "BitSet",
        "BitVector",
        "Bool",
        "BoundsError",
        "CapturedException",
        "CartesianIndex",
        "CartesianIndices",
        "Cchar",
        "Cdouble",
        "Cfloat",
        "Channel",
        "Char",
        "Cint",
        "Cintmax_t",
        "Clong",
        "Clonglong",
        "Cmd",
        "Colon",
        "Complex",
        "ComplexF16",
        "ComplexF32",
        "ComplexF64",
        "CompositeException",
        "Condition",
        "Cptrdiff_t",
        "Cshort",
        "Csize_t",
        "Cssize_t",
        "Cstring",
        "Cuchar",
        "Cuint",
        "Cuintmax_t",
        "Culong",
        "Culonglong",
        "Cushort",
        "Cvoid",
        "Cwchar_t",
        "Cwstring",
        "DataType",
        "DenseArray",
        "DenseMatrix",
        "DenseVecOrMat",
        "DenseVector",
        "Dict",
        "DimensionMismatch",
        "Dims",
        "DivideError",
        "DomainError",
        "EOFError",
        "Enum",
        "ErrorException",
        "Exception",
        "ExponentialBackOff",
        "Expr",
        "Float16",
        "Float32",
        "Float64",
        "Function",
        "GlobalRef",
        "HTML",
        "IO",
        "IOBuffer",
        "IOContext",
        "IOStream",
        "IdDict",
        "IndexCartesian",
        "IndexLinear",
        "IndexStyle",
        "InexactError",
        "InitError",
        "Int",
        "Int128",
        "Int16",
        "Int32",
        "Int64",
        "Int8",
        "Integer",
        "InterruptException",
        "InvalidStateException",
        "Irrational",
        "KeyError",
        "LinRange",
        "LineNumberNode",
        "LinearIndices",
        "LoadError",
        "MIME",
        "Matrix",
        "Method",
        "MethodError",
        "Missing",
        "MissingException",
        "Module",
        "NTuple",
        "NamedTuple",
        "Nothing",
        "Number",
        "OrdinalRange",
        "OutOfMemoryError",
        "OverflowError",
        "Pair",
        "PartialQuickSort",
        "PermutedDimsArray",
        "Pipe",
        "ProcessFailedException",
        "Ptr",
        "QuoteNode",
        "Rational",
        "RawFD",
        "ReadOnlyMemoryError",
        "Real",
        "ReentrantLock",
        "Ref",
        "Regex",
        "RegexMatch",
        "RoundingMode",
        "SegmentationFault",
        "Set",
        "Signed",
        "Some",
        "StackOverflowError",
        "StepRange",
        "StepRangeLen",
        "StridedArray",
        "StridedMatrix",
        "StridedVecOrMat",
        "StridedVector",
        "String",
        "StringIndexError",
        "SubArray",
        "SubString",
        "SubstitutionString",
        "Symbol",
        "SystemError",
        "Task",
        "TaskFailedException",
        "Text",
        "TextDisplay",
        "Timer",
        "Tuple",
        "Type",
        "TypeError",
        "TypeVar",
        "UInt",
        "UInt128",
        "UInt16",
        "UInt32",
        "UInt64",
        "UInt8",
        "UndefInitializer",
        "UndefKeywordError",
        "UndefRefError",
        "UndefVarError",
        "Union",
        "UnionAll",
        "UnitRange",
        "Unsigned",
        "Val",
        "Vararg",
        "VecElement",
        "VecOrMat",
        "Vector",
        "VersionNumber",
        "WeakKeyDict",
        "WeakRef"
      ]
    }, a = {
      keywords: o,
      illegal: /<\//
    }, l = {
      className: "number",
      // supported numeric literals:
      //  * binary literal (e.g. 0x10)
      //  * octal literal (e.g. 0o76543210)
      //  * hexadecimal literal (e.g. 0xfedcba876543210)
      //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)
      //  * decimal literal (e.g. 9876543210, 100_000_000)
      //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)
      begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
      relevance: 0
    }, c = {
      className: "string",
      begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    }, f = {
      className: "subst",
      begin: /\$\(/,
      end: /\)/,
      keywords: o
    }, m = {
      className: "variable",
      begin: "\\$" + r
    }, b = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        f,
        m
      ],
      variants: [
        {
          begin: /\w*"""/,
          end: /"""\w*/,
          relevance: 10
        },
        {
          begin: /\w*"/,
          end: /"\w*/
        }
      ]
    }, C = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        f,
        m
      ],
      begin: "`",
      end: "`"
    }, N = {
      className: "meta",
      begin: "@" + r
    }, z = {
      className: "comment",
      variants: [
        {
          begin: "#=",
          end: "=#",
          relevance: 10
        },
        {
          begin: "#",
          end: "$"
        }
      ]
    };
    return a.name = "Julia", a.contains = [
      l,
      c,
      b,
      C,
      N,
      z,
      e.HASH_COMMENT_MODE,
      {
        className: "keyword",
        begin: "\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b"
      },
      { begin: /<:/ }
      // relevance booster
    ], f.contains = a.contains, a;
  }
  return Nd = t, Nd;
}
var kd, L$;
function HR() {
  if (L$)
    return kd;
  L$ = 1;
  function t(e) {
    return {
      name: "Julia REPL",
      contains: [
        {
          className: "meta.prompt",
          begin: /^julia>/,
          relevance: 10,
          starts: {
            // end the highlighting if we are on a new line and the line does not have at
            // least six spaces in the beginning
            end: /^(?![ ]{6})/,
            subLanguage: "julia"
          }
        }
      ],
      // jldoctest Markdown blocks are used in the Julia manual and package docs indicate
      // code snippets that should be verified when the documentation is built. They can be
      // either REPL-like or script-like, but are usually REPL-like and therefore we apply
      // julia-repl highlighting to them. More information can be found in Documenter's
      // manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html
      aliases: ["jldoctest"]
    };
  }
  return kd = t, kd;
}
var Id, P$;
function VR() {
  if (P$)
    return Id;
  P$ = 1;
  var t = "[0-9](_*[0-9])*", e = `\\.(${t})`, r = "[0-9a-fA-F](_*[0-9a-fA-F])*", n = {
    className: "number",
    variants: [
      // DecimalFloatingPointLiteral
      // including ExponentPart
      { begin: `(\\b(${t})((${e})|\\.)?|(${e}))[eE][+-]?(${t})[fFdD]?\\b` },
      // excluding ExponentPart
      { begin: `\\b(${t})((${e})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${e})[fFdD]?\\b` },
      { begin: `\\b(${t})[fFdD]\\b` },
      // HexadecimalFloatingPointLiteral
      { begin: `\\b0[xX]((${r})\\.?|(${r})?\\.(${r}))[pP][+-]?(${t})[fFdD]?\\b` },
      // DecimalIntegerLiteral
      { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
      // HexIntegerLiteral
      { begin: `\\b0[xX](${r})[lL]?\\b` },
      // OctalIntegerLiteral
      { begin: "\\b0(_*[0-7])*[lL]?\\b" },
      // BinaryIntegerLiteral
      { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
    ],
    relevance: 0
  };
  function i(s) {
    const o = {
      keyword: "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",
      built_in: "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
      literal: "true false null"
    }, a = {
      className: "keyword",
      begin: /\b(break|continue|return|this)\b/,
      starts: { contains: [
        {
          className: "symbol",
          begin: /@\w+/
        }
      ] }
    }, l = {
      className: "symbol",
      begin: s.UNDERSCORE_IDENT_RE + "@"
    }, c = {
      className: "subst",
      begin: /\$\{/,
      end: /\}/,
      contains: [s.C_NUMBER_MODE]
    }, f = {
      className: "variable",
      begin: "\\$" + s.UNDERSCORE_IDENT_RE
    }, m = {
      className: "string",
      variants: [
        {
          begin: '"""',
          end: '"""(?=[^"])',
          contains: [
            f,
            c
          ]
        },
        // Can't use built-in modes easily, as we want to use STRING in the meta
        // context as 'meta-string' and there's no syntax to remove explicitly set
        // classNames in built-in modes.
        {
          begin: "'",
          end: "'",
          illegal: /\n/,
          contains: [s.BACKSLASH_ESCAPE]
        },
        {
          begin: '"',
          end: '"',
          illegal: /\n/,
          contains: [
            s.BACKSLASH_ESCAPE,
            f,
            c
          ]
        }
      ]
    };
    c.contains.push(m);
    const b = {
      className: "meta",
      begin: "@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*" + s.UNDERSCORE_IDENT_RE + ")?"
    }, C = {
      className: "meta",
      begin: "@" + s.UNDERSCORE_IDENT_RE,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            s.inherit(m, { className: "string" }),
            "self"
          ]
        }
      ]
    }, N = n, z = s.COMMENT(
      "/\\*",
      "\\*/",
      { contains: [s.C_BLOCK_COMMENT_MODE] }
    ), A = { variants: [
      {
        className: "type",
        begin: s.UNDERSCORE_IDENT_RE
      },
      {
        begin: /\(/,
        end: /\)/,
        contains: []
        // defined later
      }
    ] }, Q = A;
    return Q.variants[1].contains = [A], A.variants[1].contains = [Q], {
      name: "Kotlin",
      aliases: [
        "kt",
        "kts"
      ],
      keywords: o,
      contains: [
        s.COMMENT(
          "/\\*\\*",
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                className: "doctag",
                begin: "@[A-Za-z]+"
              }
            ]
          }
        ),
        s.C_LINE_COMMENT_MODE,
        z,
        a,
        l,
        b,
        C,
        {
          className: "function",
          beginKeywords: "fun",
          end: "[(]|$",
          returnBegin: !0,
          excludeEnd: !0,
          keywords: o,
          relevance: 5,
          contains: [
            {
              begin: s.UNDERSCORE_IDENT_RE + "\\s*\\(",
              returnBegin: !0,
              relevance: 0,
              contains: [s.UNDERSCORE_TITLE_MODE]
            },
            {
              className: "type",
              begin: /</,
              end: />/,
              keywords: "reified",
              relevance: 0
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              endsParent: !0,
              keywords: o,
              relevance: 0,
              contains: [
                {
                  begin: /:/,
                  end: /[=,\/]/,
                  endsWithParent: !0,
                  contains: [
                    A,
                    s.C_LINE_COMMENT_MODE,
                    z
                  ],
                  relevance: 0
                },
                s.C_LINE_COMMENT_MODE,
                z,
                b,
                C,
                m,
                s.C_NUMBER_MODE
              ]
            },
            z
          ]
        },
        {
          begin: [
            /class|interface|trait/,
            /\s+/,
            s.UNDERSCORE_IDENT_RE
          ],
          beginScope: {
            3: "title.class"
          },
          keywords: "class interface trait",
          end: /[:\{(]|$/,
          excludeEnd: !0,
          illegal: "extends implements",
          contains: [
            { beginKeywords: "public protected internal private constructor" },
            s.UNDERSCORE_TITLE_MODE,
            {
              className: "type",
              begin: /</,
              end: />/,
              excludeBegin: !0,
              excludeEnd: !0,
              relevance: 0
            },
            {
              className: "type",
              begin: /[,:]\s*/,
              end: /[<\(,){\s]|$/,
              excludeBegin: !0,
              returnEnd: !0
            },
            b,
            C
          ]
        },
        m,
        {
          className: "meta",
          begin: "^#!/usr/bin/env",
          end: "$",
          illegal: `
`
        },
        N
      ]
    };
  }
  return Id = i, Id;
}
var Od, F$;
function WR() {
  if (F$)
    return Od;
  F$ = 1;
  function t(e) {
    const r = "[a-zA-Z_][\\w.]*", n = "<\\?(lasso(script)?|=)", i = "\\]|\\?>", s = {
      $pattern: r + "|&[lg]t;",
      literal: "true false none minimal full all void and or not bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft",
      built_in: "array date decimal duration integer map pair string tag xml null boolean bytes keyword list locale queue set stack staticarray local var variable global data self inherited currentcapture givenblock",
      keyword: "cache database_names database_schemanames database_tablenames define_tag define_type email_batch encode_set html_comment handle handle_error header if inline iterate ljax_target link link_currentaction link_currentgroup link_currentrecord link_detail link_firstgroup link_firstrecord link_lastgroup link_lastrecord link_nextgroup link_nextrecord link_prevgroup link_prevrecord log loop namespace_using output_none portal private protect records referer referrer repeating resultset rows search_args search_arguments select sort_args sort_arguments thread_atomic value_list while abort case else fail_if fail_ifnot fail if_empty if_false if_null if_true loop_abort loop_continue loop_count params params_up return return_value run_children soap_definetag soap_lastrequest soap_lastresponse tag_name ascending average by define descending do equals frozen group handle_failure import in into join let match max min on order parent protected provide public require returnhome skip split_thread sum take thread to trait type where with yield yieldhome"
    }, o = e.COMMENT(
      "<!--",
      "-->",
      { relevance: 0 }
    ), a = {
      className: "meta",
      begin: "\\[noprocess\\]",
      starts: {
        end: "\\[/noprocess\\]",
        returnEnd: !0,
        contains: [o]
      }
    }, l = {
      className: "meta",
      begin: "\\[/noprocess|" + n
    }, c = {
      className: "symbol",
      begin: "'" + r + "'"
    }, f = [
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      e.inherit(e.C_NUMBER_MODE, { begin: e.C_NUMBER_RE + "|(-?infinity|NaN)\\b" }),
      e.inherit(e.APOS_STRING_MODE, { illegal: null }),
      e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
      {
        className: "string",
        begin: "`",
        end: "`"
      },
      {
        // variables
        variants: [
          { begin: "[#$]" + r },
          {
            begin: "#",
            end: "\\d+",
            illegal: "\\W"
          }
        ]
      },
      {
        className: "type",
        begin: "::\\s*",
        end: r,
        illegal: "\\W"
      },
      {
        className: "params",
        variants: [
          {
            begin: "-(?!infinity)" + r,
            relevance: 0
          },
          { begin: "(\\.\\.\\.)" }
        ]
      },
      {
        begin: /(->|\.)\s*/,
        relevance: 0,
        contains: [c]
      },
      {
        className: "class",
        beginKeywords: "define",
        returnEnd: !0,
        end: "\\(|=>",
        contains: [e.inherit(e.TITLE_MODE, { begin: r + "(=(?!>))?|[-+*/%](?!>)" })]
      }
    ];
    return {
      name: "Lasso",
      aliases: [
        "ls",
        "lassoscript"
      ],
      case_insensitive: !0,
      keywords: s,
      contains: [
        {
          className: "meta",
          begin: i,
          relevance: 0,
          starts: {
            // markup
            end: "\\[|" + n,
            returnEnd: !0,
            relevance: 0,
            contains: [o]
          }
        },
        a,
        l,
        {
          className: "meta",
          begin: "\\[no_square_brackets",
          starts: {
            end: "\\[/no_square_brackets\\]",
            // not implemented in the language
            keywords: s,
            contains: [
              {
                className: "meta",
                begin: i,
                relevance: 0,
                starts: {
                  end: "\\[noprocess\\]|" + n,
                  returnEnd: !0,
                  contains: [o]
                }
              },
              a,
              l
            ].concat(f)
          }
        },
        {
          className: "meta",
          begin: "\\[",
          relevance: 0
        },
        {
          className: "meta",
          begin: "^#!",
          end: "lasso9$",
          relevance: 10
        }
      ].concat(f)
    };
  }
  return Od = t, Od;
}
var Dd, B$;
function KR() {
  if (B$)
    return Dd;
  B$ = 1;
  function t(e) {
    const n = e.regex.either(...[
      "(?:NeedsTeXFormat|RequirePackage|GetIdInfo)",
      "Provides(?:Expl)?(?:Package|Class|File)",
      "(?:DeclareOption|ProcessOptions)",
      "(?:documentclass|usepackage|input|include)",
      "makeat(?:letter|other)",
      "ExplSyntax(?:On|Off)",
      "(?:new|renew|provide)?command",
      "(?:re)newenvironment",
      "(?:New|Renew|Provide|Declare)(?:Expandable)?DocumentCommand",
      "(?:New|Renew|Provide|Declare)DocumentEnvironment",
      "(?:(?:e|g|x)?def|let)",
      "(?:begin|end)",
      "(?:part|chapter|(?:sub){0,2}section|(?:sub)?paragraph)",
      "caption",
      "(?:label|(?:eq|page|name)?ref|(?:paren|foot|super)?cite)",
      "(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|zeta|eta|[Tt]heta|vartheta)",
      "(?:iota|(?:var)?kappa|[Ll]ambda|mu|nu|[Xx]i|[Pp]i|varpi|(?:var)rho)",
      "(?:[Ss]igma|varsigma|tau|[Uu]psilon|[Pp]hi|varphi|chi|[Pp]si|[Oo]mega)",
      "(?:frac|sum|prod|lim|infty|times|sqrt|leq|geq|left|right|middle|[bB]igg?)",
      "(?:[lr]angle|q?quad|[lcvdi]?dots|d?dot|hat|tilde|bar)"
    ].map((J) => J + "(?![a-zA-Z@:_])")), i = new RegExp([
      // A function \module_function_name:signature or \__module_function_name:signature,
      // where both module and function_name need at least two characters and
      // function_name may contain single underscores.
      "(?:__)?[a-zA-Z]{2,}_[a-zA-Z](?:_?[a-zA-Z])+:[a-zA-Z]*",
      // A variable \scope_module_and_name_type or \scope__module_ane_name_type,
      // where scope is one of l, g or c, type needs at least two characters
      // and module_and_name may contain single underscores.
      "[lgc]__?[a-zA-Z](?:_?[a-zA-Z])*_[a-zA-Z]{2,}",
      // A quark \q_the_name or \q__the_name or
      // scan mark \s_the_name or \s__vthe_name,
      // where variable_name needs at least two characters and
      // may contain single underscores.
      "[qs]__?[a-zA-Z](?:_?[a-zA-Z])+",
      // Other LaTeX3 macro names that are not covered by the three rules above.
      "use(?:_i)?:[a-zA-Z]*",
      "(?:else|fi|or):",
      "(?:if|cs|exp):w",
      "(?:hbox|vbox):n",
      "::[a-zA-Z]_unbraced",
      "::[a-zA-Z:]"
    ].map((J) => J + "(?![a-zA-Z:_])").join("|")), s = [
      { begin: /[a-zA-Z@]+/ },
      // control word
      { begin: /[^a-zA-Z@]?/ }
      // control symbol
    ], o = [
      { begin: /\^{6}[0-9a-f]{6}/ },
      { begin: /\^{5}[0-9a-f]{5}/ },
      { begin: /\^{4}[0-9a-f]{4}/ },
      { begin: /\^{3}[0-9a-f]{3}/ },
      { begin: /\^{2}[0-9a-f]{2}/ },
      { begin: /\^{2}[\u0000-\u007f]/ }
    ], a = {
      className: "keyword",
      begin: /\\/,
      relevance: 0,
      contains: [
        {
          endsParent: !0,
          begin: n
        },
        {
          endsParent: !0,
          begin: i
        },
        {
          endsParent: !0,
          variants: o
        },
        {
          endsParent: !0,
          relevance: 0,
          variants: s
        }
      ]
    }, l = {
      className: "params",
      relevance: 0,
      begin: /#+\d?/
    }, c = {
      // relevance: 1
      variants: o
    }, f = {
      className: "built_in",
      relevance: 0,
      begin: /[$&^_]/
    }, m = {
      className: "meta",
      begin: /% ?!(T[eE]X|tex|BIB|bib)/,
      end: "$",
      relevance: 10
    }, b = e.COMMENT(
      "%",
      "$",
      { relevance: 0 }
    ), C = [
      a,
      l,
      c,
      f,
      m,
      b
    ], N = {
      begin: /\{/,
      end: /\}/,
      relevance: 0,
      contains: [
        "self",
        ...C
      ]
    }, z = e.inherit(
      N,
      {
        relevance: 0,
        endsParent: !0,
        contains: [
          N,
          ...C
        ]
      }
    ), A = {
      begin: /\[/,
      end: /\]/,
      endsParent: !0,
      relevance: 0,
      contains: [
        N,
        ...C
      ]
    }, Q = {
      begin: /\s+/,
      relevance: 0
    }, Te = [z], ce = [A], ge = function(J, R) {
      return {
        contains: [Q],
        starts: {
          relevance: 0,
          contains: J,
          starts: R
        }
      };
    }, Y = function(J, R) {
      return {
        begin: "\\\\" + J + "(?![a-zA-Z@:_])",
        keywords: {
          $pattern: /\\[a-zA-Z]+/,
          keyword: "\\" + J
        },
        relevance: 0,
        contains: [Q],
        starts: R
      };
    }, fe = function(J, R) {
      return e.inherit(
        {
          begin: "\\\\begin(?=[ 	]*(\\r?\\n[ 	]*)?\\{" + J + "\\})",
          keywords: {
            $pattern: /\\[a-zA-Z]+/,
            keyword: "\\begin"
          },
          relevance: 0
        },
        ge(Te, R)
      );
    }, ae = (J = "string") => e.END_SAME_AS_BEGIN({
      className: J,
      begin: /(.|\r?\n)/,
      end: /(.|\r?\n)/,
      excludeBegin: !0,
      excludeEnd: !0,
      endsParent: !0
    }), Re = function(J) {
      return {
        className: "string",
        end: "(?=\\\\end\\{" + J + "\\})"
      };
    }, pe = (J = "string") => ({
      relevance: 0,
      begin: /\{/,
      starts: {
        endsParent: !0,
        contains: [
          {
            className: J,
            end: /(?=\})/,
            endsParent: !0,
            contains: [
              {
                begin: /\{/,
                end: /\}/,
                relevance: 0,
                contains: ["self"]
              }
            ]
          }
        ]
      }
    }), Ce = [
      ...[
        "verb",
        "lstinline"
      ].map((J) => Y(J, { contains: [ae()] })),
      Y("mint", ge(Te, { contains: [ae()] })),
      Y("mintinline", ge(Te, { contains: [
        pe(),
        ae()
      ] })),
      Y("url", { contains: [
        pe("link"),
        pe("link")
      ] }),
      Y("hyperref", { contains: [pe("link")] }),
      Y("href", ge(ce, { contains: [pe("link")] })),
      ...[].concat(...[
        "",
        "\\*"
      ].map((J) => [
        fe("verbatim" + J, Re("verbatim" + J)),
        fe("filecontents" + J, ge(Te, Re("filecontents" + J))),
        ...[
          "",
          "B",
          "L"
        ].map(
          (R) => fe(R + "Verbatim" + J, ge(ce, Re(R + "Verbatim" + J)))
        )
      ])),
      fe("minted", ge(ce, ge(Te, Re("minted"))))
    ];
    return {
      name: "LaTeX",
      aliases: ["tex"],
      contains: [
        ...Ce,
        ...C
      ]
    };
  }
  return Dd = t, Dd;
}
var Md, U$;
function QR() {
  if (U$)
    return Md;
  U$ = 1;
  function t(e) {
    return {
      name: "LDIF",
      contains: [
        {
          className: "attribute",
          match: "^dn(?=:)",
          relevance: 10
        },
        {
          className: "attribute",
          match: "^\\w+(?=:)"
        },
        {
          className: "literal",
          match: "^-"
        },
        e.HASH_COMMENT_MODE
      ]
    };
  }
  return Md = t, Md;
}
var Ld, q$;
function jR() {
  if (q$)
    return Ld;
  q$ = 1;
  function t(e) {
    const r = /([A-Za-z_][A-Za-z_0-9]*)?/, i = {
      scope: "params",
      begin: /\(/,
      end: /\)(?=\:?)/,
      endsParent: !0,
      relevance: 7,
      contains: [
        {
          scope: "string",
          begin: '"',
          end: '"'
        },
        {
          scope: "keyword",
          match: [
            "true",
            "false",
            "in"
          ].join("|")
        },
        {
          scope: "variable",
          match: /[A-Za-z_][A-Za-z_0-9]*/
        },
        {
          scope: "operator",
          match: /\+|\-|\*|\/|\%|\=\=|\=|\!|\>|\<|\&\&|\|\|/
        }
      ]
    }, s = {
      match: [
        r,
        /(?=\()/
      ],
      scope: {
        1: "keyword"
      },
      contains: [i]
    };
    return i.contains.unshift(s), {
      name: "Leaf",
      contains: [
        // #ident():
        {
          match: [
            /#+/,
            r,
            /(?=\()/
          ],
          scope: {
            1: "punctuation",
            2: "keyword"
          },
          // will start up after the ending `)` match from line ~44
          // just to grab the trailing `:` if we can match it
          starts: {
            contains: [
              {
                match: /\:/,
                scope: "punctuation"
              }
            ]
          },
          contains: [
            i
          ]
        },
        // #ident or #ident:
        {
          match: [
            /#+/,
            r,
            /:?/
          ],
          scope: {
            1: "punctuation",
            2: "keyword",
            3: "punctuation"
          }
        }
      ]
    };
  }
  return Ld = t, Ld;
}
var Pd, z$;
function XR() {
  if (z$)
    return Pd;
  z$ = 1;
  const t = (l) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: l.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        l.APOS_STRING_MODE,
        l.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: l.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], r = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ], n = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ], i = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ], s = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
    // reverse makes sure longer attributes `font-weight` are matched fully
    // instead of getting false positives on say `font`
  ].reverse(), o = n.concat(i);
  function a(l) {
    const c = t(l), f = o, m = "and or not only", b = "[\\w-]+", C = "(" + b + "|@\\{" + b + "\\})", N = [], z = [], A = function(J) {
      return {
        // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
        className: "string",
        begin: "~?" + J + ".*?" + J
      };
    }, Q = function(J, R, ve) {
      return {
        className: J,
        begin: R,
        relevance: ve
      };
    }, Te = {
      $pattern: /[a-z-]+/,
      keyword: m,
      attribute: r.join(" ")
    }, ce = {
      // used only to properly balance nested parens inside mixin call, def. arg list
      begin: "\\(",
      end: "\\)",
      contains: z,
      keywords: Te,
      relevance: 0
    };
    z.push(
      l.C_LINE_COMMENT_MODE,
      l.C_BLOCK_COMMENT_MODE,
      A("'"),
      A('"'),
      c.CSS_NUMBER_MODE,
      // fixme: it does not include dot for numbers like .5em :(
      {
        begin: "(url|data-uri)\\(",
        starts: {
          className: "string",
          end: "[\\)\\n]",
          excludeEnd: !0
        }
      },
      c.HEXCOLOR,
      ce,
      Q("variable", "@@?" + b, 10),
      Q("variable", "@\\{" + b + "\\}"),
      Q("built_in", "~?`[^`]*?`"),
      // inline javascript (or whatever host language) *multiline* string
      {
        // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
        className: "attribute",
        begin: b + "\\s*:",
        end: ":",
        returnBegin: !0,
        excludeEnd: !0
      },
      c.IMPORTANT,
      { beginKeywords: "and not" },
      c.FUNCTION_DISPATCH
    );
    const ge = z.concat({
      begin: /\{/,
      end: /\}/,
      contains: N
    }), Y = {
      beginKeywords: "when",
      endsWithParent: !0,
      contains: [{ beginKeywords: "and not" }].concat(z)
      // using this form to override VALUE’s 'function' match
    }, fe = {
      begin: C + "\\s*:",
      returnBegin: !0,
      end: /[;}]/,
      relevance: 0,
      contains: [
        { begin: /-(webkit|moz|ms|o)-/ },
        c.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + s.join("|") + ")\\b",
          end: /(?=:)/,
          starts: {
            endsWithParent: !0,
            illegal: "[<=$]",
            relevance: 0,
            contains: z
          }
        }
      ]
    }, ae = {
      className: "keyword",
      begin: "@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",
      starts: {
        end: "[;{}]",
        keywords: Te,
        returnEnd: !0,
        contains: z,
        relevance: 0
      }
    }, Re = {
      className: "variable",
      variants: [
        // using more strict pattern for higher relevance to increase chances of Less detection.
        // this is *the only* Less specific statement used in most of the sources, so...
        // (we’ll still often loose to the css-parser unless there's '//' comment,
        // simply because 1 variable just can't beat 99 properties :)
        {
          begin: "@" + b + "\\s*:",
          relevance: 15
        },
        { begin: "@" + b }
      ],
      starts: {
        end: "[;}]",
        returnEnd: !0,
        contains: ge
      }
    }, pe = {
      // first parse unambiguous selectors (i.e. those not starting with tag)
      // then fall into the scary lookahead-discriminator variant.
      // this mode also handles mixin definitions and calls
      variants: [
        {
          begin: "[\\.#:&\\[>]",
          end: "[;{}]"
          // mixin calls end with ';'
        },
        {
          begin: C,
          end: /\{/
        }
      ],
      returnBegin: !0,
      returnEnd: !0,
      illegal: `[<='$"]`,
      relevance: 0,
      contains: [
        l.C_LINE_COMMENT_MODE,
        l.C_BLOCK_COMMENT_MODE,
        Y,
        Q("keyword", "all\\b"),
        Q("variable", "@\\{" + b + "\\}"),
        // otherwise it’s identified as tag
        {
          begin: "\\b(" + e.join("|") + ")\\b",
          className: "selector-tag"
        },
        c.CSS_NUMBER_MODE,
        Q("selector-tag", C, 0),
        Q("selector-id", "#" + C),
        Q("selector-class", "\\." + C, 0),
        Q("selector-tag", "&", 0),
        c.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-pseudo",
          begin: ":(" + n.join("|") + ")"
        },
        {
          className: "selector-pseudo",
          begin: ":(:)?(" + i.join("|") + ")"
        },
        {
          begin: /\(/,
          end: /\)/,
          relevance: 0,
          contains: ge
        },
        // argument list of parametric mixins
        { begin: "!important" },
        // eat !important after mixin call or it will be colored as tag
        c.FUNCTION_DISPATCH
      ]
    }, Ce = {
      begin: b + `:(:)?(${f.join("|")})`,
      returnBegin: !0,
      contains: [pe]
    };
    return N.push(
      l.C_LINE_COMMENT_MODE,
      l.C_BLOCK_COMMENT_MODE,
      ae,
      Re,
      Ce,
      fe,
      pe,
      Y,
      c.FUNCTION_DISPATCH
    ), {
      name: "Less",
      case_insensitive: !0,
      illegal: `[=>'/<($"]`,
      contains: N
    };
  }
  return Pd = a, Pd;
}
var Fd, G$;
function ZR() {
  if (G$)
    return Fd;
  G$ = 1;
  function t(e) {
    const r = "[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*", n = "\\|[^]*?\\|", i = "(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?", s = {
      className: "literal",
      begin: "\\b(t{1}|nil)\\b"
    }, o = {
      className: "number",
      variants: [
        {
          begin: i,
          relevance: 0
        },
        { begin: "#(b|B)[0-1]+(/[0-1]+)?" },
        { begin: "#(o|O)[0-7]+(/[0-7]+)?" },
        { begin: "#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?" },
        {
          begin: "#(c|C)\\(" + i + " +" + i,
          end: "\\)"
        }
      ]
    }, a = e.inherit(e.QUOTE_STRING_MODE, { illegal: null }), l = e.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    ), c = {
      begin: "\\*",
      end: "\\*"
    }, f = {
      className: "symbol",
      begin: "[:&]" + r
    }, m = {
      begin: r,
      relevance: 0
    }, b = { begin: n }, N = {
      contains: [
        o,
        a,
        c,
        f,
        {
          begin: "\\(",
          end: "\\)",
          contains: [
            "self",
            s,
            a,
            o,
            m
          ]
        },
        m
      ],
      variants: [
        {
          begin: "['`]\\(",
          end: "\\)"
        },
        {
          begin: "\\(quote ",
          end: "\\)",
          keywords: { name: "quote" }
        },
        { begin: "'" + n }
      ]
    }, z = { variants: [
      { begin: "'" + r },
      { begin: "#'" + r + "(::" + r + ")*" }
    ] }, A = {
      begin: "\\(\\s*",
      end: "\\)"
    }, Q = {
      endsWithParent: !0,
      relevance: 0
    };
    return A.contains = [
      {
        className: "name",
        variants: [
          {
            begin: r,
            relevance: 0
          },
          { begin: n }
        ]
      },
      Q
    ], Q.contains = [
      N,
      z,
      A,
      s,
      o,
      a,
      l,
      c,
      f,
      b,
      m
    ], {
      name: "Lisp",
      illegal: /\S/,
      contains: [
        o,
        e.SHEBANG(),
        s,
        a,
        l,
        N,
        z,
        A,
        m
      ]
    };
  }
  return Fd = t, Fd;
}
var Bd, Y$;
function JR() {
  if (Y$)
    return Bd;
  Y$ = 1;
  function t(e) {
    const r = {
      className: "variable",
      variants: [
        { begin: "\\b([gtps][A-Z]{1}[a-zA-Z0-9]*)(\\[.+\\])?(?:\\s*?)" },
        { begin: "\\$_[A-Z]+" }
      ],
      relevance: 0
    }, n = [
      e.C_BLOCK_COMMENT_MODE,
      e.HASH_COMMENT_MODE,
      e.COMMENT("--", "$"),
      e.COMMENT("[^:]//", "$")
    ], i = e.inherit(e.TITLE_MODE, { variants: [
      { begin: "\\b_*rig[A-Z][A-Za-z0-9_\\-]*" },
      { begin: "\\b_[a-z0-9\\-]+" }
    ] }), s = e.inherit(e.TITLE_MODE, { begin: "\\b([A-Za-z0-9_\\-]+)\\b" });
    return {
      name: "LiveCode",
      case_insensitive: !1,
      keywords: {
        keyword: "$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph after byte bytes english the until http forever descending using line real8 with seventh for stdout finally element word words fourth before black ninth sixth characters chars stderr uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat end repeat URL in try into switch to words https token binfile each tenth as ticks tick system real4 by dateItems without char character ascending eighth whole dateTime numeric short first ftp integer abbreviated abbr abbrev private case while if div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within contains ends with begins the keys of keys",
        literal: "SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five quote empty one true return cr linefeed right backslash null seven tab three two RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK",
        built_in: "put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress constantNames cos date dateFormat decompress difference directories diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge messageAuthenticationCode messageDigest millisec millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process combine constant convert create new alias folder directory decrypt delete variable word line folder directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback libURLSetDriver libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime libURLSetStatusCallback load extension loadedExtensions multiply socket prepare process post seek rel relative read from process rename replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop subtract symmetric union unload vectorDotProduct wait write"
      },
      contains: [
        r,
        {
          className: "keyword",
          begin: "\\bend\\sif\\b"
        },
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            r,
            s,
            e.APOS_STRING_MODE,
            e.QUOTE_STRING_MODE,
            e.BINARY_NUMBER_MODE,
            e.C_NUMBER_MODE,
            i
          ]
        },
        {
          className: "function",
          begin: "\\bend\\s+",
          end: "$",
          keywords: "end",
          contains: [
            s,
            i
          ],
          relevance: 0
        },
        {
          beginKeywords: "command on",
          end: "$",
          contains: [
            r,
            s,
            e.APOS_STRING_MODE,
            e.QUOTE_STRING_MODE,
            e.BINARY_NUMBER_MODE,
            e.C_NUMBER_MODE,
            i
          ]
        },
        {
          className: "meta",
          variants: [
            {
              begin: "<\\?(rev|lc|livecode)",
              relevance: 10
            },
            { begin: "<\\?" },
            { begin: "\\?>" }
          ]
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.BINARY_NUMBER_MODE,
        e.C_NUMBER_MODE,
        i
      ].concat(n),
      illegal: ";$|^\\[|^=|&|\\{"
    };
  }
  return Bd = t, Bd;
}
var Ud, H$;
function ex() {
  if (H$)
    return Ud;
  H$ = 1;
  const t = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ], e = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], r = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], n = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], i = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], s = [].concat(
    i,
    r,
    n
  );
  function o(a) {
    const l = [
      "npm",
      "print"
    ], c = [
      "yes",
      "no",
      "on",
      "off",
      "it",
      "that",
      "void"
    ], f = [
      "then",
      "unless",
      "until",
      "loop",
      "of",
      "by",
      "when",
      "and",
      "or",
      "is",
      "isnt",
      "not",
      "it",
      "that",
      "otherwise",
      "from",
      "to",
      "til",
      "fallthrough",
      "case",
      "enum",
      "native",
      "list",
      "map",
      "__hasProp",
      "__extends",
      "__slice",
      "__bind",
      "__indexOf"
    ], m = {
      keyword: t.concat(f),
      literal: e.concat(c),
      built_in: s.concat(l)
    }, b = "[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*", C = a.inherit(a.TITLE_MODE, { begin: b }), N = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: m
    }, z = {
      className: "subst",
      begin: /#[A-Za-z$_]/,
      end: /(?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
      keywords: m
    }, A = [
      a.BINARY_NUMBER_MODE,
      {
        className: "number",
        begin: "(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)",
        relevance: 0,
        starts: {
          end: "(\\s*/)?",
          relevance: 0
        }
        // a number tries to eat the following slash to prevent treating it as a regexp
      },
      {
        className: "string",
        variants: [
          {
            begin: /'''/,
            end: /'''/,
            contains: [a.BACKSLASH_ESCAPE]
          },
          {
            begin: /'/,
            end: /'/,
            contains: [a.BACKSLASH_ESCAPE]
          },
          {
            begin: /"""/,
            end: /"""/,
            contains: [
              a.BACKSLASH_ESCAPE,
              N,
              z
            ]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              a.BACKSLASH_ESCAPE,
              N,
              z
            ]
          },
          {
            begin: /\\/,
            end: /(\s|$)/,
            excludeEnd: !0
          }
        ]
      },
      {
        className: "regexp",
        variants: [
          {
            begin: "//",
            end: "//[gim]*",
            contains: [
              N,
              a.HASH_COMMENT_MODE
            ]
          },
          {
            // regex can't start with space to parse x / 2 / 3 as two divisions
            // regex can't start with *, and it supports an "illegal" in the main mode
            begin: /\/(?![ *])(\\.|[^\\\n])*?\/[gim]*(?=\W)/
          }
        ]
      },
      { begin: "@" + b },
      {
        begin: "``",
        end: "``",
        excludeBegin: !0,
        excludeEnd: !0,
        subLanguage: "javascript"
      }
    ];
    N.contains = A;
    const Q = {
      className: "params",
      begin: "\\(",
      returnBegin: !0,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: m,
          contains: ["self"].concat(A)
        }
      ]
    }, Te = { begin: "(#=>|=>|\\|>>|-?->|!->)" }, ce = {
      variants: [
        { match: [
          /class\s+/,
          b,
          /\s+extends\s+/,
          b
        ] },
        { match: [
          /class\s+/,
          b
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: m
    };
    return {
      name: "LiveScript",
      aliases: ["ls"],
      keywords: m,
      illegal: /\/\*/,
      contains: A.concat([
        a.COMMENT("\\/\\*", "\\*\\/"),
        a.HASH_COMMENT_MODE,
        Te,
        // relevance booster
        {
          className: "function",
          contains: [
            C,
            Q
          ],
          returnBegin: !0,
          variants: [
            {
              begin: "(" + b + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B->\\*?",
              end: "->\\*?"
            },
            {
              begin: "(" + b + "\\s*(?:=|:=)\\s*)?!?(\\(.*\\)\\s*)?\\B[-~]{1,2}>\\*?",
              end: "[-~]{1,2}>\\*?"
            },
            {
              begin: "(" + b + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B!?[-~]{1,2}>\\*?",
              end: "!?[-~]{1,2}>\\*?"
            }
          ]
        },
        ce,
        {
          begin: b + ":",
          end: ":",
          returnBegin: !0,
          returnEnd: !0,
          relevance: 0
        }
      ])
    };
  }
  return Ud = o, Ud;
}
var qd, V$;
function tx() {
  if (V$)
    return qd;
  V$ = 1;
  function t(e) {
    const r = e.regex, n = /([-a-zA-Z$._][\w$.-]*)/, i = {
      className: "type",
      begin: /\bi\d+(?=\s|\b)/
    }, s = {
      className: "operator",
      relevance: 0,
      begin: /=/
    }, o = {
      className: "punctuation",
      relevance: 0,
      begin: /,/
    }, a = {
      className: "number",
      variants: [
        { begin: /[su]?0[xX][KMLHR]?[a-fA-F0-9]+/ },
        { begin: /[-+]?\d+(?:[.]\d+)?(?:[eE][-+]?\d+(?:[.]\d+)?)?/ }
      ],
      relevance: 0
    }, l = {
      className: "symbol",
      variants: [
        { begin: /^\s*[a-z]+:/ }
        // labels
      ],
      relevance: 0
    }, c = {
      className: "variable",
      variants: [
        { begin: r.concat(/%/, n) },
        { begin: /%\d+/ },
        { begin: /#\d+/ }
      ]
    }, f = {
      className: "title",
      variants: [
        { begin: r.concat(/@/, n) },
        { begin: /@\d+/ },
        { begin: r.concat(/!/, n) },
        { begin: r.concat(/!\d+/, n) },
        // https://llvm.org/docs/LangRef.html#namedmetadatastructure
        // obviously a single digit can also be used in this fashion
        { begin: /!\d+/ }
      ]
    };
    return {
      name: "LLVM IR",
      // TODO: split into different categories of keywords
      keywords: "begin end true false declare define global constant private linker_private internal available_externally linkonce linkonce_odr weak weak_odr appending dllimport dllexport common default hidden protected extern_weak external thread_local zeroinitializer undef null to tail target triple datalayout volatile nuw nsw nnan ninf nsz arcp fast exact inbounds align addrspace section alias module asm sideeffect gc dbg linker_private_weak attributes blockaddress initialexec localdynamic localexec prefix unnamed_addr ccc fastcc coldcc x86_stdcallcc x86_fastcallcc arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ptx_kernel intel_ocl_bicc msp430_intrcc spir_func spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc cc c signext zeroext inreg sret nounwind noreturn noalias nocapture byval nest readnone readonly inlinehint noinline alwaysinline optsize ssp sspreq noredzone noimplicitfloat naked builtin cold nobuiltin noduplicate nonlazybind optnone returns_twice sanitize_address sanitize_memory sanitize_thread sspstrong uwtable returned type opaque eq ne slt sgt sle sge ult ugt ule uge oeq one olt ogt ole oge ord uno ueq une x acq_rel acquire alignstack atomic catch cleanup filter inteldialect max min monotonic nand personality release seq_cst singlethread umax umin unordered xchg add fadd sub fsub mul fmul udiv sdiv fdiv urem srem frem shl lshr ashr and or xor icmp fcmp phi call trunc zext sext fptrunc fpext uitofp sitofp fptoui fptosi inttoptr ptrtoint bitcast addrspacecast select va_arg ret br switch invoke unwind unreachable indirectbr landingpad resume malloc alloca free load store getelementptr extractelement insertelement shufflevector getresult extractvalue insertvalue atomicrmw cmpxchg fence argmemonly double",
      contains: [
        i,
        // this matches "empty comments"...
        // ...because it's far more likely this is a statement terminator in
        // another language than an actual comment
        e.COMMENT(/;\s*$/, null, { relevance: 0 }),
        e.COMMENT(/;/, /$/),
        {
          className: "string",
          begin: /"/,
          end: /"/,
          contains: [
            {
              className: "char.escape",
              match: /\\\d\d/
            }
          ]
        },
        f,
        o,
        s,
        c,
        l,
        a
      ]
    };
  }
  return qd = t, qd;
}
var zd, W$;
function rx() {
  if (W$)
    return zd;
  W$ = 1;
  function t(e) {
    const n = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [{
        className: "subst",
        begin: /\\[tn"\\]/
      }]
    }, i = {
      className: "number",
      relevance: 0,
      begin: e.C_NUMBER_RE
    }, s = {
      className: "literal",
      variants: [
        { begin: "\\b(PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b" },
        { begin: "\\b(XP_ERROR_(EXPERIENCES_DISABLED|EXPERIENCE_(DISABLED|SUSPENDED)|INVALID_(EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(FOUND|PERMITTED(_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(_OBJECT)?|(DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(_(BY_(LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(PARCEL(_OWNER)?|REGION)))?|CAMERA_(PITCH|DISTANCE|BEHINDNESS_(ANGLE|LAG)|(FOCUS|POSITION)(_(THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(ROOT|SET|ALL_(OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(IVE|_(ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(FWD|BACK|(ROT_)?(LEFT|RIGHT)|UP|DOWN|(ML_)?LBUTTON)|PERMISSION_(RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(_START)?|TELEPORT|MEDIA)|OBJECT_(CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_(ATTACHED|ON_REZ)|NAME|DESC|POS|PRIM_(COUNT|EQUIVALENCE)|RETURN_(PARCEL(_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP(_TAG)?|CREATOR|ATTACHED_(POINT|SLOTS_AVAILABLE)|RENDER_WEIGHT|(BODY_SHAPE|PATHFINDING)_TYPE|(RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(MEMORY|TIME))|TYPE_(INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(DEBUG|PUBLIC)_CHANNEL|ATTACH_(AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](SHOULDER|HAND|FOOT|EAR|EYE|[UL](ARM|LEG)|HIP)|(LEFT|RIGHT)_PEC|HUD_(CENTER_[12]|TOP_(RIGHT|CENTER|LEFT)|BOTTOM(_(RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(BASE|TIP)|[LR]WING|FACE_(JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(ONLINE|NAME|BORN|SIM_(POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(ON_FILE|USED)|REMOTE_DATA_(CHANNEL|REQUEST|REPLY)|PSYS_(PART_(BF_(ZERO|ONE(_MINUS_(DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(START|END)_(COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(RIBBON|WIND|INTERP_(COLOR|SCALE)|BOUNCE|FOLLOW_(SRC|VELOCITY)|TARGET_(POS|LINEAR)|EMISSIVE)_MASK)|SRC_(MAX_AGE|PATTERN|ANGLE_(BEGIN|END)|BURST_(RATE|PART_COUNT|RADIUS|SPEED_(MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(DROP|EXPLODE|ANGLE(_CONE(_EMPTY)?)?)))|VEHICLE_(REFERENCE_FRAME|TYPE_(NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(LINEAR|ANGULAR)_(FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(LINEAR|ANGULAR)_(DEFLECTION_(EFFICIENCY|TIMESCALE)|MOTOR_(DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(EFFICIENCY|TIMESCALE)|BANKING_(EFFICIENCY|MIX|TIMESCALE)|FLAG_(NO_DEFLECTION_UP|LIMIT_(ROLL_ONLY|MOTOR_UP)|HOVER_((WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(ALLOW_UNSIT|ALPHA_MODE(_(BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(_(BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(_(STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(NONE|LOW|MEDIUM|HIGH)|BUMP_(NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(DEFAULT|PLANAR)|SCRIPTED_SIT_ONLY|SCULPT_(TYPE_(SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(MIRROR|INVERT))|PHYSICS(_(SHAPE_(CONVEX|NONE|PRIM|TYPE)))?|(POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIT_TARGET|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(ALT_IMAGE_ENABLE|CONTROLS|(CURRENT|HOME)_URL|AUTO_(LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(WIDTH|HEIGHT)_PIXELS|WHITELIST(_ENABLE)?|PERMS_(INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(STANDARD|MINI)|PERM_(NONE|OWNER|GROUP|ANYONE)|MAX_(URL_LENGTH|WHITELIST_(SIZE|COUNT)|(WIDTH|HEIGHT)_PIXELS)))|MASK_(BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(MEDIA_COMMAND_(STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(ALLOW_(FLY|(GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(GROUP_)?OBJECTS)|USE_(ACCESS_(GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(GROUP|ALL)_OBJECT_ENTRY)|COUNT_(TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(HIDE|DEFAULT)|REGION_FLAG_(ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(METHOD|MIMETYPE|BODY_(MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|SIT_(INVALID_(AGENT|LINK_OBJECT)|NO(T_EXPERIENCE|_(ACCESS|EXPERIENCE_PERMISSION|SIT_TARGET)))|STRING_(TRIM(_(HEAD|TAIL))?)|CLICK_ACTION_(NONE|TOUCH|SIT|BUY|PAY|OPEN(_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(NONE|SCRIPT_MEMORY)|RC_(DATA_FLAGS|DETECT_PHANTOM|GET_(LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(TYPES|AGENTS|(NON)?PHYSICAL|LAND))|RCERR_(CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(ALLOWED_(AGENT|GROUP)_(ADD|REMOVE)|BANNED_AGENT_(ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(COMMAND|CMD_(PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(CMD_((SMOOTH_)?STOP|JUMP)|DESIRED_(TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(_([ABCD]|NONE))?|MAX_(DECEL|TURN_RADIUS|(ACCEL|SPEED)))|PURSUIT_(OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(EVADE_(HIDDEN|SPOTTED)|FAILURE_(DYNAMIC_PATHFINDING_DISABLED|INVALID_(GOAL|START)|NO_(NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(PARCEL_)?UNREACHABLE)|(GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(_(FAST|NONE|SLOW))?|CONTENT_TYPE_(ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(RADIUS|STATIC)|(PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b" },
        { begin: "\\b(FALSE|TRUE)\\b" },
        { begin: "\\b(ZERO_ROTATION)\\b" },
        { begin: "\\b(EOF|JSON_(ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(GRANTED|DENIED))\\b" },
        { begin: "\\b(ZERO_VECTOR|TOUCH_INVALID_(TEXCOORD|VECTOR))\\b" }
      ]
    }, o = {
      className: "built_in",
      begin: "\\b(ll(AgentInExperience|(Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(Details|ErrorMessage)|ReturnObjectsBy(ID|Owner)|Json(2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(Mag|Norm|Dist)|Rot(Between|2(Euler|Fwd|Left|Up))|(Euler|Axes)2Rot|Whisper|(Region|Owner)?Say|Shout|Listen(Control|Remove)?|Sensor(Repeat|Remove)?|Detected(Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|([GS]et)(AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(Scale|Offset|Rotate)Texture|(Rot)?Target(Remove)?|(Stop)?MoveToTarget|Apply(Rotational)?Impulse|Set(KeyframedMotion|ContentType|RegionPos|(Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(Queueing|Radius)|Vehicle(Type|(Float|Vector|Rotation)Param)|(Touch|Sit)?Text|Camera(Eye|At)Offset|PrimitiveParams|ClickAction|Link(Alpha|Color|PrimitiveParams(Fast)?|Texture(Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get((Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(PrimitiveParams|Number(OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(Details|PermMask|PrimCount)|Parcel(MaxPrims|Details|Prim(Count|Owners))|Attached(List)?|(SPMax|Free|Used)Memory|Region(Name|TimeDilation|FPS|Corner|AgentCount)|Root(Position|Rotation)|UnixTime|(Parcel|Region)Flags|(Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(Prims|NotecardLines|Sides)|Animation(List)?|(Camera|Local)(Pos|Rot)|Vel|Accel|Omega|Time(stamp|OfDay)|(Object|CenterOf)?Mass|MassMKS|Energy|Owner|(Owner)?Key|SunDirection|Texture(Offset|Scale|Rot)|Inventory(Number|Name|Key|Type|Creator|PermMask)|Permissions(Key)?|StartParameter|List(Length|EntryType)|Date|Agent(Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(Name|State))|(Get|Reset|GetAndReset)Time|PlaySound(Slave)?|LoopSound(Master|Slave)?|(Trigger|Stop|Preload)Sound|((Get|Delete)Sub|Insert)String|To(Upper|Lower)|Give(InventoryList|Money)|RezObject|(Stop)?LookAt|Sleep|CollisionFilter|(Take|Release)Controls|DetachFromAvatar|AttachToAvatar(Temp)?|InstantMessage|(GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(Length|Trim)|(Start|Stop)Animation|TargetOmega|Request(Experience)?Permissions|(Create|Break)Link|BreakAllLinks|(Give|Remove)Inventory|Water|PassTouches|Request(Agent|Inventory)Data|TeleportAgent(Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(Axis|Angle)|A(cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(CSV|Integer|Json|Float|String|Key|Vector|Rot|List(Strided)?)|DeleteSubList|List(Statistics|Sort|Randomize|(Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(Slope|Normal|Contour)|GroundRepel|(Set|Remove)VehicleFlags|SitOnLink|(AvatarOn)?(Link)?SitTarget|Script(Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(Integer|String)ToBase64|XorBase64|Log(10)?|Base64To(String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(Load|Release|(E|Une)scape)URL|ParcelMedia(CommandList|Query)|ModPow|MapDestination|(RemoveFrom|AddTo|Reset)Land(Pass|Ban)List|(Set|Clear)CameraParams|HTTP(Request|Response)|TextBox|DetectedTouch(UV|Face|Pos|(N|Bin)ormal|ST)|(MD5|SHA1|DumpList2)String|Request(Secure)?URL|Clear(Prim|Link)Media|(Link)?ParticleSystem|(Get|Request)(Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b"
    };
    return {
      name: "LSL (Linden Scripting Language)",
      illegal: ":",
      contains: [
        n,
        {
          className: "comment",
          variants: [
            e.COMMENT("//", "$"),
            e.COMMENT("/\\*", "\\*/")
          ],
          relevance: 0
        },
        i,
        {
          className: "section",
          variants: [
            { begin: "\\b(state|default)\\b" },
            { begin: "\\b(state_(entry|exit)|touch(_(start|end))?|(land_)?collision(_(start|end))?|timer|listen|(no_)?sensor|control|(not_)?at_(rot_)?target|money|email|experience_permissions(_denied)?|run_time_permissions|changed|attach|dataserver|moving_(start|end)|link_message|(on|object)_rez|remote_data|http_re(sponse|quest)|path_update|transaction_result)\\b" }
          ]
        },
        o,
        s,
        {
          className: "type",
          begin: "\\b(integer|float|string|key|vector|quaternion|rotation|list)\\b"
        }
      ]
    };
  }
  return zd = t, zd;
}
var Gd, K$;
function nx() {
  if (K$)
    return Gd;
  K$ = 1;
  function t(e) {
    const r = "\\[=*\\[", n = "\\]=*\\]", i = {
      begin: r,
      end: n,
      contains: ["self"]
    }, s = [
      e.COMMENT("--(?!" + r + ")", "$"),
      e.COMMENT(
        "--" + r,
        n,
        {
          contains: [i],
          relevance: 10
        }
      )
    ];
    return {
      name: "Lua",
      keywords: {
        $pattern: e.UNDERSCORE_IDENT_RE,
        literal: "true false nil",
        keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
        built_in: (
          // Metatags and globals:
          "_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"
        )
      },
      contains: s.concat([
        {
          className: "function",
          beginKeywords: "function",
          end: "\\)",
          contains: [
            e.inherit(e.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
            {
              className: "params",
              begin: "\\(",
              endsWithParent: !0,
              contains: s
            }
          ].concat(s)
        },
        e.C_NUMBER_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: r,
          end: n,
          contains: [i],
          relevance: 5
        }
      ])
    };
  }
  return Gd = t, Gd;
}
var Yd, Q$;
function ix() {
  if (Q$)
    return Yd;
  Q$ = 1;
  function t(e) {
    const r = {
      className: "variable",
      variants: [
        {
          begin: "\\$\\(" + e.UNDERSCORE_IDENT_RE + "\\)",
          contains: [e.BACKSLASH_ESCAPE]
        },
        { begin: /\$[@%<?\^\+\*]/ }
      ]
    }, n = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        e.BACKSLASH_ESCAPE,
        r
      ]
    }, i = {
      className: "variable",
      begin: /\$\([\w-]+\s/,
      end: /\)/,
      keywords: { built_in: "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value" },
      contains: [r]
    }, s = { begin: "^" + e.UNDERSCORE_IDENT_RE + "\\s*(?=[:+?]?=)" }, o = {
      className: "meta",
      begin: /^\.PHONY:/,
      end: /$/,
      keywords: {
        $pattern: /[\.\w]+/,
        keyword: ".PHONY"
      }
    }, a = {
      className: "section",
      begin: /^[^\s]+:/,
      end: /$/,
      contains: [r]
    };
    return {
      name: "Makefile",
      aliases: [
        "mk",
        "mak",
        "make"
      ],
      keywords: {
        $pattern: /[\w-]+/,
        keyword: "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"
      },
      contains: [
        e.HASH_COMMENT_MODE,
        r,
        n,
        i,
        s,
        o,
        a
      ]
    };
  }
  return Yd = t, Yd;
}
var Hd, j$;
function sx() {
  if (j$)
    return Hd;
  j$ = 1;
  const t = [
    "AASTriangle",
    "AbelianGroup",
    "Abort",
    "AbortKernels",
    "AbortProtect",
    "AbortScheduledTask",
    "Above",
    "Abs",
    "AbsArg",
    "AbsArgPlot",
    "Absolute",
    "AbsoluteCorrelation",
    "AbsoluteCorrelationFunction",
    "AbsoluteCurrentValue",
    "AbsoluteDashing",
    "AbsoluteFileName",
    "AbsoluteOptions",
    "AbsolutePointSize",
    "AbsoluteThickness",
    "AbsoluteTime",
    "AbsoluteTiming",
    "AcceptanceThreshold",
    "AccountingForm",
    "Accumulate",
    "Accuracy",
    "AccuracyGoal",
    "AcousticAbsorbingValue",
    "AcousticImpedanceValue",
    "AcousticNormalVelocityValue",
    "AcousticPDEComponent",
    "AcousticPressureCondition",
    "AcousticRadiationValue",
    "AcousticSoundHardValue",
    "AcousticSoundSoftCondition",
    "ActionDelay",
    "ActionMenu",
    "ActionMenuBox",
    "ActionMenuBoxOptions",
    "Activate",
    "Active",
    "ActiveClassification",
    "ActiveClassificationObject",
    "ActiveItem",
    "ActivePrediction",
    "ActivePredictionObject",
    "ActiveStyle",
    "AcyclicGraphQ",
    "AddOnHelpPath",
    "AddSides",
    "AddTo",
    "AddToSearchIndex",
    "AddUsers",
    "AdjacencyGraph",
    "AdjacencyList",
    "AdjacencyMatrix",
    "AdjacentMeshCells",
    "Adjugate",
    "AdjustmentBox",
    "AdjustmentBoxOptions",
    "AdjustTimeSeriesForecast",
    "AdministrativeDivisionData",
    "AffineHalfSpace",
    "AffineSpace",
    "AffineStateSpaceModel",
    "AffineTransform",
    "After",
    "AggregatedEntityClass",
    "AggregationLayer",
    "AircraftData",
    "AirportData",
    "AirPressureData",
    "AirSoundAttenuation",
    "AirTemperatureData",
    "AiryAi",
    "AiryAiPrime",
    "AiryAiZero",
    "AiryBi",
    "AiryBiPrime",
    "AiryBiZero",
    "AlgebraicIntegerQ",
    "AlgebraicNumber",
    "AlgebraicNumberDenominator",
    "AlgebraicNumberNorm",
    "AlgebraicNumberPolynomial",
    "AlgebraicNumberTrace",
    "AlgebraicRules",
    "AlgebraicRulesData",
    "Algebraics",
    "AlgebraicUnitQ",
    "Alignment",
    "AlignmentMarker",
    "AlignmentPoint",
    "All",
    "AllowAdultContent",
    "AllowChatServices",
    "AllowedCloudExtraParameters",
    "AllowedCloudParameterExtensions",
    "AllowedDimensions",
    "AllowedFrequencyRange",
    "AllowedHeads",
    "AllowGroupClose",
    "AllowIncomplete",
    "AllowInlineCells",
    "AllowKernelInitialization",
    "AllowLooseGrammar",
    "AllowReverseGroupClose",
    "AllowScriptLevelChange",
    "AllowVersionUpdate",
    "AllTrue",
    "Alphabet",
    "AlphabeticOrder",
    "AlphabeticSort",
    "AlphaChannel",
    "AlternateImage",
    "AlternatingFactorial",
    "AlternatingGroup",
    "AlternativeHypothesis",
    "Alternatives",
    "AltitudeMethod",
    "AmbientLight",
    "AmbiguityFunction",
    "AmbiguityList",
    "Analytic",
    "AnatomyData",
    "AnatomyForm",
    "AnatomyPlot3D",
    "AnatomySkinStyle",
    "AnatomyStyling",
    "AnchoredSearch",
    "And",
    "AndersonDarlingTest",
    "AngerJ",
    "AngleBisector",
    "AngleBracket",
    "AnglePath",
    "AnglePath3D",
    "AngleVector",
    "AngularGauge",
    "Animate",
    "AnimatedImage",
    "AnimationCycleOffset",
    "AnimationCycleRepetitions",
    "AnimationDirection",
    "AnimationDisplayTime",
    "AnimationRate",
    "AnimationRepetitions",
    "AnimationRunning",
    "AnimationRunTime",
    "AnimationTimeIndex",
    "AnimationVideo",
    "Animator",
    "AnimatorBox",
    "AnimatorBoxOptions",
    "AnimatorElements",
    "Annotate",
    "Annotation",
    "AnnotationDelete",
    "AnnotationKeys",
    "AnnotationRules",
    "AnnotationValue",
    "Annuity",
    "AnnuityDue",
    "Annulus",
    "AnomalyDetection",
    "AnomalyDetector",
    "AnomalyDetectorFunction",
    "Anonymous",
    "Antialiasing",
    "Antihermitian",
    "AntihermitianMatrixQ",
    "Antisymmetric",
    "AntisymmetricMatrixQ",
    "Antonyms",
    "AnyOrder",
    "AnySubset",
    "AnyTrue",
    "Apart",
    "ApartSquareFree",
    "APIFunction",
    "Appearance",
    "AppearanceElements",
    "AppearanceRules",
    "AppellF1",
    "Append",
    "AppendCheck",
    "AppendLayer",
    "AppendTo",
    "Application",
    "Apply",
    "ApplyReaction",
    "ApplySides",
    "ApplyTo",
    "ArcCos",
    "ArcCosh",
    "ArcCot",
    "ArcCoth",
    "ArcCsc",
    "ArcCsch",
    "ArcCurvature",
    "ARCHProcess",
    "ArcLength",
    "ArcSec",
    "ArcSech",
    "ArcSin",
    "ArcSinDistribution",
    "ArcSinh",
    "ArcTan",
    "ArcTanh",
    "Area",
    "Arg",
    "ArgMax",
    "ArgMin",
    "ArgumentCountQ",
    "ArgumentsOptions",
    "ARIMAProcess",
    "ArithmeticGeometricMean",
    "ARMAProcess",
    "Around",
    "AroundReplace",
    "ARProcess",
    "Array",
    "ArrayComponents",
    "ArrayDepth",
    "ArrayFilter",
    "ArrayFlatten",
    "ArrayMesh",
    "ArrayPad",
    "ArrayPlot",
    "ArrayPlot3D",
    "ArrayQ",
    "ArrayReduce",
    "ArrayResample",
    "ArrayReshape",
    "ArrayRules",
    "Arrays",
    "Arrow",
    "Arrow3DBox",
    "ArrowBox",
    "Arrowheads",
    "ASATriangle",
    "Ask",
    "AskAppend",
    "AskConfirm",
    "AskDisplay",
    "AskedQ",
    "AskedValue",
    "AskFunction",
    "AskState",
    "AskTemplateDisplay",
    "AspectRatio",
    "AspectRatioFixed",
    "Assert",
    "AssessmentFunction",
    "AssessmentResultObject",
    "AssociateTo",
    "Association",
    "AssociationFormat",
    "AssociationMap",
    "AssociationQ",
    "AssociationThread",
    "AssumeDeterministic",
    "Assuming",
    "Assumptions",
    "AstroAngularSeparation",
    "AstroBackground",
    "AstroCenter",
    "AstroDistance",
    "AstroGraphics",
    "AstroGridLines",
    "AstroGridLinesStyle",
    "AstronomicalData",
    "AstroPosition",
    "AstroProjection",
    "AstroRange",
    "AstroRangePadding",
    "AstroReferenceFrame",
    "AstroStyling",
    "AstroZoomLevel",
    "Asymptotic",
    "AsymptoticDSolveValue",
    "AsymptoticEqual",
    "AsymptoticEquivalent",
    "AsymptoticExpectation",
    "AsymptoticGreater",
    "AsymptoticGreaterEqual",
    "AsymptoticIntegrate",
    "AsymptoticLess",
    "AsymptoticLessEqual",
    "AsymptoticOutputTracker",
    "AsymptoticProbability",
    "AsymptoticProduct",
    "AsymptoticRSolveValue",
    "AsymptoticSolve",
    "AsymptoticSum",
    "Asynchronous",
    "AsynchronousTaskObject",
    "AsynchronousTasks",
    "Atom",
    "AtomCoordinates",
    "AtomCount",
    "AtomDiagramCoordinates",
    "AtomLabels",
    "AtomLabelStyle",
    "AtomList",
    "AtomQ",
    "AttachCell",
    "AttachedCell",
    "AttentionLayer",
    "Attributes",
    "Audio",
    "AudioAmplify",
    "AudioAnnotate",
    "AudioAnnotationLookup",
    "AudioBlockMap",
    "AudioCapture",
    "AudioChannelAssignment",
    "AudioChannelCombine",
    "AudioChannelMix",
    "AudioChannels",
    "AudioChannelSeparate",
    "AudioData",
    "AudioDelay",
    "AudioDelete",
    "AudioDevice",
    "AudioDistance",
    "AudioEncoding",
    "AudioFade",
    "AudioFrequencyShift",
    "AudioGenerator",
    "AudioIdentify",
    "AudioInputDevice",
    "AudioInsert",
    "AudioInstanceQ",
    "AudioIntervals",
    "AudioJoin",
    "AudioLabel",
    "AudioLength",
    "AudioLocalMeasurements",
    "AudioLooping",
    "AudioLoudness",
    "AudioMeasurements",
    "AudioNormalize",
    "AudioOutputDevice",
    "AudioOverlay",
    "AudioPad",
    "AudioPan",
    "AudioPartition",
    "AudioPause",
    "AudioPitchShift",
    "AudioPlay",
    "AudioPlot",
    "AudioQ",
    "AudioRecord",
    "AudioReplace",
    "AudioResample",
    "AudioReverb",
    "AudioReverse",
    "AudioSampleRate",
    "AudioSpectralMap",
    "AudioSpectralTransformation",
    "AudioSplit",
    "AudioStop",
    "AudioStream",
    "AudioStreams",
    "AudioTimeStretch",
    "AudioTrackApply",
    "AudioTrackSelection",
    "AudioTrim",
    "AudioType",
    "AugmentedPolyhedron",
    "AugmentedSymmetricPolynomial",
    "Authenticate",
    "Authentication",
    "AuthenticationDialog",
    "AutoAction",
    "Autocomplete",
    "AutocompletionFunction",
    "AutoCopy",
    "AutocorrelationTest",
    "AutoDelete",
    "AutoEvaluateEvents",
    "AutoGeneratedPackage",
    "AutoIndent",
    "AutoIndentSpacings",
    "AutoItalicWords",
    "AutoloadPath",
    "AutoMatch",
    "Automatic",
    "AutomaticImageSize",
    "AutoMultiplicationSymbol",
    "AutoNumberFormatting",
    "AutoOpenNotebooks",
    "AutoOpenPalettes",
    "AutoOperatorRenderings",
    "AutoQuoteCharacters",
    "AutoRefreshed",
    "AutoRemove",
    "AutorunSequencing",
    "AutoScaling",
    "AutoScroll",
    "AutoSpacing",
    "AutoStyleOptions",
    "AutoStyleWords",
    "AutoSubmitting",
    "Axes",
    "AxesEdge",
    "AxesLabel",
    "AxesOrigin",
    "AxesStyle",
    "AxiomaticTheory",
    "Axis",
    "Axis3DBox",
    "Axis3DBoxOptions",
    "AxisBox",
    "AxisBoxOptions",
    "AxisLabel",
    "AxisObject",
    "AxisStyle",
    "BabyMonsterGroupB",
    "Back",
    "BackFaceColor",
    "BackFaceGlowColor",
    "BackFaceOpacity",
    "BackFaceSpecularColor",
    "BackFaceSpecularExponent",
    "BackFaceSurfaceAppearance",
    "BackFaceTexture",
    "Background",
    "BackgroundAppearance",
    "BackgroundTasksSettings",
    "Backslash",
    "Backsubstitution",
    "Backward",
    "Ball",
    "Band",
    "BandpassFilter",
    "BandstopFilter",
    "BarabasiAlbertGraphDistribution",
    "BarChart",
    "BarChart3D",
    "BarcodeImage",
    "BarcodeRecognize",
    "BaringhausHenzeTest",
    "BarLegend",
    "BarlowProschanImportance",
    "BarnesG",
    "BarOrigin",
    "BarSpacing",
    "BartlettHannWindow",
    "BartlettWindow",
    "BaseDecode",
    "BaseEncode",
    "BaseForm",
    "Baseline",
    "BaselinePosition",
    "BaseStyle",
    "BasicRecurrentLayer",
    "BatchNormalizationLayer",
    "BatchSize",
    "BatesDistribution",
    "BattleLemarieWavelet",
    "BayesianMaximization",
    "BayesianMaximizationObject",
    "BayesianMinimization",
    "BayesianMinimizationObject",
    "Because",
    "BeckmannDistribution",
    "Beep",
    "Before",
    "Begin",
    "BeginDialogPacket",
    "BeginPackage",
    "BellB",
    "BellY",
    "Below",
    "BenfordDistribution",
    "BeniniDistribution",
    "BenktanderGibratDistribution",
    "BenktanderWeibullDistribution",
    "BernoulliB",
    "BernoulliDistribution",
    "BernoulliGraphDistribution",
    "BernoulliProcess",
    "BernsteinBasis",
    "BesagL",
    "BesselFilterModel",
    "BesselI",
    "BesselJ",
    "BesselJZero",
    "BesselK",
    "BesselY",
    "BesselYZero",
    "Beta",
    "BetaBinomialDistribution",
    "BetaDistribution",
    "BetaNegativeBinomialDistribution",
    "BetaPrimeDistribution",
    "BetaRegularized",
    "Between",
    "BetweennessCentrality",
    "Beveled",
    "BeveledPolyhedron",
    "BezierCurve",
    "BezierCurve3DBox",
    "BezierCurve3DBoxOptions",
    "BezierCurveBox",
    "BezierCurveBoxOptions",
    "BezierFunction",
    "BilateralFilter",
    "BilateralLaplaceTransform",
    "BilateralZTransform",
    "Binarize",
    "BinaryDeserialize",
    "BinaryDistance",
    "BinaryFormat",
    "BinaryImageQ",
    "BinaryRead",
    "BinaryReadList",
    "BinarySerialize",
    "BinaryWrite",
    "BinCounts",
    "BinLists",
    "BinnedVariogramList",
    "Binomial",
    "BinomialDistribution",
    "BinomialPointProcess",
    "BinomialProcess",
    "BinormalDistribution",
    "BiorthogonalSplineWavelet",
    "BioSequence",
    "BioSequenceBackTranslateList",
    "BioSequenceComplement",
    "BioSequenceInstances",
    "BioSequenceModify",
    "BioSequencePlot",
    "BioSequenceQ",
    "BioSequenceReverseComplement",
    "BioSequenceTranscribe",
    "BioSequenceTranslate",
    "BipartiteGraphQ",
    "BiquadraticFilterModel",
    "BirnbaumImportance",
    "BirnbaumSaundersDistribution",
    "BitAnd",
    "BitClear",
    "BitGet",
    "BitLength",
    "BitNot",
    "BitOr",
    "BitRate",
    "BitSet",
    "BitShiftLeft",
    "BitShiftRight",
    "BitXor",
    "BiweightLocation",
    "BiweightMidvariance",
    "Black",
    "BlackmanHarrisWindow",
    "BlackmanNuttallWindow",
    "BlackmanWindow",
    "Blank",
    "BlankForm",
    "BlankNullSequence",
    "BlankSequence",
    "Blend",
    "Block",
    "BlockchainAddressData",
    "BlockchainBase",
    "BlockchainBlockData",
    "BlockchainContractValue",
    "BlockchainData",
    "BlockchainGet",
    "BlockchainKeyEncode",
    "BlockchainPut",
    "BlockchainTokenData",
    "BlockchainTransaction",
    "BlockchainTransactionData",
    "BlockchainTransactionSign",
    "BlockchainTransactionSubmit",
    "BlockDiagonalMatrix",
    "BlockLowerTriangularMatrix",
    "BlockMap",
    "BlockRandom",
    "BlockUpperTriangularMatrix",
    "BlomqvistBeta",
    "BlomqvistBetaTest",
    "Blue",
    "Blur",
    "Blurring",
    "BodePlot",
    "BohmanWindow",
    "Bold",
    "Bond",
    "BondCount",
    "BondLabels",
    "BondLabelStyle",
    "BondList",
    "BondQ",
    "Bookmarks",
    "Boole",
    "BooleanConsecutiveFunction",
    "BooleanConvert",
    "BooleanCountingFunction",
    "BooleanFunction",
    "BooleanGraph",
    "BooleanMaxterms",
    "BooleanMinimize",
    "BooleanMinterms",
    "BooleanQ",
    "BooleanRegion",
    "Booleans",
    "BooleanStrings",
    "BooleanTable",
    "BooleanVariables",
    "BorderDimensions",
    "BorelTannerDistribution",
    "Bottom",
    "BottomHatTransform",
    "BoundaryDiscretizeGraphics",
    "BoundaryDiscretizeRegion",
    "BoundaryMesh",
    "BoundaryMeshRegion",
    "BoundaryMeshRegionQ",
    "BoundaryStyle",
    "BoundedRegionQ",
    "BoundingRegion",
    "Bounds",
    "Box",
    "BoxBaselineShift",
    "BoxData",
    "BoxDimensions",
    "Boxed",
    "Boxes",
    "BoxForm",
    "BoxFormFormatTypes",
    "BoxFrame",
    "BoxID",
    "BoxMargins",
    "BoxMatrix",
    "BoxObject",
    "BoxRatios",
    "BoxRotation",
    "BoxRotationPoint",
    "BoxStyle",
    "BoxWhiskerChart",
    "Bra",
    "BracketingBar",
    "BraKet",
    "BrayCurtisDistance",
    "BreadthFirstScan",
    "Break",
    "BridgeData",
    "BrightnessEqualize",
    "BroadcastStationData",
    "Brown",
    "BrownForsytheTest",
    "BrownianBridgeProcess",
    "BrowserCategory",
    "BSplineBasis",
    "BSplineCurve",
    "BSplineCurve3DBox",
    "BSplineCurve3DBoxOptions",
    "BSplineCurveBox",
    "BSplineCurveBoxOptions",
    "BSplineFunction",
    "BSplineSurface",
    "BSplineSurface3DBox",
    "BSplineSurface3DBoxOptions",
    "BubbleChart",
    "BubbleChart3D",
    "BubbleScale",
    "BubbleSizes",
    "BuckyballGraph",
    "BuildCompiledComponent",
    "BuildingData",
    "BulletGauge",
    "BusinessDayQ",
    "ButterflyGraph",
    "ButterworthFilterModel",
    "Button",
    "ButtonBar",
    "ButtonBox",
    "ButtonBoxOptions",
    "ButtonCell",
    "ButtonContents",
    "ButtonData",
    "ButtonEvaluator",
    "ButtonExpandable",
    "ButtonFrame",
    "ButtonFunction",
    "ButtonMargins",
    "ButtonMinHeight",
    "ButtonNote",
    "ButtonNotebook",
    "ButtonSource",
    "ButtonStyle",
    "ButtonStyleMenuListing",
    "Byte",
    "ByteArray",
    "ByteArrayFormat",
    "ByteArrayFormatQ",
    "ByteArrayQ",
    "ByteArrayToString",
    "ByteCount",
    "ByteOrdering",
    "C",
    "CachedValue",
    "CacheGraphics",
    "CachePersistence",
    "CalendarConvert",
    "CalendarData",
    "CalendarType",
    "Callout",
    "CalloutMarker",
    "CalloutStyle",
    "CallPacket",
    "CanberraDistance",
    "Cancel",
    "CancelButton",
    "CandlestickChart",
    "CanonicalGraph",
    "CanonicalizePolygon",
    "CanonicalizePolyhedron",
    "CanonicalizeRegion",
    "CanonicalName",
    "CanonicalWarpingCorrespondence",
    "CanonicalWarpingDistance",
    "CantorMesh",
    "CantorStaircase",
    "Canvas",
    "Cap",
    "CapForm",
    "CapitalDifferentialD",
    "Capitalize",
    "CapsuleShape",
    "CaptureRunning",
    "CaputoD",
    "CardinalBSplineBasis",
    "CarlemanLinearize",
    "CarlsonRC",
    "CarlsonRD",
    "CarlsonRE",
    "CarlsonRF",
    "CarlsonRG",
    "CarlsonRJ",
    "CarlsonRK",
    "CarlsonRM",
    "CarmichaelLambda",
    "CaseOrdering",
    "Cases",
    "CaseSensitive",
    "Cashflow",
    "Casoratian",
    "Cast",
    "Catalan",
    "CatalanNumber",
    "Catch",
    "CategoricalDistribution",
    "Catenate",
    "CatenateLayer",
    "CauchyDistribution",
    "CauchyMatrix",
    "CauchyPointProcess",
    "CauchyWindow",
    "CayleyGraph",
    "CDF",
    "CDFDeploy",
    "CDFInformation",
    "CDFWavelet",
    "Ceiling",
    "CelestialSystem",
    "Cell",
    "CellAutoOverwrite",
    "CellBaseline",
    "CellBoundingBox",
    "CellBracketOptions",
    "CellChangeTimes",
    "CellContents",
    "CellContext",
    "CellDingbat",
    "CellDingbatMargin",
    "CellDynamicExpression",
    "CellEditDuplicate",
    "CellElementsBoundingBox",
    "CellElementSpacings",
    "CellEpilog",
    "CellEvaluationDuplicate",
    "CellEvaluationFunction",
    "CellEvaluationLanguage",
    "CellEventActions",
    "CellFrame",
    "CellFrameColor",
    "CellFrameLabelMargins",
    "CellFrameLabels",
    "CellFrameMargins",
    "CellFrameStyle",
    "CellGroup",
    "CellGroupData",
    "CellGrouping",
    "CellGroupingRules",
    "CellHorizontalScrolling",
    "CellID",
    "CellInsertionPointCell",
    "CellLabel",
    "CellLabelAutoDelete",
    "CellLabelMargins",
    "CellLabelPositioning",
    "CellLabelStyle",
    "CellLabelTemplate",
    "CellMargins",
    "CellObject",
    "CellOpen",
    "CellPrint",
    "CellProlog",
    "Cells",
    "CellSize",
    "CellStyle",
    "CellTags",
    "CellTrayPosition",
    "CellTrayWidgets",
    "CellularAutomaton",
    "CensoredDistribution",
    "Censoring",
    "Center",
    "CenterArray",
    "CenterDot",
    "CenteredInterval",
    "CentralFeature",
    "CentralMoment",
    "CentralMomentGeneratingFunction",
    "Cepstrogram",
    "CepstrogramArray",
    "CepstrumArray",
    "CForm",
    "ChampernowneNumber",
    "ChangeOptions",
    "ChannelBase",
    "ChannelBrokerAction",
    "ChannelDatabin",
    "ChannelHistoryLength",
    "ChannelListen",
    "ChannelListener",
    "ChannelListeners",
    "ChannelListenerWait",
    "ChannelObject",
    "ChannelPreSendFunction",
    "ChannelReceiverFunction",
    "ChannelSend",
    "ChannelSubscribers",
    "ChanVeseBinarize",
    "Character",
    "CharacterCounts",
    "CharacterEncoding",
    "CharacterEncodingsPath",
    "CharacteristicFunction",
    "CharacteristicPolynomial",
    "CharacterName",
    "CharacterNormalize",
    "CharacterRange",
    "Characters",
    "ChartBaseStyle",
    "ChartElementData",
    "ChartElementDataFunction",
    "ChartElementFunction",
    "ChartElements",
    "ChartLabels",
    "ChartLayout",
    "ChartLegends",
    "ChartStyle",
    "Chebyshev1FilterModel",
    "Chebyshev2FilterModel",
    "ChebyshevDistance",
    "ChebyshevT",
    "ChebyshevU",
    "Check",
    "CheckAbort",
    "CheckAll",
    "CheckArguments",
    "Checkbox",
    "CheckboxBar",
    "CheckboxBox",
    "CheckboxBoxOptions",
    "ChemicalConvert",
    "ChemicalData",
    "ChemicalFormula",
    "ChemicalInstance",
    "ChemicalReaction",
    "ChessboardDistance",
    "ChiDistribution",
    "ChineseRemainder",
    "ChiSquareDistribution",
    "ChoiceButtons",
    "ChoiceDialog",
    "CholeskyDecomposition",
    "Chop",
    "ChromaticityPlot",
    "ChromaticityPlot3D",
    "ChromaticPolynomial",
    "Circle",
    "CircleBox",
    "CircleDot",
    "CircleMinus",
    "CirclePlus",
    "CirclePoints",
    "CircleThrough",
    "CircleTimes",
    "CirculantGraph",
    "CircularArcThrough",
    "CircularOrthogonalMatrixDistribution",
    "CircularQuaternionMatrixDistribution",
    "CircularRealMatrixDistribution",
    "CircularSymplecticMatrixDistribution",
    "CircularUnitaryMatrixDistribution",
    "Circumsphere",
    "CityData",
    "ClassifierFunction",
    "ClassifierInformation",
    "ClassifierMeasurements",
    "ClassifierMeasurementsObject",
    "Classify",
    "ClassPriors",
    "Clear",
    "ClearAll",
    "ClearAttributes",
    "ClearCookies",
    "ClearPermissions",
    "ClearSystemCache",
    "ClebschGordan",
    "ClickPane",
    "ClickToCopy",
    "ClickToCopyEnabled",
    "Clip",
    "ClipboardNotebook",
    "ClipFill",
    "ClippingStyle",
    "ClipPlanes",
    "ClipPlanesStyle",
    "ClipRange",
    "Clock",
    "ClockGauge",
    "ClockwiseContourIntegral",
    "Close",
    "Closed",
    "CloseKernels",
    "ClosenessCentrality",
    "Closing",
    "ClosingAutoSave",
    "ClosingEvent",
    "CloudAccountData",
    "CloudBase",
    "CloudConnect",
    "CloudConnections",
    "CloudDeploy",
    "CloudDirectory",
    "CloudDisconnect",
    "CloudEvaluate",
    "CloudExport",
    "CloudExpression",
    "CloudExpressions",
    "CloudFunction",
    "CloudGet",
    "CloudImport",
    "CloudLoggingData",
    "CloudObject",
    "CloudObjectInformation",
    "CloudObjectInformationData",
    "CloudObjectNameFormat",
    "CloudObjects",
    "CloudObjectURLType",
    "CloudPublish",
    "CloudPut",
    "CloudRenderingMethod",
    "CloudSave",
    "CloudShare",
    "CloudSubmit",
    "CloudSymbol",
    "CloudUnshare",
    "CloudUserID",
    "ClusterClassify",
    "ClusterDissimilarityFunction",
    "ClusteringComponents",
    "ClusteringMeasurements",
    "ClusteringTree",
    "CMYKColor",
    "Coarse",
    "CodeAssistOptions",
    "Coefficient",
    "CoefficientArrays",
    "CoefficientDomain",
    "CoefficientList",
    "CoefficientRules",
    "CoifletWavelet",
    "Collect",
    "CollinearPoints",
    "Colon",
    "ColonForm",
    "ColorBalance",
    "ColorCombine",
    "ColorConvert",
    "ColorCoverage",
    "ColorData",
    "ColorDataFunction",
    "ColorDetect",
    "ColorDistance",
    "ColorFunction",
    "ColorFunctionBinning",
    "ColorFunctionScaling",
    "Colorize",
    "ColorNegate",
    "ColorOutput",
    "ColorProfileData",
    "ColorQ",
    "ColorQuantize",
    "ColorReplace",
    "ColorRules",
    "ColorSelectorSettings",
    "ColorSeparate",
    "ColorSetter",
    "ColorSetterBox",
    "ColorSetterBoxOptions",
    "ColorSlider",
    "ColorsNear",
    "ColorSpace",
    "ColorToneMapping",
    "Column",
    "ColumnAlignments",
    "ColumnBackgrounds",
    "ColumnForm",
    "ColumnLines",
    "ColumnsEqual",
    "ColumnSpacings",
    "ColumnWidths",
    "CombinatorB",
    "CombinatorC",
    "CombinatorI",
    "CombinatorK",
    "CombinatorS",
    "CombinatorW",
    "CombinatorY",
    "CombinedEntityClass",
    "CombinerFunction",
    "CometData",
    "CommonDefaultFormatTypes",
    "Commonest",
    "CommonestFilter",
    "CommonName",
    "CommonUnits",
    "CommunityBoundaryStyle",
    "CommunityGraphPlot",
    "CommunityLabels",
    "CommunityRegionStyle",
    "CompanyData",
    "CompatibleUnitQ",
    "CompilationOptions",
    "CompilationTarget",
    "Compile",
    "Compiled",
    "CompiledCodeFunction",
    "CompiledComponent",
    "CompiledExpressionDeclaration",
    "CompiledFunction",
    "CompiledLayer",
    "CompilerCallback",
    "CompilerEnvironment",
    "CompilerEnvironmentAppend",
    "CompilerEnvironmentAppendTo",
    "CompilerEnvironmentObject",
    "CompilerOptions",
    "Complement",
    "ComplementedEntityClass",
    "CompleteGraph",
    "CompleteGraphQ",
    "CompleteIntegral",
    "CompleteKaryTree",
    "CompletionsListPacket",
    "Complex",
    "ComplexArrayPlot",
    "ComplexContourPlot",
    "Complexes",
    "ComplexExpand",
    "ComplexInfinity",
    "ComplexityFunction",
    "ComplexListPlot",
    "ComplexPlot",
    "ComplexPlot3D",
    "ComplexRegionPlot",
    "ComplexStreamPlot",
    "ComplexVectorPlot",
    "ComponentMeasurements",
    "ComponentwiseContextMenu",
    "Compose",
    "ComposeList",
    "ComposeSeries",
    "CompositeQ",
    "Composition",
    "CompoundElement",
    "CompoundExpression",
    "CompoundPoissonDistribution",
    "CompoundPoissonProcess",
    "CompoundRenewalProcess",
    "Compress",
    "CompressedData",
    "CompressionLevel",
    "ComputeUncertainty",
    "ConcaveHullMesh",
    "Condition",
    "ConditionalExpression",
    "Conditioned",
    "Cone",
    "ConeBox",
    "ConfidenceLevel",
    "ConfidenceRange",
    "ConfidenceTransform",
    "ConfigurationPath",
    "Confirm",
    "ConfirmAssert",
    "ConfirmBy",
    "ConfirmMatch",
    "ConfirmQuiet",
    "ConformationMethod",
    "ConformAudio",
    "ConformImages",
    "Congruent",
    "ConicGradientFilling",
    "ConicHullRegion",
    "ConicHullRegion3DBox",
    "ConicHullRegion3DBoxOptions",
    "ConicHullRegionBox",
    "ConicHullRegionBoxOptions",
    "ConicOptimization",
    "Conjugate",
    "ConjugateTranspose",
    "Conjunction",
    "Connect",
    "ConnectedComponents",
    "ConnectedGraphComponents",
    "ConnectedGraphQ",
    "ConnectedMeshComponents",
    "ConnectedMoleculeComponents",
    "ConnectedMoleculeQ",
    "ConnectionSettings",
    "ConnectLibraryCallbackFunction",
    "ConnectSystemModelComponents",
    "ConnectSystemModelController",
    "ConnesWindow",
    "ConoverTest",
    "ConservativeConvectionPDETerm",
    "ConsoleMessage",
    "Constant",
    "ConstantArray",
    "ConstantArrayLayer",
    "ConstantImage",
    "ConstantPlusLayer",
    "ConstantRegionQ",
    "Constants",
    "ConstantTimesLayer",
    "ConstellationData",
    "ConstrainedMax",
    "ConstrainedMin",
    "Construct",
    "Containing",
    "ContainsAll",
    "ContainsAny",
    "ContainsExactly",
    "ContainsNone",
    "ContainsOnly",
    "ContentDetectorFunction",
    "ContentFieldOptions",
    "ContentLocationFunction",
    "ContentObject",
    "ContentPadding",
    "ContentsBoundingBox",
    "ContentSelectable",
    "ContentSize",
    "Context",
    "ContextMenu",
    "Contexts",
    "ContextToFileName",
    "Continuation",
    "Continue",
    "ContinuedFraction",
    "ContinuedFractionK",
    "ContinuousAction",
    "ContinuousMarkovProcess",
    "ContinuousTask",
    "ContinuousTimeModelQ",
    "ContinuousWaveletData",
    "ContinuousWaveletTransform",
    "ContourDetect",
    "ContourGraphics",
    "ContourIntegral",
    "ContourLabels",
    "ContourLines",
    "ContourPlot",
    "ContourPlot3D",
    "Contours",
    "ContourShading",
    "ContourSmoothing",
    "ContourStyle",
    "ContraharmonicMean",
    "ContrastiveLossLayer",
    "Control",
    "ControlActive",
    "ControlAlignment",
    "ControlGroupContentsBox",
    "ControllabilityGramian",
    "ControllabilityMatrix",
    "ControllableDecomposition",
    "ControllableModelQ",
    "ControllerDuration",
    "ControllerInformation",
    "ControllerInformationData",
    "ControllerLinking",
    "ControllerManipulate",
    "ControllerMethod",
    "ControllerPath",
    "ControllerState",
    "ControlPlacement",
    "ControlsRendering",
    "ControlType",
    "ConvectionPDETerm",
    "Convergents",
    "ConversionOptions",
    "ConversionRules",
    "ConvertToPostScript",
    "ConvertToPostScriptPacket",
    "ConvexHullMesh",
    "ConvexHullRegion",
    "ConvexOptimization",
    "ConvexPolygonQ",
    "ConvexPolyhedronQ",
    "ConvexRegionQ",
    "ConvolutionLayer",
    "Convolve",
    "ConwayGroupCo1",
    "ConwayGroupCo2",
    "ConwayGroupCo3",
    "CookieFunction",
    "Cookies",
    "CoordinateBoundingBox",
    "CoordinateBoundingBoxArray",
    "CoordinateBounds",
    "CoordinateBoundsArray",
    "CoordinateChartData",
    "CoordinatesToolOptions",
    "CoordinateTransform",
    "CoordinateTransformData",
    "CoplanarPoints",
    "CoprimeQ",
    "Coproduct",
    "CopulaDistribution",
    "Copyable",
    "CopyDatabin",
    "CopyDirectory",
    "CopyFile",
    "CopyFunction",
    "CopyTag",
    "CopyToClipboard",
    "CoreNilpotentDecomposition",
    "CornerFilter",
    "CornerNeighbors",
    "Correlation",
    "CorrelationDistance",
    "CorrelationFunction",
    "CorrelationTest",
    "Cos",
    "Cosh",
    "CoshIntegral",
    "CosineDistance",
    "CosineWindow",
    "CosIntegral",
    "Cot",
    "Coth",
    "CoulombF",
    "CoulombG",
    "CoulombH1",
    "CoulombH2",
    "Count",
    "CountDistinct",
    "CountDistinctBy",
    "CounterAssignments",
    "CounterBox",
    "CounterBoxOptions",
    "CounterClockwiseContourIntegral",
    "CounterEvaluator",
    "CounterFunction",
    "CounterIncrements",
    "CounterStyle",
    "CounterStyleMenuListing",
    "CountRoots",
    "CountryData",
    "Counts",
    "CountsBy",
    "Covariance",
    "CovarianceEstimatorFunction",
    "CovarianceFunction",
    "CoxianDistribution",
    "CoxIngersollRossProcess",
    "CoxModel",
    "CoxModelFit",
    "CramerVonMisesTest",
    "CreateArchive",
    "CreateCellID",
    "CreateChannel",
    "CreateCloudExpression",
    "CreateCompilerEnvironment",
    "CreateDatabin",
    "CreateDataStructure",
    "CreateDataSystemModel",
    "CreateDialog",
    "CreateDirectory",
    "CreateDocument",
    "CreateFile",
    "CreateIntermediateDirectories",
    "CreateLicenseEntitlement",
    "CreateManagedLibraryExpression",
    "CreateNotebook",
    "CreatePacletArchive",
    "CreatePalette",
    "CreatePermissionsGroup",
    "CreateScheduledTask",
    "CreateSearchIndex",
    "CreateSystemModel",
    "CreateTemporary",
    "CreateTypeInstance",
    "CreateUUID",
    "CreateWindow",
    "CriterionFunction",
    "CriticalityFailureImportance",
    "CriticalitySuccessImportance",
    "CriticalSection",
    "Cross",
    "CrossEntropyLossLayer",
    "CrossingCount",
    "CrossingDetect",
    "CrossingPolygon",
    "CrossMatrix",
    "Csc",
    "Csch",
    "CSGRegion",
    "CSGRegionQ",
    "CSGRegionTree",
    "CTCLossLayer",
    "Cube",
    "CubeRoot",
    "Cubics",
    "Cuboid",
    "CuboidBox",
    "CuboidBoxOptions",
    "Cumulant",
    "CumulantGeneratingFunction",
    "CumulativeFeatureImpactPlot",
    "Cup",
    "CupCap",
    "Curl",
    "CurlyDoubleQuote",
    "CurlyQuote",
    "CurrencyConvert",
    "CurrentDate",
    "CurrentImage",
    "CurrentNotebookImage",
    "CurrentScreenImage",
    "CurrentValue",
    "Curry",
    "CurryApplied",
    "CurvatureFlowFilter",
    "CurveClosed",
    "Cyan",
    "CycleGraph",
    "CycleIndexPolynomial",
    "Cycles",
    "CyclicGroup",
    "Cyclotomic",
    "Cylinder",
    "CylinderBox",
    "CylinderBoxOptions",
    "CylindricalDecomposition",
    "CylindricalDecompositionFunction",
    "D",
    "DagumDistribution",
    "DamData",
    "DamerauLevenshteinDistance",
    "DampingFactor",
    "Darker",
    "Dashed",
    "Dashing",
    "DatabaseConnect",
    "DatabaseDisconnect",
    "DatabaseReference",
    "Databin",
    "DatabinAdd",
    "DatabinRemove",
    "Databins",
    "DatabinSubmit",
    "DatabinUpload",
    "DataCompression",
    "DataDistribution",
    "DataRange",
    "DataReversed",
    "Dataset",
    "DatasetDisplayPanel",
    "DatasetTheme",
    "DataStructure",
    "DataStructureQ",
    "Date",
    "DateBounds",
    "Dated",
    "DateDelimiters",
    "DateDifference",
    "DatedUnit",
    "DateFormat",
    "DateFunction",
    "DateGranularity",
    "DateHistogram",
    "DateInterval",
    "DateList",
    "DateListLogPlot",
    "DateListPlot",
    "DateListStepPlot",
    "DateObject",
    "DateObjectQ",
    "DateOverlapsQ",
    "DatePattern",
    "DatePlus",
    "DateRange",
    "DateReduction",
    "DateScale",
    "DateSelect",
    "DateString",
    "DateTicksFormat",
    "DateValue",
    "DateWithinQ",
    "DaubechiesWavelet",
    "DavisDistribution",
    "DawsonF",
    "DayCount",
    "DayCountConvention",
    "DayHemisphere",
    "DaylightQ",
    "DayMatchQ",
    "DayName",
    "DayNightTerminator",
    "DayPlus",
    "DayRange",
    "DayRound",
    "DeBruijnGraph",
    "DeBruijnSequence",
    "Debug",
    "DebugTag",
    "Decapitalize",
    "Decimal",
    "DecimalForm",
    "DeclareCompiledComponent",
    "DeclareKnownSymbols",
    "DeclarePackage",
    "Decompose",
    "DeconvolutionLayer",
    "Decrement",
    "Decrypt",
    "DecryptFile",
    "DedekindEta",
    "DeepSpaceProbeData",
    "Default",
    "Default2DTool",
    "Default3DTool",
    "DefaultAttachedCellStyle",
    "DefaultAxesStyle",
    "DefaultBaseStyle",
    "DefaultBoxStyle",
    "DefaultButton",
    "DefaultColor",
    "DefaultControlPlacement",
    "DefaultDockedCellStyle",
    "DefaultDuplicateCellStyle",
    "DefaultDuration",
    "DefaultElement",
    "DefaultFaceGridsStyle",
    "DefaultFieldHintStyle",
    "DefaultFont",
    "DefaultFontProperties",
    "DefaultFormatType",
    "DefaultFrameStyle",
    "DefaultFrameTicksStyle",
    "DefaultGridLinesStyle",
    "DefaultInlineFormatType",
    "DefaultInputFormatType",
    "DefaultLabelStyle",
    "DefaultMenuStyle",
    "DefaultNaturalLanguage",
    "DefaultNewCellStyle",
    "DefaultNewInlineCellStyle",
    "DefaultNotebook",
    "DefaultOptions",
    "DefaultOutputFormatType",
    "DefaultPrintPrecision",
    "DefaultStyle",
    "DefaultStyleDefinitions",
    "DefaultTextFormatType",
    "DefaultTextInlineFormatType",
    "DefaultTicksStyle",
    "DefaultTooltipStyle",
    "DefaultValue",
    "DefaultValues",
    "Defer",
    "DefineExternal",
    "DefineInputStreamMethod",
    "DefineOutputStreamMethod",
    "DefineResourceFunction",
    "Definition",
    "Degree",
    "DegreeCentrality",
    "DegreeGraphDistribution",
    "DegreeLexicographic",
    "DegreeReverseLexicographic",
    "DEigensystem",
    "DEigenvalues",
    "Deinitialization",
    "Del",
    "DelaunayMesh",
    "Delayed",
    "Deletable",
    "Delete",
    "DeleteAdjacentDuplicates",
    "DeleteAnomalies",
    "DeleteBorderComponents",
    "DeleteCases",
    "DeleteChannel",
    "DeleteCloudExpression",
    "DeleteContents",
    "DeleteDirectory",
    "DeleteDuplicates",
    "DeleteDuplicatesBy",
    "DeleteElements",
    "DeleteFile",
    "DeleteMissing",
    "DeleteObject",
    "DeletePermissionsKey",
    "DeleteSearchIndex",
    "DeleteSmallComponents",
    "DeleteStopwords",
    "DeleteWithContents",
    "DeletionWarning",
    "DelimitedArray",
    "DelimitedSequence",
    "Delimiter",
    "DelimiterAutoMatching",
    "DelimiterFlashTime",
    "DelimiterMatching",
    "Delimiters",
    "DeliveryFunction",
    "Dendrogram",
    "Denominator",
    "DensityGraphics",
    "DensityHistogram",
    "DensityPlot",
    "DensityPlot3D",
    "DependentVariables",
    "Deploy",
    "Deployed",
    "Depth",
    "DepthFirstScan",
    "Derivative",
    "DerivativeFilter",
    "DerivativePDETerm",
    "DerivedKey",
    "DescriptorStateSpace",
    "DesignMatrix",
    "DestroyAfterEvaluation",
    "Det",
    "DeviceClose",
    "DeviceConfigure",
    "DeviceExecute",
    "DeviceExecuteAsynchronous",
    "DeviceObject",
    "DeviceOpen",
    "DeviceOpenQ",
    "DeviceRead",
    "DeviceReadBuffer",
    "DeviceReadLatest",
    "DeviceReadList",
    "DeviceReadTimeSeries",
    "Devices",
    "DeviceStreams",
    "DeviceWrite",
    "DeviceWriteBuffer",
    "DGaussianWavelet",
    "DiacriticalPositioning",
    "Diagonal",
    "DiagonalizableMatrixQ",
    "DiagonalMatrix",
    "DiagonalMatrixQ",
    "Dialog",
    "DialogIndent",
    "DialogInput",
    "DialogLevel",
    "DialogNotebook",
    "DialogProlog",
    "DialogReturn",
    "DialogSymbols",
    "Diamond",
    "DiamondMatrix",
    "DiceDissimilarity",
    "DictionaryLookup",
    "DictionaryWordQ",
    "DifferenceDelta",
    "DifferenceOrder",
    "DifferenceQuotient",
    "DifferenceRoot",
    "DifferenceRootReduce",
    "Differences",
    "DifferentialD",
    "DifferentialRoot",
    "DifferentialRootReduce",
    "DifferentiatorFilter",
    "DiffusionPDETerm",
    "DiggleGatesPointProcess",
    "DiggleGrattonPointProcess",
    "DigitalSignature",
    "DigitBlock",
    "DigitBlockMinimum",
    "DigitCharacter",
    "DigitCount",
    "DigitQ",
    "DihedralAngle",
    "DihedralGroup",
    "Dilation",
    "DimensionalCombinations",
    "DimensionalMeshComponents",
    "DimensionReduce",
    "DimensionReducerFunction",
    "DimensionReduction",
    "Dimensions",
    "DiracComb",
    "DiracDelta",
    "DirectedEdge",
    "DirectedEdges",
    "DirectedGraph",
    "DirectedGraphQ",
    "DirectedInfinity",
    "Direction",
    "DirectionalLight",
    "Directive",
    "Directory",
    "DirectoryName",
    "DirectoryQ",
    "DirectoryStack",
    "DirichletBeta",
    "DirichletCharacter",
    "DirichletCondition",
    "DirichletConvolve",
    "DirichletDistribution",
    "DirichletEta",
    "DirichletL",
    "DirichletLambda",
    "DirichletTransform",
    "DirichletWindow",
    "DisableConsolePrintPacket",
    "DisableFormatting",
    "DiscreteAsymptotic",
    "DiscreteChirpZTransform",
    "DiscreteConvolve",
    "DiscreteDelta",
    "DiscreteHadamardTransform",
    "DiscreteIndicator",
    "DiscreteInputOutputModel",
    "DiscreteLimit",
    "DiscreteLQEstimatorGains",
    "DiscreteLQRegulatorGains",
    "DiscreteLyapunovSolve",
    "DiscreteMarkovProcess",
    "DiscreteMaxLimit",
    "DiscreteMinLimit",
    "DiscretePlot",
    "DiscretePlot3D",
    "DiscreteRatio",
    "DiscreteRiccatiSolve",
    "DiscreteShift",
    "DiscreteTimeModelQ",
    "DiscreteUniformDistribution",
    "DiscreteVariables",
    "DiscreteWaveletData",
    "DiscreteWaveletPacketTransform",
    "DiscreteWaveletTransform",
    "DiscretizeGraphics",
    "DiscretizeRegion",
    "Discriminant",
    "DisjointQ",
    "Disjunction",
    "Disk",
    "DiskBox",
    "DiskBoxOptions",
    "DiskMatrix",
    "DiskSegment",
    "Dispatch",
    "DispatchQ",
    "DispersionEstimatorFunction",
    "Display",
    "DisplayAllSteps",
    "DisplayEndPacket",
    "DisplayForm",
    "DisplayFunction",
    "DisplayPacket",
    "DisplayRules",
    "DisplayString",
    "DisplayTemporary",
    "DisplayWith",
    "DisplayWithRef",
    "DisplayWithVariable",
    "DistanceFunction",
    "DistanceMatrix",
    "DistanceTransform",
    "Distribute",
    "Distributed",
    "DistributedContexts",
    "DistributeDefinitions",
    "DistributionChart",
    "DistributionDomain",
    "DistributionFitTest",
    "DistributionParameterAssumptions",
    "DistributionParameterQ",
    "Dithering",
    "Div",
    "Divergence",
    "Divide",
    "DivideBy",
    "Dividers",
    "DivideSides",
    "Divisible",
    "Divisors",
    "DivisorSigma",
    "DivisorSum",
    "DMSList",
    "DMSString",
    "Do",
    "DockedCell",
    "DockedCells",
    "DocumentGenerator",
    "DocumentGeneratorInformation",
    "DocumentGeneratorInformationData",
    "DocumentGenerators",
    "DocumentNotebook",
    "DocumentWeightingRules",
    "Dodecahedron",
    "DomainRegistrationInformation",
    "DominantColors",
    "DominatorTreeGraph",
    "DominatorVertexList",
    "DOSTextFormat",
    "Dot",
    "DotDashed",
    "DotEqual",
    "DotLayer",
    "DotPlusLayer",
    "Dotted",
    "DoubleBracketingBar",
    "DoubleContourIntegral",
    "DoubleDownArrow",
    "DoubleLeftArrow",
    "DoubleLeftRightArrow",
    "DoubleLeftTee",
    "DoubleLongLeftArrow",
    "DoubleLongLeftRightArrow",
    "DoubleLongRightArrow",
    "DoubleRightArrow",
    "DoubleRightTee",
    "DoubleUpArrow",
    "DoubleUpDownArrow",
    "DoubleVerticalBar",
    "DoublyInfinite",
    "Down",
    "DownArrow",
    "DownArrowBar",
    "DownArrowUpArrow",
    "DownLeftRightVector",
    "DownLeftTeeVector",
    "DownLeftVector",
    "DownLeftVectorBar",
    "DownRightTeeVector",
    "DownRightVector",
    "DownRightVectorBar",
    "Downsample",
    "DownTee",
    "DownTeeArrow",
    "DownValues",
    "DownValuesFunction",
    "DragAndDrop",
    "DrawBackFaces",
    "DrawEdges",
    "DrawFrontFaces",
    "DrawHighlighted",
    "DrazinInverse",
    "Drop",
    "DropoutLayer",
    "DropShadowing",
    "DSolve",
    "DSolveChangeVariables",
    "DSolveValue",
    "Dt",
    "DualLinearProgramming",
    "DualPlanarGraph",
    "DualPolyhedron",
    "DualSystemsModel",
    "DumpGet",
    "DumpSave",
    "DuplicateFreeQ",
    "Duration",
    "Dynamic",
    "DynamicBox",
    "DynamicBoxOptions",
    "DynamicEvaluationTimeout",
    "DynamicGeoGraphics",
    "DynamicImage",
    "DynamicLocation",
    "DynamicModule",
    "DynamicModuleBox",
    "DynamicModuleBoxOptions",
    "DynamicModuleParent",
    "DynamicModuleValues",
    "DynamicName",
    "DynamicNamespace",
    "DynamicReference",
    "DynamicSetting",
    "DynamicUpdating",
    "DynamicWrapper",
    "DynamicWrapperBox",
    "DynamicWrapperBoxOptions",
    "E",
    "EarthImpactData",
    "EarthquakeData",
    "EccentricityCentrality",
    "Echo",
    "EchoEvaluation",
    "EchoFunction",
    "EchoLabel",
    "EchoTiming",
    "EclipseType",
    "EdgeAdd",
    "EdgeBetweennessCentrality",
    "EdgeCapacity",
    "EdgeCapForm",
    "EdgeChromaticNumber",
    "EdgeColor",
    "EdgeConnectivity",
    "EdgeContract",
    "EdgeCost",
    "EdgeCount",
    "EdgeCoverQ",
    "EdgeCycleMatrix",
    "EdgeDashing",
    "EdgeDelete",
    "EdgeDetect",
    "EdgeForm",
    "EdgeIndex",
    "EdgeJoinForm",
    "EdgeLabeling",
    "EdgeLabels",
    "EdgeLabelStyle",
    "EdgeList",
    "EdgeOpacity",
    "EdgeQ",
    "EdgeRenderingFunction",
    "EdgeRules",
    "EdgeShapeFunction",
    "EdgeStyle",
    "EdgeTaggedGraph",
    "EdgeTaggedGraphQ",
    "EdgeTags",
    "EdgeThickness",
    "EdgeTransitiveGraphQ",
    "EdgeValueRange",
    "EdgeValueSizes",
    "EdgeWeight",
    "EdgeWeightedGraphQ",
    "Editable",
    "EditButtonSettings",
    "EditCellTagsSettings",
    "EditDistance",
    "EffectiveInterest",
    "Eigensystem",
    "Eigenvalues",
    "EigenvectorCentrality",
    "Eigenvectors",
    "Element",
    "ElementData",
    "ElementwiseLayer",
    "ElidedForms",
    "Eliminate",
    "EliminationOrder",
    "Ellipsoid",
    "EllipticE",
    "EllipticExp",
    "EllipticExpPrime",
    "EllipticF",
    "EllipticFilterModel",
    "EllipticK",
    "EllipticLog",
    "EllipticNomeQ",
    "EllipticPi",
    "EllipticReducedHalfPeriods",
    "EllipticTheta",
    "EllipticThetaPrime",
    "EmbedCode",
    "EmbeddedHTML",
    "EmbeddedService",
    "EmbeddedSQLEntityClass",
    "EmbeddedSQLExpression",
    "EmbeddingLayer",
    "EmbeddingObject",
    "EmitSound",
    "EmphasizeSyntaxErrors",
    "EmpiricalDistribution",
    "Empty",
    "EmptyGraphQ",
    "EmptyRegion",
    "EmptySpaceF",
    "EnableConsolePrintPacket",
    "Enabled",
    "Enclose",
    "Encode",
    "Encrypt",
    "EncryptedObject",
    "EncryptFile",
    "End",
    "EndAdd",
    "EndDialogPacket",
    "EndOfBuffer",
    "EndOfFile",
    "EndOfLine",
    "EndOfString",
    "EndPackage",
    "EngineEnvironment",
    "EngineeringForm",
    "Enter",
    "EnterExpressionPacket",
    "EnterTextPacket",
    "Entity",
    "EntityClass",
    "EntityClassList",
    "EntityCopies",
    "EntityFunction",
    "EntityGroup",
    "EntityInstance",
    "EntityList",
    "EntityPrefetch",
    "EntityProperties",
    "EntityProperty",
    "EntityPropertyClass",
    "EntityRegister",
    "EntityStore",
    "EntityStores",
    "EntityTypeName",
    "EntityUnregister",
    "EntityValue",
    "Entropy",
    "EntropyFilter",
    "Environment",
    "Epilog",
    "EpilogFunction",
    "Equal",
    "EqualColumns",
    "EqualRows",
    "EqualTilde",
    "EqualTo",
    "EquatedTo",
    "Equilibrium",
    "EquirippleFilterKernel",
    "Equivalent",
    "Erf",
    "Erfc",
    "Erfi",
    "ErlangB",
    "ErlangC",
    "ErlangDistribution",
    "Erosion",
    "ErrorBox",
    "ErrorBoxOptions",
    "ErrorNorm",
    "ErrorPacket",
    "ErrorsDialogSettings",
    "EscapeRadius",
    "EstimatedBackground",
    "EstimatedDistribution",
    "EstimatedPointNormals",
    "EstimatedPointProcess",
    "EstimatedProcess",
    "EstimatedVariogramModel",
    "EstimatorGains",
    "EstimatorRegulator",
    "EuclideanDistance",
    "EulerAngles",
    "EulerCharacteristic",
    "EulerE",
    "EulerGamma",
    "EulerianGraphQ",
    "EulerMatrix",
    "EulerPhi",
    "Evaluatable",
    "Evaluate",
    "Evaluated",
    "EvaluatePacket",
    "EvaluateScheduledTask",
    "EvaluationBox",
    "EvaluationCell",
    "EvaluationCompletionAction",
    "EvaluationData",
    "EvaluationElements",
    "EvaluationEnvironment",
    "EvaluationMode",
    "EvaluationMonitor",
    "EvaluationNotebook",
    "EvaluationObject",
    "EvaluationOrder",
    "EvaluationPrivileges",
    "EvaluationRateLimit",
    "Evaluator",
    "EvaluatorNames",
    "EvenQ",
    "EventData",
    "EventEvaluator",
    "EventHandler",
    "EventHandlerTag",
    "EventLabels",
    "EventSeries",
    "ExactBlackmanWindow",
    "ExactNumberQ",
    "ExactRootIsolation",
    "ExampleData",
    "Except",
    "ExcludedContexts",
    "ExcludedForms",
    "ExcludedLines",
    "ExcludedPhysicalQuantities",
    "ExcludePods",
    "Exclusions",
    "ExclusionsStyle",
    "Exists",
    "Exit",
    "ExitDialog",
    "ExoplanetData",
    "Exp",
    "Expand",
    "ExpandAll",
    "ExpandDenominator",
    "ExpandFileName",
    "ExpandNumerator",
    "Expectation",
    "ExpectationE",
    "ExpectedValue",
    "ExpGammaDistribution",
    "ExpIntegralE",
    "ExpIntegralEi",
    "ExpirationDate",
    "Exponent",
    "ExponentFunction",
    "ExponentialDistribution",
    "ExponentialFamily",
    "ExponentialGeneratingFunction",
    "ExponentialMovingAverage",
    "ExponentialPowerDistribution",
    "ExponentPosition",
    "ExponentStep",
    "Export",
    "ExportAutoReplacements",
    "ExportByteArray",
    "ExportForm",
    "ExportPacket",
    "ExportString",
    "Expression",
    "ExpressionCell",
    "ExpressionGraph",
    "ExpressionPacket",
    "ExpressionTree",
    "ExpressionUUID",
    "ExpToTrig",
    "ExtendedEntityClass",
    "ExtendedGCD",
    "Extension",
    "ExtentElementFunction",
    "ExtentMarkers",
    "ExtentSize",
    "ExternalBundle",
    "ExternalCall",
    "ExternalDataCharacterEncoding",
    "ExternalEvaluate",
    "ExternalFunction",
    "ExternalFunctionName",
    "ExternalIdentifier",
    "ExternalObject",
    "ExternalOptions",
    "ExternalSessionObject",
    "ExternalSessions",
    "ExternalStorageBase",
    "ExternalStorageDownload",
    "ExternalStorageGet",
    "ExternalStorageObject",
    "ExternalStoragePut",
    "ExternalStorageUpload",
    "ExternalTypeSignature",
    "ExternalValue",
    "Extract",
    "ExtractArchive",
    "ExtractLayer",
    "ExtractPacletArchive",
    "ExtremeValueDistribution",
    "FaceAlign",
    "FaceForm",
    "FaceGrids",
    "FaceGridsStyle",
    "FaceRecognize",
    "FacialFeatures",
    "Factor",
    "FactorComplete",
    "Factorial",
    "Factorial2",
    "FactorialMoment",
    "FactorialMomentGeneratingFunction",
    "FactorialPower",
    "FactorInteger",
    "FactorList",
    "FactorSquareFree",
    "FactorSquareFreeList",
    "FactorTerms",
    "FactorTermsList",
    "Fail",
    "Failure",
    "FailureAction",
    "FailureDistribution",
    "FailureQ",
    "False",
    "FareySequence",
    "FARIMAProcess",
    "FeatureDistance",
    "FeatureExtract",
    "FeatureExtraction",
    "FeatureExtractor",
    "FeatureExtractorFunction",
    "FeatureImpactPlot",
    "FeatureNames",
    "FeatureNearest",
    "FeatureSpacePlot",
    "FeatureSpacePlot3D",
    "FeatureTypes",
    "FeatureValueDependencyPlot",
    "FeatureValueImpactPlot",
    "FEDisableConsolePrintPacket",
    "FeedbackLinearize",
    "FeedbackSector",
    "FeedbackSectorStyle",
    "FeedbackType",
    "FEEnableConsolePrintPacket",
    "FetalGrowthData",
    "Fibonacci",
    "Fibonorial",
    "FieldCompletionFunction",
    "FieldHint",
    "FieldHintStyle",
    "FieldMasked",
    "FieldSize",
    "File",
    "FileBaseName",
    "FileByteCount",
    "FileConvert",
    "FileDate",
    "FileExistsQ",
    "FileExtension",
    "FileFormat",
    "FileFormatProperties",
    "FileFormatQ",
    "FileHandler",
    "FileHash",
    "FileInformation",
    "FileName",
    "FileNameDepth",
    "FileNameDialogSettings",
    "FileNameDrop",
    "FileNameForms",
    "FileNameJoin",
    "FileNames",
    "FileNameSetter",
    "FileNameSplit",
    "FileNameTake",
    "FileNameToFormatList",
    "FilePrint",
    "FileSize",
    "FileSystemMap",
    "FileSystemScan",
    "FileSystemTree",
    "FileTemplate",
    "FileTemplateApply",
    "FileType",
    "FilledCurve",
    "FilledCurveBox",
    "FilledCurveBoxOptions",
    "FilledTorus",
    "FillForm",
    "Filling",
    "FillingStyle",
    "FillingTransform",
    "FilteredEntityClass",
    "FilterRules",
    "FinancialBond",
    "FinancialData",
    "FinancialDerivative",
    "FinancialIndicator",
    "Find",
    "FindAnomalies",
    "FindArgMax",
    "FindArgMin",
    "FindChannels",
    "FindClique",
    "FindClusters",
    "FindCookies",
    "FindCurvePath",
    "FindCycle",
    "FindDevices",
    "FindDistribution",
    "FindDistributionParameters",
    "FindDivisions",
    "FindEdgeColoring",
    "FindEdgeCover",
    "FindEdgeCut",
    "FindEdgeIndependentPaths",
    "FindEquationalProof",
    "FindEulerianCycle",
    "FindExternalEvaluators",
    "FindFaces",
    "FindFile",
    "FindFit",
    "FindFormula",
    "FindFundamentalCycles",
    "FindGeneratingFunction",
    "FindGeoLocation",
    "FindGeometricConjectures",
    "FindGeometricTransform",
    "FindGraphCommunities",
    "FindGraphIsomorphism",
    "FindGraphPartition",
    "FindHamiltonianCycle",
    "FindHamiltonianPath",
    "FindHiddenMarkovStates",
    "FindImageText",
    "FindIndependentEdgeSet",
    "FindIndependentVertexSet",
    "FindInstance",
    "FindIntegerNullVector",
    "FindIsomers",
    "FindIsomorphicSubgraph",
    "FindKClan",
    "FindKClique",
    "FindKClub",
    "FindKPlex",
    "FindLibrary",
    "FindLinearRecurrence",
    "FindList",
    "FindMatchingColor",
    "FindMaximum",
    "FindMaximumCut",
    "FindMaximumFlow",
    "FindMaxValue",
    "FindMeshDefects",
    "FindMinimum",
    "FindMinimumCostFlow",
    "FindMinimumCut",
    "FindMinValue",
    "FindMoleculeSubstructure",
    "FindPath",
    "FindPeaks",
    "FindPermutation",
    "FindPlanarColoring",
    "FindPointProcessParameters",
    "FindPostmanTour",
    "FindProcessParameters",
    "FindRegionTransform",
    "FindRepeat",
    "FindRoot",
    "FindSequenceFunction",
    "FindSettings",
    "FindShortestPath",
    "FindShortestTour",
    "FindSpanningTree",
    "FindSubgraphIsomorphism",
    "FindSystemModelEquilibrium",
    "FindTextualAnswer",
    "FindThreshold",
    "FindTransientRepeat",
    "FindVertexColoring",
    "FindVertexCover",
    "FindVertexCut",
    "FindVertexIndependentPaths",
    "Fine",
    "FinishDynamic",
    "FiniteAbelianGroupCount",
    "FiniteGroupCount",
    "FiniteGroupData",
    "First",
    "FirstCase",
    "FirstPassageTimeDistribution",
    "FirstPosition",
    "FischerGroupFi22",
    "FischerGroupFi23",
    "FischerGroupFi24Prime",
    "FisherHypergeometricDistribution",
    "FisherRatioTest",
    "FisherZDistribution",
    "Fit",
    "FitAll",
    "FitRegularization",
    "FittedModel",
    "FixedOrder",
    "FixedPoint",
    "FixedPointList",
    "FlashSelection",
    "Flat",
    "FlatShading",
    "Flatten",
    "FlattenAt",
    "FlattenLayer",
    "FlatTopWindow",
    "FlightData",
    "FlipView",
    "Floor",
    "FlowPolynomial",
    "Fold",
    "FoldList",
    "FoldPair",
    "FoldPairList",
    "FoldWhile",
    "FoldWhileList",
    "FollowRedirects",
    "Font",
    "FontColor",
    "FontFamily",
    "FontForm",
    "FontName",
    "FontOpacity",
    "FontPostScriptName",
    "FontProperties",
    "FontReencoding",
    "FontSize",
    "FontSlant",
    "FontSubstitutions",
    "FontTracking",
    "FontVariations",
    "FontWeight",
    "For",
    "ForAll",
    "ForAllType",
    "ForceVersionInstall",
    "Format",
    "FormatRules",
    "FormatType",
    "FormatTypeAutoConvert",
    "FormatValues",
    "FormBox",
    "FormBoxOptions",
    "FormControl",
    "FormFunction",
    "FormLayoutFunction",
    "FormObject",
    "FormPage",
    "FormProtectionMethod",
    "FormTheme",
    "FormulaData",
    "FormulaLookup",
    "FortranForm",
    "Forward",
    "ForwardBackward",
    "ForwardCloudCredentials",
    "Fourier",
    "FourierCoefficient",
    "FourierCosCoefficient",
    "FourierCosSeries",
    "FourierCosTransform",
    "FourierDCT",
    "FourierDCTFilter",
    "FourierDCTMatrix",
    "FourierDST",
    "FourierDSTMatrix",
    "FourierMatrix",
    "FourierParameters",
    "FourierSequenceTransform",
    "FourierSeries",
    "FourierSinCoefficient",
    "FourierSinSeries",
    "FourierSinTransform",
    "FourierTransform",
    "FourierTrigSeries",
    "FoxH",
    "FoxHReduce",
    "FractionalBrownianMotionProcess",
    "FractionalD",
    "FractionalGaussianNoiseProcess",
    "FractionalPart",
    "FractionBox",
    "FractionBoxOptions",
    "FractionLine",
    "Frame",
    "FrameBox",
    "FrameBoxOptions",
    "Framed",
    "FrameInset",
    "FrameLabel",
    "Frameless",
    "FrameListVideo",
    "FrameMargins",
    "FrameRate",
    "FrameStyle",
    "FrameTicks",
    "FrameTicksStyle",
    "FRatioDistribution",
    "FrechetDistribution",
    "FreeQ",
    "FrenetSerretSystem",
    "FrequencySamplingFilterKernel",
    "FresnelC",
    "FresnelF",
    "FresnelG",
    "FresnelS",
    "Friday",
    "FrobeniusNumber",
    "FrobeniusSolve",
    "FromAbsoluteTime",
    "FromCharacterCode",
    "FromCoefficientRules",
    "FromContinuedFraction",
    "FromDate",
    "FromDateString",
    "FromDigits",
    "FromDMS",
    "FromEntity",
    "FromJulianDate",
    "FromLetterNumber",
    "FromPolarCoordinates",
    "FromRawPointer",
    "FromRomanNumeral",
    "FromSphericalCoordinates",
    "FromUnixTime",
    "Front",
    "FrontEndDynamicExpression",
    "FrontEndEventActions",
    "FrontEndExecute",
    "FrontEndObject",
    "FrontEndResource",
    "FrontEndResourceString",
    "FrontEndStackSize",
    "FrontEndToken",
    "FrontEndTokenExecute",
    "FrontEndValueCache",
    "FrontEndVersion",
    "FrontFaceColor",
    "FrontFaceGlowColor",
    "FrontFaceOpacity",
    "FrontFaceSpecularColor",
    "FrontFaceSpecularExponent",
    "FrontFaceSurfaceAppearance",
    "FrontFaceTexture",
    "Full",
    "FullAxes",
    "FullDefinition",
    "FullForm",
    "FullGraphics",
    "FullInformationOutputRegulator",
    "FullOptions",
    "FullRegion",
    "FullSimplify",
    "Function",
    "FunctionAnalytic",
    "FunctionBijective",
    "FunctionCompile",
    "FunctionCompileExport",
    "FunctionCompileExportByteArray",
    "FunctionCompileExportLibrary",
    "FunctionCompileExportString",
    "FunctionContinuous",
    "FunctionConvexity",
    "FunctionDeclaration",
    "FunctionDiscontinuities",
    "FunctionDomain",
    "FunctionExpand",
    "FunctionInjective",
    "FunctionInterpolation",
    "FunctionLayer",
    "FunctionMeromorphic",
    "FunctionMonotonicity",
    "FunctionPeriod",
    "FunctionPoles",
    "FunctionRange",
    "FunctionSign",
    "FunctionSingularities",
    "FunctionSpace",
    "FunctionSurjective",
    "FussellVeselyImportance",
    "GaborFilter",
    "GaborMatrix",
    "GaborWavelet",
    "GainMargins",
    "GainPhaseMargins",
    "GalaxyData",
    "GalleryView",
    "Gamma",
    "GammaDistribution",
    "GammaRegularized",
    "GapPenalty",
    "GARCHProcess",
    "GatedRecurrentLayer",
    "Gather",
    "GatherBy",
    "GaugeFaceElementFunction",
    "GaugeFaceStyle",
    "GaugeFrameElementFunction",
    "GaugeFrameSize",
    "GaugeFrameStyle",
    "GaugeLabels",
    "GaugeMarkers",
    "GaugeStyle",
    "GaussianFilter",
    "GaussianIntegers",
    "GaussianMatrix",
    "GaussianOrthogonalMatrixDistribution",
    "GaussianSymplecticMatrixDistribution",
    "GaussianUnitaryMatrixDistribution",
    "GaussianWindow",
    "GCD",
    "GegenbauerC",
    "General",
    "GeneralizedLinearModelFit",
    "GenerateAsymmetricKeyPair",
    "GenerateConditions",
    "GeneratedAssetFormat",
    "GeneratedAssetLocation",
    "GeneratedCell",
    "GeneratedCellStyles",
    "GeneratedDocumentBinding",
    "GenerateDerivedKey",
    "GenerateDigitalSignature",
    "GenerateDocument",
    "GeneratedParameters",
    "GeneratedQuantityMagnitudes",
    "GenerateFileSignature",
    "GenerateHTTPResponse",
    "GenerateSecuredAuthenticationKey",
    "GenerateSymmetricKey",
    "GeneratingFunction",
    "GeneratorDescription",
    "GeneratorHistoryLength",
    "GeneratorOutputType",
    "Generic",
    "GenericCylindricalDecomposition",
    "GenomeData",
    "GenomeLookup",
    "GeoAntipode",
    "GeoArea",
    "GeoArraySize",
    "GeoBackground",
    "GeoBoundary",
    "GeoBoundingBox",
    "GeoBounds",
    "GeoBoundsRegion",
    "GeoBoundsRegionBoundary",
    "GeoBubbleChart",
    "GeoCenter",
    "GeoCircle",
    "GeoContourPlot",
    "GeoDensityPlot",
    "GeodesicClosing",
    "GeodesicDilation",
    "GeodesicErosion",
    "GeodesicOpening",
    "GeodesicPolyhedron",
    "GeoDestination",
    "GeodesyData",
    "GeoDirection",
    "GeoDisk",
    "GeoDisplacement",
    "GeoDistance",
    "GeoDistanceList",
    "GeoElevationData",
    "GeoEntities",
    "GeoGraphics",
    "GeoGraphPlot",
    "GeoGraphValuePlot",
    "GeogravityModelData",
    "GeoGridDirectionDifference",
    "GeoGridLines",
    "GeoGridLinesStyle",
    "GeoGridPosition",
    "GeoGridRange",
    "GeoGridRangePadding",
    "GeoGridUnitArea",
    "GeoGridUnitDistance",
    "GeoGridVector",
    "GeoGroup",
    "GeoHemisphere",
    "GeoHemisphereBoundary",
    "GeoHistogram",
    "GeoIdentify",
    "GeoImage",
    "GeoLabels",
    "GeoLength",
    "GeoListPlot",
    "GeoLocation",
    "GeologicalPeriodData",
    "GeomagneticModelData",
    "GeoMarker",
    "GeometricAssertion",
    "GeometricBrownianMotionProcess",
    "GeometricDistribution",
    "GeometricMean",
    "GeometricMeanFilter",
    "GeometricOptimization",
    "GeometricScene",
    "GeometricStep",
    "GeometricStylingRules",
    "GeometricTest",
    "GeometricTransformation",
    "GeometricTransformation3DBox",
    "GeometricTransformation3DBoxOptions",
    "GeometricTransformationBox",
    "GeometricTransformationBoxOptions",
    "GeoModel",
    "GeoNearest",
    "GeoOrientationData",
    "GeoPath",
    "GeoPolygon",
    "GeoPosition",
    "GeoPositionENU",
    "GeoPositionXYZ",
    "GeoProjection",
    "GeoProjectionData",
    "GeoRange",
    "GeoRangePadding",
    "GeoRegionValuePlot",
    "GeoResolution",
    "GeoScaleBar",
    "GeoServer",
    "GeoSmoothHistogram",
    "GeoStreamPlot",
    "GeoStyling",
    "GeoStylingImageFunction",
    "GeoVariant",
    "GeoVector",
    "GeoVectorENU",
    "GeoVectorPlot",
    "GeoVectorXYZ",
    "GeoVisibleRegion",
    "GeoVisibleRegionBoundary",
    "GeoWithinQ",
    "GeoZoomLevel",
    "GestureHandler",
    "GestureHandlerTag",
    "Get",
    "GetContext",
    "GetEnvironment",
    "GetFileName",
    "GetLinebreakInformationPacket",
    "GibbsPointProcess",
    "Glaisher",
    "GlobalClusteringCoefficient",
    "GlobalPreferences",
    "GlobalSession",
    "Glow",
    "GoldenAngle",
    "GoldenRatio",
    "GompertzMakehamDistribution",
    "GoochShading",
    "GoodmanKruskalGamma",
    "GoodmanKruskalGammaTest",
    "Goto",
    "GouraudShading",
    "Grad",
    "Gradient",
    "GradientFilter",
    "GradientFittedMesh",
    "GradientOrientationFilter",
    "GrammarApply",
    "GrammarRules",
    "GrammarToken",
    "Graph",
    "Graph3D",
    "GraphAssortativity",
    "GraphAutomorphismGroup",
    "GraphCenter",
    "GraphComplement",
    "GraphData",
    "GraphDensity",
    "GraphDiameter",
    "GraphDifference",
    "GraphDisjointUnion",
    "GraphDistance",
    "GraphDistanceMatrix",
    "GraphEmbedding",
    "GraphHighlight",
    "GraphHighlightStyle",
    "GraphHub",
    "Graphics",
    "Graphics3D",
    "Graphics3DBox",
    "Graphics3DBoxOptions",
    "GraphicsArray",
    "GraphicsBaseline",
    "GraphicsBox",
    "GraphicsBoxOptions",
    "GraphicsColor",
    "GraphicsColumn",
    "GraphicsComplex",
    "GraphicsComplex3DBox",
    "GraphicsComplex3DBoxOptions",
    "GraphicsComplexBox",
    "GraphicsComplexBoxOptions",
    "GraphicsContents",
    "GraphicsData",
    "GraphicsGrid",
    "GraphicsGridBox",
    "GraphicsGroup",
    "GraphicsGroup3DBox",
    "GraphicsGroup3DBoxOptions",
    "GraphicsGroupBox",
    "GraphicsGroupBoxOptions",
    "GraphicsGrouping",
    "GraphicsHighlightColor",
    "GraphicsRow",
    "GraphicsSpacing",
    "GraphicsStyle",
    "GraphIntersection",
    "GraphJoin",
    "GraphLayerLabels",
    "GraphLayers",
    "GraphLayerStyle",
    "GraphLayout",
    "GraphLinkEfficiency",
    "GraphPeriphery",
    "GraphPlot",
    "GraphPlot3D",
    "GraphPower",
    "GraphProduct",
    "GraphPropertyDistribution",
    "GraphQ",
    "GraphRadius",
    "GraphReciprocity",
    "GraphRoot",
    "GraphStyle",
    "GraphSum",
    "GraphTree",
    "GraphUnion",
    "Gray",
    "GrayLevel",
    "Greater",
    "GreaterEqual",
    "GreaterEqualLess",
    "GreaterEqualThan",
    "GreaterFullEqual",
    "GreaterGreater",
    "GreaterLess",
    "GreaterSlantEqual",
    "GreaterThan",
    "GreaterTilde",
    "GreekStyle",
    "Green",
    "GreenFunction",
    "Grid",
    "GridBaseline",
    "GridBox",
    "GridBoxAlignment",
    "GridBoxBackground",
    "GridBoxDividers",
    "GridBoxFrame",
    "GridBoxItemSize",
    "GridBoxItemStyle",
    "GridBoxOptions",
    "GridBoxSpacings",
    "GridCreationSettings",
    "GridDefaultElement",
    "GridElementStyleOptions",
    "GridFrame",
    "GridFrameMargins",
    "GridGraph",
    "GridLines",
    "GridLinesStyle",
    "GridVideo",
    "GroebnerBasis",
    "GroupActionBase",
    "GroupBy",
    "GroupCentralizer",
    "GroupElementFromWord",
    "GroupElementPosition",
    "GroupElementQ",
    "GroupElements",
    "GroupElementToWord",
    "GroupGenerators",
    "Groupings",
    "GroupMultiplicationTable",
    "GroupOpenerColor",
    "GroupOpenerInsideFrame",
    "GroupOrbits",
    "GroupOrder",
    "GroupPageBreakWithin",
    "GroupSetwiseStabilizer",
    "GroupStabilizer",
    "GroupStabilizerChain",
    "GroupTogetherGrouping",
    "GroupTogetherNestedGrouping",
    "GrowCutComponents",
    "Gudermannian",
    "GuidedFilter",
    "GumbelDistribution",
    "HaarWavelet",
    "HadamardMatrix",
    "HalfLine",
    "HalfNormalDistribution",
    "HalfPlane",
    "HalfSpace",
    "HalftoneShading",
    "HamiltonianGraphQ",
    "HammingDistance",
    "HammingWindow",
    "HandlerFunctions",
    "HandlerFunctionsKeys",
    "HankelH1",
    "HankelH2",
    "HankelMatrix",
    "HankelTransform",
    "HannPoissonWindow",
    "HannWindow",
    "HaradaNortonGroupHN",
    "HararyGraph",
    "HardcorePointProcess",
    "HarmonicMean",
    "HarmonicMeanFilter",
    "HarmonicNumber",
    "Hash",
    "HatchFilling",
    "HatchShading",
    "Haversine",
    "HazardFunction",
    "Head",
    "HeadCompose",
    "HeaderAlignment",
    "HeaderBackground",
    "HeaderDisplayFunction",
    "HeaderLines",
    "Headers",
    "HeaderSize",
    "HeaderStyle",
    "Heads",
    "HeatFluxValue",
    "HeatInsulationValue",
    "HeatOutflowValue",
    "HeatRadiationValue",
    "HeatSymmetryValue",
    "HeatTemperatureCondition",
    "HeatTransferPDEComponent",
    "HeatTransferValue",
    "HeavisideLambda",
    "HeavisidePi",
    "HeavisideTheta",
    "HeldGroupHe",
    "HeldPart",
    "HelmholtzPDEComponent",
    "HelpBrowserLookup",
    "HelpBrowserNotebook",
    "HelpBrowserSettings",
    "HelpViewerSettings",
    "Here",
    "HermiteDecomposition",
    "HermiteH",
    "Hermitian",
    "HermitianMatrixQ",
    "HessenbergDecomposition",
    "Hessian",
    "HeunB",
    "HeunBPrime",
    "HeunC",
    "HeunCPrime",
    "HeunD",
    "HeunDPrime",
    "HeunG",
    "HeunGPrime",
    "HeunT",
    "HeunTPrime",
    "HexadecimalCharacter",
    "Hexahedron",
    "HexahedronBox",
    "HexahedronBoxOptions",
    "HiddenItems",
    "HiddenMarkovProcess",
    "HiddenSurface",
    "Highlighted",
    "HighlightGraph",
    "HighlightImage",
    "HighlightMesh",
    "HighlightString",
    "HighpassFilter",
    "HigmanSimsGroupHS",
    "HilbertCurve",
    "HilbertFilter",
    "HilbertMatrix",
    "Histogram",
    "Histogram3D",
    "HistogramDistribution",
    "HistogramList",
    "HistogramPointDensity",
    "HistogramTransform",
    "HistogramTransformInterpolation",
    "HistoricalPeriodData",
    "HitMissTransform",
    "HITSCentrality",
    "HjorthDistribution",
    "HodgeDual",
    "HoeffdingD",
    "HoeffdingDTest",
    "Hold",
    "HoldAll",
    "HoldAllComplete",
    "HoldComplete",
    "HoldFirst",
    "HoldForm",
    "HoldPattern",
    "HoldRest",
    "HolidayCalendar",
    "HomeDirectory",
    "HomePage",
    "Horizontal",
    "HorizontalForm",
    "HorizontalGauge",
    "HorizontalScrollPosition",
    "HornerForm",
    "HostLookup",
    "HotellingTSquareDistribution",
    "HoytDistribution",
    "HTMLSave",
    "HTTPErrorResponse",
    "HTTPRedirect",
    "HTTPRequest",
    "HTTPRequestData",
    "HTTPResponse",
    "Hue",
    "HumanGrowthData",
    "HumpDownHump",
    "HumpEqual",
    "HurwitzLerchPhi",
    "HurwitzZeta",
    "HyperbolicDistribution",
    "HypercubeGraph",
    "HyperexponentialDistribution",
    "Hyperfactorial",
    "Hypergeometric0F1",
    "Hypergeometric0F1Regularized",
    "Hypergeometric1F1",
    "Hypergeometric1F1Regularized",
    "Hypergeometric2F1",
    "Hypergeometric2F1Regularized",
    "HypergeometricDistribution",
    "HypergeometricPFQ",
    "HypergeometricPFQRegularized",
    "HypergeometricU",
    "Hyperlink",
    "HyperlinkAction",
    "HyperlinkCreationSettings",
    "Hyperplane",
    "Hyphenation",
    "HyphenationOptions",
    "HypoexponentialDistribution",
    "HypothesisTestData",
    "I",
    "IconData",
    "Iconize",
    "IconizedObject",
    "IconRules",
    "Icosahedron",
    "Identity",
    "IdentityMatrix",
    "If",
    "IfCompiled",
    "IgnoreCase",
    "IgnoreDiacritics",
    "IgnoreIsotopes",
    "IgnorePunctuation",
    "IgnoreSpellCheck",
    "IgnoreStereochemistry",
    "IgnoringInactive",
    "Im",
    "Image",
    "Image3D",
    "Image3DProjection",
    "Image3DSlices",
    "ImageAccumulate",
    "ImageAdd",
    "ImageAdjust",
    "ImageAlign",
    "ImageApply",
    "ImageApplyIndexed",
    "ImageAspectRatio",
    "ImageAssemble",
    "ImageAugmentationLayer",
    "ImageBoundingBoxes",
    "ImageCache",
    "ImageCacheValid",
    "ImageCapture",
    "ImageCaptureFunction",
    "ImageCases",
    "ImageChannels",
    "ImageClip",
    "ImageCollage",
    "ImageColorSpace",
    "ImageCompose",
    "ImageContainsQ",
    "ImageContents",
    "ImageConvolve",
    "ImageCooccurrence",
    "ImageCorners",
    "ImageCorrelate",
    "ImageCorrespondingPoints",
    "ImageCrop",
    "ImageData",
    "ImageDeconvolve",
    "ImageDemosaic",
    "ImageDifference",
    "ImageDimensions",
    "ImageDisplacements",
    "ImageDistance",
    "ImageEditMode",
    "ImageEffect",
    "ImageExposureCombine",
    "ImageFeatureTrack",
    "ImageFileApply",
    "ImageFileFilter",
    "ImageFileScan",
    "ImageFilter",
    "ImageFocusCombine",
    "ImageForestingComponents",
    "ImageFormattingWidth",
    "ImageForwardTransformation",
    "ImageGraphics",
    "ImageHistogram",
    "ImageIdentify",
    "ImageInstanceQ",
    "ImageKeypoints",
    "ImageLabels",
    "ImageLegends",
    "ImageLevels",
    "ImageLines",
    "ImageMargins",
    "ImageMarker",
    "ImageMarkers",
    "ImageMeasurements",
    "ImageMesh",
    "ImageMultiply",
    "ImageOffset",
    "ImagePad",
    "ImagePadding",
    "ImagePartition",
    "ImagePeriodogram",
    "ImagePerspectiveTransformation",
    "ImagePosition",
    "ImagePreviewFunction",
    "ImagePyramid",
    "ImagePyramidApply",
    "ImageQ",
    "ImageRangeCache",
    "ImageRecolor",
    "ImageReflect",
    "ImageRegion",
    "ImageResize",
    "ImageResolution",
    "ImageRestyle",
    "ImageRotate",
    "ImageRotated",
    "ImageSaliencyFilter",
    "ImageScaled",
    "ImageScan",
    "ImageSize",
    "ImageSizeAction",
    "ImageSizeCache",
    "ImageSizeMultipliers",
    "ImageSizeRaw",
    "ImageStitch",
    "ImageSubtract",
    "ImageTake",
    "ImageTransformation",
    "ImageTrim",
    "ImageType",
    "ImageValue",
    "ImageValuePositions",
    "ImageVectorscopePlot",
    "ImageWaveformPlot",
    "ImagingDevice",
    "ImplicitD",
    "ImplicitRegion",
    "Implies",
    "Import",
    "ImportAutoReplacements",
    "ImportByteArray",
    "ImportedObject",
    "ImportOptions",
    "ImportString",
    "ImprovementImportance",
    "In",
    "Inactivate",
    "Inactive",
    "InactiveStyle",
    "IncidenceGraph",
    "IncidenceList",
    "IncidenceMatrix",
    "IncludeAromaticBonds",
    "IncludeConstantBasis",
    "IncludedContexts",
    "IncludeDefinitions",
    "IncludeDirectories",
    "IncludeFileExtension",
    "IncludeGeneratorTasks",
    "IncludeHydrogens",
    "IncludeInflections",
    "IncludeMetaInformation",
    "IncludePods",
    "IncludeQuantities",
    "IncludeRelatedTables",
    "IncludeSingularSolutions",
    "IncludeSingularTerm",
    "IncludeWindowTimes",
    "Increment",
    "IndefiniteMatrixQ",
    "Indent",
    "IndentingNewlineSpacings",
    "IndentMaxFraction",
    "IndependenceTest",
    "IndependentEdgeSetQ",
    "IndependentPhysicalQuantity",
    "IndependentUnit",
    "IndependentUnitDimension",
    "IndependentVertexSetQ",
    "Indeterminate",
    "IndeterminateThreshold",
    "IndexCreationOptions",
    "Indexed",
    "IndexEdgeTaggedGraph",
    "IndexGraph",
    "IndexTag",
    "Inequality",
    "InertEvaluate",
    "InertExpression",
    "InexactNumberQ",
    "InexactNumbers",
    "InfiniteFuture",
    "InfiniteLine",
    "InfiniteLineThrough",
    "InfinitePast",
    "InfinitePlane",
    "Infinity",
    "Infix",
    "InflationAdjust",
    "InflationMethod",
    "Information",
    "InformationData",
    "InformationDataGrid",
    "Inherited",
    "InheritScope",
    "InhomogeneousPoissonPointProcess",
    "InhomogeneousPoissonProcess",
    "InitialEvaluationHistory",
    "Initialization",
    "InitializationCell",
    "InitializationCellEvaluation",
    "InitializationCellWarning",
    "InitializationObject",
    "InitializationObjects",
    "InitializationValue",
    "Initialize",
    "InitialSeeding",
    "InlineCounterAssignments",
    "InlineCounterIncrements",
    "InlineRules",
    "Inner",
    "InnerPolygon",
    "InnerPolyhedron",
    "Inpaint",
    "Input",
    "InputAliases",
    "InputAssumptions",
    "InputAutoReplacements",
    "InputField",
    "InputFieldBox",
    "InputFieldBoxOptions",
    "InputForm",
    "InputGrouping",
    "InputNamePacket",
    "InputNotebook",
    "InputPacket",
    "InputPorts",
    "InputSettings",
    "InputStream",
    "InputString",
    "InputStringPacket",
    "InputToBoxFormPacket",
    "Insert",
    "InsertionFunction",
    "InsertionPointObject",
    "InsertLinebreaks",
    "InsertResults",
    "Inset",
    "Inset3DBox",
    "Inset3DBoxOptions",
    "InsetBox",
    "InsetBoxOptions",
    "Insphere",
    "Install",
    "InstallService",
    "InstanceNormalizationLayer",
    "InString",
    "Integer",
    "IntegerDigits",
    "IntegerExponent",
    "IntegerLength",
    "IntegerName",
    "IntegerPart",
    "IntegerPartitions",
    "IntegerQ",
    "IntegerReverse",
    "Integers",
    "IntegerString",
    "Integral",
    "Integrate",
    "IntegrateChangeVariables",
    "Interactive",
    "InteractiveTradingChart",
    "InterfaceSwitched",
    "Interlaced",
    "Interleaving",
    "InternallyBalancedDecomposition",
    "InterpolatingFunction",
    "InterpolatingPolynomial",
    "Interpolation",
    "InterpolationOrder",
    "InterpolationPoints",
    "InterpolationPrecision",
    "Interpretation",
    "InterpretationBox",
    "InterpretationBoxOptions",
    "InterpretationFunction",
    "Interpreter",
    "InterpretTemplate",
    "InterquartileRange",
    "Interrupt",
    "InterruptSettings",
    "IntersectedEntityClass",
    "IntersectingQ",
    "Intersection",
    "Interval",
    "IntervalIntersection",
    "IntervalMarkers",
    "IntervalMarkersStyle",
    "IntervalMemberQ",
    "IntervalSlider",
    "IntervalUnion",
    "Into",
    "Inverse",
    "InverseBetaRegularized",
    "InverseBilateralLaplaceTransform",
    "InverseBilateralZTransform",
    "InverseCDF",
    "InverseChiSquareDistribution",
    "InverseContinuousWaveletTransform",
    "InverseDistanceTransform",
    "InverseEllipticNomeQ",
    "InverseErf",
    "InverseErfc",
    "InverseFourier",
    "InverseFourierCosTransform",
    "InverseFourierSequenceTransform",
    "InverseFourierSinTransform",
    "InverseFourierTransform",
    "InverseFunction",
    "InverseFunctions",
    "InverseGammaDistribution",
    "InverseGammaRegularized",
    "InverseGaussianDistribution",
    "InverseGudermannian",
    "InverseHankelTransform",
    "InverseHaversine",
    "InverseImagePyramid",
    "InverseJacobiCD",
    "InverseJacobiCN",
    "InverseJacobiCS",
    "InverseJacobiDC",
    "InverseJacobiDN",
    "InverseJacobiDS",
    "InverseJacobiNC",
    "InverseJacobiND",
    "InverseJacobiNS",
    "InverseJacobiSC",
    "InverseJacobiSD",
    "InverseJacobiSN",
    "InverseLaplaceTransform",
    "InverseMellinTransform",
    "InversePermutation",
    "InverseRadon",
    "InverseRadonTransform",
    "InverseSeries",
    "InverseShortTimeFourier",
    "InverseSpectrogram",
    "InverseSurvivalFunction",
    "InverseTransformedRegion",
    "InverseWaveletTransform",
    "InverseWeierstrassP",
    "InverseWishartMatrixDistribution",
    "InverseZTransform",
    "Invisible",
    "InvisibleApplication",
    "InvisibleTimes",
    "IPAddress",
    "IrreduciblePolynomialQ",
    "IslandData",
    "IsolatingInterval",
    "IsomorphicGraphQ",
    "IsomorphicSubgraphQ",
    "IsotopeData",
    "Italic",
    "Item",
    "ItemAspectRatio",
    "ItemBox",
    "ItemBoxOptions",
    "ItemDisplayFunction",
    "ItemSize",
    "ItemStyle",
    "ItoProcess",
    "JaccardDissimilarity",
    "JacobiAmplitude",
    "Jacobian",
    "JacobiCD",
    "JacobiCN",
    "JacobiCS",
    "JacobiDC",
    "JacobiDN",
    "JacobiDS",
    "JacobiEpsilon",
    "JacobiNC",
    "JacobiND",
    "JacobiNS",
    "JacobiP",
    "JacobiSC",
    "JacobiSD",
    "JacobiSN",
    "JacobiSymbol",
    "JacobiZeta",
    "JacobiZN",
    "JankoGroupJ1",
    "JankoGroupJ2",
    "JankoGroupJ3",
    "JankoGroupJ4",
    "JarqueBeraALMTest",
    "JohnsonDistribution",
    "Join",
    "JoinAcross",
    "Joined",
    "JoinedCurve",
    "JoinedCurveBox",
    "JoinedCurveBoxOptions",
    "JoinForm",
    "JordanDecomposition",
    "JordanModelDecomposition",
    "JulianDate",
    "JuliaSetBoettcher",
    "JuliaSetIterationCount",
    "JuliaSetPlot",
    "JuliaSetPoints",
    "K",
    "KagiChart",
    "KaiserBesselWindow",
    "KaiserWindow",
    "KalmanEstimator",
    "KalmanFilter",
    "KarhunenLoeveDecomposition",
    "KaryTree",
    "KatzCentrality",
    "KCoreComponents",
    "KDistribution",
    "KEdgeConnectedComponents",
    "KEdgeConnectedGraphQ",
    "KeepExistingVersion",
    "KelvinBei",
    "KelvinBer",
    "KelvinKei",
    "KelvinKer",
    "KendallTau",
    "KendallTauTest",
    "KernelConfiguration",
    "KernelExecute",
    "KernelFunction",
    "KernelMixtureDistribution",
    "KernelObject",
    "Kernels",
    "Ket",
    "Key",
    "KeyCollisionFunction",
    "KeyComplement",
    "KeyDrop",
    "KeyDropFrom",
    "KeyExistsQ",
    "KeyFreeQ",
    "KeyIntersection",
    "KeyMap",
    "KeyMemberQ",
    "KeypointStrength",
    "Keys",
    "KeySelect",
    "KeySort",
    "KeySortBy",
    "KeyTake",
    "KeyUnion",
    "KeyValueMap",
    "KeyValuePattern",
    "Khinchin",
    "KillProcess",
    "KirchhoffGraph",
    "KirchhoffMatrix",
    "KleinInvariantJ",
    "KnapsackSolve",
    "KnightTourGraph",
    "KnotData",
    "KnownUnitQ",
    "KochCurve",
    "KolmogorovSmirnovTest",
    "KroneckerDelta",
    "KroneckerModelDecomposition",
    "KroneckerProduct",
    "KroneckerSymbol",
    "KuiperTest",
    "KumaraswamyDistribution",
    "Kurtosis",
    "KuwaharaFilter",
    "KVertexConnectedComponents",
    "KVertexConnectedGraphQ",
    "LABColor",
    "Label",
    "Labeled",
    "LabeledSlider",
    "LabelingFunction",
    "LabelingSize",
    "LabelStyle",
    "LabelVisibility",
    "LaguerreL",
    "LakeData",
    "LambdaComponents",
    "LambertW",
    "LameC",
    "LameCPrime",
    "LameEigenvalueA",
    "LameEigenvalueB",
    "LameS",
    "LameSPrime",
    "LaminaData",
    "LanczosWindow",
    "LandauDistribution",
    "Language",
    "LanguageCategory",
    "LanguageData",
    "LanguageIdentify",
    "LanguageOptions",
    "LaplaceDistribution",
    "LaplaceTransform",
    "Laplacian",
    "LaplacianFilter",
    "LaplacianGaussianFilter",
    "LaplacianPDETerm",
    "Large",
    "Larger",
    "Last",
    "Latitude",
    "LatitudeLongitude",
    "LatticeData",
    "LatticeReduce",
    "Launch",
    "LaunchKernels",
    "LayeredGraphPlot",
    "LayeredGraphPlot3D",
    "LayerSizeFunction",
    "LayoutInformation",
    "LCHColor",
    "LCM",
    "LeaderSize",
    "LeafCount",
    "LeapVariant",
    "LeapYearQ",
    "LearnDistribution",
    "LearnedDistribution",
    "LearningRate",
    "LearningRateMultipliers",
    "LeastSquares",
    "LeastSquaresFilterKernel",
    "Left",
    "LeftArrow",
    "LeftArrowBar",
    "LeftArrowRightArrow",
    "LeftDownTeeVector",
    "LeftDownVector",
    "LeftDownVectorBar",
    "LeftRightArrow",
    "LeftRightVector",
    "LeftTee",
    "LeftTeeArrow",
    "LeftTeeVector",
    "LeftTriangle",
    "LeftTriangleBar",
    "LeftTriangleEqual",
    "LeftUpDownVector",
    "LeftUpTeeVector",
    "LeftUpVector",
    "LeftUpVectorBar",
    "LeftVector",
    "LeftVectorBar",
    "LegendAppearance",
    "Legended",
    "LegendFunction",
    "LegendLabel",
    "LegendLayout",
    "LegendMargins",
    "LegendMarkers",
    "LegendMarkerSize",
    "LegendreP",
    "LegendreQ",
    "LegendreType",
    "Length",
    "LengthWhile",
    "LerchPhi",
    "Less",
    "LessEqual",
    "LessEqualGreater",
    "LessEqualThan",
    "LessFullEqual",
    "LessGreater",
    "LessLess",
    "LessSlantEqual",
    "LessThan",
    "LessTilde",
    "LetterCharacter",
    "LetterCounts",
    "LetterNumber",
    "LetterQ",
    "Level",
    "LeveneTest",
    "LeviCivitaTensor",
    "LevyDistribution",
    "Lexicographic",
    "LexicographicOrder",
    "LexicographicSort",
    "LibraryDataType",
    "LibraryFunction",
    "LibraryFunctionDeclaration",
    "LibraryFunctionError",
    "LibraryFunctionInformation",
    "LibraryFunctionLoad",
    "LibraryFunctionUnload",
    "LibraryLoad",
    "LibraryUnload",
    "LicenseEntitlementObject",
    "LicenseEntitlements",
    "LicenseID",
    "LicensingSettings",
    "LiftingFilterData",
    "LiftingWaveletTransform",
    "LightBlue",
    "LightBrown",
    "LightCyan",
    "Lighter",
    "LightGray",
    "LightGreen",
    "Lighting",
    "LightingAngle",
    "LightMagenta",
    "LightOrange",
    "LightPink",
    "LightPurple",
    "LightRed",
    "LightSources",
    "LightYellow",
    "Likelihood",
    "Limit",
    "LimitsPositioning",
    "LimitsPositioningTokens",
    "LindleyDistribution",
    "Line",
    "Line3DBox",
    "Line3DBoxOptions",
    "LinearFilter",
    "LinearFractionalOptimization",
    "LinearFractionalTransform",
    "LinearGradientFilling",
    "LinearGradientImage",
    "LinearizingTransformationData",
    "LinearLayer",
    "LinearModelFit",
    "LinearOffsetFunction",
    "LinearOptimization",
    "LinearProgramming",
    "LinearRecurrence",
    "LinearSolve",
    "LinearSolveFunction",
    "LineBox",
    "LineBoxOptions",
    "LineBreak",
    "LinebreakAdjustments",
    "LineBreakChart",
    "LinebreakSemicolonWeighting",
    "LineBreakWithin",
    "LineColor",
    "LineGraph",
    "LineIndent",
    "LineIndentMaxFraction",
    "LineIntegralConvolutionPlot",
    "LineIntegralConvolutionScale",
    "LineLegend",
    "LineOpacity",
    "LineSpacing",
    "LineWrapParts",
    "LinkActivate",
    "LinkClose",
    "LinkConnect",
    "LinkConnectedQ",
    "LinkCreate",
    "LinkError",
    "LinkFlush",
    "LinkFunction",
    "LinkHost",
    "LinkInterrupt",
    "LinkLaunch",
    "LinkMode",
    "LinkObject",
    "LinkOpen",
    "LinkOptions",
    "LinkPatterns",
    "LinkProtocol",
    "LinkRankCentrality",
    "LinkRead",
    "LinkReadHeld",
    "LinkReadyQ",
    "Links",
    "LinkService",
    "LinkWrite",
    "LinkWriteHeld",
    "LiouvilleLambda",
    "List",
    "Listable",
    "ListAnimate",
    "ListContourPlot",
    "ListContourPlot3D",
    "ListConvolve",
    "ListCorrelate",
    "ListCurvePathPlot",
    "ListDeconvolve",
    "ListDensityPlot",
    "ListDensityPlot3D",
    "Listen",
    "ListFormat",
    "ListFourierSequenceTransform",
    "ListInterpolation",
    "ListLineIntegralConvolutionPlot",
    "ListLinePlot",
    "ListLinePlot3D",
    "ListLogLinearPlot",
    "ListLogLogPlot",
    "ListLogPlot",
    "ListPicker",
    "ListPickerBox",
    "ListPickerBoxBackground",
    "ListPickerBoxOptions",
    "ListPlay",
    "ListPlot",
    "ListPlot3D",
    "ListPointPlot3D",
    "ListPolarPlot",
    "ListQ",
    "ListSliceContourPlot3D",
    "ListSliceDensityPlot3D",
    "ListSliceVectorPlot3D",
    "ListStepPlot",
    "ListStreamDensityPlot",
    "ListStreamPlot",
    "ListStreamPlot3D",
    "ListSurfacePlot3D",
    "ListVectorDensityPlot",
    "ListVectorDisplacementPlot",
    "ListVectorDisplacementPlot3D",
    "ListVectorPlot",
    "ListVectorPlot3D",
    "ListZTransform",
    "Literal",
    "LiteralSearch",
    "LiteralType",
    "LoadCompiledComponent",
    "LocalAdaptiveBinarize",
    "LocalCache",
    "LocalClusteringCoefficient",
    "LocalEvaluate",
    "LocalizeDefinitions",
    "LocalizeVariables",
    "LocalObject",
    "LocalObjects",
    "LocalResponseNormalizationLayer",
    "LocalSubmit",
    "LocalSymbol",
    "LocalTime",
    "LocalTimeZone",
    "LocationEquivalenceTest",
    "LocationTest",
    "Locator",
    "LocatorAutoCreate",
    "LocatorBox",
    "LocatorBoxOptions",
    "LocatorCentering",
    "LocatorPane",
    "LocatorPaneBox",
    "LocatorPaneBoxOptions",
    "LocatorRegion",
    "Locked",
    "Log",
    "Log10",
    "Log2",
    "LogBarnesG",
    "LogGamma",
    "LogGammaDistribution",
    "LogicalExpand",
    "LogIntegral",
    "LogisticDistribution",
    "LogisticSigmoid",
    "LogitModelFit",
    "LogLikelihood",
    "LogLinearPlot",
    "LogLogisticDistribution",
    "LogLogPlot",
    "LogMultinormalDistribution",
    "LogNormalDistribution",
    "LogPlot",
    "LogRankTest",
    "LogSeriesDistribution",
    "LongEqual",
    "Longest",
    "LongestCommonSequence",
    "LongestCommonSequencePositions",
    "LongestCommonSubsequence",
    "LongestCommonSubsequencePositions",
    "LongestMatch",
    "LongestOrderedSequence",
    "LongForm",
    "Longitude",
    "LongLeftArrow",
    "LongLeftRightArrow",
    "LongRightArrow",
    "LongShortTermMemoryLayer",
    "Lookup",
    "Loopback",
    "LoopFreeGraphQ",
    "Looping",
    "LossFunction",
    "LowerCaseQ",
    "LowerLeftArrow",
    "LowerRightArrow",
    "LowerTriangularize",
    "LowerTriangularMatrix",
    "LowerTriangularMatrixQ",
    "LowpassFilter",
    "LQEstimatorGains",
    "LQGRegulator",
    "LQOutputRegulatorGains",
    "LQRegulatorGains",
    "LUBackSubstitution",
    "LucasL",
    "LuccioSamiComponents",
    "LUDecomposition",
    "LunarEclipse",
    "LUVColor",
    "LyapunovSolve",
    "LyonsGroupLy",
    "MachineID",
    "MachineName",
    "MachineNumberQ",
    "MachinePrecision",
    "MacintoshSystemPageSetup",
    "Magenta",
    "Magnification",
    "Magnify",
    "MailAddressValidation",
    "MailExecute",
    "MailFolder",
    "MailItem",
    "MailReceiverFunction",
    "MailResponseFunction",
    "MailSearch",
    "MailServerConnect",
    "MailServerConnection",
    "MailSettings",
    "MainSolve",
    "MaintainDynamicCaches",
    "Majority",
    "MakeBoxes",
    "MakeExpression",
    "MakeRules",
    "ManagedLibraryExpressionID",
    "ManagedLibraryExpressionQ",
    "MandelbrotSetBoettcher",
    "MandelbrotSetDistance",
    "MandelbrotSetIterationCount",
    "MandelbrotSetMemberQ",
    "MandelbrotSetPlot",
    "MangoldtLambda",
    "ManhattanDistance",
    "Manipulate",
    "Manipulator",
    "MannedSpaceMissionData",
    "MannWhitneyTest",
    "MantissaExponent",
    "Manual",
    "Map",
    "MapAll",
    "MapApply",
    "MapAt",
    "MapIndexed",
    "MAProcess",
    "MapThread",
    "MarchenkoPasturDistribution",
    "MarcumQ",
    "MardiaCombinedTest",
    "MardiaKurtosisTest",
    "MardiaSkewnessTest",
    "MarginalDistribution",
    "MarkovProcessProperties",
    "Masking",
    "MassConcentrationCondition",
    "MassFluxValue",
    "MassImpermeableBoundaryValue",
    "MassOutflowValue",
    "MassSymmetryValue",
    "MassTransferValue",
    "MassTransportPDEComponent",
    "MatchingDissimilarity",
    "MatchLocalNameQ",
    "MatchLocalNames",
    "MatchQ",
    "Material",
    "MaterialShading",
    "MaternPointProcess",
    "MathematicalFunctionData",
    "MathematicaNotation",
    "MathieuC",
    "MathieuCharacteristicA",
    "MathieuCharacteristicB",
    "MathieuCharacteristicExponent",
    "MathieuCPrime",
    "MathieuGroupM11",
    "MathieuGroupM12",
    "MathieuGroupM22",
    "MathieuGroupM23",
    "MathieuGroupM24",
    "MathieuS",
    "MathieuSPrime",
    "MathMLForm",
    "MathMLText",
    "Matrices",
    "MatrixExp",
    "MatrixForm",
    "MatrixFunction",
    "MatrixLog",
    "MatrixNormalDistribution",
    "MatrixPlot",
    "MatrixPower",
    "MatrixPropertyDistribution",
    "MatrixQ",
    "MatrixRank",
    "MatrixTDistribution",
    "Max",
    "MaxBend",
    "MaxCellMeasure",
    "MaxColorDistance",
    "MaxDate",
    "MaxDetect",
    "MaxDisplayedChildren",
    "MaxDuration",
    "MaxExtraBandwidths",
    "MaxExtraConditions",
    "MaxFeatureDisplacement",
    "MaxFeatures",
    "MaxFilter",
    "MaximalBy",
    "Maximize",
    "MaxItems",
    "MaxIterations",
    "MaxLimit",
    "MaxMemoryUsed",
    "MaxMixtureKernels",
    "MaxOverlapFraction",
    "MaxPlotPoints",
    "MaxPoints",
    "MaxRecursion",
    "MaxStableDistribution",
    "MaxStepFraction",
    "MaxSteps",
    "MaxStepSize",
    "MaxTrainingRounds",
    "MaxValue",
    "MaxwellDistribution",
    "MaxWordGap",
    "McLaughlinGroupMcL",
    "Mean",
    "MeanAbsoluteLossLayer",
    "MeanAround",
    "MeanClusteringCoefficient",
    "MeanDegreeConnectivity",
    "MeanDeviation",
    "MeanFilter",
    "MeanGraphDistance",
    "MeanNeighborDegree",
    "MeanPointDensity",
    "MeanShift",
    "MeanShiftFilter",
    "MeanSquaredLossLayer",
    "Median",
    "MedianDeviation",
    "MedianFilter",
    "MedicalTestData",
    "Medium",
    "MeijerG",
    "MeijerGReduce",
    "MeixnerDistribution",
    "MellinConvolve",
    "MellinTransform",
    "MemberQ",
    "MemoryAvailable",
    "MemoryConstrained",
    "MemoryConstraint",
    "MemoryInUse",
    "MengerMesh",
    "Menu",
    "MenuAppearance",
    "MenuCommandKey",
    "MenuEvaluator",
    "MenuItem",
    "MenuList",
    "MenuPacket",
    "MenuSortingValue",
    "MenuStyle",
    "MenuView",
    "Merge",
    "MergeDifferences",
    "MergingFunction",
    "MersennePrimeExponent",
    "MersennePrimeExponentQ",
    "Mesh",
    "MeshCellCentroid",
    "MeshCellCount",
    "MeshCellHighlight",
    "MeshCellIndex",
    "MeshCellLabel",
    "MeshCellMarker",
    "MeshCellMeasure",
    "MeshCellQuality",
    "MeshCells",
    "MeshCellShapeFunction",
    "MeshCellStyle",
    "MeshConnectivityGraph",
    "MeshCoordinates",
    "MeshFunctions",
    "MeshPrimitives",
    "MeshQualityGoal",
    "MeshRange",
    "MeshRefinementFunction",
    "MeshRegion",
    "MeshRegionQ",
    "MeshShading",
    "MeshStyle",
    "Message",
    "MessageDialog",
    "MessageList",
    "MessageName",
    "MessageObject",
    "MessageOptions",
    "MessagePacket",
    "Messages",
    "MessagesNotebook",
    "MetaCharacters",
    "MetaInformation",
    "MeteorShowerData",
    "Method",
    "MethodOptions",
    "MexicanHatWavelet",
    "MeyerWavelet",
    "Midpoint",
    "MIMETypeToFormatList",
    "Min",
    "MinColorDistance",
    "MinDate",
    "MinDetect",
    "MineralData",
    "MinFilter",
    "MinimalBy",
    "MinimalPolynomial",
    "MinimalStateSpaceModel",
    "Minimize",
    "MinimumTimeIncrement",
    "MinIntervalSize",
    "MinkowskiQuestionMark",
    "MinLimit",
    "MinMax",
    "MinorPlanetData",
    "Minors",
    "MinPointSeparation",
    "MinRecursion",
    "MinSize",
    "MinStableDistribution",
    "Minus",
    "MinusPlus",
    "MinValue",
    "Missing",
    "MissingBehavior",
    "MissingDataMethod",
    "MissingDataRules",
    "MissingQ",
    "MissingString",
    "MissingStyle",
    "MissingValuePattern",
    "MissingValueSynthesis",
    "MittagLefflerE",
    "MixedFractionParts",
    "MixedGraphQ",
    "MixedMagnitude",
    "MixedRadix",
    "MixedRadixQuantity",
    "MixedUnit",
    "MixtureDistribution",
    "Mod",
    "Modal",
    "Mode",
    "ModelPredictiveController",
    "Modular",
    "ModularInverse",
    "ModularLambda",
    "Module",
    "Modulus",
    "MoebiusMu",
    "Molecule",
    "MoleculeAlign",
    "MoleculeContainsQ",
    "MoleculeDraw",
    "MoleculeEquivalentQ",
    "MoleculeFreeQ",
    "MoleculeGraph",
    "MoleculeMatchQ",
    "MoleculeMaximumCommonSubstructure",
    "MoleculeModify",
    "MoleculeName",
    "MoleculePattern",
    "MoleculePlot",
    "MoleculePlot3D",
    "MoleculeProperty",
    "MoleculeQ",
    "MoleculeRecognize",
    "MoleculeSubstructureCount",
    "MoleculeValue",
    "Moment",
    "MomentConvert",
    "MomentEvaluate",
    "MomentGeneratingFunction",
    "MomentOfInertia",
    "Monday",
    "Monitor",
    "MonomialList",
    "MonomialOrder",
    "MonsterGroupM",
    "MoonPhase",
    "MoonPosition",
    "MorletWavelet",
    "MorphologicalBinarize",
    "MorphologicalBranchPoints",
    "MorphologicalComponents",
    "MorphologicalEulerNumber",
    "MorphologicalGraph",
    "MorphologicalPerimeter",
    "MorphologicalTransform",
    "MortalityData",
    "Most",
    "MountainData",
    "MouseAnnotation",
    "MouseAppearance",
    "MouseAppearanceTag",
    "MouseButtons",
    "Mouseover",
    "MousePointerNote",
    "MousePosition",
    "MovieData",
    "MovingAverage",
    "MovingMap",
    "MovingMedian",
    "MoyalDistribution",
    "MultiaxisArrangement",
    "Multicolumn",
    "MultiedgeStyle",
    "MultigraphQ",
    "MultilaunchWarning",
    "MultiLetterItalics",
    "MultiLetterStyle",
    "MultilineFunction",
    "Multinomial",
    "MultinomialDistribution",
    "MultinormalDistribution",
    "MultiplicativeOrder",
    "Multiplicity",
    "MultiplySides",
    "MultiscriptBoxOptions",
    "Multiselection",
    "MultivariateHypergeometricDistribution",
    "MultivariatePoissonDistribution",
    "MultivariateTDistribution",
    "N",
    "NakagamiDistribution",
    "NameQ",
    "Names",
    "NamespaceBox",
    "NamespaceBoxOptions",
    "Nand",
    "NArgMax",
    "NArgMin",
    "NBernoulliB",
    "NBodySimulation",
    "NBodySimulationData",
    "NCache",
    "NCaputoD",
    "NDEigensystem",
    "NDEigenvalues",
    "NDSolve",
    "NDSolveValue",
    "Nearest",
    "NearestFunction",
    "NearestMeshCells",
    "NearestNeighborG",
    "NearestNeighborGraph",
    "NearestTo",
    "NebulaData",
    "NeedlemanWunschSimilarity",
    "Needs",
    "Negative",
    "NegativeBinomialDistribution",
    "NegativeDefiniteMatrixQ",
    "NegativeIntegers",
    "NegativelyOrientedPoints",
    "NegativeMultinomialDistribution",
    "NegativeRationals",
    "NegativeReals",
    "NegativeSemidefiniteMatrixQ",
    "NeighborhoodData",
    "NeighborhoodGraph",
    "Nest",
    "NestedGreaterGreater",
    "NestedLessLess",
    "NestedScriptRules",
    "NestGraph",
    "NestList",
    "NestTree",
    "NestWhile",
    "NestWhileList",
    "NetAppend",
    "NetArray",
    "NetArrayLayer",
    "NetBidirectionalOperator",
    "NetChain",
    "NetDecoder",
    "NetDelete",
    "NetDrop",
    "NetEncoder",
    "NetEvaluationMode",
    "NetExternalObject",
    "NetExtract",
    "NetFlatten",
    "NetFoldOperator",
    "NetGANOperator",
    "NetGraph",
    "NetInformation",
    "NetInitialize",
    "NetInsert",
    "NetInsertSharedArrays",
    "NetJoin",
    "NetMapOperator",
    "NetMapThreadOperator",
    "NetMeasurements",
    "NetModel",
    "NetNestOperator",
    "NetPairEmbeddingOperator",
    "NetPort",
    "NetPortGradient",
    "NetPrepend",
    "NetRename",
    "NetReplace",
    "NetReplacePart",
    "NetSharedArray",
    "NetStateObject",
    "NetTake",
    "NetTrain",
    "NetTrainResultsObject",
    "NetUnfold",
    "NetworkPacketCapture",
    "NetworkPacketRecording",
    "NetworkPacketRecordingDuring",
    "NetworkPacketTrace",
    "NeumannValue",
    "NevilleThetaC",
    "NevilleThetaD",
    "NevilleThetaN",
    "NevilleThetaS",
    "NewPrimitiveStyle",
    "NExpectation",
    "Next",
    "NextCell",
    "NextDate",
    "NextPrime",
    "NextScheduledTaskTime",
    "NeymanScottPointProcess",
    "NFractionalD",
    "NHoldAll",
    "NHoldFirst",
    "NHoldRest",
    "NicholsGridLines",
    "NicholsPlot",
    "NightHemisphere",
    "NIntegrate",
    "NMaximize",
    "NMaxValue",
    "NMinimize",
    "NMinValue",
    "NominalScale",
    "NominalVariables",
    "NonAssociative",
    "NoncentralBetaDistribution",
    "NoncentralChiSquareDistribution",
    "NoncentralFRatioDistribution",
    "NoncentralStudentTDistribution",
    "NonCommutativeMultiply",
    "NonConstants",
    "NondimensionalizationTransform",
    "None",
    "NoneTrue",
    "NonlinearModelFit",
    "NonlinearStateSpaceModel",
    "NonlocalMeansFilter",
    "NonNegative",
    "NonNegativeIntegers",
    "NonNegativeRationals",
    "NonNegativeReals",
    "NonPositive",
    "NonPositiveIntegers",
    "NonPositiveRationals",
    "NonPositiveReals",
    "Nor",
    "NorlundB",
    "Norm",
    "Normal",
    "NormalDistribution",
    "NormalGrouping",
    "NormalizationLayer",
    "Normalize",
    "Normalized",
    "NormalizedSquaredEuclideanDistance",
    "NormalMatrixQ",
    "NormalsFunction",
    "NormFunction",
    "Not",
    "NotCongruent",
    "NotCupCap",
    "NotDoubleVerticalBar",
    "Notebook",
    "NotebookApply",
    "NotebookAutoSave",
    "NotebookBrowseDirectory",
    "NotebookClose",
    "NotebookConvertSettings",
    "NotebookCreate",
    "NotebookDefault",
    "NotebookDelete",
    "NotebookDirectory",
    "NotebookDynamicExpression",
    "NotebookEvaluate",
    "NotebookEventActions",
    "NotebookFileName",
    "NotebookFind",
    "NotebookGet",
    "NotebookImport",
    "NotebookInformation",
    "NotebookInterfaceObject",
    "NotebookLocate",
    "NotebookObject",
    "NotebookOpen",
    "NotebookPath",
    "NotebookPrint",
    "NotebookPut",
    "NotebookRead",
    "Notebooks",
    "NotebookSave",
    "NotebookSelection",
    "NotebooksMenu",
    "NotebookTemplate",
    "NotebookWrite",
    "NotElement",
    "NotEqualTilde",
    "NotExists",
    "NotGreater",
    "NotGreaterEqual",
    "NotGreaterFullEqual",
    "NotGreaterGreater",
    "NotGreaterLess",
    "NotGreaterSlantEqual",
    "NotGreaterTilde",
    "Nothing",
    "NotHumpDownHump",
    "NotHumpEqual",
    "NotificationFunction",
    "NotLeftTriangle",
    "NotLeftTriangleBar",
    "NotLeftTriangleEqual",
    "NotLess",
    "NotLessEqual",
    "NotLessFullEqual",
    "NotLessGreater",
    "NotLessLess",
    "NotLessSlantEqual",
    "NotLessTilde",
    "NotNestedGreaterGreater",
    "NotNestedLessLess",
    "NotPrecedes",
    "NotPrecedesEqual",
    "NotPrecedesSlantEqual",
    "NotPrecedesTilde",
    "NotReverseElement",
    "NotRightTriangle",
    "NotRightTriangleBar",
    "NotRightTriangleEqual",
    "NotSquareSubset",
    "NotSquareSubsetEqual",
    "NotSquareSuperset",
    "NotSquareSupersetEqual",
    "NotSubset",
    "NotSubsetEqual",
    "NotSucceeds",
    "NotSucceedsEqual",
    "NotSucceedsSlantEqual",
    "NotSucceedsTilde",
    "NotSuperset",
    "NotSupersetEqual",
    "NotTilde",
    "NotTildeEqual",
    "NotTildeFullEqual",
    "NotTildeTilde",
    "NotVerticalBar",
    "Now",
    "NoWhitespace",
    "NProbability",
    "NProduct",
    "NProductFactors",
    "NRoots",
    "NSolve",
    "NSolveValues",
    "NSum",
    "NSumTerms",
    "NuclearExplosionData",
    "NuclearReactorData",
    "Null",
    "NullRecords",
    "NullSpace",
    "NullWords",
    "Number",
    "NumberCompose",
    "NumberDecompose",
    "NumberDigit",
    "NumberExpand",
    "NumberFieldClassNumber",
    "NumberFieldDiscriminant",
    "NumberFieldFundamentalUnits",
    "NumberFieldIntegralBasis",
    "NumberFieldNormRepresentatives",
    "NumberFieldRegulator",
    "NumberFieldRootsOfUnity",
    "NumberFieldSignature",
    "NumberForm",
    "NumberFormat",
    "NumberLinePlot",
    "NumberMarks",
    "NumberMultiplier",
    "NumberPadding",
    "NumberPoint",
    "NumberQ",
    "NumberSeparator",
    "NumberSigns",
    "NumberString",
    "Numerator",
    "NumeratorDenominator",
    "NumericalOrder",
    "NumericalSort",
    "NumericArray",
    "NumericArrayQ",
    "NumericArrayType",
    "NumericFunction",
    "NumericQ",
    "NuttallWindow",
    "NValues",
    "NyquistGridLines",
    "NyquistPlot",
    "O",
    "ObjectExistsQ",
    "ObservabilityGramian",
    "ObservabilityMatrix",
    "ObservableDecomposition",
    "ObservableModelQ",
    "OceanData",
    "Octahedron",
    "OddQ",
    "Off",
    "Offset",
    "OLEData",
    "On",
    "ONanGroupON",
    "Once",
    "OneIdentity",
    "Opacity",
    "OpacityFunction",
    "OpacityFunctionScaling",
    "Open",
    "OpenAppend",
    "Opener",
    "OpenerBox",
    "OpenerBoxOptions",
    "OpenerView",
    "OpenFunctionInspectorPacket",
    "Opening",
    "OpenRead",
    "OpenSpecialOptions",
    "OpenTemporary",
    "OpenWrite",
    "Operate",
    "OperatingSystem",
    "OperatorApplied",
    "OptimumFlowData",
    "Optional",
    "OptionalElement",
    "OptionInspectorSettings",
    "OptionQ",
    "Options",
    "OptionsPacket",
    "OptionsPattern",
    "OptionValue",
    "OptionValueBox",
    "OptionValueBoxOptions",
    "Or",
    "Orange",
    "Order",
    "OrderDistribution",
    "OrderedQ",
    "Ordering",
    "OrderingBy",
    "OrderingLayer",
    "Orderless",
    "OrderlessPatternSequence",
    "OrdinalScale",
    "OrnsteinUhlenbeckProcess",
    "Orthogonalize",
    "OrthogonalMatrixQ",
    "Out",
    "Outer",
    "OuterPolygon",
    "OuterPolyhedron",
    "OutputAutoOverwrite",
    "OutputControllabilityMatrix",
    "OutputControllableModelQ",
    "OutputForm",
    "OutputFormData",
    "OutputGrouping",
    "OutputMathEditExpression",
    "OutputNamePacket",
    "OutputPorts",
    "OutputResponse",
    "OutputSizeLimit",
    "OutputStream",
    "Over",
    "OverBar",
    "OverDot",
    "Overflow",
    "OverHat",
    "Overlaps",
    "Overlay",
    "OverlayBox",
    "OverlayBoxOptions",
    "OverlayVideo",
    "Overscript",
    "OverscriptBox",
    "OverscriptBoxOptions",
    "OverTilde",
    "OverVector",
    "OverwriteTarget",
    "OwenT",
    "OwnValues",
    "Package",
    "PackingMethod",
    "PackPaclet",
    "PacletDataRebuild",
    "PacletDirectoryAdd",
    "PacletDirectoryLoad",
    "PacletDirectoryRemove",
    "PacletDirectoryUnload",
    "PacletDisable",
    "PacletEnable",
    "PacletFind",
    "PacletFindRemote",
    "PacletInformation",
    "PacletInstall",
    "PacletInstallSubmit",
    "PacletNewerQ",
    "PacletObject",
    "PacletObjectQ",
    "PacletSite",
    "PacletSiteObject",
    "PacletSiteRegister",
    "PacletSites",
    "PacletSiteUnregister",
    "PacletSiteUpdate",
    "PacletSymbol",
    "PacletUninstall",
    "PacletUpdate",
    "PaddedForm",
    "Padding",
    "PaddingLayer",
    "PaddingSize",
    "PadeApproximant",
    "PadLeft",
    "PadRight",
    "PageBreakAbove",
    "PageBreakBelow",
    "PageBreakWithin",
    "PageFooterLines",
    "PageFooters",
    "PageHeaderLines",
    "PageHeaders",
    "PageHeight",
    "PageRankCentrality",
    "PageTheme",
    "PageWidth",
    "Pagination",
    "PairCorrelationG",
    "PairedBarChart",
    "PairedHistogram",
    "PairedSmoothHistogram",
    "PairedTTest",
    "PairedZTest",
    "PaletteNotebook",
    "PalettePath",
    "PalettesMenuSettings",
    "PalindromeQ",
    "Pane",
    "PaneBox",
    "PaneBoxOptions",
    "Panel",
    "PanelBox",
    "PanelBoxOptions",
    "Paneled",
    "PaneSelector",
    "PaneSelectorBox",
    "PaneSelectorBoxOptions",
    "PaperWidth",
    "ParabolicCylinderD",
    "ParagraphIndent",
    "ParagraphSpacing",
    "ParallelArray",
    "ParallelAxisPlot",
    "ParallelCombine",
    "ParallelDo",
    "Parallelepiped",
    "ParallelEvaluate",
    "Parallelization",
    "Parallelize",
    "ParallelKernels",
    "ParallelMap",
    "ParallelNeeds",
    "Parallelogram",
    "ParallelProduct",
    "ParallelSubmit",
    "ParallelSum",
    "ParallelTable",
    "ParallelTry",
    "Parameter",
    "ParameterEstimator",
    "ParameterMixtureDistribution",
    "ParameterVariables",
    "ParametricConvexOptimization",
    "ParametricFunction",
    "ParametricNDSolve",
    "ParametricNDSolveValue",
    "ParametricPlot",
    "ParametricPlot3D",
    "ParametricRampLayer",
    "ParametricRegion",
    "ParentBox",
    "ParentCell",
    "ParentConnect",
    "ParentDirectory",
    "ParentEdgeLabel",
    "ParentEdgeLabelFunction",
    "ParentEdgeLabelStyle",
    "ParentEdgeShapeFunction",
    "ParentEdgeStyle",
    "ParentEdgeStyleFunction",
    "ParentForm",
    "Parenthesize",
    "ParentList",
    "ParentNotebook",
    "ParetoDistribution",
    "ParetoPickandsDistribution",
    "ParkData",
    "Part",
    "PartBehavior",
    "PartialCorrelationFunction",
    "PartialD",
    "ParticleAcceleratorData",
    "ParticleData",
    "Partition",
    "PartitionGranularity",
    "PartitionsP",
    "PartitionsQ",
    "PartLayer",
    "PartOfSpeech",
    "PartProtection",
    "ParzenWindow",
    "PascalDistribution",
    "PassEventsDown",
    "PassEventsUp",
    "Paste",
    "PasteAutoQuoteCharacters",
    "PasteBoxFormInlineCells",
    "PasteButton",
    "Path",
    "PathGraph",
    "PathGraphQ",
    "Pattern",
    "PatternFilling",
    "PatternReaction",
    "PatternSequence",
    "PatternTest",
    "PauliMatrix",
    "PaulWavelet",
    "Pause",
    "PausedTime",
    "PDF",
    "PeakDetect",
    "PeanoCurve",
    "PearsonChiSquareTest",
    "PearsonCorrelationTest",
    "PearsonDistribution",
    "PenttinenPointProcess",
    "PercentForm",
    "PerfectNumber",
    "PerfectNumberQ",
    "PerformanceGoal",
    "Perimeter",
    "PeriodicBoundaryCondition",
    "PeriodicInterpolation",
    "Periodogram",
    "PeriodogramArray",
    "Permanent",
    "Permissions",
    "PermissionsGroup",
    "PermissionsGroupMemberQ",
    "PermissionsGroups",
    "PermissionsKey",
    "PermissionsKeys",
    "PermutationCycles",
    "PermutationCyclesQ",
    "PermutationGroup",
    "PermutationLength",
    "PermutationList",
    "PermutationListQ",
    "PermutationMatrix",
    "PermutationMax",
    "PermutationMin",
    "PermutationOrder",
    "PermutationPower",
    "PermutationProduct",
    "PermutationReplace",
    "Permutations",
    "PermutationSupport",
    "Permute",
    "PeronaMalikFilter",
    "Perpendicular",
    "PerpendicularBisector",
    "PersistenceLocation",
    "PersistenceTime",
    "PersistentObject",
    "PersistentObjects",
    "PersistentSymbol",
    "PersistentValue",
    "PersonData",
    "PERTDistribution",
    "PetersenGraph",
    "PhaseMargins",
    "PhaseRange",
    "PhongShading",
    "PhysicalSystemData",
    "Pi",
    "Pick",
    "PickedElements",
    "PickMode",
    "PIDData",
    "PIDDerivativeFilter",
    "PIDFeedforward",
    "PIDTune",
    "Piecewise",
    "PiecewiseExpand",
    "PieChart",
    "PieChart3D",
    "PillaiTrace",
    "PillaiTraceTest",
    "PingTime",
    "Pink",
    "PitchRecognize",
    "Pivoting",
    "PixelConstrained",
    "PixelValue",
    "PixelValuePositions",
    "Placed",
    "Placeholder",
    "PlaceholderLayer",
    "PlaceholderReplace",
    "Plain",
    "PlanarAngle",
    "PlanarFaceList",
    "PlanarGraph",
    "PlanarGraphQ",
    "PlanckRadiationLaw",
    "PlaneCurveData",
    "PlanetaryMoonData",
    "PlanetData",
    "PlantData",
    "Play",
    "PlaybackSettings",
    "PlayRange",
    "Plot",
    "Plot3D",
    "Plot3Matrix",
    "PlotDivision",
    "PlotJoined",
    "PlotLabel",
    "PlotLabels",
    "PlotLayout",
    "PlotLegends",
    "PlotMarkers",
    "PlotPoints",
    "PlotRange",
    "PlotRangeClipping",
    "PlotRangeClipPlanesStyle",
    "PlotRangePadding",
    "PlotRegion",
    "PlotStyle",
    "PlotTheme",
    "Pluralize",
    "Plus",
    "PlusMinus",
    "Pochhammer",
    "PodStates",
    "PodWidth",
    "Point",
    "Point3DBox",
    "Point3DBoxOptions",
    "PointBox",
    "PointBoxOptions",
    "PointCountDistribution",
    "PointDensity",
    "PointDensityFunction",
    "PointFigureChart",
    "PointLegend",
    "PointLight",
    "PointProcessEstimator",
    "PointProcessFitTest",
    "PointProcessParameterAssumptions",
    "PointProcessParameterQ",
    "PointSize",
    "PointStatisticFunction",
    "PointValuePlot",
    "PoissonConsulDistribution",
    "PoissonDistribution",
    "PoissonPDEComponent",
    "PoissonPointProcess",
    "PoissonProcess",
    "PoissonWindow",
    "PolarAxes",
    "PolarAxesOrigin",
    "PolarGridLines",
    "PolarPlot",
    "PolarTicks",
    "PoleZeroMarkers",
    "PolyaAeppliDistribution",
    "PolyGamma",
    "Polygon",
    "Polygon3DBox",
    "Polygon3DBoxOptions",
    "PolygonalNumber",
    "PolygonAngle",
    "PolygonBox",
    "PolygonBoxOptions",
    "PolygonCoordinates",
    "PolygonDecomposition",
    "PolygonHoleScale",
    "PolygonIntersections",
    "PolygonScale",
    "Polyhedron",
    "PolyhedronAngle",
    "PolyhedronBox",
    "PolyhedronBoxOptions",
    "PolyhedronCoordinates",
    "PolyhedronData",
    "PolyhedronDecomposition",
    "PolyhedronGenus",
    "PolyLog",
    "PolynomialExpressionQ",
    "PolynomialExtendedGCD",
    "PolynomialForm",
    "PolynomialGCD",
    "PolynomialLCM",
    "PolynomialMod",
    "PolynomialQ",
    "PolynomialQuotient",
    "PolynomialQuotientRemainder",
    "PolynomialReduce",
    "PolynomialRemainder",
    "Polynomials",
    "PolynomialSumOfSquaresList",
    "PoolingLayer",
    "PopupMenu",
    "PopupMenuBox",
    "PopupMenuBoxOptions",
    "PopupView",
    "PopupWindow",
    "Position",
    "PositionIndex",
    "PositionLargest",
    "PositionSmallest",
    "Positive",
    "PositiveDefiniteMatrixQ",
    "PositiveIntegers",
    "PositivelyOrientedPoints",
    "PositiveRationals",
    "PositiveReals",
    "PositiveSemidefiniteMatrixQ",
    "PossibleZeroQ",
    "Postfix",
    "PostScript",
    "Power",
    "PowerDistribution",
    "PowerExpand",
    "PowerMod",
    "PowerModList",
    "PowerRange",
    "PowerSpectralDensity",
    "PowersRepresentations",
    "PowerSymmetricPolynomial",
    "Precedence",
    "PrecedenceForm",
    "Precedes",
    "PrecedesEqual",
    "PrecedesSlantEqual",
    "PrecedesTilde",
    "Precision",
    "PrecisionGoal",
    "PreDecrement",
    "Predict",
    "PredictionRoot",
    "PredictorFunction",
    "PredictorInformation",
    "PredictorMeasurements",
    "PredictorMeasurementsObject",
    "PreemptProtect",
    "PreferencesPath",
    "PreferencesSettings",
    "Prefix",
    "PreIncrement",
    "Prepend",
    "PrependLayer",
    "PrependTo",
    "PreprocessingRules",
    "PreserveColor",
    "PreserveImageOptions",
    "Previous",
    "PreviousCell",
    "PreviousDate",
    "PriceGraphDistribution",
    "PrimaryPlaceholder",
    "Prime",
    "PrimeNu",
    "PrimeOmega",
    "PrimePi",
    "PrimePowerQ",
    "PrimeQ",
    "Primes",
    "PrimeZetaP",
    "PrimitivePolynomialQ",
    "PrimitiveRoot",
    "PrimitiveRootList",
    "PrincipalComponents",
    "PrincipalValue",
    "Print",
    "PrintableASCIIQ",
    "PrintAction",
    "PrintForm",
    "PrintingCopies",
    "PrintingOptions",
    "PrintingPageRange",
    "PrintingStartingPageNumber",
    "PrintingStyleEnvironment",
    "Printout3D",
    "Printout3DPreviewer",
    "PrintPrecision",
    "PrintTemporary",
    "Prism",
    "PrismBox",
    "PrismBoxOptions",
    "PrivateCellOptions",
    "PrivateEvaluationOptions",
    "PrivateFontOptions",
    "PrivateFrontEndOptions",
    "PrivateKey",
    "PrivateNotebookOptions",
    "PrivatePaths",
    "Probability",
    "ProbabilityDistribution",
    "ProbabilityPlot",
    "ProbabilityPr",
    "ProbabilityScalePlot",
    "ProbitModelFit",
    "ProcessConnection",
    "ProcessDirectory",
    "ProcessEnvironment",
    "Processes",
    "ProcessEstimator",
    "ProcessInformation",
    "ProcessObject",
    "ProcessParameterAssumptions",
    "ProcessParameterQ",
    "ProcessStateDomain",
    "ProcessStatus",
    "ProcessTimeDomain",
    "Product",
    "ProductDistribution",
    "ProductLog",
    "ProgressIndicator",
    "ProgressIndicatorBox",
    "ProgressIndicatorBoxOptions",
    "ProgressReporting",
    "Projection",
    "Prolog",
    "PromptForm",
    "ProofObject",
    "PropagateAborts",
    "Properties",
    "Property",
    "PropertyList",
    "PropertyValue",
    "Proportion",
    "Proportional",
    "Protect",
    "Protected",
    "ProteinData",
    "Pruning",
    "PseudoInverse",
    "PsychrometricPropertyData",
    "PublicKey",
    "PublisherID",
    "PulsarData",
    "PunctuationCharacter",
    "Purple",
    "Put",
    "PutAppend",
    "Pyramid",
    "PyramidBox",
    "PyramidBoxOptions",
    "QBinomial",
    "QFactorial",
    "QGamma",
    "QHypergeometricPFQ",
    "QnDispersion",
    "QPochhammer",
    "QPolyGamma",
    "QRDecomposition",
    "QuadraticIrrationalQ",
    "QuadraticOptimization",
    "Quantile",
    "QuantilePlot",
    "Quantity",
    "QuantityArray",
    "QuantityDistribution",
    "QuantityForm",
    "QuantityMagnitude",
    "QuantityQ",
    "QuantityUnit",
    "QuantityVariable",
    "QuantityVariableCanonicalUnit",
    "QuantityVariableDimensions",
    "QuantityVariableIdentifier",
    "QuantityVariablePhysicalQuantity",
    "Quartics",
    "QuartileDeviation",
    "Quartiles",
    "QuartileSkewness",
    "Query",
    "QuestionGenerator",
    "QuestionInterface",
    "QuestionObject",
    "QuestionSelector",
    "QueueingNetworkProcess",
    "QueueingProcess",
    "QueueProperties",
    "Quiet",
    "QuietEcho",
    "Quit",
    "Quotient",
    "QuotientRemainder",
    "RadialAxisPlot",
    "RadialGradientFilling",
    "RadialGradientImage",
    "RadialityCentrality",
    "RadicalBox",
    "RadicalBoxOptions",
    "RadioButton",
    "RadioButtonBar",
    "RadioButtonBox",
    "RadioButtonBoxOptions",
    "Radon",
    "RadonTransform",
    "RamanujanTau",
    "RamanujanTauL",
    "RamanujanTauTheta",
    "RamanujanTauZ",
    "Ramp",
    "Random",
    "RandomArrayLayer",
    "RandomChoice",
    "RandomColor",
    "RandomComplex",
    "RandomDate",
    "RandomEntity",
    "RandomFunction",
    "RandomGeneratorState",
    "RandomGeoPosition",
    "RandomGraph",
    "RandomImage",
    "RandomInstance",
    "RandomInteger",
    "RandomPermutation",
    "RandomPoint",
    "RandomPointConfiguration",
    "RandomPolygon",
    "RandomPolyhedron",
    "RandomPrime",
    "RandomReal",
    "RandomSample",
    "RandomSeed",
    "RandomSeeding",
    "RandomTime",
    "RandomTree",
    "RandomVariate",
    "RandomWalkProcess",
    "RandomWord",
    "Range",
    "RangeFilter",
    "RangeSpecification",
    "RankedMax",
    "RankedMin",
    "RarerProbability",
    "Raster",
    "Raster3D",
    "Raster3DBox",
    "Raster3DBoxOptions",
    "RasterArray",
    "RasterBox",
    "RasterBoxOptions",
    "Rasterize",
    "RasterSize",
    "Rational",
    "RationalExpressionQ",
    "RationalFunctions",
    "Rationalize",
    "Rationals",
    "Ratios",
    "RawArray",
    "RawBoxes",
    "RawData",
    "RawMedium",
    "RayleighDistribution",
    "Re",
    "ReactionBalance",
    "ReactionBalancedQ",
    "ReactionPDETerm",
    "Read",
    "ReadByteArray",
    "ReadLine",
    "ReadList",
    "ReadProtected",
    "ReadString",
    "Real",
    "RealAbs",
    "RealBlockDiagonalForm",
    "RealDigits",
    "RealExponent",
    "Reals",
    "RealSign",
    "Reap",
    "RebuildPacletData",
    "RecalibrationFunction",
    "RecognitionPrior",
    "RecognitionThreshold",
    "ReconstructionMesh",
    "Record",
    "RecordLists",
    "RecordSeparators",
    "Rectangle",
    "RectangleBox",
    "RectangleBoxOptions",
    "RectangleChart",
    "RectangleChart3D",
    "RectangularRepeatingElement",
    "RecurrenceFilter",
    "RecurrenceTable",
    "RecurringDigitsForm",
    "Red",
    "Reduce",
    "RefBox",
    "ReferenceLineStyle",
    "ReferenceMarkers",
    "ReferenceMarkerStyle",
    "Refine",
    "ReflectionMatrix",
    "ReflectionTransform",
    "Refresh",
    "RefreshRate",
    "Region",
    "RegionBinarize",
    "RegionBoundary",
    "RegionBoundaryStyle",
    "RegionBounds",
    "RegionCentroid",
    "RegionCongruent",
    "RegionConvert",
    "RegionDifference",
    "RegionDilation",
    "RegionDimension",
    "RegionDisjoint",
    "RegionDistance",
    "RegionDistanceFunction",
    "RegionEmbeddingDimension",
    "RegionEqual",
    "RegionErosion",
    "RegionFillingStyle",
    "RegionFit",
    "RegionFunction",
    "RegionImage",
    "RegionIntersection",
    "RegionMeasure",
    "RegionMember",
    "RegionMemberFunction",
    "RegionMoment",
    "RegionNearest",
    "RegionNearestFunction",
    "RegionPlot",
    "RegionPlot3D",
    "RegionProduct",
    "RegionQ",
    "RegionResize",
    "RegionSimilar",
    "RegionSize",
    "RegionSymmetricDifference",
    "RegionUnion",
    "RegionWithin",
    "RegisterExternalEvaluator",
    "RegularExpression",
    "Regularization",
    "RegularlySampledQ",
    "RegularPolygon",
    "ReIm",
    "ReImLabels",
    "ReImPlot",
    "ReImStyle",
    "Reinstall",
    "RelationalDatabase",
    "RelationGraph",
    "Release",
    "ReleaseHold",
    "ReliabilityDistribution",
    "ReliefImage",
    "ReliefPlot",
    "RemoteAuthorizationCaching",
    "RemoteBatchJobAbort",
    "RemoteBatchJobObject",
    "RemoteBatchJobs",
    "RemoteBatchMapSubmit",
    "RemoteBatchSubmissionEnvironment",
    "RemoteBatchSubmit",
    "RemoteConnect",
    "RemoteConnectionObject",
    "RemoteEvaluate",
    "RemoteFile",
    "RemoteInputFiles",
    "RemoteKernelObject",
    "RemoteProviderSettings",
    "RemoteRun",
    "RemoteRunProcess",
    "RemovalConditions",
    "Remove",
    "RemoveAlphaChannel",
    "RemoveAsynchronousTask",
    "RemoveAudioStream",
    "RemoveBackground",
    "RemoveChannelListener",
    "RemoveChannelSubscribers",
    "Removed",
    "RemoveDiacritics",
    "RemoveInputStreamMethod",
    "RemoveOutputStreamMethod",
    "RemoveProperty",
    "RemoveScheduledTask",
    "RemoveUsers",
    "RemoveVideoStream",
    "RenameDirectory",
    "RenameFile",
    "RenderAll",
    "RenderingOptions",
    "RenewalProcess",
    "RenkoChart",
    "RepairMesh",
    "Repeated",
    "RepeatedNull",
    "RepeatedString",
    "RepeatedTiming",
    "RepeatingElement",
    "Replace",
    "ReplaceAll",
    "ReplaceAt",
    "ReplaceHeldPart",
    "ReplaceImageValue",
    "ReplaceList",
    "ReplacePart",
    "ReplacePixelValue",
    "ReplaceRepeated",
    "ReplicateLayer",
    "RequiredPhysicalQuantities",
    "Resampling",
    "ResamplingAlgorithmData",
    "ResamplingMethod",
    "Rescale",
    "RescalingTransform",
    "ResetDirectory",
    "ResetScheduledTask",
    "ReshapeLayer",
    "Residue",
    "ResidueSum",
    "ResizeLayer",
    "Resolve",
    "ResolveContextAliases",
    "ResourceAcquire",
    "ResourceData",
    "ResourceFunction",
    "ResourceObject",
    "ResourceRegister",
    "ResourceRemove",
    "ResourceSearch",
    "ResourceSubmissionObject",
    "ResourceSubmit",
    "ResourceSystemBase",
    "ResourceSystemPath",
    "ResourceUpdate",
    "ResourceVersion",
    "ResponseForm",
    "Rest",
    "RestartInterval",
    "Restricted",
    "Resultant",
    "ResumePacket",
    "Return",
    "ReturnCreatesNewCell",
    "ReturnEntersInput",
    "ReturnExpressionPacket",
    "ReturnInputFormPacket",
    "ReturnPacket",
    "ReturnReceiptFunction",
    "ReturnTextPacket",
    "Reverse",
    "ReverseApplied",
    "ReverseBiorthogonalSplineWavelet",
    "ReverseElement",
    "ReverseEquilibrium",
    "ReverseGraph",
    "ReverseSort",
    "ReverseSortBy",
    "ReverseUpEquilibrium",
    "RevolutionAxis",
    "RevolutionPlot3D",
    "RGBColor",
    "RiccatiSolve",
    "RiceDistribution",
    "RidgeFilter",
    "RiemannR",
    "RiemannSiegelTheta",
    "RiemannSiegelZ",
    "RiemannXi",
    "Riffle",
    "Right",
    "RightArrow",
    "RightArrowBar",
    "RightArrowLeftArrow",
    "RightComposition",
    "RightCosetRepresentative",
    "RightDownTeeVector",
    "RightDownVector",
    "RightDownVectorBar",
    "RightTee",
    "RightTeeArrow",
    "RightTeeVector",
    "RightTriangle",
    "RightTriangleBar",
    "RightTriangleEqual",
    "RightUpDownVector",
    "RightUpTeeVector",
    "RightUpVector",
    "RightUpVectorBar",
    "RightVector",
    "RightVectorBar",
    "RipleyK",
    "RipleyRassonRegion",
    "RiskAchievementImportance",
    "RiskReductionImportance",
    "RobustConvexOptimization",
    "RogersTanimotoDissimilarity",
    "RollPitchYawAngles",
    "RollPitchYawMatrix",
    "RomanNumeral",
    "Root",
    "RootApproximant",
    "RootIntervals",
    "RootLocusPlot",
    "RootMeanSquare",
    "RootOfUnityQ",
    "RootReduce",
    "Roots",
    "RootSum",
    "RootTree",
    "Rotate",
    "RotateLabel",
    "RotateLeft",
    "RotateRight",
    "RotationAction",
    "RotationBox",
    "RotationBoxOptions",
    "RotationMatrix",
    "RotationTransform",
    "Round",
    "RoundImplies",
    "RoundingRadius",
    "Row",
    "RowAlignments",
    "RowBackgrounds",
    "RowBox",
    "RowHeights",
    "RowLines",
    "RowMinHeight",
    "RowReduce",
    "RowsEqual",
    "RowSpacings",
    "RSolve",
    "RSolveValue",
    "RudinShapiro",
    "RudvalisGroupRu",
    "Rule",
    "RuleCondition",
    "RuleDelayed",
    "RuleForm",
    "RulePlot",
    "RulerUnits",
    "RulesTree",
    "Run",
    "RunProcess",
    "RunScheduledTask",
    "RunThrough",
    "RuntimeAttributes",
    "RuntimeOptions",
    "RussellRaoDissimilarity",
    "SameAs",
    "SameQ",
    "SameTest",
    "SameTestProperties",
    "SampledEntityClass",
    "SampleDepth",
    "SampledSoundFunction",
    "SampledSoundList",
    "SampleRate",
    "SamplingPeriod",
    "SARIMAProcess",
    "SARMAProcess",
    "SASTriangle",
    "SatelliteData",
    "SatisfiabilityCount",
    "SatisfiabilityInstances",
    "SatisfiableQ",
    "Saturday",
    "Save",
    "Saveable",
    "SaveAutoDelete",
    "SaveConnection",
    "SaveDefinitions",
    "SavitzkyGolayMatrix",
    "SawtoothWave",
    "Scale",
    "Scaled",
    "ScaleDivisions",
    "ScaledMousePosition",
    "ScaleOrigin",
    "ScalePadding",
    "ScaleRanges",
    "ScaleRangeStyle",
    "ScalingFunctions",
    "ScalingMatrix",
    "ScalingTransform",
    "Scan",
    "ScheduledTask",
    "ScheduledTaskActiveQ",
    "ScheduledTaskInformation",
    "ScheduledTaskInformationData",
    "ScheduledTaskObject",
    "ScheduledTasks",
    "SchurDecomposition",
    "ScientificForm",
    "ScientificNotationThreshold",
    "ScorerGi",
    "ScorerGiPrime",
    "ScorerHi",
    "ScorerHiPrime",
    "ScreenRectangle",
    "ScreenStyleEnvironment",
    "ScriptBaselineShifts",
    "ScriptForm",
    "ScriptLevel",
    "ScriptMinSize",
    "ScriptRules",
    "ScriptSizeMultipliers",
    "Scrollbars",
    "ScrollingOptions",
    "ScrollPosition",
    "SearchAdjustment",
    "SearchIndexObject",
    "SearchIndices",
    "SearchQueryString",
    "SearchResultObject",
    "Sec",
    "Sech",
    "SechDistribution",
    "SecondOrderConeOptimization",
    "SectionGrouping",
    "SectorChart",
    "SectorChart3D",
    "SectorOrigin",
    "SectorSpacing",
    "SecuredAuthenticationKey",
    "SecuredAuthenticationKeys",
    "SecurityCertificate",
    "SeedRandom",
    "Select",
    "Selectable",
    "SelectComponents",
    "SelectedCells",
    "SelectedNotebook",
    "SelectFirst",
    "Selection",
    "SelectionAnimate",
    "SelectionCell",
    "SelectionCellCreateCell",
    "SelectionCellDefaultStyle",
    "SelectionCellParentStyle",
    "SelectionCreateCell",
    "SelectionDebuggerTag",
    "SelectionEvaluate",
    "SelectionEvaluateCreateCell",
    "SelectionMove",
    "SelectionPlaceholder",
    "SelectWithContents",
    "SelfLoops",
    "SelfLoopStyle",
    "SemanticImport",
    "SemanticImportString",
    "SemanticInterpretation",
    "SemialgebraicComponentInstances",
    "SemidefiniteOptimization",
    "SendMail",
    "SendMessage",
    "Sequence",
    "SequenceAlignment",
    "SequenceAttentionLayer",
    "SequenceCases",
    "SequenceCount",
    "SequenceFold",
    "SequenceFoldList",
    "SequenceForm",
    "SequenceHold",
    "SequenceIndicesLayer",
    "SequenceLastLayer",
    "SequenceMostLayer",
    "SequencePosition",
    "SequencePredict",
    "SequencePredictorFunction",
    "SequenceReplace",
    "SequenceRestLayer",
    "SequenceReverseLayer",
    "SequenceSplit",
    "Series",
    "SeriesCoefficient",
    "SeriesData",
    "SeriesTermGoal",
    "ServiceConnect",
    "ServiceDisconnect",
    "ServiceExecute",
    "ServiceObject",
    "ServiceRequest",
    "ServiceResponse",
    "ServiceSubmit",
    "SessionSubmit",
    "SessionTime",
    "Set",
    "SetAccuracy",
    "SetAlphaChannel",
    "SetAttributes",
    "Setbacks",
    "SetCloudDirectory",
    "SetCookies",
    "SetDelayed",
    "SetDirectory",
    "SetEnvironment",
    "SetFileDate",
    "SetFileFormatProperties",
    "SetOptions",
    "SetOptionsPacket",
    "SetPermissions",
    "SetPrecision",
    "SetProperty",
    "SetSecuredAuthenticationKey",
    "SetSelectedNotebook",
    "SetSharedFunction",
    "SetSharedVariable",
    "SetStreamPosition",
    "SetSystemModel",
    "SetSystemOptions",
    "Setter",
    "SetterBar",
    "SetterBox",
    "SetterBoxOptions",
    "Setting",
    "SetUsers",
    "Shading",
    "Shallow",
    "ShannonWavelet",
    "ShapiroWilkTest",
    "Share",
    "SharingList",
    "Sharpen",
    "ShearingMatrix",
    "ShearingTransform",
    "ShellRegion",
    "ShenCastanMatrix",
    "ShiftedGompertzDistribution",
    "ShiftRegisterSequence",
    "Short",
    "ShortDownArrow",
    "Shortest",
    "ShortestMatch",
    "ShortestPathFunction",
    "ShortLeftArrow",
    "ShortRightArrow",
    "ShortTimeFourier",
    "ShortTimeFourierData",
    "ShortUpArrow",
    "Show",
    "ShowAutoConvert",
    "ShowAutoSpellCheck",
    "ShowAutoStyles",
    "ShowCellBracket",
    "ShowCellLabel",
    "ShowCellTags",
    "ShowClosedCellArea",
    "ShowCodeAssist",
    "ShowContents",
    "ShowControls",
    "ShowCursorTracker",
    "ShowGroupOpenCloseIcon",
    "ShowGroupOpener",
    "ShowInvisibleCharacters",
    "ShowPageBreaks",
    "ShowPredictiveInterface",
    "ShowSelection",
    "ShowShortBoxForm",
    "ShowSpecialCharacters",
    "ShowStringCharacters",
    "ShowSyntaxStyles",
    "ShrinkingDelay",
    "ShrinkWrapBoundingBox",
    "SiderealTime",
    "SiegelTheta",
    "SiegelTukeyTest",
    "SierpinskiCurve",
    "SierpinskiMesh",
    "Sign",
    "Signature",
    "SignedRankTest",
    "SignedRegionDistance",
    "SignificanceLevel",
    "SignPadding",
    "SignTest",
    "SimilarityRules",
    "SimpleGraph",
    "SimpleGraphQ",
    "SimplePolygonQ",
    "SimplePolyhedronQ",
    "Simplex",
    "Simplify",
    "Sin",
    "Sinc",
    "SinghMaddalaDistribution",
    "SingleEvaluation",
    "SingleLetterItalics",
    "SingleLetterStyle",
    "SingularValueDecomposition",
    "SingularValueList",
    "SingularValuePlot",
    "SingularValues",
    "Sinh",
    "SinhIntegral",
    "SinIntegral",
    "SixJSymbol",
    "Skeleton",
    "SkeletonTransform",
    "SkellamDistribution",
    "Skewness",
    "SkewNormalDistribution",
    "SkinStyle",
    "Skip",
    "SliceContourPlot3D",
    "SliceDensityPlot3D",
    "SliceDistribution",
    "SliceVectorPlot3D",
    "Slider",
    "Slider2D",
    "Slider2DBox",
    "Slider2DBoxOptions",
    "SliderBox",
    "SliderBoxOptions",
    "SlideShowVideo",
    "SlideView",
    "Slot",
    "SlotSequence",
    "Small",
    "SmallCircle",
    "Smaller",
    "SmithDecomposition",
    "SmithDelayCompensator",
    "SmithWatermanSimilarity",
    "SmoothDensityHistogram",
    "SmoothHistogram",
    "SmoothHistogram3D",
    "SmoothKernelDistribution",
    "SmoothPointDensity",
    "SnDispersion",
    "Snippet",
    "SnippetsVideo",
    "SnubPolyhedron",
    "SocialMediaData",
    "Socket",
    "SocketConnect",
    "SocketListen",
    "SocketListener",
    "SocketObject",
    "SocketOpen",
    "SocketReadMessage",
    "SocketReadyQ",
    "Sockets",
    "SocketWaitAll",
    "SocketWaitNext",
    "SoftmaxLayer",
    "SokalSneathDissimilarity",
    "SolarEclipse",
    "SolarSystemFeatureData",
    "SolarTime",
    "SolidAngle",
    "SolidBoundaryLoadValue",
    "SolidData",
    "SolidDisplacementCondition",
    "SolidFixedCondition",
    "SolidMechanicsPDEComponent",
    "SolidMechanicsStrain",
    "SolidMechanicsStress",
    "SolidRegionQ",
    "Solve",
    "SolveAlways",
    "SolveDelayed",
    "SolveValues",
    "Sort",
    "SortBy",
    "SortedBy",
    "SortedEntityClass",
    "Sound",
    "SoundAndGraphics",
    "SoundNote",
    "SoundVolume",
    "SourceLink",
    "SourcePDETerm",
    "Sow",
    "Space",
    "SpaceCurveData",
    "SpaceForm",
    "Spacer",
    "Spacings",
    "Span",
    "SpanAdjustments",
    "SpanCharacterRounding",
    "SpanFromAbove",
    "SpanFromBoth",
    "SpanFromLeft",
    "SpanLineThickness",
    "SpanMaxSize",
    "SpanMinSize",
    "SpanningCharacters",
    "SpanSymmetric",
    "SparseArray",
    "SparseArrayQ",
    "SpatialBinnedPointData",
    "SpatialBoundaryCorrection",
    "SpatialEstimate",
    "SpatialEstimatorFunction",
    "SpatialGraphDistribution",
    "SpatialJ",
    "SpatialMedian",
    "SpatialNoiseLevel",
    "SpatialObservationRegionQ",
    "SpatialPointData",
    "SpatialPointSelect",
    "SpatialRandomnessTest",
    "SpatialTransformationLayer",
    "SpatialTrendFunction",
    "Speak",
    "SpeakerMatchQ",
    "SpearmanRankTest",
    "SpearmanRho",
    "SpeciesData",
    "SpecificityGoal",
    "SpectralLineData",
    "Spectrogram",
    "SpectrogramArray",
    "Specularity",
    "SpeechCases",
    "SpeechInterpreter",
    "SpeechRecognize",
    "SpeechSynthesize",
    "SpellingCorrection",
    "SpellingCorrectionList",
    "SpellingDictionaries",
    "SpellingDictionariesPath",
    "SpellingOptions",
    "Sphere",
    "SphereBox",
    "SphereBoxOptions",
    "SpherePoints",
    "SphericalBesselJ",
    "SphericalBesselY",
    "SphericalHankelH1",
    "SphericalHankelH2",
    "SphericalHarmonicY",
    "SphericalPlot3D",
    "SphericalRegion",
    "SphericalShell",
    "SpheroidalEigenvalue",
    "SpheroidalJoiningFactor",
    "SpheroidalPS",
    "SpheroidalPSPrime",
    "SpheroidalQS",
    "SpheroidalQSPrime",
    "SpheroidalRadialFactor",
    "SpheroidalS1",
    "SpheroidalS1Prime",
    "SpheroidalS2",
    "SpheroidalS2Prime",
    "Splice",
    "SplicedDistribution",
    "SplineClosed",
    "SplineDegree",
    "SplineKnots",
    "SplineWeights",
    "Split",
    "SplitBy",
    "SpokenString",
    "SpotLight",
    "Sqrt",
    "SqrtBox",
    "SqrtBoxOptions",
    "Square",
    "SquaredEuclideanDistance",
    "SquareFreeQ",
    "SquareIntersection",
    "SquareMatrixQ",
    "SquareRepeatingElement",
    "SquaresR",
    "SquareSubset",
    "SquareSubsetEqual",
    "SquareSuperset",
    "SquareSupersetEqual",
    "SquareUnion",
    "SquareWave",
    "SSSTriangle",
    "StabilityMargins",
    "StabilityMarginsStyle",
    "StableDistribution",
    "Stack",
    "StackBegin",
    "StackComplete",
    "StackedDateListPlot",
    "StackedListPlot",
    "StackInhibit",
    "StadiumShape",
    "StandardAtmosphereData",
    "StandardDeviation",
    "StandardDeviationFilter",
    "StandardForm",
    "Standardize",
    "Standardized",
    "StandardOceanData",
    "StandbyDistribution",
    "Star",
    "StarClusterData",
    "StarData",
    "StarGraph",
    "StartAsynchronousTask",
    "StartExternalSession",
    "StartingStepSize",
    "StartOfLine",
    "StartOfString",
    "StartProcess",
    "StartScheduledTask",
    "StartupSound",
    "StartWebSession",
    "StateDimensions",
    "StateFeedbackGains",
    "StateOutputEstimator",
    "StateResponse",
    "StateSpaceModel",
    "StateSpaceRealization",
    "StateSpaceTransform",
    "StateTransformationLinearize",
    "StationaryDistribution",
    "StationaryWaveletPacketTransform",
    "StationaryWaveletTransform",
    "StatusArea",
    "StatusCentrality",
    "StepMonitor",
    "StereochemistryElements",
    "StieltjesGamma",
    "StippleShading",
    "StirlingS1",
    "StirlingS2",
    "StopAsynchronousTask",
    "StoppingPowerData",
    "StopScheduledTask",
    "StrataVariables",
    "StratonovichProcess",
    "StraussHardcorePointProcess",
    "StraussPointProcess",
    "StreamColorFunction",
    "StreamColorFunctionScaling",
    "StreamDensityPlot",
    "StreamMarkers",
    "StreamPlot",
    "StreamPlot3D",
    "StreamPoints",
    "StreamPosition",
    "Streams",
    "StreamScale",
    "StreamStyle",
    "StrictInequalities",
    "String",
    "StringBreak",
    "StringByteCount",
    "StringCases",
    "StringContainsQ",
    "StringCount",
    "StringDelete",
    "StringDrop",
    "StringEndsQ",
    "StringExpression",
    "StringExtract",
    "StringForm",
    "StringFormat",
    "StringFormatQ",
    "StringFreeQ",
    "StringInsert",
    "StringJoin",
    "StringLength",
    "StringMatchQ",
    "StringPadLeft",
    "StringPadRight",
    "StringPart",
    "StringPartition",
    "StringPosition",
    "StringQ",
    "StringRepeat",
    "StringReplace",
    "StringReplaceList",
    "StringReplacePart",
    "StringReverse",
    "StringRiffle",
    "StringRotateLeft",
    "StringRotateRight",
    "StringSkeleton",
    "StringSplit",
    "StringStartsQ",
    "StringTake",
    "StringTakeDrop",
    "StringTemplate",
    "StringToByteArray",
    "StringToStream",
    "StringTrim",
    "StripBoxes",
    "StripOnInput",
    "StripStyleOnPaste",
    "StripWrapperBoxes",
    "StrokeForm",
    "Struckthrough",
    "StructuralImportance",
    "StructuredArray",
    "StructuredArrayHeadQ",
    "StructuredSelection",
    "StruveH",
    "StruveL",
    "Stub",
    "StudentTDistribution",
    "Style",
    "StyleBox",
    "StyleBoxAutoDelete",
    "StyleData",
    "StyleDefinitions",
    "StyleForm",
    "StyleHints",
    "StyleKeyMapping",
    "StyleMenuListing",
    "StyleNameDialogSettings",
    "StyleNames",
    "StylePrint",
    "StyleSheetPath",
    "Subdivide",
    "Subfactorial",
    "Subgraph",
    "SubMinus",
    "SubPlus",
    "SubresultantPolynomialRemainders",
    "SubresultantPolynomials",
    "Subresultants",
    "Subscript",
    "SubscriptBox",
    "SubscriptBoxOptions",
    "Subscripted",
    "Subsequences",
    "Subset",
    "SubsetCases",
    "SubsetCount",
    "SubsetEqual",
    "SubsetMap",
    "SubsetPosition",
    "SubsetQ",
    "SubsetReplace",
    "Subsets",
    "SubStar",
    "SubstitutionSystem",
    "Subsuperscript",
    "SubsuperscriptBox",
    "SubsuperscriptBoxOptions",
    "SubtitleEncoding",
    "SubtitleTrackSelection",
    "Subtract",
    "SubtractFrom",
    "SubtractSides",
    "SubValues",
    "Succeeds",
    "SucceedsEqual",
    "SucceedsSlantEqual",
    "SucceedsTilde",
    "Success",
    "SuchThat",
    "Sum",
    "SumConvergence",
    "SummationLayer",
    "Sunday",
    "SunPosition",
    "Sunrise",
    "Sunset",
    "SuperDagger",
    "SuperMinus",
    "SupernovaData",
    "SuperPlus",
    "Superscript",
    "SuperscriptBox",
    "SuperscriptBoxOptions",
    "Superset",
    "SupersetEqual",
    "SuperStar",
    "Surd",
    "SurdForm",
    "SurfaceAppearance",
    "SurfaceArea",
    "SurfaceColor",
    "SurfaceData",
    "SurfaceGraphics",
    "SurvivalDistribution",
    "SurvivalFunction",
    "SurvivalModel",
    "SurvivalModelFit",
    "SuspendPacket",
    "SuzukiDistribution",
    "SuzukiGroupSuz",
    "SwatchLegend",
    "Switch",
    "Symbol",
    "SymbolName",
    "SymletWavelet",
    "Symmetric",
    "SymmetricDifference",
    "SymmetricGroup",
    "SymmetricKey",
    "SymmetricMatrixQ",
    "SymmetricPolynomial",
    "SymmetricReduction",
    "Symmetrize",
    "SymmetrizedArray",
    "SymmetrizedArrayRules",
    "SymmetrizedDependentComponents",
    "SymmetrizedIndependentComponents",
    "SymmetrizedReplacePart",
    "SynchronousInitialization",
    "SynchronousUpdating",
    "Synonyms",
    "Syntax",
    "SyntaxForm",
    "SyntaxInformation",
    "SyntaxLength",
    "SyntaxPacket",
    "SyntaxQ",
    "SynthesizeMissingValues",
    "SystemCredential",
    "SystemCredentialData",
    "SystemCredentialKey",
    "SystemCredentialKeys",
    "SystemCredentialStoreObject",
    "SystemDialogInput",
    "SystemException",
    "SystemGet",
    "SystemHelpPath",
    "SystemInformation",
    "SystemInformationData",
    "SystemInstall",
    "SystemModel",
    "SystemModeler",
    "SystemModelExamples",
    "SystemModelLinearize",
    "SystemModelMeasurements",
    "SystemModelParametricSimulate",
    "SystemModelPlot",
    "SystemModelProgressReporting",
    "SystemModelReliability",
    "SystemModels",
    "SystemModelSimulate",
    "SystemModelSimulateSensitivity",
    "SystemModelSimulationData",
    "SystemOpen",
    "SystemOptions",
    "SystemProcessData",
    "SystemProcesses",
    "SystemsConnectionsModel",
    "SystemsModelControllerData",
    "SystemsModelDelay",
    "SystemsModelDelayApproximate",
    "SystemsModelDelete",
    "SystemsModelDimensions",
    "SystemsModelExtract",
    "SystemsModelFeedbackConnect",
    "SystemsModelLabels",
    "SystemsModelLinearity",
    "SystemsModelMerge",
    "SystemsModelOrder",
    "SystemsModelParallelConnect",
    "SystemsModelSeriesConnect",
    "SystemsModelStateFeedbackConnect",
    "SystemsModelVectorRelativeOrders",
    "SystemStub",
    "SystemTest",
    "Tab",
    "TabFilling",
    "Table",
    "TableAlignments",
    "TableDepth",
    "TableDirections",
    "TableForm",
    "TableHeadings",
    "TableSpacing",
    "TableView",
    "TableViewBox",
    "TableViewBoxAlignment",
    "TableViewBoxBackground",
    "TableViewBoxHeaders",
    "TableViewBoxItemSize",
    "TableViewBoxItemStyle",
    "TableViewBoxOptions",
    "TabSpacings",
    "TabView",
    "TabViewBox",
    "TabViewBoxOptions",
    "TagBox",
    "TagBoxNote",
    "TagBoxOptions",
    "TaggingRules",
    "TagSet",
    "TagSetDelayed",
    "TagStyle",
    "TagUnset",
    "Take",
    "TakeDrop",
    "TakeLargest",
    "TakeLargestBy",
    "TakeList",
    "TakeSmallest",
    "TakeSmallestBy",
    "TakeWhile",
    "Tally",
    "Tan",
    "Tanh",
    "TargetDevice",
    "TargetFunctions",
    "TargetSystem",
    "TargetUnits",
    "TaskAbort",
    "TaskExecute",
    "TaskObject",
    "TaskRemove",
    "TaskResume",
    "Tasks",
    "TaskSuspend",
    "TaskWait",
    "TautologyQ",
    "TelegraphProcess",
    "TemplateApply",
    "TemplateArgBox",
    "TemplateBox",
    "TemplateBoxOptions",
    "TemplateEvaluate",
    "TemplateExpression",
    "TemplateIf",
    "TemplateObject",
    "TemplateSequence",
    "TemplateSlot",
    "TemplateSlotSequence",
    "TemplateUnevaluated",
    "TemplateVerbatim",
    "TemplateWith",
    "TemporalData",
    "TemporalRegularity",
    "Temporary",
    "TemporaryVariable",
    "TensorContract",
    "TensorDimensions",
    "TensorExpand",
    "TensorProduct",
    "TensorQ",
    "TensorRank",
    "TensorReduce",
    "TensorSymmetry",
    "TensorTranspose",
    "TensorWedge",
    "TerminatedEvaluation",
    "TernaryListPlot",
    "TernaryPlotCorners",
    "TestID",
    "TestReport",
    "TestReportObject",
    "TestResultObject",
    "Tetrahedron",
    "TetrahedronBox",
    "TetrahedronBoxOptions",
    "TeXForm",
    "TeXSave",
    "Text",
    "Text3DBox",
    "Text3DBoxOptions",
    "TextAlignment",
    "TextBand",
    "TextBoundingBox",
    "TextBox",
    "TextCases",
    "TextCell",
    "TextClipboardType",
    "TextContents",
    "TextData",
    "TextElement",
    "TextForm",
    "TextGrid",
    "TextJustification",
    "TextLine",
    "TextPacket",
    "TextParagraph",
    "TextPosition",
    "TextRecognize",
    "TextSearch",
    "TextSearchReport",
    "TextSentences",
    "TextString",
    "TextStructure",
    "TextStyle",
    "TextTranslation",
    "Texture",
    "TextureCoordinateFunction",
    "TextureCoordinateScaling",
    "TextWords",
    "Therefore",
    "ThermodynamicData",
    "ThermometerGauge",
    "Thick",
    "Thickness",
    "Thin",
    "Thinning",
    "ThisLink",
    "ThomasPointProcess",
    "ThompsonGroupTh",
    "Thread",
    "Threaded",
    "ThreadingLayer",
    "ThreeJSymbol",
    "Threshold",
    "Through",
    "Throw",
    "ThueMorse",
    "Thumbnail",
    "Thursday",
    "TickDirection",
    "TickLabelOrientation",
    "TickLabelPositioning",
    "TickLabels",
    "TickLengths",
    "TickPositions",
    "Ticks",
    "TicksStyle",
    "TideData",
    "Tilde",
    "TildeEqual",
    "TildeFullEqual",
    "TildeTilde",
    "TimeConstrained",
    "TimeConstraint",
    "TimeDirection",
    "TimeFormat",
    "TimeGoal",
    "TimelinePlot",
    "TimeObject",
    "TimeObjectQ",
    "TimeRemaining",
    "Times",
    "TimesBy",
    "TimeSeries",
    "TimeSeriesAggregate",
    "TimeSeriesForecast",
    "TimeSeriesInsert",
    "TimeSeriesInvertibility",
    "TimeSeriesMap",
    "TimeSeriesMapThread",
    "TimeSeriesModel",
    "TimeSeriesModelFit",
    "TimeSeriesResample",
    "TimeSeriesRescale",
    "TimeSeriesShift",
    "TimeSeriesThread",
    "TimeSeriesWindow",
    "TimeSystem",
    "TimeSystemConvert",
    "TimeUsed",
    "TimeValue",
    "TimeWarpingCorrespondence",
    "TimeWarpingDistance",
    "TimeZone",
    "TimeZoneConvert",
    "TimeZoneOffset",
    "Timing",
    "Tiny",
    "TitleGrouping",
    "TitsGroupT",
    "ToBoxes",
    "ToCharacterCode",
    "ToColor",
    "ToContinuousTimeModel",
    "ToDate",
    "Today",
    "ToDiscreteTimeModel",
    "ToEntity",
    "ToeplitzMatrix",
    "ToExpression",
    "ToFileName",
    "Together",
    "Toggle",
    "ToggleFalse",
    "Toggler",
    "TogglerBar",
    "TogglerBox",
    "TogglerBoxOptions",
    "ToHeldExpression",
    "ToInvertibleTimeSeries",
    "TokenWords",
    "Tolerance",
    "ToLowerCase",
    "Tomorrow",
    "ToNumberField",
    "TooBig",
    "Tooltip",
    "TooltipBox",
    "TooltipBoxOptions",
    "TooltipDelay",
    "TooltipStyle",
    "ToonShading",
    "Top",
    "TopHatTransform",
    "ToPolarCoordinates",
    "TopologicalSort",
    "ToRadicals",
    "ToRawPointer",
    "ToRules",
    "Torus",
    "TorusGraph",
    "ToSphericalCoordinates",
    "ToString",
    "Total",
    "TotalHeight",
    "TotalLayer",
    "TotalVariationFilter",
    "TotalWidth",
    "TouchPosition",
    "TouchscreenAutoZoom",
    "TouchscreenControlPlacement",
    "ToUpperCase",
    "TourVideo",
    "Tr",
    "Trace",
    "TraceAbove",
    "TraceAction",
    "TraceBackward",
    "TraceDepth",
    "TraceDialog",
    "TraceForward",
    "TraceInternal",
    "TraceLevel",
    "TraceOff",
    "TraceOn",
    "TraceOriginal",
    "TracePrint",
    "TraceScan",
    "TrackCellChangeTimes",
    "TrackedSymbols",
    "TrackingFunction",
    "TracyWidomDistribution",
    "TradingChart",
    "TraditionalForm",
    "TraditionalFunctionNotation",
    "TraditionalNotation",
    "TraditionalOrder",
    "TrainImageContentDetector",
    "TrainingProgressCheckpointing",
    "TrainingProgressFunction",
    "TrainingProgressMeasurements",
    "TrainingProgressReporting",
    "TrainingStoppingCriterion",
    "TrainingUpdateSchedule",
    "TrainTextContentDetector",
    "TransferFunctionCancel",
    "TransferFunctionExpand",
    "TransferFunctionFactor",
    "TransferFunctionModel",
    "TransferFunctionPoles",
    "TransferFunctionTransform",
    "TransferFunctionZeros",
    "TransformationClass",
    "TransformationFunction",
    "TransformationFunctions",
    "TransformationMatrix",
    "TransformedDistribution",
    "TransformedField",
    "TransformedProcess",
    "TransformedRegion",
    "TransitionDirection",
    "TransitionDuration",
    "TransitionEffect",
    "TransitiveClosureGraph",
    "TransitiveReductionGraph",
    "Translate",
    "TranslationOptions",
    "TranslationTransform",
    "Transliterate",
    "Transparent",
    "TransparentColor",
    "Transpose",
    "TransposeLayer",
    "TrapEnterKey",
    "TrapSelection",
    "TravelDirections",
    "TravelDirectionsData",
    "TravelDistance",
    "TravelDistanceList",
    "TravelMethod",
    "TravelTime",
    "Tree",
    "TreeCases",
    "TreeChildren",
    "TreeCount",
    "TreeData",
    "TreeDelete",
    "TreeDepth",
    "TreeElementCoordinates",
    "TreeElementLabel",
    "TreeElementLabelFunction",
    "TreeElementLabelStyle",
    "TreeElementShape",
    "TreeElementShapeFunction",
    "TreeElementSize",
    "TreeElementSizeFunction",
    "TreeElementStyle",
    "TreeElementStyleFunction",
    "TreeExpression",
    "TreeExtract",
    "TreeFold",
    "TreeForm",
    "TreeGraph",
    "TreeGraphQ",
    "TreeInsert",
    "TreeLayout",
    "TreeLeafCount",
    "TreeLeafQ",
    "TreeLeaves",
    "TreeLevel",
    "TreeMap",
    "TreeMapAt",
    "TreeOutline",
    "TreePlot",
    "TreePosition",
    "TreeQ",
    "TreeReplacePart",
    "TreeRules",
    "TreeScan",
    "TreeSelect",
    "TreeSize",
    "TreeTraversalOrder",
    "TrendStyle",
    "Triangle",
    "TriangleCenter",
    "TriangleConstruct",
    "TriangleMeasurement",
    "TriangleWave",
    "TriangularDistribution",
    "TriangulateMesh",
    "Trig",
    "TrigExpand",
    "TrigFactor",
    "TrigFactorList",
    "Trigger",
    "TrigReduce",
    "TrigToExp",
    "TrimmedMean",
    "TrimmedVariance",
    "TropicalStormData",
    "True",
    "TrueQ",
    "TruncatedDistribution",
    "TruncatedPolyhedron",
    "TsallisQExponentialDistribution",
    "TsallisQGaussianDistribution",
    "TTest",
    "Tube",
    "TubeBezierCurveBox",
    "TubeBezierCurveBoxOptions",
    "TubeBox",
    "TubeBoxOptions",
    "TubeBSplineCurveBox",
    "TubeBSplineCurveBoxOptions",
    "Tuesday",
    "TukeyLambdaDistribution",
    "TukeyWindow",
    "TunnelData",
    "Tuples",
    "TuranGraph",
    "TuringMachine",
    "TuttePolynomial",
    "TwoWayRule",
    "Typed",
    "TypeDeclaration",
    "TypeEvaluate",
    "TypeHint",
    "TypeOf",
    "TypeSpecifier",
    "UnateQ",
    "Uncompress",
    "UnconstrainedParameters",
    "Undefined",
    "UnderBar",
    "Underflow",
    "Underlined",
    "Underoverscript",
    "UnderoverscriptBox",
    "UnderoverscriptBoxOptions",
    "Underscript",
    "UnderscriptBox",
    "UnderscriptBoxOptions",
    "UnderseaFeatureData",
    "UndirectedEdge",
    "UndirectedGraph",
    "UndirectedGraphQ",
    "UndoOptions",
    "UndoTrackedVariables",
    "Unequal",
    "UnequalTo",
    "Unevaluated",
    "UniformDistribution",
    "UniformGraphDistribution",
    "UniformPolyhedron",
    "UniformSumDistribution",
    "Uninstall",
    "Union",
    "UnionedEntityClass",
    "UnionPlus",
    "Unique",
    "UniqueElements",
    "UnitaryMatrixQ",
    "UnitBox",
    "UnitConvert",
    "UnitDimensions",
    "Unitize",
    "UnitRootTest",
    "UnitSimplify",
    "UnitStep",
    "UnitSystem",
    "UnitTriangle",
    "UnitVector",
    "UnitVectorLayer",
    "UnityDimensions",
    "UniverseModelData",
    "UniversityData",
    "UnixTime",
    "UnlabeledTree",
    "UnmanageObject",
    "Unprotect",
    "UnregisterExternalEvaluator",
    "UnsameQ",
    "UnsavedVariables",
    "Unset",
    "UnsetShared",
    "Until",
    "UntrackedVariables",
    "Up",
    "UpArrow",
    "UpArrowBar",
    "UpArrowDownArrow",
    "Update",
    "UpdateDynamicObjects",
    "UpdateDynamicObjectsSynchronous",
    "UpdateInterval",
    "UpdatePacletSites",
    "UpdateSearchIndex",
    "UpDownArrow",
    "UpEquilibrium",
    "UpperCaseQ",
    "UpperLeftArrow",
    "UpperRightArrow",
    "UpperTriangularize",
    "UpperTriangularMatrix",
    "UpperTriangularMatrixQ",
    "Upsample",
    "UpSet",
    "UpSetDelayed",
    "UpTee",
    "UpTeeArrow",
    "UpTo",
    "UpValues",
    "URL",
    "URLBuild",
    "URLDecode",
    "URLDispatcher",
    "URLDownload",
    "URLDownloadSubmit",
    "URLEncode",
    "URLExecute",
    "URLExpand",
    "URLFetch",
    "URLFetchAsynchronous",
    "URLParse",
    "URLQueryDecode",
    "URLQueryEncode",
    "URLRead",
    "URLResponseTime",
    "URLSave",
    "URLSaveAsynchronous",
    "URLShorten",
    "URLSubmit",
    "UseEmbeddedLibrary",
    "UseGraphicsRange",
    "UserDefinedWavelet",
    "Using",
    "UsingFrontEnd",
    "UtilityFunction",
    "V2Get",
    "ValenceErrorHandling",
    "ValenceFilling",
    "ValidationLength",
    "ValidationSet",
    "ValueBox",
    "ValueBoxOptions",
    "ValueDimensions",
    "ValueForm",
    "ValuePreprocessingFunction",
    "ValueQ",
    "Values",
    "ValuesData",
    "VandermondeMatrix",
    "Variables",
    "Variance",
    "VarianceEquivalenceTest",
    "VarianceEstimatorFunction",
    "VarianceGammaDistribution",
    "VarianceGammaPointProcess",
    "VarianceTest",
    "VariogramFunction",
    "VariogramModel",
    "VectorAngle",
    "VectorAround",
    "VectorAspectRatio",
    "VectorColorFunction",
    "VectorColorFunctionScaling",
    "VectorDensityPlot",
    "VectorDisplacementPlot",
    "VectorDisplacementPlot3D",
    "VectorGlyphData",
    "VectorGreater",
    "VectorGreaterEqual",
    "VectorLess",
    "VectorLessEqual",
    "VectorMarkers",
    "VectorPlot",
    "VectorPlot3D",
    "VectorPoints",
    "VectorQ",
    "VectorRange",
    "Vectors",
    "VectorScale",
    "VectorScaling",
    "VectorSizes",
    "VectorStyle",
    "Vee",
    "Verbatim",
    "Verbose",
    "VerificationTest",
    "VerifyConvergence",
    "VerifyDerivedKey",
    "VerifyDigitalSignature",
    "VerifyFileSignature",
    "VerifyInterpretation",
    "VerifySecurityCertificates",
    "VerifySolutions",
    "VerifyTestAssumptions",
    "VersionedPreferences",
    "VertexAdd",
    "VertexCapacity",
    "VertexChromaticNumber",
    "VertexColors",
    "VertexComponent",
    "VertexConnectivity",
    "VertexContract",
    "VertexCoordinateRules",
    "VertexCoordinates",
    "VertexCorrelationSimilarity",
    "VertexCosineSimilarity",
    "VertexCount",
    "VertexCoverQ",
    "VertexDataCoordinates",
    "VertexDegree",
    "VertexDelete",
    "VertexDiceSimilarity",
    "VertexEccentricity",
    "VertexInComponent",
    "VertexInComponentGraph",
    "VertexInDegree",
    "VertexIndex",
    "VertexJaccardSimilarity",
    "VertexLabeling",
    "VertexLabels",
    "VertexLabelStyle",
    "VertexList",
    "VertexNormals",
    "VertexOutComponent",
    "VertexOutComponentGraph",
    "VertexOutDegree",
    "VertexQ",
    "VertexRenderingFunction",
    "VertexReplace",
    "VertexShape",
    "VertexShapeFunction",
    "VertexSize",
    "VertexStyle",
    "VertexTextureCoordinates",
    "VertexTransitiveGraphQ",
    "VertexWeight",
    "VertexWeightedGraphQ",
    "Vertical",
    "VerticalBar",
    "VerticalForm",
    "VerticalGauge",
    "VerticalSeparator",
    "VerticalSlider",
    "VerticalTilde",
    "Video",
    "VideoCapture",
    "VideoCombine",
    "VideoDelete",
    "VideoEncoding",
    "VideoExtractFrames",
    "VideoFrameList",
    "VideoFrameMap",
    "VideoGenerator",
    "VideoInsert",
    "VideoIntervals",
    "VideoJoin",
    "VideoMap",
    "VideoMapList",
    "VideoMapTimeSeries",
    "VideoPadding",
    "VideoPause",
    "VideoPlay",
    "VideoQ",
    "VideoRecord",
    "VideoReplace",
    "VideoScreenCapture",
    "VideoSplit",
    "VideoStop",
    "VideoStream",
    "VideoStreams",
    "VideoTimeStretch",
    "VideoTrackSelection",
    "VideoTranscode",
    "VideoTransparency",
    "VideoTrim",
    "ViewAngle",
    "ViewCenter",
    "ViewMatrix",
    "ViewPoint",
    "ViewPointSelectorSettings",
    "ViewPort",
    "ViewProjection",
    "ViewRange",
    "ViewVector",
    "ViewVertical",
    "VirtualGroupData",
    "Visible",
    "VisibleCell",
    "VoiceStyleData",
    "VoigtDistribution",
    "VolcanoData",
    "Volume",
    "VonMisesDistribution",
    "VoronoiMesh",
    "WaitAll",
    "WaitAsynchronousTask",
    "WaitNext",
    "WaitUntil",
    "WakebyDistribution",
    "WalleniusHypergeometricDistribution",
    "WaringYuleDistribution",
    "WarpingCorrespondence",
    "WarpingDistance",
    "WatershedComponents",
    "WatsonUSquareTest",
    "WattsStrogatzGraphDistribution",
    "WaveletBestBasis",
    "WaveletFilterCoefficients",
    "WaveletImagePlot",
    "WaveletListPlot",
    "WaveletMapIndexed",
    "WaveletMatrixPlot",
    "WaveletPhi",
    "WaveletPsi",
    "WaveletScale",
    "WaveletScalogram",
    "WaveletThreshold",
    "WavePDEComponent",
    "WeaklyConnectedComponents",
    "WeaklyConnectedGraphComponents",
    "WeaklyConnectedGraphQ",
    "WeakStationarity",
    "WeatherData",
    "WeatherForecastData",
    "WebAudioSearch",
    "WebColumn",
    "WebElementObject",
    "WeberE",
    "WebExecute",
    "WebImage",
    "WebImageSearch",
    "WebItem",
    "WebPageMetaInformation",
    "WebRow",
    "WebSearch",
    "WebSessionObject",
    "WebSessions",
    "WebWindowObject",
    "Wedge",
    "Wednesday",
    "WeibullDistribution",
    "WeierstrassE1",
    "WeierstrassE2",
    "WeierstrassE3",
    "WeierstrassEta1",
    "WeierstrassEta2",
    "WeierstrassEta3",
    "WeierstrassHalfPeriods",
    "WeierstrassHalfPeriodW1",
    "WeierstrassHalfPeriodW2",
    "WeierstrassHalfPeriodW3",
    "WeierstrassInvariantG2",
    "WeierstrassInvariantG3",
    "WeierstrassInvariants",
    "WeierstrassP",
    "WeierstrassPPrime",
    "WeierstrassSigma",
    "WeierstrassZeta",
    "WeightedAdjacencyGraph",
    "WeightedAdjacencyMatrix",
    "WeightedData",
    "WeightedGraphQ",
    "Weights",
    "WelchWindow",
    "WheelGraph",
    "WhenEvent",
    "Which",
    "While",
    "White",
    "WhiteNoiseProcess",
    "WhitePoint",
    "Whitespace",
    "WhitespaceCharacter",
    "WhittakerM",
    "WhittakerW",
    "WholeCellGroupOpener",
    "WienerFilter",
    "WienerProcess",
    "WignerD",
    "WignerSemicircleDistribution",
    "WikidataData",
    "WikidataSearch",
    "WikipediaData",
    "WikipediaSearch",
    "WilksW",
    "WilksWTest",
    "WindDirectionData",
    "WindingCount",
    "WindingPolygon",
    "WindowClickSelect",
    "WindowElements",
    "WindowFloating",
    "WindowFrame",
    "WindowFrameElements",
    "WindowMargins",
    "WindowMovable",
    "WindowOpacity",
    "WindowPersistentStyles",
    "WindowSelected",
    "WindowSize",
    "WindowStatusArea",
    "WindowTitle",
    "WindowToolbars",
    "WindowWidth",
    "WindSpeedData",
    "WindVectorData",
    "WinsorizedMean",
    "WinsorizedVariance",
    "WishartMatrixDistribution",
    "With",
    "WithCleanup",
    "WithLock",
    "WolframAlpha",
    "WolframAlphaDate",
    "WolframAlphaQuantity",
    "WolframAlphaResult",
    "WolframCloudSettings",
    "WolframLanguageData",
    "Word",
    "WordBoundary",
    "WordCharacter",
    "WordCloud",
    "WordCount",
    "WordCounts",
    "WordData",
    "WordDefinition",
    "WordFrequency",
    "WordFrequencyData",
    "WordList",
    "WordOrientation",
    "WordSearch",
    "WordSelectionFunction",
    "WordSeparators",
    "WordSpacings",
    "WordStem",
    "WordTranslation",
    "WorkingPrecision",
    "WrapAround",
    "Write",
    "WriteLine",
    "WriteString",
    "Wronskian",
    "XMLElement",
    "XMLObject",
    "XMLTemplate",
    "Xnor",
    "Xor",
    "XYZColor",
    "Yellow",
    "Yesterday",
    "YuleDissimilarity",
    "ZernikeR",
    "ZeroSymmetric",
    "ZeroTest",
    "ZeroWidthTimes",
    "Zeta",
    "ZetaZero",
    "ZIPCodeData",
    "ZipfDistribution",
    "ZoomCenter",
    "ZoomFactor",
    "ZTest",
    "ZTransform",
    "$Aborted",
    "$ActivationGroupID",
    "$ActivationKey",
    "$ActivationUserRegistered",
    "$AddOnsDirectory",
    "$AllowDataUpdates",
    "$AllowExternalChannelFunctions",
    "$AllowInternet",
    "$AssertFunction",
    "$Assumptions",
    "$AsynchronousTask",
    "$AudioDecoders",
    "$AudioEncoders",
    "$AudioInputDevices",
    "$AudioOutputDevices",
    "$BaseDirectory",
    "$BasePacletsDirectory",
    "$BatchInput",
    "$BatchOutput",
    "$BlockchainBase",
    "$BoxForms",
    "$ByteOrdering",
    "$CacheBaseDirectory",
    "$Canceled",
    "$ChannelBase",
    "$CharacterEncoding",
    "$CharacterEncodings",
    "$CloudAccountName",
    "$CloudBase",
    "$CloudConnected",
    "$CloudConnection",
    "$CloudCreditsAvailable",
    "$CloudEvaluation",
    "$CloudExpressionBase",
    "$CloudObjectNameFormat",
    "$CloudObjectURLType",
    "$CloudRootDirectory",
    "$CloudSymbolBase",
    "$CloudUserID",
    "$CloudUserUUID",
    "$CloudVersion",
    "$CloudVersionNumber",
    "$CloudWolframEngineVersionNumber",
    "$CommandLine",
    "$CompilationTarget",
    "$CompilerEnvironment",
    "$ConditionHold",
    "$ConfiguredKernels",
    "$Context",
    "$ContextAliases",
    "$ContextPath",
    "$ControlActiveSetting",
    "$Cookies",
    "$CookieStore",
    "$CreationDate",
    "$CryptographicEllipticCurveNames",
    "$CurrentLink",
    "$CurrentTask",
    "$CurrentWebSession",
    "$DataStructures",
    "$DateStringFormat",
    "$DefaultAudioInputDevice",
    "$DefaultAudioOutputDevice",
    "$DefaultFont",
    "$DefaultFrontEnd",
    "$DefaultImagingDevice",
    "$DefaultKernels",
    "$DefaultLocalBase",
    "$DefaultLocalKernel",
    "$DefaultMailbox",
    "$DefaultNetworkInterface",
    "$DefaultPath",
    "$DefaultProxyRules",
    "$DefaultRemoteBatchSubmissionEnvironment",
    "$DefaultRemoteKernel",
    "$DefaultSystemCredentialStore",
    "$Display",
    "$DisplayFunction",
    "$DistributedContexts",
    "$DynamicEvaluation",
    "$Echo",
    "$EmbedCodeEnvironments",
    "$EmbeddableServices",
    "$EntityStores",
    "$Epilog",
    "$EvaluationCloudBase",
    "$EvaluationCloudObject",
    "$EvaluationEnvironment",
    "$ExportFormats",
    "$ExternalIdentifierTypes",
    "$ExternalStorageBase",
    "$Failed",
    "$FinancialDataSource",
    "$FontFamilies",
    "$FormatType",
    "$FrontEnd",
    "$FrontEndSession",
    "$GeneratedAssetLocation",
    "$GeoEntityTypes",
    "$GeoLocation",
    "$GeoLocationCity",
    "$GeoLocationCountry",
    "$GeoLocationPrecision",
    "$GeoLocationSource",
    "$HistoryLength",
    "$HomeDirectory",
    "$HTMLExportRules",
    "$HTTPCookies",
    "$HTTPRequest",
    "$IgnoreEOF",
    "$ImageFormattingWidth",
    "$ImageResolution",
    "$ImagingDevice",
    "$ImagingDevices",
    "$ImportFormats",
    "$IncomingMailSettings",
    "$InitialDirectory",
    "$Initialization",
    "$InitializationContexts",
    "$Input",
    "$InputFileName",
    "$InputStreamMethods",
    "$Inspector",
    "$InstallationDate",
    "$InstallationDirectory",
    "$InterfaceEnvironment",
    "$InterpreterTypes",
    "$IterationLimit",
    "$KernelCount",
    "$KernelID",
    "$Language",
    "$LaunchDirectory",
    "$LibraryPath",
    "$LicenseExpirationDate",
    "$LicenseID",
    "$LicenseProcesses",
    "$LicenseServer",
    "$LicenseSubprocesses",
    "$LicenseType",
    "$Line",
    "$Linked",
    "$LinkSupported",
    "$LoadedFiles",
    "$LocalBase",
    "$LocalSymbolBase",
    "$MachineAddresses",
    "$MachineDomain",
    "$MachineDomains",
    "$MachineEpsilon",
    "$MachineID",
    "$MachineName",
    "$MachinePrecision",
    "$MachineType",
    "$MaxDisplayedChildren",
    "$MaxExtraPrecision",
    "$MaxLicenseProcesses",
    "$MaxLicenseSubprocesses",
    "$MaxMachineNumber",
    "$MaxNumber",
    "$MaxPiecewiseCases",
    "$MaxPrecision",
    "$MaxRootDegree",
    "$MessageGroups",
    "$MessageList",
    "$MessagePrePrint",
    "$Messages",
    "$MinMachineNumber",
    "$MinNumber",
    "$MinorReleaseNumber",
    "$MinPrecision",
    "$MobilePhone",
    "$ModuleNumber",
    "$NetworkConnected",
    "$NetworkInterfaces",
    "$NetworkLicense",
    "$NewMessage",
    "$NewSymbol",
    "$NotebookInlineStorageLimit",
    "$Notebooks",
    "$NoValue",
    "$NumberMarks",
    "$Off",
    "$OperatingSystem",
    "$Output",
    "$OutputForms",
    "$OutputSizeLimit",
    "$OutputStreamMethods",
    "$Packages",
    "$ParentLink",
    "$ParentProcessID",
    "$PasswordFile",
    "$PatchLevelID",
    "$Path",
    "$PathnameSeparator",
    "$PerformanceGoal",
    "$Permissions",
    "$PermissionsGroupBase",
    "$PersistenceBase",
    "$PersistencePath",
    "$PipeSupported",
    "$PlotTheme",
    "$Post",
    "$Pre",
    "$PreferencesDirectory",
    "$PreInitialization",
    "$PrePrint",
    "$PreRead",
    "$PrintForms",
    "$PrintLiteral",
    "$Printout3DPreviewer",
    "$ProcessID",
    "$ProcessorCount",
    "$ProcessorType",
    "$ProductInformation",
    "$ProgramName",
    "$ProgressReporting",
    "$PublisherID",
    "$RandomGeneratorState",
    "$RandomState",
    "$RecursionLimit",
    "$RegisteredDeviceClasses",
    "$RegisteredUserName",
    "$ReleaseNumber",
    "$RequesterAddress",
    "$RequesterCloudUserID",
    "$RequesterCloudUserUUID",
    "$RequesterWolframID",
    "$RequesterWolframUUID",
    "$ResourceSystemBase",
    "$ResourceSystemPath",
    "$RootDirectory",
    "$ScheduledTask",
    "$ScriptCommandLine",
    "$ScriptInputString",
    "$SecuredAuthenticationKeyTokens",
    "$ServiceCreditsAvailable",
    "$Services",
    "$SessionID",
    "$SetParentLink",
    "$SharedFunctions",
    "$SharedVariables",
    "$SoundDisplay",
    "$SoundDisplayFunction",
    "$SourceLink",
    "$SSHAuthentication",
    "$SubtitleDecoders",
    "$SubtitleEncoders",
    "$SummaryBoxDataSizeLimit",
    "$SuppressInputFormHeads",
    "$SynchronousEvaluation",
    "$SyntaxHandler",
    "$System",
    "$SystemCharacterEncoding",
    "$SystemCredentialStore",
    "$SystemID",
    "$SystemMemory",
    "$SystemShell",
    "$SystemTimeZone",
    "$SystemWordLength",
    "$TargetSystems",
    "$TemplatePath",
    "$TemporaryDirectory",
    "$TemporaryPrefix",
    "$TestFileName",
    "$TextStyle",
    "$TimedOut",
    "$TimeUnit",
    "$TimeZone",
    "$TimeZoneEntity",
    "$TopDirectory",
    "$TraceOff",
    "$TraceOn",
    "$TracePattern",
    "$TracePostAction",
    "$TracePreAction",
    "$UnitSystem",
    "$Urgent",
    "$UserAddOnsDirectory",
    "$UserAgentLanguages",
    "$UserAgentMachine",
    "$UserAgentName",
    "$UserAgentOperatingSystem",
    "$UserAgentString",
    "$UserAgentVersion",
    "$UserBaseDirectory",
    "$UserBasePacletsDirectory",
    "$UserDocumentsDirectory",
    "$Username",
    "$UserName",
    "$UserURLBase",
    "$Version",
    "$VersionNumber",
    "$VideoDecoders",
    "$VideoEncoders",
    "$VoiceStyles",
    "$WolframDocumentsDirectory",
    "$WolframID",
    "$WolframUUID"
  ];
  function e(r) {
    const n = r.regex, i = /([2-9]|[1-2]\d|[3][0-5])\^\^/, s = /(\w*\.\w+|\w+\.\w*|\w+)/, o = /(\d*\.\d+|\d+\.\d*|\d+)/, a = n.either(n.concat(i, s), o), l = /``[+-]?(\d*\.\d+|\d+\.\d*|\d+)/, c = /`([+-]?(\d*\.\d+|\d+\.\d*|\d+))?/, f = n.either(l, c), m = /\*\^[+-]?\d+/, C = {
      className: "number",
      relevance: 0,
      begin: n.concat(
        a,
        n.optional(f),
        n.optional(m)
      )
    }, N = /[a-zA-Z$][a-zA-Z0-9$]*/, z = new Set(t), A = { variants: [
      {
        className: "builtin-symbol",
        begin: N,
        // for performance out of fear of regex.either(...Mathematica.SYSTEM_SYMBOLS)
        "on:begin": (ae, Re) => {
          z.has(ae[0]) || Re.ignoreMatch();
        }
      },
      {
        className: "symbol",
        relevance: 0,
        begin: N
      }
    ] }, Q = {
      className: "named-character",
      begin: /\\\[[$a-zA-Z][$a-zA-Z0-9]+\]/
    }, Te = {
      className: "operator",
      relevance: 0,
      begin: /[+\-*/,;.:@~=><&|_`'^?!%]+/
    }, ce = {
      className: "pattern",
      relevance: 0,
      begin: /([a-zA-Z$][a-zA-Z0-9$]*)?_+([a-zA-Z$][a-zA-Z0-9$]*)?/
    }, ge = {
      className: "slot",
      relevance: 0,
      begin: /#[a-zA-Z$][a-zA-Z0-9$]*|#+[0-9]?/
    }, Y = {
      className: "brace",
      relevance: 0,
      begin: /[[\](){}]/
    }, fe = {
      className: "message-name",
      relevance: 0,
      begin: n.concat("::", N)
    };
    return {
      name: "Mathematica",
      aliases: [
        "mma",
        "wl"
      ],
      classNameAliases: {
        brace: "punctuation",
        pattern: "type",
        slot: "type",
        symbol: "variable",
        "named-character": "variable",
        "builtin-symbol": "built_in",
        "message-name": "string"
      },
      contains: [
        r.COMMENT(/\(\*/, /\*\)/, { contains: ["self"] }),
        ce,
        ge,
        fe,
        A,
        Q,
        r.QUOTE_STRING_MODE,
        C,
        Te,
        Y
      ]
    };
  }
  return Hd = e, Hd;
}
var Vd, X$;
function ox() {
  if (X$)
    return Vd;
  X$ = 1;
  function t(e) {
    const r = "('|\\.')+", n = {
      relevance: 0,
      contains: [{ begin: r }]
    };
    return {
      name: "Matlab",
      keywords: {
        keyword: "arguments break case catch classdef continue else elseif end enumeration events for function global if methods otherwise parfor persistent properties return spmd switch try while",
        built_in: "sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i|0 inf nan isnan isinf isfinite j|0 why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun legend intersect ismember procrustes hold num2cell "
      },
      illegal: '(//|"|#|/\\*|\\s+/\\w+)',
      contains: [
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            e.UNDERSCORE_TITLE_MODE,
            {
              className: "params",
              variants: [
                {
                  begin: "\\(",
                  end: "\\)"
                },
                {
                  begin: "\\[",
                  end: "\\]"
                }
              ]
            }
          ]
        },
        {
          className: "built_in",
          begin: /true|false/,
          relevance: 0,
          starts: n
        },
        {
          begin: "[a-zA-Z][a-zA-Z_0-9]*" + r,
          relevance: 0
        },
        {
          className: "number",
          begin: e.C_NUMBER_RE,
          relevance: 0,
          starts: n
        },
        {
          className: "string",
          begin: "'",
          end: "'",
          contains: [{ begin: "''" }]
        },
        {
          begin: /\]|\}|\)/,
          relevance: 0,
          starts: n
        },
        {
          className: "string",
          begin: '"',
          end: '"',
          contains: [{ begin: '""' }],
          starts: n
        },
        e.COMMENT("^\\s*%\\{\\s*$", "^\\s*%\\}\\s*$"),
        e.COMMENT("%", "$")
      ]
    };
  }
  return Vd = t, Vd;
}
var Wd, Z$;
function ax() {
  if (Z$)
    return Wd;
  Z$ = 1;
  function t(e) {
    return {
      name: "Maxima",
      keywords: {
        $pattern: "[A-Za-z_%][0-9A-Za-z_%]*",
        keyword: "if then else elseif for thru do while unless step in and or not",
        literal: "true false unknown inf minf ind und %e %i %pi %phi %gamma",
        built_in: " abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type alias allroots alphacharp alphanumericp amortization %and annuity_fv annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2 applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method av average_degree backtrace bars barsplot barsplot_description base64 base64_decode bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description break bug_report build_info|10 buildq build_sample burn cabs canform canten cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2 charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps chinese cholesky christof chromatic_index chromatic_number cint circulant_graph clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse collectterms columnop columnspace columnswap columnvector combination combine comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph complete_graph complex_number_p components compose_functions concan concat conjugate conmetderiv connected_components connect_vertices cons constant constantp constituent constvalue cont2part content continuous_freq contortion contour_plot contract contract_edge contragrad contrib_ode convert coord copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1 covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate declare declare_constvalue declare_dimensions declare_fundamental_dimensions declare_fundamental_units declare_qty declare_translated declare_unit_conversion declare_units declare_weights decsym defcon define define_alt_display define_variable defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten delta demo demoivre denom depends derivdegree derivlist describe desolve determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export dimacs_import dimension dimensionless dimensions dimensions_as_list direct directory discrete_freq disjoin disjointp disolate disp dispcon dispform dispfun dispJordan display disprule dispterms distrib divide divisors divsum dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors euler ev eval_string evenp every evolution evolution2d evundiff example exp expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li expintegral_shi expintegral_si explicit explose exponentialize express expt exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge file_search file_type fillarray findde find_root find_root_abs find_root_error find_root_rel first fix flatten flength float floatnump floor flower_snark flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string get_pixel get_plot_option get_tex_environment get_tex_environment_default get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart imetric implicit implicit_derivative implicit_plot indexed_tensor indices induced_subgraph inferencep inference_result infix info_display init_atensor init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions integrate intersect intersection intervalp intopois intosum invariant1 invariant2 inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2 kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit Lindstedt linear linearinterpol linear_program linear_regression line_graph linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country make_polygon make_random_state make_rgb_picture makeset make_string_input_stream make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker max max_clique max_degree max_flow maximize_lp max_independent_set max_matching maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext newdet new_graph newline newton new_variable next_prime nicedummies niceindices ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst nthroot nullity nullspace num numbered_boundaries numberp number_to_octets num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin oid_to_octets op opena opena_binary openr openr_binary openw openw_binary operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface parg parGosper parse_string parse_timedate part part2cont partfrac partition partition_set partpol path_digraph path_graph pathname_directory pathname_name pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod powerseries powerset prefix prev_prime primep primes principal_components print printf printfile print_graph printpois printprops prodrac product properties propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2 quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan radius random random_bernoulli random_beta random_binomial random_bipartite_graph random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform random_exp random_f random_gamma random_general_finite_discrete random_geometric random_graph random_graph1 random_gumbel random_hypergeometric random_laplace random_logistic random_lognormal random_negative_binomial random_network random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto random_permutation random_poisson random_rayleigh random_regular_graph random_student_t random_tournament random_tree random_weibull range rank rat ratcoef ratdenom ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus rem remainder remarray rembox remcomps remcon remcoord remfun remfunction remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions remove_fundamental_units remove_plot_option remove_vertex rempart remrule remsym remvalue rename rename_file reset reset_displays residue resolvante resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann rinvariant risch rk rmdir rncombine romberg room rootscontract round row rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1 spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot starplot_description status std std1 std_bernoulli std_beta std_binomial std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull stemplot stirling stirling1 stirling2 strim striml strimr string stringout stringp strong_components struve_h struve_l sublis sublist sublist_indices submatrix subsample subset subsetp subst substinpart subst_parallel substpart substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext symbolp symmdifference symmetricp system take_channel take_inference tan tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference test_normality test_proportion test_proportions_difference test_rank_sum test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep totalfourier totient tpartpol trace tracematrix trace_options transform_sample translate translate_file transpose treefale tree_reduce treillis treinat triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget ultraspherical underlying_graph undiff union unique uniteigenvectors unitp units unit_step unitvector unorder unsum untellrat untimer untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table absboxchar activecontexts adapt_depth additive adim aform algebraic algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top azimuth background background_color backsubst berlefact bernstein_explicit besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest border boundaries_array box boxchar breakup %c capping cauchysum cbrange cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics colorbox columns commutative complex cone context contexts contour contour_levels cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp cube current_let_rule_package cylinder data_file_name debugmode decreasing default_let_rule_package delay dependencies derivabbrev derivsubst detout diagmetric diff dim dimensions dispflag display2d|10 display_format_internal distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart edge_color edge_coloring edge_partition edge_type edge_width %edispflag elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine factlim factorflag factorial_expand factors_only fb feature features file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10 file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color fill_density filled_func fixed_vertices flipflag float2bf font font_size fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both head_length head_type height hypergeometric_representation %iargs ibase icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued integrate_use_rootsof integration_constant integration_constant_counter interpolate_color intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10 maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties opsubst optimprefix optionset orientation origin orthopoly_returns_intervals outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart png_file pochhammer_max_index points pointsize point_size points_joined point_type poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list poly_secondary_elimination_order poly_top_reduction_only posfun position powerdisp pred prederror primep_number_of_tests product_use_gamma program programmode promote_float_to_bigfloat prompt proportional_axes props psexpand ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type show_vertices show_weight simp simplified_output simplify_products simpproduct simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch tr track transcompile transform transform_xy translate_fast_arrays transparent transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest",
        symbol: "_ __ %|0 %%|0"
      },
      contains: [
        {
          className: "comment",
          begin: "/\\*",
          end: "\\*/",
          contains: ["self"]
        },
        e.QUOTE_STRING_MODE,
        {
          className: "number",
          relevance: 0,
          variants: [
            {
              // float number w/ exponent
              // hmm, I wonder if we ought to include other exponent markers?
              begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b"
            },
            {
              // bigfloat number
              begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b",
              relevance: 10
            },
            {
              // float number w/out exponent
              // Doesn't seem to recognize floats which start with '.'
              begin: "\\b(\\.\\d+|\\d+\\.\\d+)\\b"
            },
            {
              // integer in base up to 36
              // Doesn't seem to recognize integers which end with '.'
              begin: "\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b"
            }
          ]
        }
      ],
      illegal: /@/
    };
  }
  return Wd = t, Wd;
}
var Kd, J$;
function lx() {
  if (J$)
    return Kd;
  J$ = 1;
  function t(e) {
    return {
      name: "MEL",
      keywords: "int float string vector matrix if else switch case default while do for in break continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor animDisplay animView annotate appendStringArray applicationName applyAttrPreset applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem componentEditor compositingInterop computePolysetVolume condition cone confirmDialog connectAttr connectControl connectDynamic connectJoint connectionInfo constrain constrainValue constructionHistory container containsMultibyte contextInfo control convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected displayColor displayCull displayLevelOfDetail displayPref displayRGBColor displaySmoothness displayStats displayString displaySurface distanceDimContext distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor editorTemplate effector emit emitter enableDevice encodeString endString endsWith env equivalent equivalentTol erf error eval evalDeferred evalEcho event exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo filetest filletCurve filter filterCurve filterExpand filterStudioImport findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss geometryConstraint getApplicationVersionAsFloat getAttr getClassification getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation listNodeTypes listPanelCategories listRelatives listSets listTransforms listUnselected listerEditor loadFluid loadNewShelf loadPlugin loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration panelHistory paramDimContext paramDimension paramLocator parent parentConstraint particle particleExists particleInstancer particleRenderInfo partition pasteKey pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE registerPluginResource rehash reloadImage removeJoint removeMultiInstance removePanelCategory rename renameAttr renameSelectionList renameUI render renderGlobalsNode renderInfo renderLayerButton renderLayerParent renderLayerPostProcess renderLayerUnparent renderManip renderPartition renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor renderWindowSelectContext renderer reorder reorderDeformers requires reroot resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType selectedNodes selectionConnection separator setAttr setAttrEnumResource setAttrMapping setAttrNiceNameResource setConstraintRestPosition setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField shortNameOf showHelp showHidden showManipCtx showSelectionInTitle showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString stringToStringArray strip stripPrefixFromName stroke subdAutoProjection subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList textToShelf textureDisplacePlane textureHairColor texturePlacementContext textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper trace track trackCtx transferAttributes transformCompare transformLimits translator trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform",
      illegal: "</",
      contains: [
        e.C_NUMBER_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "`",
          end: "`",
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          // eats variables
          begin: /[$%@](\^\w\b|#\w+|[^\s\w{]|\{\w+\}|\w+)/
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return Kd = t, Kd;
}
var Qd, eb;
function cx() {
  if (eb)
    return Qd;
  eb = 1;
  function t(e) {
    const r = {
      keyword: "module use_module import_module include_module end_module initialise mutable initialize finalize finalise interface implementation pred mode func type inst solver any_pred any_func is semidet det nondet multi erroneous failure cc_nondet cc_multi typeclass instance where pragma promise external trace atomic or_else require_complete_switch require_det require_semidet require_multi require_nondet require_cc_multi require_cc_nondet require_erroneous require_failure",
      meta: (
        // pragma
        "inline no_inline type_spec source_file fact_table obsolete memo loop_check minimal_model terminates does_not_terminate check_termination promise_equivalent_clauses foreign_proc foreign_decl foreign_code foreign_type foreign_import_module foreign_export_enum foreign_export foreign_enum may_call_mercury will_not_call_mercury thread_safe not_thread_safe maybe_thread_safe promise_pure promise_semipure tabled_for_io local untrailed trailed attach_to_io_state can_pass_as_mercury_type stable will_not_throw_exception may_modify_trail will_not_modify_trail may_duplicate may_not_duplicate affects_liveness does_not_affect_liveness doesnt_affect_liveness no_sharing unknown_sharing sharing"
      ),
      built_in: "some all not if then else true fail false try catch catch_any semidet_true semidet_false semidet_fail impure_true impure semipure"
    }, n = e.COMMENT("%", "$"), i = {
      className: "number",
      begin: "0'.\\|0[box][0-9a-fA-F]*"
    }, s = e.inherit(e.APOS_STRING_MODE, { relevance: 0 }), o = e.inherit(e.QUOTE_STRING_MODE, { relevance: 0 }), a = {
      className: "subst",
      begin: "\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]",
      relevance: 0
    };
    return o.contains = o.contains.slice(), o.contains.push(a), {
      name: "Mercury",
      aliases: [
        "m",
        "moo"
      ],
      keywords: r,
      contains: [
        {
          className: "built_in",
          variants: [
            { begin: "<=>" },
            {
              begin: "<=",
              relevance: 0
            },
            {
              begin: "=>",
              relevance: 0
            },
            { begin: "/\\\\" },
            { begin: "\\\\/" }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: ":-\\|-->" },
            {
              begin: "=",
              relevance: 0
            }
          ]
        },
        n,
        e.C_BLOCK_COMMENT_MODE,
        i,
        e.NUMBER_MODE,
        s,
        o,
        {
          // relevance booster
          begin: /:-/
        },
        {
          // relevance booster
          begin: /\.$/
        }
      ]
    };
  }
  return Qd = t, Qd;
}
var jd, tb;
function ux() {
  if (tb)
    return jd;
  tb = 1;
  function t(e) {
    return {
      name: "MIPS Assembly",
      case_insensitive: !0,
      aliases: ["mips"],
      keywords: {
        $pattern: "\\.?" + e.IDENT_RE,
        meta: (
          // GNU preprocs
          ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg "
        ),
        built_in: "$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 k0 k1 gp sp fp ra $f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 $f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt "
        // Coprocessor 0 registers
      },
      contains: [
        {
          className: "keyword",
          begin: "\\b(addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\\.hb)?|jr(\\.hb)?|lbu?|lhu?|ll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|srlv?|subu?|sw[lr]?|xori?|wsbh|abs\\.[sd]|add\\.[sd]|alnv.ps|bc1[ft]l?|c\\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\\.[sd]|(ceil|floor|round|trunc)\\.[lw]\\.[sd]|cfc1|cvt\\.d\\.[lsw]|cvt\\.l\\.[dsw]|cvt\\.ps\\.s|cvt\\.s\\.[dlw]|cvt\\.s\\.p[lu]|cvt\\.w\\.[dls]|div\\.[ds]|ldx?c1|luxc1|lwx?c1|madd\\.[sd]|mfc1|mov[fntz]?\\.[ds]|msub\\.[sd]|mth?c1|mul\\.[ds]|neg\\.[ds]|nmadd\\.[ds]|nmsub\\.[ds]|p[lu][lu]\\.ps|recip\\.fmt|r?sqrt\\.[ds]|sdx?c1|sub\\.[ds]|suxc1|swx?c1|break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|tlti?u?|tnei?|wait|wrpgpr)",
          end: "\\s"
        },
        // lines ending with ; or # aren't really comments, probably auto-detect fail
        e.COMMENT("[;#](?!\\s*$)", "$"),
        e.C_BLOCK_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          relevance: 0
        },
        {
          className: "title",
          begin: "\\|",
          end: "\\|",
          illegal: "\\n",
          relevance: 0
        },
        {
          className: "number",
          variants: [
            {
              // hex
              begin: "0x[0-9a-f]+"
            },
            {
              // bare number
              begin: "\\b-?\\d+"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            {
              // GNU MIPS syntax
              begin: "^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
            },
            {
              // numbered local labels
              begin: "^\\s*[0-9]+:"
            },
            {
              // number local label reference (backwards, forwards)
              begin: "[0-9]+[bf]"
            }
          ],
          relevance: 0
        }
      ],
      // forward slashes are not allowed
      illegal: /\//
    };
  }
  return jd = t, jd;
}
var Xd, rb;
function dx() {
  if (rb)
    return Xd;
  rb = 1;
  function t(e) {
    return {
      name: "Mizar",
      keywords: "environ vocabularies notations constructors definitions registrations theorems schemes requirements begin end definition registration cluster existence pred func defpred deffunc theorem proof let take assume then thus hence ex for st holds consider reconsider such that and in provided of as from be being by means equals implies iff redefine define now not or attr is mode suppose per cases set thesis contradiction scheme reserve struct correctness compatibility coherence symmetry assymetry reflexivity irreflexivity connectedness uniqueness commutativity idempotence involutiveness projectivity",
      contains: [e.COMMENT("::", "$")]
    };
  }
  return Xd = t, Xd;
}
var Zd, nb;
function fx() {
  if (nb)
    return Zd;
  nb = 1;
  function t(e) {
    const r = e.regex, n = [
      "abs",
      "accept",
      "alarm",
      "and",
      "atan2",
      "bind",
      "binmode",
      "bless",
      "break",
      "caller",
      "chdir",
      "chmod",
      "chomp",
      "chop",
      "chown",
      "chr",
      "chroot",
      "close",
      "closedir",
      "connect",
      "continue",
      "cos",
      "crypt",
      "dbmclose",
      "dbmopen",
      "defined",
      "delete",
      "die",
      "do",
      "dump",
      "each",
      "else",
      "elsif",
      "endgrent",
      "endhostent",
      "endnetent",
      "endprotoent",
      "endpwent",
      "endservent",
      "eof",
      "eval",
      "exec",
      "exists",
      "exit",
      "exp",
      "fcntl",
      "fileno",
      "flock",
      "for",
      "foreach",
      "fork",
      "format",
      "formline",
      "getc",
      "getgrent",
      "getgrgid",
      "getgrnam",
      "gethostbyaddr",
      "gethostbyname",
      "gethostent",
      "getlogin",
      "getnetbyaddr",
      "getnetbyname",
      "getnetent",
      "getpeername",
      "getpgrp",
      "getpriority",
      "getprotobyname",
      "getprotobynumber",
      "getprotoent",
      "getpwent",
      "getpwnam",
      "getpwuid",
      "getservbyname",
      "getservbyport",
      "getservent",
      "getsockname",
      "getsockopt",
      "given",
      "glob",
      "gmtime",
      "goto",
      "grep",
      "gt",
      "hex",
      "if",
      "index",
      "int",
      "ioctl",
      "join",
      "keys",
      "kill",
      "last",
      "lc",
      "lcfirst",
      "length",
      "link",
      "listen",
      "local",
      "localtime",
      "log",
      "lstat",
      "lt",
      "ma",
      "map",
      "mkdir",
      "msgctl",
      "msgget",
      "msgrcv",
      "msgsnd",
      "my",
      "ne",
      "next",
      "no",
      "not",
      "oct",
      "open",
      "opendir",
      "or",
      "ord",
      "our",
      "pack",
      "package",
      "pipe",
      "pop",
      "pos",
      "print",
      "printf",
      "prototype",
      "push",
      "q|0",
      "qq",
      "quotemeta",
      "qw",
      "qx",
      "rand",
      "read",
      "readdir",
      "readline",
      "readlink",
      "readpipe",
      "recv",
      "redo",
      "ref",
      "rename",
      "require",
      "reset",
      "return",
      "reverse",
      "rewinddir",
      "rindex",
      "rmdir",
      "say",
      "scalar",
      "seek",
      "seekdir",
      "select",
      "semctl",
      "semget",
      "semop",
      "send",
      "setgrent",
      "sethostent",
      "setnetent",
      "setpgrp",
      "setpriority",
      "setprotoent",
      "setpwent",
      "setservent",
      "setsockopt",
      "shift",
      "shmctl",
      "shmget",
      "shmread",
      "shmwrite",
      "shutdown",
      "sin",
      "sleep",
      "socket",
      "socketpair",
      "sort",
      "splice",
      "split",
      "sprintf",
      "sqrt",
      "srand",
      "stat",
      "state",
      "study",
      "sub",
      "substr",
      "symlink",
      "syscall",
      "sysopen",
      "sysread",
      "sysseek",
      "system",
      "syswrite",
      "tell",
      "telldir",
      "tie",
      "tied",
      "time",
      "times",
      "tr",
      "truncate",
      "uc",
      "ucfirst",
      "umask",
      "undef",
      "unless",
      "unlink",
      "unpack",
      "unshift",
      "untie",
      "until",
      "use",
      "utime",
      "values",
      "vec",
      "wait",
      "waitpid",
      "wantarray",
      "warn",
      "when",
      "while",
      "write",
      "x|0",
      "xor",
      "y|0"
    ], i = /[dualxmsipngr]{0,12}/, s = {
      $pattern: /[\w.]+/,
      keyword: n.join(" ")
    }, o = {
      className: "subst",
      begin: "[$@]\\{",
      end: "\\}",
      keywords: s
    }, a = {
      begin: /->\{/,
      end: /\}/
      // contains defined later
    }, l = { variants: [
      { begin: /\$\d/ },
      { begin: r.concat(
        /[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
        // negative look-ahead tries to avoid matching patterns that are not
        // Perl at all like $ident$, @ident@, etc.
        "(?![A-Za-z])(?![@$%])"
      ) },
      {
        begin: /[$%@][^\s\w{]/,
        relevance: 0
      }
    ] }, c = [
      e.BACKSLASH_ESCAPE,
      o,
      l
    ], f = [
      /!/,
      /\//,
      /\|/,
      /\?/,
      /'/,
      /"/,
      // valid but infrequent and weird
      /#/
      // valid but infrequent and weird
    ], m = (N, z, A = "\\1") => {
      const Q = A === "\\1" ? A : r.concat(A, z);
      return r.concat(
        r.concat("(?:", N, ")"),
        z,
        /(?:\\.|[^\\\/])*?/,
        Q,
        /(?:\\.|[^\\\/])*?/,
        A,
        i
      );
    }, b = (N, z, A) => r.concat(
      r.concat("(?:", N, ")"),
      z,
      /(?:\\.|[^\\\/])*?/,
      A,
      i
    ), C = [
      l,
      e.HASH_COMMENT_MODE,
      e.COMMENT(
        /^=\w/,
        /=cut/,
        { endsWithParent: !0 }
      ),
      a,
      {
        className: "string",
        contains: c,
        variants: [
          {
            begin: "q[qwxr]?\\s*\\(",
            end: "\\)",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\[",
            end: "\\]",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\{",
            end: "\\}",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\|",
            end: "\\|",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*<",
            end: ">",
            relevance: 5
          },
          {
            begin: "qw\\s+q",
            end: "q",
            relevance: 5
          },
          {
            begin: "'",
            end: "'",
            contains: [e.BACKSLASH_ESCAPE]
          },
          {
            begin: '"',
            end: '"'
          },
          {
            begin: "`",
            end: "`",
            contains: [e.BACKSLASH_ESCAPE]
          },
          {
            begin: /\{\w+\}/,
            relevance: 0
          },
          {
            begin: "-?\\w+\\s*=>",
            relevance: 0
          }
        ]
      },
      {
        className: "number",
        begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
        relevance: 0
      },
      {
        // regexp container
        begin: "(\\/\\/|" + e.RE_STARTERS_RE + "|\\b(split|return|print|reverse|grep)\\b)\\s*",
        keywords: "split return print reverse grep",
        relevance: 0,
        contains: [
          e.HASH_COMMENT_MODE,
          {
            className: "regexp",
            variants: [
              // allow matching common delimiters
              { begin: m("s|tr|y", r.either(...f, { capture: !0 })) },
              // and then paired delmis
              { begin: m("s|tr|y", "\\(", "\\)") },
              { begin: m("s|tr|y", "\\[", "\\]") },
              { begin: m("s|tr|y", "\\{", "\\}") }
            ],
            relevance: 2
          },
          {
            className: "regexp",
            variants: [
              {
                // could be a comment in many languages so do not count
                // as relevant
                begin: /(m|qr)\/\//,
                relevance: 0
              },
              // prefix is optional with /regex/
              { begin: b("(?:m|qr)?", /\//, /\//) },
              // allow matching common delimiters
              { begin: b("m|qr", r.either(...f, { capture: !0 }), /\1/) },
              // allow common paired delmins
              { begin: b("m|qr", /\(/, /\)/) },
              { begin: b("m|qr", /\[/, /\]/) },
              { begin: b("m|qr", /\{/, /\}/) }
            ]
          }
        ]
      },
      {
        className: "function",
        beginKeywords: "sub",
        end: "(\\s*\\(.*?\\))?[;{]",
        excludeEnd: !0,
        relevance: 5,
        contains: [e.TITLE_MODE]
      },
      {
        begin: "-\\w\\b",
        relevance: 0
      },
      {
        begin: "^__DATA__$",
        end: "^__END__$",
        subLanguage: "mojolicious",
        contains: [
          {
            begin: "^@@.*",
            end: "$",
            className: "comment"
          }
        ]
      }
    ];
    return o.contains = C, a.contains = C, {
      name: "Perl",
      aliases: [
        "pl",
        "pm"
      ],
      keywords: s,
      contains: C
    };
  }
  return Zd = t, Zd;
}
var Jd, ib;
function px() {
  if (ib)
    return Jd;
  ib = 1;
  function t(e) {
    return {
      name: "Mojolicious",
      subLanguage: "xml",
      contains: [
        {
          className: "meta",
          begin: "^__(END|DATA)__$"
        },
        // mojolicious line
        {
          begin: "^\\s*%{1,2}={0,2}",
          end: "$",
          subLanguage: "perl"
        },
        // mojolicious block
        {
          begin: "<%{1,2}={0,2}",
          end: "={0,1}%>",
          subLanguage: "perl",
          excludeBegin: !0,
          excludeEnd: !0
        }
      ]
    };
  }
  return Jd = t, Jd;
}
var ef, sb;
function _x() {
  if (sb)
    return ef;
  sb = 1;
  function t(e) {
    const r = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: "[$][a-fA-F0-9]+" },
        e.NUMBER_MODE
      ]
    }, n = {
      variants: [
        { match: [
          /(function|method)/,
          /\s+/,
          e.UNDERSCORE_IDENT_RE
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      }
    }, i = {
      variants: [
        { match: [
          /(class|interface|extends|implements)/,
          /\s+/,
          e.UNDERSCORE_IDENT_RE
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "Monkey",
      case_insensitive: !0,
      keywords: {
        keyword: [
          "public",
          "private",
          "property",
          "continue",
          "exit",
          "extern",
          "new",
          "try",
          "catch",
          "eachin",
          "not",
          "abstract",
          "final",
          "select",
          "case",
          "default",
          "const",
          "local",
          "global",
          "field",
          "end",
          "if",
          "then",
          "else",
          "elseif",
          "endif",
          "while",
          "wend",
          "repeat",
          "until",
          "forever",
          "for",
          "to",
          "step",
          "next",
          "return",
          "module",
          "inline",
          "throw",
          "import",
          // not positive, but these are not literals
          "and",
          "or",
          "shl",
          "shr",
          "mod"
        ],
        built_in: [
          "DebugLog",
          "DebugStop",
          "Error",
          "Print",
          "ACos",
          "ACosr",
          "ASin",
          "ASinr",
          "ATan",
          "ATan2",
          "ATan2r",
          "ATanr",
          "Abs",
          "Abs",
          "Ceil",
          "Clamp",
          "Clamp",
          "Cos",
          "Cosr",
          "Exp",
          "Floor",
          "Log",
          "Max",
          "Max",
          "Min",
          "Min",
          "Pow",
          "Sgn",
          "Sgn",
          "Sin",
          "Sinr",
          "Sqrt",
          "Tan",
          "Tanr",
          "Seed",
          "PI",
          "HALFPI",
          "TWOPI"
        ],
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      illegal: /\/\*/,
      contains: [
        e.COMMENT("#rem", "#end"),
        e.COMMENT(
          "'",
          "$",
          { relevance: 0 }
        ),
        n,
        i,
        {
          className: "variable.language",
          begin: /\b(self|super)\b/
        },
        {
          className: "meta",
          begin: /\s*#/,
          end: "$",
          keywords: { keyword: "if else elseif endif end then" }
        },
        {
          match: [
            /^\s*/,
            /strict\b/
          ],
          scope: { 2: "meta" }
        },
        {
          beginKeywords: "alias",
          end: "=",
          contains: [e.UNDERSCORE_TITLE_MODE]
        },
        e.QUOTE_STRING_MODE,
        r
      ]
    };
  }
  return ef = t, ef;
}
var tf, ob;
function hx() {
  if (ob)
    return tf;
  ob = 1;
  function t(e) {
    const r = {
      keyword: (
        // Moonscript keywords
        "if then not for in while do return else elseif break continue switch and or unless when class extends super local import export from using"
      ),
      literal: "true false nil",
      built_in: "_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug io math os package string table"
    }, n = "[A-Za-z$_][0-9A-Za-z$_]*", i = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: r
    }, s = [
      e.inherit(
        e.C_NUMBER_MODE,
        { starts: {
          end: "(\\s*/)?",
          relevance: 0
        } }
      ),
      // a number tries to eat the following slash to prevent treating it as a regexp
      {
        className: "string",
        variants: [
          {
            begin: /'/,
            end: /'/,
            contains: [e.BACKSLASH_ESCAPE]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              e.BACKSLASH_ESCAPE,
              i
            ]
          }
        ]
      },
      {
        className: "built_in",
        begin: "@__" + e.IDENT_RE
      },
      {
        begin: "@" + e.IDENT_RE
        // relevance booster on par with CoffeeScript
      },
      {
        begin: e.IDENT_RE + "\\\\" + e.IDENT_RE
        // inst\method
      }
    ];
    i.contains = s;
    const o = e.inherit(e.TITLE_MODE, { begin: n }), a = "(\\(.*\\)\\s*)?\\B[-=]>", l = {
      className: "params",
      begin: "\\([^\\(]",
      returnBegin: !0,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: r,
          contains: ["self"].concat(s)
        }
      ]
    };
    return {
      name: "MoonScript",
      aliases: ["moon"],
      keywords: r,
      illegal: /\/\*/,
      contains: s.concat([
        e.COMMENT("--", "$"),
        {
          className: "function",
          // function: -> =>
          begin: "^\\s*" + n + "\\s*=\\s*" + a,
          end: "[-=]>",
          returnBegin: !0,
          contains: [
            o,
            l
          ]
        },
        {
          begin: /[\(,:=]\s*/,
          // anonymous function start
          relevance: 0,
          contains: [
            {
              className: "function",
              begin: a,
              end: "[-=]>",
              returnBegin: !0,
              contains: [l]
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class",
          end: "$",
          illegal: /[:="\[\]]/,
          contains: [
            {
              beginKeywords: "extends",
              endsWithParent: !0,
              illegal: /[:="\[\]]/,
              contains: [o]
            },
            o
          ]
        },
        {
          className: "name",
          // table
          begin: n + ":",
          end: ":",
          returnBegin: !0,
          returnEnd: !0,
          relevance: 0
        }
      ])
    };
  }
  return tf = t, tf;
}
var rf, ab;
function mx() {
  if (ab)
    return rf;
  ab = 1;
  function t(e) {
    return {
      name: "N1QL",
      case_insensitive: !0,
      contains: [
        {
          beginKeywords: "build create index delete drop explain infer|10 insert merge prepare select update upsert|10",
          end: /;/,
          keywords: {
            keyword: [
              "all",
              "alter",
              "analyze",
              "and",
              "any",
              "array",
              "as",
              "asc",
              "begin",
              "between",
              "binary",
              "boolean",
              "break",
              "bucket",
              "build",
              "by",
              "call",
              "case",
              "cast",
              "cluster",
              "collate",
              "collection",
              "commit",
              "connect",
              "continue",
              "correlate",
              "cover",
              "create",
              "database",
              "dataset",
              "datastore",
              "declare",
              "decrement",
              "delete",
              "derived",
              "desc",
              "describe",
              "distinct",
              "do",
              "drop",
              "each",
              "element",
              "else",
              "end",
              "every",
              "except",
              "exclude",
              "execute",
              "exists",
              "explain",
              "fetch",
              "first",
              "flatten",
              "for",
              "force",
              "from",
              "function",
              "grant",
              "group",
              "gsi",
              "having",
              "if",
              "ignore",
              "ilike",
              "in",
              "include",
              "increment",
              "index",
              "infer",
              "inline",
              "inner",
              "insert",
              "intersect",
              "into",
              "is",
              "join",
              "key",
              "keys",
              "keyspace",
              "known",
              "last",
              "left",
              "let",
              "letting",
              "like",
              "limit",
              "lsm",
              "map",
              "mapping",
              "matched",
              "materialized",
              "merge",
              "minus",
              "namespace",
              "nest",
              "not",
              "number",
              "object",
              "offset",
              "on",
              "option",
              "or",
              "order",
              "outer",
              "over",
              "parse",
              "partition",
              "password",
              "path",
              "pool",
              "prepare",
              "primary",
              "private",
              "privilege",
              "procedure",
              "public",
              "raw",
              "realm",
              "reduce",
              "rename",
              "return",
              "returning",
              "revoke",
              "right",
              "role",
              "rollback",
              "satisfies",
              "schema",
              "select",
              "self",
              "semi",
              "set",
              "show",
              "some",
              "start",
              "statistics",
              "string",
              "system",
              "then",
              "to",
              "transaction",
              "trigger",
              "truncate",
              "under",
              "union",
              "unique",
              "unknown",
              "unnest",
              "unset",
              "update",
              "upsert",
              "use",
              "user",
              "using",
              "validate",
              "value",
              "valued",
              "values",
              "via",
              "view",
              "when",
              "where",
              "while",
              "with",
              "within",
              "work",
              "xor"
            ],
            literal: [
              "true",
              "false",
              "null",
              "missing|5"
            ],
            built_in: [
              "array_agg",
              "array_append",
              "array_concat",
              "array_contains",
              "array_count",
              "array_distinct",
              "array_ifnull",
              "array_length",
              "array_max",
              "array_min",
              "array_position",
              "array_prepend",
              "array_put",
              "array_range",
              "array_remove",
              "array_repeat",
              "array_replace",
              "array_reverse",
              "array_sort",
              "array_sum",
              "avg",
              "count",
              "max",
              "min",
              "sum",
              "greatest",
              "least",
              "ifmissing",
              "ifmissingornull",
              "ifnull",
              "missingif",
              "nullif",
              "ifinf",
              "ifnan",
              "ifnanorinf",
              "naninf",
              "neginfif",
              "posinfif",
              "clock_millis",
              "clock_str",
              "date_add_millis",
              "date_add_str",
              "date_diff_millis",
              "date_diff_str",
              "date_part_millis",
              "date_part_str",
              "date_trunc_millis",
              "date_trunc_str",
              "duration_to_str",
              "millis",
              "str_to_millis",
              "millis_to_str",
              "millis_to_utc",
              "millis_to_zone_name",
              "now_millis",
              "now_str",
              "str_to_duration",
              "str_to_utc",
              "str_to_zone_name",
              "decode_json",
              "encode_json",
              "encoded_size",
              "poly_length",
              "base64",
              "base64_encode",
              "base64_decode",
              "meta",
              "uuid",
              "abs",
              "acos",
              "asin",
              "atan",
              "atan2",
              "ceil",
              "cos",
              "degrees",
              "e",
              "exp",
              "ln",
              "log",
              "floor",
              "pi",
              "power",
              "radians",
              "random",
              "round",
              "sign",
              "sin",
              "sqrt",
              "tan",
              "trunc",
              "object_length",
              "object_names",
              "object_pairs",
              "object_inner_pairs",
              "object_values",
              "object_inner_values",
              "object_add",
              "object_put",
              "object_remove",
              "object_unwrap",
              "regexp_contains",
              "regexp_like",
              "regexp_position",
              "regexp_replace",
              "contains",
              "initcap",
              "length",
              "lower",
              "ltrim",
              "position",
              "repeat",
              "replace",
              "rtrim",
              "split",
              "substr",
              "title",
              "trim",
              "upper",
              "isarray",
              "isatom",
              "isboolean",
              "isnumber",
              "isobject",
              "isstring",
              "type",
              "toarray",
              "toatom",
              "toboolean",
              "tonumber",
              "toobject",
              "tostring"
            ]
          },
          contains: [
            {
              className: "string",
              begin: "'",
              end: "'",
              contains: [e.BACKSLASH_ESCAPE]
            },
            {
              className: "string",
              begin: '"',
              end: '"',
              contains: [e.BACKSLASH_ESCAPE]
            },
            {
              className: "symbol",
              begin: "`",
              end: "`",
              contains: [e.BACKSLASH_ESCAPE]
            },
            e.C_NUMBER_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        e.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return rf = t, rf;
}
var nf, lb;
function gx() {
  if (lb)
    return nf;
  lb = 1;
  function t(e) {
    const r = {
      match: [
        /^\s*(?=\S)/,
        // have to look forward here to avoid polynomial backtracking
        /[^:]+/,
        /:\s*/,
        /$/
      ],
      className: {
        2: "attribute",
        3: "punctuation"
      }
    }, n = {
      match: [
        /^\s*(?=\S)/,
        // have to look forward here to avoid polynomial backtracking
        /[^:]*[^: ]/,
        /[ ]*:/,
        /[ ]/,
        /.*$/
      ],
      className: {
        2: "attribute",
        3: "punctuation",
        5: "string"
      }
    }, i = {
      match: [
        /^\s*/,
        />/,
        /[ ]/,
        /.*$/
      ],
      className: {
        2: "punctuation",
        4: "string"
      }
    }, s = {
      variants: [
        { match: [
          /^\s*/,
          /-/,
          /[ ]/,
          /.*$/
        ] },
        { match: [
          /^\s*/,
          /-$/
        ] }
      ],
      className: {
        2: "bullet",
        4: "string"
      }
    };
    return {
      name: "Nested Text",
      aliases: ["nt"],
      contains: [
        e.inherit(e.HASH_COMMENT_MODE, {
          begin: /^\s*(?=#)/,
          excludeBegin: !0
        }),
        s,
        i,
        r,
        n
      ]
    };
  }
  return nf = t, nf;
}
var sf, cb;
function $x() {
  if (cb)
    return sf;
  cb = 1;
  function t(e) {
    const r = e.regex, n = {
      className: "variable",
      variants: [
        { begin: /\$\d+/ },
        { begin: /\$\{\w+\}/ },
        { begin: r.concat(/[$@]/, e.UNDERSCORE_IDENT_RE) }
      ]
    }, s = {
      endsWithParent: !0,
      keywords: {
        $pattern: /[a-z_]{2,}|\/dev\/poll/,
        literal: [
          "on",
          "off",
          "yes",
          "no",
          "true",
          "false",
          "none",
          "blocked",
          "debug",
          "info",
          "notice",
          "warn",
          "error",
          "crit",
          "select",
          "break",
          "last",
          "permanent",
          "redirect",
          "kqueue",
          "rtsig",
          "epoll",
          "poll",
          "/dev/poll"
        ]
      },
      relevance: 0,
      illegal: "=>",
      contains: [
        e.HASH_COMMENT_MODE,
        {
          className: "string",
          contains: [
            e.BACKSLASH_ESCAPE,
            n
          ],
          variants: [
            {
              begin: /"/,
              end: /"/
            },
            {
              begin: /'/,
              end: /'/
            }
          ]
        },
        // this swallows entire URLs to avoid detecting numbers within
        {
          begin: "([a-z]+):/",
          end: "\\s",
          endsWithParent: !0,
          excludeEnd: !0,
          contains: [n]
        },
        {
          className: "regexp",
          contains: [
            e.BACKSLASH_ESCAPE,
            n
          ],
          variants: [
            {
              begin: "\\s\\^",
              end: "\\s|\\{|;",
              returnEnd: !0
            },
            // regexp locations (~, ~*)
            {
              begin: "~\\*?\\s+",
              end: "\\s|\\{|;",
              returnEnd: !0
            },
            // *.example.com
            { begin: "\\*(\\.[a-z\\-]+)+" },
            // sub.example.*
            { begin: "([a-z\\-]+\\.)+\\*" }
          ]
        },
        // IP
        {
          className: "number",
          begin: "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"
        },
        // units
        {
          className: "number",
          begin: "\\b\\d+[kKmMgGdshdwy]?\\b",
          relevance: 0
        },
        n
      ]
    };
    return {
      name: "Nginx config",
      aliases: ["nginxconf"],
      contains: [
        e.HASH_COMMENT_MODE,
        {
          beginKeywords: "upstream location",
          end: /;|\{/,
          contains: s.contains,
          keywords: { section: "upstream location" }
        },
        {
          className: "section",
          begin: r.concat(e.UNDERSCORE_IDENT_RE + r.lookahead(/\s+\{/)),
          relevance: 0
        },
        {
          begin: r.lookahead(e.UNDERSCORE_IDENT_RE + "\\s"),
          end: ";|\\{",
          contains: [
            {
              className: "attribute",
              begin: e.UNDERSCORE_IDENT_RE,
              starts: s
            }
          ],
          relevance: 0
        }
      ],
      illegal: "[^\\s\\}\\{]"
    };
  }
  return sf = t, sf;
}
var of, ub;
function bx() {
  if (ub)
    return of;
  ub = 1;
  function t(e) {
    return {
      name: "Nim",
      keywords: {
        keyword: [
          "addr",
          "and",
          "as",
          "asm",
          "bind",
          "block",
          "break",
          "case",
          "cast",
          "const",
          "continue",
          "converter",
          "discard",
          "distinct",
          "div",
          "do",
          "elif",
          "else",
          "end",
          "enum",
          "except",
          "export",
          "finally",
          "for",
          "from",
          "func",
          "generic",
          "guarded",
          "if",
          "import",
          "in",
          "include",
          "interface",
          "is",
          "isnot",
          "iterator",
          "let",
          "macro",
          "method",
          "mixin",
          "mod",
          "nil",
          "not",
          "notin",
          "object",
          "of",
          "or",
          "out",
          "proc",
          "ptr",
          "raise",
          "ref",
          "return",
          "shared",
          "shl",
          "shr",
          "static",
          "template",
          "try",
          "tuple",
          "type",
          "using",
          "var",
          "when",
          "while",
          "with",
          "without",
          "xor",
          "yield"
        ],
        literal: [
          "true",
          "false"
        ],
        type: [
          "int",
          "int8",
          "int16",
          "int32",
          "int64",
          "uint",
          "uint8",
          "uint16",
          "uint32",
          "uint64",
          "float",
          "float32",
          "float64",
          "bool",
          "char",
          "string",
          "cstring",
          "pointer",
          "expr",
          "stmt",
          "void",
          "auto",
          "any",
          "range",
          "array",
          "openarray",
          "varargs",
          "seq",
          "set",
          "clong",
          "culong",
          "cchar",
          "cschar",
          "cshort",
          "cint",
          "csize",
          "clonglong",
          "cfloat",
          "cdouble",
          "clongdouble",
          "cuchar",
          "cushort",
          "cuint",
          "culonglong",
          "cstringarray",
          "semistatic"
        ],
        built_in: [
          "stdin",
          "stdout",
          "stderr",
          "result"
        ]
      },
      contains: [
        {
          className: "meta",
          // Actually pragma
          begin: /\{\./,
          end: /\.\}/,
          relevance: 10
        },
        {
          className: "string",
          begin: /[a-zA-Z]\w*"/,
          end: /"/,
          contains: [{ begin: /""/ }]
        },
        {
          className: "string",
          begin: /([a-zA-Z]\w*)?"""/,
          end: /"""/
        },
        e.QUOTE_STRING_MODE,
        {
          className: "type",
          begin: /\b[A-Z]\w+\b/,
          relevance: 0
        },
        {
          className: "number",
          relevance: 0,
          variants: [
            { begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/ },
            { begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/ },
            { begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/ },
            { begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/ }
          ]
        },
        e.HASH_COMMENT_MODE
      ]
    };
  }
  return of = t, of;
}
var af, db;
function Ex() {
  if (db)
    return af;
  db = 1;
  function t(e) {
    const r = {
      keyword: [
        "rec",
        "with",
        "let",
        "in",
        "inherit",
        "assert",
        "if",
        "else",
        "then"
      ],
      literal: [
        "true",
        "false",
        "or",
        "and",
        "null"
      ],
      built_in: [
        "import",
        "abort",
        "baseNameOf",
        "dirOf",
        "isNull",
        "builtins",
        "map",
        "removeAttrs",
        "throw",
        "toString",
        "derivation"
      ]
    }, n = {
      className: "subst",
      begin: /\$\{/,
      end: /\}/,
      keywords: r
    }, i = {
      className: "char.escape",
      begin: /''\$/
    }, s = {
      begin: /[a-zA-Z0-9-_]+(\s*=)/,
      returnBegin: !0,
      relevance: 0,
      contains: [
        {
          className: "attr",
          begin: /\S+/,
          relevance: 0.2
        }
      ]
    }, o = {
      className: "string",
      contains: [i, n],
      variants: [
        {
          begin: "''",
          end: "''"
        },
        {
          begin: '"',
          end: '"'
        }
      ]
    }, a = [
      e.NUMBER_MODE,
      e.HASH_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      o,
      s
    ];
    return n.contains = a, {
      name: "Nix",
      aliases: ["nixos"],
      keywords: r,
      contains: a
    };
  }
  return af = t, af;
}
var lf, fb;
function vx() {
  if (fb)
    return lf;
  fb = 1;
  function t(e) {
    return {
      name: "Node REPL",
      contains: [
        {
          className: "meta.prompt",
          starts: {
            // a space separates the REPL prefix from the actual code
            // this is purely for cleaner HTML output
            end: / |$/,
            starts: {
              end: "$",
              subLanguage: "javascript"
            }
          },
          variants: [
            { begin: /^>(?=[ ]|$)/ },
            { begin: /^\.\.\.(?=[ ]|$)/ }
          ]
        }
      ]
    };
  }
  return lf = t, lf;
}
var cf, pb;
function Sx() {
  if (pb)
    return cf;
  pb = 1;
  function t(e) {
    const r = e.regex, n = [
      "ADMINTOOLS",
      "APPDATA",
      "CDBURN_AREA",
      "CMDLINE",
      "COMMONFILES32",
      "COMMONFILES64",
      "COMMONFILES",
      "COOKIES",
      "DESKTOP",
      "DOCUMENTS",
      "EXEDIR",
      "EXEFILE",
      "EXEPATH",
      "FAVORITES",
      "FONTS",
      "HISTORY",
      "HWNDPARENT",
      "INSTDIR",
      "INTERNET_CACHE",
      "LANGUAGE",
      "LOCALAPPDATA",
      "MUSIC",
      "NETHOOD",
      "OUTDIR",
      "PICTURES",
      "PLUGINSDIR",
      "PRINTHOOD",
      "PROFILE",
      "PROGRAMFILES32",
      "PROGRAMFILES64",
      "PROGRAMFILES",
      "QUICKLAUNCH",
      "RECENT",
      "RESOURCES_LOCALIZED",
      "RESOURCES",
      "SENDTO",
      "SMPROGRAMS",
      "SMSTARTUP",
      "STARTMENU",
      "SYSDIR",
      "TEMP",
      "TEMPLATES",
      "VIDEOS",
      "WINDIR"
    ], i = [
      "ARCHIVE",
      "FILE_ATTRIBUTE_ARCHIVE",
      "FILE_ATTRIBUTE_NORMAL",
      "FILE_ATTRIBUTE_OFFLINE",
      "FILE_ATTRIBUTE_READONLY",
      "FILE_ATTRIBUTE_SYSTEM",
      "FILE_ATTRIBUTE_TEMPORARY",
      "HKCR",
      "HKCU",
      "HKDD",
      "HKEY_CLASSES_ROOT",
      "HKEY_CURRENT_CONFIG",
      "HKEY_CURRENT_USER",
      "HKEY_DYN_DATA",
      "HKEY_LOCAL_MACHINE",
      "HKEY_PERFORMANCE_DATA",
      "HKEY_USERS",
      "HKLM",
      "HKPD",
      "HKU",
      "IDABORT",
      "IDCANCEL",
      "IDIGNORE",
      "IDNO",
      "IDOK",
      "IDRETRY",
      "IDYES",
      "MB_ABORTRETRYIGNORE",
      "MB_DEFBUTTON1",
      "MB_DEFBUTTON2",
      "MB_DEFBUTTON3",
      "MB_DEFBUTTON4",
      "MB_ICONEXCLAMATION",
      "MB_ICONINFORMATION",
      "MB_ICONQUESTION",
      "MB_ICONSTOP",
      "MB_OK",
      "MB_OKCANCEL",
      "MB_RETRYCANCEL",
      "MB_RIGHT",
      "MB_RTLREADING",
      "MB_SETFOREGROUND",
      "MB_TOPMOST",
      "MB_USERICON",
      "MB_YESNO",
      "NORMAL",
      "OFFLINE",
      "READONLY",
      "SHCTX",
      "SHELL_CONTEXT",
      "SYSTEM|TEMPORARY"
    ], s = [
      "addincludedir",
      "addplugindir",
      "appendfile",
      "assert",
      "cd",
      "define",
      "delfile",
      "echo",
      "else",
      "endif",
      "error",
      "execute",
      "finalize",
      "getdllversion",
      "gettlbversion",
      "if",
      "ifdef",
      "ifmacrodef",
      "ifmacrondef",
      "ifndef",
      "include",
      "insertmacro",
      "macro",
      "macroend",
      "makensis",
      "packhdr",
      "searchparse",
      "searchreplace",
      "system",
      "tempfile",
      "undef",
      "uninstfinalize",
      "verbose",
      "warning"
    ], o = {
      className: "variable.constant",
      begin: r.concat(/\$/, r.either(...n))
    }, a = {
      // ${defines}
      className: "variable",
      begin: /\$+\{[\!\w.:-]+\}/
    }, l = {
      // $variables
      className: "variable",
      begin: /\$+\w[\w\.]*/,
      illegal: /\(\)\{\}/
    }, c = {
      // $(language_strings)
      className: "variable",
      begin: /\$+\([\w^.:!-]+\)/
    }, f = {
      // command parameters
      className: "params",
      begin: r.either(...i)
    }, m = {
      // !compiler_flags
      className: "keyword",
      begin: r.concat(
        /!/,
        r.either(...s)
      )
    }, b = {
      // $\n, $\r, $\t, $$
      className: "char.escape",
      begin: /\$(\\[nrt]|\$)/
    }, C = {
      // plug::ins
      className: "title.function",
      begin: /\w+::\w+/
    }, N = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        },
        {
          begin: "`",
          end: "`"
        }
      ],
      illegal: /\n/,
      contains: [
        b,
        o,
        a,
        l,
        c
      ]
    }, z = [
      "Abort",
      "AddBrandingImage",
      "AddSize",
      "AllowRootDirInstall",
      "AllowSkipFiles",
      "AutoCloseWindow",
      "BGFont",
      "BGGradient",
      "BrandingText",
      "BringToFront",
      "Call",
      "CallInstDLL",
      "Caption",
      "ChangeUI",
      "CheckBitmap",
      "ClearErrors",
      "CompletedText",
      "ComponentText",
      "CopyFiles",
      "CRCCheck",
      "CreateDirectory",
      "CreateFont",
      "CreateShortCut",
      "Delete",
      "DeleteINISec",
      "DeleteINIStr",
      "DeleteRegKey",
      "DeleteRegValue",
      "DetailPrint",
      "DetailsButtonText",
      "DirText",
      "DirVar",
      "DirVerify",
      "EnableWindow",
      "EnumRegKey",
      "EnumRegValue",
      "Exch",
      "Exec",
      "ExecShell",
      "ExecShellWait",
      "ExecWait",
      "ExpandEnvStrings",
      "File",
      "FileBufSize",
      "FileClose",
      "FileErrorText",
      "FileOpen",
      "FileRead",
      "FileReadByte",
      "FileReadUTF16LE",
      "FileReadWord",
      "FileWriteUTF16LE",
      "FileSeek",
      "FileWrite",
      "FileWriteByte",
      "FileWriteWord",
      "FindClose",
      "FindFirst",
      "FindNext",
      "FindWindow",
      "FlushINI",
      "GetCurInstType",
      "GetCurrentAddress",
      "GetDlgItem",
      "GetDLLVersion",
      "GetDLLVersionLocal",
      "GetErrorLevel",
      "GetFileTime",
      "GetFileTimeLocal",
      "GetFullPathName",
      "GetFunctionAddress",
      "GetInstDirError",
      "GetKnownFolderPath",
      "GetLabelAddress",
      "GetTempFileName",
      "GetWinVer",
      "Goto",
      "HideWindow",
      "Icon",
      "IfAbort",
      "IfErrors",
      "IfFileExists",
      "IfRebootFlag",
      "IfRtlLanguage",
      "IfShellVarContextAll",
      "IfSilent",
      "InitPluginsDir",
      "InstallButtonText",
      "InstallColors",
      "InstallDir",
      "InstallDirRegKey",
      "InstProgressFlags",
      "InstType",
      "InstTypeGetText",
      "InstTypeSetText",
      "Int64Cmp",
      "Int64CmpU",
      "Int64Fmt",
      "IntCmp",
      "IntCmpU",
      "IntFmt",
      "IntOp",
      "IntPtrCmp",
      "IntPtrCmpU",
      "IntPtrOp",
      "IsWindow",
      "LangString",
      "LicenseBkColor",
      "LicenseData",
      "LicenseForceSelection",
      "LicenseLangString",
      "LicenseText",
      "LoadAndSetImage",
      "LoadLanguageFile",
      "LockWindow",
      "LogSet",
      "LogText",
      "ManifestDPIAware",
      "ManifestLongPathAware",
      "ManifestMaxVersionTested",
      "ManifestSupportedOS",
      "MessageBox",
      "MiscButtonText",
      "Name|0",
      "Nop",
      "OutFile",
      "Page",
      "PageCallbacks",
      "PEAddResource",
      "PEDllCharacteristics",
      "PERemoveResource",
      "PESubsysVer",
      "Pop",
      "Push",
      "Quit",
      "ReadEnvStr",
      "ReadINIStr",
      "ReadRegDWORD",
      "ReadRegStr",
      "Reboot",
      "RegDLL",
      "Rename",
      "RequestExecutionLevel",
      "ReserveFile",
      "Return",
      "RMDir",
      "SearchPath",
      "SectionGetFlags",
      "SectionGetInstTypes",
      "SectionGetSize",
      "SectionGetText",
      "SectionIn",
      "SectionSetFlags",
      "SectionSetInstTypes",
      "SectionSetSize",
      "SectionSetText",
      "SendMessage",
      "SetAutoClose",
      "SetBrandingImage",
      "SetCompress",
      "SetCompressor",
      "SetCompressorDictSize",
      "SetCtlColors",
      "SetCurInstType",
      "SetDatablockOptimize",
      "SetDateSave",
      "SetDetailsPrint",
      "SetDetailsView",
      "SetErrorLevel",
      "SetErrors",
      "SetFileAttributes",
      "SetFont",
      "SetOutPath",
      "SetOverwrite",
      "SetRebootFlag",
      "SetRegView",
      "SetShellVarContext",
      "SetSilent",
      "ShowInstDetails",
      "ShowUninstDetails",
      "ShowWindow",
      "SilentInstall",
      "SilentUnInstall",
      "Sleep",
      "SpaceTexts",
      "StrCmp",
      "StrCmpS",
      "StrCpy",
      "StrLen",
      "SubCaption",
      "Unicode",
      "UninstallButtonText",
      "UninstallCaption",
      "UninstallIcon",
      "UninstallSubCaption",
      "UninstallText",
      "UninstPage",
      "UnRegDLL",
      "Var",
      "VIAddVersionKey",
      "VIFileVersion",
      "VIProductVersion",
      "WindowIcon",
      "WriteINIStr",
      "WriteRegBin",
      "WriteRegDWORD",
      "WriteRegExpandStr",
      "WriteRegMultiStr",
      "WriteRegNone",
      "WriteRegStr",
      "WriteUninstaller",
      "XPStyle"
    ], A = [
      "admin",
      "all",
      "auto",
      "both",
      "bottom",
      "bzip2",
      "colored",
      "components",
      "current",
      "custom",
      "directory",
      "false",
      "force",
      "hide",
      "highest",
      "ifdiff",
      "ifnewer",
      "instfiles",
      "lastused",
      "leave",
      "left",
      "license",
      "listonly",
      "lzma",
      "nevershow",
      "none",
      "normal",
      "notset",
      "off",
      "on",
      "open",
      "print",
      "right",
      "show",
      "silent",
      "silentlog",
      "smooth",
      "textonly",
      "top",
      "true",
      "try",
      "un.components",
      "un.custom",
      "un.directory",
      "un.instfiles",
      "un.license",
      "uninstConfirm",
      "user",
      "Win10",
      "Win7",
      "Win8",
      "WinVista",
      "zlib"
    ], Q = {
      match: [
        /Function/,
        /\s+/,
        r.concat(/(\.)?/, e.IDENT_RE)
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      }
    }, ce = {
      match: [
        /Var/,
        /\s+/,
        /(?:\/GLOBAL\s+)?/,
        /[A-Za-z][\w.]*/
      ],
      scope: {
        1: "keyword",
        3: "params",
        4: "variable"
      }
    };
    return {
      name: "NSIS",
      case_insensitive: !0,
      keywords: {
        keyword: z,
        literal: A
      },
      contains: [
        e.HASH_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        ce,
        Q,
        { beginKeywords: "Function PageEx Section SectionGroup FunctionEnd SectionEnd" },
        N,
        m,
        a,
        l,
        c,
        f,
        C,
        e.NUMBER_MODE
      ]
    };
  }
  return cf = t, cf;
}
var uf, _b;
function yx() {
  if (_b)
    return uf;
  _b = 1;
  function t(e) {
    const r = {
      className: "built_in",
      begin: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"
    }, n = /[a-zA-Z@][a-zA-Z0-9_]*/, l = {
      "variable.language": [
        "this",
        "super"
      ],
      $pattern: n,
      keyword: [
        "while",
        "export",
        "sizeof",
        "typedef",
        "const",
        "struct",
        "for",
        "union",
        "volatile",
        "static",
        "mutable",
        "if",
        "do",
        "return",
        "goto",
        "enum",
        "else",
        "break",
        "extern",
        "asm",
        "case",
        "default",
        "register",
        "explicit",
        "typename",
        "switch",
        "continue",
        "inline",
        "readonly",
        "assign",
        "readwrite",
        "self",
        "@synchronized",
        "id",
        "typeof",
        "nonatomic",
        "IBOutlet",
        "IBAction",
        "strong",
        "weak",
        "copy",
        "in",
        "out",
        "inout",
        "bycopy",
        "byref",
        "oneway",
        "__strong",
        "__weak",
        "__block",
        "__autoreleasing",
        "@private",
        "@protected",
        "@public",
        "@try",
        "@property",
        "@end",
        "@throw",
        "@catch",
        "@finally",
        "@autoreleasepool",
        "@synthesize",
        "@dynamic",
        "@selector",
        "@optional",
        "@required",
        "@encode",
        "@package",
        "@import",
        "@defs",
        "@compatibility_alias",
        "__bridge",
        "__bridge_transfer",
        "__bridge_retained",
        "__bridge_retain",
        "__covariant",
        "__contravariant",
        "__kindof",
        "_Nonnull",
        "_Nullable",
        "_Null_unspecified",
        "__FUNCTION__",
        "__PRETTY_FUNCTION__",
        "__attribute__",
        "getter",
        "setter",
        "retain",
        "unsafe_unretained",
        "nonnull",
        "nullable",
        "null_unspecified",
        "null_resettable",
        "class",
        "instancetype",
        "NS_DESIGNATED_INITIALIZER",
        "NS_UNAVAILABLE",
        "NS_REQUIRES_SUPER",
        "NS_RETURNS_INNER_POINTER",
        "NS_INLINE",
        "NS_AVAILABLE",
        "NS_DEPRECATED",
        "NS_ENUM",
        "NS_OPTIONS",
        "NS_SWIFT_UNAVAILABLE",
        "NS_ASSUME_NONNULL_BEGIN",
        "NS_ASSUME_NONNULL_END",
        "NS_REFINED_FOR_SWIFT",
        "NS_SWIFT_NAME",
        "NS_SWIFT_NOTHROW",
        "NS_DURING",
        "NS_HANDLER",
        "NS_ENDHANDLER",
        "NS_VALUERETURN",
        "NS_VOIDRETURN"
      ],
      literal: [
        "false",
        "true",
        "FALSE",
        "TRUE",
        "nil",
        "YES",
        "NO",
        "NULL"
      ],
      built_in: [
        "dispatch_once_t",
        "dispatch_queue_t",
        "dispatch_sync",
        "dispatch_async",
        "dispatch_once"
      ],
      type: [
        "int",
        "float",
        "char",
        "unsigned",
        "signed",
        "short",
        "long",
        "double",
        "wchar_t",
        "unichar",
        "void",
        "bool",
        "BOOL",
        "id|0",
        "_Bool"
      ]
    }, c = {
      $pattern: n,
      keyword: [
        "@interface",
        "@class",
        "@protocol",
        "@implementation"
      ]
    };
    return {
      name: "Objective-C",
      aliases: [
        "mm",
        "objc",
        "obj-c",
        "obj-c++",
        "objective-c++"
      ],
      keywords: l,
      illegal: "</",
      contains: [
        r,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.C_NUMBER_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        {
          className: "string",
          variants: [
            {
              begin: '@"',
              end: '"',
              illegal: "\\n",
              contains: [e.BACKSLASH_ESCAPE]
            }
          ]
        },
        {
          className: "meta",
          begin: /#\s*[a-z]+\b/,
          end: /$/,
          keywords: { keyword: "if else elif endif define undef warning error line pragma ifdef ifndef include" },
          contains: [
            {
              begin: /\\\n/,
              relevance: 0
            },
            e.inherit(e.QUOTE_STRING_MODE, { className: "string" }),
            {
              className: "string",
              begin: /<.*?>/,
              end: /$/,
              illegal: "\\n"
            },
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "class",
          begin: "(" + c.keyword.join("|") + ")\\b",
          end: /(\{|$)/,
          excludeEnd: !0,
          keywords: c,
          contains: [e.UNDERSCORE_TITLE_MODE]
        },
        {
          begin: "\\." + e.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    };
  }
  return uf = t, uf;
}
var df, hb;
function Tx() {
  if (hb)
    return df;
  hb = 1;
  function t(e) {
    return {
      name: "OCaml",
      aliases: ["ml"],
      keywords: {
        $pattern: "[a-z_]\\w*!?",
        keyword: "and as assert asr begin class constraint do done downto else end exception external for fun function functor if in include inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method mod module mutable new object of open! open or private rec sig struct then to try type val! val virtual when while with parser value",
        built_in: (
          /* built-in types */
          "array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit in_channel out_channel ref"
        ),
        literal: "true false"
      },
      illegal: /\/\/|>>/,
      contains: [
        {
          className: "literal",
          begin: "\\[(\\|\\|)?\\]|\\(\\)",
          relevance: 0
        },
        e.COMMENT(
          "\\(\\*",
          "\\*\\)",
          { contains: ["self"] }
        ),
        {
          /* type variable */
          className: "symbol",
          begin: "'[A-Za-z_](?!')[\\w']*"
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          className: "type",
          begin: "`[A-Z][\\w']*"
        },
        {
          /* module or constructor */
          className: "type",
          begin: "\\b[A-Z][\\w']*",
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          begin: "[a-z_]\\w*'[\\w']*",
          relevance: 0
        },
        e.inherit(e.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "number",
          begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
          relevance: 0
        },
        {
          begin: /->/
          // relevance booster
        }
      ]
    };
  }
  return df = t, df;
}
var ff, mb;
function Cx() {
  if (mb)
    return ff;
  mb = 1;
  function t(e) {
    const r = {
      className: "keyword",
      begin: "\\$(f[asn]|t|vp[rtd]|children)"
    }, n = {
      className: "literal",
      begin: "false|true|PI|undef"
    }, i = {
      className: "number",
      begin: "\\b\\d+(\\.\\d+)?(e-?\\d+)?",
      // adds 1e5, 1e-10
      relevance: 0
    }, s = e.inherit(e.QUOTE_STRING_MODE, { illegal: null }), o = {
      className: "meta",
      keywords: { keyword: "include use" },
      begin: "include|use <",
      end: ">"
    }, a = {
      className: "params",
      begin: "\\(",
      end: "\\)",
      contains: [
        "self",
        i,
        s,
        r,
        n
      ]
    }, l = {
      begin: "[*!#%]",
      relevance: 0
    }, c = {
      className: "function",
      beginKeywords: "module function",
      end: /=|\{/,
      contains: [
        a,
        e.UNDERSCORE_TITLE_MODE
      ]
    };
    return {
      name: "OpenSCAD",
      aliases: ["scad"],
      keywords: {
        keyword: "function module include use for intersection_for if else \\%",
        literal: "false true PI undef",
        built_in: "circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign"
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        i,
        o,
        s,
        r,
        l,
        c
      ]
    };
  }
  return ff = t, ff;
}
var pf, gb;
function wx() {
  if (gb)
    return pf;
  gb = 1;
  function t(e) {
    const r = {
      $pattern: /\.?\w+/,
      keyword: "abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained"
    }, n = e.COMMENT(
      /\{/,
      /\}/,
      { relevance: 0 }
    ), i = e.COMMENT(
      "\\(\\*",
      "\\*\\)",
      { relevance: 10 }
    ), s = {
      className: "string",
      begin: "'",
      end: "'",
      contains: [{ begin: "''" }]
    }, o = {
      className: "string",
      begin: "(#\\d+)+"
    }, a = {
      beginKeywords: "function constructor destructor procedure method",
      end: "[:;]",
      keywords: "function constructor|10 destructor|10 procedure|10 method|10",
      contains: [
        e.inherit(e.TITLE_MODE, { scope: "title.function" }),
        {
          className: "params",
          begin: "\\(",
          end: "\\)",
          keywords: r,
          contains: [
            s,
            o
          ]
        },
        n,
        i
      ]
    }, l = {
      scope: "punctuation",
      match: /;/,
      relevance: 0
    };
    return {
      name: "Oxygene",
      case_insensitive: !0,
      keywords: r,
      illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
      contains: [
        n,
        i,
        e.C_LINE_COMMENT_MODE,
        s,
        o,
        e.NUMBER_MODE,
        a,
        l
      ]
    };
  }
  return pf = t, pf;
}
var _f, $b;
function Ax() {
  if ($b)
    return _f;
  $b = 1;
  function t(e) {
    const r = e.COMMENT(
      /\{/,
      /\}/,
      { contains: ["self"] }
    );
    return {
      name: "Parser3",
      subLanguage: "xml",
      relevance: 0,
      contains: [
        e.COMMENT("^#", "$"),
        e.COMMENT(
          /\^rem\{/,
          /\}/,
          {
            relevance: 10,
            contains: [r]
          }
        ),
        {
          className: "meta",
          begin: "^@(?:BASE|USE|CLASS|OPTIONS)$",
          relevance: 10
        },
        {
          className: "title",
          begin: "@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$"
        },
        {
          className: "variable",
          begin: /\$\{?[\w\-.:]+\}?/
        },
        {
          className: "keyword",
          begin: /\^[\w\-.:]+/
        },
        {
          className: "number",
          begin: "\\^#[0-9a-fA-F]+"
        },
        e.C_NUMBER_MODE
      ]
    };
  }
  return _f = t, _f;
}
var hf, bb;
function Rx() {
  if (bb)
    return hf;
  bb = 1;
  function t(e) {
    const r = {
      className: "variable",
      begin: /\$[\w\d#@][\w\d_]*/,
      relevance: 0
    }, n = {
      className: "variable",
      begin: /<(?!\/)/,
      end: />/
    };
    return {
      name: "Packet Filter config",
      aliases: ["pf.conf"],
      keywords: {
        $pattern: /[a-z0-9_<>-]+/,
        built_in: (
          /* block match pass are "actions" in pf.conf(5), the rest are
           * lexically similar top-level commands.
           */
          "block match pass load anchor|5 antispoof|10 set table"
        ),
        keyword: "in out log quick on rdomain inet inet6 proto from port os to route allow-opts divert-packet divert-reply divert-to flags group icmp-type icmp6-type label once probability recieved-on rtable prio queue tos tag tagged user keep fragment for os drop af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin source-hash static-port dup-to reply-to route-to parent bandwidth default min max qlimit block-policy debug fingerprints hostid limit loginterface optimization reassemble ruleset-optimization basic none profile skip state-defaults state-policy timeout const counters persist no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy source-track global rule max-src-nodes max-src-states max-src-conn max-src-conn-rate overload flush scrub|5 max-mss min-ttl no-df|10 random-id",
        literal: "all any no-route self urpf-failed egress|5 unknown"
      },
      contains: [
        e.HASH_COMMENT_MODE,
        e.NUMBER_MODE,
        e.QUOTE_STRING_MODE,
        r,
        n
      ]
    };
  }
  return hf = t, hf;
}
var mf, Eb;
function xx() {
  if (Eb)
    return mf;
  Eb = 1;
  function t(e) {
    const r = e.COMMENT("--", "$"), n = "[a-zA-Z_][a-zA-Z_0-9$]*", i = "\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$", s = "<<\\s*" + n + "\\s*>>", o = (
      // https://www.postgresql.org/docs/11/static/sql-keywords-appendix.html
      // https://www.postgresql.org/docs/11/static/sql-commands.html
      // SQL commands (starting words)
      "ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION INDEX PROCEDURE ASSERTION ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS DEFERRABLE RANGE DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED OF NOTHING NONE EXCLUDE ATTRIBUTE USAGE ROUTINES TRUE FALSE NAN INFINITY "
    ), a = (
      // only those not in keywrods already
      "SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS "
    ), l = "ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT OPEN ", c = (
      // https://www.postgresql.org/docs/11/static/datatype.html
      "BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR NAME OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 "
    ), f = c.trim().split(" ").map(function(A) {
      return A.split("|")[0];
    }).join("|"), m = "CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ", b = "FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ", C = (
      // exceptions https://www.postgresql.org/docs/current/static/errcodes-appendix.html
      "SQLSTATE SQLERRM|10 SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED INDEX_CORRUPTED "
    ), z = /* https://www.postgresql.org/docs/11/static/functions-aggregate.html */ "ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP PERCENTILE_CONT PERCENTILE_DISC ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE NUM_NONNULLS NUM_NULLS ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT TRUNC WIDTH_BUCKET RANDOM SETSEED ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR TO_ASCII TO_HEX TRANSLATE OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 TIMEOFDAY TRANSACTION_TIMESTAMP|10 ENUM_FIRST ENUM_LAST ENUM_RANGE AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY INET_MERGE MACADDR8_SET7BIT ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA CURSOR_TO_XML CURSOR_TO_XMLSCHEMA SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA XMLATTRIBUTES TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY CURRVAL LASTVAL NEXTVAL SETVAL COALESCE NULLIF GREATEST LEAST ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY STRING_TO_ARRAY UNNEST ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE GENERATE_SERIES GENERATE_SUBSCRIPTS CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE GIN_CLEAN_PENDING_LIST SUPPRESS_REDUNDANT_UPDATES_TRIGGER LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE GROUPING CAST ".trim().split(" ").map(function(A) {
      return A.split("|")[0];
    }).join("|");
    return {
      name: "PostgreSQL",
      aliases: [
        "postgres",
        "postgresql"
      ],
      supersetOf: "sql",
      case_insensitive: !0,
      keywords: {
        keyword: o + l + a,
        built_in: m + b + C
      },
      // Forbid some cunstructs from other languages to improve autodetect. In fact
      // "[a-z]:" is legal (as part of array slice), but improbabal.
      illegal: /:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
      contains: [
        // special handling of some words, which are reserved only in some contexts
        {
          className: "keyword",
          variants: [
            { begin: /\bTEXT\s*SEARCH\b/ },
            { begin: /\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/ },
            { begin: /\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/ },
            { begin: /\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/ },
            { begin: /\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/ },
            { begin: /\bNULLS\s+(FIRST|LAST)\b/ },
            { begin: /\bEVENT\s+TRIGGER\b/ },
            { begin: /\b(MAPPING|OR)\s+REPLACE\b/ },
            { begin: /\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/ },
            { begin: /\b(SHARE|EXCLUSIVE)\s+MODE\b/ },
            { begin: /\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/ },
            { begin: /\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/ },
            { begin: /\bPRESERVE\s+ROWS\b/ },
            { begin: /\bDISCARD\s+PLANS\b/ },
            { begin: /\bREFERENCING\s+(OLD|NEW)\b/ },
            { begin: /\bSKIP\s+LOCKED\b/ },
            { begin: /\bGROUPING\s+SETS\b/ },
            { begin: /\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/ },
            { begin: /\b(WITH|WITHOUT)\s+HOLD\b/ },
            { begin: /\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/ },
            { begin: /\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/ },
            { begin: /\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/ },
            { begin: /\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/ },
            { begin: /\bIS\s+(NOT\s+)?UNKNOWN\b/ },
            { begin: /\bSECURITY\s+LABEL\b/ },
            { begin: /\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/ },
            { begin: /\bWITH\s+(NO\s+)?DATA\b/ },
            { begin: /\b(FOREIGN|SET)\s+DATA\b/ },
            { begin: /\bSET\s+(CATALOG|CONSTRAINTS)\b/ },
            { begin: /\b(WITH|FOR)\s+ORDINALITY\b/ },
            { begin: /\bIS\s+(NOT\s+)?DOCUMENT\b/ },
            { begin: /\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/ },
            { begin: /\b(STRIP|PRESERVE)\s+WHITESPACE\b/ },
            { begin: /\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/ },
            { begin: /\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/ },
            { begin: /\bAT\s+TIME\s+ZONE\b/ },
            { begin: /\bGRANTED\s+BY\b/ },
            { begin: /\bRETURN\s+(QUERY|NEXT)\b/ },
            { begin: /\b(ATTACH|DETACH)\s+PARTITION\b/ },
            { begin: /\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/ },
            { begin: /\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/ },
            { begin: /\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/ }
          ]
        },
        // functions named as keywords, followed by '('
        {
          begin: /\b(FORMAT|FAMILY|VERSION)\s*\(/
          // keywords: { built_in: 'FORMAT FAMILY VERSION' }
        },
        // INCLUDE ( ... ) in index_parameters in CREATE TABLE
        {
          begin: /\bINCLUDE\s*\(/,
          keywords: "INCLUDE"
        },
        // not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)
        { begin: /\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/ },
        // disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE
        // and in PL/pgSQL RAISE ... USING
        { begin: /\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/ },
        // PG_smth; HAS_some_PRIVILEGE
        {
          // className: 'built_in',
          begin: /\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,
          relevance: 10
        },
        // extract
        {
          begin: /\bEXTRACT\s*\(/,
          end: /\bFROM\b/,
          returnEnd: !0,
          keywords: {
            // built_in: 'EXTRACT',
            type: "CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR TIMEZONE_MINUTE WEEK YEAR"
          }
        },
        // xmlelement, xmlpi - special NAME
        {
          begin: /\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,
          keywords: {
            // built_in: 'XMLELEMENT XMLPI',
            keyword: "NAME"
          }
        },
        // xmlparse, xmlserialize
        {
          begin: /\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,
          keywords: {
            // built_in: 'XMLPARSE XMLSERIALIZE',
            keyword: "DOCUMENT CONTENT"
          }
        },
        // Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and
        // nearest following numeric constant. Without with trick we find a lot of "keywords"
        // in 'avrasm' autodetection test...
        {
          beginKeywords: "CACHE INCREMENT MAXVALUE MINVALUE",
          end: e.C_NUMBER_RE,
          returnEnd: !0,
          keywords: "BY CACHE INCREMENT MAXVALUE MINVALUE"
        },
        // WITH|WITHOUT TIME ZONE as part of datatype
        {
          className: "type",
          begin: /\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/
        },
        // INTERVAL optional fields
        {
          className: "type",
          begin: /\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/
        },
        // Pseudo-types which allowed only as return type
        {
          begin: /\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
          keywords: {
            keyword: "RETURNS",
            type: "LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER"
          }
        },
        // Known functions - only when followed by '('
        {
          begin: "\\b(" + z + ")\\s*\\("
          // keywords: { built_in: FUNCTIONS }
        },
        // Types
        {
          begin: "\\.(" + f + ")\\b"
          // prevent highlight as type, say, 'oid' in 'pgclass.oid'
        },
        {
          begin: "\\b(" + f + ")\\s+PATH\\b",
          // in XMLTABLE
          keywords: {
            keyword: "PATH",
            // hopefully no one would use PATH type in XMLTABLE...
            type: c.replace("PATH ", "")
          }
        },
        {
          className: "type",
          begin: "\\b(" + f + ")\\b"
        },
        // Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS
        {
          className: "string",
          begin: "'",
          end: "'",
          contains: [{ begin: "''" }]
        },
        {
          className: "string",
          begin: "(e|E|u&|U&)'",
          end: "'",
          contains: [{ begin: "\\\\." }],
          relevance: 10
        },
        e.END_SAME_AS_BEGIN({
          begin: i,
          end: i,
          contains: [
            {
              // actually we want them all except SQL; listed are those with known implementations
              // and XML + JSON just in case
              subLanguage: [
                "pgsql",
                "perl",
                "python",
                "tcl",
                "r",
                "lua",
                "java",
                "php",
                "ruby",
                "bash",
                "scheme",
                "xml",
                "json"
              ],
              endsWithParent: !0
            }
          ]
        }),
        // identifiers in quotes
        {
          begin: '"',
          end: '"',
          contains: [{ begin: '""' }]
        },
        // numbers
        e.C_NUMBER_MODE,
        // comments
        e.C_BLOCK_COMMENT_MODE,
        r,
        // PL/pgSQL staff
        // %ROWTYPE, %TYPE, $n
        {
          className: "meta",
          variants: [
            {
              // %TYPE, %ROWTYPE
              begin: "%(ROW)?TYPE",
              relevance: 10
            },
            {
              // $n
              begin: "\\$\\d+"
            },
            {
              // #compiler option
              begin: "^#\\w",
              end: "$"
            }
          ]
        },
        // <<labeles>>
        {
          className: "symbol",
          begin: s,
          relevance: 10
        }
      ]
    };
  }
  return mf = t, mf;
}
var gf, vb;
function Nx() {
  if (vb)
    return gf;
  vb = 1;
  function t(e) {
    const r = e.regex, n = /(?![A-Za-z0-9])(?![$])/, i = r.concat(
      /[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,
      n
    ), s = r.concat(
      /(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,
      n
    ), o = {
      scope: "variable",
      match: "\\$+" + i
    }, a = {
      scope: "meta",
      variants: [
        { begin: /<\?php/, relevance: 10 },
        // boost for obvious PHP
        { begin: /<\?=/ },
        // less relevant per PSR-1 which says not to use short-tags
        { begin: /<\?/, relevance: 0.1 },
        { begin: /\?>/ }
        // end php tag
      ]
    }, l = {
      scope: "subst",
      variants: [
        { begin: /\$\w+/ },
        {
          begin: /\{\$/,
          end: /\}/
        }
      ]
    }, c = e.inherit(e.APOS_STRING_MODE, { illegal: null }), f = e.inherit(e.QUOTE_STRING_MODE, {
      illegal: null,
      contains: e.QUOTE_STRING_MODE.contains.concat(l)
    }), m = {
      begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
      end: /[ \t]*(\w+)\b/,
      contains: e.QUOTE_STRING_MODE.contains.concat(l),
      "on:begin": (F, ne) => {
        ne.data._beginMatch = F[1] || F[2];
      },
      "on:end": (F, ne) => {
        ne.data._beginMatch !== F[1] && ne.ignoreMatch();
      }
    }, b = e.END_SAME_AS_BEGIN({
      begin: /<<<[ \t]*'(\w+)'\n/,
      end: /[ \t]*(\w+)\b/
    }), C = `[ 	
]`, N = {
      scope: "string",
      variants: [
        f,
        c,
        m,
        b
      ]
    }, z = {
      scope: "number",
      variants: [
        { begin: "\\b0[bB][01]+(?:_[01]+)*\\b" },
        // Binary w/ underscore support
        { begin: "\\b0[oO][0-7]+(?:_[0-7]+)*\\b" },
        // Octals w/ underscore support
        { begin: "\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b" },
        // Hex w/ underscore support
        // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
        { begin: "(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?" }
      ],
      relevance: 0
    }, A = [
      "false",
      "null",
      "true"
    ], Q = [
      // Magic constants:
      // <https://www.php.net/manual/en/language.constants.predefined.php>
      "__CLASS__",
      "__DIR__",
      "__FILE__",
      "__FUNCTION__",
      "__COMPILER_HALT_OFFSET__",
      "__LINE__",
      "__METHOD__",
      "__NAMESPACE__",
      "__TRAIT__",
      // Function that look like language construct or language construct that look like function:
      // List of keywords that may not require parenthesis
      "die",
      "echo",
      "exit",
      "include",
      "include_once",
      "print",
      "require",
      "require_once",
      // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
      // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
      // Other keywords:
      // <https://www.php.net/manual/en/reserved.php>
      // <https://www.php.net/manual/en/language.types.type-juggling.php>
      "array",
      "abstract",
      "and",
      "as",
      "binary",
      "bool",
      "boolean",
      "break",
      "callable",
      "case",
      "catch",
      "class",
      "clone",
      "const",
      "continue",
      "declare",
      "default",
      "do",
      "double",
      "else",
      "elseif",
      "empty",
      "enddeclare",
      "endfor",
      "endforeach",
      "endif",
      "endswitch",
      "endwhile",
      "enum",
      "eval",
      "extends",
      "final",
      "finally",
      "float",
      "for",
      "foreach",
      "from",
      "global",
      "goto",
      "if",
      "implements",
      "instanceof",
      "insteadof",
      "int",
      "integer",
      "interface",
      "isset",
      "iterable",
      "list",
      "match|0",
      "mixed",
      "new",
      "never",
      "object",
      "or",
      "private",
      "protected",
      "public",
      "readonly",
      "real",
      "return",
      "string",
      "switch",
      "throw",
      "trait",
      "try",
      "unset",
      "use",
      "var",
      "void",
      "while",
      "xor",
      "yield"
    ], Te = [
      // Standard PHP library:
      // <https://www.php.net/manual/en/book.spl.php>
      "Error|0",
      "AppendIterator",
      "ArgumentCountError",
      "ArithmeticError",
      "ArrayIterator",
      "ArrayObject",
      "AssertionError",
      "BadFunctionCallException",
      "BadMethodCallException",
      "CachingIterator",
      "CallbackFilterIterator",
      "CompileError",
      "Countable",
      "DirectoryIterator",
      "DivisionByZeroError",
      "DomainException",
      "EmptyIterator",
      "ErrorException",
      "Exception",
      "FilesystemIterator",
      "FilterIterator",
      "GlobIterator",
      "InfiniteIterator",
      "InvalidArgumentException",
      "IteratorIterator",
      "LengthException",
      "LimitIterator",
      "LogicException",
      "MultipleIterator",
      "NoRewindIterator",
      "OutOfBoundsException",
      "OutOfRangeException",
      "OuterIterator",
      "OverflowException",
      "ParentIterator",
      "ParseError",
      "RangeException",
      "RecursiveArrayIterator",
      "RecursiveCachingIterator",
      "RecursiveCallbackFilterIterator",
      "RecursiveDirectoryIterator",
      "RecursiveFilterIterator",
      "RecursiveIterator",
      "RecursiveIteratorIterator",
      "RecursiveRegexIterator",
      "RecursiveTreeIterator",
      "RegexIterator",
      "RuntimeException",
      "SeekableIterator",
      "SplDoublyLinkedList",
      "SplFileInfo",
      "SplFileObject",
      "SplFixedArray",
      "SplHeap",
      "SplMaxHeap",
      "SplMinHeap",
      "SplObjectStorage",
      "SplObserver",
      "SplPriorityQueue",
      "SplQueue",
      "SplStack",
      "SplSubject",
      "SplTempFileObject",
      "TypeError",
      "UnderflowException",
      "UnexpectedValueException",
      "UnhandledMatchError",
      // Reserved interfaces:
      // <https://www.php.net/manual/en/reserved.interfaces.php>
      "ArrayAccess",
      "BackedEnum",
      "Closure",
      "Fiber",
      "Generator",
      "Iterator",
      "IteratorAggregate",
      "Serializable",
      "Stringable",
      "Throwable",
      "Traversable",
      "UnitEnum",
      "WeakReference",
      "WeakMap",
      // Reserved classes:
      // <https://www.php.net/manual/en/reserved.classes.php>
      "Directory",
      "__PHP_Incomplete_Class",
      "parent",
      "php_user_filter",
      "self",
      "static",
      "stdClass"
    ], ge = {
      keyword: Q,
      literal: ((F) => {
        const ne = [];
        return F.forEach((H) => {
          ne.push(H), H.toLowerCase() === H ? ne.push(H.toUpperCase()) : ne.push(H.toLowerCase());
        }), ne;
      })(A),
      built_in: Te
    }, Y = (F) => F.map((ne) => ne.replace(/\|\d+$/, "")), fe = { variants: [
      {
        match: [
          /new/,
          r.concat(C, "+"),
          // to prevent built ins from being confused as the class constructor call
          r.concat("(?!", Y(Te).join("\\b|"), "\\b)"),
          s
        ],
        scope: {
          1: "keyword",
          4: "title.class"
        }
      }
    ] }, ae = r.concat(i, "\\b(?!\\()"), Re = { variants: [
      {
        match: [
          r.concat(
            /::/,
            r.lookahead(/(?!class\b)/)
          ),
          ae
        ],
        scope: { 2: "variable.constant" }
      },
      {
        match: [
          /::/,
          /class/
        ],
        scope: { 2: "variable.language" }
      },
      {
        match: [
          s,
          r.concat(
            /::/,
            r.lookahead(/(?!class\b)/)
          ),
          ae
        ],
        scope: {
          1: "title.class",
          3: "variable.constant"
        }
      },
      {
        match: [
          s,
          r.concat(
            "::",
            r.lookahead(/(?!class\b)/)
          )
        ],
        scope: { 1: "title.class" }
      },
      {
        match: [
          s,
          /::/,
          /class/
        ],
        scope: {
          1: "title.class",
          3: "variable.language"
        }
      }
    ] }, pe = {
      scope: "attr",
      match: r.concat(i, r.lookahead(":"), r.lookahead(/(?!::)/))
    }, Ce = {
      relevance: 0,
      begin: /\(/,
      end: /\)/,
      keywords: ge,
      contains: [
        pe,
        o,
        Re,
        e.C_BLOCK_COMMENT_MODE,
        N,
        z,
        fe
      ]
    }, J = {
      relevance: 0,
      match: [
        /\b/,
        // to prevent keywords from being confused as the function title
        r.concat("(?!fn\\b|function\\b|", Y(Q).join("\\b|"), "|", Y(Te).join("\\b|"), "\\b)"),
        i,
        r.concat(C, "*"),
        r.lookahead(/(?=\()/)
      ],
      scope: { 3: "title.function.invoke" },
      contains: [Ce]
    };
    Ce.contains.push(J);
    const R = [
      pe,
      Re,
      e.C_BLOCK_COMMENT_MODE,
      N,
      z,
      fe
    ], ve = {
      begin: r.concat(/#\[\s*/, s),
      beginScope: "meta",
      end: /]/,
      endScope: "meta",
      keywords: {
        literal: A,
        keyword: [
          "new",
          "array"
        ]
      },
      contains: [
        {
          begin: /\[/,
          end: /]/,
          keywords: {
            literal: A,
            keyword: [
              "new",
              "array"
            ]
          },
          contains: [
            "self",
            ...R
          ]
        },
        ...R,
        {
          scope: "meta",
          match: s
        }
      ]
    };
    return {
      case_insensitive: !1,
      keywords: ge,
      contains: [
        ve,
        e.HASH_COMMENT_MODE,
        e.COMMENT("//", "$"),
        e.COMMENT(
          "/\\*",
          "\\*/",
          { contains: [
            {
              scope: "doctag",
              match: "@[A-Za-z]+"
            }
          ] }
        ),
        {
          match: /__halt_compiler\(\);/,
          keywords: "__halt_compiler",
          starts: {
            scope: "comment",
            end: e.MATCH_NOTHING_RE,
            contains: [
              {
                match: /\?>/,
                scope: "meta",
                endsParent: !0
              }
            ]
          }
        },
        a,
        {
          scope: "variable.language",
          match: /\$this\b/
        },
        o,
        J,
        Re,
        {
          match: [
            /const/,
            /\s/,
            i
          ],
          scope: {
            1: "keyword",
            3: "variable.constant"
          }
        },
        fe,
        {
          scope: "function",
          relevance: 0,
          beginKeywords: "fn function",
          end: /[;{]/,
          excludeEnd: !0,
          illegal: "[$%\\[]",
          contains: [
            { beginKeywords: "use" },
            e.UNDERSCORE_TITLE_MODE,
            {
              begin: "=>",
              // No markup, just a relevance booster
              endsParent: !0
            },
            {
              scope: "params",
              begin: "\\(",
              end: "\\)",
              excludeBegin: !0,
              excludeEnd: !0,
              keywords: ge,
              contains: [
                "self",
                o,
                Re,
                e.C_BLOCK_COMMENT_MODE,
                N,
                z
              ]
            }
          ]
        },
        {
          scope: "class",
          variants: [
            {
              beginKeywords: "enum",
              illegal: /[($"]/
            },
            {
              beginKeywords: "class interface trait",
              illegal: /[:($"]/
            }
          ],
          relevance: 0,
          end: /\{/,
          excludeEnd: !0,
          contains: [
            { beginKeywords: "extends implements" },
            e.UNDERSCORE_TITLE_MODE
          ]
        },
        // both use and namespace still use "old style" rules (vs multi-match)
        // because the namespace name can include `\` and we still want each
        // element to be treated as its own *individual* title
        {
          beginKeywords: "namespace",
          relevance: 0,
          end: ";",
          illegal: /[.']/,
          contains: [e.inherit(e.UNDERSCORE_TITLE_MODE, { scope: "title.class" })]
        },
        {
          beginKeywords: "use",
          relevance: 0,
          end: ";",
          contains: [
            // TODO: title.function vs title.class
            {
              match: /\b(as|const|function)\b/,
              scope: "keyword"
            },
            // TODO: could be title.class or title.function
            e.UNDERSCORE_TITLE_MODE
          ]
        },
        N,
        z
      ]
    };
  }
  return gf = t, gf;
}
var $f, Sb;
function kx() {
  if (Sb)
    return $f;
  Sb = 1;
  function t(e) {
    return {
      name: "PHP template",
      subLanguage: "xml",
      contains: [
        {
          begin: /<\?(php|=)?/,
          end: /\?>/,
          subLanguage: "php",
          contains: [
            // We don't want the php closing tag ?> to close the PHP block when
            // inside any of the following blocks:
            {
              begin: "/\\*",
              end: "\\*/",
              skip: !0
            },
            {
              begin: 'b"',
              end: '"',
              skip: !0
            },
            {
              begin: "b'",
              end: "'",
              skip: !0
            },
            e.inherit(e.APOS_STRING_MODE, {
              illegal: null,
              className: null,
              contains: null,
              skip: !0
            }),
            e.inherit(e.QUOTE_STRING_MODE, {
              illegal: null,
              className: null,
              contains: null,
              skip: !0
            })
          ]
        }
      ]
    };
  }
  return $f = t, $f;
}
var bf, yb;
function Ix() {
  if (yb)
    return bf;
  yb = 1;
  function t(e) {
    return {
      name: "Plain text",
      aliases: [
        "text",
        "txt"
      ],
      disableAutodetect: !0
    };
  }
  return bf = t, bf;
}
var Ef, Tb;
function Ox() {
  if (Tb)
    return Ef;
  Tb = 1;
  function t(e) {
    const r = {
      keyword: "actor addressof and as be break class compile_error compile_intrinsic consume continue delegate digestof do else elseif embed end error for fun if ifdef in interface is isnt lambda let match new not object or primitive recover repeat return struct then trait try type until use var where while with xor",
      meta: "iso val tag trn box ref",
      literal: "this false true"
    }, n = {
      className: "string",
      begin: '"""',
      end: '"""',
      relevance: 10
    }, i = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [e.BACKSLASH_ESCAPE]
    }, s = {
      className: "string",
      begin: "'",
      end: "'",
      contains: [e.BACKSLASH_ESCAPE],
      relevance: 0
    }, o = {
      className: "type",
      begin: "\\b_?[A-Z][\\w]*",
      relevance: 0
    }, a = {
      begin: e.IDENT_RE + "'",
      relevance: 0
    };
    return {
      name: "Pony",
      keywords: r,
      contains: [
        o,
        n,
        i,
        s,
        a,
        {
          className: "number",
          begin: "(-?)(\\b0[xX][a-fA-F0-9]+|\\b0[bB][01]+|(\\b\\d+(_\\d+)?(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",
          relevance: 0
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return Ef = t, Ef;
}
var vf, Cb;
function Dx() {
  if (Cb)
    return vf;
  Cb = 1;
  function t(e) {
    const r = [
      "string",
      "char",
      "byte",
      "int",
      "long",
      "bool",
      "decimal",
      "single",
      "double",
      "DateTime",
      "xml",
      "array",
      "hashtable",
      "void"
    ], n = "Add|Clear|Close|Copy|Enter|Exit|Find|Format|Get|Hide|Join|Lock|Move|New|Open|Optimize|Pop|Push|Redo|Remove|Rename|Reset|Resize|Search|Select|Set|Show|Skip|Split|Step|Switch|Undo|Unlock|Watch|Backup|Checkpoint|Compare|Compress|Convert|ConvertFrom|ConvertTo|Dismount|Edit|Expand|Export|Group|Import|Initialize|Limit|Merge|Mount|Out|Publish|Restore|Save|Sync|Unpublish|Update|Approve|Assert|Build|Complete|Confirm|Deny|Deploy|Disable|Enable|Install|Invoke|Register|Request|Restart|Resume|Start|Stop|Submit|Suspend|Uninstall|Unregister|Wait|Debug|Measure|Ping|Repair|Resolve|Test|Trace|Connect|Disconnect|Read|Receive|Send|Write|Block|Grant|Protect|Revoke|Unblock|Unprotect|Use|ForEach|Sort|Tee|Where", i = "-and|-as|-band|-bnot|-bor|-bxor|-casesensitive|-ccontains|-ceq|-cge|-cgt|-cle|-clike|-clt|-cmatch|-cne|-cnotcontains|-cnotlike|-cnotmatch|-contains|-creplace|-csplit|-eq|-exact|-f|-file|-ge|-gt|-icontains|-ieq|-ige|-igt|-ile|-ilike|-ilt|-imatch|-in|-ine|-inotcontains|-inotlike|-inotmatch|-ireplace|-is|-isnot|-isplit|-join|-le|-like|-lt|-match|-ne|-not|-notcontains|-notin|-notlike|-notmatch|-or|-regex|-replace|-shl|-shr|-split|-wildcard|-xor", s = {
      $pattern: /-?[A-z\.\-]+\b/,
      keyword: "if else foreach return do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch hidden static parameter",
      // "echo" relevance has been set to 0 to avoid auto-detect conflicts with shell transcripts
      built_in: "ac asnp cat cd CFS chdir clc clear clhy cli clp cls clv cnsn compare copy cp cpi cpp curl cvpa dbp del diff dir dnsn ebp echo|0 epal epcsv epsn erase etsn exsn fc fhx fl ft fw gal gbp gc gcb gci gcm gcs gdr gerr ghy gi gin gjb gl gm gmo gp gps gpv group gsn gsnp gsv gtz gu gv gwmi h history icm iex ihy ii ipal ipcsv ipmo ipsn irm ise iwmi iwr kill lp ls man md measure mi mount move mp mv nal ndr ni nmo npssc nsn nv ogv oh popd ps pushd pwd r rbp rcjb rcsn rd rdr ren ri rjb rm rmdir rmo rni rnp rp rsn rsnp rujb rv rvpa rwmi sajb sal saps sasv sbp sc scb select set shcm si sl sleep sls sort sp spjb spps spsv start stz sujb sv swmi tee trcm type wget where wjb write"
      // TODO: 'validate[A-Z]+' can't work in keywords
    }, o = /\w[\w\d]*((-)[\w\d]+)*/, a = {
      begin: "`[\\s\\S]",
      relevance: 0
    }, l = {
      className: "variable",
      variants: [
        { begin: /\$\B/ },
        {
          className: "keyword",
          begin: /\$this/
        },
        { begin: /\$[\w\d][\w\d_:]*/ }
      ]
    }, c = {
      className: "literal",
      begin: /\$(null|true|false)\b/
    }, f = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /@"/,
          end: /^"@/
        }
      ],
      contains: [
        a,
        l,
        {
          className: "variable",
          begin: /\$[A-z]/,
          end: /[^A-z]/
        }
      ]
    }, m = {
      className: "string",
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /@'/,
          end: /^'@/
        }
      ]
    }, b = {
      className: "doctag",
      variants: [
        /* no paramater help tags */
        { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
        /* one parameter help tags */
        { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
      ]
    }, C = e.inherit(
      e.COMMENT(null, null),
      {
        variants: [
          /* single-line comment */
          {
            begin: /#/,
            end: /$/
          },
          /* multi-line comment */
          {
            begin: /<#/,
            end: /#>/
          }
        ],
        contains: [b]
      }
    ), N = {
      className: "built_in",
      variants: [{ begin: "(".concat(n, ")+(-)[\\w\\d]+") }]
    }, z = {
      className: "class",
      beginKeywords: "class enum",
      end: /\s*[{]/,
      excludeEnd: !0,
      relevance: 0,
      contains: [e.TITLE_MODE]
    }, A = {
      className: "function",
      begin: /function\s+/,
      end: /\s*\{|$/,
      excludeEnd: !0,
      returnBegin: !0,
      relevance: 0,
      contains: [
        {
          begin: "function",
          relevance: 0,
          className: "keyword"
        },
        {
          className: "title",
          begin: o,
          relevance: 0
        },
        {
          begin: /\(/,
          end: /\)/,
          className: "params",
          relevance: 0,
          contains: [l]
        }
        // CMDLETS
      ]
    }, Q = {
      begin: /using\s/,
      end: /$/,
      returnBegin: !0,
      contains: [
        f,
        m,
        {
          className: "keyword",
          begin: /(using|assembly|command|module|namespace|type)/
        }
      ]
    }, Te = { variants: [
      // PS literals are pretty verbose so it's a good idea to accent them a bit.
      {
        className: "operator",
        begin: "(".concat(i, ")\\b")
      },
      {
        className: "literal",
        begin: /(-){1,2}[\w\d-]+/,
        relevance: 0
      }
    ] }, ce = {
      className: "selector-tag",
      begin: /@\B/,
      relevance: 0
    }, ge = {
      className: "function",
      begin: /\[.*\]\s*[\w]+[ ]??\(/,
      end: /$/,
      returnBegin: !0,
      relevance: 0,
      contains: [
        {
          className: "keyword",
          begin: "(".concat(
            s.keyword.toString().replace(
              /\s/g,
              "|"
            ),
            ")\\b"
          ),
          endsParent: !0,
          relevance: 0
        },
        e.inherit(e.TITLE_MODE, { endsParent: !0 })
      ]
    }, Y = [
      // STATIC_MEMBER,
      ge,
      C,
      a,
      e.NUMBER_MODE,
      f,
      m,
      // PS_NEW_OBJECT_TYPE,
      N,
      l,
      c,
      ce
    ], fe = {
      begin: /\[/,
      end: /\]/,
      excludeBegin: !0,
      excludeEnd: !0,
      relevance: 0,
      contains: [].concat(
        "self",
        Y,
        {
          begin: "(" + r.join("|") + ")",
          className: "built_in",
          relevance: 0
        },
        {
          className: "type",
          begin: /[\.\w\d]+/,
          relevance: 0
        }
      )
    };
    return ge.contains.unshift(fe), {
      name: "PowerShell",
      aliases: [
        "pwsh",
        "ps",
        "ps1"
      ],
      case_insensitive: !0,
      keywords: s,
      contains: Y.concat(
        z,
        A,
        Q,
        Te,
        fe
      )
    };
  }
  return vf = t, vf;
}
var Sf, wb;
function Mx() {
  if (wb)
    return Sf;
  wb = 1;
  function t(e) {
    const r = e.regex, n = [
      "displayHeight",
      "displayWidth",
      "mouseY",
      "mouseX",
      "mousePressed",
      "pmouseX",
      "pmouseY",
      "key",
      "keyCode",
      "pixels",
      "focused",
      "frameCount",
      "frameRate",
      "height",
      "width",
      "size",
      "createGraphics",
      "beginDraw",
      "createShape",
      "loadShape",
      "PShape",
      "arc",
      "ellipse",
      "line",
      "point",
      "quad",
      "rect",
      "triangle",
      "bezier",
      "bezierDetail",
      "bezierPoint",
      "bezierTangent",
      "curve",
      "curveDetail",
      "curvePoint",
      "curveTangent",
      "curveTightness",
      "shape",
      "shapeMode",
      "beginContour",
      "beginShape",
      "bezierVertex",
      "curveVertex",
      "endContour",
      "endShape",
      "quadraticVertex",
      "vertex",
      "ellipseMode",
      "noSmooth",
      "rectMode",
      "smooth",
      "strokeCap",
      "strokeJoin",
      "strokeWeight",
      "mouseClicked",
      "mouseDragged",
      "mouseMoved",
      "mousePressed",
      "mouseReleased",
      "mouseWheel",
      "keyPressed",
      "keyPressedkeyReleased",
      "keyTyped",
      "print",
      "println",
      "save",
      "saveFrame",
      "day",
      "hour",
      "millis",
      "minute",
      "month",
      "second",
      "year",
      "background",
      "clear",
      "colorMode",
      "fill",
      "noFill",
      "noStroke",
      "stroke",
      "alpha",
      "blue",
      "brightness",
      "color",
      "green",
      "hue",
      "lerpColor",
      "red",
      "saturation",
      "modelX",
      "modelY",
      "modelZ",
      "screenX",
      "screenY",
      "screenZ",
      "ambient",
      "emissive",
      "shininess",
      "specular",
      "add",
      "createImage",
      "beginCamera",
      "camera",
      "endCamera",
      "frustum",
      "ortho",
      "perspective",
      "printCamera",
      "printProjection",
      "cursor",
      "frameRate",
      "noCursor",
      "exit",
      "loop",
      "noLoop",
      "popStyle",
      "pushStyle",
      "redraw",
      "binary",
      "boolean",
      "byte",
      "char",
      "float",
      "hex",
      "int",
      "str",
      "unbinary",
      "unhex",
      "join",
      "match",
      "matchAll",
      "nf",
      "nfc",
      "nfp",
      "nfs",
      "split",
      "splitTokens",
      "trim",
      "append",
      "arrayCopy",
      "concat",
      "expand",
      "reverse",
      "shorten",
      "sort",
      "splice",
      "subset",
      "box",
      "sphere",
      "sphereDetail",
      "createInput",
      "createReader",
      "loadBytes",
      "loadJSONArray",
      "loadJSONObject",
      "loadStrings",
      "loadTable",
      "loadXML",
      "open",
      "parseXML",
      "saveTable",
      "selectFolder",
      "selectInput",
      "beginRaw",
      "beginRecord",
      "createOutput",
      "createWriter",
      "endRaw",
      "endRecord",
      "PrintWritersaveBytes",
      "saveJSONArray",
      "saveJSONObject",
      "saveStream",
      "saveStrings",
      "saveXML",
      "selectOutput",
      "popMatrix",
      "printMatrix",
      "pushMatrix",
      "resetMatrix",
      "rotate",
      "rotateX",
      "rotateY",
      "rotateZ",
      "scale",
      "shearX",
      "shearY",
      "translate",
      "ambientLight",
      "directionalLight",
      "lightFalloff",
      "lights",
      "lightSpecular",
      "noLights",
      "normal",
      "pointLight",
      "spotLight",
      "image",
      "imageMode",
      "loadImage",
      "noTint",
      "requestImage",
      "tint",
      "texture",
      "textureMode",
      "textureWrap",
      "blend",
      "copy",
      "filter",
      "get",
      "loadPixels",
      "set",
      "updatePixels",
      "blendMode",
      "loadShader",
      "PShaderresetShader",
      "shader",
      "createFont",
      "loadFont",
      "text",
      "textFont",
      "textAlign",
      "textLeading",
      "textMode",
      "textSize",
      "textWidth",
      "textAscent",
      "textDescent",
      "abs",
      "ceil",
      "constrain",
      "dist",
      "exp",
      "floor",
      "lerp",
      "log",
      "mag",
      "map",
      "max",
      "min",
      "norm",
      "pow",
      "round",
      "sq",
      "sqrt",
      "acos",
      "asin",
      "atan",
      "atan2",
      "cos",
      "degrees",
      "radians",
      "sin",
      "tan",
      "noise",
      "noiseDetail",
      "noiseSeed",
      "random",
      "randomGaussian",
      "randomSeed"
    ], i = e.IDENT_RE, s = { variants: [
      {
        match: r.concat(r.either(...n), r.lookahead(/\s*\(/)),
        className: "built_in"
      },
      {
        relevance: 0,
        match: r.concat(
          /\b(?!for|if|while)/,
          i,
          r.lookahead(/\s*\(/)
        ),
        className: "title.function"
      }
    ] }, o = {
      match: [
        /new\s+/,
        i
      ],
      className: {
        1: "keyword",
        2: "class.title"
      }
    }, a = {
      relevance: 0,
      match: [
        /\./,
        i
      ],
      className: { 2: "property" }
    }, l = {
      variants: [
        { match: [
          /class/,
          /\s+/,
          i,
          /\s+/,
          /extends/,
          /\s+/,
          i
        ] },
        { match: [
          /class/,
          /\s+/,
          i
        ] }
      ],
      className: {
        1: "keyword",
        3: "title.class",
        5: "keyword",
        7: "title.class.inherited"
      }
    }, c = [
      "boolean",
      "byte",
      "char",
      "color",
      "double",
      "float",
      "int",
      "long",
      "short"
    ], f = [
      "BufferedReader",
      "PVector",
      "PFont",
      "PImage",
      "PGraphics",
      "HashMap",
      "String",
      "Array",
      "FloatDict",
      "ArrayList",
      "FloatList",
      "IntDict",
      "IntList",
      "JSONArray",
      "JSONObject",
      "Object",
      "StringDict",
      "StringList",
      "Table",
      "TableRow",
      "XML"
    ];
    return {
      name: "Processing",
      aliases: ["pde"],
      keywords: {
        keyword: [...[
          "abstract",
          "assert",
          "break",
          "case",
          "catch",
          "const",
          "continue",
          "default",
          "else",
          "enum",
          "final",
          "finally",
          "for",
          "if",
          "import",
          "instanceof",
          "long",
          "native",
          "new",
          "package",
          "private",
          "private",
          "protected",
          "protected",
          "public",
          "public",
          "return",
          "static",
          "strictfp",
          "switch",
          "synchronized",
          "throw",
          "throws",
          "transient",
          "try",
          "void",
          "volatile",
          "while"
        ]],
        literal: "P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI null true false",
        title: "setup draw",
        variable: "super this",
        built_in: [
          ...n,
          ...f
        ],
        type: c
      },
      contains: [
        l,
        o,
        s,
        a,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE
      ]
    };
  }
  return Sf = t, Sf;
}
var yf, Ab;
function Lx() {
  if (Ab)
    return yf;
  Ab = 1;
  function t(e) {
    return {
      name: "Python profiler",
      contains: [
        e.C_NUMBER_MODE,
        {
          begin: "[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}",
          end: ":",
          excludeEnd: !0
        },
        {
          begin: "(ncalls|tottime|cumtime)",
          end: "$",
          keywords: "ncalls tottime|10 cumtime|10 filename",
          relevance: 10
        },
        {
          begin: "function calls",
          end: "$",
          contains: [e.C_NUMBER_MODE],
          relevance: 10
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "\\(",
          end: "\\)$",
          excludeBegin: !0,
          excludeEnd: !0,
          relevance: 0
        }
      ]
    };
  }
  return yf = t, yf;
}
var Tf, Rb;
function Px() {
  if (Rb)
    return Tf;
  Rb = 1;
  function t(e) {
    const r = {
      begin: /[a-z][A-Za-z0-9_]*/,
      relevance: 0
    }, n = {
      className: "symbol",
      variants: [
        { begin: /[A-Z][a-zA-Z0-9_]*/ },
        { begin: /_[A-Za-z0-9_]*/ }
      ],
      relevance: 0
    }, i = {
      begin: /\(/,
      end: /\)/,
      relevance: 0
    }, s = {
      begin: /\[/,
      end: /\]/
    }, o = {
      className: "comment",
      begin: /%/,
      end: /$/,
      contains: [e.PHRASAL_WORDS_MODE]
    }, a = {
      className: "string",
      begin: /`/,
      end: /`/,
      contains: [e.BACKSLASH_ESCAPE]
    }, l = {
      className: "string",
      // 0'a etc.
      begin: /0'(\\'|.)/
    }, c = {
      className: "string",
      begin: /0'\\s/
      // 0'\s
    }, m = [
      r,
      n,
      i,
      {
        // relevance booster
        begin: /:-/
      },
      s,
      o,
      e.C_BLOCK_COMMENT_MODE,
      e.QUOTE_STRING_MODE,
      e.APOS_STRING_MODE,
      a,
      l,
      c,
      e.C_NUMBER_MODE
    ];
    return i.contains = m, s.contains = m, {
      name: "Prolog",
      contains: m.concat([
        {
          // relevance booster
          begin: /\.$/
        }
      ])
    };
  }
  return Tf = t, Tf;
}
var Cf, xb;
function Fx() {
  if (xb)
    return Cf;
  xb = 1;
  function t(e) {
    const r = "[ \\t\\f]*", n = "[ \\t\\f]+", i = r + "[:=]" + r, s = n, o = "(" + i + "|" + s + ")", a = "([^\\\\:= \\t\\f\\n]|\\\\.)+", l = {
      // skip DELIM
      end: o,
      relevance: 0,
      starts: {
        // value: everything until end of line (again, taking into account backslashes)
        className: "string",
        end: /$/,
        relevance: 0,
        contains: [
          { begin: "\\\\\\\\" },
          { begin: "\\\\\\n" }
        ]
      }
    };
    return {
      name: ".properties",
      disableAutodetect: !0,
      case_insensitive: !0,
      illegal: /\S/,
      contains: [
        e.COMMENT("^\\s*[!#]", "$"),
        // key: everything until whitespace or = or : (taking into account backslashes)
        // case of a key-value pair
        {
          returnBegin: !0,
          variants: [
            { begin: a + i },
            { begin: a + s }
          ],
          contains: [
            {
              className: "attr",
              begin: a,
              endsParent: !0
            }
          ],
          starts: l
        },
        // case of an empty key
        {
          className: "attr",
          begin: a + r + "$"
        }
      ]
    };
  }
  return Cf = t, Cf;
}
var wf, Nb;
function Bx() {
  if (Nb)
    return wf;
  Nb = 1;
  function t(e) {
    const r = [
      "package",
      "import",
      "option",
      "optional",
      "required",
      "repeated",
      "group",
      "oneof"
    ], n = [
      "double",
      "float",
      "int32",
      "int64",
      "uint32",
      "uint64",
      "sint32",
      "sint64",
      "fixed32",
      "fixed64",
      "sfixed32",
      "sfixed64",
      "bool",
      "string",
      "bytes"
    ], i = {
      match: [
        /(message|enum|service)\s+/,
        e.IDENT_RE
      ],
      scope: {
        1: "keyword",
        2: "title.class"
      }
    };
    return {
      name: "Protocol Buffers",
      aliases: ["proto"],
      keywords: {
        keyword: r,
        type: n,
        literal: [
          "true",
          "false"
        ]
      },
      contains: [
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        i,
        {
          className: "function",
          beginKeywords: "rpc",
          end: /[{;]/,
          excludeEnd: !0,
          keywords: "rpc returns"
        },
        {
          // match enum items (relevance)
          // BLAH = ...;
          begin: /^\s*[A-Z_]+(?=\s*=[^\n]+;$)/
        }
      ]
    };
  }
  return wf = t, wf;
}
var Af, kb;
function Ux() {
  if (kb)
    return Af;
  kb = 1;
  function t(e) {
    const r = {
      keyword: (
        /* language keywords */
        "and case default else elsif false if in import enherits node or true undef unless main settings $string "
      ),
      literal: (
        /* metaparameters */
        "alias audit before loglevel noop require subscribe tag owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check en_address ip_address realname command environment hour monute month monthday special target weekday creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey sslverify mounted"
      ),
      built_in: (
        /* core facts */
        "architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version"
      )
    }, n = e.COMMENT("#", "$"), i = "([A-Za-z_]|::)(\\w|::)*", s = e.inherit(e.TITLE_MODE, { begin: i }), o = {
      className: "variable",
      begin: "\\$" + i
    }, a = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        o
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    };
    return {
      name: "Puppet",
      aliases: ["pp"],
      contains: [
        n,
        o,
        a,
        {
          beginKeywords: "class",
          end: "\\{|;",
          illegal: /=/,
          contains: [
            s,
            n
          ]
        },
        {
          beginKeywords: "define",
          end: /\{/,
          contains: [
            {
              className: "section",
              begin: e.IDENT_RE,
              endsParent: !0
            }
          ]
        },
        {
          begin: e.IDENT_RE + "\\s+\\{",
          returnBegin: !0,
          end: /\S/,
          contains: [
            {
              className: "keyword",
              begin: e.IDENT_RE,
              relevance: 0.2
            },
            {
              begin: /\{/,
              end: /\}/,
              keywords: r,
              relevance: 0,
              contains: [
                a,
                n,
                {
                  begin: "[a-zA-Z_]+\\s*=>",
                  returnBegin: !0,
                  end: "=>",
                  contains: [
                    {
                      className: "attr",
                      begin: e.IDENT_RE
                    }
                  ]
                },
                {
                  className: "number",
                  begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
                  relevance: 0
                },
                o
              ]
            }
          ],
          relevance: 0
        }
      ]
    };
  }
  return Af = t, Af;
}
var Rf, Ib;
function qx() {
  if (Ib)
    return Rf;
  Ib = 1;
  function t(e) {
    const r = {
      // PB IDE color: #0080FF (Azure Radiance)
      className: "string",
      begin: '(~)?"',
      end: '"',
      illegal: "\\n"
    }, n = {
      // PB IDE color: #924B72 (Cannon Pink)
      //  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"
      className: "symbol",
      begin: "#[a-zA-Z_]\\w*\\$?"
    };
    return {
      name: "PureBASIC",
      aliases: [
        "pb",
        "pbi"
      ],
      keywords: (
        // PB IDE color: #006666 (Blue Stone) + Bold
        // Keywords from all version of PureBASIC 5.00 upward ...
        "Align And Array As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerElseIf CompilerEndIf CompilerEndSelect CompilerError CompilerIf CompilerSelect CompilerWarning Continue Data DataSection Debug DebugLevel Declare DeclareC DeclareCDLL DeclareDLL DeclareModule Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM EnableDebugger EnableExplicit End EndDataSection EndDeclareModule EndEnumeration EndIf EndImport EndInterface EndMacro EndModule EndProcedure EndSelect EndStructure EndStructureUnion EndWith Enumeration EnumerationBinary Extends FakeReturn For ForEach ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface List Macro MacroExpandedCount Map Module NewList NewMap Next Not Or Procedure ProcedureC ProcedureCDLL ProcedureDLL ProcedureReturn Protected Prototype PrototypeC ReDim Read Repeat Restore Return Runtime Select Shared Static Step Structure StructureUnion Swap Threaded To UndefineMacro Until Until  UnuseModule UseModule Wend While With XIncludeFile XOr"
      ),
      contains: [
        // COMMENTS | PB IDE color: #00AAAA (Persian Green)
        e.COMMENT(";", "$", { relevance: 0 }),
        {
          // PROCEDURES DEFINITIONS
          className: "function",
          begin: "\\b(Procedure|Declare)(C|CDLL|DLL)?\\b",
          end: "\\(",
          excludeEnd: !0,
          returnBegin: !0,
          contains: [
            {
              // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold
              className: "keyword",
              begin: "(Procedure|Declare)(C|CDLL|DLL)?",
              excludeEnd: !0
            },
            {
              // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)
              className: "type",
              begin: "\\.\\w*"
              // end: ' ',
            },
            e.UNDERSCORE_TITLE_MODE
            // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)
          ]
        },
        r,
        n
      ]
    };
  }
  return Rf = t, Rf;
}
var xf, Ob;
function zx() {
  if (Ob)
    return xf;
  Ob = 1;
  function t(e) {
    const r = e.regex, n = new RegExp("[\\p{XID_Start}_]\\p{XID_Continue}*", "u"), i = [
      "and",
      "as",
      "assert",
      "async",
      "await",
      "break",
      "case",
      "class",
      "continue",
      "def",
      "del",
      "elif",
      "else",
      "except",
      "finally",
      "for",
      "from",
      "global",
      "if",
      "import",
      "in",
      "is",
      "lambda",
      "match",
      "nonlocal|10",
      "not",
      "or",
      "pass",
      "raise",
      "return",
      "try",
      "while",
      "with",
      "yield"
    ], l = {
      $pattern: /[A-Za-z]\w+|__\w+__/,
      keyword: i,
      built_in: [
        "__import__",
        "abs",
        "all",
        "any",
        "ascii",
        "bin",
        "bool",
        "breakpoint",
        "bytearray",
        "bytes",
        "callable",
        "chr",
        "classmethod",
        "compile",
        "complex",
        "delattr",
        "dict",
        "dir",
        "divmod",
        "enumerate",
        "eval",
        "exec",
        "filter",
        "float",
        "format",
        "frozenset",
        "getattr",
        "globals",
        "hasattr",
        "hash",
        "help",
        "hex",
        "id",
        "input",
        "int",
        "isinstance",
        "issubclass",
        "iter",
        "len",
        "list",
        "locals",
        "map",
        "max",
        "memoryview",
        "min",
        "next",
        "object",
        "oct",
        "open",
        "ord",
        "pow",
        "print",
        "property",
        "range",
        "repr",
        "reversed",
        "round",
        "set",
        "setattr",
        "slice",
        "sorted",
        "staticmethod",
        "str",
        "sum",
        "super",
        "tuple",
        "type",
        "vars",
        "zip"
      ],
      literal: [
        "__debug__",
        "Ellipsis",
        "False",
        "None",
        "NotImplemented",
        "True"
      ],
      type: [
        "Any",
        "Callable",
        "Coroutine",
        "Dict",
        "List",
        "Literal",
        "Generic",
        "Optional",
        "Sequence",
        "Set",
        "Tuple",
        "Type",
        "Union"
      ]
    }, c = {
      className: "meta",
      begin: /^(>>>|\.\.\.) /
    }, f = {
      className: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: l,
      illegal: /#/
    }, m = {
      begin: /\{\{/,
      relevance: 0
    }, b = {
      className: "string",
      contains: [e.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
          end: /'''/,
          contains: [
            e.BACKSLASH_ESCAPE,
            c
          ],
          relevance: 10
        },
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
          end: /"""/,
          contains: [
            e.BACKSLASH_ESCAPE,
            c
          ],
          relevance: 10
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])'''/,
          end: /'''/,
          contains: [
            e.BACKSLASH_ESCAPE,
            c,
            m,
            f
          ]
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])"""/,
          end: /"""/,
          contains: [
            e.BACKSLASH_ESCAPE,
            c,
            m,
            f
          ]
        },
        {
          begin: /([uU]|[rR])'/,
          end: /'/,
          relevance: 10
        },
        {
          begin: /([uU]|[rR])"/,
          end: /"/,
          relevance: 10
        },
        {
          begin: /([bB]|[bB][rR]|[rR][bB])'/,
          end: /'/
        },
        {
          begin: /([bB]|[bB][rR]|[rR][bB])"/,
          end: /"/
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])'/,
          end: /'/,
          contains: [
            e.BACKSLASH_ESCAPE,
            m,
            f
          ]
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])"/,
          end: /"/,
          contains: [
            e.BACKSLASH_ESCAPE,
            m,
            f
          ]
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE
      ]
    }, C = "[0-9](_?[0-9])*", N = `(\\b(${C}))?\\.(${C})|\\b(${C})\\.`, z = `\\b|${i.join("|")}`, A = {
      className: "number",
      relevance: 0,
      variants: [
        // exponentfloat, pointfloat
        // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
        // optionally imaginary
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        // Note: no leading \b because floats can start with a decimal point
        // and we don't want to mishandle e.g. `fn(.5)`,
        // no trailing \b for pointfloat because it can end with a decimal point
        // and we don't want to mishandle e.g. `0..hex()`; this should be safe
        // because both MUST contain a decimal point and so cannot be confused with
        // the interior part of an identifier
        {
          begin: `(\\b(${C})|(${N}))[eE][+-]?(${C})[jJ]?(?=${z})`
        },
        {
          begin: `(${N})[jJ]?`
        },
        // decinteger, bininteger, octinteger, hexinteger
        // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
        // optionally "long" in Python 2
        // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
        // decinteger is optionally imaginary
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        {
          begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${z})`
        },
        {
          begin: `\\b0[bB](_?[01])+[lL]?(?=${z})`
        },
        {
          begin: `\\b0[oO](_?[0-7])+[lL]?(?=${z})`
        },
        {
          begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${z})`
        },
        // imagnumber (digitpart-based)
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        {
          begin: `\\b(${C})[jJ](?=${z})`
        }
      ]
    }, Q = {
      className: "comment",
      begin: r.lookahead(/# type:/),
      end: /$/,
      keywords: l,
      contains: [
        {
          // prevent keywords from coloring `type`
          begin: /# type:/
        },
        // comment within a datatype comment includes no keywords
        {
          begin: /#/,
          end: /\b\B/,
          endsWithParent: !0
        }
      ]
    }, Te = {
      className: "params",
      variants: [
        // Exclude params in functions without params
        {
          className: "",
          begin: /\(\s*\)/,
          skip: !0
        },
        {
          begin: /\(/,
          end: /\)/,
          excludeBegin: !0,
          excludeEnd: !0,
          keywords: l,
          contains: [
            "self",
            c,
            A,
            b,
            e.HASH_COMMENT_MODE
          ]
        }
      ]
    };
    return f.contains = [
      b,
      A,
      c
    ], {
      name: "Python",
      aliases: [
        "py",
        "gyp",
        "ipython"
      ],
      unicodeRegex: !0,
      keywords: l,
      illegal: /(<\/|\?)|=>/,
      contains: [
        c,
        A,
        {
          // very common convention
          begin: /\bself\b/
        },
        {
          // eat "if" prior to string so that it won't accidentally be
          // labeled as an f-string
          beginKeywords: "if",
          relevance: 0
        },
        b,
        Q,
        e.HASH_COMMENT_MODE,
        {
          match: [
            /\bdef/,
            /\s+/,
            n
          ],
          scope: {
            1: "keyword",
            3: "title.function"
          },
          contains: [Te]
        },
        {
          variants: [
            {
              match: [
                /\bclass/,
                /\s+/,
                n,
                /\s*/,
                /\(\s*/,
                n,
                /\s*\)/
              ]
            },
            {
              match: [
                /\bclass/,
                /\s+/,
                n
              ]
            }
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            6: "title.class.inherited"
          }
        },
        {
          className: "meta",
          begin: /^[\t ]*@/,
          end: /(?=#)|$/,
          contains: [
            A,
            Te,
            b
          ]
        }
      ]
    };
  }
  return xf = t, xf;
}
var Nf, Db;
function Gx() {
  if (Db)
    return Nf;
  Db = 1;
  function t(e) {
    return {
      aliases: ["pycon"],
      contains: [
        {
          className: "meta.prompt",
          starts: {
            // a space separates the REPL prefix from the actual code
            // this is purely for cleaner HTML output
            end: / |$/,
            starts: {
              end: "$",
              subLanguage: "python"
            }
          },
          variants: [
            { begin: /^>>>(?=[ ]|$)/ },
            { begin: /^\.\.\.(?=[ ]|$)/ }
          ]
        }
      ]
    };
  }
  return Nf = t, Nf;
}
var kf, Mb;
function Yx() {
  if (Mb)
    return kf;
  Mb = 1;
  function t(e) {
    return {
      name: "Q",
      aliases: [
        "k",
        "kdb"
      ],
      keywords: {
        $pattern: /(`?)[A-Za-z0-9_]+\b/,
        keyword: "do while select delete by update from",
        literal: "0b 1b",
        built_in: "neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum",
        type: "`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid"
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE
      ]
    };
  }
  return kf = t, kf;
}
var If, Lb;
function Hx() {
  if (Lb)
    return If;
  Lb = 1;
  function t(e) {
    const r = e.regex, n = {
      keyword: "in of on if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await import",
      literal: "true false null undefined NaN Infinity",
      built_in: "eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Behavior bool color coordinate date double enumeration font geocircle georectangle geoshape int list matrix4x4 parent point quaternion real rect size string url variant vector2d vector3d vector4d Promise"
    }, i = "[a-zA-Z_][a-zA-Z0-9\\._]*", s = {
      className: "keyword",
      begin: "\\bproperty\\b",
      starts: {
        className: "string",
        end: "(:|=|;|,|//|/\\*|$)",
        returnEnd: !0
      }
    }, o = {
      className: "keyword",
      begin: "\\bsignal\\b",
      starts: {
        className: "string",
        end: "(\\(|:|=|;|,|//|/\\*|$)",
        returnEnd: !0
      }
    }, a = {
      className: "attribute",
      begin: "\\bid\\s*:",
      starts: {
        className: "string",
        end: i,
        returnEnd: !1
      }
    }, l = {
      begin: i + "\\s*:",
      returnBegin: !0,
      contains: [
        {
          className: "attribute",
          begin: i,
          end: "\\s*:",
          excludeEnd: !0,
          relevance: 0
        }
      ],
      relevance: 0
    }, c = {
      begin: r.concat(i, /\s*\{/),
      end: /\{/,
      returnBegin: !0,
      relevance: 0,
      contains: [e.inherit(e.TITLE_MODE, { begin: i })]
    };
    return {
      name: "QML",
      aliases: ["qt"],
      case_insensitive: !1,
      keywords: n,
      contains: [
        {
          className: "meta",
          begin: /^\s*['"]use (strict|asm)['"]/
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        {
          // template string
          className: "string",
          begin: "`",
          end: "`",
          contains: [
            e.BACKSLASH_ESCAPE,
            {
              className: "subst",
              begin: "\\$\\{",
              end: "\\}"
            }
          ]
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          variants: [
            { begin: "\\b(0[bB][01]+)" },
            { begin: "\\b(0[oO][0-7]+)" },
            { begin: e.C_NUMBER_RE }
          ],
          relevance: 0
        },
        {
          // "value" container
          begin: "(" + e.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          contains: [
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            e.REGEXP_MODE,
            {
              // E4X / JSX
              begin: /</,
              end: />\s*[);\]]/,
              relevance: 0,
              subLanguage: "xml"
            }
          ],
          relevance: 0
        },
        o,
        s,
        {
          className: "function",
          beginKeywords: "function",
          end: /\{/,
          excludeEnd: !0,
          contains: [
            e.inherit(e.TITLE_MODE, { begin: /[A-Za-z$_][0-9A-Za-z$_]*/ }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: !0,
              excludeEnd: !0,
              contains: [
                e.C_LINE_COMMENT_MODE,
                e.C_BLOCK_COMMENT_MODE
              ]
            }
          ],
          illegal: /\[|%/
        },
        {
          // hack: prevents detection of keywords after dots
          begin: "\\." + e.IDENT_RE,
          relevance: 0
        },
        a,
        l,
        c
      ],
      illegal: /#/
    };
  }
  return If = t, If;
}
var Of, Pb;
function Vx() {
  if (Pb)
    return Of;
  Pb = 1;
  function t(e) {
    const r = e.regex, n = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/, i = r.either(
      // Special case: only hexadecimal binary powers can contain fractions
      /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
      // Hexadecimal numbers without fraction and optional binary power
      /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
      // Decimal numbers
      /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/
    ), s = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/, o = r.either(
      /[()]/,
      /[{}]/,
      /\[\[/,
      /[[\]]/,
      /\\/,
      /,/
    );
    return {
      name: "R",
      keywords: {
        $pattern: n,
        keyword: "function if in break next repeat else for while",
        literal: "NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",
        built_in: (
          // Builtin constants
          "LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"
        )
      },
      contains: [
        // Roxygen comments
        e.COMMENT(
          /#'/,
          /$/,
          { contains: [
            {
              // Handle `@examples` separately to cause all subsequent code
              // until the next `@`-tag on its own line to be kept as-is,
              // preventing highlighting. This code is example R code, so nested
              // doctags shouldn’t be treated as such. See
              // `test/markup/r/roxygen.txt` for an example.
              scope: "doctag",
              match: /@examples/,
              starts: {
                end: r.lookahead(r.either(
                  // end if another doc comment
                  /\n^#'\s*(?=@[a-zA-Z]+)/,
                  // or a line with no comment
                  /\n^(?!#')/
                )),
                endsParent: !0
              }
            },
            {
              // Handle `@param` to highlight the parameter name following
              // after.
              scope: "doctag",
              begin: "@param",
              end: /$/,
              contains: [
                {
                  scope: "variable",
                  variants: [
                    { match: n },
                    { match: /`(?:\\.|[^`\\])+`/ }
                  ],
                  endsParent: !0
                }
              ]
            },
            {
              scope: "doctag",
              match: /@[a-zA-Z]+/
            },
            {
              scope: "keyword",
              match: /\\[a-zA-Z]+/
            }
          ] }
        ),
        e.HASH_COMMENT_MODE,
        {
          scope: "string",
          contains: [e.BACKSLASH_ESCAPE],
          variants: [
            e.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\(/,
              end: /\)(-*)"/
            }),
            e.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\{/,
              end: /\}(-*)"/
            }),
            e.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\[/,
              end: /\](-*)"/
            }),
            e.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\(/,
              end: /\)(-*)'/
            }),
            e.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\{/,
              end: /\}(-*)'/
            }),
            e.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\[/,
              end: /\](-*)'/
            }),
            {
              begin: '"',
              end: '"',
              relevance: 0
            },
            {
              begin: "'",
              end: "'",
              relevance: 0
            }
          ]
        },
        // Matching numbers immediately following punctuation and operators is
        // tricky since we need to look at the character ahead of a number to
        // ensure the number is not part of an identifier, and we cannot use
        // negative look-behind assertions. So instead we explicitly handle all
        // possible combinations of (operator|punctuation), number.
        // TODO: replace with negative look-behind when available
        // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },
        // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },
        // { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }
        {
          relevance: 0,
          variants: [
            {
              scope: {
                1: "operator",
                2: "number"
              },
              match: [
                s,
                i
              ]
            },
            {
              scope: {
                1: "operator",
                2: "number"
              },
              match: [
                /%[^%]*%/,
                i
              ]
            },
            {
              scope: {
                1: "punctuation",
                2: "number"
              },
              match: [
                o,
                i
              ]
            },
            {
              scope: { 2: "number" },
              match: [
                /[^a-zA-Z0-9._]|^/,
                // not part of an identifier, or start of document
                i
              ]
            }
          ]
        },
        // Operators/punctuation when they're not directly followed by numbers
        {
          // Relevance boost for the most common assignment form.
          scope: { 3: "operator" },
          match: [
            n,
            /\s+/,
            /<-/,
            /\s+/
          ]
        },
        {
          scope: "operator",
          relevance: 0,
          variants: [
            { match: s },
            { match: /%[^%]*%/ }
          ]
        },
        {
          scope: "punctuation",
          relevance: 0,
          match: o
        },
        {
          // Escaped identifier
          begin: "`",
          end: "`",
          contains: [{ begin: /\\./ }]
        }
      ]
    };
  }
  return Of = t, Of;
}
var Df, Fb;
function Wx() {
  if (Fb)
    return Df;
  Fb = 1;
  function t(e) {
    return {
      name: "ReasonML",
      aliases: ["re"],
      keywords: {
        $pattern: /[a-z_]\w*!?/,
        keyword: [
          "and",
          "as",
          "asr",
          "assert",
          "begin",
          "class",
          "constraint",
          "do",
          "done",
          "downto",
          "else",
          "end",
          "esfun",
          "exception",
          "external",
          "for",
          "fun",
          "function",
          "functor",
          "if",
          "in",
          "include",
          "inherit",
          "initializer",
          "land",
          "lazy",
          "let",
          "lor",
          "lsl",
          "lsr",
          "lxor",
          "mod",
          "module",
          "mutable",
          "new",
          "nonrec",
          "object",
          "of",
          "open",
          "or",
          "pri",
          "pub",
          "rec",
          "sig",
          "struct",
          "switch",
          "then",
          "to",
          "try",
          "type",
          "val",
          "virtual",
          "when",
          "while",
          "with"
        ],
        built_in: [
          "array",
          "bool",
          "bytes",
          "char",
          "exn|5",
          "float",
          "int",
          "int32",
          "int64",
          "list",
          "lazy_t|5",
          "nativeint|5",
          "ref",
          "string",
          "unit"
        ],
        literal: ["true", "false"]
      },
      illegal: /(:-|:=|\$\{|\+=)/,
      contains: [
        {
          scope: "literal",
          match: /\[(\|\|)?\]|\(\)/,
          relevance: 0
        },
        e.C_LINE_COMMENT_MODE,
        e.COMMENT(/\/\*/, /\*\//, { illegal: /^(#,\/\/)/ }),
        {
          /* type variable */
          scope: "symbol",
          match: /\'[A-Za-z_](?!\')[\w\']*/
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          scope: "type",
          match: /`[A-Z][\w\']*/
        },
        {
          /* module or constructor */
          scope: "type",
          match: /\b[A-Z][\w\']*/,
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          match: /[a-z_]\w*\'[\w\']*/,
          relevance: 0
        },
        {
          scope: "operator",
          match: /\s+(\|\||\+[\+\.]?|\*[\*\/\.]?|\/[\.]?|\.\.\.|\|>|&&|===?)\s+/,
          relevance: 0
        },
        e.inherit(e.APOS_STRING_MODE, {
          scope: "string",
          relevance: 0
        }),
        e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
        {
          scope: "number",
          variants: [
            { match: /\b0[xX][a-fA-F0-9_]+[Lln]?/ },
            { match: /\b0[oO][0-7_]+[Lln]?/ },
            { match: /\b0[bB][01_]+[Lln]?/ },
            { match: /\b[0-9][0-9_]*([Lln]|(\.[0-9_]*)?([eE][-+]?[0-9_]+)?)/ }
          ],
          relevance: 0
        }
      ]
    };
  }
  return Df = t, Df;
}
var Mf, Bb;
function Kx() {
  if (Bb)
    return Mf;
  Bb = 1;
  function t(e) {
    return {
      name: "RenderMan RIB",
      keywords: "ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry Hider Hyperboloid Identity Illuminate Imager Interior LightSource MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd TransformPoints Translate TrimCurve WorldBegin WorldEnd",
      illegal: "</",
      contains: [
        e.HASH_COMMENT_MODE,
        e.C_NUMBER_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE
      ]
    };
  }
  return Mf = t, Mf;
}
var Lf, Ub;
function Qx() {
  if (Ub)
    return Lf;
  Ub = 1;
  function t(e) {
    const r = "[a-zA-Z-_][^\\n{]+\\{", n = {
      className: "attribute",
      begin: /[a-zA-Z-_]+/,
      end: /\s*:/,
      excludeEnd: !0,
      starts: {
        end: ";",
        relevance: 0,
        contains: [
          {
            className: "variable",
            begin: /\.[a-zA-Z-_]+/
          },
          {
            className: "keyword",
            begin: /\(optional\)/
          }
        ]
      }
    };
    return {
      name: "Roboconf",
      aliases: [
        "graph",
        "instances"
      ],
      case_insensitive: !0,
      keywords: "import",
      contains: [
        // Facet sections
        {
          begin: "^facet " + r,
          end: /\}/,
          keywords: "facet",
          contains: [
            n,
            e.HASH_COMMENT_MODE
          ]
        },
        // Instance sections
        {
          begin: "^\\s*instance of " + r,
          end: /\}/,
          keywords: "name count channels instance-data instance-state instance of",
          illegal: /\S/,
          contains: [
            "self",
            n,
            e.HASH_COMMENT_MODE
          ]
        },
        // Component sections
        {
          begin: "^" + r,
          end: /\}/,
          contains: [
            n,
            e.HASH_COMMENT_MODE
          ]
        },
        // Comments
        e.HASH_COMMENT_MODE
      ]
    };
  }
  return Lf = t, Lf;
}
var Pf, qb;
function jx() {
  if (qb)
    return Pf;
  qb = 1;
  function t(e) {
    const r = "foreach do while for if from to step else on-error and or not in", n = "global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime", i = "add remove enable disable set get print export edit find run debug error info warning", s = "true false yes no nothing nil null", o = "traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw", a = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d#@][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    }, l = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        e.BACKSLASH_ESCAPE,
        a,
        {
          className: "variable",
          begin: /\$\(/,
          end: /\)/,
          contains: [e.BACKSLASH_ESCAPE]
        }
      ]
    }, c = {
      className: "string",
      begin: /'/,
      end: /'/
    };
    return {
      name: "MikroTik RouterOS script",
      aliases: ["mikrotik"],
      case_insensitive: !0,
      keywords: {
        $pattern: /:?[\w-]+/,
        literal: s,
        keyword: r + " :" + r.split(" ").join(" :") + " :" + n.split(" ").join(" :")
      },
      contains: [
        {
          // illegal syntax
          variants: [
            {
              // -- comment
              begin: /\/\*/,
              end: /\*\//
            },
            {
              // Stan comment
              begin: /\/\//,
              end: /$/
            },
            {
              // HTML tags
              begin: /<\//,
              end: />/
            }
          ],
          illegal: /./
        },
        e.COMMENT("^#", "$"),
        l,
        c,
        a,
        // attribute=value
        {
          // > is to avoid matches with => in other grammars
          begin: /[\w-]+=([^\s{}[\]()>]+)/,
          relevance: 0,
          returnBegin: !0,
          contains: [
            {
              className: "attribute",
              begin: /[^=]+/
            },
            {
              begin: /=/,
              endsWithParent: !0,
              relevance: 0,
              contains: [
                l,
                c,
                a,
                {
                  className: "literal",
                  begin: "\\b(" + s.split(" ").join("|") + ")\\b"
                },
                {
                  // Do not format unclassified values. Needed to exclude highlighting of values as built_in.
                  begin: /("[^"]*"|[^\s{}[\]]+)/
                }
                /*
                {
                  // IPv4 addresses and subnets
                  className: 'number',
                  variants: [
                    {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
                    {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
                    {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
                  ]
                },
                {
                  // MAC addresses and DHCP Client IDs
                  className: 'number',
                  begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
                },
                */
              ]
            }
          ]
        },
        {
          // HEX values
          className: "number",
          begin: /\*[0-9a-fA-F]+/
        },
        {
          begin: "\\b(" + i.split(" ").join("|") + ")([\\s[(\\]|])",
          returnBegin: !0,
          contains: [
            {
              className: "built_in",
              // 'function',
              begin: /\w+/
            }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: "(\\.\\./|/|\\s)((" + o.split(" ").join("|") + ");?\\s)+" },
            {
              begin: /\.\./,
              relevance: 0
            }
          ]
        }
      ]
    };
  }
  return Pf = t, Pf;
}
var Ff, zb;
function Xx() {
  if (zb)
    return Ff;
  zb = 1;
  function t(e) {
    const r = [
      "abs",
      "acos",
      "ambient",
      "area",
      "asin",
      "atan",
      "atmosphere",
      "attribute",
      "calculatenormal",
      "ceil",
      "cellnoise",
      "clamp",
      "comp",
      "concat",
      "cos",
      "degrees",
      "depth",
      "Deriv",
      "diffuse",
      "distance",
      "Du",
      "Dv",
      "environment",
      "exp",
      "faceforward",
      "filterstep",
      "floor",
      "format",
      "fresnel",
      "incident",
      "length",
      "lightsource",
      "log",
      "match",
      "max",
      "min",
      "mod",
      "noise",
      "normalize",
      "ntransform",
      "opposite",
      "option",
      "phong",
      "pnoise",
      "pow",
      "printf",
      "ptlined",
      "radians",
      "random",
      "reflect",
      "refract",
      "renderinfo",
      "round",
      "setcomp",
      "setxcomp",
      "setycomp",
      "setzcomp",
      "shadow",
      "sign",
      "sin",
      "smoothstep",
      "specular",
      "specularbrdf",
      "spline",
      "sqrt",
      "step",
      "tan",
      "texture",
      "textureinfo",
      "trace",
      "transform",
      "vtransform",
      "xcomp",
      "ycomp",
      "zcomp"
    ], n = [
      "matrix",
      "float",
      "color",
      "point",
      "normal",
      "vector"
    ], i = [
      "while",
      "for",
      "if",
      "do",
      "return",
      "else",
      "break",
      "extern",
      "continue"
    ], s = {
      match: [
        /(surface|displacement|light|volume|imager)/,
        /\s+/,
        e.IDENT_RE
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "RenderMan RSL",
      keywords: {
        keyword: i,
        built_in: r,
        type: n
      },
      illegal: "</",
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        s,
        {
          beginKeywords: "illuminate illuminance gather",
          end: "\\("
        }
      ]
    };
  }
  return Ff = t, Ff;
}
var Bf, Gb;
function Zx() {
  if (Gb)
    return Bf;
  Gb = 1;
  function t(e) {
    return {
      name: "Oracle Rules Language",
      keywords: {
        keyword: "BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM NUMDAYS READ_DATE STAGING",
        built_in: "IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME"
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          className: "literal",
          variants: [
            {
              // looks like #-comment
              begin: "#\\s+",
              relevance: 0
            },
            { begin: "#[a-zA-Z .]+" }
          ]
        }
      ]
    };
  }
  return Bf = t, Bf;
}
var Uf, Yb;
function Jx() {
  if (Yb)
    return Uf;
  Yb = 1;
  function t(e) {
    const r = e.regex, n = {
      className: "title.function.invoke",
      relevance: 0,
      begin: r.concat(
        /\b/,
        /(?!let|for|while|if|else|match\b)/,
        e.IDENT_RE,
        r.lookahead(/\s*\(/)
      )
    }, i = "([ui](8|16|32|64|128|size)|f(32|64))?", s = [
      "abstract",
      "as",
      "async",
      "await",
      "become",
      "box",
      "break",
      "const",
      "continue",
      "crate",
      "do",
      "dyn",
      "else",
      "enum",
      "extern",
      "false",
      "final",
      "fn",
      "for",
      "if",
      "impl",
      "in",
      "let",
      "loop",
      "macro",
      "match",
      "mod",
      "move",
      "mut",
      "override",
      "priv",
      "pub",
      "ref",
      "return",
      "self",
      "Self",
      "static",
      "struct",
      "super",
      "trait",
      "true",
      "try",
      "type",
      "typeof",
      "unsafe",
      "unsized",
      "use",
      "virtual",
      "where",
      "while",
      "yield"
    ], o = [
      "true",
      "false",
      "Some",
      "None",
      "Ok",
      "Err"
    ], a = [
      // functions
      "drop ",
      // traits
      "Copy",
      "Send",
      "Sized",
      "Sync",
      "Drop",
      "Fn",
      "FnMut",
      "FnOnce",
      "ToOwned",
      "Clone",
      "Debug",
      "PartialEq",
      "PartialOrd",
      "Eq",
      "Ord",
      "AsRef",
      "AsMut",
      "Into",
      "From",
      "Default",
      "Iterator",
      "Extend",
      "IntoIterator",
      "DoubleEndedIterator",
      "ExactSizeIterator",
      "SliceConcatExt",
      "ToString",
      // macros
      "assert!",
      "assert_eq!",
      "bitflags!",
      "bytes!",
      "cfg!",
      "col!",
      "concat!",
      "concat_idents!",
      "debug_assert!",
      "debug_assert_eq!",
      "env!",
      "eprintln!",
      "panic!",
      "file!",
      "format!",
      "format_args!",
      "include_bytes!",
      "include_str!",
      "line!",
      "local_data_key!",
      "module_path!",
      "option_env!",
      "print!",
      "println!",
      "select!",
      "stringify!",
      "try!",
      "unimplemented!",
      "unreachable!",
      "vec!",
      "write!",
      "writeln!",
      "macro_rules!",
      "assert_ne!",
      "debug_assert_ne!"
    ], l = [
      "i8",
      "i16",
      "i32",
      "i64",
      "i128",
      "isize",
      "u8",
      "u16",
      "u32",
      "u64",
      "u128",
      "usize",
      "f32",
      "f64",
      "str",
      "char",
      "bool",
      "Box",
      "Option",
      "Result",
      "String",
      "Vec"
    ];
    return {
      name: "Rust",
      aliases: ["rs"],
      keywords: {
        $pattern: e.IDENT_RE + "!?",
        type: l,
        keyword: s,
        literal: o,
        built_in: a
      },
      illegal: "</",
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
        e.inherit(e.QUOTE_STRING_MODE, {
          begin: /b?"/,
          illegal: null
        }),
        {
          className: "string",
          variants: [
            { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
            { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
          ]
        },
        {
          className: "symbol",
          begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
        },
        {
          className: "number",
          variants: [
            { begin: "\\b0b([01_]+)" + i },
            { begin: "\\b0o([0-7_]+)" + i },
            { begin: "\\b0x([A-Fa-f0-9_]+)" + i },
            { begin: "\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)" + i }
          ],
          relevance: 0
        },
        {
          begin: [
            /fn/,
            /\s+/,
            e.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.function"
          }
        },
        {
          className: "meta",
          begin: "#!?\\[",
          end: "\\]",
          contains: [
            {
              className: "string",
              begin: /"/,
              end: /"/
            }
          ]
        },
        {
          begin: [
            /let/,
            /\s+/,
            /(?:mut\s+)?/,
            e.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "keyword",
            4: "variable"
          }
        },
        // must come before impl/for rule later
        {
          begin: [
            /for/,
            /\s+/,
            e.UNDERSCORE_IDENT_RE,
            /\s+/,
            /in/
          ],
          className: {
            1: "keyword",
            3: "variable",
            5: "keyword"
          }
        },
        {
          begin: [
            /type/,
            /\s+/,
            e.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          begin: [
            /(?:trait|enum|struct|union|impl|for)/,
            /\s+/,
            e.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          begin: e.IDENT_RE + "::",
          keywords: {
            keyword: "Self",
            built_in: a,
            type: l
          }
        },
        {
          className: "punctuation",
          begin: "->"
        },
        n
      ]
    };
  }
  return Uf = t, Uf;
}
var qf, Hb;
function eN() {
  if (Hb)
    return qf;
  Hb = 1;
  function t(e) {
    const r = e.regex, n = [
      "do",
      "if",
      "then",
      "else",
      "end",
      "until",
      "while",
      "abort",
      "array",
      "attrib",
      "by",
      "call",
      "cards",
      "cards4",
      "catname",
      "continue",
      "datalines",
      "datalines4",
      "delete",
      "delim",
      "delimiter",
      "display",
      "dm",
      "drop",
      "endsas",
      "error",
      "file",
      "filename",
      "footnote",
      "format",
      "goto",
      "in",
      "infile",
      "informat",
      "input",
      "keep",
      "label",
      "leave",
      "length",
      "libname",
      "link",
      "list",
      "lostcard",
      "merge",
      "missing",
      "modify",
      "options",
      "output",
      "out",
      "page",
      "put",
      "redirect",
      "remove",
      "rename",
      "replace",
      "retain",
      "return",
      "select",
      "set",
      "skip",
      "startsas",
      "stop",
      "title",
      "update",
      "waitsas",
      "where",
      "window",
      "x|0",
      "systask",
      "add",
      "and",
      "alter",
      "as",
      "cascade",
      "check",
      "create",
      "delete",
      "describe",
      "distinct",
      "drop",
      "foreign",
      "from",
      "group",
      "having",
      "index",
      "insert",
      "into",
      "in",
      "key",
      "like",
      "message",
      "modify",
      "msgtype",
      "not",
      "null",
      "on",
      "or",
      "order",
      "primary",
      "references",
      "reset",
      "restrict",
      "select",
      "set",
      "table",
      "unique",
      "update",
      "validate",
      "view",
      "where"
    ], i = [
      "abs",
      "addr",
      "airy",
      "arcos",
      "arsin",
      "atan",
      "attrc",
      "attrn",
      "band",
      "betainv",
      "blshift",
      "bnot",
      "bor",
      "brshift",
      "bxor",
      "byte",
      "cdf",
      "ceil",
      "cexist",
      "cinv",
      "close",
      "cnonct",
      "collate",
      "compbl",
      "compound",
      "compress",
      "cos",
      "cosh",
      "css",
      "curobs",
      "cv",
      "daccdb",
      "daccdbsl",
      "daccsl",
      "daccsyd",
      "dacctab",
      "dairy",
      "date",
      "datejul",
      "datepart",
      "datetime",
      "day",
      "dclose",
      "depdb",
      "depdbsl",
      "depdbsl",
      "depsl",
      "depsl",
      "depsyd",
      "depsyd",
      "deptab",
      "deptab",
      "dequote",
      "dhms",
      "dif",
      "digamma",
      "dim",
      "dinfo",
      "dnum",
      "dopen",
      "doptname",
      "doptnum",
      "dread",
      "dropnote",
      "dsname",
      "erf",
      "erfc",
      "exist",
      "exp",
      "fappend",
      "fclose",
      "fcol",
      "fdelete",
      "fetch",
      "fetchobs",
      "fexist",
      "fget",
      "fileexist",
      "filename",
      "fileref",
      "finfo",
      "finv",
      "fipname",
      "fipnamel",
      "fipstate",
      "floor",
      "fnonct",
      "fnote",
      "fopen",
      "foptname",
      "foptnum",
      "fpoint",
      "fpos",
      "fput",
      "fread",
      "frewind",
      "frlen",
      "fsep",
      "fuzz",
      "fwrite",
      "gaminv",
      "gamma",
      "getoption",
      "getvarc",
      "getvarn",
      "hbound",
      "hms",
      "hosthelp",
      "hour",
      "ibessel",
      "index",
      "indexc",
      "indexw",
      "input",
      "inputc",
      "inputn",
      "int",
      "intck",
      "intnx",
      "intrr",
      "irr",
      "jbessel",
      "juldate",
      "kurtosis",
      "lag",
      "lbound",
      "left",
      "length",
      "lgamma",
      "libname",
      "libref",
      "log",
      "log10",
      "log2",
      "logpdf",
      "logpmf",
      "logsdf",
      "lowcase",
      "max",
      "mdy",
      "mean",
      "min",
      "minute",
      "mod",
      "month",
      "mopen",
      "mort",
      "n",
      "netpv",
      "nmiss",
      "normal",
      "note",
      "npv",
      "open",
      "ordinal",
      "pathname",
      "pdf",
      "peek",
      "peekc",
      "pmf",
      "point",
      "poisson",
      "poke",
      "probbeta",
      "probbnml",
      "probchi",
      "probf",
      "probgam",
      "probhypr",
      "probit",
      "probnegb",
      "probnorm",
      "probt",
      "put",
      "putc",
      "putn",
      "qtr",
      "quote",
      "ranbin",
      "rancau",
      "ranexp",
      "rangam",
      "range",
      "rank",
      "rannor",
      "ranpoi",
      "rantbl",
      "rantri",
      "ranuni",
      "repeat",
      "resolve",
      "reverse",
      "rewind",
      "right",
      "round",
      "saving",
      "scan",
      "sdf",
      "second",
      "sign",
      "sin",
      "sinh",
      "skewness",
      "soundex",
      "spedis",
      "sqrt",
      "std",
      "stderr",
      "stfips",
      "stname",
      "stnamel",
      "substr",
      "sum",
      "symget",
      "sysget",
      "sysmsg",
      "sysprod",
      "sysrc",
      "system",
      "tan",
      "tanh",
      "time",
      "timepart",
      "tinv",
      "tnonct",
      "today",
      "translate",
      "tranwrd",
      "trigamma",
      "trim",
      "trimn",
      "trunc",
      "uniform",
      "upcase",
      "uss",
      "var",
      "varfmt",
      "varinfmt",
      "varlabel",
      "varlen",
      "varname",
      "varnum",
      "varray",
      "varrayx",
      "vartype",
      "verify",
      "vformat",
      "vformatd",
      "vformatdx",
      "vformatn",
      "vformatnx",
      "vformatw",
      "vformatwx",
      "vformatx",
      "vinarray",
      "vinarrayx",
      "vinformat",
      "vinformatd",
      "vinformatdx",
      "vinformatn",
      "vinformatnx",
      "vinformatw",
      "vinformatwx",
      "vinformatx",
      "vlabel",
      "vlabelx",
      "vlength",
      "vlengthx",
      "vname",
      "vnamex",
      "vtype",
      "vtypex",
      "weekday",
      "year",
      "yyq",
      "zipfips",
      "zipname",
      "zipnamel",
      "zipstate"
    ], s = [
      "bquote",
      "nrbquote",
      "cmpres",
      "qcmpres",
      "compstor",
      "datatyp",
      "display",
      "do",
      "else",
      "end",
      "eval",
      "global",
      "goto",
      "if",
      "index",
      "input",
      "keydef",
      "label",
      "left",
      "length",
      "let",
      "local",
      "lowcase",
      "macro",
      "mend",
      "nrbquote",
      "nrquote",
      "nrstr",
      "put",
      "qcmpres",
      "qleft",
      "qlowcase",
      "qscan",
      "qsubstr",
      "qsysfunc",
      "qtrim",
      "quote",
      "qupcase",
      "scan",
      "str",
      "substr",
      "superq",
      "syscall",
      "sysevalf",
      "sysexec",
      "sysfunc",
      "sysget",
      "syslput",
      "sysprod",
      "sysrc",
      "sysrput",
      "then",
      "to",
      "trim",
      "unquote",
      "until",
      "upcase",
      "verify",
      "while",
      "window"
    ];
    return {
      name: "SAS",
      case_insensitive: !0,
      keywords: {
        literal: [
          "null",
          "missing",
          "_all_",
          "_automatic_",
          "_character_",
          "_infile_",
          "_n_",
          "_name_",
          "_null_",
          "_numeric_",
          "_user_",
          "_webout_"
        ],
        keyword: n
      },
      contains: [
        {
          // Distinct highlight for proc <proc>, data, run, quit
          className: "keyword",
          begin: /^\s*(proc [\w\d_]+|data|run|quit)[\s;]/
        },
        {
          // Macro variables
          className: "variable",
          begin: /&[a-zA-Z_&][a-zA-Z0-9_]*\.?/
        },
        {
          begin: [
            /^\s*/,
            /datalines;|cards;/,
            /(?:.*\n)+/,
            /^\s*;\s*$/
          ],
          className: {
            2: "keyword",
            3: "string"
          }
        },
        {
          begin: [
            /%mend|%macro/,
            /\s+/,
            /[a-zA-Z_&][a-zA-Z0-9_]*/
          ],
          className: {
            1: "built_in",
            3: "title.function"
          }
        },
        {
          // Built-in macro variables
          className: "built_in",
          begin: "%" + r.either(...s)
        },
        {
          // User-defined macro functions
          className: "title.function",
          begin: /%[a-zA-Z_][a-zA-Z_0-9]*/
        },
        {
          // TODO: this is most likely an incorrect classification
          // built_in may need more nuance
          // https://github.com/highlightjs/highlight.js/issues/2521
          className: "meta",
          begin: r.either(...i) + "(?=\\()"
        },
        {
          className: "string",
          variants: [
            e.APOS_STRING_MODE,
            e.QUOTE_STRING_MODE
          ]
        },
        e.COMMENT("\\*", ";"),
        e.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return qf = t, qf;
}
var zf, Vb;
function tN() {
  if (Vb)
    return zf;
  Vb = 1;
  function t(e) {
    const r = e.regex, n = {
      className: "meta",
      begin: "@[A-Za-z]+"
    }, i = {
      className: "subst",
      variants: [
        { begin: "\\$[A-Za-z0-9_]+" },
        {
          begin: /\$\{/,
          end: /\}/
        }
      ]
    }, s = {
      className: "string",
      variants: [
        {
          begin: '"""',
          end: '"""'
        },
        {
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          begin: '[a-z]+"',
          end: '"',
          illegal: "\\n",
          contains: [
            e.BACKSLASH_ESCAPE,
            i
          ]
        },
        {
          className: "string",
          begin: '[a-z]+"""',
          end: '"""',
          contains: [i],
          relevance: 10
        }
      ]
    }, o = {
      className: "type",
      begin: "\\b[A-Z][A-Za-z0-9_]*",
      relevance: 0
    }, a = {
      className: "title",
      begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
      relevance: 0
    }, l = {
      className: "class",
      beginKeywords: "class object trait type",
      end: /[:={\[\n;]/,
      excludeEnd: !0,
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          beginKeywords: "extends with",
          relevance: 10
        },
        {
          begin: /\[/,
          end: /\]/,
          excludeBegin: !0,
          excludeEnd: !0,
          relevance: 0,
          contains: [
            o,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          excludeBegin: !0,
          excludeEnd: !0,
          relevance: 0,
          contains: [
            o,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        a
      ]
    }, c = {
      className: "function",
      beginKeywords: "def",
      end: r.lookahead(/[:={\[(\n;]/),
      contains: [a]
    }, f = {
      begin: [
        /^\s*/,
        // Is first token on the line
        "extension",
        /\s+(?=[[(])/
        // followed by at least one space and `[` or `(`
      ],
      beginScope: { 2: "keyword" }
    }, m = {
      begin: [
        /^\s*/,
        // Is first token on the line
        /end/,
        /\s+/,
        /(extension\b)?/
        // `extension` is the only marker that follows an `end` that cannot be captured by another rule.
      ],
      beginScope: {
        2: "keyword",
        4: "keyword"
      }
    }, b = [
      { match: /\.inline\b/ },
      {
        begin: /\binline(?=\s)/,
        keywords: "inline"
      }
    ], C = {
      begin: [
        /\(\s*/,
        // Opening `(` of a parameter or argument list
        /using/,
        /\s+(?!\))/
        // Spaces not followed by `)`
      ],
      beginScope: { 2: "keyword" }
    };
    return {
      name: "Scala",
      keywords: {
        literal: "true false null",
        keyword: "type yield lazy override def with val var sealed abstract private trait object if then forSome for while do throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit export enum given transparent"
      },
      contains: [
        {
          begin: [
            "//>",
            /\s+/,
            /using/,
            /\s+/,
            /\S+/
          ],
          beginScope: {
            1: "comment",
            3: "keyword",
            5: "type"
          },
          end: /$/,
          contains: [
            {
              className: "string",
              begin: /\S+/
            }
          ]
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        s,
        o,
        c,
        l,
        e.C_NUMBER_MODE,
        f,
        m,
        ...b,
        C,
        n
      ]
    };
  }
  return zf = t, zf;
}
var Gf, Wb;
function rN() {
  if (Wb)
    return Gf;
  Wb = 1;
  function t(e) {
    const r = "[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+", n = "(-|\\+)?\\d+([./]\\d+)?", i = n + "[+\\-]" + n + "i", s = {
      $pattern: r,
      built_in: "case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"
    }, o = {
      className: "literal",
      begin: "(#t|#f|#\\\\" + r + "|#\\\\.)"
    }, a = {
      className: "number",
      variants: [
        {
          begin: n,
          relevance: 0
        },
        {
          begin: i,
          relevance: 0
        },
        { begin: "#b[0-1]+(/[0-1]+)?" },
        { begin: "#o[0-7]+(/[0-7]+)?" },
        { begin: "#x[0-9a-f]+(/[0-9a-f]+)?" }
      ]
    }, l = e.QUOTE_STRING_MODE, c = [
      e.COMMENT(
        ";",
        "$",
        { relevance: 0 }
      ),
      e.COMMENT("#\\|", "\\|#")
    ], f = {
      begin: r,
      relevance: 0
    }, m = {
      className: "symbol",
      begin: "'" + r
    }, b = {
      endsWithParent: !0,
      relevance: 0
    }, C = {
      variants: [
        { begin: /'/ },
        { begin: "`" }
      ],
      contains: [
        {
          begin: "\\(",
          end: "\\)",
          contains: [
            "self",
            o,
            l,
            a,
            f,
            m
          ]
        }
      ]
    }, N = {
      className: "name",
      relevance: 0,
      begin: r,
      keywords: s
    }, A = {
      variants: [
        {
          begin: "\\(",
          end: "\\)"
        },
        {
          begin: "\\[",
          end: "\\]"
        }
      ],
      contains: [
        {
          begin: /lambda/,
          endsWithParent: !0,
          returnBegin: !0,
          contains: [
            N,
            {
              endsParent: !0,
              variants: [
                {
                  begin: /\(/,
                  end: /\)/
                },
                {
                  begin: /\[/,
                  end: /\]/
                }
              ],
              contains: [f]
            }
          ]
        },
        N,
        b
      ]
    };
    return b.contains = [
      o,
      a,
      l,
      f,
      m,
      C,
      A
    ].concat(c), {
      name: "Scheme",
      aliases: ["scm"],
      illegal: /\S/,
      contains: [
        e.SHEBANG(),
        a,
        l,
        m,
        C,
        A
      ].concat(c)
    };
  }
  return Gf = t, Gf;
}
var Yf, Kb;
function nN() {
  if (Kb)
    return Yf;
  Kb = 1;
  function t(e) {
    const r = [
      e.C_NUMBER_MODE,
      {
        className: "string",
        begin: `'|"`,
        end: `'|"`,
        contains: [
          e.BACKSLASH_ESCAPE,
          { begin: "''" }
        ]
      }
    ];
    return {
      name: "Scilab",
      aliases: ["sci"],
      keywords: {
        $pattern: /%?\w+/,
        keyword: "abort break case clear catch continue do elseif else endfunction end for function global if pause return resume select try then while",
        literal: "%f %F %t %T %pi %eps %inf %nan %e %i %z %s",
        built_in: (
          // Scilab has more than 2000 functions. Just list the most commons
          "abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan type typename warning zeros matrix"
        )
      },
      illegal: '("|#|/\\*|\\s+/\\w+)',
      contains: [
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            e.UNDERSCORE_TITLE_MODE,
            {
              className: "params",
              begin: "\\(",
              end: "\\)"
            }
          ]
        },
        // seems to be a guard against [ident]' or [ident].
        // perhaps to prevent attributes from flagging as keywords?
        {
          begin: "[a-zA-Z_][a-zA-Z_0-9]*[\\.']+",
          relevance: 0
        },
        {
          begin: "\\[",
          end: "\\][\\.']*",
          relevance: 0,
          contains: r
        },
        e.COMMENT("//", "$")
      ].concat(r)
    };
  }
  return Yf = t, Yf;
}
var Hf, Qb;
function iN() {
  if (Qb)
    return Hf;
  Qb = 1;
  const t = (a) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: a.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        a.APOS_STRING_MODE,
        a.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: a.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], r = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ], n = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ], i = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ], s = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
    // reverse makes sure longer attributes `font-weight` are matched fully
    // instead of getting false positives on say `font`
  ].reverse();
  function o(a) {
    const l = t(a), c = i, f = n, m = "@[a-z-]+", b = "and or not only", N = {
      className: "variable",
      begin: "(\\$" + "[a-zA-Z-][a-zA-Z0-9_-]*" + ")\\b",
      relevance: 0
    };
    return {
      name: "SCSS",
      case_insensitive: !0,
      illegal: "[=/|']",
      contains: [
        a.C_LINE_COMMENT_MODE,
        a.C_BLOCK_COMMENT_MODE,
        // to recognize keyframe 40% etc which are outside the scope of our
        // attribute value mode
        l.CSS_NUMBER_MODE,
        {
          className: "selector-id",
          begin: "#[A-Za-z0-9_-]+",
          relevance: 0
        },
        {
          className: "selector-class",
          begin: "\\.[A-Za-z0-9_-]+",
          relevance: 0
        },
        l.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-tag",
          begin: "\\b(" + e.join("|") + ")\\b",
          // was there, before, but why?
          relevance: 0
        },
        {
          className: "selector-pseudo",
          begin: ":(" + f.join("|") + ")"
        },
        {
          className: "selector-pseudo",
          begin: ":(:)?(" + c.join("|") + ")"
        },
        N,
        {
          // pseudo-selector params
          begin: /\(/,
          end: /\)/,
          contains: [l.CSS_NUMBER_MODE]
        },
        l.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + s.join("|") + ")\\b"
        },
        { begin: "\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b" },
        {
          begin: /:/,
          end: /[;}{]/,
          relevance: 0,
          contains: [
            l.BLOCK_COMMENT,
            N,
            l.HEXCOLOR,
            l.CSS_NUMBER_MODE,
            a.QUOTE_STRING_MODE,
            a.APOS_STRING_MODE,
            l.IMPORTANT,
            l.FUNCTION_DISPATCH
          ]
        },
        // matching these here allows us to treat them more like regular CSS
        // rules so everything between the {} gets regular rule highlighting,
        // which is what we want for page and font-face
        {
          begin: "@(page|font-face)",
          keywords: {
            $pattern: m,
            keyword: "@page @font-face"
          }
        },
        {
          begin: "@",
          end: "[{;]",
          returnBegin: !0,
          keywords: {
            $pattern: /[a-z-]+/,
            keyword: b,
            attribute: r.join(" ")
          },
          contains: [
            {
              begin: m,
              className: "keyword"
            },
            {
              begin: /[a-z-]+(?=:)/,
              className: "attribute"
            },
            N,
            a.QUOTE_STRING_MODE,
            a.APOS_STRING_MODE,
            l.HEXCOLOR,
            l.CSS_NUMBER_MODE
          ]
        },
        l.FUNCTION_DISPATCH
      ]
    };
  }
  return Hf = o, Hf;
}
var Vf, jb;
function sN() {
  if (jb)
    return Vf;
  jb = 1;
  function t(e) {
    return {
      name: "Shell Session",
      aliases: [
        "console",
        "shellsession"
      ],
      contains: [
        {
          className: "meta.prompt",
          // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
          // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
          // echo /path/to/home > t.exe
          begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
          starts: {
            end: /[^\\](?=\s*$)/,
            subLanguage: "bash"
          }
        }
      ]
    };
  }
  return Vf = t, Vf;
}
var Wf, Xb;
function oN() {
  if (Xb)
    return Wf;
  Xb = 1;
  function t(e) {
    const r = [
      "add",
      "and",
      "cmp",
      "cmpg",
      "cmpl",
      "const",
      "div",
      "double",
      "float",
      "goto",
      "if",
      "int",
      "long",
      "move",
      "mul",
      "neg",
      "new",
      "nop",
      "not",
      "or",
      "rem",
      "return",
      "shl",
      "shr",
      "sput",
      "sub",
      "throw",
      "ushr",
      "xor"
    ], n = [
      "aget",
      "aput",
      "array",
      "check",
      "execute",
      "fill",
      "filled",
      "goto/16",
      "goto/32",
      "iget",
      "instance",
      "invoke",
      "iput",
      "monitor",
      "packed",
      "sget",
      "sparse"
    ], i = [
      "transient",
      "constructor",
      "abstract",
      "final",
      "synthetic",
      "public",
      "private",
      "protected",
      "static",
      "bridge",
      "system"
    ];
    return {
      name: "Smali",
      contains: [
        {
          className: "string",
          begin: '"',
          end: '"',
          relevance: 0
        },
        e.COMMENT(
          "#",
          "$",
          { relevance: 0 }
        ),
        {
          className: "keyword",
          variants: [
            { begin: "\\s*\\.end\\s[a-zA-Z0-9]*" },
            {
              begin: "^[ ]*\\.[a-zA-Z]*",
              relevance: 0
            },
            {
              begin: "\\s:[a-zA-Z_0-9]*",
              relevance: 0
            },
            { begin: "\\s(" + i.join("|") + ")" }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: "\\s(" + r.join("|") + ")\\s" },
            {
              begin: "\\s(" + r.join("|") + ")((-|/)[a-zA-Z0-9]+)+\\s",
              relevance: 10
            },
            {
              begin: "\\s(" + n.join("|") + ")((-|/)[a-zA-Z0-9]+)*\\s",
              relevance: 10
            }
          ]
        },
        {
          className: "class",
          begin: `L[^(;:
]*;`,
          relevance: 0
        },
        { begin: "[vp][0-9]+" }
      ]
    };
  }
  return Wf = t, Wf;
}
var Kf, Zb;
function aN() {
  if (Zb)
    return Kf;
  Zb = 1;
  function t(e) {
    const r = "[a-z][a-zA-Z0-9_]*", n = {
      className: "string",
      begin: "\\$.{1}"
    }, i = {
      className: "symbol",
      begin: "#" + e.UNDERSCORE_IDENT_RE
    };
    return {
      name: "Smalltalk",
      aliases: ["st"],
      keywords: [
        "self",
        "super",
        "nil",
        "true",
        "false",
        "thisContext"
      ],
      contains: [
        e.COMMENT('"', '"'),
        e.APOS_STRING_MODE,
        {
          className: "type",
          begin: "\\b[A-Z][A-Za-z0-9_]*",
          relevance: 0
        },
        {
          begin: r + ":",
          relevance: 0
        },
        e.C_NUMBER_MODE,
        i,
        n,
        {
          // This looks more complicated than needed to avoid combinatorial
          // explosion under V8. It effectively means `| var1 var2 ... |` with
          // whitespace adjacent to `|` being optional.
          begin: "\\|[ ]*" + r + "([ ]+" + r + ")*[ ]*\\|",
          returnBegin: !0,
          end: /\|/,
          illegal: /\S/,
          contains: [{ begin: "(\\|[ ]*)?" + r }]
        },
        {
          begin: "#\\(",
          end: "\\)",
          contains: [
            e.APOS_STRING_MODE,
            n,
            e.C_NUMBER_MODE,
            i
          ]
        }
      ]
    };
  }
  return Kf = t, Kf;
}
var Qf, Jb;
function lN() {
  if (Jb)
    return Qf;
  Jb = 1;
  function t(e) {
    return {
      name: "SML (Standard ML)",
      aliases: ["ml"],
      keywords: {
        $pattern: "[a-z_]\\w*!?",
        keyword: (
          /* according to Definition of Standard ML 97  */
          "abstype and andalso as case datatype do else end eqtype exception fn fun functor handle if in include infix infixr let local nonfix of op open orelse raise rec sharing sig signature struct structure then type val with withtype where while"
        ),
        built_in: (
          /* built-in types according to basis library */
          "array bool char exn int list option order real ref string substring vector unit word"
        ),
        literal: "true false NONE SOME LESS EQUAL GREATER nil"
      },
      illegal: /\/\/|>>/,
      contains: [
        {
          className: "literal",
          begin: /\[(\|\|)?\]|\(\)/,
          relevance: 0
        },
        e.COMMENT(
          "\\(\\*",
          "\\*\\)",
          { contains: ["self"] }
        ),
        {
          /* type variable */
          className: "symbol",
          begin: "'[A-Za-z_](?!')[\\w']*"
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          className: "type",
          begin: "`[A-Z][\\w']*"
        },
        {
          /* module or constructor */
          className: "type",
          begin: "\\b[A-Z][\\w']*",
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          begin: "[a-z_]\\w*'[\\w']*"
        },
        e.inherit(e.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "number",
          begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
          relevance: 0
        },
        {
          begin: /[-=]>/
          // relevance booster
        }
      ]
    };
  }
  return Qf = t, Qf;
}
var jf, e0;
function cN() {
  if (e0)
    return jf;
  e0 = 1;
  function t(e) {
    const r = {
      className: "variable",
      begin: /\b_+[a-zA-Z]\w*/
    }, n = {
      className: "title",
      begin: /[a-zA-Z][a-zA-Z_0-9]*_fnc_[a-zA-Z_0-9]+/
    }, i = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"',
          contains: [
            {
              begin: '""',
              relevance: 0
            }
          ]
        },
        {
          begin: "'",
          end: "'",
          contains: [
            {
              begin: "''",
              relevance: 0
            }
          ]
        }
      ]
    }, s = [
      "break",
      "breakWith",
      "breakOut",
      "breakTo",
      "case",
      "catch",
      "continue",
      "continueWith",
      "default",
      "do",
      "else",
      "exit",
      "exitWith",
      "for",
      "forEach",
      "from",
      "if",
      "local",
      "private",
      "switch",
      "step",
      "then",
      "throw",
      "to",
      "try",
      "waitUntil",
      "while",
      "with"
    ], o = [
      "blufor",
      "civilian",
      "configNull",
      "controlNull",
      "displayNull",
      "diaryRecordNull",
      "east",
      "endl",
      "false",
      "grpNull",
      "independent",
      "lineBreak",
      "locationNull",
      "nil",
      "objNull",
      "opfor",
      "pi",
      "resistance",
      "scriptNull",
      "sideAmbientLife",
      "sideEmpty",
      "sideEnemy",
      "sideFriendly",
      "sideLogic",
      "sideUnknown",
      "taskNull",
      "teamMemberNull",
      "true",
      "west"
    ], a = [
      "abs",
      "accTime",
      "acos",
      "action",
      "actionIDs",
      "actionKeys",
      "actionKeysEx",
      "actionKeysImages",
      "actionKeysNames",
      "actionKeysNamesArray",
      "actionName",
      "actionParams",
      "activateAddons",
      "activatedAddons",
      "activateKey",
      "activeTitleEffectParams",
      "add3DENConnection",
      "add3DENEventHandler",
      "add3DENLayer",
      "addAction",
      "addBackpack",
      "addBackpackCargo",
      "addBackpackCargoGlobal",
      "addBackpackGlobal",
      "addBinocularItem",
      "addCamShake",
      "addCuratorAddons",
      "addCuratorCameraArea",
      "addCuratorEditableObjects",
      "addCuratorEditingArea",
      "addCuratorPoints",
      "addEditorObject",
      "addEventHandler",
      "addForce",
      "addForceGeneratorRTD",
      "addGoggles",
      "addGroupIcon",
      "addHandgunItem",
      "addHeadgear",
      "addItem",
      "addItemCargo",
      "addItemCargoGlobal",
      "addItemPool",
      "addItemToBackpack",
      "addItemToUniform",
      "addItemToVest",
      "addLiveStats",
      "addMagazine",
      "addMagazineAmmoCargo",
      "addMagazineCargo",
      "addMagazineCargoGlobal",
      "addMagazineGlobal",
      "addMagazinePool",
      "addMagazines",
      "addMagazineTurret",
      "addMenu",
      "addMenuItem",
      "addMissionEventHandler",
      "addMPEventHandler",
      "addMusicEventHandler",
      "addonFiles",
      "addOwnedMine",
      "addPlayerScores",
      "addPrimaryWeaponItem",
      "addPublicVariableEventHandler",
      "addRating",
      "addResources",
      "addScore",
      "addScoreSide",
      "addSecondaryWeaponItem",
      "addSwitchableUnit",
      "addTeamMember",
      "addToRemainsCollector",
      "addTorque",
      "addUniform",
      "addUserActionEventHandler",
      "addVehicle",
      "addVest",
      "addWaypoint",
      "addWeapon",
      "addWeaponCargo",
      "addWeaponCargoGlobal",
      "addWeaponGlobal",
      "addWeaponItem",
      "addWeaponPool",
      "addWeaponTurret",
      "addWeaponWithAttachmentsCargo",
      "addWeaponWithAttachmentsCargoGlobal",
      "admin",
      "agent",
      "agents",
      "AGLToASL",
      "aimedAtTarget",
      "aimPos",
      "airDensityCurveRTD",
      "airDensityRTD",
      "airplaneThrottle",
      "airportSide",
      "AISFinishHeal",
      "alive",
      "all3DENEntities",
      "allActiveTitleEffects",
      "allAddonsInfo",
      "allAirports",
      "allControls",
      "allCurators",
      "allCutLayers",
      "allDead",
      "allDeadMen",
      "allDiaryRecords",
      "allDiarySubjects",
      "allDisplays",
      "allEnv3DSoundSources",
      "allGroups",
      "allLODs",
      "allMapMarkers",
      "allMines",
      "allMissionObjects",
      "allObjects",
      "allow3DMode",
      "allowCrewInImmobile",
      "allowCuratorLogicIgnoreAreas",
      "allowDamage",
      "allowDammage",
      "allowedService",
      "allowFileOperations",
      "allowFleeing",
      "allowGetIn",
      "allowService",
      "allowSprint",
      "allPlayers",
      "allSimpleObjects",
      "allSites",
      "allTurrets",
      "allUnits",
      "allUnitsUAV",
      "allUsers",
      "allVariables",
      "ambientTemperature",
      "ammo",
      "ammoOnPylon",
      "and",
      "animate",
      "animateBay",
      "animateDoor",
      "animatePylon",
      "animateSource",
      "animationNames",
      "animationPhase",
      "animationSourcePhase",
      "animationState",
      "apertureParams",
      "append",
      "apply",
      "armoryPoints",
      "arrayIntersect",
      "asin",
      "ASLToAGL",
      "ASLToATL",
      "assert",
      "assignAsCargo",
      "assignAsCargoIndex",
      "assignAsCommander",
      "assignAsDriver",
      "assignAsGunner",
      "assignAsTurret",
      "assignCurator",
      "assignedCargo",
      "assignedCommander",
      "assignedDriver",
      "assignedGroup",
      "assignedGunner",
      "assignedItems",
      "assignedTarget",
      "assignedTeam",
      "assignedVehicle",
      "assignedVehicleRole",
      "assignedVehicles",
      "assignItem",
      "assignTeam",
      "assignToAirport",
      "atan",
      "atan2",
      "atg",
      "ATLToASL",
      "attachedObject",
      "attachedObjects",
      "attachedTo",
      "attachObject",
      "attachTo",
      "attackEnabled",
      "awake",
      "backpack",
      "backpackCargo",
      "backpackContainer",
      "backpackItems",
      "backpackMagazines",
      "backpackSpaceFor",
      "behaviour",
      "benchmark",
      "bezierInterpolation",
      "binocular",
      "binocularItems",
      "binocularMagazine",
      "boundingBox",
      "boundingBoxReal",
      "boundingCenter",
      "brakesDisabled",
      "briefingName",
      "buildingExit",
      "buildingPos",
      "buldozer_EnableRoadDiag",
      "buldozer_IsEnabledRoadDiag",
      "buldozer_LoadNewRoads",
      "buldozer_reloadOperMap",
      "buttonAction",
      "buttonSetAction",
      "cadetMode",
      "calculatePath",
      "calculatePlayerVisibilityByFriendly",
      "call",
      "callExtension",
      "camCommand",
      "camCommit",
      "camCommitPrepared",
      "camCommitted",
      "camConstuctionSetParams",
      "camCreate",
      "camDestroy",
      "cameraEffect",
      "cameraEffectEnableHUD",
      "cameraInterest",
      "cameraOn",
      "cameraView",
      "campaignConfigFile",
      "camPreload",
      "camPreloaded",
      "camPrepareBank",
      "camPrepareDir",
      "camPrepareDive",
      "camPrepareFocus",
      "camPrepareFov",
      "camPrepareFovRange",
      "camPreparePos",
      "camPrepareRelPos",
      "camPrepareTarget",
      "camSetBank",
      "camSetDir",
      "camSetDive",
      "camSetFocus",
      "camSetFov",
      "camSetFovRange",
      "camSetPos",
      "camSetRelPos",
      "camSetTarget",
      "camTarget",
      "camUseNVG",
      "canAdd",
      "canAddItemToBackpack",
      "canAddItemToUniform",
      "canAddItemToVest",
      "cancelSimpleTaskDestination",
      "canDeployWeapon",
      "canFire",
      "canMove",
      "canSlingLoad",
      "canStand",
      "canSuspend",
      "canTriggerDynamicSimulation",
      "canUnloadInCombat",
      "canVehicleCargo",
      "captive",
      "captiveNum",
      "cbChecked",
      "cbSetChecked",
      "ceil",
      "channelEnabled",
      "cheatsEnabled",
      "checkAIFeature",
      "checkVisibility",
      "className",
      "clear3DENAttribute",
      "clear3DENInventory",
      "clearAllItemsFromBackpack",
      "clearBackpackCargo",
      "clearBackpackCargoGlobal",
      "clearForcesRTD",
      "clearGroupIcons",
      "clearItemCargo",
      "clearItemCargoGlobal",
      "clearItemPool",
      "clearMagazineCargo",
      "clearMagazineCargoGlobal",
      "clearMagazinePool",
      "clearOverlay",
      "clearRadio",
      "clearWeaponCargo",
      "clearWeaponCargoGlobal",
      "clearWeaponPool",
      "clientOwner",
      "closeDialog",
      "closeDisplay",
      "closeOverlay",
      "collapseObjectTree",
      "collect3DENHistory",
      "collectiveRTD",
      "collisionDisabledWith",
      "combatBehaviour",
      "combatMode",
      "commandArtilleryFire",
      "commandChat",
      "commander",
      "commandFire",
      "commandFollow",
      "commandFSM",
      "commandGetOut",
      "commandingMenu",
      "commandMove",
      "commandRadio",
      "commandStop",
      "commandSuppressiveFire",
      "commandTarget",
      "commandWatch",
      "comment",
      "commitOverlay",
      "compatibleItems",
      "compatibleMagazines",
      "compile",
      "compileFinal",
      "compileScript",
      "completedFSM",
      "composeText",
      "configClasses",
      "configFile",
      "configHierarchy",
      "configName",
      "configOf",
      "configProperties",
      "configSourceAddonList",
      "configSourceMod",
      "configSourceModList",
      "confirmSensorTarget",
      "connectTerminalToUAV",
      "connectToServer",
      "controlsGroupCtrl",
      "conversationDisabled",
      "copyFromClipboard",
      "copyToClipboard",
      "copyWaypoints",
      "cos",
      "count",
      "countEnemy",
      "countFriendly",
      "countSide",
      "countType",
      "countUnknown",
      "create3DENComposition",
      "create3DENEntity",
      "createAgent",
      "createCenter",
      "createDialog",
      "createDiaryLink",
      "createDiaryRecord",
      "createDiarySubject",
      "createDisplay",
      "createGearDialog",
      "createGroup",
      "createGuardedPoint",
      "createHashMap",
      "createHashMapFromArray",
      "createLocation",
      "createMarker",
      "createMarkerLocal",
      "createMenu",
      "createMine",
      "createMissionDisplay",
      "createMPCampaignDisplay",
      "createSimpleObject",
      "createSimpleTask",
      "createSite",
      "createSoundSource",
      "createTask",
      "createTeam",
      "createTrigger",
      "createUnit",
      "createVehicle",
      "createVehicleCrew",
      "createVehicleLocal",
      "crew",
      "ctAddHeader",
      "ctAddRow",
      "ctClear",
      "ctCurSel",
      "ctData",
      "ctFindHeaderRows",
      "ctFindRowHeader",
      "ctHeaderControls",
      "ctHeaderCount",
      "ctRemoveHeaders",
      "ctRemoveRows",
      "ctrlActivate",
      "ctrlAddEventHandler",
      "ctrlAngle",
      "ctrlAnimateModel",
      "ctrlAnimationPhaseModel",
      "ctrlAt",
      "ctrlAutoScrollDelay",
      "ctrlAutoScrollRewind",
      "ctrlAutoScrollSpeed",
      "ctrlBackgroundColor",
      "ctrlChecked",
      "ctrlClassName",
      "ctrlCommit",
      "ctrlCommitted",
      "ctrlCreate",
      "ctrlDelete",
      "ctrlEnable",
      "ctrlEnabled",
      "ctrlFade",
      "ctrlFontHeight",
      "ctrlForegroundColor",
      "ctrlHTMLLoaded",
      "ctrlIDC",
      "ctrlIDD",
      "ctrlMapAnimAdd",
      "ctrlMapAnimClear",
      "ctrlMapAnimCommit",
      "ctrlMapAnimDone",
      "ctrlMapCursor",
      "ctrlMapMouseOver",
      "ctrlMapPosition",
      "ctrlMapScale",
      "ctrlMapScreenToWorld",
      "ctrlMapSetPosition",
      "ctrlMapWorldToScreen",
      "ctrlModel",
      "ctrlModelDirAndUp",
      "ctrlModelScale",
      "ctrlMousePosition",
      "ctrlParent",
      "ctrlParentControlsGroup",
      "ctrlPosition",
      "ctrlRemoveAllEventHandlers",
      "ctrlRemoveEventHandler",
      "ctrlScale",
      "ctrlScrollValues",
      "ctrlSetActiveColor",
      "ctrlSetAngle",
      "ctrlSetAutoScrollDelay",
      "ctrlSetAutoScrollRewind",
      "ctrlSetAutoScrollSpeed",
      "ctrlSetBackgroundColor",
      "ctrlSetChecked",
      "ctrlSetDisabledColor",
      "ctrlSetEventHandler",
      "ctrlSetFade",
      "ctrlSetFocus",
      "ctrlSetFont",
      "ctrlSetFontH1",
      "ctrlSetFontH1B",
      "ctrlSetFontH2",
      "ctrlSetFontH2B",
      "ctrlSetFontH3",
      "ctrlSetFontH3B",
      "ctrlSetFontH4",
      "ctrlSetFontH4B",
      "ctrlSetFontH5",
      "ctrlSetFontH5B",
      "ctrlSetFontH6",
      "ctrlSetFontH6B",
      "ctrlSetFontHeight",
      "ctrlSetFontHeightH1",
      "ctrlSetFontHeightH2",
      "ctrlSetFontHeightH3",
      "ctrlSetFontHeightH4",
      "ctrlSetFontHeightH5",
      "ctrlSetFontHeightH6",
      "ctrlSetFontHeightSecondary",
      "ctrlSetFontP",
      "ctrlSetFontPB",
      "ctrlSetFontSecondary",
      "ctrlSetForegroundColor",
      "ctrlSetModel",
      "ctrlSetModelDirAndUp",
      "ctrlSetModelScale",
      "ctrlSetMousePosition",
      "ctrlSetPixelPrecision",
      "ctrlSetPosition",
      "ctrlSetPositionH",
      "ctrlSetPositionW",
      "ctrlSetPositionX",
      "ctrlSetPositionY",
      "ctrlSetScale",
      "ctrlSetScrollValues",
      "ctrlSetShadow",
      "ctrlSetStructuredText",
      "ctrlSetText",
      "ctrlSetTextColor",
      "ctrlSetTextColorSecondary",
      "ctrlSetTextSecondary",
      "ctrlSetTextSelection",
      "ctrlSetTooltip",
      "ctrlSetTooltipColorBox",
      "ctrlSetTooltipColorShade",
      "ctrlSetTooltipColorText",
      "ctrlSetTooltipMaxWidth",
      "ctrlSetURL",
      "ctrlSetURLOverlayMode",
      "ctrlShadow",
      "ctrlShow",
      "ctrlShown",
      "ctrlStyle",
      "ctrlText",
      "ctrlTextColor",
      "ctrlTextHeight",
      "ctrlTextSecondary",
      "ctrlTextSelection",
      "ctrlTextWidth",
      "ctrlTooltip",
      "ctrlType",
      "ctrlURL",
      "ctrlURLOverlayMode",
      "ctrlVisible",
      "ctRowControls",
      "ctRowCount",
      "ctSetCurSel",
      "ctSetData",
      "ctSetHeaderTemplate",
      "ctSetRowTemplate",
      "ctSetValue",
      "ctValue",
      "curatorAddons",
      "curatorCamera",
      "curatorCameraArea",
      "curatorCameraAreaCeiling",
      "curatorCoef",
      "curatorEditableObjects",
      "curatorEditingArea",
      "curatorEditingAreaType",
      "curatorMouseOver",
      "curatorPoints",
      "curatorRegisteredObjects",
      "curatorSelected",
      "curatorWaypointCost",
      "current3DENOperation",
      "currentChannel",
      "currentCommand",
      "currentMagazine",
      "currentMagazineDetail",
      "currentMagazineDetailTurret",
      "currentMagazineTurret",
      "currentMuzzle",
      "currentNamespace",
      "currentPilot",
      "currentTask",
      "currentTasks",
      "currentThrowable",
      "currentVisionMode",
      "currentWaypoint",
      "currentWeapon",
      "currentWeaponMode",
      "currentWeaponTurret",
      "currentZeroing",
      "cursorObject",
      "cursorTarget",
      "customChat",
      "customRadio",
      "customWaypointPosition",
      "cutFadeOut",
      "cutObj",
      "cutRsc",
      "cutText",
      "damage",
      "date",
      "dateToNumber",
      "dayTime",
      "deActivateKey",
      "debriefingText",
      "debugFSM",
      "debugLog",
      "decayGraphValues",
      "deg",
      "delete3DENEntities",
      "deleteAt",
      "deleteCenter",
      "deleteCollection",
      "deleteEditorObject",
      "deleteGroup",
      "deleteGroupWhenEmpty",
      "deleteIdentity",
      "deleteLocation",
      "deleteMarker",
      "deleteMarkerLocal",
      "deleteRange",
      "deleteResources",
      "deleteSite",
      "deleteStatus",
      "deleteTeam",
      "deleteVehicle",
      "deleteVehicleCrew",
      "deleteWaypoint",
      "detach",
      "detectedMines",
      "diag_activeMissionFSMs",
      "diag_activeScripts",
      "diag_activeSQFScripts",
      "diag_activeSQSScripts",
      "diag_allMissionEventHandlers",
      "diag_captureFrame",
      "diag_captureFrameToFile",
      "diag_captureSlowFrame",
      "diag_codePerformance",
      "diag_deltaTime",
      "diag_drawmode",
      "diag_dumpCalltraceToLog",
      "diag_dumpScriptAssembly",
      "diag_dumpTerrainSynth",
      "diag_dynamicSimulationEnd",
      "diag_enable",
      "diag_enabled",
      "diag_exportConfig",
      "diag_exportTerrainSVG",
      "diag_fps",
      "diag_fpsmin",
      "diag_frameno",
      "diag_getTerrainSegmentOffset",
      "diag_lightNewLoad",
      "diag_list",
      "diag_localized",
      "diag_log",
      "diag_logSlowFrame",
      "diag_mergeConfigFile",
      "diag_recordTurretLimits",
      "diag_resetFSM",
      "diag_resetshapes",
      "diag_scope",
      "diag_setLightNew",
      "diag_stacktrace",
      "diag_tickTime",
      "diag_toggle",
      "dialog",
      "diarySubjectExists",
      "didJIP",
      "didJIPOwner",
      "difficulty",
      "difficultyEnabled",
      "difficultyEnabledRTD",
      "difficultyOption",
      "direction",
      "directionStabilizationEnabled",
      "directSay",
      "disableAI",
      "disableBrakes",
      "disableCollisionWith",
      "disableConversation",
      "disableDebriefingStats",
      "disableMapIndicators",
      "disableNVGEquipment",
      "disableRemoteSensors",
      "disableSerialization",
      "disableTIEquipment",
      "disableUAVConnectability",
      "disableUserInput",
      "displayAddEventHandler",
      "displayChild",
      "displayCtrl",
      "displayParent",
      "displayRemoveAllEventHandlers",
      "displayRemoveEventHandler",
      "displaySetEventHandler",
      "displayUniqueName",
      "displayUpdate",
      "dissolveTeam",
      "distance",
      "distance2D",
      "distanceSqr",
      "distributionRegion",
      "do3DENAction",
      "doArtilleryFire",
      "doFire",
      "doFollow",
      "doFSM",
      "doGetOut",
      "doMove",
      "doorPhase",
      "doStop",
      "doSuppressiveFire",
      "doTarget",
      "doWatch",
      "drawArrow",
      "drawEllipse",
      "drawIcon",
      "drawIcon3D",
      "drawLaser",
      "drawLine",
      "drawLine3D",
      "drawLink",
      "drawLocation",
      "drawPolygon",
      "drawRectangle",
      "drawTriangle",
      "driver",
      "drop",
      "dynamicSimulationDistance",
      "dynamicSimulationDistanceCoef",
      "dynamicSimulationEnabled",
      "dynamicSimulationSystemEnabled",
      "echo",
      "edit3DENMissionAttributes",
      "editObject",
      "editorSetEventHandler",
      "effectiveCommander",
      "elevatePeriscope",
      "emptyPositions",
      "enableAI",
      "enableAIFeature",
      "enableAimPrecision",
      "enableAttack",
      "enableAudioFeature",
      "enableAutoStartUpRTD",
      "enableAutoTrimRTD",
      "enableCamShake",
      "enableCaustics",
      "enableChannel",
      "enableCollisionWith",
      "enableCopilot",
      "enableDebriefingStats",
      "enableDiagLegend",
      "enableDirectionStabilization",
      "enableDynamicSimulation",
      "enableDynamicSimulationSystem",
      "enableEndDialog",
      "enableEngineArtillery",
      "enableEnvironment",
      "enableFatigue",
      "enableGunLights",
      "enableInfoPanelComponent",
      "enableIRLasers",
      "enableMimics",
      "enablePersonTurret",
      "enableRadio",
      "enableReload",
      "enableRopeAttach",
      "enableSatNormalOnDetail",
      "enableSaving",
      "enableSentences",
      "enableSimulation",
      "enableSimulationGlobal",
      "enableStamina",
      "enableStressDamage",
      "enableTeamSwitch",
      "enableTraffic",
      "enableUAVConnectability",
      "enableUAVWaypoints",
      "enableVehicleCargo",
      "enableVehicleSensor",
      "enableWeaponDisassembly",
      "endLoadingScreen",
      "endMission",
      "engineOn",
      "enginesIsOnRTD",
      "enginesPowerRTD",
      "enginesRpmRTD",
      "enginesTorqueRTD",
      "entities",
      "environmentEnabled",
      "environmentVolume",
      "equipmentDisabled",
      "estimatedEndServerTime",
      "estimatedTimeLeft",
      "evalObjectArgument",
      "everyBackpack",
      "everyContainer",
      "exec",
      "execEditorScript",
      "execFSM",
      "execVM",
      "exp",
      "expectedDestination",
      "exportJIPMessages",
      "eyeDirection",
      "eyePos",
      "face",
      "faction",
      "fadeEnvironment",
      "fadeMusic",
      "fadeRadio",
      "fadeSound",
      "fadeSpeech",
      "failMission",
      "fileExists",
      "fillWeaponsFromPool",
      "find",
      "findAny",
      "findCover",
      "findDisplay",
      "findEditorObject",
      "findEmptyPosition",
      "findEmptyPositionReady",
      "findIf",
      "findNearestEnemy",
      "finishMissionInit",
      "finite",
      "fire",
      "fireAtTarget",
      "firstBackpack",
      "flag",
      "flagAnimationPhase",
      "flagOwner",
      "flagSide",
      "flagTexture",
      "flatten",
      "fleeing",
      "floor",
      "flyInHeight",
      "flyInHeightASL",
      "focusedCtrl",
      "fog",
      "fogForecast",
      "fogParams",
      "forceAddUniform",
      "forceAtPositionRTD",
      "forceCadetDifficulty",
      "forcedMap",
      "forceEnd",
      "forceFlagTexture",
      "forceFollowRoad",
      "forceGeneratorRTD",
      "forceMap",
      "forceRespawn",
      "forceSpeed",
      "forceUnicode",
      "forceWalk",
      "forceWeaponFire",
      "forceWeatherChange",
      "forEachMember",
      "forEachMemberAgent",
      "forEachMemberTeam",
      "forgetTarget",
      "format",
      "formation",
      "formationDirection",
      "formationLeader",
      "formationMembers",
      "formationPosition",
      "formationTask",
      "formatText",
      "formLeader",
      "freeExtension",
      "freeLook",
      "fromEditor",
      "fuel",
      "fullCrew",
      "gearIDCAmmoCount",
      "gearSlotAmmoCount",
      "gearSlotData",
      "gestureState",
      "get",
      "get3DENActionState",
      "get3DENAttribute",
      "get3DENCamera",
      "get3DENConnections",
      "get3DENEntity",
      "get3DENEntityID",
      "get3DENGrid",
      "get3DENIconsVisible",
      "get3DENLayerEntities",
      "get3DENLinesVisible",
      "get3DENMissionAttribute",
      "get3DENMouseOver",
      "get3DENSelected",
      "getAimingCoef",
      "getAllEnv3DSoundControllers",
      "getAllEnvSoundControllers",
      "getAllHitPointsDamage",
      "getAllOwnedMines",
      "getAllPylonsInfo",
      "getAllSoundControllers",
      "getAllUnitTraits",
      "getAmmoCargo",
      "getAnimAimPrecision",
      "getAnimSpeedCoef",
      "getArray",
      "getArtilleryAmmo",
      "getArtilleryComputerSettings",
      "getArtilleryETA",
      "getAssetDLCInfo",
      "getAssignedCuratorLogic",
      "getAssignedCuratorUnit",
      "getAttackTarget",
      "getAudioOptionVolumes",
      "getBackpackCargo",
      "getBleedingRemaining",
      "getBurningValue",
      "getCalculatePlayerVisibilityByFriendly",
      "getCameraViewDirection",
      "getCargoIndex",
      "getCenterOfMass",
      "getClientState",
      "getClientStateNumber",
      "getCompatiblePylonMagazines",
      "getConnectedUAV",
      "getConnectedUAVUnit",
      "getContainerMaxLoad",
      "getCorpse",
      "getCruiseControl",
      "getCursorObjectParams",
      "getCustomAimCoef",
      "getCustomSoundController",
      "getCustomSoundControllerCount",
      "getDammage",
      "getDebriefingText",
      "getDescription",
      "getDir",
      "getDirVisual",
      "getDiverState",
      "getDLCAssetsUsage",
      "getDLCAssetsUsageByName",
      "getDLCs",
      "getDLCUsageTime",
      "getEditorCamera",
      "getEditorMode",
      "getEditorObjectScope",
      "getElevationOffset",
      "getEngineTargetRPMRTD",
      "getEnv3DSoundController",
      "getEnvSoundController",
      "getEventHandlerInfo",
      "getFatigue",
      "getFieldManualStartPage",
      "getForcedFlagTexture",
      "getForcedSpeed",
      "getFriend",
      "getFSMVariable",
      "getFuelCargo",
      "getGraphValues",
      "getGroupIcon",
      "getGroupIconParams",
      "getGroupIcons",
      "getHideFrom",
      "getHit",
      "getHitIndex",
      "getHitPointDamage",
      "getItemCargo",
      "getLighting",
      "getLightingAt",
      "getLoadedModsInfo",
      "getMagazineCargo",
      "getMarkerColor",
      "getMarkerPos",
      "getMarkerSize",
      "getMarkerType",
      "getMass",
      "getMissionConfig",
      "getMissionConfigValue",
      "getMissionDLCs",
      "getMissionLayerEntities",
      "getMissionLayers",
      "getMissionPath",
      "getModelInfo",
      "getMousePosition",
      "getMusicPlayedTime",
      "getNumber",
      "getObjectArgument",
      "getObjectChildren",
      "getObjectDLC",
      "getObjectFOV",
      "getObjectID",
      "getObjectMaterials",
      "getObjectProxy",
      "getObjectScale",
      "getObjectTextures",
      "getObjectType",
      "getObjectViewDistance",
      "getOpticsMode",
      "getOrDefault",
      "getOrDefaultCall",
      "getOxygenRemaining",
      "getPersonUsedDLCs",
      "getPilotCameraDirection",
      "getPilotCameraPosition",
      "getPilotCameraRotation",
      "getPilotCameraTarget",
      "getPiPViewDistance",
      "getPlateNumber",
      "getPlayerChannel",
      "getPlayerID",
      "getPlayerScores",
      "getPlayerUID",
      "getPlayerVoNVolume",
      "getPos",
      "getPosASL",
      "getPosASLVisual",
      "getPosASLW",
      "getPosATL",
      "getPosATLVisual",
      "getPosVisual",
      "getPosWorld",
      "getPosWorldVisual",
      "getPylonMagazines",
      "getRelDir",
      "getRelPos",
      "getRemoteSensorsDisabled",
      "getRepairCargo",
      "getResolution",
      "getRoadInfo",
      "getRotorBrakeRTD",
      "getSensorTargets",
      "getSensorThreats",
      "getShadowDistance",
      "getShotParents",
      "getSlingLoad",
      "getSoundController",
      "getSoundControllerResult",
      "getSpeed",
      "getStamina",
      "getStatValue",
      "getSteamFriendsServers",
      "getSubtitleOptions",
      "getSuppression",
      "getTerrainGrid",
      "getTerrainHeight",
      "getTerrainHeightASL",
      "getTerrainInfo",
      "getText",
      "getTextRaw",
      "getTextureInfo",
      "getTextWidth",
      "getTiParameters",
      "getTotalDLCUsageTime",
      "getTrimOffsetRTD",
      "getTurretLimits",
      "getTurretOpticsMode",
      "getUnitFreefallInfo",
      "getUnitLoadout",
      "getUnitTrait",
      "getUnloadInCombat",
      "getUserInfo",
      "getUserMFDText",
      "getUserMFDValue",
      "getVariable",
      "getVehicleCargo",
      "getVehicleTiPars",
      "getWeaponCargo",
      "getWeaponSway",
      "getWingsOrientationRTD",
      "getWingsPositionRTD",
      "getWPPos",
      "glanceAt",
      "globalChat",
      "globalRadio",
      "goggles",
      "goto",
      "group",
      "groupChat",
      "groupFromNetId",
      "groupIconSelectable",
      "groupIconsVisible",
      "groupID",
      "groupOwner",
      "groupRadio",
      "groups",
      "groupSelectedUnits",
      "groupSelectUnit",
      "gunner",
      "gusts",
      "halt",
      "handgunItems",
      "handgunMagazine",
      "handgunWeapon",
      "handsHit",
      "hashValue",
      "hasInterface",
      "hasPilotCamera",
      "hasWeapon",
      "hcAllGroups",
      "hcGroupParams",
      "hcLeader",
      "hcRemoveAllGroups",
      "hcRemoveGroup",
      "hcSelected",
      "hcSelectGroup",
      "hcSetGroup",
      "hcShowBar",
      "hcShownBar",
      "headgear",
      "hideBody",
      "hideObject",
      "hideObjectGlobal",
      "hideSelection",
      "hint",
      "hintC",
      "hintCadet",
      "hintSilent",
      "hmd",
      "hostMission",
      "htmlLoad",
      "HUDMovementLevels",
      "humidity",
      "image",
      "importAllGroups",
      "importance",
      "in",
      "inArea",
      "inAreaArray",
      "incapacitatedState",
      "inflame",
      "inflamed",
      "infoPanel",
      "infoPanelComponentEnabled",
      "infoPanelComponents",
      "infoPanels",
      "inGameUISetEventHandler",
      "inheritsFrom",
      "initAmbientLife",
      "inPolygon",
      "inputAction",
      "inputController",
      "inputMouse",
      "inRangeOfArtillery",
      "insert",
      "insertEditorObject",
      "intersect",
      "is3DEN",
      "is3DENMultiplayer",
      "is3DENPreview",
      "isAbleToBreathe",
      "isActionMenuVisible",
      "isAgent",
      "isAimPrecisionEnabled",
      "isAllowedCrewInImmobile",
      "isArray",
      "isAutoHoverOn",
      "isAutonomous",
      "isAutoStartUpEnabledRTD",
      "isAutotest",
      "isAutoTrimOnRTD",
      "isAwake",
      "isBleeding",
      "isBurning",
      "isClass",
      "isCollisionLightOn",
      "isCopilotEnabled",
      "isDamageAllowed",
      "isDedicated",
      "isDLCAvailable",
      "isEngineOn",
      "isEqualRef",
      "isEqualTo",
      "isEqualType",
      "isEqualTypeAll",
      "isEqualTypeAny",
      "isEqualTypeArray",
      "isEqualTypeParams",
      "isFilePatchingEnabled",
      "isFinal",
      "isFlashlightOn",
      "isFlatEmpty",
      "isForcedWalk",
      "isFormationLeader",
      "isGameFocused",
      "isGamePaused",
      "isGroupDeletedWhenEmpty",
      "isHidden",
      "isInRemainsCollector",
      "isInstructorFigureEnabled",
      "isIRLaserOn",
      "isKeyActive",
      "isKindOf",
      "isLaserOn",
      "isLightOn",
      "isLocalized",
      "isManualFire",
      "isMarkedForCollection",
      "isMissionProfileNamespaceLoaded",
      "isMultiplayer",
      "isMultiplayerSolo",
      "isNil",
      "isNotEqualRef",
      "isNotEqualTo",
      "isNull",
      "isNumber",
      "isObjectHidden",
      "isObjectRTD",
      "isOnRoad",
      "isPiPEnabled",
      "isPlayer",
      "isRealTime",
      "isRemoteExecuted",
      "isRemoteExecutedJIP",
      "isSaving",
      "isSensorTargetConfirmed",
      "isServer",
      "isShowing3DIcons",
      "isSimpleObject",
      "isSprintAllowed",
      "isStaminaEnabled",
      "isSteamMission",
      "isSteamOverlayEnabled",
      "isStreamFriendlyUIEnabled",
      "isStressDamageEnabled",
      "isText",
      "isTouchingGround",
      "isTurnedOut",
      "isTutHintsEnabled",
      "isUAVConnectable",
      "isUAVConnected",
      "isUIContext",
      "isUniformAllowed",
      "isVehicleCargo",
      "isVehicleRadarOn",
      "isVehicleSensorEnabled",
      "isWalking",
      "isWeaponDeployed",
      "isWeaponRested",
      "itemCargo",
      "items",
      "itemsWithMagazines",
      "join",
      "joinAs",
      "joinAsSilent",
      "joinSilent",
      "joinString",
      "kbAddDatabase",
      "kbAddDatabaseTargets",
      "kbAddTopic",
      "kbHasTopic",
      "kbReact",
      "kbRemoveTopic",
      "kbTell",
      "kbWasSaid",
      "keyImage",
      "keyName",
      "keys",
      "knowsAbout",
      "land",
      "landAt",
      "landResult",
      "language",
      "laserTarget",
      "lbAdd",
      "lbClear",
      "lbColor",
      "lbColorRight",
      "lbCurSel",
      "lbData",
      "lbDelete",
      "lbIsSelected",
      "lbPicture",
      "lbPictureRight",
      "lbSelection",
      "lbSetColor",
      "lbSetColorRight",
      "lbSetCurSel",
      "lbSetData",
      "lbSetPicture",
      "lbSetPictureColor",
      "lbSetPictureColorDisabled",
      "lbSetPictureColorSelected",
      "lbSetPictureRight",
      "lbSetPictureRightColor",
      "lbSetPictureRightColorDisabled",
      "lbSetPictureRightColorSelected",
      "lbSetSelectColor",
      "lbSetSelectColorRight",
      "lbSetSelected",
      "lbSetText",
      "lbSetTextRight",
      "lbSetTooltip",
      "lbSetValue",
      "lbSize",
      "lbSort",
      "lbSortBy",
      "lbSortByValue",
      "lbText",
      "lbTextRight",
      "lbTooltip",
      "lbValue",
      "leader",
      "leaderboardDeInit",
      "leaderboardGetRows",
      "leaderboardInit",
      "leaderboardRequestRowsFriends",
      "leaderboardRequestRowsGlobal",
      "leaderboardRequestRowsGlobalAroundUser",
      "leaderboardsRequestUploadScore",
      "leaderboardsRequestUploadScoreKeepBest",
      "leaderboardState",
      "leaveVehicle",
      "libraryCredits",
      "libraryDisclaimers",
      "lifeState",
      "lightAttachObject",
      "lightDetachObject",
      "lightIsOn",
      "lightnings",
      "limitSpeed",
      "linearConversion",
      "lineIntersects",
      "lineIntersectsObjs",
      "lineIntersectsSurfaces",
      "lineIntersectsWith",
      "linkItem",
      "list",
      "listObjects",
      "listRemoteTargets",
      "listVehicleSensors",
      "ln",
      "lnbAddArray",
      "lnbAddColumn",
      "lnbAddRow",
      "lnbClear",
      "lnbColor",
      "lnbColorRight",
      "lnbCurSelRow",
      "lnbData",
      "lnbDeleteColumn",
      "lnbDeleteRow",
      "lnbGetColumnsPosition",
      "lnbPicture",
      "lnbPictureRight",
      "lnbSetColor",
      "lnbSetColorRight",
      "lnbSetColumnsPos",
      "lnbSetCurSelRow",
      "lnbSetData",
      "lnbSetPicture",
      "lnbSetPictureColor",
      "lnbSetPictureColorRight",
      "lnbSetPictureColorSelected",
      "lnbSetPictureColorSelectedRight",
      "lnbSetPictureRight",
      "lnbSetText",
      "lnbSetTextRight",
      "lnbSetTooltip",
      "lnbSetValue",
      "lnbSize",
      "lnbSort",
      "lnbSortBy",
      "lnbSortByValue",
      "lnbText",
      "lnbTextRight",
      "lnbValue",
      "load",
      "loadAbs",
      "loadBackpack",
      "loadConfig",
      "loadFile",
      "loadGame",
      "loadIdentity",
      "loadMagazine",
      "loadOverlay",
      "loadStatus",
      "loadUniform",
      "loadVest",
      "localize",
      "localNamespace",
      "locationPosition",
      "lock",
      "lockCameraTo",
      "lockCargo",
      "lockDriver",
      "locked",
      "lockedCameraTo",
      "lockedCargo",
      "lockedDriver",
      "lockedInventory",
      "lockedTurret",
      "lockIdentity",
      "lockInventory",
      "lockTurret",
      "lockWp",
      "log",
      "logEntities",
      "logNetwork",
      "logNetworkTerminate",
      "lookAt",
      "lookAtPos",
      "magazineCargo",
      "magazines",
      "magazinesAllTurrets",
      "magazinesAmmo",
      "magazinesAmmoCargo",
      "magazinesAmmoFull",
      "magazinesDetail",
      "magazinesDetailBackpack",
      "magazinesDetailUniform",
      "magazinesDetailVest",
      "magazinesTurret",
      "magazineTurretAmmo",
      "mapAnimAdd",
      "mapAnimClear",
      "mapAnimCommit",
      "mapAnimDone",
      "mapCenterOnCamera",
      "mapGridPosition",
      "markAsFinishedOnSteam",
      "markerAlpha",
      "markerBrush",
      "markerChannel",
      "markerColor",
      "markerDir",
      "markerPolyline",
      "markerPos",
      "markerShadow",
      "markerShape",
      "markerSize",
      "markerText",
      "markerType",
      "matrixMultiply",
      "matrixTranspose",
      "max",
      "maxLoad",
      "members",
      "menuAction",
      "menuAdd",
      "menuChecked",
      "menuClear",
      "menuCollapse",
      "menuData",
      "menuDelete",
      "menuEnable",
      "menuEnabled",
      "menuExpand",
      "menuHover",
      "menuPicture",
      "menuSetAction",
      "menuSetCheck",
      "menuSetData",
      "menuSetPicture",
      "menuSetShortcut",
      "menuSetText",
      "menuSetURL",
      "menuSetValue",
      "menuShortcut",
      "menuShortcutText",
      "menuSize",
      "menuSort",
      "menuText",
      "menuURL",
      "menuValue",
      "merge",
      "min",
      "mineActive",
      "mineDetectedBy",
      "missileTarget",
      "missileTargetPos",
      "missionConfigFile",
      "missionDifficulty",
      "missionEnd",
      "missionName",
      "missionNameSource",
      "missionNamespace",
      "missionProfileNamespace",
      "missionStart",
      "missionVersion",
      "mod",
      "modelToWorld",
      "modelToWorldVisual",
      "modelToWorldVisualWorld",
      "modelToWorldWorld",
      "modParams",
      "moonIntensity",
      "moonPhase",
      "morale",
      "move",
      "move3DENCamera",
      "moveInAny",
      "moveInCargo",
      "moveInCommander",
      "moveInDriver",
      "moveInGunner",
      "moveInTurret",
      "moveObjectToEnd",
      "moveOut",
      "moveTime",
      "moveTo",
      "moveToCompleted",
      "moveToFailed",
      "musicVolume",
      "name",
      "namedProperties",
      "nameSound",
      "nearEntities",
      "nearestBuilding",
      "nearestLocation",
      "nearestLocations",
      "nearestLocationWithDubbing",
      "nearestMines",
      "nearestObject",
      "nearestObjects",
      "nearestTerrainObjects",
      "nearObjects",
      "nearObjectsReady",
      "nearRoads",
      "nearSupplies",
      "nearTargets",
      "needReload",
      "needService",
      "netId",
      "netObjNull",
      "newOverlay",
      "nextMenuItemIndex",
      "nextWeatherChange",
      "nMenuItems",
      "not",
      "numberOfEnginesRTD",
      "numberToDate",
      "objectCurators",
      "objectFromNetId",
      "objectParent",
      "objStatus",
      "onBriefingGroup",
      "onBriefingNotes",
      "onBriefingPlan",
      "onBriefingTeamSwitch",
      "onCommandModeChanged",
      "onDoubleClick",
      "onEachFrame",
      "onGroupIconClick",
      "onGroupIconOverEnter",
      "onGroupIconOverLeave",
      "onHCGroupSelectionChanged",
      "onMapSingleClick",
      "onPlayerConnected",
      "onPlayerDisconnected",
      "onPreloadFinished",
      "onPreloadStarted",
      "onShowNewObject",
      "onTeamSwitch",
      "openCuratorInterface",
      "openDLCPage",
      "openGPS",
      "openMap",
      "openSteamApp",
      "openYoutubeVideo",
      "or",
      "orderGetIn",
      "overcast",
      "overcastForecast",
      "owner",
      "param",
      "params",
      "parseNumber",
      "parseSimpleArray",
      "parseText",
      "parsingNamespace",
      "particlesQuality",
      "periscopeElevation",
      "pickWeaponPool",
      "pitch",
      "pixelGrid",
      "pixelGridBase",
      "pixelGridNoUIScale",
      "pixelH",
      "pixelW",
      "playableSlotsNumber",
      "playableUnits",
      "playAction",
      "playActionNow",
      "player",
      "playerRespawnTime",
      "playerSide",
      "playersNumber",
      "playGesture",
      "playMission",
      "playMove",
      "playMoveNow",
      "playMusic",
      "playScriptedMission",
      "playSound",
      "playSound3D",
      "playSoundUI",
      "pose",
      "position",
      "positionCameraToWorld",
      "posScreenToWorld",
      "posWorldToScreen",
      "ppEffectAdjust",
      "ppEffectCommit",
      "ppEffectCommitted",
      "ppEffectCreate",
      "ppEffectDestroy",
      "ppEffectEnable",
      "ppEffectEnabled",
      "ppEffectForceInNVG",
      "precision",
      "preloadCamera",
      "preloadObject",
      "preloadSound",
      "preloadTitleObj",
      "preloadTitleRsc",
      "preprocessFile",
      "preprocessFileLineNumbers",
      "primaryWeapon",
      "primaryWeaponItems",
      "primaryWeaponMagazine",
      "priority",
      "processDiaryLink",
      "productVersion",
      "profileName",
      "profileNamespace",
      "profileNameSteam",
      "progressLoadingScreen",
      "progressPosition",
      "progressSetPosition",
      "publicVariable",
      "publicVariableClient",
      "publicVariableServer",
      "pushBack",
      "pushBackUnique",
      "putWeaponPool",
      "queryItemsPool",
      "queryMagazinePool",
      "queryWeaponPool",
      "rad",
      "radioChannelAdd",
      "radioChannelCreate",
      "radioChannelInfo",
      "radioChannelRemove",
      "radioChannelSetCallSign",
      "radioChannelSetLabel",
      "radioEnabled",
      "radioVolume",
      "rain",
      "rainbow",
      "rainParams",
      "random",
      "rank",
      "rankId",
      "rating",
      "rectangular",
      "regexFind",
      "regexMatch",
      "regexReplace",
      "registeredTasks",
      "registerTask",
      "reload",
      "reloadEnabled",
      "remoteControl",
      "remoteExec",
      "remoteExecCall",
      "remoteExecutedOwner",
      "remove3DENConnection",
      "remove3DENEventHandler",
      "remove3DENLayer",
      "removeAction",
      "removeAll3DENEventHandlers",
      "removeAllActions",
      "removeAllAssignedItems",
      "removeAllBinocularItems",
      "removeAllContainers",
      "removeAllCuratorAddons",
      "removeAllCuratorCameraAreas",
      "removeAllCuratorEditingAreas",
      "removeAllEventHandlers",
      "removeAllHandgunItems",
      "removeAllItems",
      "removeAllItemsWithMagazines",
      "removeAllMissionEventHandlers",
      "removeAllMPEventHandlers",
      "removeAllMusicEventHandlers",
      "removeAllOwnedMines",
      "removeAllPrimaryWeaponItems",
      "removeAllSecondaryWeaponItems",
      "removeAllUserActionEventHandlers",
      "removeAllWeapons",
      "removeBackpack",
      "removeBackpackGlobal",
      "removeBinocularItem",
      "removeCuratorAddons",
      "removeCuratorCameraArea",
      "removeCuratorEditableObjects",
      "removeCuratorEditingArea",
      "removeDiaryRecord",
      "removeDiarySubject",
      "removeDrawIcon",
      "removeDrawLinks",
      "removeEventHandler",
      "removeFromRemainsCollector",
      "removeGoggles",
      "removeGroupIcon",
      "removeHandgunItem",
      "removeHeadgear",
      "removeItem",
      "removeItemFromBackpack",
      "removeItemFromUniform",
      "removeItemFromVest",
      "removeItems",
      "removeMagazine",
      "removeMagazineGlobal",
      "removeMagazines",
      "removeMagazinesTurret",
      "removeMagazineTurret",
      "removeMenuItem",
      "removeMissionEventHandler",
      "removeMPEventHandler",
      "removeMusicEventHandler",
      "removeOwnedMine",
      "removePrimaryWeaponItem",
      "removeSecondaryWeaponItem",
      "removeSimpleTask",
      "removeSwitchableUnit",
      "removeTeamMember",
      "removeUniform",
      "removeUserActionEventHandler",
      "removeVest",
      "removeWeapon",
      "removeWeaponAttachmentCargo",
      "removeWeaponCargo",
      "removeWeaponGlobal",
      "removeWeaponTurret",
      "reportRemoteTarget",
      "requiredVersion",
      "resetCamShake",
      "resetSubgroupDirection",
      "resize",
      "resources",
      "respawnVehicle",
      "restartEditorCamera",
      "reveal",
      "revealMine",
      "reverse",
      "reversedMouseY",
      "roadAt",
      "roadsConnectedTo",
      "roleDescription",
      "ropeAttachedObjects",
      "ropeAttachedTo",
      "ropeAttachEnabled",
      "ropeAttachTo",
      "ropeCreate",
      "ropeCut",
      "ropeDestroy",
      "ropeDetach",
      "ropeEndPosition",
      "ropeLength",
      "ropes",
      "ropesAttachedTo",
      "ropeSegments",
      "ropeUnwind",
      "ropeUnwound",
      "rotorsForcesRTD",
      "rotorsRpmRTD",
      "round",
      "runInitScript",
      "safeZoneH",
      "safeZoneW",
      "safeZoneWAbs",
      "safeZoneX",
      "safeZoneXAbs",
      "safeZoneY",
      "save3DENInventory",
      "saveGame",
      "saveIdentity",
      "saveJoysticks",
      "saveMissionProfileNamespace",
      "saveOverlay",
      "saveProfileNamespace",
      "saveStatus",
      "saveVar",
      "savingEnabled",
      "say",
      "say2D",
      "say3D",
      "scopeName",
      "score",
      "scoreSide",
      "screenshot",
      "screenToWorld",
      "scriptDone",
      "scriptName",
      "scudState",
      "secondaryWeapon",
      "secondaryWeaponItems",
      "secondaryWeaponMagazine",
      "select",
      "selectBestPlaces",
      "selectDiarySubject",
      "selectedEditorObjects",
      "selectEditorObject",
      "selectionNames",
      "selectionPosition",
      "selectionVectorDirAndUp",
      "selectLeader",
      "selectMax",
      "selectMin",
      "selectNoPlayer",
      "selectPlayer",
      "selectRandom",
      "selectRandomWeighted",
      "selectWeapon",
      "selectWeaponTurret",
      "sendAUMessage",
      "sendSimpleCommand",
      "sendTask",
      "sendTaskResult",
      "sendUDPMessage",
      "sentencesEnabled",
      "serverCommand",
      "serverCommandAvailable",
      "serverCommandExecutable",
      "serverName",
      "serverNamespace",
      "serverTime",
      "set",
      "set3DENAttribute",
      "set3DENAttributes",
      "set3DENGrid",
      "set3DENIconsVisible",
      "set3DENLayer",
      "set3DENLinesVisible",
      "set3DENLogicType",
      "set3DENMissionAttribute",
      "set3DENMissionAttributes",
      "set3DENModelsVisible",
      "set3DENObjectType",
      "set3DENSelected",
      "setAccTime",
      "setActualCollectiveRTD",
      "setAirplaneThrottle",
      "setAirportSide",
      "setAmmo",
      "setAmmoCargo",
      "setAmmoOnPylon",
      "setAnimSpeedCoef",
      "setAperture",
      "setApertureNew",
      "setArmoryPoints",
      "setAttributes",
      "setAutonomous",
      "setBehaviour",
      "setBehaviourStrong",
      "setBleedingRemaining",
      "setBrakesRTD",
      "setCameraInterest",
      "setCamShakeDefParams",
      "setCamShakeParams",
      "setCamUseTi",
      "setCaptive",
      "setCenterOfMass",
      "setCollisionLight",
      "setCombatBehaviour",
      "setCombatMode",
      "setCompassOscillation",
      "setConvoySeparation",
      "setCruiseControl",
      "setCuratorCameraAreaCeiling",
      "setCuratorCoef",
      "setCuratorEditingAreaType",
      "setCuratorWaypointCost",
      "setCurrentChannel",
      "setCurrentTask",
      "setCurrentWaypoint",
      "setCustomAimCoef",
      "SetCustomMissionData",
      "setCustomSoundController",
      "setCustomWeightRTD",
      "setDamage",
      "setDammage",
      "setDate",
      "setDebriefingText",
      "setDefaultCamera",
      "setDestination",
      "setDetailMapBlendPars",
      "setDiaryRecordText",
      "setDiarySubjectPicture",
      "setDir",
      "setDirection",
      "setDrawIcon",
      "setDriveOnPath",
      "setDropInterval",
      "setDynamicSimulationDistance",
      "setDynamicSimulationDistanceCoef",
      "setEditorMode",
      "setEditorObjectScope",
      "setEffectCondition",
      "setEffectiveCommander",
      "setEngineRpmRTD",
      "setFace",
      "setFaceanimation",
      "setFatigue",
      "setFeatureType",
      "setFlagAnimationPhase",
      "setFlagOwner",
      "setFlagSide",
      "setFlagTexture",
      "setFog",
      "setForceGeneratorRTD",
      "setFormation",
      "setFormationTask",
      "setFormDir",
      "setFriend",
      "setFromEditor",
      "setFSMVariable",
      "setFuel",
      "setFuelCargo",
      "setGroupIcon",
      "setGroupIconParams",
      "setGroupIconsSelectable",
      "setGroupIconsVisible",
      "setGroupid",
      "setGroupIdGlobal",
      "setGroupOwner",
      "setGusts",
      "setHideBehind",
      "setHit",
      "setHitIndex",
      "setHitPointDamage",
      "setHorizonParallaxCoef",
      "setHUDMovementLevels",
      "setHumidity",
      "setIdentity",
      "setImportance",
      "setInfoPanel",
      "setLeader",
      "setLightAmbient",
      "setLightAttenuation",
      "setLightBrightness",
      "setLightColor",
      "setLightConePars",
      "setLightDayLight",
      "setLightFlareMaxDistance",
      "setLightFlareSize",
      "setLightIntensity",
      "setLightIR",
      "setLightnings",
      "setLightUseFlare",
      "setLightVolumeShape",
      "setLocalWindParams",
      "setMagazineTurretAmmo",
      "setMarkerAlpha",
      "setMarkerAlphaLocal",
      "setMarkerBrush",
      "setMarkerBrushLocal",
      "setMarkerColor",
      "setMarkerColorLocal",
      "setMarkerDir",
      "setMarkerDirLocal",
      "setMarkerPolyline",
      "setMarkerPolylineLocal",
      "setMarkerPos",
      "setMarkerPosLocal",
      "setMarkerShadow",
      "setMarkerShadowLocal",
      "setMarkerShape",
      "setMarkerShapeLocal",
      "setMarkerSize",
      "setMarkerSizeLocal",
      "setMarkerText",
      "setMarkerTextLocal",
      "setMarkerType",
      "setMarkerTypeLocal",
      "setMass",
      "setMaxLoad",
      "setMimic",
      "setMissileTarget",
      "setMissileTargetPos",
      "setMousePosition",
      "setMusicEffect",
      "setMusicEventHandler",
      "setName",
      "setNameSound",
      "setObjectArguments",
      "setObjectMaterial",
      "setObjectMaterialGlobal",
      "setObjectProxy",
      "setObjectScale",
      "setObjectTexture",
      "setObjectTextureGlobal",
      "setObjectViewDistance",
      "setOpticsMode",
      "setOvercast",
      "setOwner",
      "setOxygenRemaining",
      "setParticleCircle",
      "setParticleClass",
      "setParticleFire",
      "setParticleParams",
      "setParticleRandom",
      "setPilotCameraDirection",
      "setPilotCameraRotation",
      "setPilotCameraTarget",
      "setPilotLight",
      "setPiPEffect",
      "setPiPViewDistance",
      "setPitch",
      "setPlateNumber",
      "setPlayable",
      "setPlayerRespawnTime",
      "setPlayerVoNVolume",
      "setPos",
      "setPosASL",
      "setPosASL2",
      "setPosASLW",
      "setPosATL",
      "setPosition",
      "setPosWorld",
      "setPylonLoadout",
      "setPylonsPriority",
      "setRadioMsg",
      "setRain",
      "setRainbow",
      "setRandomLip",
      "setRank",
      "setRectangular",
      "setRepairCargo",
      "setRotorBrakeRTD",
      "setShadowDistance",
      "setShotParents",
      "setSide",
      "setSimpleTaskAlwaysVisible",
      "setSimpleTaskCustomData",
      "setSimpleTaskDescription",
      "setSimpleTaskDestination",
      "setSimpleTaskTarget",
      "setSimpleTaskType",
      "setSimulWeatherLayers",
      "setSize",
      "setSkill",
      "setSlingLoad",
      "setSoundEffect",
      "setSpeaker",
      "setSpeech",
      "setSpeedMode",
      "setStamina",
      "setStaminaScheme",
      "setStatValue",
      "setSuppression",
      "setSystemOfUnits",
      "setTargetAge",
      "setTaskMarkerOffset",
      "setTaskResult",
      "setTaskState",
      "setTerrainGrid",
      "setTerrainHeight",
      "setText",
      "setTimeMultiplier",
      "setTiParameter",
      "setTitleEffect",
      "setTowParent",
      "setTrafficDensity",
      "setTrafficDistance",
      "setTrafficGap",
      "setTrafficSpeed",
      "setTriggerActivation",
      "setTriggerArea",
      "setTriggerInterval",
      "setTriggerStatements",
      "setTriggerText",
      "setTriggerTimeout",
      "setTriggerType",
      "setTurretLimits",
      "setTurretOpticsMode",
      "setType",
      "setUnconscious",
      "setUnitAbility",
      "setUnitCombatMode",
      "setUnitFreefallHeight",
      "setUnitLoadout",
      "setUnitPos",
      "setUnitPosWeak",
      "setUnitRank",
      "setUnitRecoilCoefficient",
      "setUnitTrait",
      "setUnloadInCombat",
      "setUserActionText",
      "setUserMFDText",
      "setUserMFDValue",
      "setVariable",
      "setVectorDir",
      "setVectorDirAndUp",
      "setVectorUp",
      "setVehicleAmmo",
      "setVehicleAmmoDef",
      "setVehicleArmor",
      "setVehicleCargo",
      "setVehicleId",
      "setVehicleLock",
      "setVehiclePosition",
      "setVehicleRadar",
      "setVehicleReceiveRemoteTargets",
      "setVehicleReportOwnPosition",
      "setVehicleReportRemoteTargets",
      "setVehicleTiPars",
      "setVehicleVarName",
      "setVelocity",
      "setVelocityModelSpace",
      "setVelocityTransformation",
      "setViewDistance",
      "setVisibleIfTreeCollapsed",
      "setWantedRPMRTD",
      "setWaves",
      "setWaypointBehaviour",
      "setWaypointCombatMode",
      "setWaypointCompletionRadius",
      "setWaypointDescription",
      "setWaypointForceBehaviour",
      "setWaypointFormation",
      "setWaypointHousePosition",
      "setWaypointLoiterAltitude",
      "setWaypointLoiterRadius",
      "setWaypointLoiterType",
      "setWaypointName",
      "setWaypointPosition",
      "setWaypointScript",
      "setWaypointSpeed",
      "setWaypointStatements",
      "setWaypointTimeout",
      "setWaypointType",
      "setWaypointVisible",
      "setWeaponReloadingTime",
      "setWeaponZeroing",
      "setWind",
      "setWindDir",
      "setWindForce",
      "setWindStr",
      "setWingForceScaleRTD",
      "setWPPos",
      "show3DIcons",
      "showChat",
      "showCinemaBorder",
      "showCommandingMenu",
      "showCompass",
      "showCuratorCompass",
      "showGps",
      "showHUD",
      "showLegend",
      "showMap",
      "shownArtilleryComputer",
      "shownChat",
      "shownCompass",
      "shownCuratorCompass",
      "showNewEditorObject",
      "shownGps",
      "shownHUD",
      "shownMap",
      "shownPad",
      "shownRadio",
      "shownScoretable",
      "shownSubtitles",
      "shownUAVFeed",
      "shownWarrant",
      "shownWatch",
      "showPad",
      "showRadio",
      "showScoretable",
      "showSubtitles",
      "showUAVFeed",
      "showWarrant",
      "showWatch",
      "showWaypoint",
      "showWaypoints",
      "side",
      "sideChat",
      "sideRadio",
      "simpleTasks",
      "simulationEnabled",
      "simulCloudDensity",
      "simulCloudOcclusion",
      "simulInClouds",
      "simulWeatherSync",
      "sin",
      "size",
      "sizeOf",
      "skill",
      "skillFinal",
      "skipTime",
      "sleep",
      "sliderPosition",
      "sliderRange",
      "sliderSetPosition",
      "sliderSetRange",
      "sliderSetSpeed",
      "sliderSpeed",
      "slingLoadAssistantShown",
      "soldierMagazines",
      "someAmmo",
      "sort",
      "soundVolume",
      "spawn",
      "speaker",
      "speechVolume",
      "speed",
      "speedMode",
      "splitString",
      "sqrt",
      "squadParams",
      "stance",
      "startLoadingScreen",
      "stop",
      "stopEngineRTD",
      "stopped",
      "str",
      "sunOrMoon",
      "supportInfo",
      "suppressFor",
      "surfaceIsWater",
      "surfaceNormal",
      "surfaceTexture",
      "surfaceType",
      "swimInDepth",
      "switchableUnits",
      "switchAction",
      "switchCamera",
      "switchGesture",
      "switchLight",
      "switchMove",
      "synchronizedObjects",
      "synchronizedTriggers",
      "synchronizedWaypoints",
      "synchronizeObjectsAdd",
      "synchronizeObjectsRemove",
      "synchronizeTrigger",
      "synchronizeWaypoint",
      "systemChat",
      "systemOfUnits",
      "systemTime",
      "systemTimeUTC",
      "tan",
      "targetKnowledge",
      "targets",
      "targetsAggregate",
      "targetsQuery",
      "taskAlwaysVisible",
      "taskChildren",
      "taskCompleted",
      "taskCustomData",
      "taskDescription",
      "taskDestination",
      "taskHint",
      "taskMarkerOffset",
      "taskName",
      "taskParent",
      "taskResult",
      "taskState",
      "taskType",
      "teamMember",
      "teamName",
      "teams",
      "teamSwitch",
      "teamSwitchEnabled",
      "teamType",
      "terminate",
      "terrainIntersect",
      "terrainIntersectASL",
      "terrainIntersectAtASL",
      "text",
      "textLog",
      "textLogFormat",
      "tg",
      "time",
      "timeMultiplier",
      "titleCut",
      "titleFadeOut",
      "titleObj",
      "titleRsc",
      "titleText",
      "toArray",
      "toFixed",
      "toLower",
      "toLowerANSI",
      "toString",
      "toUpper",
      "toUpperANSI",
      "triggerActivated",
      "triggerActivation",
      "triggerAmmo",
      "triggerArea",
      "triggerAttachedVehicle",
      "triggerAttachObject",
      "triggerAttachVehicle",
      "triggerDynamicSimulation",
      "triggerInterval",
      "triggerStatements",
      "triggerText",
      "triggerTimeout",
      "triggerTimeoutCurrent",
      "triggerType",
      "trim",
      "turretLocal",
      "turretOwner",
      "turretUnit",
      "tvAdd",
      "tvClear",
      "tvCollapse",
      "tvCollapseAll",
      "tvCount",
      "tvCurSel",
      "tvData",
      "tvDelete",
      "tvExpand",
      "tvExpandAll",
      "tvIsSelected",
      "tvPicture",
      "tvPictureRight",
      "tvSelection",
      "tvSetColor",
      "tvSetCurSel",
      "tvSetData",
      "tvSetPicture",
      "tvSetPictureColor",
      "tvSetPictureColorDisabled",
      "tvSetPictureColorSelected",
      "tvSetPictureRight",
      "tvSetPictureRightColor",
      "tvSetPictureRightColorDisabled",
      "tvSetPictureRightColorSelected",
      "tvSetSelectColor",
      "tvSetSelected",
      "tvSetText",
      "tvSetTooltip",
      "tvSetValue",
      "tvSort",
      "tvSortAll",
      "tvSortByValue",
      "tvSortByValueAll",
      "tvText",
      "tvTooltip",
      "tvValue",
      "type",
      "typeName",
      "typeOf",
      "UAVControl",
      "uiNamespace",
      "uiSleep",
      "unassignCurator",
      "unassignItem",
      "unassignTeam",
      "unassignVehicle",
      "underwater",
      "uniform",
      "uniformContainer",
      "uniformItems",
      "uniformMagazines",
      "uniqueUnitItems",
      "unitAddons",
      "unitAimPosition",
      "unitAimPositionVisual",
      "unitBackpack",
      "unitCombatMode",
      "unitIsUAV",
      "unitPos",
      "unitReady",
      "unitRecoilCoefficient",
      "units",
      "unitsBelowHeight",
      "unitTurret",
      "unlinkItem",
      "unlockAchievement",
      "unregisterTask",
      "updateDrawIcon",
      "updateMenuItem",
      "updateObjectTree",
      "useAIOperMapObstructionTest",
      "useAISteeringComponent",
      "useAudioTimeForMoves",
      "userInputDisabled",
      "values",
      "vectorAdd",
      "vectorCos",
      "vectorCrossProduct",
      "vectorDiff",
      "vectorDir",
      "vectorDirVisual",
      "vectorDistance",
      "vectorDistanceSqr",
      "vectorDotProduct",
      "vectorFromTo",
      "vectorLinearConversion",
      "vectorMagnitude",
      "vectorMagnitudeSqr",
      "vectorModelToWorld",
      "vectorModelToWorldVisual",
      "vectorMultiply",
      "vectorNormalized",
      "vectorUp",
      "vectorUpVisual",
      "vectorWorldToModel",
      "vectorWorldToModelVisual",
      "vehicle",
      "vehicleCargoEnabled",
      "vehicleChat",
      "vehicleMoveInfo",
      "vehicleRadio",
      "vehicleReceiveRemoteTargets",
      "vehicleReportOwnPosition",
      "vehicleReportRemoteTargets",
      "vehicles",
      "vehicleVarName",
      "velocity",
      "velocityModelSpace",
      "verifySignature",
      "vest",
      "vestContainer",
      "vestItems",
      "vestMagazines",
      "viewDistance",
      "visibleCompass",
      "visibleGps",
      "visibleMap",
      "visiblePosition",
      "visiblePositionASL",
      "visibleScoretable",
      "visibleWatch",
      "waves",
      "waypointAttachedObject",
      "waypointAttachedVehicle",
      "waypointAttachObject",
      "waypointAttachVehicle",
      "waypointBehaviour",
      "waypointCombatMode",
      "waypointCompletionRadius",
      "waypointDescription",
      "waypointForceBehaviour",
      "waypointFormation",
      "waypointHousePosition",
      "waypointLoiterAltitude",
      "waypointLoiterRadius",
      "waypointLoiterType",
      "waypointName",
      "waypointPosition",
      "waypoints",
      "waypointScript",
      "waypointsEnabledUAV",
      "waypointShow",
      "waypointSpeed",
      "waypointStatements",
      "waypointTimeout",
      "waypointTimeoutCurrent",
      "waypointType",
      "waypointVisible",
      "weaponAccessories",
      "weaponAccessoriesCargo",
      "weaponCargo",
      "weaponDirection",
      "weaponInertia",
      "weaponLowered",
      "weaponReloadingTime",
      "weapons",
      "weaponsInfo",
      "weaponsItems",
      "weaponsItemsCargo",
      "weaponState",
      "weaponsTurret",
      "weightRTD",
      "WFSideText",
      "wind",
      "windDir",
      "windRTD",
      "windStr",
      "wingsForcesRTD",
      "worldName",
      "worldSize",
      "worldToModel",
      "worldToModelVisual",
      "worldToScreen"
    ], l = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: "define undef ifdef ifndef else endif include if",
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        e.inherit(i, { className: "string" }),
        {
          begin: /<[^\n>]*>/,
          end: /$/,
          illegal: "\\n"
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ]
    };
    return {
      name: "SQF",
      case_insensitive: !0,
      keywords: {
        keyword: s,
        built_in: a,
        literal: o
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.NUMBER_MODE,
        r,
        n,
        i,
        l
      ],
      illegal: [
        //$ is only valid when used with Hex numbers (e.g. $FF)
        /\$[^a-fA-F0-9]/,
        /\w\$/,
        /\?/,
        //There's no ? in SQF
        /@/,
        //There's no @ in SQF
        // Brute-force-fixing the build error. See https://github.com/highlightjs/highlight.js/pull/3193#issuecomment-843088729
        / \| /,
        // . is only used in numbers
        /[a-zA-Z_]\./,
        /\:\=/,
        /\[\:/
      ]
    };
  }
  return jf = t, jf;
}
var Xf, t0;
function uN() {
  if (t0)
    return Xf;
  t0 = 1;
  function t(e) {
    const r = e.regex, n = e.COMMENT("--", "$"), i = {
      className: "string",
      variants: [
        {
          begin: /'/,
          end: /'/,
          contains: [{ begin: /''/ }]
        }
      ]
    }, s = {
      begin: /"/,
      end: /"/,
      contains: [{ begin: /""/ }]
    }, o = [
      "true",
      "false",
      // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
      // "null",
      "unknown"
    ], a = [
      "double precision",
      "large object",
      "with timezone",
      "without timezone"
    ], l = [
      "bigint",
      "binary",
      "blob",
      "boolean",
      "char",
      "character",
      "clob",
      "date",
      "dec",
      "decfloat",
      "decimal",
      "float",
      "int",
      "integer",
      "interval",
      "nchar",
      "nclob",
      "national",
      "numeric",
      "real",
      "row",
      "smallint",
      "time",
      "timestamp",
      "varchar",
      "varying",
      // modifier (character varying)
      "varbinary"
    ], c = [
      "add",
      "asc",
      "collation",
      "desc",
      "final",
      "first",
      "last",
      "view"
    ], f = [
      "abs",
      "acos",
      "all",
      "allocate",
      "alter",
      "and",
      "any",
      "are",
      "array",
      "array_agg",
      "array_max_cardinality",
      "as",
      "asensitive",
      "asin",
      "asymmetric",
      "at",
      "atan",
      "atomic",
      "authorization",
      "avg",
      "begin",
      "begin_frame",
      "begin_partition",
      "between",
      "bigint",
      "binary",
      "blob",
      "boolean",
      "both",
      "by",
      "call",
      "called",
      "cardinality",
      "cascaded",
      "case",
      "cast",
      "ceil",
      "ceiling",
      "char",
      "char_length",
      "character",
      "character_length",
      "check",
      "classifier",
      "clob",
      "close",
      "coalesce",
      "collate",
      "collect",
      "column",
      "commit",
      "condition",
      "connect",
      "constraint",
      "contains",
      "convert",
      "copy",
      "corr",
      "corresponding",
      "cos",
      "cosh",
      "count",
      "covar_pop",
      "covar_samp",
      "create",
      "cross",
      "cube",
      "cume_dist",
      "current",
      "current_catalog",
      "current_date",
      "current_default_transform_group",
      "current_path",
      "current_role",
      "current_row",
      "current_schema",
      "current_time",
      "current_timestamp",
      "current_path",
      "current_role",
      "current_transform_group_for_type",
      "current_user",
      "cursor",
      "cycle",
      "date",
      "day",
      "deallocate",
      "dec",
      "decimal",
      "decfloat",
      "declare",
      "default",
      "define",
      "delete",
      "dense_rank",
      "deref",
      "describe",
      "deterministic",
      "disconnect",
      "distinct",
      "double",
      "drop",
      "dynamic",
      "each",
      "element",
      "else",
      "empty",
      "end",
      "end_frame",
      "end_partition",
      "end-exec",
      "equals",
      "escape",
      "every",
      "except",
      "exec",
      "execute",
      "exists",
      "exp",
      "external",
      "extract",
      "false",
      "fetch",
      "filter",
      "first_value",
      "float",
      "floor",
      "for",
      "foreign",
      "frame_row",
      "free",
      "from",
      "full",
      "function",
      "fusion",
      "get",
      "global",
      "grant",
      "group",
      "grouping",
      "groups",
      "having",
      "hold",
      "hour",
      "identity",
      "in",
      "indicator",
      "initial",
      "inner",
      "inout",
      "insensitive",
      "insert",
      "int",
      "integer",
      "intersect",
      "intersection",
      "interval",
      "into",
      "is",
      "join",
      "json_array",
      "json_arrayagg",
      "json_exists",
      "json_object",
      "json_objectagg",
      "json_query",
      "json_table",
      "json_table_primitive",
      "json_value",
      "lag",
      "language",
      "large",
      "last_value",
      "lateral",
      "lead",
      "leading",
      "left",
      "like",
      "like_regex",
      "listagg",
      "ln",
      "local",
      "localtime",
      "localtimestamp",
      "log",
      "log10",
      "lower",
      "match",
      "match_number",
      "match_recognize",
      "matches",
      "max",
      "member",
      "merge",
      "method",
      "min",
      "minute",
      "mod",
      "modifies",
      "module",
      "month",
      "multiset",
      "national",
      "natural",
      "nchar",
      "nclob",
      "new",
      "no",
      "none",
      "normalize",
      "not",
      "nth_value",
      "ntile",
      "null",
      "nullif",
      "numeric",
      "octet_length",
      "occurrences_regex",
      "of",
      "offset",
      "old",
      "omit",
      "on",
      "one",
      "only",
      "open",
      "or",
      "order",
      "out",
      "outer",
      "over",
      "overlaps",
      "overlay",
      "parameter",
      "partition",
      "pattern",
      "per",
      "percent",
      "percent_rank",
      "percentile_cont",
      "percentile_disc",
      "period",
      "portion",
      "position",
      "position_regex",
      "power",
      "precedes",
      "precision",
      "prepare",
      "primary",
      "procedure",
      "ptf",
      "range",
      "rank",
      "reads",
      "real",
      "recursive",
      "ref",
      "references",
      "referencing",
      "regr_avgx",
      "regr_avgy",
      "regr_count",
      "regr_intercept",
      "regr_r2",
      "regr_slope",
      "regr_sxx",
      "regr_sxy",
      "regr_syy",
      "release",
      "result",
      "return",
      "returns",
      "revoke",
      "right",
      "rollback",
      "rollup",
      "row",
      "row_number",
      "rows",
      "running",
      "savepoint",
      "scope",
      "scroll",
      "search",
      "second",
      "seek",
      "select",
      "sensitive",
      "session_user",
      "set",
      "show",
      "similar",
      "sin",
      "sinh",
      "skip",
      "smallint",
      "some",
      "specific",
      "specifictype",
      "sql",
      "sqlexception",
      "sqlstate",
      "sqlwarning",
      "sqrt",
      "start",
      "static",
      "stddev_pop",
      "stddev_samp",
      "submultiset",
      "subset",
      "substring",
      "substring_regex",
      "succeeds",
      "sum",
      "symmetric",
      "system",
      "system_time",
      "system_user",
      "table",
      "tablesample",
      "tan",
      "tanh",
      "then",
      "time",
      "timestamp",
      "timezone_hour",
      "timezone_minute",
      "to",
      "trailing",
      "translate",
      "translate_regex",
      "translation",
      "treat",
      "trigger",
      "trim",
      "trim_array",
      "true",
      "truncate",
      "uescape",
      "union",
      "unique",
      "unknown",
      "unnest",
      "update",
      "upper",
      "user",
      "using",
      "value",
      "values",
      "value_of",
      "var_pop",
      "var_samp",
      "varbinary",
      "varchar",
      "varying",
      "versioning",
      "when",
      "whenever",
      "where",
      "width_bucket",
      "window",
      "with",
      "within",
      "without",
      "year"
    ], m = [
      "abs",
      "acos",
      "array_agg",
      "asin",
      "atan",
      "avg",
      "cast",
      "ceil",
      "ceiling",
      "coalesce",
      "corr",
      "cos",
      "cosh",
      "count",
      "covar_pop",
      "covar_samp",
      "cume_dist",
      "dense_rank",
      "deref",
      "element",
      "exp",
      "extract",
      "first_value",
      "floor",
      "json_array",
      "json_arrayagg",
      "json_exists",
      "json_object",
      "json_objectagg",
      "json_query",
      "json_table",
      "json_table_primitive",
      "json_value",
      "lag",
      "last_value",
      "lead",
      "listagg",
      "ln",
      "log",
      "log10",
      "lower",
      "max",
      "min",
      "mod",
      "nth_value",
      "ntile",
      "nullif",
      "percent_rank",
      "percentile_cont",
      "percentile_disc",
      "position",
      "position_regex",
      "power",
      "rank",
      "regr_avgx",
      "regr_avgy",
      "regr_count",
      "regr_intercept",
      "regr_r2",
      "regr_slope",
      "regr_sxx",
      "regr_sxy",
      "regr_syy",
      "row_number",
      "sin",
      "sinh",
      "sqrt",
      "stddev_pop",
      "stddev_samp",
      "substring",
      "substring_regex",
      "sum",
      "tan",
      "tanh",
      "translate",
      "translate_regex",
      "treat",
      "trim",
      "trim_array",
      "unnest",
      "upper",
      "value_of",
      "var_pop",
      "var_samp",
      "width_bucket"
    ], b = [
      "current_catalog",
      "current_date",
      "current_default_transform_group",
      "current_path",
      "current_role",
      "current_schema",
      "current_transform_group_for_type",
      "current_user",
      "session_user",
      "system_time",
      "system_user",
      "current_time",
      "localtime",
      "current_timestamp",
      "localtimestamp"
    ], C = [
      "create table",
      "insert into",
      "primary key",
      "foreign key",
      "not null",
      "alter table",
      "add constraint",
      "grouping sets",
      "on overflow",
      "character set",
      "respect nulls",
      "ignore nulls",
      "nulls first",
      "nulls last",
      "depth first",
      "breadth first"
    ], N = m, z = [
      ...f,
      ...c
    ].filter((ge) => !m.includes(ge)), A = {
      className: "variable",
      begin: /@[a-z0-9][a-z0-9_]*/
    }, Q = {
      className: "operator",
      begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
      relevance: 0
    }, Te = {
      begin: r.concat(/\b/, r.either(...N), /\s*\(/),
      relevance: 0,
      keywords: { built_in: N }
    };
    function ce(ge, {
      exceptions: Y,
      when: fe
    } = {}) {
      const ae = fe;
      return Y = Y || [], ge.map((Re) => Re.match(/\|\d+$/) || Y.includes(Re) ? Re : ae(Re) ? `${Re}|0` : Re);
    }
    return {
      name: "SQL",
      case_insensitive: !0,
      // does not include {} or HTML tags `</`
      illegal: /[{}]|<\//,
      keywords: {
        $pattern: /\b[\w\.]+/,
        keyword: ce(z, { when: (ge) => ge.length < 3 }),
        literal: o,
        type: l,
        built_in: b
      },
      contains: [
        {
          begin: r.either(...C),
          relevance: 0,
          keywords: {
            $pattern: /[\w\.]+/,
            keyword: z.concat(C),
            literal: o,
            type: l
          }
        },
        {
          className: "type",
          begin: r.either(...a)
        },
        Te,
        A,
        i,
        s,
        e.C_NUMBER_MODE,
        e.C_BLOCK_COMMENT_MODE,
        n,
        Q
      ]
    };
  }
  return Xf = t, Xf;
}
var Zf, r0;
function dN() {
  if (r0)
    return Zf;
  r0 = 1;
  function t(e) {
    const r = e.regex, n = [
      "functions",
      "model",
      "data",
      "parameters",
      "quantities",
      "transformed",
      "generated"
    ], i = [
      "for",
      "in",
      "if",
      "else",
      "while",
      "break",
      "continue",
      "return"
    ], s = [
      "array",
      "tuple",
      "complex",
      "int",
      "real",
      "vector",
      "complex_vector",
      "ordered",
      "positive_ordered",
      "simplex",
      "unit_vector",
      "row_vector",
      "complex_row_vector",
      "matrix",
      "complex_matrix",
      "cholesky_factor_corr|10",
      "cholesky_factor_cov|10",
      "corr_matrix|10",
      "cov_matrix|10",
      "void"
    ], o = [
      "abs",
      "acos",
      "acosh",
      "add_diag",
      "algebra_solver",
      "algebra_solver_newton",
      "append_array",
      "append_col",
      "append_row",
      "asin",
      "asinh",
      "atan",
      "atan2",
      "atanh",
      "bessel_first_kind",
      "bessel_second_kind",
      "binary_log_loss",
      "block",
      "cbrt",
      "ceil",
      "chol2inv",
      "cholesky_decompose",
      "choose",
      "col",
      "cols",
      "columns_dot_product",
      "columns_dot_self",
      "complex_schur_decompose",
      "complex_schur_decompose_t",
      "complex_schur_decompose_u",
      "conj",
      "cos",
      "cosh",
      "cov_exp_quad",
      "crossprod",
      "csr_extract",
      "csr_extract_u",
      "csr_extract_v",
      "csr_extract_w",
      "csr_matrix_times_vector",
      "csr_to_dense_matrix",
      "cumulative_sum",
      "dae",
      "dae_tol",
      "determinant",
      "diag_matrix",
      "diagonal",
      "diag_post_multiply",
      "diag_pre_multiply",
      "digamma",
      "dims",
      "distance",
      "dot_product",
      "dot_self",
      "eigendecompose",
      "eigendecompose_sym",
      "eigenvalues",
      "eigenvalues_sym",
      "eigenvectors",
      "eigenvectors_sym",
      "erf",
      "erfc",
      "exp",
      "exp2",
      "expm1",
      "falling_factorial",
      "fdim",
      "fft",
      "fft2",
      "floor",
      "fma",
      "fmax",
      "fmin",
      "fmod",
      "gamma_p",
      "gamma_q",
      "generalized_inverse",
      "get_imag",
      "get_real",
      "head",
      "hmm_hidden_state_prob",
      "hmm_marginal",
      "hypot",
      "identity_matrix",
      "inc_beta",
      "integrate_1d",
      "integrate_ode",
      "integrate_ode_adams",
      "integrate_ode_bdf",
      "integrate_ode_rk45",
      "int_step",
      "inv",
      "inv_cloglog",
      "inv_erfc",
      "inverse",
      "inverse_spd",
      "inv_fft",
      "inv_fft2",
      "inv_inc_beta",
      "inv_logit",
      "inv_Phi",
      "inv_sqrt",
      "inv_square",
      "is_inf",
      "is_nan",
      "lambert_w0",
      "lambert_wm1",
      "lbeta",
      "lchoose",
      "ldexp",
      "lgamma",
      "linspaced_array",
      "linspaced_int_array",
      "linspaced_row_vector",
      "linspaced_vector",
      "lmgamma",
      "lmultiply",
      "log",
      "log1m",
      "log1m_exp",
      "log1m_inv_logit",
      "log1p",
      "log1p_exp",
      "log_determinant",
      "log_diff_exp",
      "log_falling_factorial",
      "log_inv_logit",
      "log_inv_logit_diff",
      "logit",
      "log_mix",
      "log_modified_bessel_first_kind",
      "log_rising_factorial",
      "log_softmax",
      "log_sum_exp",
      "machine_precision",
      "map_rect",
      "matrix_exp",
      "matrix_exp_multiply",
      "matrix_power",
      "max",
      "mdivide_left_spd",
      "mdivide_left_tri_low",
      "mdivide_right_spd",
      "mdivide_right_tri_low",
      "mean",
      "min",
      "modified_bessel_first_kind",
      "modified_bessel_second_kind",
      "multiply_lower_tri_self_transpose",
      "negative_infinity",
      "norm",
      "norm1",
      "norm2",
      "not_a_number",
      "num_elements",
      "ode_adams",
      "ode_adams_tol",
      "ode_adjoint_tol_ctl",
      "ode_bdf",
      "ode_bdf_tol",
      "ode_ckrk",
      "ode_ckrk_tol",
      "ode_rk45",
      "ode_rk45_tol",
      "one_hot_array",
      "one_hot_int_array",
      "one_hot_row_vector",
      "one_hot_vector",
      "ones_array",
      "ones_int_array",
      "ones_row_vector",
      "ones_vector",
      "owens_t",
      "Phi",
      "Phi_approx",
      "polar",
      "positive_infinity",
      "pow",
      "print",
      "prod",
      "proj",
      "qr",
      "qr_Q",
      "qr_R",
      "qr_thin",
      "qr_thin_Q",
      "qr_thin_R",
      "quad_form",
      "quad_form_diag",
      "quad_form_sym",
      "quantile",
      "rank",
      "reduce_sum",
      "reject",
      "rep_array",
      "rep_matrix",
      "rep_row_vector",
      "rep_vector",
      "reverse",
      "rising_factorial",
      "round",
      "row",
      "rows",
      "rows_dot_product",
      "rows_dot_self",
      "scale_matrix_exp_multiply",
      "sd",
      "segment",
      "sin",
      "singular_values",
      "sinh",
      "size",
      "softmax",
      "sort_asc",
      "sort_desc",
      "sort_indices_asc",
      "sort_indices_desc",
      "sqrt",
      "square",
      "squared_distance",
      "step",
      "sub_col",
      "sub_row",
      "sum",
      "svd",
      "svd_U",
      "svd_V",
      "symmetrize_from_lower_tri",
      "tail",
      "tan",
      "tanh",
      "target",
      "tcrossprod",
      "tgamma",
      "to_array_1d",
      "to_array_2d",
      "to_complex",
      "to_int",
      "to_matrix",
      "to_row_vector",
      "to_vector",
      "trace",
      "trace_gen_quad_form",
      "trace_quad_form",
      "trigamma",
      "trunc",
      "uniform_simplex",
      "variance",
      "zeros_array",
      "zeros_int_array",
      "zeros_row_vector"
    ], a = [
      "bernoulli",
      "bernoulli_logit",
      "bernoulli_logit_glm",
      "beta",
      "beta_binomial",
      "beta_proportion",
      "binomial",
      "binomial_logit",
      "categorical",
      "categorical_logit",
      "categorical_logit_glm",
      "cauchy",
      "chi_square",
      "dirichlet",
      "discrete_range",
      "double_exponential",
      "exp_mod_normal",
      "exponential",
      "frechet",
      "gamma",
      "gaussian_dlm_obs",
      "gumbel",
      "hmm_latent",
      "hypergeometric",
      "inv_chi_square",
      "inv_gamma",
      "inv_wishart",
      "inv_wishart_cholesky",
      "lkj_corr",
      "lkj_corr_cholesky",
      "logistic",
      "loglogistic",
      "lognormal",
      "multi_gp",
      "multi_gp_cholesky",
      "multinomial",
      "multinomial_logit",
      "multi_normal",
      "multi_normal_cholesky",
      "multi_normal_prec",
      "multi_student_cholesky_t",
      "multi_student_t",
      "multi_student_t_cholesky",
      "neg_binomial",
      "neg_binomial_2",
      "neg_binomial_2_log",
      "neg_binomial_2_log_glm",
      "normal",
      "normal_id_glm",
      "ordered_logistic",
      "ordered_logistic_glm",
      "ordered_probit",
      "pareto",
      "pareto_type_2",
      "poisson",
      "poisson_log",
      "poisson_log_glm",
      "rayleigh",
      "scaled_inv_chi_square",
      "skew_double_exponential",
      "skew_normal",
      "std_normal",
      "std_normal_log",
      "student_t",
      "uniform",
      "von_mises",
      "weibull",
      "wiener",
      "wishart",
      "wishart_cholesky"
    ], l = e.COMMENT(
      /\/\*/,
      /\*\//,
      {
        relevance: 0,
        contains: [
          {
            scope: "doctag",
            match: /@(return|param)/
          }
        ]
      }
    ), c = {
      scope: "meta",
      begin: /#include\b/,
      end: /$/,
      contains: [
        {
          match: /[a-z][a-z-._]+/,
          scope: "string"
        },
        e.C_LINE_COMMENT_MODE
      ]
    }, f = [
      "lower",
      "upper",
      "offset",
      "multiplier"
    ];
    return {
      name: "Stan",
      aliases: ["stanfuncs"],
      keywords: {
        $pattern: e.IDENT_RE,
        title: n,
        type: s,
        keyword: i,
        built_in: o
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        c,
        e.HASH_COMMENT_MODE,
        l,
        {
          scope: "built_in",
          match: /\s(pi|e|sqrt2|log2|log10)(?=\()/,
          relevance: 0
        },
        {
          match: r.concat(/[<,]\s*/, r.either(...f), /\s*=/),
          keywords: f
        },
        {
          scope: "keyword",
          match: /\btarget(?=\s*\+=)/
        },
        {
          // highlights the 'T' in T[,] for only Stan language distributrions
          match: [
            /~\s*/,
            r.either(...a),
            /(?:\(\))/,
            /\s*T(?=\s*\[)/
          ],
          scope: {
            2: "built_in",
            4: "keyword"
          }
        },
        {
          // highlights distributions that end with special endings
          scope: "built_in",
          keywords: a,
          begin: r.concat(/\w*/, r.either(...a), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/)
        },
        {
          // highlights distributions after ~
          begin: [
            /~/,
            /\s*/,
            r.concat(r.either(...a), /(?=\s*[\(.*\)])/)
          ],
          scope: { 3: "built_in" }
        },
        {
          // highlights user defined distributions after ~
          begin: [
            /~/,
            /\s*\w+(?=\s*[\(.*\)])/,
            "(?!.*/\b(" + r.either(...a) + ")\b)"
          ],
          scope: { 2: "title.function" }
        },
        {
          // highlights user defined distributions with special endings
          scope: "title.function",
          begin: /\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/
        },
        {
          scope: "number",
          match: r.concat(
            // Comes from @RunDevelopment accessed 11/29/2021 at
            // https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56
            // start of big noncapture group which
            // 1. gets numbers that are by themselves
            // 2. numbers that are separated by _
            // 3. numbers that are separted by .
            /(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)/,
            // grabs scientific notation
            // grabs complex numbers with i
            /(?:[eE][+-]?\d+(?:_\d+)*)?i?(?!\w)/
          ),
          relevance: 0
        },
        {
          scope: "string",
          begin: /"/,
          end: /"/
        }
      ]
    };
  }
  return Zf = t, Zf;
}
var Jf, n0;
function fN() {
  if (n0)
    return Jf;
  n0 = 1;
  function t(e) {
    return {
      name: "Stata",
      aliases: [
        "do",
        "ado"
      ],
      case_insensitive: !0,
      keywords: "if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey bias binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 bubble bubbleplot ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error esize est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 forest forestplot form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate funnel funnelplot g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labbe labbeplot labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize menl meqparse mer merg merge meta mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trimfill trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5",
      contains: [
        {
          className: "symbol",
          begin: /`[a-zA-Z0-9_]+'/
        },
        {
          className: "variable",
          begin: /\$\{?[a-zA-Z0-9_]+\}?/,
          relevance: 0
        },
        {
          className: "string",
          variants: [
            { begin: `\`"[^\r
]*?"'` },
            { begin: `"[^\r
"]*"` }
          ]
        },
        {
          className: "built_in",
          variants: [{ begin: "\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\()" }]
        },
        e.COMMENT("^[ 	]*\\*.*$", !1),
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return Jf = t, Jf;
}
var ep, i0;
function pN() {
  if (i0)
    return ep;
  i0 = 1;
  function t(e) {
    return {
      name: "STEP Part 21",
      aliases: [
        "p21",
        "step",
        "stp"
      ],
      case_insensitive: !0,
      // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.
      keywords: {
        $pattern: "[A-Z_][A-Z0-9_.]*",
        keyword: [
          "HEADER",
          "ENDSEC",
          "DATA"
        ]
      },
      contains: [
        {
          className: "meta",
          begin: "ISO-10303-21;",
          relevance: 10
        },
        {
          className: "meta",
          begin: "END-ISO-10303-21;",
          relevance: 10
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.COMMENT("/\\*\\*!", "\\*/"),
        e.C_NUMBER_MODE,
        e.inherit(e.APOS_STRING_MODE, { illegal: null }),
        e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        {
          className: "symbol",
          variants: [
            {
              begin: "#",
              end: "\\d+",
              illegal: "\\W"
            }
          ]
        }
      ]
    };
  }
  return ep = t, ep;
}
var tp, s0;
function _N() {
  if (s0)
    return tp;
  s0 = 1;
  const t = (a) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: a.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        a.APOS_STRING_MODE,
        a.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: a.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], r = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ], n = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ], i = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ], s = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
    // reverse makes sure longer attributes `font-weight` are matched fully
    // instead of getting false positives on say `font`
  ].reverse();
  function o(a) {
    const l = t(a), c = "and or not only", f = {
      className: "variable",
      begin: "\\$" + a.IDENT_RE
    }, m = [
      "charset",
      "css",
      "debug",
      "extend",
      "font-face",
      "for",
      "import",
      "include",
      "keyframes",
      "media",
      "mixin",
      "page",
      "warn",
      "while"
    ], b = "(?=[.\\s\\n[:,(])";
    return {
      name: "Stylus",
      aliases: ["styl"],
      case_insensitive: !1,
      keywords: "if else for in",
      illegal: "(" + [
        "\\?",
        "(\\bReturn\\b)",
        // monkey
        "(\\bEnd\\b)",
        // monkey
        "(\\bend\\b)",
        // vbscript
        "(\\bdef\\b)",
        // gradle
        ";",
        // a whole lot of languages
        "#\\s",
        // markdown
        "\\*\\s",
        // markdown
        "===\\s",
        // markdown
        "\\|",
        "%"
        // prolog
      ].join("|") + ")",
      contains: [
        // strings
        a.QUOTE_STRING_MODE,
        a.APOS_STRING_MODE,
        // comments
        a.C_LINE_COMMENT_MODE,
        a.C_BLOCK_COMMENT_MODE,
        // hex colors
        l.HEXCOLOR,
        // class tag
        {
          begin: "\\.[a-zA-Z][a-zA-Z0-9_-]*" + b,
          className: "selector-class"
        },
        // id tag
        {
          begin: "#[a-zA-Z][a-zA-Z0-9_-]*" + b,
          className: "selector-id"
        },
        // tags
        {
          begin: "\\b(" + e.join("|") + ")" + b,
          className: "selector-tag"
        },
        // psuedo selectors
        {
          className: "selector-pseudo",
          begin: "&?:(" + n.join("|") + ")" + b
        },
        {
          className: "selector-pseudo",
          begin: "&?:(:)?(" + i.join("|") + ")" + b
        },
        l.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "keyword",
          begin: /@media/,
          starts: {
            end: /[{;}]/,
            keywords: {
              $pattern: /[a-z-]+/,
              keyword: c,
              attribute: r.join(" ")
            },
            contains: [l.CSS_NUMBER_MODE]
          }
        },
        // @ keywords
        {
          className: "keyword",
          begin: "@((-(o|moz|ms|webkit)-)?(" + m.join("|") + "))\\b"
        },
        // variables
        f,
        // dimension
        l.CSS_NUMBER_MODE,
        // functions
        //  - only from beginning of line + whitespace
        {
          className: "function",
          begin: "^[a-zA-Z][a-zA-Z0-9_-]*\\(.*\\)",
          illegal: "[\\n]",
          returnBegin: !0,
          contains: [
            {
              className: "title",
              begin: "\\b[a-zA-Z][a-zA-Z0-9_-]*"
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              contains: [
                l.HEXCOLOR,
                f,
                a.APOS_STRING_MODE,
                l.CSS_NUMBER_MODE,
                a.QUOTE_STRING_MODE
              ]
            }
          ]
        },
        // css variables
        l.CSS_VARIABLE,
        // attributes
        //  - only from beginning of line + whitespace
        //  - must have whitespace after it
        {
          className: "attribute",
          begin: "\\b(" + s.join("|") + ")\\b",
          starts: {
            // value container
            end: /;|$/,
            contains: [
              l.HEXCOLOR,
              f,
              a.APOS_STRING_MODE,
              a.QUOTE_STRING_MODE,
              l.CSS_NUMBER_MODE,
              a.C_BLOCK_COMMENT_MODE,
              l.IMPORTANT,
              l.FUNCTION_DISPATCH
            ],
            illegal: /\./,
            relevance: 0
          }
        },
        l.FUNCTION_DISPATCH
      ]
    };
  }
  return tp = o, tp;
}
var rp, o0;
function hN() {
  if (o0)
    return rp;
  o0 = 1;
  function t(e) {
    return {
      name: "SubUnit",
      case_insensitive: !0,
      contains: [
        {
          className: "string",
          begin: `\\[
(multipart)?`,
          end: `\\]
`
        },
        {
          className: "string",
          begin: "\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}.\\d+Z"
        },
        {
          className: "string",
          begin: "(\\+|-)\\d+"
        },
        {
          className: "keyword",
          relevance: 10,
          variants: [
            { begin: "^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?" },
            { begin: "^progress(:?)(\\s+)?(pop|push)?" },
            { begin: "^tags:" },
            { begin: "^time:" }
          ]
        }
      ]
    };
  }
  return rp = t, rp;
}
var np, a0;
function mN() {
  if (a0)
    return np;
  a0 = 1;
  function t(Re) {
    return Re ? typeof Re == "string" ? Re : Re.source : null;
  }
  function e(Re) {
    return r("(?=", Re, ")");
  }
  function r(...Re) {
    return Re.map((Ce) => t(Ce)).join("");
  }
  function n(Re) {
    const pe = Re[Re.length - 1];
    return typeof pe == "object" && pe.constructor === Object ? (Re.splice(Re.length - 1, 1), pe) : {};
  }
  function i(...Re) {
    return "(" + (n(Re).capture ? "" : "?:") + Re.map((J) => t(J)).join("|") + ")";
  }
  const s = (Re) => r(
    /\b/,
    Re,
    /\w$/.test(Re) ? /\b/ : /\B/
  ), o = [
    "Protocol",
    // contextual
    "Type"
    // contextual
  ].map(s), a = [
    "init",
    "self"
  ].map(s), l = [
    "Any",
    "Self"
  ], c = [
    // strings below will be fed into the regular `keywords` engine while regex
    // will result in additional modes being created to scan for those keywords to
    // avoid conflicts with other rules
    "actor",
    "any",
    // contextual
    "associatedtype",
    "async",
    "await",
    /as\?/,
    // operator
    /as!/,
    // operator
    "as",
    // operator
    "borrowing",
    // contextual
    "break",
    "case",
    "catch",
    "class",
    "consume",
    // contextual
    "consuming",
    // contextual
    "continue",
    "convenience",
    // contextual
    "copy",
    // contextual
    "default",
    "defer",
    "deinit",
    "didSet",
    // contextual
    "distributed",
    "do",
    "dynamic",
    // contextual
    "each",
    "else",
    "enum",
    "extension",
    "fallthrough",
    /fileprivate\(set\)/,
    "fileprivate",
    "final",
    // contextual
    "for",
    "func",
    "get",
    // contextual
    "guard",
    "if",
    "import",
    "indirect",
    // contextual
    "infix",
    // contextual
    /init\?/,
    /init!/,
    "inout",
    /internal\(set\)/,
    "internal",
    "in",
    "is",
    // operator
    "isolated",
    // contextual
    "nonisolated",
    // contextual
    "lazy",
    // contextual
    "let",
    "macro",
    "mutating",
    // contextual
    "nonmutating",
    // contextual
    /open\(set\)/,
    // contextual
    "open",
    // contextual
    "operator",
    "optional",
    // contextual
    "override",
    // contextual
    "postfix",
    // contextual
    "precedencegroup",
    "prefix",
    // contextual
    /private\(set\)/,
    "private",
    "protocol",
    /public\(set\)/,
    "public",
    "repeat",
    "required",
    // contextual
    "rethrows",
    "return",
    "set",
    // contextual
    "some",
    // contextual
    "static",
    "struct",
    "subscript",
    "super",
    "switch",
    "throws",
    "throw",
    /try\?/,
    // operator
    /try!/,
    // operator
    "try",
    // operator
    "typealias",
    /unowned\(safe\)/,
    // contextual
    /unowned\(unsafe\)/,
    // contextual
    "unowned",
    // contextual
    "var",
    "weak",
    // contextual
    "where",
    "while",
    "willSet"
    // contextual
  ], f = [
    "false",
    "nil",
    "true"
  ], m = [
    "assignment",
    "associativity",
    "higherThan",
    "left",
    "lowerThan",
    "none",
    "right"
  ], b = [
    "#colorLiteral",
    "#column",
    "#dsohandle",
    "#else",
    "#elseif",
    "#endif",
    "#error",
    "#file",
    "#fileID",
    "#fileLiteral",
    "#filePath",
    "#function",
    "#if",
    "#imageLiteral",
    "#keyPath",
    "#line",
    "#selector",
    "#sourceLocation",
    "#warning"
  ], C = [
    "abs",
    "all",
    "any",
    "assert",
    "assertionFailure",
    "debugPrint",
    "dump",
    "fatalError",
    "getVaList",
    "isKnownUniquelyReferenced",
    "max",
    "min",
    "numericCast",
    "pointwiseMax",
    "pointwiseMin",
    "precondition",
    "preconditionFailure",
    "print",
    "readLine",
    "repeatElement",
    "sequence",
    "stride",
    "swap",
    "swift_unboxFromSwiftValueWithType",
    "transcode",
    "type",
    "unsafeBitCast",
    "unsafeDowncast",
    "withExtendedLifetime",
    "withUnsafeMutablePointer",
    "withUnsafePointer",
    "withVaList",
    "withoutActuallyEscaping",
    "zip"
  ], N = i(
    /[/=\-+!*%<>&|^~?]/,
    /[\u00A1-\u00A7]/,
    /[\u00A9\u00AB]/,
    /[\u00AC\u00AE]/,
    /[\u00B0\u00B1]/,
    /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
    /[\u2016-\u2017]/,
    /[\u2020-\u2027]/,
    /[\u2030-\u203E]/,
    /[\u2041-\u2053]/,
    /[\u2055-\u205E]/,
    /[\u2190-\u23FF]/,
    /[\u2500-\u2775]/,
    /[\u2794-\u2BFF]/,
    /[\u2E00-\u2E7F]/,
    /[\u3001-\u3003]/,
    /[\u3008-\u3020]/,
    /[\u3030]/
  ), z = i(
    N,
    /[\u0300-\u036F]/,
    /[\u1DC0-\u1DFF]/,
    /[\u20D0-\u20FF]/,
    /[\uFE00-\uFE0F]/,
    /[\uFE20-\uFE2F]/
    // TODO: The following characters are also allowed, but the regex isn't supported yet.
    // /[\u{E0100}-\u{E01EF}]/u
  ), A = r(N, z, "*"), Q = i(
    /[a-zA-Z_]/,
    /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
    /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
    /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
    /[\u1E00-\u1FFF]/,
    /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
    /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
    /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
    /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
    /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
    /[\uFE47-\uFEFE\uFF00-\uFFFD]/
    // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
    // The following characters are also allowed, but the regexes aren't supported yet.
    // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
    // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
    // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
    // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
  ), Te = i(
    Q,
    /\d/,
    /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
  ), ce = r(Q, Te, "*"), ge = r(/[A-Z]/, Te, "*"), Y = [
    "attached",
    "autoclosure",
    r(/convention\(/, i("swift", "block", "c"), /\)/),
    "discardableResult",
    "dynamicCallable",
    "dynamicMemberLookup",
    "escaping",
    "freestanding",
    "frozen",
    "GKInspectable",
    "IBAction",
    "IBDesignable",
    "IBInspectable",
    "IBOutlet",
    "IBSegueAction",
    "inlinable",
    "main",
    "nonobjc",
    "NSApplicationMain",
    "NSCopying",
    "NSManaged",
    r(/objc\(/, ce, /\)/),
    "objc",
    "objcMembers",
    "propertyWrapper",
    "requires_stored_property_inits",
    "resultBuilder",
    "Sendable",
    "testable",
    "UIApplicationMain",
    "unchecked",
    "unknown",
    "usableFromInline",
    "warn_unqualified_access"
  ], fe = [
    "iOS",
    "iOSApplicationExtension",
    "macOS",
    "macOSApplicationExtension",
    "macCatalyst",
    "macCatalystApplicationExtension",
    "watchOS",
    "watchOSApplicationExtension",
    "tvOS",
    "tvOSApplicationExtension",
    "swift"
  ];
  function ae(Re) {
    const pe = {
      match: /\s+/,
      relevance: 0
    }, Ce = Re.COMMENT(
      "/\\*",
      "\\*/",
      { contains: ["self"] }
    ), J = [
      Re.C_LINE_COMMENT_MODE,
      Ce
    ], R = {
      match: [
        /\./,
        i(...o, ...a)
      ],
      className: { 2: "keyword" }
    }, ve = {
      // Consume .keyword to prevent highlighting properties and methods as keywords.
      match: r(/\./, i(...c)),
      relevance: 0
    }, F = c.filter((V) => typeof V == "string").concat(["_|0"]), ne = c.filter((V) => typeof V != "string").concat(l).map(s), H = { variants: [
      {
        className: "keyword",
        match: i(...ne, ...a)
      }
    ] }, we = {
      $pattern: i(
        /\b\w+/,
        // regular keywords
        /#\w+/
        // number keywords
      ),
      keyword: F.concat(b),
      literal: f
    }, _e = [
      R,
      ve,
      H
    ], X = {
      // Consume .built_in to prevent highlighting properties and methods.
      match: r(/\./, i(...C)),
      relevance: 0
    }, w = {
      className: "built_in",
      match: r(/\b/, i(...C), /(?=\()/)
    }, h = [
      X,
      w
    ], d = {
      // Prevent -> from being highlighting as an operator.
      match: /->/,
      relevance: 0
    }, _ = {
      className: "operator",
      relevance: 0,
      variants: [
        { match: A },
        {
          // dot-operator: only operators that start with a dot are allowed to use dots as
          // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
          // characters that may also include dots.
          match: `\\.(\\.|${z})+`
        }
      ]
    }, g = [
      d,
      _
    ], $ = "([0-9]_*)+", I = "([0-9a-fA-F]_*)+", D = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal floating-point-literal (subsumes decimal-literal)
        { match: `\\b(${$})(\\.(${$}))?([eE][+-]?(${$}))?\\b` },
        // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
        { match: `\\b0x(${I})(\\.(${I}))?([pP][+-]?(${$}))?\\b` },
        // octal-literal
        { match: /\b0o([0-7]_*)+\b/ },
        // binary-literal
        { match: /\b0b([01]_*)+\b/ }
      ]
    }, ie = (V = "") => ({
      className: "subst",
      variants: [
        { match: r(/\\/, V, /[0\\tnr"']/) },
        { match: r(/\\/, V, /u\{[0-9a-fA-F]{1,8}\}/) }
      ]
    }), Me = (V = "") => ({
      className: "subst",
      match: r(/\\/, V, /[\t ]*(?:[\r\n]|\r\n)/)
    }), Je = (V = "") => ({
      className: "subst",
      label: "interpol",
      begin: r(/\\/, V, /\(/),
      end: /\)/
    }), it = (V = "") => ({
      begin: r(V, /"""/),
      end: r(/"""/, V),
      contains: [
        ie(V),
        Me(V),
        Je(V)
      ]
    }), dt = (V = "") => ({
      begin: r(V, /"/),
      end: r(/"/, V),
      contains: [
        ie(V),
        Je(V)
      ]
    }), St = {
      className: "string",
      variants: [
        it(),
        it("#"),
        it("##"),
        it("###"),
        dt(),
        dt("#"),
        dt("##"),
        dt("###")
      ]
    }, gt = [
      Re.BACKSLASH_ESCAPE,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [Re.BACKSLASH_ESCAPE]
      }
    ], wt = {
      begin: /\/[^\s](?=[^/\n]*\/)/,
      end: /\//,
      contains: gt
    }, bt = (V) => {
      const ke = r(V, /\//), O = r(/\//, V);
      return {
        begin: ke,
        end: O,
        contains: [
          ...gt,
          {
            scope: "comment",
            begin: `#(?!.*${O})`,
            end: /$/
          }
        ]
      };
    }, Tt = {
      scope: "regexp",
      variants: [
        bt("###"),
        bt("##"),
        bt("#"),
        wt
      ]
    }, yt = { match: r(/`/, ce, /`/) }, Qe = {
      className: "variable",
      match: /\$\d+/
    }, Ne = {
      className: "variable",
      match: `\\$${Te}+`
    }, Le = [
      yt,
      Qe,
      Ne
    ], qe = {
      match: /(@|#(un)?)available/,
      scope: "keyword",
      starts: { contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: fe,
          contains: [
            ...g,
            D,
            St
          ]
        }
      ] }
    }, y = {
      scope: "keyword",
      match: r(/@/, i(...Y))
    }, P = {
      scope: "meta",
      match: r(/@/, ce)
    }, be = [
      qe,
      y,
      P
    ], Oe = {
      match: e(/\b[A-Z]/),
      relevance: 0,
      contains: [
        {
          // Common Apple frameworks, for relevance boost
          className: "type",
          match: r(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, Te, "+")
        },
        {
          // Type identifier
          className: "type",
          match: ge,
          relevance: 0
        },
        {
          // Optional type
          match: /[?!]+/,
          relevance: 0
        },
        {
          // Variadic parameter
          match: /\.\.\./,
          relevance: 0
        },
        {
          // Protocol composition
          match: r(/\s+&\s+/, e(ge)),
          relevance: 0
        }
      ]
    }, Ue = {
      begin: /</,
      end: />/,
      keywords: we,
      contains: [
        ...J,
        ..._e,
        ...be,
        d,
        Oe
      ]
    };
    Oe.contains.push(Ue);
    const Xe = {
      match: r(ce, /\s*:/),
      keywords: "_|0",
      relevance: 0
    }, u = {
      begin: /\(/,
      end: /\)/,
      relevance: 0,
      keywords: we,
      contains: [
        "self",
        Xe,
        ...J,
        Tt,
        ..._e,
        ...h,
        ...g,
        D,
        St,
        ...Le,
        ...be,
        Oe
      ]
    }, se = {
      begin: /</,
      end: />/,
      keywords: "repeat each",
      contains: [
        ...J,
        Oe
      ]
    }, re = {
      begin: i(
        e(r(ce, /\s*:/)),
        e(r(ce, /\s+/, ce, /\s*:/))
      ),
      end: /:/,
      relevance: 0,
      contains: [
        {
          className: "keyword",
          match: /\b_\b/
        },
        {
          className: "params",
          match: ce
        }
      ]
    }, W = {
      begin: /\(/,
      end: /\)/,
      keywords: we,
      contains: [
        re,
        ...J,
        ..._e,
        ...g,
        D,
        St,
        ...be,
        Oe,
        u
      ],
      endsParent: !0,
      illegal: /["']/
    }, $e = {
      match: [
        /(func|macro)/,
        /\s+/,
        i(yt.match, ce, A)
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        se,
        W,
        pe
      ],
      illegal: [
        /\[/,
        /%/
      ]
    }, S = {
      match: [
        /\b(?:subscript|init[?!]?)/,
        /\s*(?=[<(])/
      ],
      className: { 1: "keyword" },
      contains: [
        se,
        W,
        pe
      ],
      illegal: /\[|%/
    }, Z = {
      match: [
        /operator/,
        /\s+/,
        A
      ],
      className: {
        1: "keyword",
        3: "title"
      }
    }, Be = {
      begin: [
        /precedencegroup/,
        /\s+/,
        ge
      ],
      className: {
        1: "keyword",
        3: "title"
      },
      contains: [Oe],
      keywords: [
        ...m,
        ...f
      ],
      end: /}/
    };
    for (const V of St.variants) {
      const ke = V.contains.find((Ke) => Ke.label === "interpol");
      ke.keywords = we;
      const O = [
        ..._e,
        ...h,
        ...g,
        D,
        St,
        ...Le
      ];
      ke.contains = [
        ...O,
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            "self",
            ...O
          ]
        }
      ];
    }
    return {
      name: "Swift",
      keywords: we,
      contains: [
        ...J,
        $e,
        S,
        {
          beginKeywords: "struct protocol class extension enum actor",
          end: "\\{",
          excludeEnd: !0,
          keywords: we,
          contains: [
            Re.inherit(Re.TITLE_MODE, {
              className: "title.class",
              begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
            }),
            ..._e
          ]
        },
        Z,
        Be,
        {
          beginKeywords: "import",
          end: /$/,
          contains: [...J],
          relevance: 0
        },
        Tt,
        ..._e,
        ...h,
        ...g,
        D,
        St,
        ...Le,
        ...be,
        Oe,
        u
      ]
    };
  }
  return np = ae, np;
}
var ip, l0;
function gN() {
  if (l0)
    return ip;
  l0 = 1;
  function t(e) {
    return {
      name: "Tagger Script",
      contains: [
        {
          className: "comment",
          begin: /\$noop\(/,
          end: /\)/,
          contains: [
            { begin: /\\[()]/ },
            {
              begin: /\(/,
              end: /\)/,
              contains: [
                { begin: /\\[()]/ },
                "self"
              ]
            }
          ],
          relevance: 10
        },
        {
          className: "keyword",
          begin: /\$[_a-zA-Z0-9]+(?=\()/
        },
        {
          className: "variable",
          begin: /%[_a-zA-Z0-9:]+%/
        },
        {
          className: "symbol",
          begin: /\\[\\nt$%,()]/
        },
        {
          className: "symbol",
          begin: /\\u[a-fA-F0-9]{4}/
        }
      ]
    };
  }
  return ip = t, ip;
}
var sp, c0;
function $N() {
  if (c0)
    return sp;
  c0 = 1;
  function t(e) {
    const r = "true false yes no null", n = "[\\w#;/?:@&=+$,.~*'()[\\]]+", i = {
      className: "attr",
      variants: [
        { begin: "\\w[\\w :\\/.-]*:(?=[ 	]|$)" },
        {
          // double quoted keys
          begin: '"\\w[\\w :\\/.-]*":(?=[ 	]|$)'
        },
        {
          // single quoted keys
          begin: "'\\w[\\w :\\/.-]*':(?=[ 	]|$)"
        }
      ]
    }, s = {
      className: "template-variable",
      variants: [
        {
          // jinja templates Ansible
          begin: /\{\{/,
          end: /\}\}/
        },
        {
          // Ruby i18n
          begin: /%\{/,
          end: /\}/
        }
      ]
    }, o = {
      className: "string",
      relevance: 0,
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        { begin: /\S+/ }
      ],
      contains: [
        e.BACKSLASH_ESCAPE,
        s
      ]
    }, a = e.inherit(o, { variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      },
      { begin: /[^\s,{}[\]]+/ }
    ] }), b = {
      className: "number",
      begin: "\\b" + "[0-9]{4}(-[0-9][0-9]){0,2}" + "([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?" + "(\\.[0-9]*)?" + "([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?" + "\\b"
    }, C = {
      end: ",",
      endsWithParent: !0,
      excludeEnd: !0,
      keywords: r,
      relevance: 0
    }, N = {
      begin: /\{/,
      end: /\}/,
      contains: [C],
      illegal: "\\n",
      relevance: 0
    }, z = {
      begin: "\\[",
      end: "\\]",
      contains: [C],
      illegal: "\\n",
      relevance: 0
    }, A = [
      i,
      {
        className: "meta",
        begin: "^---\\s*$",
        relevance: 10
      },
      {
        // multi line string
        // Blocks start with a | or > followed by a newline
        //
        // Indentation of subsequent lines must be the same to
        // be considered part of the block
        className: "string",
        begin: "[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"
      },
      {
        // Ruby/Rails erb
        begin: "<%[%=-]?",
        end: "[%-]?%>",
        subLanguage: "ruby",
        excludeBegin: !0,
        excludeEnd: !0,
        relevance: 0
      },
      {
        // named tags
        className: "type",
        begin: "!\\w+!" + n
      },
      // https://yaml.org/spec/1.2/spec.html#id2784064
      {
        // verbatim tags
        className: "type",
        begin: "!<" + n + ">"
      },
      {
        // primary tags
        className: "type",
        begin: "!" + n
      },
      {
        // secondary tags
        className: "type",
        begin: "!!" + n
      },
      {
        // fragment id &ref
        className: "meta",
        begin: "&" + e.UNDERSCORE_IDENT_RE + "$"
      },
      {
        // fragment reference *ref
        className: "meta",
        begin: "\\*" + e.UNDERSCORE_IDENT_RE + "$"
      },
      {
        // array listing
        className: "bullet",
        // TODO: remove |$ hack when we have proper look-ahead support
        begin: "-(?=[ ]|$)",
        relevance: 0
      },
      e.HASH_COMMENT_MODE,
      {
        beginKeywords: r,
        keywords: { literal: r }
      },
      b,
      // numbers are any valid C-style number that
      // sit isolated from other words
      {
        className: "number",
        begin: e.C_NUMBER_RE + "\\b",
        relevance: 0
      },
      N,
      z,
      o
    ], Q = [...A];
    return Q.pop(), Q.push(a), C.contains = Q, {
      name: "YAML",
      case_insensitive: !0,
      aliases: ["yml"],
      contains: A
    };
  }
  return sp = t, sp;
}
var op, u0;
function bN() {
  if (u0)
    return op;
  u0 = 1;
  function t(e) {
    return {
      name: "Test Anything Protocol",
      case_insensitive: !0,
      contains: [
        e.HASH_COMMENT_MODE,
        // version of format and total amount of testcases
        {
          className: "meta",
          variants: [
            { begin: "^TAP version (\\d+)$" },
            { begin: "^1\\.\\.(\\d+)$" }
          ]
        },
        // YAML block
        {
          begin: /---$/,
          end: "\\.\\.\\.$",
          subLanguage: "yaml",
          relevance: 0
        },
        // testcase number
        {
          className: "number",
          begin: " (\\d+) "
        },
        // testcase status and description
        {
          className: "symbol",
          variants: [
            { begin: "^ok" },
            { begin: "^not ok" }
          ]
        }
      ]
    };
  }
  return op = t, op;
}
var ap, d0;
function EN() {
  if (d0)
    return ap;
  d0 = 1;
  function t(e) {
    const r = e.regex, n = /[a-zA-Z_][a-zA-Z0-9_]*/, i = {
      className: "number",
      variants: [
        e.BINARY_NUMBER_MODE,
        e.C_NUMBER_MODE
      ]
    };
    return {
      name: "Tcl",
      aliases: ["tk"],
      keywords: [
        "after",
        "append",
        "apply",
        "array",
        "auto_execok",
        "auto_import",
        "auto_load",
        "auto_mkindex",
        "auto_mkindex_old",
        "auto_qualify",
        "auto_reset",
        "bgerror",
        "binary",
        "break",
        "catch",
        "cd",
        "chan",
        "clock",
        "close",
        "concat",
        "continue",
        "dde",
        "dict",
        "encoding",
        "eof",
        "error",
        "eval",
        "exec",
        "exit",
        "expr",
        "fblocked",
        "fconfigure",
        "fcopy",
        "file",
        "fileevent",
        "filename",
        "flush",
        "for",
        "foreach",
        "format",
        "gets",
        "glob",
        "global",
        "history",
        "http",
        "if",
        "incr",
        "info",
        "interp",
        "join",
        "lappend|10",
        "lassign|10",
        "lindex|10",
        "linsert|10",
        "list",
        "llength|10",
        "load",
        "lrange|10",
        "lrepeat|10",
        "lreplace|10",
        "lreverse|10",
        "lsearch|10",
        "lset|10",
        "lsort|10",
        "mathfunc",
        "mathop",
        "memory",
        "msgcat",
        "namespace",
        "open",
        "package",
        "parray",
        "pid",
        "pkg::create",
        "pkg_mkIndex",
        "platform",
        "platform::shell",
        "proc",
        "puts",
        "pwd",
        "read",
        "refchan",
        "regexp",
        "registry",
        "regsub|10",
        "rename",
        "return",
        "safe",
        "scan",
        "seek",
        "set",
        "socket",
        "source",
        "split",
        "string",
        "subst",
        "switch",
        "tcl_endOfWord",
        "tcl_findLibrary",
        "tcl_startOfNextWord",
        "tcl_startOfPreviousWord",
        "tcl_wordBreakAfter",
        "tcl_wordBreakBefore",
        "tcltest",
        "tclvars",
        "tell",
        "time",
        "tm",
        "trace",
        "unknown",
        "unload",
        "unset",
        "update",
        "uplevel",
        "upvar",
        "variable",
        "vwait",
        "while"
      ],
      contains: [
        e.COMMENT(";[ \\t]*#", "$"),
        e.COMMENT("^[ \\t]*#", "$"),
        {
          beginKeywords: "proc",
          end: "[\\{]",
          excludeEnd: !0,
          contains: [
            {
              className: "title",
              begin: "[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
              end: "[ \\t\\n\\r]",
              endsWithParent: !0,
              excludeEnd: !0
            }
          ]
        },
        {
          className: "variable",
          variants: [
            { begin: r.concat(
              /\$/,
              r.optional(/::/),
              n,
              "(::",
              n,
              ")*"
            ) },
            {
              begin: "\\$\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
              end: "\\}",
              contains: [i]
            }
          ]
        },
        {
          className: "string",
          contains: [e.BACKSLASH_ESCAPE],
          variants: [e.inherit(e.QUOTE_STRING_MODE, { illegal: null })]
        },
        i
      ]
    };
  }
  return ap = t, ap;
}
var lp, f0;
function vN() {
  if (f0)
    return lp;
  f0 = 1;
  function t(e) {
    const r = [
      "bool",
      "byte",
      "i16",
      "i32",
      "i64",
      "double",
      "string",
      "binary"
    ];
    return {
      name: "Thrift",
      keywords: {
        keyword: [
          "namespace",
          "const",
          "typedef",
          "struct",
          "enum",
          "service",
          "exception",
          "void",
          "oneway",
          "set",
          "list",
          "map",
          "required",
          "optional"
        ],
        type: r,
        literal: "true false"
      },
      contains: [
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "class",
          beginKeywords: "struct enum service exception",
          end: /\{/,
          illegal: /\n/,
          contains: [
            e.inherit(e.TITLE_MODE, {
              // hack: eating everything after the first title
              starts: {
                endsWithParent: !0,
                excludeEnd: !0
              }
            })
          ]
        },
        {
          begin: "\\b(set|list|map)\\s*<",
          keywords: { type: [
            ...r,
            "set",
            "list",
            "map"
          ] },
          end: ">",
          contains: ["self"]
        }
      ]
    };
  }
  return lp = t, lp;
}
var cp, p0;
function SN() {
  if (p0)
    return cp;
  p0 = 1;
  function t(e) {
    const r = {
      className: "number",
      begin: "[1-9][0-9]*",
      /* no leading zeros */
      relevance: 0
    }, n = {
      className: "symbol",
      begin: ":[^\\]]+"
    }, i = {
      className: "built_in",
      begin: "(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[",
      end: "\\]",
      contains: [
        "self",
        r,
        n
      ]
    }, s = {
      className: "built_in",
      begin: "(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[",
      end: "\\]",
      contains: [
        "self",
        r,
        e.QUOTE_STRING_MODE,
        /* for pos section at bottom */
        n
      ]
    };
    return {
      name: "TP",
      keywords: {
        keyword: [
          "ABORT",
          "ACC",
          "ADJUST",
          "AND",
          "AP_LD",
          "BREAK",
          "CALL",
          "CNT",
          "COL",
          "CONDITION",
          "CONFIG",
          "DA",
          "DB",
          "DIV",
          "DETECT",
          "ELSE",
          "END",
          "ENDFOR",
          "ERR_NUM",
          "ERROR_PROG",
          "FINE",
          "FOR",
          "GP",
          "GUARD",
          "INC",
          "IF",
          "JMP",
          "LINEAR_MAX_SPEED",
          "LOCK",
          "MOD",
          "MONITOR",
          "OFFSET",
          "Offset",
          "OR",
          "OVERRIDE",
          "PAUSE",
          "PREG",
          "PTH",
          "RT_LD",
          "RUN",
          "SELECT",
          "SKIP",
          "Skip",
          "TA",
          "TB",
          "TO",
          "TOOL_OFFSET",
          "Tool_Offset",
          "UF",
          "UT",
          "UFRAME_NUM",
          "UTOOL_NUM",
          "UNLOCK",
          "WAIT",
          "X",
          "Y",
          "Z",
          "W",
          "P",
          "R",
          "STRLEN",
          "SUBSTR",
          "FINDSTR",
          "VOFFSET",
          "PROG",
          "ATTR",
          "MN",
          "POS"
        ],
        literal: [
          "ON",
          "OFF",
          "max_speed",
          "LPOS",
          "JPOS",
          "ENABLE",
          "DISABLE",
          "START",
          "STOP",
          "RESET"
        ]
      },
      contains: [
        i,
        s,
        {
          className: "keyword",
          begin: "/(PROG|ATTR|MN|POS|END)\\b"
        },
        {
          /* this is for cases like ,CALL */
          className: "keyword",
          begin: "(CALL|RUN|POINT_LOGIC|LBL)\\b"
        },
        {
          /* this is for cases like CNT100 where the default lexemes do not
           * separate the keyword and the number */
          className: "keyword",
          begin: "\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)"
        },
        {
          /* to catch numbers that do not have a word boundary on the left */
          className: "number",
          begin: "\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b",
          relevance: 0
        },
        e.COMMENT("//", "[;$]"),
        e.COMMENT("!", "[;$]"),
        e.COMMENT("--eg:", "$"),
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        e.C_NUMBER_MODE,
        {
          className: "variable",
          begin: "\\$[A-Za-z0-9_]+"
        }
      ]
    };
  }
  return cp = t, cp;
}
var up, _0;
function yN() {
  if (_0)
    return up;
  _0 = 1;
  function t(e) {
    const r = e.regex, n = [
      "absolute_url",
      "asset|0",
      "asset_version",
      "attribute",
      "block",
      "constant",
      "controller|0",
      "country_timezones",
      "csrf_token",
      "cycle",
      "date",
      "dump",
      "expression",
      "form|0",
      "form_end",
      "form_errors",
      "form_help",
      "form_label",
      "form_rest",
      "form_row",
      "form_start",
      "form_widget",
      "html_classes",
      "include",
      "is_granted",
      "logout_path",
      "logout_url",
      "max",
      "min",
      "parent",
      "path|0",
      "random",
      "range",
      "relative_path",
      "render",
      "render_esi",
      "source",
      "template_from_string",
      "url|0"
    ], i = [
      "abs",
      "abbr_class",
      "abbr_method",
      "batch",
      "capitalize",
      "column",
      "convert_encoding",
      "country_name",
      "currency_name",
      "currency_symbol",
      "data_uri",
      "date",
      "date_modify",
      "default",
      "escape",
      "file_excerpt",
      "file_link",
      "file_relative",
      "filter",
      "first",
      "format",
      "format_args",
      "format_args_as_text",
      "format_currency",
      "format_date",
      "format_datetime",
      "format_file",
      "format_file_from_text",
      "format_number",
      "format_time",
      "html_to_markdown",
      "humanize",
      "inky_to_html",
      "inline_css",
      "join",
      "json_encode",
      "keys",
      "language_name",
      "last",
      "length",
      "locale_name",
      "lower",
      "map",
      "markdown",
      "markdown_to_html",
      "merge",
      "nl2br",
      "number_format",
      "raw",
      "reduce",
      "replace",
      "reverse",
      "round",
      "slice",
      "slug",
      "sort",
      "spaceless",
      "split",
      "striptags",
      "timezone_name",
      "title",
      "trans",
      "transchoice",
      "trim",
      "u|0",
      "upper",
      "url_encode",
      "yaml_dump",
      "yaml_encode"
    ];
    let s = [
      "apply",
      "autoescape",
      "block",
      "cache",
      "deprecated",
      "do",
      "embed",
      "extends",
      "filter",
      "flush",
      "for",
      "form_theme",
      "from",
      "if",
      "import",
      "include",
      "macro",
      "sandbox",
      "set",
      "stopwatch",
      "trans",
      "trans_default_domain",
      "transchoice",
      "use",
      "verbatim",
      "with"
    ];
    s = s.concat(s.map((z) => `end${z}`));
    const o = {
      scope: "string",
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    }, a = {
      scope: "number",
      match: /\d+/
    }, l = {
      begin: /\(/,
      end: /\)/,
      excludeBegin: !0,
      excludeEnd: !0,
      contains: [
        o,
        a
      ]
    }, c = {
      beginKeywords: n.join(" "),
      keywords: { name: n },
      relevance: 0,
      contains: [l]
    }, f = {
      match: /\|(?=[A-Za-z_]+:?)/,
      beginScope: "punctuation",
      relevance: 0,
      contains: [
        {
          match: /[A-Za-z_]+:?/,
          keywords: i
        }
      ]
    }, m = (z, { relevance: A }) => ({
      beginScope: {
        1: "template-tag",
        3: "name"
      },
      relevance: A || 2,
      endScope: "template-tag",
      begin: [
        /\{%/,
        /\s*/,
        r.either(...z)
      ],
      end: /%\}/,
      keywords: "in",
      contains: [
        f,
        c,
        o,
        a
      ]
    }), b = /[a-z_]+/, C = m(s, { relevance: 2 }), N = m([b], { relevance: 1 });
    return {
      name: "Twig",
      aliases: ["craftcms"],
      case_insensitive: !0,
      subLanguage: "xml",
      contains: [
        e.COMMENT(/\{#/, /#\}/),
        C,
        N,
        {
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [
            "self",
            f,
            c,
            o,
            a
          ]
        }
      ]
    };
  }
  return up = t, up;
}
var dp, h0;
function TN() {
  if (h0)
    return dp;
  h0 = 1;
  const t = "[A-Za-z$_][0-9A-Za-z$_]*", e = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ], r = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], n = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], i = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], s = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], o = [
    "arguments",
    "this",
    "super",
    "console",
    "window",
    "document",
    "localStorage",
    "sessionStorage",
    "module",
    "global"
    // Node.js
  ], a = [].concat(
    s,
    n,
    i
  );
  function l(f) {
    const m = f.regex, b = (ie, { after: Me }) => {
      const Je = "</" + ie[0].slice(1);
      return ie.input.indexOf(Je, Me) !== -1;
    }, C = t, N = {
      begin: "<>",
      end: "</>"
    }, z = /<[A-Za-z0-9\\._:-]+\s*\/>/, A = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      /**
       * @param {RegExpMatchArray} match
       * @param {CallbackResponse} response
       */
      isTrulyOpeningTag: (ie, Me) => {
        const Je = ie[0].length + ie.index, it = ie.input[Je];
        if (
          // HTML should not include another raw `<` inside a tag
          // nested type?
          // `<Array<Array<number>>`, etc.
          it === "<" || // the , gives away that this is not HTML
          // `<T, A extends keyof T, V>`
          it === ","
        ) {
          Me.ignoreMatch();
          return;
        }
        it === ">" && (b(ie, { after: Je }) || Me.ignoreMatch());
        let dt;
        const St = ie.input.substring(Je);
        if (dt = St.match(/^\s*=/)) {
          Me.ignoreMatch();
          return;
        }
        if ((dt = St.match(/^\s+extends\s+/)) && dt.index === 0) {
          Me.ignoreMatch();
          return;
        }
      }
    }, Q = {
      $pattern: t,
      keyword: e,
      literal: r,
      built_in: a,
      "variable.language": o
    }, Te = "[0-9](_?[0-9])*", ce = `\\.(${Te})`, ge = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", Y = {
      className: "number",
      variants: [
        // DecimalLiteral
        { begin: `(\\b(${ge})((${ce})|\\.)?|(${ce}))[eE][+-]?(${Te})\\b` },
        { begin: `\\b(${ge})\\b((${ce})\\b|\\.)?|(${ce})\\b` },
        // DecimalBigIntegerLiteral
        { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
        // NonDecimalIntegerLiteral
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
        // LegacyOctalIntegerLiteral (does not include underscore separators)
        // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
        { begin: "\\b0[0-7]+n?\\b" }
      ],
      relevance: 0
    }, fe = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: Q,
      contains: []
      // defined later
    }, ae = {
      begin: "html`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          f.BACKSLASH_ESCAPE,
          fe
        ],
        subLanguage: "xml"
      }
    }, Re = {
      begin: "css`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          f.BACKSLASH_ESCAPE,
          fe
        ],
        subLanguage: "css"
      }
    }, pe = {
      begin: "gql`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          f.BACKSLASH_ESCAPE,
          fe
        ],
        subLanguage: "graphql"
      }
    }, Ce = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        f.BACKSLASH_ESCAPE,
        fe
      ]
    }, R = {
      className: "comment",
      variants: [
        f.COMMENT(
          /\/\*\*(?!\/)/,
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                begin: "(?=@[A-Za-z]+)",
                relevance: 0,
                contains: [
                  {
                    className: "doctag",
                    begin: "@[A-Za-z]+"
                  },
                  {
                    className: "type",
                    begin: "\\{",
                    end: "\\}",
                    excludeEnd: !0,
                    excludeBegin: !0,
                    relevance: 0
                  },
                  {
                    className: "variable",
                    begin: C + "(?=\\s*(-)|$)",
                    endsParent: !0,
                    relevance: 0
                  },
                  // eat spaces (not newlines) so we can find
                  // types or variables
                  {
                    begin: /(?=[^\n])\s/,
                    relevance: 0
                  }
                ]
              }
            ]
          }
        ),
        f.C_BLOCK_COMMENT_MODE,
        f.C_LINE_COMMENT_MODE
      ]
    }, ve = [
      f.APOS_STRING_MODE,
      f.QUOTE_STRING_MODE,
      ae,
      Re,
      pe,
      Ce,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      Y
      // This is intentional:
      // See https://github.com/highlightjs/highlight.js/issues/3288
      // hljs.REGEXP_MODE
    ];
    fe.contains = ve.concat({
      // we need to pair up {} inside our subst to prevent
      // it from ending too early by matching another }
      begin: /\{/,
      end: /\}/,
      keywords: Q,
      contains: [
        "self"
      ].concat(ve)
    });
    const F = [].concat(R, fe.contains), ne = F.concat([
      // eat recursive parens in sub expressions
      {
        begin: /\(/,
        end: /\)/,
        keywords: Q,
        contains: ["self"].concat(F)
      }
    ]), H = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: !0,
      excludeEnd: !0,
      keywords: Q,
      contains: ne
    }, we = {
      variants: [
        // class Car extends vehicle
        {
          match: [
            /class/,
            /\s+/,
            C,
            /\s+/,
            /extends/,
            /\s+/,
            m.concat(C, "(", m.concat(/\./, C), ")*")
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            5: "keyword",
            7: "title.class.inherited"
          }
        },
        // class Car
        {
          match: [
            /class/,
            /\s+/,
            C
          ],
          scope: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    }, _e = {
      relevance: 0,
      match: m.either(
        // Hard coded exceptions
        /\bJSON/,
        // Float32Array, OutT
        /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
        // CSSFactory, CSSFactoryT
        /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
        // FPs, FPsT
        /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
        // P
        // single letters are not highlighted
        // BLAH
        // this will be flagged as a UPPER_CASE_CONSTANT instead
      ),
      className: "title.class",
      keywords: {
        _: [
          // se we still get relevance credit for JS library classes
          ...n,
          ...i
        ]
      }
    }, X = {
      label: "use_strict",
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    }, w = {
      variants: [
        {
          match: [
            /function/,
            /\s+/,
            C,
            /(?=\s*\()/
          ]
        },
        // anonymous function
        {
          match: [
            /function/,
            /\s*(?=\()/
          ]
        }
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      label: "func.def",
      contains: [H],
      illegal: /%/
    }, h = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    function d(ie) {
      return m.concat("(?!", ie.join("|"), ")");
    }
    const _ = {
      match: m.concat(
        /\b/,
        d([
          ...s,
          "super",
          "import"
        ]),
        C,
        m.lookahead(/\(/)
      ),
      className: "title.function",
      relevance: 0
    }, g = {
      begin: m.concat(/\./, m.lookahead(
        m.concat(C, /(?![0-9A-Za-z$_(])/)
      )),
      end: C,
      excludeBegin: !0,
      keywords: "prototype",
      className: "property",
      relevance: 0
    }, $ = {
      match: [
        /get|set/,
        /\s+/,
        C,
        /(?=\()/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          // eat to avoid empty params
          begin: /\(\)/
        },
        H
      ]
    }, I = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + f.UNDERSCORE_IDENT_RE + ")\\s*=>", D = {
      match: [
        /const|var|let/,
        /\s+/,
        C,
        /\s*/,
        /=\s*/,
        /(async\s*)?/,
        // async is optional
        m.lookahead(I)
      ],
      keywords: "async",
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        H
      ]
    };
    return {
      name: "JavaScript",
      aliases: ["js", "jsx", "mjs", "cjs"],
      keywords: Q,
      // this will be extended by TypeScript
      exports: { PARAMS_CONTAINS: ne, CLASS_REFERENCE: _e },
      illegal: /#(?![$_A-z])/,
      contains: [
        f.SHEBANG({
          label: "shebang",
          binary: "node",
          relevance: 5
        }),
        X,
        f.APOS_STRING_MODE,
        f.QUOTE_STRING_MODE,
        ae,
        Re,
        pe,
        Ce,
        R,
        // Skip numbers when they are part of a variable name
        { match: /\$\d+/ },
        Y,
        _e,
        {
          className: "attr",
          begin: C + m.lookahead(":"),
          relevance: 0
        },
        D,
        {
          // "value" container
          begin: "(" + f.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          relevance: 0,
          contains: [
            R,
            f.REGEXP_MODE,
            {
              className: "function",
              // we have to count the parens to make sure we actually have the
              // correct bounding ( ) before the =>.  There could be any number of
              // sub-expressions inside also surrounded by parens.
              begin: I,
              returnBegin: !0,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    {
                      begin: f.UNDERSCORE_IDENT_RE,
                      relevance: 0
                    },
                    {
                      className: null,
                      begin: /\(\s*\)/,
                      skip: !0
                    },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: !0,
                      excludeEnd: !0,
                      keywords: Q,
                      contains: ne
                    }
                  ]
                }
              ]
            },
            {
              // could be a comma delimited list of params to a function call
              begin: /,/,
              relevance: 0
            },
            {
              match: /\s+/,
              relevance: 0
            },
            {
              // JSX
              variants: [
                { begin: N.begin, end: N.end },
                { match: z },
                {
                  begin: A.begin,
                  // we carefully check the opening tag to see if it truly
                  // is a tag and not a false positive
                  "on:begin": A.isTrulyOpeningTag,
                  end: A.end
                }
              ],
              subLanguage: "xml",
              contains: [
                {
                  begin: A.begin,
                  end: A.end,
                  skip: !0,
                  contains: ["self"]
                }
              ]
            }
          ]
        },
        w,
        {
          // prevent this from getting swallowed up by function
          // since they appear "function like"
          beginKeywords: "while if switch catch for"
        },
        {
          // we have to count the parens to make sure we actually have the correct
          // bounding ( ).  There could be any number of sub-expressions inside
          // also surrounded by parens.
          begin: "\\b(?!function)" + f.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
          // end parens
          returnBegin: !0,
          label: "func.def",
          contains: [
            H,
            f.inherit(f.TITLE_MODE, { begin: C, className: "title.function" })
          ]
        },
        // catch ... so it won't trigger the property rule below
        {
          match: /\.\.\./,
          relevance: 0
        },
        g,
        // hack: prevents detection of keywords in some circumstances
        // .keyword()
        // $keyword = x
        {
          match: "\\$" + C,
          relevance: 0
        },
        {
          match: [/\bconstructor(?=\s*\()/],
          className: { 1: "title.function" },
          contains: [H]
        },
        _,
        h,
        we,
        $,
        {
          match: /\$[(.]/
          // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
        }
      ]
    };
  }
  function c(f) {
    const m = l(f), b = t, C = [
      "any",
      "void",
      "number",
      "boolean",
      "string",
      "object",
      "never",
      "symbol",
      "bigint",
      "unknown"
    ], N = {
      beginKeywords: "namespace",
      end: /\{/,
      excludeEnd: !0,
      contains: [m.exports.CLASS_REFERENCE]
    }, z = {
      beginKeywords: "interface",
      end: /\{/,
      excludeEnd: !0,
      keywords: {
        keyword: "interface extends",
        built_in: C
      },
      contains: [m.exports.CLASS_REFERENCE]
    }, A = {
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use strict['"]/
    }, Q = [
      "type",
      "namespace",
      "interface",
      "public",
      "private",
      "protected",
      "implements",
      "declare",
      "abstract",
      "readonly",
      "enum",
      "override"
    ], Te = {
      $pattern: t,
      keyword: e.concat(Q),
      literal: r,
      built_in: a.concat(C),
      "variable.language": o
    }, ce = {
      className: "meta",
      begin: "@" + b
    }, ge = (fe, ae, Re) => {
      const pe = fe.contains.findIndex((Ce) => Ce.label === ae);
      if (pe === -1)
        throw new Error("can not find mode to replace");
      fe.contains.splice(pe, 1, Re);
    };
    Object.assign(m.keywords, Te), m.exports.PARAMS_CONTAINS.push(ce), m.contains = m.contains.concat([
      ce,
      N,
      z
    ]), ge(m, "shebang", f.SHEBANG()), ge(m, "use_strict", A);
    const Y = m.contains.find((fe) => fe.label === "func.def");
    return Y.relevance = 0, Object.assign(m, {
      name: "TypeScript",
      aliases: [
        "ts",
        "tsx",
        "mts",
        "cts"
      ]
    }), m;
  }
  return dp = c, dp;
}
var fp, m0;
function CN() {
  if (m0)
    return fp;
  m0 = 1;
  function t(e) {
    return {
      name: "Vala",
      keywords: {
        keyword: (
          // Value types
          "char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 uint16 uint32 uint64 float double bool struct enum string void weak unowned owned async signal static abstract interface override virtual delegate if while do for foreach else switch case break default return try catch public private protected internal using new this get set const stdout stdin stderr var"
        ),
        built_in: "DBus GLib CCode Gee Object Gtk Posix",
        literal: "false true null"
      },
      contains: [
        {
          className: "class",
          beginKeywords: "class interface namespace",
          end: /\{/,
          excludeEnd: !0,
          illegal: "[^,:\\n\\s\\.]",
          contains: [e.UNDERSCORE_TITLE_MODE]
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "string",
          begin: '"""',
          end: '"""',
          relevance: 5
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "^#",
          end: "$"
        }
      ]
    };
  }
  return fp = t, fp;
}
var pp, g0;
function wN() {
  if (g0)
    return pp;
  g0 = 1;
  function t(e) {
    const r = e.regex, n = {
      className: "string",
      begin: /"(""|[^/n])"C\b/
    }, i = {
      className: "string",
      begin: /"/,
      end: /"/,
      illegal: /\n/,
      contains: [
        {
          // double quote escape
          begin: /""/
        }
      ]
    }, s = /\d{1,2}\/\d{1,2}\/\d{4}/, o = /\d{4}-\d{1,2}-\d{1,2}/, a = /(\d|1[012])(:\d+){0,2} *(AM|PM)/, l = /\d{1,2}(:\d{1,2}){1,2}/, c = {
      className: "literal",
      variants: [
        {
          // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)
          begin: r.concat(/# */, r.either(o, s), / *#/)
        },
        {
          // #H:mm[:ss]# (24h Time)
          begin: r.concat(/# */, l, / *#/)
        },
        {
          // #h[:mm[:ss]] A# (12h Time)
          begin: r.concat(/# */, a, / *#/)
        },
        {
          // date plus time
          begin: r.concat(
            /# */,
            r.either(o, s),
            / +/,
            r.either(a, l),
            / *#/
          )
        }
      ]
    }, f = {
      className: "number",
      relevance: 0,
      variants: [
        {
          // Float
          begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/
        },
        {
          // Integer (base 10)
          begin: /\b\d[\d_]*((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 16)
          begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 8)
          begin: /&O[0-7_]+((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 2)
          begin: /&B[01_]+((U?[SIL])|[%&])?/
        }
      ]
    }, m = {
      className: "label",
      begin: /^\w+:/
    }, b = e.COMMENT(/'''/, /$/, { contains: [
      {
        className: "doctag",
        begin: /<\/?/,
        end: />/
      }
    ] }), C = e.COMMENT(null, /$/, { variants: [
      { begin: /'/ },
      {
        // TODO: Use multi-class for leading spaces
        begin: /([\t ]|^)REM(?=\s)/
      }
    ] });
    return {
      name: "Visual Basic .NET",
      aliases: ["vb"],
      case_insensitive: !0,
      classNameAliases: { label: "symbol" },
      keywords: {
        keyword: "addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield",
        built_in: (
          // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators
          "addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort"
        ),
        type: (
          // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types
          "boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort"
        ),
        literal: "true false nothing"
      },
      illegal: "//|\\{|\\}|endif|gosub|variant|wend|^\\$ ",
      contains: [
        n,
        i,
        c,
        f,
        m,
        b,
        C,
        {
          className: "meta",
          // TODO: Use multi-class for indentation once available
          begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
          end: /$/,
          keywords: { keyword: "const disable else elseif enable end externalsource if region then" },
          contains: [C]
        }
      ]
    };
  }
  return pp = t, pp;
}
var _p, $0;
function AN() {
  if ($0)
    return _p;
  $0 = 1;
  function t(e) {
    const r = e.regex, n = [
      "lcase",
      "month",
      "vartype",
      "instrrev",
      "ubound",
      "setlocale",
      "getobject",
      "rgb",
      "getref",
      "string",
      "weekdayname",
      "rnd",
      "dateadd",
      "monthname",
      "now",
      "day",
      "minute",
      "isarray",
      "cbool",
      "round",
      "formatcurrency",
      "conversions",
      "csng",
      "timevalue",
      "second",
      "year",
      "space",
      "abs",
      "clng",
      "timeserial",
      "fixs",
      "len",
      "asc",
      "isempty",
      "maths",
      "dateserial",
      "atn",
      "timer",
      "isobject",
      "filter",
      "weekday",
      "datevalue",
      "ccur",
      "isdate",
      "instr",
      "datediff",
      "formatdatetime",
      "replace",
      "isnull",
      "right",
      "sgn",
      "array",
      "snumeric",
      "log",
      "cdbl",
      "hex",
      "chr",
      "lbound",
      "msgbox",
      "ucase",
      "getlocale",
      "cos",
      "cdate",
      "cbyte",
      "rtrim",
      "join",
      "hour",
      "oct",
      "typename",
      "trim",
      "strcomp",
      "int",
      "createobject",
      "loadpicture",
      "tan",
      "formatnumber",
      "mid",
      "split",
      "cint",
      "sin",
      "datepart",
      "ltrim",
      "sqr",
      "time",
      "derived",
      "eval",
      "date",
      "formatpercent",
      "exp",
      "inputbox",
      "left",
      "ascw",
      "chrw",
      "regexp",
      "cstr",
      "err"
    ], i = [
      "server",
      "response",
      "request",
      // take no arguments so can be called without ()
      "scriptengine",
      "scriptenginebuildversion",
      "scriptengineminorversion",
      "scriptenginemajorversion"
    ], s = {
      begin: r.concat(r.either(...n), "\\s*\\("),
      // relevance 0 because this is acting as a beginKeywords really
      relevance: 0,
      keywords: { built_in: n }
    };
    return {
      name: "VBScript",
      aliases: ["vbs"],
      case_insensitive: !0,
      keywords: {
        keyword: [
          "call",
          "class",
          "const",
          "dim",
          "do",
          "loop",
          "erase",
          "execute",
          "executeglobal",
          "exit",
          "for",
          "each",
          "next",
          "function",
          "if",
          "then",
          "else",
          "on",
          "error",
          "option",
          "explicit",
          "new",
          "private",
          "property",
          "let",
          "get",
          "public",
          "randomize",
          "redim",
          "rem",
          "select",
          "case",
          "set",
          "stop",
          "sub",
          "while",
          "wend",
          "with",
          "end",
          "to",
          "elseif",
          "is",
          "or",
          "xor",
          "and",
          "not",
          "class_initialize",
          "class_terminate",
          "default",
          "preserve",
          "in",
          "me",
          "byval",
          "byref",
          "step",
          "resume",
          "goto"
        ],
        built_in: i,
        literal: [
          "true",
          "false",
          "null",
          "nothing",
          "empty"
        ]
      },
      illegal: "//",
      contains: [
        s,
        e.inherit(e.QUOTE_STRING_MODE, { contains: [{ begin: '""' }] }),
        e.COMMENT(
          /'/,
          /$/,
          { relevance: 0 }
        ),
        e.C_NUMBER_MODE
      ]
    };
  }
  return _p = t, _p;
}
var hp, b0;
function RN() {
  if (b0)
    return hp;
  b0 = 1;
  function t(e) {
    return {
      name: "VBScript in HTML",
      subLanguage: "xml",
      contains: [
        {
          begin: "<%",
          end: "%>",
          subLanguage: "vbscript"
        }
      ]
    };
  }
  return hp = t, hp;
}
var mp, E0;
function xN() {
  if (E0)
    return mp;
  E0 = 1;
  function t(e) {
    const r = e.regex, n = {
      $pattern: /\$?[\w]+(\$[\w]+)*/,
      keyword: [
        "accept_on",
        "alias",
        "always",
        "always_comb",
        "always_ff",
        "always_latch",
        "and",
        "assert",
        "assign",
        "assume",
        "automatic",
        "before",
        "begin",
        "bind",
        "bins",
        "binsof",
        "bit",
        "break",
        "buf|0",
        "bufif0",
        "bufif1",
        "byte",
        "case",
        "casex",
        "casez",
        "cell",
        "chandle",
        "checker",
        "class",
        "clocking",
        "cmos",
        "config",
        "const",
        "constraint",
        "context",
        "continue",
        "cover",
        "covergroup",
        "coverpoint",
        "cross",
        "deassign",
        "default",
        "defparam",
        "design",
        "disable",
        "dist",
        "do",
        "edge",
        "else",
        "end",
        "endcase",
        "endchecker",
        "endclass",
        "endclocking",
        "endconfig",
        "endfunction",
        "endgenerate",
        "endgroup",
        "endinterface",
        "endmodule",
        "endpackage",
        "endprimitive",
        "endprogram",
        "endproperty",
        "endspecify",
        "endsequence",
        "endtable",
        "endtask",
        "enum",
        "event",
        "eventually",
        "expect",
        "export",
        "extends",
        "extern",
        "final",
        "first_match",
        "for",
        "force",
        "foreach",
        "forever",
        "fork",
        "forkjoin",
        "function",
        "generate|5",
        "genvar",
        "global",
        "highz0",
        "highz1",
        "if",
        "iff",
        "ifnone",
        "ignore_bins",
        "illegal_bins",
        "implements",
        "implies",
        "import",
        "incdir",
        "include",
        "initial",
        "inout",
        "input",
        "inside",
        "instance",
        "int",
        "integer",
        "interconnect",
        "interface",
        "intersect",
        "join",
        "join_any",
        "join_none",
        "large",
        "let",
        "liblist",
        "library",
        "local",
        "localparam",
        "logic",
        "longint",
        "macromodule",
        "matches",
        "medium",
        "modport",
        "module",
        "nand",
        "negedge",
        "nettype",
        "new",
        "nexttime",
        "nmos",
        "nor",
        "noshowcancelled",
        "not",
        "notif0",
        "notif1",
        "or",
        "output",
        "package",
        "packed",
        "parameter",
        "pmos",
        "posedge",
        "primitive",
        "priority",
        "program",
        "property",
        "protected",
        "pull0",
        "pull1",
        "pulldown",
        "pullup",
        "pulsestyle_ondetect",
        "pulsestyle_onevent",
        "pure",
        "rand",
        "randc",
        "randcase",
        "randsequence",
        "rcmos",
        "real",
        "realtime",
        "ref",
        "reg",
        "reject_on",
        "release",
        "repeat",
        "restrict",
        "return",
        "rnmos",
        "rpmos",
        "rtran",
        "rtranif0",
        "rtranif1",
        "s_always",
        "s_eventually",
        "s_nexttime",
        "s_until",
        "s_until_with",
        "scalared",
        "sequence",
        "shortint",
        "shortreal",
        "showcancelled",
        "signed",
        "small",
        "soft",
        "solve",
        "specify",
        "specparam",
        "static",
        "string",
        "strong",
        "strong0",
        "strong1",
        "struct",
        "super",
        "supply0",
        "supply1",
        "sync_accept_on",
        "sync_reject_on",
        "table",
        "tagged",
        "task",
        "this",
        "throughout",
        "time",
        "timeprecision",
        "timeunit",
        "tran",
        "tranif0",
        "tranif1",
        "tri",
        "tri0",
        "tri1",
        "triand",
        "trior",
        "trireg",
        "type",
        "typedef",
        "union",
        "unique",
        "unique0",
        "unsigned",
        "until",
        "until_with",
        "untyped",
        "use",
        "uwire",
        "var",
        "vectored",
        "virtual",
        "void",
        "wait",
        "wait_order",
        "wand",
        "weak",
        "weak0",
        "weak1",
        "while",
        "wildcard",
        "wire",
        "with",
        "within",
        "wor",
        "xnor",
        "xor"
      ],
      literal: ["null"],
      built_in: [
        "$finish",
        "$stop",
        "$exit",
        "$fatal",
        "$error",
        "$warning",
        "$info",
        "$realtime",
        "$time",
        "$printtimescale",
        "$bitstoreal",
        "$bitstoshortreal",
        "$itor",
        "$signed",
        "$cast",
        "$bits",
        "$stime",
        "$timeformat",
        "$realtobits",
        "$shortrealtobits",
        "$rtoi",
        "$unsigned",
        "$asserton",
        "$assertkill",
        "$assertpasson",
        "$assertfailon",
        "$assertnonvacuouson",
        "$assertoff",
        "$assertcontrol",
        "$assertpassoff",
        "$assertfailoff",
        "$assertvacuousoff",
        "$isunbounded",
        "$sampled",
        "$fell",
        "$changed",
        "$past_gclk",
        "$fell_gclk",
        "$changed_gclk",
        "$rising_gclk",
        "$steady_gclk",
        "$coverage_control",
        "$coverage_get",
        "$coverage_save",
        "$set_coverage_db_name",
        "$rose",
        "$stable",
        "$past",
        "$rose_gclk",
        "$stable_gclk",
        "$future_gclk",
        "$falling_gclk",
        "$changing_gclk",
        "$display",
        "$coverage_get_max",
        "$coverage_merge",
        "$get_coverage",
        "$load_coverage_db",
        "$typename",
        "$unpacked_dimensions",
        "$left",
        "$low",
        "$increment",
        "$clog2",
        "$ln",
        "$log10",
        "$exp",
        "$sqrt",
        "$pow",
        "$floor",
        "$ceil",
        "$sin",
        "$cos",
        "$tan",
        "$countbits",
        "$onehot",
        "$isunknown",
        "$fatal",
        "$warning",
        "$dimensions",
        "$right",
        "$high",
        "$size",
        "$asin",
        "$acos",
        "$atan",
        "$atan2",
        "$hypot",
        "$sinh",
        "$cosh",
        "$tanh",
        "$asinh",
        "$acosh",
        "$atanh",
        "$countones",
        "$onehot0",
        "$error",
        "$info",
        "$random",
        "$dist_chi_square",
        "$dist_erlang",
        "$dist_exponential",
        "$dist_normal",
        "$dist_poisson",
        "$dist_t",
        "$dist_uniform",
        "$q_initialize",
        "$q_remove",
        "$q_exam",
        "$async$and$array",
        "$async$nand$array",
        "$async$or$array",
        "$async$nor$array",
        "$sync$and$array",
        "$sync$nand$array",
        "$sync$or$array",
        "$sync$nor$array",
        "$q_add",
        "$q_full",
        "$psprintf",
        "$async$and$plane",
        "$async$nand$plane",
        "$async$or$plane",
        "$async$nor$plane",
        "$sync$and$plane",
        "$sync$nand$plane",
        "$sync$or$plane",
        "$sync$nor$plane",
        "$system",
        "$display",
        "$displayb",
        "$displayh",
        "$displayo",
        "$strobe",
        "$strobeb",
        "$strobeh",
        "$strobeo",
        "$write",
        "$readmemb",
        "$readmemh",
        "$writememh",
        "$value$plusargs",
        "$dumpvars",
        "$dumpon",
        "$dumplimit",
        "$dumpports",
        "$dumpportson",
        "$dumpportslimit",
        "$writeb",
        "$writeh",
        "$writeo",
        "$monitor",
        "$monitorb",
        "$monitorh",
        "$monitoro",
        "$writememb",
        "$dumpfile",
        "$dumpoff",
        "$dumpall",
        "$dumpflush",
        "$dumpportsoff",
        "$dumpportsall",
        "$dumpportsflush",
        "$fclose",
        "$fdisplay",
        "$fdisplayb",
        "$fdisplayh",
        "$fdisplayo",
        "$fstrobe",
        "$fstrobeb",
        "$fstrobeh",
        "$fstrobeo",
        "$swrite",
        "$swriteb",
        "$swriteh",
        "$swriteo",
        "$fscanf",
        "$fread",
        "$fseek",
        "$fflush",
        "$feof",
        "$fopen",
        "$fwrite",
        "$fwriteb",
        "$fwriteh",
        "$fwriteo",
        "$fmonitor",
        "$fmonitorb",
        "$fmonitorh",
        "$fmonitoro",
        "$sformat",
        "$sformatf",
        "$fgetc",
        "$ungetc",
        "$fgets",
        "$sscanf",
        "$rewind",
        "$ftell",
        "$ferror"
      ]
    }, i = [
      "__FILE__",
      "__LINE__"
    ], s = [
      "begin_keywords",
      "celldefine",
      "default_nettype",
      "default_decay_time",
      "default_trireg_strength",
      "define",
      "delay_mode_distributed",
      "delay_mode_path",
      "delay_mode_unit",
      "delay_mode_zero",
      "else",
      "elsif",
      "end_keywords",
      "endcelldefine",
      "endif",
      "ifdef",
      "ifndef",
      "include",
      "line",
      "nounconnected_drive",
      "pragma",
      "resetall",
      "timescale",
      "unconnected_drive",
      "undef",
      "undefineall"
    ];
    return {
      name: "Verilog",
      aliases: [
        "v",
        "sv",
        "svh"
      ],
      case_insensitive: !1,
      keywords: n,
      contains: [
        e.C_BLOCK_COMMENT_MODE,
        e.C_LINE_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        {
          scope: "number",
          contains: [e.BACKSLASH_ESCAPE],
          variants: [
            { begin: /\b((\d+'([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
            { begin: /\B(('([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
            {
              // decimal
              begin: /\b[0-9][0-9_]*/,
              relevance: 0
            }
          ]
        },
        /* parameters to instances */
        {
          scope: "variable",
          variants: [
            { begin: "#\\((?!parameter).+\\)" },
            {
              begin: "\\.\\w+",
              relevance: 0
            }
          ]
        },
        {
          scope: "variable.constant",
          match: r.concat(/`/, r.either(...i))
        },
        {
          scope: "meta",
          begin: r.concat(/`/, r.either(...s)),
          end: /$|\/\/|\/\*/,
          returnEnd: !0,
          keywords: s
        }
      ]
    };
  }
  return mp = t, mp;
}
var gp, v0;
function NN() {
  if (v0)
    return gp;
  v0 = 1;
  function t(e) {
    const r = "\\d(_|\\d)*", n = "[eE][-+]?" + r, i = r + "(\\." + r + ")?(" + n + ")?", s = "\\w+", a = "\\b(" + (r + "#" + s + "(\\." + s + ")?#(" + n + ")?") + "|" + i + ")";
    return {
      name: "VHDL",
      case_insensitive: !0,
      keywords: {
        keyword: [
          "abs",
          "access",
          "after",
          "alias",
          "all",
          "and",
          "architecture",
          "array",
          "assert",
          "assume",
          "assume_guarantee",
          "attribute",
          "begin",
          "block",
          "body",
          "buffer",
          "bus",
          "case",
          "component",
          "configuration",
          "constant",
          "context",
          "cover",
          "disconnect",
          "downto",
          "default",
          "else",
          "elsif",
          "end",
          "entity",
          "exit",
          "fairness",
          "file",
          "for",
          "force",
          "function",
          "generate",
          "generic",
          "group",
          "guarded",
          "if",
          "impure",
          "in",
          "inertial",
          "inout",
          "is",
          "label",
          "library",
          "linkage",
          "literal",
          "loop",
          "map",
          "mod",
          "nand",
          "new",
          "next",
          "nor",
          "not",
          "null",
          "of",
          "on",
          "open",
          "or",
          "others",
          "out",
          "package",
          "parameter",
          "port",
          "postponed",
          "procedure",
          "process",
          "property",
          "protected",
          "pure",
          "range",
          "record",
          "register",
          "reject",
          "release",
          "rem",
          "report",
          "restrict",
          "restrict_guarantee",
          "return",
          "rol",
          "ror",
          "select",
          "sequence",
          "severity",
          "shared",
          "signal",
          "sla",
          "sll",
          "sra",
          "srl",
          "strong",
          "subtype",
          "then",
          "to",
          "transport",
          "type",
          "unaffected",
          "units",
          "until",
          "use",
          "variable",
          "view",
          "vmode",
          "vprop",
          "vunit",
          "wait",
          "when",
          "while",
          "with",
          "xnor",
          "xor"
        ],
        built_in: [
          "boolean",
          "bit",
          "character",
          "integer",
          "time",
          "delay_length",
          "natural",
          "positive",
          "string",
          "bit_vector",
          "file_open_kind",
          "file_open_status",
          "std_logic",
          "std_logic_vector",
          "unsigned",
          "signed",
          "boolean_vector",
          "integer_vector",
          "std_ulogic",
          "std_ulogic_vector",
          "unresolved_unsigned",
          "u_unsigned",
          "unresolved_signed",
          "u_signed",
          "real_vector",
          "time_vector"
        ],
        literal: [
          // severity_level
          "false",
          "true",
          "note",
          "warning",
          "error",
          "failure",
          // textio
          "line",
          "text",
          "side",
          "width"
        ]
      },
      illegal: /\{/,
      contains: [
        e.C_BLOCK_COMMENT_MODE,
        // VHDL-2008 block commenting.
        e.COMMENT("--", "$"),
        e.QUOTE_STRING_MODE,
        {
          className: "number",
          begin: a,
          relevance: 0
        },
        {
          className: "string",
          begin: "'(U|X|0|1|Z|W|L|H|-)'",
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          className: "symbol",
          begin: "'[A-Za-z](_?[A-Za-z0-9])*",
          contains: [e.BACKSLASH_ESCAPE]
        }
      ]
    };
  }
  return gp = t, gp;
}
var $p, S0;
function kN() {
  if (S0)
    return $p;
  S0 = 1;
  function t(e) {
    return {
      name: "Vim Script",
      keywords: {
        $pattern: /[!#@\w]+/,
        keyword: (
          // express version except: ! & * < = > !! # @ @@
          "N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank"
        ),
        built_in: (
          // built in func
          "synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv complete_check add getwinposx getqflist getwinposy screencol clearmatches empty extend getcmdpos mzeval garbagecollect setreg ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable shiftwidth max sinh isdirectory synID system inputrestore winline atan visualmode inputlist tabpagewinnr round getregtype mapcheck hasmapto histdel argidx findfile sha256 exists toupper getcmdline taglist string getmatches bufnr strftime winwidth bufexists strtrans tabpagebuflist setcmdpos remote_read printf setloclist getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval resolve libcallnr foldclosedend reverse filter has_key bufname str2float strlen setline getcharmod setbufvar index searchpos shellescape undofile foldclosed setqflist buflisted strchars str2nr virtcol floor remove undotree remote_expr winheight gettabwinvar reltime cursor tabpagenr finddir localtime acos getloclist search tanh matchend rename gettabvar strdisplaywidth type abs py3eval setwinvar tolower wildmenumode log10 spellsuggest bufloaded synconcealed nextnonblank server2client complete settabwinvar executable input wincol setmatches getftype hlID inputsave searchpair or screenrow line settabvar histadd deepcopy strpart remote_peek and eval getftime submatch screenchar winsaveview matchadd mkdir screenattr getfontname libcall reltimestr getfsize winnr invert pow getbufline byte2line soundfold repeat fnameescape tagfiles sin strwidth spellbadword trunc maparg log lispindent hostname setpos globpath remote_foreground getchar synIDattr fnamemodify cscope_connection stridx winbufnr indent min complete_add nr2char searchpairpos inputdialog values matchlist items hlexists strridx browsedir expand fmod pathshorten line2byte argc count getwinvar glob foldtextresult getreg foreground cosh matchdelete has char2nr simplify histget searchdecl iconv winrestcmd pumvisible writefile foldlevel haslocaldir keys cos matchstr foldtext histnr tan tempname getcwd byteidx getbufvar islocked escape eventhandler remote_send serverlist winrestview synstack pyeval prevnonblank readfile cindent filereadable changenr exp"
        )
      },
      illegal: /;/,
      contains: [
        e.NUMBER_MODE,
        {
          className: "string",
          begin: "'",
          end: "'",
          illegal: "\\n"
        },
        /*
        	      A double quote can start either a string or a line comment. Strings are
        	      ended before the end of a line by another double quote and can contain
        	      escaped double-quotes and post-escaped line breaks.
        
        	      Also, any double quote at the beginning of a line is a comment but we
        	      don't handle that properly at the moment: any double quote inside will
        	      turn them into a string. Handling it properly will require a smarter
        	      parser.
        	      */
        {
          className: "string",
          begin: /"(\\"|\n\\|[^"\n])*"/
        },
        e.COMMENT('"', "$"),
        {
          className: "variable",
          begin: /[bwtglsav]:[\w\d_]+/
        },
        {
          begin: [
            /\b(?:function|function!)/,
            /\s+/,
            e.IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title"
          },
          end: "$",
          relevance: 0,
          contains: [
            {
              className: "params",
              begin: "\\(",
              end: "\\)"
            }
          ]
        },
        {
          className: "symbol",
          begin: /<[\w-]+>/
        }
      ]
    };
  }
  return $p = t, $p;
}
var bp, y0;
function IN() {
  if (y0)
    return bp;
  y0 = 1;
  function t(e) {
    e.regex;
    const r = e.COMMENT(/\(;/, /;\)/);
    r.contains.push("self");
    const n = e.COMMENT(/;;/, /$/), i = [
      "anyfunc",
      "block",
      "br",
      "br_if",
      "br_table",
      "call",
      "call_indirect",
      "data",
      "drop",
      "elem",
      "else",
      "end",
      "export",
      "func",
      "global.get",
      "global.set",
      "local.get",
      "local.set",
      "local.tee",
      "get_global",
      "get_local",
      "global",
      "if",
      "import",
      "local",
      "loop",
      "memory",
      "memory.grow",
      "memory.size",
      "module",
      "mut",
      "nop",
      "offset",
      "param",
      "result",
      "return",
      "select",
      "set_global",
      "set_local",
      "start",
      "table",
      "tee_local",
      "then",
      "type",
      "unreachable"
    ], s = {
      begin: [
        /(?:func|call|call_indirect)/,
        /\s+/,
        /\$[^\s)]+/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      }
    }, o = {
      className: "variable",
      begin: /\$[\w_]+/
    }, a = {
      match: /(\((?!;)|\))+/,
      className: "punctuation",
      relevance: 0
    }, l = {
      className: "number",
      relevance: 0,
      // borrowed from Prism, TODO: split out into variants
      match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
    }, c = {
      // look-ahead prevents us from gobbling up opcodes
      match: /(i32|i64|f32|f64)(?!\.)/,
      className: "type"
    }, f = {
      className: "keyword",
      // borrowed from Prism, TODO: split out into variants
      match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
    };
    return {
      name: "WebAssembly",
      keywords: {
        $pattern: /[\w.]+/,
        keyword: i
      },
      contains: [
        n,
        r,
        {
          match: [
            /(?:offset|align)/,
            /\s*/,
            /=/
          ],
          className: {
            1: "keyword",
            3: "operator"
          }
        },
        o,
        a,
        s,
        e.QUOTE_STRING_MODE,
        c,
        f,
        l
      ]
    };
  }
  return bp = t, bp;
}
var Ep, T0;
function ON() {
  if (T0)
    return Ep;
  T0 = 1;
  function t(e) {
    const r = e.regex, n = /[a-zA-Z]\w*/, i = [
      "as",
      "break",
      "class",
      "construct",
      "continue",
      "else",
      "for",
      "foreign",
      "if",
      "import",
      "in",
      "is",
      "return",
      "static",
      "var",
      "while"
    ], s = [
      "true",
      "false",
      "null"
    ], o = [
      "this",
      "super"
    ], a = [
      "Bool",
      "Class",
      "Fiber",
      "Fn",
      "List",
      "Map",
      "Null",
      "Num",
      "Object",
      "Range",
      "Sequence",
      "String",
      "System"
    ], l = [
      "-",
      "~",
      /\*/,
      "%",
      /\.\.\./,
      /\.\./,
      /\+/,
      "<<",
      ">>",
      ">=",
      "<=",
      "<",
      ">",
      /\^/,
      /!=/,
      /!/,
      /\bis\b/,
      "==",
      "&&",
      "&",
      /\|\|/,
      /\|/,
      /\?:/,
      "="
    ], c = {
      relevance: 0,
      match: r.concat(/\b(?!(if|while|for|else|super)\b)/, n, /(?=\s*[({])/),
      className: "title.function"
    }, f = {
      match: r.concat(
        r.either(
          r.concat(/\b(?!(if|while|for|else|super)\b)/, n),
          r.either(...l)
        ),
        /(?=\s*\([^)]+\)\s*\{)/
      ),
      className: "title.function",
      starts: { contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            {
              relevance: 0,
              scope: "params",
              match: n
            }
          ]
        }
      ] }
    }, m = {
      variants: [
        { match: [
          /class\s+/,
          n,
          /\s+is\s+/,
          n
        ] },
        { match: [
          /class\s+/,
          n
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: i
    }, b = {
      relevance: 0,
      match: r.either(...l),
      className: "operator"
    }, C = {
      className: "string",
      begin: /"""/,
      end: /"""/
    }, N = {
      className: "property",
      begin: r.concat(/\./, r.lookahead(n)),
      end: n,
      excludeBegin: !0,
      relevance: 0
    }, z = {
      relevance: 0,
      match: r.concat(/\b_/, n),
      scope: "variable"
    }, A = {
      relevance: 0,
      match: /\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,
      scope: "title.class",
      keywords: { _: a }
    }, Q = e.C_NUMBER_MODE, Te = {
      match: [
        n,
        /\s*/,
        /=/,
        /\s*/,
        /\(/,
        n,
        /\)\s*\{/
      ],
      scope: {
        1: "title.function",
        3: "operator",
        6: "params"
      }
    }, ce = e.COMMENT(
      /\/\*\*/,
      /\*\//,
      { contains: [
        {
          match: /@[a-z]+/,
          scope: "doctag"
        },
        "self"
      ] }
    ), ge = {
      scope: "subst",
      begin: /%\(/,
      end: /\)/,
      contains: [
        Q,
        A,
        c,
        z,
        b
      ]
    }, Y = {
      scope: "string",
      begin: /"/,
      end: /"/,
      contains: [
        ge,
        {
          scope: "char.escape",
          variants: [
            { match: /\\\\|\\["0%abefnrtv]/ },
            { match: /\\x[0-9A-F]{2}/ },
            { match: /\\u[0-9A-F]{4}/ },
            { match: /\\U[0-9A-F]{8}/ }
          ]
        }
      ]
    };
    ge.contains.push(Y);
    const fe = [
      ...i,
      ...o,
      ...s
    ], ae = {
      relevance: 0,
      match: r.concat(
        "\\b(?!",
        fe.join("|"),
        "\\b)",
        /[a-zA-Z_]\w*(?:[?!]|\b)/
      ),
      className: "variable"
    };
    return {
      name: "Wren",
      keywords: {
        keyword: i,
        "variable.language": o,
        literal: s
      },
      contains: [
        {
          // scope: "meta",
          scope: "comment",
          variants: [
            {
              begin: [
                /#!?/,
                /[A-Za-z_]+(?=\()/
              ],
              beginScope: {
                // 2: "attr"
              },
              keywords: { literal: s },
              contains: [
                // NUMBER,
                // VARIABLE
              ],
              end: /\)/
            },
            {
              begin: [
                /#!?/,
                /[A-Za-z_]+/
              ],
              beginScope: {
                // 2: "attr"
              },
              end: /$/
            }
          ]
        },
        Q,
        Y,
        C,
        ce,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        A,
        m,
        Te,
        f,
        c,
        b,
        z,
        N,
        ae
      ]
    };
  }
  return Ep = t, Ep;
}
var vp, C0;
function DN() {
  if (C0)
    return vp;
  C0 = 1;
  function t(e) {
    return {
      name: "Intel x86 Assembly",
      case_insensitive: !0,
      keywords: {
        $pattern: "[.%]?" + e.IDENT_RE,
        keyword: "lock rep repe repz repne repnz xaquire xrelease bnd nobnd aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63",
        built_in: (
          // Instruction pointer
          "ip eip rip al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 cs ds es fs gs ss st st0 st1 st2 st3 st4 st5 st6 st7 mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 k0 k1 k2 k3 k4 k5 k6 k7 bnd0 bnd1 bnd2 bnd3 cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d r0h r1h r2h r3h r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l db dw dd dq dt ddq do dy dz resb resw resd resq rest resdq reso resy resz incbin equ times byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr"
        ),
        meta: "%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif %if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep %endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment .nolist __FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ __UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend align alignb sectalign daz nodaz up down zero default option assume public bits use16 use32 use64 default section segment absolute extern global common cpu float __utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ __float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ __Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__"
      },
      contains: [
        e.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        {
          className: "number",
          variants: [
            // Float number and x87 BCD
            {
              begin: "\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|(0[Xx])?[0-9][0-9_]*(\\.[0-9_]*)?(?:[pP](?:[+-]?[0-9_]+)?)?)\\b",
              relevance: 0
            },
            // Hex number in $
            {
              begin: "\\$[0-9][0-9A-Fa-f]*",
              relevance: 0
            },
            // Number in H,D,T,Q,O,B,Y suffix
            { begin: "\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b" },
            // Number in X,D,T,Q,O,B,Y prefix
            { begin: "\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b" }
          ]
        },
        // Double quote string
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          variants: [
            // Single-quoted string
            {
              begin: "'",
              end: "[^\\\\]'"
            },
            // Backquoted string
            {
              begin: "`",
              end: "[^\\\\]`"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            // Global label and local label
            { begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)" },
            // Macro-local label
            { begin: "^\\s*%%[A-Za-z0-9_$#@~.?]*:" }
          ],
          relevance: 0
        },
        // Macro parameter
        {
          className: "subst",
          begin: "%[0-9]+",
          relevance: 0
        },
        // Macro parameter
        {
          className: "subst",
          begin: "%!S+",
          relevance: 0
        },
        {
          className: "meta",
          begin: /^\s*\.[\w_-]+/
        }
      ]
    };
  }
  return vp = t, vp;
}
var Sp, w0;
function MN() {
  if (w0)
    return Sp;
  w0 = 1;
  function t(e) {
    const r = [
      "if",
      "then",
      "else",
      "do",
      "while",
      "until",
      "for",
      "loop",
      "import",
      "with",
      "is",
      "as",
      "where",
      "when",
      "by",
      "data",
      "constant",
      "integer",
      "real",
      "text",
      "name",
      "boolean",
      "symbol",
      "infix",
      "prefix",
      "postfix",
      "block",
      "tree"
    ], n = [
      "in",
      "mod",
      "rem",
      "and",
      "or",
      "xor",
      "not",
      "abs",
      "sign",
      "floor",
      "ceil",
      "sqrt",
      "sin",
      "cos",
      "tan",
      "asin",
      "acos",
      "atan",
      "exp",
      "expm1",
      "log",
      "log2",
      "log10",
      "log1p",
      "pi",
      "at",
      "text_length",
      "text_range",
      "text_find",
      "text_replace",
      "contains",
      "page",
      "slide",
      "basic_slide",
      "title_slide",
      "title",
      "subtitle",
      "fade_in",
      "fade_out",
      "fade_at",
      "clear_color",
      "color",
      "line_color",
      "line_width",
      "texture_wrap",
      "texture_transform",
      "texture",
      "scale_?x",
      "scale_?y",
      "scale_?z?",
      "translate_?x",
      "translate_?y",
      "translate_?z?",
      "rotate_?x",
      "rotate_?y",
      "rotate_?z?",
      "rectangle",
      "circle",
      "ellipse",
      "sphere",
      "path",
      "line_to",
      "move_to",
      "quad_to",
      "curve_to",
      "theme",
      "background",
      "contents",
      "locally",
      "time",
      "mouse_?x",
      "mouse_?y",
      "mouse_buttons"
    ], i = [
      "ObjectLoader",
      "Animate",
      "MovieCredits",
      "Slides",
      "Filters",
      "Shading",
      "Materials",
      "LensFlare",
      "Mapping",
      "VLCAudioVideo",
      "StereoDecoder",
      "PointCloud",
      "NetworkAccess",
      "RemoteControl",
      "RegExp",
      "ChromaKey",
      "Snowfall",
      "NodeJS",
      "Speech",
      "Charts"
    ], o = {
      $pattern: /[a-zA-Z][a-zA-Z0-9_?]*/,
      keyword: r,
      literal: [
        "true",
        "false",
        "nil"
      ],
      built_in: n.concat(i)
    }, a = {
      className: "string",
      begin: '"',
      end: '"',
      illegal: "\\n"
    }, l = {
      className: "string",
      begin: "'",
      end: "'",
      illegal: "\\n"
    }, c = {
      className: "string",
      begin: "<<",
      end: ">>"
    }, f = {
      className: "number",
      begin: "[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?"
    }, m = {
      beginKeywords: "import",
      end: "$",
      keywords: o,
      contains: [a]
    }, b = {
      className: "function",
      begin: /[a-z][^\n]*->/,
      returnBegin: !0,
      end: /->/,
      contains: [
        e.inherit(e.TITLE_MODE, { starts: {
          endsWithParent: !0,
          keywords: o
        } })
      ]
    };
    return {
      name: "XL",
      aliases: ["tao"],
      keywords: o,
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        a,
        l,
        c,
        b,
        m,
        f,
        e.NUMBER_MODE
      ]
    };
  }
  return Sp = t, Sp;
}
var yp, A0;
function LN() {
  if (A0)
    return yp;
  A0 = 1;
  function t(e) {
    return {
      name: "XQuery",
      aliases: [
        "xpath",
        "xq",
        "xqm"
      ],
      case_insensitive: !1,
      illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
      keywords: {
        $pattern: /[a-zA-Z$][a-zA-Z0-9_:-]*/,
        keyword: [
          "module",
          "schema",
          "namespace",
          "boundary-space",
          "preserve",
          "no-preserve",
          "strip",
          "default",
          "collation",
          "base-uri",
          "ordering",
          "context",
          "decimal-format",
          "decimal-separator",
          "copy-namespaces",
          "empty-sequence",
          "except",
          "exponent-separator",
          "external",
          "grouping-separator",
          "inherit",
          "no-inherit",
          "lax",
          "minus-sign",
          "per-mille",
          "percent",
          "schema-attribute",
          "schema-element",
          "strict",
          "unordered",
          "zero-digit",
          "declare",
          "import",
          "option",
          "function",
          "validate",
          "variable",
          "for",
          "at",
          "in",
          "let",
          "where",
          "order",
          "group",
          "by",
          "return",
          "if",
          "then",
          "else",
          "tumbling",
          "sliding",
          "window",
          "start",
          "when",
          "only",
          "end",
          "previous",
          "next",
          "stable",
          "ascending",
          "descending",
          "allowing",
          "empty",
          "greatest",
          "least",
          "some",
          "every",
          "satisfies",
          "switch",
          "case",
          "typeswitch",
          "try",
          "catch",
          "and",
          "or",
          "to",
          "union",
          "intersect",
          "instance",
          "of",
          "treat",
          "as",
          "castable",
          "cast",
          "map",
          "array",
          "delete",
          "insert",
          "into",
          "replace",
          "value",
          "rename",
          "copy",
          "modify",
          "update"
        ],
        type: [
          "item",
          "document-node",
          "node",
          "attribute",
          "document",
          "element",
          "comment",
          "namespace",
          "namespace-node",
          "processing-instruction",
          "text",
          "construction",
          "xs:anyAtomicType",
          "xs:untypedAtomic",
          "xs:duration",
          "xs:time",
          "xs:decimal",
          "xs:float",
          "xs:double",
          "xs:gYearMonth",
          "xs:gYear",
          "xs:gMonthDay",
          "xs:gMonth",
          "xs:gDay",
          "xs:boolean",
          "xs:base64Binary",
          "xs:hexBinary",
          "xs:anyURI",
          "xs:QName",
          "xs:NOTATION",
          "xs:dateTime",
          "xs:dateTimeStamp",
          "xs:date",
          "xs:string",
          "xs:normalizedString",
          "xs:token",
          "xs:language",
          "xs:NMTOKEN",
          "xs:Name",
          "xs:NCName",
          "xs:ID",
          "xs:IDREF",
          "xs:ENTITY",
          "xs:integer",
          "xs:nonPositiveInteger",
          "xs:negativeInteger",
          "xs:long",
          "xs:int",
          "xs:short",
          "xs:byte",
          "xs:nonNegativeInteger",
          "xs:unisignedLong",
          "xs:unsignedInt",
          "xs:unsignedShort",
          "xs:unsignedByte",
          "xs:positiveInteger",
          "xs:yearMonthDuration",
          "xs:dayTimeDuration"
        ],
        literal: [
          "eq",
          "ne",
          "lt",
          "le",
          "gt",
          "ge",
          "is",
          "self::",
          "child::",
          "descendant::",
          "descendant-or-self::",
          "attribute::",
          "following::",
          "following-sibling::",
          "parent::",
          "ancestor::",
          "ancestor-or-self::",
          "preceding::",
          "preceding-sibling::",
          "NaN"
        ]
      },
      contains: [
        {
          className: "variable",
          begin: /[$][\w\-:]+/
        },
        {
          className: "built_in",
          variants: [
            {
              begin: /\barray:/,
              end: /(?:append|filter|flatten|fold-(?:left|right)|for-each(?:-pair)?|get|head|insert-before|join|put|remove|reverse|size|sort|subarray|tail)\b/
            },
            {
              begin: /\bmap:/,
              end: /(?:contains|entry|find|for-each|get|keys|merge|put|remove|size)\b/
            },
            {
              begin: /\bmath:/,
              end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\b/
            },
            {
              begin: /\bop:/,
              end: /\(/,
              excludeEnd: !0
            },
            {
              begin: /\bfn:/,
              end: /\(/,
              excludeEnd: !0
            },
            // do not highlight inbuilt strings as variable or xml element names
            { begin: /[^</$:'"-]\b(?:abs|accumulator-(?:after|before)|adjust-(?:date(?:Time)?|time)-to-timezone|analyze-string|apply|available-(?:environment-variables|system-properties)|avg|base-uri|boolean|ceiling|codepoints?-(?:equal|to-string)|collation-key|collection|compare|concat|contains(?:-token)?|copy-of|count|current(?:-)?(?:date(?:Time)?|time|group(?:ing-key)?|output-uri|merge-(?:group|key))?data|dateTime|days?-from-(?:date(?:Time)?|duration)|deep-equal|default-(?:collation|language)|distinct-values|document(?:-uri)?|doc(?:-available)?|element-(?:available|with-id)|empty|encode-for-uri|ends-with|environment-variable|error|escape-html-uri|exactly-one|exists|false|filter|floor|fold-(?:left|right)|for-each(?:-pair)?|format-(?:date(?:Time)?|time|integer|number)|function-(?:arity|available|lookup|name)|generate-id|has-children|head|hours-from-(?:dateTime|duration|time)|id(?:ref)?|implicit-timezone|in-scope-prefixes|index-of|innermost|insert-before|iri-to-uri|json-(?:doc|to-xml)|key|lang|last|load-xquery-module|local-name(?:-from-QName)?|(?:lower|upper)-case|matches|max|minutes-from-(?:dateTime|duration|time)|min|months?-from-(?:date(?:Time)?|duration)|name(?:space-uri-?(?:for-prefix|from-QName)?)?|nilled|node-name|normalize-(?:space|unicode)|not|number|one-or-more|outermost|parse-(?:ietf-date|json)|path|position|(?:prefix-from-)?QName|random-number-generator|regex-group|remove|replace|resolve-(?:QName|uri)|reverse|root|round(?:-half-to-even)?|seconds-from-(?:dateTime|duration|time)|snapshot|sort|starts-with|static-base-uri|stream-available|string-?(?:join|length|to-codepoints)?|subsequence|substring-?(?:after|before)?|sum|system-property|tail|timezone-from-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type-available|unordered|unparsed-(?:entity|text)?-?(?:public-id|uri|available|lines)?|uri-collection|xml-to-json|years?-from-(?:date(?:Time)?|duration)|zero-or-one)\b/ },
            {
              begin: /\blocal:/,
              end: /\(/,
              excludeEnd: !0
            },
            {
              begin: /\bzip:/,
              end: /(?:zip-file|(?:xml|html|text|binary)-entry| (?:update-)?entries)\b/
            },
            {
              begin: /\b(?:util|db|functx|app|xdmp|xmldb):/,
              end: /\(/,
              excludeEnd: !0
            }
          ]
        },
        {
          className: "string",
          variants: [
            {
              begin: /"/,
              end: /"/,
              contains: [
                {
                  begin: /""/,
                  relevance: 0
                }
              ]
            },
            {
              begin: /'/,
              end: /'/,
              contains: [
                {
                  begin: /''/,
                  relevance: 0
                }
              ]
            }
          ]
        },
        {
          className: "number",
          begin: /(\b0[0-7_]+)|(\b0x[0-9a-fA-F_]+)|(\b[1-9][0-9_]*(\.[0-9_]+)?)|[0_]\b/,
          relevance: 0
        },
        {
          className: "comment",
          begin: /\(:/,
          end: /:\)/,
          relevance: 10,
          contains: [
            {
              className: "doctag",
              begin: /@\w+/
            }
          ]
        },
        {
          className: "meta",
          begin: /%[\w\-:]+/
        },
        {
          className: "title",
          begin: /\bxquery version "[13]\.[01]"\s?(?:encoding ".+")?/,
          end: /;/
        },
        {
          beginKeywords: "element attribute comment document processing-instruction",
          end: /\{/,
          excludeEnd: !0
        },
        {
          begin: /<([\w._:-]+)(\s+\S*=('|").*('|"))?>/,
          end: /(\/[\w._:-]+>)/,
          subLanguage: "xml",
          contains: [
            {
              begin: /\{/,
              end: /\}/,
              subLanguage: "xquery"
            },
            "self"
          ]
        }
      ]
    };
  }
  return yp = t, yp;
}
var Tp, R0;
function PN() {
  if (R0)
    return Tp;
  R0 = 1;
  function t(e) {
    const r = {
      className: "string",
      contains: [e.BACKSLASH_ESCAPE],
      variants: [
        e.inherit(e.APOS_STRING_MODE, { illegal: null }),
        e.inherit(e.QUOTE_STRING_MODE, { illegal: null })
      ]
    }, n = e.UNDERSCORE_TITLE_MODE, i = { variants: [
      e.BINARY_NUMBER_MODE,
      e.C_NUMBER_MODE
    ] }, s = (
      // classes and objects
      "namespace class interface use extends function return abstract final public protected private static deprecated throw try catch Exception echo empty isset instanceof unset let var new const self require if else elseif switch case default do while loop for continue break likely unlikely __LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ array boolean float double integer object resource string char long unsigned bool int uint ulong uchar true false null undefined"
    );
    return {
      name: "Zephir",
      aliases: ["zep"],
      keywords: s,
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.COMMENT(
          /\/\*/,
          /\*\//,
          { contains: [
            {
              className: "doctag",
              begin: /@[A-Za-z]+/
            }
          ] }
        ),
        {
          className: "string",
          begin: /<<<['"]?\w+['"]?$/,
          end: /^\w+;/,
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          // swallow composed identifiers to avoid parsing them as keywords
          begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
        },
        {
          className: "function",
          beginKeywords: "function fn",
          end: /[;{]/,
          excludeEnd: !0,
          illegal: /\$|\[|%/,
          contains: [
            n,
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: s,
              contains: [
                "self",
                e.C_BLOCK_COMMENT_MODE,
                r,
                i
              ]
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class interface",
          end: /\{/,
          excludeEnd: !0,
          illegal: /[:($"]/,
          contains: [
            { beginKeywords: "extends implements" },
            n
          ]
        },
        {
          beginKeywords: "namespace",
          end: /;/,
          illegal: /[.']/,
          contains: [n]
        },
        {
          beginKeywords: "use",
          end: /;/,
          contains: [n]
        },
        {
          begin: /=>/
          // No markup, just a relevance booster
        },
        r,
        i
      ]
    };
  }
  return Tp = t, Tp;
}
var lt = aA;
lt.registerLanguage("1c", lA());
lt.registerLanguage("abnf", cA());
lt.registerLanguage("accesslog", uA());
lt.registerLanguage("actionscript", dA());
lt.registerLanguage("ada", fA());
lt.registerLanguage("angelscript", pA());
lt.registerLanguage("apache", _A());
lt.registerLanguage("applescript", hA());
lt.registerLanguage("arcade", mA());
lt.registerLanguage("arduino", gA());
lt.registerLanguage("armasm", $A());
lt.registerLanguage("xml", bA());
lt.registerLanguage("asciidoc", EA());
lt.registerLanguage("aspectj", vA());
lt.registerLanguage("autohotkey", SA());
lt.registerLanguage("autoit", yA());
lt.registerLanguage("avrasm", TA());
lt.registerLanguage("awk", CA());
lt.registerLanguage("axapta", wA());
lt.registerLanguage("bash", AA());
lt.registerLanguage("basic", RA());
lt.registerLanguage("bnf", xA());
lt.registerLanguage("brainfuck", NA());
lt.registerLanguage("c", kA());
lt.registerLanguage("cal", IA());
lt.registerLanguage("capnproto", OA());
lt.registerLanguage("ceylon", DA());
lt.registerLanguage("clean", MA());
lt.registerLanguage("clojure", LA());
lt.registerLanguage("clojure-repl", PA());
lt.registerLanguage("cmake", FA());
lt.registerLanguage("coffeescript", BA());
lt.registerLanguage("coq", UA());
lt.registerLanguage("cos", qA());
lt.registerLanguage("cpp", zA());
lt.registerLanguage("crmsh", GA());
lt.registerLanguage("crystal", YA());
lt.registerLanguage("csharp", HA());
lt.registerLanguage("csp", VA());
lt.registerLanguage("css", WA());
lt.registerLanguage("d", KA());
lt.registerLanguage("markdown", QA());
lt.registerLanguage("dart", jA());
lt.registerLanguage("delphi", XA());
lt.registerLanguage("diff", ZA());
lt.registerLanguage("django", JA());
lt.registerLanguage("dns", eR());
lt.registerLanguage("dockerfile", tR());
lt.registerLanguage("dos", rR());
lt.registerLanguage("dsconfig", nR());
lt.registerLanguage("dts", iR());
lt.registerLanguage("dust", sR());
lt.registerLanguage("ebnf", oR());
lt.registerLanguage("elixir", aR());
lt.registerLanguage("elm", lR());
lt.registerLanguage("ruby", cR());
lt.registerLanguage("erb", uR());
lt.registerLanguage("erlang-repl", dR());
lt.registerLanguage("erlang", fR());
lt.registerLanguage("excel", pR());
lt.registerLanguage("fix", _R());
lt.registerLanguage("flix", hR());
lt.registerLanguage("fortran", mR());
lt.registerLanguage("fsharp", gR());
lt.registerLanguage("gams", $R());
lt.registerLanguage("gauss", bR());
lt.registerLanguage("gcode", ER());
lt.registerLanguage("gherkin", vR());
lt.registerLanguage("glsl", SR());
lt.registerLanguage("gml", yR());
lt.registerLanguage("go", TR());
lt.registerLanguage("golo", CR());
lt.registerLanguage("gradle", wR());
lt.registerLanguage("graphql", AR());
lt.registerLanguage("groovy", RR());
lt.registerLanguage("haml", xR());
lt.registerLanguage("handlebars", NR());
lt.registerLanguage("haskell", kR());
lt.registerLanguage("haxe", IR());
lt.registerLanguage("hsp", OR());
lt.registerLanguage("http", DR());
lt.registerLanguage("hy", MR());
lt.registerLanguage("inform7", LR());
lt.registerLanguage("ini", PR());
lt.registerLanguage("irpf90", FR());
lt.registerLanguage("isbl", BR());
lt.registerLanguage("java", UR());
lt.registerLanguage("javascript", qR());
lt.registerLanguage("jboss-cli", zR());
lt.registerLanguage("json", GR());
lt.registerLanguage("julia", YR());
lt.registerLanguage("julia-repl", HR());
lt.registerLanguage("kotlin", VR());
lt.registerLanguage("lasso", WR());
lt.registerLanguage("latex", KR());
lt.registerLanguage("ldif", QR());
lt.registerLanguage("leaf", jR());
lt.registerLanguage("less", XR());
lt.registerLanguage("lisp", ZR());
lt.registerLanguage("livecodeserver", JR());
lt.registerLanguage("livescript", ex());
lt.registerLanguage("llvm", tx());
lt.registerLanguage("lsl", rx());
lt.registerLanguage("lua", nx());
lt.registerLanguage("makefile", ix());
lt.registerLanguage("mathematica", sx());
lt.registerLanguage("matlab", ox());
lt.registerLanguage("maxima", ax());
lt.registerLanguage("mel", lx());
lt.registerLanguage("mercury", cx());
lt.registerLanguage("mipsasm", ux());
lt.registerLanguage("mizar", dx());
lt.registerLanguage("perl", fx());
lt.registerLanguage("mojolicious", px());
lt.registerLanguage("monkey", _x());
lt.registerLanguage("moonscript", hx());
lt.registerLanguage("n1ql", mx());
lt.registerLanguage("nestedtext", gx());
lt.registerLanguage("nginx", $x());
lt.registerLanguage("nim", bx());
lt.registerLanguage("nix", Ex());
lt.registerLanguage("node-repl", vx());
lt.registerLanguage("nsis", Sx());
lt.registerLanguage("objectivec", yx());
lt.registerLanguage("ocaml", Tx());
lt.registerLanguage("openscad", Cx());
lt.registerLanguage("oxygene", wx());
lt.registerLanguage("parser3", Ax());
lt.registerLanguage("pf", Rx());
lt.registerLanguage("pgsql", xx());
lt.registerLanguage("php", Nx());
lt.registerLanguage("php-template", kx());
lt.registerLanguage("plaintext", Ix());
lt.registerLanguage("pony", Ox());
lt.registerLanguage("powershell", Dx());
lt.registerLanguage("processing", Mx());
lt.registerLanguage("profile", Lx());
lt.registerLanguage("prolog", Px());
lt.registerLanguage("properties", Fx());
lt.registerLanguage("protobuf", Bx());
lt.registerLanguage("puppet", Ux());
lt.registerLanguage("purebasic", qx());
lt.registerLanguage("python", zx());
lt.registerLanguage("python-repl", Gx());
lt.registerLanguage("q", Yx());
lt.registerLanguage("qml", Hx());
lt.registerLanguage("r", Vx());
lt.registerLanguage("reasonml", Wx());
lt.registerLanguage("rib", Kx());
lt.registerLanguage("roboconf", Qx());
lt.registerLanguage("routeros", jx());
lt.registerLanguage("rsl", Xx());
lt.registerLanguage("ruleslanguage", Zx());
lt.registerLanguage("rust", Jx());
lt.registerLanguage("sas", eN());
lt.registerLanguage("scala", tN());
lt.registerLanguage("scheme", rN());
lt.registerLanguage("scilab", nN());
lt.registerLanguage("scss", iN());
lt.registerLanguage("shell", sN());
lt.registerLanguage("smali", oN());
lt.registerLanguage("smalltalk", aN());
lt.registerLanguage("sml", lN());
lt.registerLanguage("sqf", cN());
lt.registerLanguage("sql", uN());
lt.registerLanguage("stan", dN());
lt.registerLanguage("stata", fN());
lt.registerLanguage("step21", pN());
lt.registerLanguage("stylus", _N());
lt.registerLanguage("subunit", hN());
lt.registerLanguage("swift", mN());
lt.registerLanguage("taggerscript", gN());
lt.registerLanguage("yaml", $N());
lt.registerLanguage("tap", bN());
lt.registerLanguage("tcl", EN());
lt.registerLanguage("thrift", vN());
lt.registerLanguage("tp", SN());
lt.registerLanguage("twig", yN());
lt.registerLanguage("typescript", TN());
lt.registerLanguage("vala", CN());
lt.registerLanguage("vbnet", wN());
lt.registerLanguage("vbscript", AN());
lt.registerLanguage("vbscript-html", RN());
lt.registerLanguage("verilog", xN());
lt.registerLanguage("vhdl", NN());
lt.registerLanguage("vim", kN());
lt.registerLanguage("wasm", IN());
lt.registerLanguage("wren", ON());
lt.registerLanguage("x86asm", DN());
lt.registerLanguage("xl", MN());
lt.registerLanguage("xquery", LN());
lt.registerLanguage("zephir", PN());
lt.HighlightJS = lt;
lt.default = lt;
var FN = lt;
const f_ = /* @__PURE__ */ xa(FN);
function xh(t) {
  const e = t.split(`
`);
  e[0] === "" && e.splice(0, 1);
  const r = e[0];
  let n = 0;
  const s = r.startsWith("	") ? "	" : " ";
  for (; r[n] === s; )
    n += 1;
  const o = [];
  for (const a of e) {
    let l = a;
    for (let c = 0; c < n && l.startsWith(s); c++)
      l = l.substring(1);
    o.push(l);
  }
  return o[o.length - 1] === "" && o.splice(o.length - 1, 1), o.join(`
`);
}
const Cp = /* @__PURE__ */ new Map();
function BN(t, e = "cors") {
  const r = Cp.get(t);
  if (r !== void 0)
    return Promise.resolve(r);
  const n = fetch(t, { mode: e }).then(async (i) => {
    const s = {
      ok: i.ok,
      status: i.status,
      data: await i.text()
    };
    return Cp.set(t, s), s;
  });
  return Cp.set(t, n), n;
}
var ln = {
  fullscreenEnabled: 0,
  fullscreenElement: 1,
  requestFullscreen: 2,
  exitFullscreen: 3,
  fullscreenchange: 4,
  fullscreenerror: 5,
  fullscreen: 6
}, x0 = [
  "webkitFullscreenEnabled",
  "webkitFullscreenElement",
  "webkitRequestFullscreen",
  "webkitExitFullscreen",
  "webkitfullscreenchange",
  "webkitfullscreenerror",
  "-webkit-full-screen"
], N0 = [
  "mozFullScreenEnabled",
  "mozFullScreenElement",
  "mozRequestFullScreen",
  "mozCancelFullScreen",
  "mozfullscreenchange",
  "mozfullscreenerror",
  "-moz-full-screen"
], k0 = [
  "msFullscreenEnabled",
  "msFullscreenElement",
  "msRequestFullscreen",
  "msExitFullscreen",
  "MSFullscreenChange",
  "MSFullscreenError",
  "-ms-fullscreen"
], tn = typeof window < "u" && typeof window.document < "u" ? window.document : {}, En = "fullscreenEnabled" in tn && Object.keys(ln) || x0[0] in tn && x0 || N0[0] in tn && N0 || k0[0] in tn && k0 || [], wp = {
  requestFullscreen: function(t) {
    return t[En[ln.requestFullscreen]]();
  },
  requestFullscreenFunction: function(t) {
    return t[En[ln.requestFullscreen]];
  },
  get exitFullscreen() {
    return tn[En[ln.exitFullscreen]].bind(tn);
  },
  get fullscreenPseudoClass() {
    return ":" + En[ln.fullscreen];
  },
  addEventListener: function(t, e, r) {
    return tn.addEventListener(En[ln[t]], e, r);
  },
  removeEventListener: function(t, e, r) {
    return tn.removeEventListener(En[ln[t]], e, r);
  },
  get fullscreenEnabled() {
    return !!tn[En[ln.fullscreenEnabled]];
  },
  set fullscreenEnabled(t) {
  },
  get fullscreenElement() {
    return tn[En[ln.fullscreenElement]];
  },
  set fullscreenElement(t) {
  },
  get onfullscreenchange() {
    return tn[("on" + En[ln.fullscreenchange]).toLowerCase()];
  },
  set onfullscreenchange(t) {
    return tn[("on" + En[ln.fullscreenchange]).toLowerCase()] = t;
  },
  get onfullscreenerror() {
    return tn[("on" + En[ln.fullscreenerror]).toLowerCase()];
  },
  set onfullscreenerror(t) {
    return tn[("on" + En[ln.fullscreenerror]).toLowerCase()] = t;
  }
};
const UN = ":host{box-sizing:border-box}:host *,:host *:before,:host *:after{box-sizing:inherit}.hidden,[hidden]{display:none!important}.rtl{direction:rtl}.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}:host{display:block}";
var qN = Object.defineProperty, zN = Object.getOwnPropertyDescriptor, GN = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? zN(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && qN(e, r, i), i;
};
const Cm = class Cm extends Fs {
  constructor() {
    super(...arguments), this.fullscreen = !1;
  }
  /**
   * Emission d'un événement `CustomEvent` par l'élément.
   *
   * Par défaut, l'événement se propage dans le DOM (`bubbles: true`);
   * il traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)
   * et ne peut être empêché de le faire (`cancelable: false`).
   *
   */
  emit(e, r) {
    const n = new CustomEvent(e, {
      bubbles: !0,
      cancelable: !1,
      composed: !0,
      detail: {},
      ...r
    });
    return this.dispatchEvent(n), n;
  }
  /**
   * Passe en mode plein écran ou sort du mode plein écran.
   *
   * On peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.
   */
  toggleFullscreen() {
    this.fullscreen = !this.fullscreen, wp.fullscreenElement ? wp.exitFullscreen() : wp.requestFullscreen(this);
  }
  /**
   * Crée une alerte qui affiche le message associé pendant une durée donnée.
   *
   * @param {string} message - le message d'alerte
   * @param {string} [variant="primary"] - apparence du message
   * @param {string} [icon="it-mdi-information-variant-circle-outline"] - icône associé au message.
   * @param {string} [duration="3000"] - durée d'affichage de l'alerte en millisecondes.
   * @returns
   * @memberof EnibookElement
   */
  notify(e, r = "primary", n = "it-mdi-information-variant-circle-outline", i = "3000") {
    const s = Object.assign(document.createElement("sl-alert"), {
      variant: r,
      closable: !0,
      duration: i,
      innerHTML: `
          <div slot="icon"><${n}></${n}</div>
          ${this.wrap(e)}
        `
    });
    return document.body.append(s), s.toast();
  }
  wrap(e) {
    const r = document.createElement("div");
    return r.textContent = e, r.innerHTML;
  }
};
Cm.styles = [
  jr(UN),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: icons */
.it-mdi-information-variant-circle-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M12.3 7.29c.2-.18.44-.29.7-.29c.27 0 .5.11.71.29c.19.21.29.45.29.71c0 .27-.1.5-.29.71c-.21.19-.44.29-.71.29c-.26 0-.5-.1-.7-.29c-.19-.21-.3-.44-.3-.71c0-.26.11-.5.3-.71m-2.5 4.68s2.17-1.72 2.96-1.79c.74-.06.59.79.52 1.23l-.01.06c-.14.53-.31 1.17-.48 1.78c-.38 1.39-.75 2.75-.66 3c.1.34.72-.09 1.17-.39c.06-.04.11-.08.16-.11c0 0 .08-.08.16.03c.02.03.04.06.06.08c.09.14.14.19.02.27l-.04.02c-.22.15-1.16.81-1.54 1.05c-.41.27-1.98 1.17-1.74-.58c.21-1.23.49-2.29.71-3.12c.41-1.5.59-2.18-.33-1.59c-.37.22-.59.36-.72.45c-.11.08-.12.08-.19-.05l-.03-.06l-.05-.08c-.07-.1-.07-.11.03-.2M22 12c0 5.5-4.5 10-10 10S2 17.5 2 12S6.5 2 12 2s10 4.5 10 10m-2 0c0-4.42-3.58-8-8-8s-8 3.58-8 8s3.58 8 8 8s8-3.58 8-8'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
/* layer: default */
.static{position:static;}`
];
let hn = Cm;
GN([
  Gr()
], hn.prototype, "fullscreen", 2);
const YN = ":host{box-sizing:border-box}:host *,:host *:before,:host *:after{box-sizing:inherit}.hidden,[hidden]{display:none!important}.rtl{direction:rtl}.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}.light,:root{--hljs-font-weight-bold: var(--sl-font-weight-bold);--hljs-addition: green;--hljs-attr: var(--sl-color-sky-700);--hljs-attribute: var(--sl-color-sky-700);--hljs-background: var(--sl-color-neutral-100);--hljs-built_in: var(--sl-color-green-700);--hljs-builtin-name: var(--sl-color-neutral-900);--hljs-bullet: #00b0e8;--hljs-class: var(--sl-color-blue-900);--hljs-color: var(--sl-color-neutral-900);--hljs-comment: var(--sl-color-neutral-600);--hljs-deletion: red;--hljs-doctag: var(--sl-color-amber-900);--hljs-formula: var(--sl-color-neutral-900);--hljs-function: var(--sl-color-yellow-800);--hljs-keyword: var(--sl-color-blue-600);--hljs-link: #00b0e8;--hljs-literal: var(--sl-color-blue-600);--hljs-meta: #2b91af;--hljs-meta-keyword: var(--sl-color-neutral-900);--hljs-meta-string: var(--sl-color-neutral-900);--hljs-name: var(--sl-color-blue-600);--hljs-number: var(--sl-color-blue-800);--hljs-params: var(--sl-color-yellow-600);--hljs-quote: green;--hljs-regexp: var(--sl-color-neutral-900);--hljs-section: #a31515;--hljs-selector-attr: var(--sl-color-cyan-400);--hljs-selector-class: var(--sl-color-yellow-600);--hljs-selector-id: var(--sl-color-yellow-600);--hljs-selector-pseudo: var(--sl-color-cyan-400);--hljs-selector-tag: var(--sl-color-yellow-600);--hljs-string: var(--sl-color-amber-400);--hljs-subst: var(--sl-color-neutral-900);--hljs-symbol: var(--sl-color-blue-600);--hljs-tag: var(--sl-color-neutral-600);--hljs-template-tag: #a31515;--hljs-template-variable: #a31515;--hljs-title: var(--sl-color-yellow-700);--hljs-type: var(--sl-color-green-600);--hljs-variable: green}.dark,:root{--hljs-font-weight-bold: var(--sl-font-weight-bold);--hljs-addition: green;--hljs-attr: var(--sl-color-sky-300);--hljs-attribute: var(--sl-color-sky-300);--hljs-background: var(--sl-color-neutral-900);--hljs-built_in: var(--sl-color-green-300);--hljs-builtin-name: var(--sl-color-neutral-100);--hljs-bullet: #00b0e8;--hljs-class: var(--sl-color-blue-100);--hljs-color: var(--sl-color-neutral-100);--hljs-comment: var(--sl-color-neutral-400);--hljs-deletion: red;--hljs-doctag: var(--sl-color-amber-100);--hljs-formula: var(--sl-color-neutral-100);--hljs-function: var(--sl-color-yellow-200);--hljs-keyword: var(--sl-color-blue-400);--hljs-link: #00b0e8;--hljs-literal: var(--sl-color-blue-400);--hljs-meta: #2b91af;--hljs-meta-keyword: var(--sl-color-neutral-100);--hljs-meta-string: var(--sl-color-neutral-100);--hljs-name: var(--sl-color-blue-400);--hljs-number: var(--sl-color-blue-200);--hljs-params: var(--sl-color-yellow-400);--hljs-quote: green;--hljs-regexp: var(--sl-color-neutral-100);--hljs-section: #a31515;--hljs-selector-attr: var(--sl-color-cyan-600);--hljs-selector-class: var(--sl-color-yellow-400);--hljs-selector-id: var(--sl-color-yellow-400);--hljs-selector-pseudo: var(--sl-color-cyan-600);--hljs-selector-tag: var(--sl-color-yellow-400);--hljs-string: var(--sl-color-amber-600);--hljs-subst: var(--sl-color-neutral-100);--hljs-symbol: var(--sl-color-blue-400);--hljs-tag: var(--sl-color-neutral-400);--hljs-template-tag: #a31515;--hljs-template-variable: #a31515;--hljs-title: var(--sl-color-yellow-300);--hljs-type: var(--sl-color-green-400);--hljs-variable: green}pre code.hljs{display:block;overflow-x:auto;padding:var(--sl-spacing-medium)}code.hljs{padding:var(--sl-spacing-3x-small) var(--sl-spacing-2x-small)}.hljs{background:var(--hljs-background);color:var(--hljs-color)}.hljs-string,.hljs-meta .hljs-string{color:var(--hljs-string)}.hljs-comment,.hljs-quote{color:var(--hljs-comment);font-style:italic}.hljs-meta .hljs-keyword{color:var(--hljs-keyword)}.hljs-tag .hljs-attr,.hljs-tag .hljs-attribute,.hljs-attr,.hljs-attribute{color:var(--hljs-attr)}.hljs-strong{font-weight:var(--hljs-font-weight-bold)}:host{display:block}code{color:var(--sl-color-yellow-800)}p{margin:0;margin-bottom:var(--sl-spacing-medium)}pre{white-space:pre-wrap}.preview{display:flex;flex-wrap:wrap;gap:0rem}.preview>*{flex-grow:1;flex-basis:calc((30rem - 100%)*999)}.preview>:nth-last-child(n+3),.preview>:nth-last-child(n+3)~*{flex-basis:100%}.preview__code,.preview__view{padding:var(--sl-spacing-small);border:1px solid var(--sl-color-neutral-200)}.preview__code__title,.preview__view__title{border-bottom:1px solid var(--sl-color-neutral-200)}.preview__code__title code{color:var(--color-code)}.preview:hover [part=code],.preview:hover [part=view]{border:1px solid var(--color-primary)}.preview:hover .preview__code__title,.preview:hover .preview__view__title{border-bottom:1px solid var(--color-primary)}.preview:hover it-mdi-drag-vertical,.preview:hover sl-split-panel::part(divider),.preview:hover sl-split-panel .divider{background-color:var(--color-primary)}sl-split-panel .divider{border-radius:var(--sl-border-radius-small);background-color:var(--sl-color-neutral-200)}sl-split-panel{--divider-width: 1px;--min: 20%;--max: 80%}.hljs{display:block;overflow-x:auto;padding:.5em;background:var(--hljs-background);color:var(--hljs-color);border-radius:.5em}.hljs-keyword{color:var(--hljs-keyword)}.hljs-literal{color:var(--hljs-literal)}.hljs-symbol{color:var(--hljs-symbol)}.hljs-name{color:var(--hljs-name)}.hljs-link{color:var(--hljs-link);text-decoration:underline}.hljs-built_in{color:var(--hljs-built_in)}.hljs-type{color:var(--hljs-type)}.hljs-number{color:var(--hljs-number)}.hljs-class{color:var(--hljs-class)}.hljs-string{color:var(--hljs-string)}.hljs-meta-string{color:var(--hljs-meta-string)}.hljs-regexp{color:var(--hljs-regexp)}.hljs-template-tag{color:var(--hljs-template-tag)}.hljs-subst{color:var(--hljs-subst)}.hljs-function{color:var(--hljs-function)}.hljs-title{color:var(--hljs-title)}.hljs-params{color:var(--hljs-params)}.hljs-formula{color:var(--hljs-formula)}.hljs-comment{color:var(--hljs-comment);font-style:italic}.hljs-quote{color:var(--hljs-quote);font-style:italic}.hljs-doctag{color:var(--hljs-doctag)}.hljs-meta{color:var(--hljs-meta)}.hljs-meta-keyword{color:var(--hljs-meta-keyword)}.hljs-tag{color:var(--hljs-tag)}.hljs-variable{color:var(--hljs-variable)}.hljs-template-variable{color:var(--hljs-template-variable)}.hljs-attr{color:var(--hljs-attr)}.hljs-attribute{color:var(--hljs-attribute)}.hljs-builtin-name{color:var(--hljs-builtin-name)}.hljs-section{color:var(--hljs-section)}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-bullet{color:var(--hljs-bullet)}.hljs-selector-tag{color:var(--hljs-selector-tag)}.hljs-selector-id{color:var(--hljs-selector-id)}.hljs-selector-class{color:var(--hljs-selector-class)}.hljs-selector-attr{color:var(--hljs-selector-attr)}.hljs-selector-pseudo{color:var(--hljs-selector-pseudo)}.hljs-addition{background-color:var(--hljs-addition);display:inline-block;width:100%}.hljs-deletion{background-color:var(--hljs-deletion);display:inline-block;width:100%}";
var HN = Object.defineProperty, VN = Object.getOwnPropertyDescriptor, Na = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? VN(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && HN(e, r, i), i;
};
const wm = class wm extends hn {
  constructor() {
    super(...arguments), this.code = "", this.src = "", this.language = "html", this.position = 50, this.theme = "dark";
  }
  async firstUpdated(e) {
    super.firstUpdated(e);
    const r = this.querySelector('script[type="enibook"]');
    if (this.src) {
      const n = await BN(this.src);
      n.ok && (this.code += n.data + `
`);
    }
    r && (this.code += xh(r.innerHTML).replace(/&lt;(\/?script)(.*?)&gt;/g, "<$1$2>")), this.validatePosition();
  }
  renderbis() {
    return this.validatePosition(), Ct`
      <div part='base' class="preview">
        <sl-split-panel position="${this.position}" snap="25% 50% 75%">
          <div slot="start" part='code' class="preview__code ${this.theme}">
            <p class="preview__code__title">Code <code>${this.language}</code></p>
            ${Ms(this.renderHighlight())}
          </div>
          <div slot="divider" class="handle">
            <it-mdi-drag-vertical></it-mdi-drag-vertical>
          </div>
          <div slot="end" part='view' class="preview__view">
            <p class="preview__view__title">Aperçu</p>
            <div class="preview__view__code">${Ms(this.renderCode())}</div>
          </div>
        </sl-split-panel>
      </div>
      <slot></slot>
    `;
  }
  render() {
    return Ct`
      <div part='base' class="preview">
        <div part='code' class="preview__code ${this.theme}">
          <p class="preview__code__title">Code <code>${this.language}</code></p>
          ${Ms(this.renderHighlight())}
        </div>
        <div part='view' class="preview__view">
          <p class="preview__view__title">Aperçu</p>
          <div class="preview__view__code">${Ms(this.renderCode())}</div>
        </div>
      </div>
      <slot></slot>
    `;
  }
  renderHighlight() {
    const e = f_.highlight(this.code, { language: this.language, ignoreIllegals: !0 }).value;
    return `<pre class="highlightjs highlight pre-wrap" style="line-height: 1.2em;"><code class="language-${this.language} hljs" data-lang="${this.language}">${e}</code></pre>`;
  }
  /**
   * Le nom courant de l'élément : `Aperçu`.
   */
  get tagTitle() {
    return `Aperçu ${this.language}`;
  }
  /**
   * Syntaxe `asciidoc` équivalente :
   *
   * ```
   * [style,language,attributes]
   * ----
   * code
   * ----
   * ```
   *
   * - `style` : `preview-it` (le style `asciidoc` a le même nom que l'élément `html` correspondant);
   * - `language` : le langage du code source (`html` par défaut);
   * - `attributes` : `position`.
   *
   * Voir la documentation Asciidoc sur le [style d'un bloc](https://docs.asciidoctor.org/asciidoc/latest/blocks/#block-style).
   *
   * @example
   *
   * ```
   * [preview-it,html,position=75]
   * ----
   * <p>
   *  Voici une horloge :
   *  <clock-it hide-date></clock-it>
   * </p>
   * ----
   * ```
   *
   */
  toAsciidoc() {
    const e = {
      // propriétés booléennes  : attrName: this.propName
    }, r = [
      /*propriétés avec valeur : attrName=`${this.propName}`*/
      `position="${this.position}"`
    ];
    for (const i of Object.keys(e))
      e[i] && r.push(i);
    return `
    [preview-it,${this.language},${r.join(",")}]
    ----
    ${this.code}
    ----
    `.replace(/^ +| +$/gm, "");
  }
  /*
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    updated(_changedProperties: Map<string, unknown>) {
      hjs.highlightElement(this.codeElement)
    }
  */
  validatePosition() {
    this.position < 0 ? this.position = 0 : this.position > 100 && (this.position = 100);
  }
};
wm.styles = [
  jr(YN),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: icons */
it-mdi-drag-vertical{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M9 3h2v2H9zm4 0h2v2h-2zM9 7h2v2H9zm4 0h2v2h-2zm-4 4h2v2H9zm4 0h2v2h-2zm-4 4h2v2H9zm4 0h2v2h-2zm-4 4h2v2H9zm4 0h2v2h-2z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
/* layer: default */
.static{position:static;}`
];
let ei = wm;
Na([
  Ht("pre.highlight")
], ei.prototype, "codeElement", 2);
Na([
  Gr()
], ei.prototype, "code", 2);
Na([
  ut({ type: String, reflect: !0 })
], ei.prototype, "src", 2);
Na([
  ut({ type: Number, reflect: !0 })
], ei.prototype, "position", 2);
Na([
  ut({ type: String, reflect: !0 })
], ei.prototype, "theme", 2);
function Nh(t) {
  var n;
  const e = document.createElement("script");
  [...t.attributes].forEach((i) => e.setAttribute(i.name, i.value)), e.textContent = t.textContent, (n = t.parentNode) == null || n.replaceChild(e, t);
}
const WN = ':host{box-sizing:border-box}:host *,:host *:before,:host *:after{box-sizing:inherit}.hidden,[hidden]{display:none!important}.rtl{direction:rtl}.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}.light,:root{--hljs-font-weight-bold: var(--sl-font-weight-bold);--hljs-addition: green;--hljs-attr: var(--sl-color-sky-700);--hljs-attribute: var(--sl-color-sky-700);--hljs-background: var(--sl-color-neutral-100);--hljs-built_in: var(--sl-color-green-700);--hljs-builtin-name: var(--sl-color-neutral-900);--hljs-bullet: #00b0e8;--hljs-class: var(--sl-color-blue-900);--hljs-color: var(--sl-color-neutral-900);--hljs-comment: var(--sl-color-neutral-600);--hljs-deletion: red;--hljs-doctag: var(--sl-color-amber-900);--hljs-formula: var(--sl-color-neutral-900);--hljs-function: var(--sl-color-yellow-800);--hljs-keyword: var(--sl-color-blue-600);--hljs-link: #00b0e8;--hljs-literal: var(--sl-color-blue-600);--hljs-meta: #2b91af;--hljs-meta-keyword: var(--sl-color-neutral-900);--hljs-meta-string: var(--sl-color-neutral-900);--hljs-name: var(--sl-color-blue-600);--hljs-number: var(--sl-color-blue-800);--hljs-params: var(--sl-color-yellow-600);--hljs-quote: green;--hljs-regexp: var(--sl-color-neutral-900);--hljs-section: #a31515;--hljs-selector-attr: var(--sl-color-cyan-400);--hljs-selector-class: var(--sl-color-yellow-600);--hljs-selector-id: var(--sl-color-yellow-600);--hljs-selector-pseudo: var(--sl-color-cyan-400);--hljs-selector-tag: var(--sl-color-yellow-600);--hljs-string: var(--sl-color-amber-400);--hljs-subst: var(--sl-color-neutral-900);--hljs-symbol: var(--sl-color-blue-600);--hljs-tag: var(--sl-color-neutral-600);--hljs-template-tag: #a31515;--hljs-template-variable: #a31515;--hljs-title: var(--sl-color-yellow-700);--hljs-type: var(--sl-color-green-600);--hljs-variable: green}.dark,:root{--hljs-font-weight-bold: var(--sl-font-weight-bold);--hljs-addition: green;--hljs-attr: var(--sl-color-sky-300);--hljs-attribute: var(--sl-color-sky-300);--hljs-background: var(--sl-color-neutral-900);--hljs-built_in: var(--sl-color-green-300);--hljs-builtin-name: var(--sl-color-neutral-100);--hljs-bullet: #00b0e8;--hljs-class: var(--sl-color-blue-100);--hljs-color: var(--sl-color-neutral-100);--hljs-comment: var(--sl-color-neutral-400);--hljs-deletion: red;--hljs-doctag: var(--sl-color-amber-100);--hljs-formula: var(--sl-color-neutral-100);--hljs-function: var(--sl-color-yellow-200);--hljs-keyword: var(--sl-color-blue-400);--hljs-link: #00b0e8;--hljs-literal: var(--sl-color-blue-400);--hljs-meta: #2b91af;--hljs-meta-keyword: var(--sl-color-neutral-100);--hljs-meta-string: var(--sl-color-neutral-100);--hljs-name: var(--sl-color-blue-400);--hljs-number: var(--sl-color-blue-200);--hljs-params: var(--sl-color-yellow-400);--hljs-quote: green;--hljs-regexp: var(--sl-color-neutral-100);--hljs-section: #a31515;--hljs-selector-attr: var(--sl-color-cyan-600);--hljs-selector-class: var(--sl-color-yellow-400);--hljs-selector-id: var(--sl-color-yellow-400);--hljs-selector-pseudo: var(--sl-color-cyan-600);--hljs-selector-tag: var(--sl-color-yellow-400);--hljs-string: var(--sl-color-amber-600);--hljs-subst: var(--sl-color-neutral-100);--hljs-symbol: var(--sl-color-blue-400);--hljs-tag: var(--sl-color-neutral-400);--hljs-template-tag: #a31515;--hljs-template-variable: #a31515;--hljs-title: var(--sl-color-yellow-300);--hljs-type: var(--sl-color-green-400);--hljs-variable: green}pre code.hljs{display:block;overflow-x:auto;padding:var(--sl-spacing-medium)}code.hljs{padding:var(--sl-spacing-3x-small) var(--sl-spacing-2x-small)}.hljs{background:var(--hljs-background);color:var(--hljs-color)}.hljs-string,.hljs-meta .hljs-string{color:var(--hljs-string)}.hljs-comment,.hljs-quote{color:var(--hljs-comment);font-style:italic}.hljs-meta .hljs-keyword{color:var(--hljs-keyword)}.hljs-tag .hljs-attr,.hljs-tag .hljs-attribute,.hljs-attr,.hljs-attribute{color:var(--hljs-attr)}.hljs-strong{font-weight:var(--hljs-font-weight-bold)}:host{display:block}code{color:var(--sl-color-yellow-800)}p{margin:0;margin-bottom:var(--sl-spacing-medium)}.preview{display:flex;flex-wrap:wrap;gap:0rem}.preview>*{flex-grow:1;flex-basis:calc((30rem - 100%)*999)}.preview>:nth-last-child(n+3),.preview>:nth-last-child(n+3)~*{flex-basis:100%}.preview__code,.preview__view{padding:var(--sl-spacing-small);border:1px solid var(--sl-color-neutral-200)}.preview__code__title,.preview__view__title{border-bottom:1px solid var(--sl-color-neutral-200)}.preview__code__title code{color:var(--color-code)}.preview:hover [part=code],.preview:hover [part=view]{border:1px solid var(--color-primary)}.preview:hover .preview__code__title,.preview:hover .preview__view__title{border-bottom:1px solid var(--color-primary)}.preview:hover it-mdi-drag-vertical,.preview:hover sl-split-panel::part(divider),.preview:hover sl-split-panel .divider{background-color:var(--color-primary)}sl-split-panel .divider{border-radius:var(--sl-border-radius-small);background-color:var(--sl-color-neutral-200)}sl-split-panel{--divider-width: 1px;--min: 20%;--max: 80%}.hljs{display:block;overflow-x:auto;padding:.5em;background:var(--hljs-background);color:var(--hljs-color);border-radius:.5em}.hljs-keyword{color:var(--hljs-keyword)}.hljs-literal{color:var(--hljs-literal)}.hljs-symbol{color:var(--hljs-symbol)}.hljs-name{color:var(--hljs-name)}.hljs-link{color:var(--hljs-link);text-decoration:underline}.hljs-built_in{color:var(--hljs-built_in)}.hljs-type{color:var(--hljs-type)}.hljs-number{color:var(--hljs-number)}.hljs-class{color:var(--hljs-class)}.hljs-string{color:var(--hljs-string)}.hljs-meta-string{color:var(--hljs-meta-string)}.hljs-regexp{color:var(--hljs-regexp)}.hljs-template-tag{color:var(--hljs-template-tag)}.hljs-subst{color:var(--hljs-subst)}.hljs-function{color:var(--hljs-function)}.hljs-title{color:var(--hljs-title)}.hljs-params{color:var(--hljs-params)}.hljs-formula{color:var(--hljs-formula)}.hljs-comment{color:var(--hljs-comment);font-style:italic}.hljs-quote{color:var(--hljs-quote);font-style:italic}.hljs-doctag{color:var(--hljs-doctag)}.hljs-meta{color:var(--hljs-meta)}.hljs-meta-keyword{color:var(--hljs-meta-keyword)}.hljs-tag{color:var(--hljs-tag)}.hljs-variable{color:var(--hljs-variable)}.hljs-template-variable{color:var(--hljs-template-variable)}.hljs-attr{color:var(--hljs-attr)}.hljs-attribute{color:var(--hljs-attribute)}.hljs-builtin-name{color:var(--hljs-builtin-name)}.hljs-section{color:var(--hljs-section)}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-bullet{color:var(--hljs-bullet)}.hljs-selector-tag{color:var(--hljs-selector-tag)}.hljs-selector-id{color:var(--hljs-selector-id)}.hljs-selector-class{color:var(--hljs-selector-class)}.hljs-selector-attr{color:var(--hljs-selector-attr)}.hljs-selector-pseudo{color:var(--hljs-selector-pseudo)}.hljs-addition{background-color:var(--hljs-addition);display:inline-block;width:100%}.hljs-deletion{background-color:var(--hljs-deletion);display:inline-block;width:100%}/*! Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */html{font-family:sans-serif;-webkit-text-size-adjust:100%}a{background:none}a:focus{outline:thin dotted}a:active,a:hover{outline:0}h1{font-size:2em;margin:.67em 0}b,strong{font-weight:700}abbr{font-size:.9em}abbr[title]{cursor:help;border-bottom:1px dotted #dddddf;text-decoration:none}dfn{font-style:italic}hr{height:0}mark{background:#ff0;color:#000}code,kbd,pre,samp{font-family:monospace;font-size:1em}pre{white-space:pre-wrap}q{quotes:"“" "”" "‘" "’"}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:0}audio,video{display:inline-block}audio:not([controls]){display:none;height:0}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}button,input{line-height:normal}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;-moz-appearance:button;appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}input[type=checkbox],input[type=radio]{padding:0}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}textarea{overflow:auto;vertical-align:top}table{border-collapse:collapse;border-spacing:0}*,:before,:after{box-sizing:border-box}html,body{font-size:100%}body{background:#fff;color:#000c;padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;line-height:1;position:relative;cursor:auto;-moz-tab-size:4;-o-tab-size:4;tab-size:4;word-wrap:anywhere;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}a:hover{cursor:pointer}img,object,embed{max-width:100%;height:auto}object,embed{height:100%}img{-ms-interpolation-mode:bicubic}.left{float:left!important}.right{float:right!important}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}.text-justify{text-align:justify!important}.hide{display:none}img,object,svg{display:inline-block;vertical-align:middle}textarea{height:auto;min-height:50px}select{width:100%}.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0}a{color:#2156a5;text-decoration:underline;line-height:inherit}a:hover,a:focus{color:#1d4b8f}a img{border:0}p{line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}p aside{font-size:.875em;line-height:1.35;font-style:italic}h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:Open Sans,DejaVu Sans,sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}h1{font-size:2.125em}h2{font-size:1.6875em}h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}h4,h5{font-size:1.125em}h6{font-size:1em}hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em}em,i{font-style:italic;line-height:inherit}strong,b{font-weight:700;line-height:inherit}small{font-size:60%;line-height:inherit}code{font-family:Droid Sans Mono,DejaVu Sans Mono,monospace;font-weight:400;color:#000000e6}ul,ol,dl{line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}ul,ol{margin-left:1.5em}ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0}ul.circle{list-style-type:circle}ul.disc{list-style-type:disc}ul.square{list-style-type:square}ul.circle ul:not([class]),ul.disc ul:not([class]),ul.square ul:not([class]){list-style:inherit}ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}dl dt{margin-bottom:.3125em;font-weight:700}dl dd{margin-bottom:1.25em}blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}blockquote,blockquote p{line-height:1.6;color:#000000d9}@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}h1{font-size:2.75em}h2{font-size:2.3125em}h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}h4{font-size:1.4375em}}table{background:#fff;margin-bottom:1.25em;border:1px solid #dedede;word-wrap:normal}table thead,table tfoot{background:#f7f8f7}table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:#000c;text-align:left}table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:#000c}table tr.even,table tr.alt{background:#f8f8f7}table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{line-height:1.6}h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}.center{margin-left:auto;margin-right:auto}.stretch{width:100%}.clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:" ";display:table}.clearfix:after,.float-group:after{clear:both}:not(pre).nobreak{word-wrap:normal}:not(pre).nowrap{white-space:nowrap}:not(pre).pre-wrap{white-space:pre-wrap}:not(pre):not([class^=L])>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}pre{color:#000000e6;font-family:Droid Sans Mono,DejaVu Sans Mono,monospace;line-height:1.45;text-rendering:optimizeSpeed}pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}pre>code{display:block}pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}em em{font-style:normal}strong strong{font-weight:400}.keyseq{color:#333c}kbd{font-family:Droid Sans Mono,DejaVu Sans Mono,monospace;display:inline-block;color:#000c;font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;border-radius:3px;box-shadow:0 1px #0003,inset 0 0 0 .1em #fff;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}.keyseq kbd:first-child{margin-left:0}.keyseq kbd:last-child{margin-right:0}.menuseq,.menuref{color:#000}.menuseq b:not(.caret),.menuref{font-weight:inherit}.menuseq{word-spacing:-.02em}.menuseq b.caret{font-size:1.25em;line-height:.8}.menuseq i.caret{font-weight:700;text-align:center;width:.45em}b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}b.button:before{content:"[";padding:0 3px 0 2px}b.button:after{content:"]";padding:0 2px 0 3px}p a>code:hover{color:#000000e6}#header,#content,#footnotes,#footer{width:100%;margin:0 auto;max-width:62.5em;zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:" ";display:table}#header:after,#content:after,#footnotes:after,#footer:after{clear:both}#content{margin-top:1.25em}#content:before{content:none}#header>h1:first-child{color:#000000d9;margin-top:2.25rem;margin-bottom:0}#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:#0009;display:flex;flex-flow:row wrap}#header .details span:first-child{margin-left:-.125em}#header .details span.email a{color:#000000d9}#header .details br{display:none}#header .details br+span:before{content:" – "}#header .details br+span.author:before{content:" ⋅ ";color:#000000d9}#header .details br+span#revremark:before{content:" | "}#header #revnumber{text-transform:capitalize}#header #revnumber:after{content:" "}#content>h1:first-child:not([class]){color:#000000d9;border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}#toc>ul{margin-left:.125em}#toc ul.sectlevel0>li>a{font-style:italic}#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}#toc ul{font-family:Open Sans,DejaVu Sans,sans-serif;list-style-type:none}#toc li{line-height:1.3334;margin-top:.3334em}#toc a{text-decoration:none}#toc a:active{text-decoration:underline}#toctitle{color:#7a2518;font-size:1.2em}@media screen and (min-width:768px){#toctitle{font-size:1.375em}body.toc2{padding-left:15em;padding-right:0}#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}#toc.toc2>ul{font-size:.9em;margin-bottom:0}#toc.toc2 ul ul{margin-left:0;padding-left:1em}#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}body.toc2.toc-right{padding-left:0;padding-right:15em}body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}#toc.toc2{width:20em}#toc.toc2 #toctitle{font-size:1.375em}#toc.toc2>ul{font-size:.95em}#toc.toc2 ul ul{padding-left:1.25em}body.toc2.toc-right{padding-left:0;padding-right:20em}}#content #toc{border:1px solid #e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;border-radius:4px}#content #toc>:first-child{margin-top:0}#content #toc>:last-child{margin-bottom:0}#footer{max-width:none;background:#000c;padding:1.25em}#footer-text{color:#fffc;line-height:1.44}#content{margin-bottom:.625em}.sect1{padding-bottom:.625em}@media screen and (min-width:768px){#content{margin-bottom:1.25em}.sect1{padding-bottom:1.25em}}.sect1:last-child{padding-bottom:0}.sect1+.sect1{border-top:1px solid #e7e7e9}#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}#content h1>a.anchor:before,h2>a.anchor:before,h3>a.anchor:before,#toctitle>a.anchor:before,.sidebarblock>.content>.title>a.anchor:before,h4>a.anchor:before,h5>a.anchor:before,h6>a.anchor:before{content:"§";font-size:.85em;display:block;padding-top:.1em}#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}details{margin-left:1.25rem}details>summary{cursor:pointer;display:block;position:relative;line-height:1.6;margin-bottom:.625rem;outline:none;-webkit-tap-highlight-color:transparent}details>summary::-webkit-details-marker{display:none}details>summary:before{content:"";border:solid transparent;border-left:solid;border-width:.3em 0 .3em .5em;position:absolute;top:.5em;left:-1.25rem;transform:translate(15%)}details[open]>summary:before{border:solid transparent;border-top:solid;border-width:.5em .3em 0;transform:translateY(15%)}details>summary:after{content:"";width:1.25rem;height:1em;position:absolute;top:.3em;left:-1.25rem}.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}.paragraph.lead>p,#preamble>.sectionbody>[class=paragraph]:first-of-type p{font-size:1.21875em;line-height:1.6;color:#000000d9}.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}.admonitionblock>table td.icon{text-align:center;width:80px}.admonitionblock>table td.icon img{max-width:none}.admonitionblock>table td.icon .title{font-weight:700;font-family:Open Sans,DejaVu Sans,sans-serif;text-transform:uppercase}.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:#0009;word-wrap:anywhere}.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}.exampleblock>.content{border:1px solid #e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;border-radius:4px}.sidebarblock{border:1px solid #dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;border-radius:4px}.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}.exampleblock>.content>:first-child,.sidebarblock>.content>:first-child{margin-top:0}.exampleblock>.content>:last-child,.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}.literalblock pre,.listingblock>.content>pre{border-radius:4px;overflow-x:auto;padding:1em;font-size:.8125em}@media screen and (min-width:768px){.literalblock pre,.listingblock>.content>pre{font-size:.90625em}}@media screen and (min-width:1280px){.literalblock pre,.listingblock>.content>pre{font-size:1em}}.literalblock pre,.listingblock>.content>pre:not(.highlight),.listingblock>.content>pre[class=highlight],.listingblock>.content>pre[class^="highlight "]{background:#f7f7f8}.literalblock.output pre{color:#f7f7f8;background:#000000e6}.listingblock>.content{position:relative}.listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}.listingblock:hover code[data-lang]:before{display:block}.listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}.listingblock.terminal pre .command:not([data-prompt]):before{content:"$"}.listingblock pre.highlightjs{padding:0}.listingblock pre.highlightjs>code{padding:1em;border-radius:4px}.listingblock pre.prettyprint{border-width:0}.prettyprint{background:#f7f7f8}pre.prettyprint .linenums{line-height:1.45;margin-left:2em}pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}pre.prettyprint li code[data-lang]:before{opacity:1}pre.prettyprint li:not(:first-child) code[data-lang]:before{display:none}table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}table.linenotable td.code{padding-left:.75em}table.linenotable td.linenos,pre.pygments .linenos{border-right:1px solid;opacity:.35;padding-right:.5em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}pre.pygments span.linenos{display:inline-block;margin-right:.75em}.quoteblock{margin:0 1em 1.25em 1.5em;display:table}.quoteblock:not(.excerpt)>.title{margin-left:-1.5em;margin-bottom:.75em}.quoteblock blockquote,.quoteblock p{color:#000000d9;font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}.quoteblock blockquote{margin:0;padding:0;border:0}.quoteblock blockquote:before{content:"“";float:left;font-size:2.75em;font-weight:700;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}.verseblock{margin:0 1em 1.25em}.verseblock pre{font-family:Open Sans,DejaVu Sans,sans-serif;font-size:1.15rem;color:#000000d9;font-weight:300;text-rendering:optimizeLegibility}.verseblock pre strong{font-weight:400}.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}.quoteblock .attribution br,.verseblock .attribution br{display:none}.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:#0009}.quoteblock.abstract blockquote:before,.quoteblock.excerpt blockquote:before,.quoteblock .quoteblock blockquote:before{display:none}.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}.quoteblock.abstract{margin:0 1em 1.25em;display:block}.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}.quoteblock.excerpt>blockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}.quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;font-size:.85rem;text-align:left;margin-right:0}p.tableblock:last-child{margin-bottom:0}td.tableblock>.content{margin-bottom:1.25em;word-wrap:anywhere}td.tableblock>.content>:last-child{margin-bottom:-1.25em}table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}table.grid-all>*>tr>*{border-width:1px}table.grid-cols>*>tr>*{border-width:0 1px}table.grid-rows>*>tr>*{border-width:1px 0}table.frame-all{border-width:1px}table.frame-ends{border-width:1px 0}table.frame-sides{border-width:0 1px}table.frame-none>colgroup+*>:first-child>*,table.frame-sides>colgroup+*>:first-child>*{border-top-width:0}table.frame-none>:last-child>:last-child>*,table.frame-sides>:last-child>:last-child>*{border-bottom-width:0}table.frame-none>*>tr>:first-child,table.frame-ends>*>tr>:first-child{border-left-width:0}table.frame-none>*>tr>:last-child,table.frame-ends>*>tr>:last-child{border-right-width:0}table.stripes-all>*>tr,table.stripes-odd>*>tr:nth-of-type(odd),table.stripes-even>*>tr:nth-of-type(2n),table.stripes-hover>*>tr:hover{background:#f8f8f7}th.halign-left,td.halign-left{text-align:left}th.halign-right,td.halign-right{text-align:right}th.halign-center,td.halign-center{text-align:center}th.valign-top,td.valign-top{vertical-align:top}th.valign-bottom,td.valign-bottom{vertical-align:bottom}th.valign-middle,td.valign-middle{vertical-align:middle}table thead th,table tfoot th{font-weight:700}tbody tr th{background:#f7f8f7}tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:#000c;font-weight:700}p.tableblock>code:only-child{background:none;padding:0}p.tableblock{font-size:1em}ol{margin-left:1.75em}ul li ol{margin-left:1.5em}dl dd{margin-left:1.125em}dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}ul.unstyled,ol.unstyled{margin-left:0}li>p:empty:only-child:before{content:"";display:inline-block}ul.checklist>li>p:first-child{margin-left:-1em}ul.checklist>li>p:first-child>.fa-square-o:first-child,ul.checklist>li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}ul.checklist>li>p:first-child>input[type=checkbox]:first-child{margin-right:.25em}ul.inline{display:flex;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}ul.inline>li{margin-left:1.25em}.unstyled dl dt{font-weight:400;font-style:normal}ol.arabic{list-style-type:decimal}ol.decimal{list-style-type:decimal-leading-zero}ol.loweralpha{list-style-type:lower-alpha}ol.upperalpha{list-style-type:upper-alpha}ol.lowerroman{list-style-type:lower-roman}ol.upperroman{list-style-type:upper-roman}ol.lowergreek{list-style-type:lower-greek}.hdlist>table,.colist>table{border:0;background:none}.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}td.hdlist1{font-weight:700;padding-bottom:1.25em}td.hdlist2{word-wrap:anywhere}.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}.colist td:not([class]):first-child img{max-width:none}.colist td:not([class]):last-child{padding:.25em 0}.thumb,.th{line-height:0;display:inline-block;border:4px solid #fff;box-shadow:0 0 0 1px #ddd}.imageblock.left{margin:.25em .625em 1.25em 0}.imageblock.right{margin:.25em 0 1.25em .625em}.imageblock>.title{margin-bottom:0}.imageblock.thumb,.imageblock.th{border-width:6px}.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}.image.left{margin-right:.625em}.image.right{margin-left:.625em}a.image{text-decoration:none;display:inline-block}a.image object{pointer-events:none}sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}sup.footnote a,sup.footnoteref a{text-decoration:none}sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}#footnotes .footnote a:first-of-type{font-weight:700;text-decoration:none;margin-left:-1.05em}#footnotes .footnote:last-of-type{margin-bottom:0}#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}div.unbreakable{page-break-inside:avoid}.big{font-size:larger}.small{font-size:smaller}.underline{text-decoration:underline}.overline{text-decoration:overline}.line-through{text-decoration:line-through}.aqua{color:#00bfbf}.aqua-background{background:#00fafa}.black{color:#000}.black-background{background:#000}.blue{color:#0000bf}.blue-background{background:#0000fa}.fuchsia{color:#bf00bf}.fuchsia-background{background:#fa00fa}.gray{color:#606060}.gray-background{background:#7d7d7d}.green{color:#006000}.green-background{background:#007d00}.lime{color:#00bf00}.lime-background{background:#00fa00}.maroon{color:#600000}.maroon-background{background:#7d0000}.navy{color:#000060}.navy-background{background:#00007d}.olive{color:#606000}.olive-background{background:#7d7d00}.purple{color:#600060}.purple-background{background:#7d007d}.red{color:#bf0000}.red-background{background:#fa0000}.silver{color:#909090}.silver-background{background:#bcbcbc}.teal{color:#006060}.teal-background{background:#007d7d}.white{color:#bfbfbf}.white-background{background:#fafafa}.yellow{color:#bfbf00}.yellow-background{background:#fafa00}span.icon>.fa{cursor:default}a span.icon>.fa{cursor:inherit}.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}.admonitionblock td.icon .icon-note:before{content:"";color:#19407c}.admonitionblock td.icon .icon-tip:before{content:"";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}.admonitionblock td.icon .icon-warning:before{content:"";color:#bf6900}.admonitionblock td.icon .icon-caution:before{content:"";color:#bf3400}.admonitionblock td.icon .icon-important:before{content:"";color:#bf0000}.conum[data-value]{display:inline-block;color:#fff!important;background:#000c;border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:Open Sans,DejaVu Sans,sans-serif;font-style:normal;font-weight:700}.conum[data-value] *{color:#fff!important}.conum[data-value]+b{display:none}.conum[data-value]:after{content:attr(data-value)}pre .conum[data-value]{position:relative;top:-.125em}b.conum *{color:inherit!important}.conum:not([data-value]):empty{display:none}dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}h1,h2,p,td.content,span.alt,summary{letter-spacing:-.01em}p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}p,blockquote,dt,td.content,td.hdlist1,span.alt,summary{font-size:1.0625rem}p{margin-bottom:1.25rem}.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}.exampleblock>.content{background:#fffef7;border-color:#e0e0dc;box-shadow:0 1px 4px #e0e0dc}.print-only{display:none!important}@page{margin:1.25cm .75cm}@media print{*{box-shadow:none!important;text-shadow:none!important}html{font-size:80%}a{color:inherit!important;text-decoration:underline!important}a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}a[href^="http:"]:not(.bare):after,a[href^="https:"]:not(.bare):after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}abbr[title]{border-bottom:1px dotted}abbr[title]:after{content:" (" attr(title) ")"}pre,blockquote,tr,img,object,svg{page-break-inside:avoid}thead{display:table-header-group}svg{max-width:100%}p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}#header,#content,#footnotes,#footer{max-width:none}#toc,.sidebarblock,.exampleblock>.content{background:none!important}#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}body.book #header{text-align:center}body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}body.book #header .details{border:0!important;display:block;padding:0!important}body.book #header .details span:first-child{margin-left:0!important}body.book #header .details br{display:block}body.book #header .details br+span:before{content:none!important}body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}.listingblock code[data-lang]:before{display:block}#footer{padding:0 .9375em}.hide-on-print{display:none!important}.print-only{display:block!important}.hide-for-print{display:none!important}.show-for-print{display:inherit!important}}@media amzn-kf8,print{#header>h1:first-child{margin-top:1.25rem}.sect1{padding:0!important}.sect1+.sect1{border:0}#footer{background:none}#footer-text{color:#0009;font-size:.9em}}@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}', zo = class zo extends ei {
  constructor() {
    super(), this.language = "asciidoc";
  }
  renderCode() {
    return zo.asciidoctor.convert(this.code, {
      safe: "unsafe",
      attributes: {
        showtitle: !0,
        icons: "font"
      }
    });
  }
  /**
   * Le nom courant de l'élément : `Aperçu asciidoc`.
   */
  get tagTitle() {
    return "Aperçu asciidoc";
  }
  /**
   * Syntaxe `asciidoc` équivalente :
   *
   * ```
   * [style,attributes]
   * ----
   * code asciidoc
   * ----
   * ```
   *
   * - `style` : `adoc-preview-it` (le style `asciidoc` a le même nom que l'élément `html` correspondant);
   * - `attributes` : `position`, `src`, `theme`.
   *
   * Voir la documentation Asciidoc sur le [style d'un bloc](https://docs.asciidoctor.org/asciidoc/latest/blocks/#block-style).
   *
   * @example
   * ```
   * [adoc-preview-it,position=75]
   * ----
   * // code asciidoc
   * = Asciidoc
   * 
   * == Titre de section
   * .Liste _asciidoc_
   * * item de liste
   * * autre item
   * * lien https://docs.asciidoctor.org/asciidoc/latest/[pour en savoir plus...]
   * ----
   * ```
   *
   */
  toAsciidoc() {
    const e = {
      // propriétés booléennes  : attrName: this.propName
    }, r = [
      /*propriétés avec valeur : attrName=`${this.propName}`*/
      `position="${this.position}"`
    ];
    for (const i of Object.keys(e))
      e[i] && r.push(i);
    return `
    [adoc-preview-it,${r.join(",")}]
    ----
    ${this.code}
    ----
    `.replace(/^ +| +$/gm, "");
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  updated(e) {
    var n;
    super.updated(e);
    const r = (n = this.shadowRoot) == null ? void 0 : n.querySelectorAll(".preview__view__code script");
    if (r)
      for (const i of r)
        Nh(i);
  }
};
zo.styles = [
  jr(WN),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: default */
.static{position:static;}`
], zo.asciidoctor = _w();
let p_ = zo;
customElements && !customElements.get("adoc-preview-it") && customElements.define("adoc-preview-it", p_);
async function yS(t, e = {}) {
  typeof t == "object" && !(t instanceof HTMLElement) && t.view === "headless" && (e = t, t = null);
  let { appUrl: r = "https://livecodes.io/", params: n = {}, config: i = {}, import: s, lite: o, loading: a = "lazy", template: l, view: c = "split" } = e, f = c === "headless", m = null;
  if (typeof t == "string")
    m = document.querySelector(t);
  else if (t instanceof HTMLElement)
    m = t;
  else if (!(f && typeof t == "object"))
    throw new Error("A valid container element is required.");
  if (!m)
    if (f)
      m = document.createElement("div"), pe(m), document.body.appendChild(m);
    else
      throw new Error(`Cannot find element: "${t}"`);
  let b;
  try {
    b = new URL(r);
  } catch {
    throw new Error(`"${r}" is not a valid URL.`);
  }
  let C = b.origin;
  if (typeof n == "object" && Object.keys(n).forEach((J) => {
    b.searchParams.set(J, String(n[J]));
  }), typeof i == "string")
    try {
      new URL(i), b.searchParams.set("config", i);
    } catch {
      throw new Error('"config" is not a valid URL or configuration object.');
    }
  else if (typeof i == "object")
    Object.keys(i).length > 0 && b.searchParams.set("config", "sdk");
  else
    throw new Error('"config" is not a valid URL or configuration object.');
  l && b.searchParams.set("template", l), s && b.searchParams.set("x", s), o && b.searchParams.set("lite", "true"), b.searchParams.set("embed", "true"), b.searchParams.set("loading", f ? "eager" : a), b.searchParams.set("view", c);
  let N = !1, z = "Cannot call API methods after calling `destroy()`.", A = await new Promise((J) => {
    var R, ve, F, ne, H, we, _e, X, w;
    if (!m)
      return;
    let h = m.dataset.height || m.style.height;
    if (h && !f) {
      let g = isNaN(Number(h)) ? h : h + "px";
      m.style.height = g;
    }
    m.dataset.defaultStyles !== "false" && !f && ((R = m.style).backgroundColor || (R.backgroundColor = "#fff"), (ve = m.style).border || (ve.border = "1px solid black"), (F = m.style).borderRadius || (F.borderRadius = "5px"), (ne = m.style).boxSizing || (ne.boxSizing = "border-box"), (H = m.style).padding || (H.padding = "0"), (we = m.style).width || (we.width = "100%"), (_e = m.style).height || (_e.height = m.style.height || "300px"), m.style.minHeight = "200px", m.style.flexGrow = "1", (X = m.style).overflow || (X.overflow = "hidden"), (w = m.style).resize || (w.resize = "vertical"));
    let d = document.createElement("iframe");
    d.setAttribute("allow", "accelerometer; camera; encrypted-media; display-capture; geolocation; gyroscope; microphone; midi; clipboard-read; clipboard-write; web-share"), d.setAttribute("allowtransparency", "true"), d.setAttribute("allowpaymentrequest", "true"), d.setAttribute("allowfullscreen", "true"), d.setAttribute("sandbox", "allow-same-origin allow-downloads allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-presentation allow-scripts");
    let _ = a === "eager" ? "eager" : "lazy";
    d.setAttribute("loading", _), d.classList.add("livecodes"), f ? pe(d) : (d.style.height = "100%", d.style.minHeight = "200px", d.style.width = "100%", d.style.margin = "0", d.style.border = "0", d.style.borderRadius = m.style.borderRadius), addEventListener("message", function g($) {
      var I, D;
      $.source !== d.contentWindow || $.origin !== C || ((I = $.data) == null ? void 0 : I.type) !== "livecodes-get-config" || (removeEventListener("message", g), (D = d.contentWindow) == null || D.postMessage({ type: "livecodes-config", payload: i }, C));
    }), d.onload = () => {
      J(d);
    }, d.src = b.href, m.appendChild(d);
  }), Q = new Promise((J) => {
    addEventListener("message", function R(ve) {
      var F;
      ve.source !== A.contentWindow || ve.origin !== C || ((F = ve.data) == null ? void 0 : F.type) !== "livecodes-ready" || (removeEventListener("message", R), J(), Q.settled = !0);
    });
  }), Te = () => N ? Promise.reject(z) : new Promise(async (J) => {
    var R;
    Q.settled && J();
    let ve = { type: "livecodes-load" };
    (R = A.contentWindow) == null || R.postMessage(ve, C), await Q, J();
  }), ce = (J, R) => new Promise(async (ve, F) => {
    var ne;
    if (N)
      return F(z);
    await Te();
    let H = Ce();
    addEventListener("message", function we(_e) {
      var X, w;
      if (!(_e.source !== A.contentWindow || _e.origin !== C || ((X = _e.data) == null ? void 0 : X.type) !== "livecodes-api-response" || ((w = _e.data) == null ? void 0 : w.id) !== H) && _e.data.method === J) {
        removeEventListener("message", we);
        let h = _e.data.payload;
        h != null && h.error ? F(h.error) : ve(h);
      }
    }), (ne = A.contentWindow) == null || ne.postMessage({ method: J, id: H, args: R }, C);
  }), ge = {}, Y = ["load", "ready", "code", "console", "tests", "destroy"], fe = (J, R) => {
    var ve;
    if (N)
      throw new Error(z);
    return Y.includes(J) ? (ce("watch", [J]), ge[J] || (ge[J] = []), (ve = ge[J]) == null || ve.push(R), { remove: () => {
      var F, ne;
      ge[J] = (F = ge[J]) == null ? void 0 : F.filter((H) => H !== R), ((ne = ge[J]) == null ? void 0 : ne.length) === 0 && ce("watch", [J, "unsubscribe"]);
    } }) : { remove: () => {
    } };
  }, ae = (J) => ({ "livecodes-app-loaded": "load", "livecodes-ready": "ready", "livecodes-change": "code", "livecodes-console": "console", "livecodes-test-results": "tests", "livecodes-destroy": "destroy" })[J];
  addEventListener("message", async (J) => {
    var R, ve, F, ne;
    let H = ae((ve = (R = J.data) == null ? void 0 : R.type) != null ? ve : "");
    if (J.source !== A.contentWindow || J.origin !== C || !H || !ge[H])
      return;
    let we = (F = J.data) == null ? void 0 : F.payload;
    (ne = ge[H]) == null || ne.forEach((_e) => {
      _e(we);
    });
  });
  let Re = () => {
    var J;
    Object.values(ge).forEach((R) => {
      R.length = 0;
    }), (J = A == null ? void 0 : A.remove) == null || J.call(A), N = !0;
  };
  a === "lazy" && "IntersectionObserver" in window && new IntersectionObserver((J, R) => {
    J.forEach(async (ve) => {
      ve.isIntersecting && (await Te(), R.unobserve(m));
    });
  }, { rootMargin: "150px" }).observe(m);
  function pe(J) {
    J.style.position = "absolute", J.style.top = "0", J.style.visibility = "hidden", J.style.opacity = "0";
  }
  let Ce = () => (String(Math.random()) + Date.now().toFixed()).replace("0.", "");
  return { load: () => Te(), run: () => ce("run"), format: (J) => ce("format", [J]), getShareUrl: (J) => ce("getShareUrl", [J]), getConfig: (J) => ce("getConfig", [J]), setConfig: (J) => ce("setConfig", [J]), getCode: () => ce("getCode"), show: (J, R) => ce("show", [J, R]), runTests: () => ce("runTests"), onChange: (J) => fe("code", J), watch: fe, exec: (J, ...R) => ce("exec", [J, ...R]), destroy: () => Q.settled ? ce("destroy").then(Re) : N ? Promise.reject(z) : (Re(), Promise.resolve()) };
}
var I0;
globalThis.document && document.currentScript && "prefill" in ((I0 = document.currentScript) == null ? void 0 : I0.dataset) && window.addEventListener("load", () => {
  document.querySelectorAll(".livecodes").forEach((t) => {
    let e, r = t.dataset.options;
    if (r)
      try {
        e = JSON.parse(r);
      } catch {
      }
    let n, i = t.dataset.config || t.dataset.prefill;
    if (i)
      try {
        n = JSON.parse(i);
      } catch {
      }
    let s = encodeURIComponent(t.outerHTML);
    t.innerHTML = "", yS(t, { import: "dom/" + s, ...e, ...n ? { config: n } : {} });
  });
});
var KN = Kt`
  ${wr}

  :host {
    display: block;
  }

  .details {
    border: solid 1px var(--sl-color-neutral-200);
    border-radius: var(--sl-border-radius-medium);
    background-color: var(--sl-color-neutral-0);
    overflow-anchor: none;
  }

  .details--disabled {
    opacity: 0.5;
  }

  .details__header {
    display: flex;
    align-items: center;
    border-radius: inherit;
    padding: var(--sl-spacing-medium);
    user-select: none;
    -webkit-user-select: none;
    cursor: pointer;
  }

  .details__header::-webkit-details-marker {
    display: none;
  }

  .details__header:focus {
    outline: none;
  }

  .details__header:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: calc(1px + var(--sl-focus-ring-offset));
  }

  .details--disabled .details__header {
    cursor: not-allowed;
  }

  .details--disabled .details__header:focus-visible {
    outline: none;
    box-shadow: none;
  }

  .details__summary {
    flex: 1 1 auto;
    display: flex;
    align-items: center;
  }

  .details__summary-icon {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    transition: var(--sl-transition-medium) rotate ease;
  }

  .details--open .details__summary-icon {
    rotate: 90deg;
  }

  .details--open.details--rtl .details__summary-icon {
    rotate: -90deg;
  }

  .details--open slot[name='expand-icon'],
  .details:not(.details--open) slot[name='collapse-icon'] {
    display: none;
  }

  .details__body {
    overflow: hidden;
  }

  .details__content {
    display: block;
    padding: var(--sl-spacing-medium);
  }
`, TS = /* @__PURE__ */ new Map(), QN = /* @__PURE__ */ new WeakMap();
function jN(t) {
  return t ?? { keyframes: [], options: { duration: 0 } };
}
function O0(t, e) {
  return e.toLowerCase() === "rtl" ? {
    keyframes: t.rtlKeyframes || t.keyframes,
    options: t.options
  } : t;
}
function Zi(t, e) {
  TS.set(t, jN(e));
}
function Pi(t, e, r) {
  const n = QN.get(t);
  if (n != null && n[e])
    return O0(n[e], r.dir);
  const i = TS.get(e);
  return i ? O0(i, r.dir) : {
    keyframes: [],
    options: { duration: 0 }
  };
}
function Fi(t, e) {
  return new Promise((r) => {
    function n(i) {
      i.target === t && (t.removeEventListener(e, n), r());
    }
    t.addEventListener(e, n);
  });
}
function Bi(t, e, r) {
  return new Promise((n) => {
    if ((r == null ? void 0 : r.duration) === 1 / 0)
      throw new Error("Promise-based animations must be finite.");
    const i = t.animate(e, Aa(Xi({}, r), {
      duration: XN() ? 0 : r.duration
    }));
    i.addEventListener("cancel", n, { once: !0 }), i.addEventListener("finish", n, { once: !0 });
  });
}
function D0(t) {
  return t = t.toString().toLowerCase(), t.indexOf("ms") > -1 ? parseFloat(t) : t.indexOf("s") > -1 ? parseFloat(t) * 1e3 : parseFloat(t);
}
function XN() {
  return window.matchMedia("(prefers-reduced-motion: reduce)").matches;
}
function Ui(t) {
  return Promise.all(
    t.getAnimations().map((e) => new Promise((r) => {
      const n = requestAnimationFrame(r);
      e.addEventListener("cancel", () => n, { once: !0 }), e.addEventListener("finish", () => n, { once: !0 }), e.cancel();
    }))
  );
}
function M0(t, e) {
  return t.map((r) => Aa(Xi({}, r), {
    height: r.height === "auto" ? `${e}px` : r.height
  }));
}
var Ln = class extends gr {
  constructor() {
    super(...arguments), this.localize = new ii(this), this.open = !1, this.disabled = !1;
  }
  firstUpdated() {
    this.body.style.height = this.open ? "auto" : "0", this.open && (this.details.open = !0), this.detailsObserver = new MutationObserver((t) => {
      for (const e of t)
        e.type === "attributes" && e.attributeName === "open" && (this.details.open ? this.show() : this.hide());
    }), this.detailsObserver.observe(this.details, { attributes: !0 });
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.detailsObserver.disconnect();
  }
  handleSummaryClick(t) {
    t.preventDefault(), this.disabled || (this.open ? this.hide() : this.show(), this.header.focus());
  }
  handleSummaryKeyDown(t) {
    (t.key === "Enter" || t.key === " ") && (t.preventDefault(), this.open ? this.hide() : this.show()), (t.key === "ArrowUp" || t.key === "ArrowLeft") && (t.preventDefault(), this.hide()), (t.key === "ArrowDown" || t.key === "ArrowRight") && (t.preventDefault(), this.show());
  }
  async handleOpenChange() {
    if (this.open) {
      if (this.details.open = !0, this.emit("sl-show", { cancelable: !0 }).defaultPrevented) {
        this.open = !1, this.details.open = !1;
        return;
      }
      await Ui(this.body);
      const { keyframes: e, options: r } = Pi(this, "details.show", { dir: this.localize.dir() });
      await Bi(this.body, M0(e, this.body.scrollHeight), r), this.body.style.height = "auto", this.emit("sl-after-show");
    } else {
      if (this.emit("sl-hide", { cancelable: !0 }).defaultPrevented) {
        this.details.open = !0, this.open = !0;
        return;
      }
      await Ui(this.body);
      const { keyframes: e, options: r } = Pi(this, "details.hide", { dir: this.localize.dir() });
      await Bi(this.body, M0(e, this.body.scrollHeight), r), this.body.style.height = "auto", this.details.open = !1, this.emit("sl-after-hide");
    }
  }
  /** Shows the details. */
  async show() {
    if (!(this.open || this.disabled))
      return this.open = !0, Fi(this, "sl-after-show");
  }
  /** Hides the details */
  async hide() {
    if (!(!this.open || this.disabled))
      return this.open = !1, Fi(this, "sl-after-hide");
  }
  render() {
    const t = this.localize.dir() === "rtl";
    return Ct`
      <details
        part="base"
        class=${Ur({
      details: !0,
      "details--open": this.open,
      "details--disabled": this.disabled,
      "details--rtl": t
    })}
      >
        <summary
          part="header"
          id="header"
          class="details__header"
          role="button"
          aria-expanded=${this.open ? "true" : "false"}
          aria-controls="content"
          aria-disabled=${this.disabled ? "true" : "false"}
          tabindex=${this.disabled ? "-1" : "0"}
          @click=${this.handleSummaryClick}
          @keydown=${this.handleSummaryKeyDown}
        >
          <slot name="summary" part="summary" class="details__summary">${this.summary}</slot>

          <span part="summary-icon" class="details__summary-icon">
            <slot name="expand-icon">
              <sl-icon library="system" name=${t ? "chevron-left" : "chevron-right"}></sl-icon>
            </slot>
            <slot name="collapse-icon">
              <sl-icon library="system" name=${t ? "chevron-left" : "chevron-right"}></sl-icon>
            </slot>
          </span>
        </summary>

        <div class="details__body" role="region" aria-labelledby="header">
          <slot part="content" id="content" class="details__content"></slot>
        </div>
      </details>
    `;
  }
};
Ln.styles = KN;
Ln.dependencies = {
  "sl-icon": gn
};
ct([
  Ht(".details")
], Ln.prototype, "details", 2);
ct([
  Ht(".details__header")
], Ln.prototype, "header", 2);
ct([
  Ht(".details__body")
], Ln.prototype, "body", 2);
ct([
  Ht(".details__expand-icon-slot")
], Ln.prototype, "expandIconSlot", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], Ln.prototype, "open", 2);
ct([
  ut()
], Ln.prototype, "summary", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], Ln.prototype, "disabled", 2);
ct([
  _r("open", { waitUntilFirstUpdate: !0 })
], Ln.prototype, "handleOpenChange", 1);
Zi("details.show", {
  keyframes: [
    { height: "0", opacity: "0" },
    { height: "auto", opacity: "1" }
  ],
  options: { duration: 250, easing: "linear" }
});
Zi("details.hide", {
  keyframes: [
    { height: "auto", opacity: "1" },
    { height: "0", opacity: "0" }
  ],
  options: { duration: 250, easing: "linear" }
});
Ln.define("sl-details");
const ZN = ":host{box-sizing:border-box}:host *,:host *:before,:host *:after{box-sizing:inherit}.hidden,[hidden]{display:none!important}.rtl{direction:rtl}.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}:host{display:block}sl-details.custom-icons::part(summary-icon){rotate:none}";
var JN = Object.defineProperty, ek = Object.getOwnPropertyDescriptor, Nn = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? ek(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && JN(e, r, i), i;
};
const Ap = {
  markup: {
    asciidoc: Ct`<it-simple-icons-asciidoctor></it-simple-icons-asciidoctor>`,
    html: Ct`<it-mdi-language-html5></it-mdi-language-html5>`,
    markdown: Ct`<it-mdi-language-markdown></it-mdi-language-markdown>`
  },
  style: {
    css: Ct`<it-mdi-language-css3></it-mdi-language-css3>`
  },
  script: {
    javascript: Ct`<it-mdi-language-javascript></it-mdi-language-javascript>`,
    prolog: yC`<svg xmlns="http://www.w3.org/2000/svg" style="display:inline-block;vertical-align:middle;" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><text x="2" y="15" fill="currentColor" style="font-weight:bold;font-size:inherit">?-</text></svg>`,
    python: Ct`<it-mdi-language-python></it-mdi-language-python>`,
    sql: Ct`<it-mdi-sql-query></it-mdi-sql-query>`,
    typescript: Ct`<it-mdi-language-typescript></it-mdi-language-typescript>`
  }
}, Am = class Am extends hn {
  constructor() {
    super(...arguments), this.activeEditor = "script", this.lineNumbers = !1, this.lite = !1, this.markupLanguage = "html", this.mode = "full", this.readOnly = !1, this.theme = "dark", this.scriptLanguage = "javascript", this.styleLanguage = "css", this.title = "Hello", this.view = "split", this.initIde = async () => {
      const e = await yS(this.container, this.options);
      console.log(await e.getConfig());
    };
  }
  getInitialContent(e) {
    var s;
    const r = (s = this.shadowRoot) == null ? void 0 : s.querySelector("slot"), n = r == null ? void 0 : r.assignedElements({ flatten: !0 }).filter((o) => o.matches(`script[type="enibook/${e}"]`));
    return n == null ? void 0 : n.map((o) => xh(o.innerText)).reduce((o, a) => o.concat(o, `
`, a), "");
  }
  get options() {
    return {
      config: {
        markup: {
          language: this.markupLanguage,
          content: this.getInitialContent(this.markupLanguage)
        },
        style: {
          language: this.styleLanguage,
          content: this.getInitialContent(this.styleLanguage)
        },
        script: {
          language: this.scriptLanguage,
          content: this.getInitialContent(this.scriptLanguage)
        },
        activeEditor: this.activeEditor,
        allowLangChange: !1,
        description: "",
        lineNumbers: this.lineNumbers,
        mode: this.mode,
        readonly: this.readOnly,
        scripts: [],
        stylesheets: [],
        theme: this.theme,
        title: this.title
      },
      lite: this.lite,
      params: {
        console: "open"
      },
      view: this.view
    };
  }
  firstUpdated(e) {
    this.initIde();
  }
  render() {
    return Ct`
      <div part="base" class="playground">
        <sl-details class="custom-icons">
          <div slot="summary">${Ap.markup[this.markupLanguage]} ${Ap.style.css} ${Ap.script[this.scriptLanguage]} ${Ms(this.title)}</div>
          <it-mdi-plus-box-outline slot="expand-icon"></it-mdi-plus-box-outline>
          <it-mdi-minus-box-outline slot="collapse-icon"></it-mdi-minus-box-outline>
          <div part="ide" id="ide-container" class="ide-container" data-height="500px"></div>
        </sl-details>
        <slot></slot>
      </div>
    `;
  }
  get tagTitle() {
    return "Playground";
  }
  toAsciidoc() {
    throw new Error("Method not implemented.");
  }
};
Am.styles = [
  jr(ZN),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: icons */
it-mdi-language-css3{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='m5 3l-.65 3.34h13.59L17.5 8.5H3.92l-.66 3.33h13.59l-.76 3.81l-5.48 1.81l-4.75-1.81l.33-1.64H2.85l-.79 4l7.85 3l9.05-3l1.2-6.03l.24-1.21L21.94 3z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-language-html5{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='m12 17.56l4.07-1.13l.55-6.1H9.38L9.2 8.3h7.6l.2-1.99H7l.56 6.01h6.89l-.23 2.58l-2.22.6l-2.22-.6l-.14-1.66h-2l.29 3.19zM4.07 3h15.86L18.5 19.2L12 21l-6.5-1.8z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-language-javascript{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M3 3h18v18H3zm4.73 15.04c.4.85 1.19 1.55 2.54 1.55c1.5 0 2.53-.8 2.53-2.55v-5.78h-1.7V17c0 .86-.35 1.08-.9 1.08c-.58 0-.82-.4-1.09-.87zm5.98-.18c.5.98 1.51 1.73 3.09 1.73c1.6 0 2.8-.83 2.8-2.36c0-1.41-.81-2.04-2.25-2.66l-.42-.18c-.73-.31-1.04-.52-1.04-1.02c0-.41.31-.73.81-.73c.48 0 .8.21 1.09.73l1.31-.87c-.55-.96-1.33-1.33-2.4-1.33c-1.51 0-2.48.96-2.48 2.23c0 1.38.81 2.03 2.03 2.55l.42.18c.78.34 1.24.55 1.24 1.13c0 .48-.45.83-1.15.83c-.83 0-1.31-.43-1.67-1.03z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-language-markdown{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M20.56 18H3.44C2.65 18 2 17.37 2 16.59V7.41C2 6.63 2.65 6 3.44 6h17.12c.79 0 1.44.63 1.44 1.41v9.18c0 .78-.65 1.41-1.44 1.41M6.81 15.19v-3.66l1.92 2.35l1.92-2.35v3.66h1.93V8.81h-1.93l-1.92 2.35l-1.92-2.35H4.89v6.38zM19.69 12h-1.92V8.81h-1.92V12h-1.93l2.89 3.28z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-language-python{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M19.14 7.5A2.86 2.86 0 0 1 22 10.36v3.78A2.86 2.86 0 0 1 19.14 17H12c0 .39.32.96.71.96H17v1.68a2.86 2.86 0 0 1-2.86 2.86H9.86A2.86 2.86 0 0 1 7 19.64v-3.75a2.85 2.85 0 0 1 2.86-2.85h5.25a2.85 2.85 0 0 0 2.85-2.86V7.5zm-4.28 11.79c-.4 0-.72.3-.72.89c0 .59.32.71.72.71a.71.71 0 0 0 .71-.71c0-.59-.32-.89-.71-.89m-10-1.79A2.86 2.86 0 0 1 2 14.64v-3.78A2.86 2.86 0 0 1 4.86 8H12c0-.39-.32-.96-.71-.96H7V5.36A2.86 2.86 0 0 1 9.86 2.5h4.28A2.86 2.86 0 0 1 17 5.36v3.75a2.85 2.85 0 0 1-2.86 2.85H8.89a2.85 2.85 0 0 0-2.85 2.86v2.68zM9.14 5.71c.4 0 .72-.3.72-.89c0-.59-.32-.71-.72-.71c-.39 0-.71.12-.71.71s.32.89.71.89'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-language-typescript{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M3 3h18v18H3zm10.71 14.86c.5.98 1.51 1.73 3.09 1.73c1.6 0 2.8-.83 2.8-2.36c0-1.41-.81-2.04-2.25-2.66l-.42-.18c-.73-.31-1.04-.52-1.04-1.02c0-.41.31-.73.81-.73c.48 0 .8.21 1.09.73l1.31-.87c-.55-.96-1.33-1.33-2.4-1.33c-1.51 0-2.48.96-2.48 2.23c0 1.38.81 2.03 2.03 2.55l.42.18c.78.34 1.24.55 1.24 1.13c0 .48-.45.83-1.15.83c-.83 0-1.31-.43-1.67-1.03zM13 11.25H8v1.5h1.5V20h1.75v-7.25H13z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-minus-box-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M19 19V5H5v14zm0-16a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2zm-2 8v2H7v-2z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-plus-box-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M19 19V5H5v14zm0-16a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2zm-8 4h2v4h4v2h-4v4h-2v-4H7v-2h4z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-sql-query{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M18.68 12.32a4.49 4.49 0 0 0-6.36.01a4.49 4.49 0 0 0 0 6.36a4.508 4.508 0 0 0 5.57.63L21 22.39L22.39 21l-3.09-3.11c1.13-1.77.87-4.09-.62-5.57m-1.41 4.95c-.98.98-2.56.97-3.54 0c-.97-.98-.97-2.56.01-3.54c.97-.97 2.55-.97 3.53 0c.97.98.97 2.56 0 3.54M10.9 20.1a6.527 6.527 0 0 1-1.48-2.32C6.27 17.25 4 15.76 4 14v3c0 2.21 3.58 4 8 4c-.4-.26-.77-.56-1.1-.9M4 9v3c0 1.68 2.07 3.12 5 3.7v-.2c0-.93.2-1.85.58-2.69C6.34 12.3 4 10.79 4 9m8-6C7.58 3 4 4.79 4 7c0 2 3 3.68 6.85 4h.05c1.2-1.26 2.86-2 4.6-2c.91 0 1.81.19 2.64.56A3.215 3.215 0 0 0 20 7c0-2.21-3.58-4-8-4'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-simple-icons-asciidoctor{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M18.069 0H5.932A5.934 5.934 0 0 0 0 5.932v12.136A5.935 5.935 0 0 0 5.932 24h12.136A5.934 5.934 0 0 0 24 18.068V5.932A5.934 5.934 0 0 0 18.069 0m-7.361 15.404H8.81l-.005.013L7.2 19.282a.506.506 0 1 1-.934-.388l1.45-3.49H4.868a.506.506 0 1 1 0-1.012h5.84a.506.506 0 1 1 0 1.012m7.919 4.165a.506.506 0 0 1-.655-.29L12.621 6.232l-2.395 5.76h1.55a.506.506 0 1 1 0 1.012h-5.84a.506.506 0 1 1 0-1.011h3.195l.004-.012l3.022-7.269a.506.506 0 0 1 .457-.311a.506.506 0 0 1 .478.314l5.816 14.182a.506.506 0 0 1-.281.673'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
/* layer: shortcuts */
.container\\!{width:100% !important;}
@media (min-width: 640px){
.container\\!{max-width:640px !important;}
}
@media (min-width: 768px){
.container\\!{max-width:768px !important;}
}
@media (min-width: 1024px){
.container\\!{max-width:1024px !important;}
}
@media (min-width: 1280px){
.container\\!{max-width:1280px !important;}
}
@media (min-width: 1536px){
.container\\!{max-width:1536px !important;}
}
/* layer: default */
.static{position:static;}`
];
let qr = Am;
Nn([
  Ht("#ide-container")
], qr.prototype, "container", 2);
Nn([
  ut({ type: String, reflect: !0, attribute: "active-editor" })
], qr.prototype, "activeEditor", 2);
Nn([
  ut({ type: Boolean, reflect: !0, attribute: "line-numbers" })
], qr.prototype, "lineNumbers", 2);
Nn([
  ut({ type: Boolean, reflect: !0 })
], qr.prototype, "lite", 2);
Nn([
  ut({ type: String, reflect: !0, attribute: "markup-language" })
], qr.prototype, "markupLanguage", 2);
Nn([
  ut({ type: String, reflect: !0 })
], qr.prototype, "mode", 2);
Nn([
  ut({ type: Boolean, reflect: !0, attribute: "readonly" })
], qr.prototype, "readOnly", 2);
Nn([
  ut({ type: String, reflect: !0 })
], qr.prototype, "theme", 2);
Nn([
  ut({ type: String, reflect: !0, attribute: "script-language" })
], qr.prototype, "scriptLanguage", 2);
Nn([
  ut({ type: String, reflect: !0, attribute: "style-language" })
], qr.prototype, "styleLanguage", 2);
Nn([
  ut({ type: String, reflect: !0 })
], qr.prototype, "title", 2);
Nn([
  ut({ type: String, reflect: !0 })
], qr.prototype, "view", 2);
customElements && !customElements.get("playground-it") && customElements.define("playground-it", qr);
const Go = class Go extends qr {
  get options() {
    return this.markupLanguage = "asciidoc", this.styleLanguage = "css", this.activeEditor = "markup", super.options;
  }
};
Go.styles = [
  jr(on(Go, Go, "styles")),
  // unsafeCSS(styles),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: default */
.static{position:static;}`
];
let __ = Go;
customElements && !customElements.get("asciidoc-it") && customElements.define("asciidoc-it", __);
var tk = Kt`
  ${wr}

  :host {
    display: inline-block;
  }

  .dropdown::part(popup) {
    z-index: var(--sl-z-index-dropdown);
  }

  .dropdown[data-current-placement^='top']::part(popup) {
    transform-origin: bottom;
  }

  .dropdown[data-current-placement^='bottom']::part(popup) {
    transform-origin: top;
  }

  .dropdown[data-current-placement^='left']::part(popup) {
    transform-origin: right;
  }

  .dropdown[data-current-placement^='right']::part(popup) {
    transform-origin: left;
  }

  .dropdown__trigger {
    display: block;
  }

  .dropdown__panel {
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    box-shadow: var(--sl-shadow-large);
    border-radius: var(--sl-border-radius-medium);
    pointer-events: none;
  }

  .dropdown--open .dropdown__panel {
    display: block;
    pointer-events: all;
  }

  /* When users slot a menu, make sure it conforms to the popup's auto-size */
  ::slotted(sl-menu) {
    max-width: var(--auto-size-available-width) !important;
    max-height: var(--auto-size-available-height) !important;
  }
`;
function rk(t) {
  return !!(t.offsetParent || t.offsetWidth || t.offsetHeight || t.getClientRects().length);
}
function nk(t) {
  const e = t.tagName.toLowerCase();
  return t.getAttribute("tabindex") === "-1" || t.hasAttribute("disabled") || e === "input" && t.getAttribute("type") === "radio" && !t.hasAttribute("checked") || !rk(t) || window.getComputedStyle(t).visibility === "hidden" ? !1 : (e === "audio" || e === "video") && t.hasAttribute("controls") || t.hasAttribute("tabindex") || t.hasAttribute("contenteditable") && t.getAttribute("contenteditable") !== "false" ? !0 : ["button", "input", "select", "textarea", "a", "audio", "video", "summary"].includes(e);
}
function ik(t) {
  var e, r;
  const n = sk(t), i = (e = n[0]) != null ? e : null, s = (r = n[n.length - 1]) != null ? r : null;
  return { start: i, end: s };
}
function sk(t) {
  const e = [];
  function r(n) {
    if (n instanceof Element) {
      if (n.hasAttribute("inert"))
        return;
      !e.includes(n) && nk(n) && e.push(n);
      const i = (s) => {
        var o;
        return ((o = s.getRootNode({ composed: !0 })) == null ? void 0 : o.host) !== t;
      };
      n instanceof HTMLSlotElement && i(n) && n.assignedElements({ flatten: !0 }).forEach((s) => {
        r(s);
      }), n.shadowRoot !== null && n.shadowRoot.mode === "open" && r(n.shadowRoot);
    }
    [...n.children].forEach((i) => r(i));
  }
  return r(t), e.sort((n, i) => {
    const s = Number(n.getAttribute("tabindex")) || 0;
    return (Number(i.getAttribute("tabindex")) || 0) - s;
  });
}
var ok = Kt`
  ${wr}

  :host {
    --arrow-color: var(--sl-color-neutral-1000);
    --arrow-size: 6px;

    /*
     * These properties are computed to account for the arrow's dimensions after being rotated 45º. The constant
     * 0.7071 is derived from sin(45), which is the diagonal size of the arrow's container after rotating.
     */
    --arrow-size-diagonal: calc(var(--arrow-size) * 0.7071);
    --arrow-padding-offset: calc(var(--arrow-size-diagonal) - var(--arrow-size));

    display: contents;
  }

  .popup {
    position: absolute;
    isolation: isolate;
    max-width: var(--auto-size-available-width, none);
    max-height: var(--auto-size-available-height, none);
  }

  .popup--fixed {
    position: fixed;
  }

  .popup:not(.popup--active) {
    display: none;
  }

  .popup__arrow {
    position: absolute;
    width: calc(var(--arrow-size-diagonal) * 2);
    height: calc(var(--arrow-size-diagonal) * 2);
    rotate: 45deg;
    background: var(--arrow-color);
    z-index: -1;
  }
`;
const qi = Math.min, un = Math.max, Ll = Math.round, Qa = Math.floor, zi = (t) => ({
  x: t,
  y: t
}), ak = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
}, lk = {
  start: "end",
  end: "start"
};
function h_(t, e, r) {
  return un(t, qi(e, r));
}
function ao(t, e) {
  return typeof t == "function" ? t(e) : t;
}
function Gi(t) {
  return t.split("-")[0];
}
function lo(t) {
  return t.split("-")[1];
}
function CS(t) {
  return t === "x" ? "y" : "x";
}
function kh(t) {
  return t === "y" ? "height" : "width";
}
function ka(t) {
  return ["top", "bottom"].includes(Gi(t)) ? "y" : "x";
}
function Ih(t) {
  return CS(ka(t));
}
function ck(t, e, r) {
  r === void 0 && (r = !1);
  const n = lo(t), i = Ih(t), s = kh(i);
  let o = i === "x" ? n === (r ? "end" : "start") ? "right" : "left" : n === "start" ? "bottom" : "top";
  return e.reference[s] > e.floating[s] && (o = Pl(o)), [o, Pl(o)];
}
function uk(t) {
  const e = Pl(t);
  return [m_(t), e, m_(e)];
}
function m_(t) {
  return t.replace(/start|end/g, (e) => lk[e]);
}
function dk(t, e, r) {
  const n = ["left", "right"], i = ["right", "left"], s = ["top", "bottom"], o = ["bottom", "top"];
  switch (t) {
    case "top":
    case "bottom":
      return r ? e ? i : n : e ? n : i;
    case "left":
    case "right":
      return e ? s : o;
    default:
      return [];
  }
}
function fk(t, e, r, n) {
  const i = lo(t);
  let s = dk(Gi(t), r === "start", n);
  return i && (s = s.map((o) => o + "-" + i), e && (s = s.concat(s.map(m_)))), s;
}
function Pl(t) {
  return t.replace(/left|right|bottom|top/g, (e) => ak[e]);
}
function pk(t) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...t
  };
}
function wS(t) {
  return typeof t != "number" ? pk(t) : {
    top: t,
    right: t,
    bottom: t,
    left: t
  };
}
function Fl(t) {
  return {
    ...t,
    top: t.y,
    left: t.x,
    right: t.x + t.width,
    bottom: t.y + t.height
  };
}
function L0(t, e, r) {
  let {
    reference: n,
    floating: i
  } = t;
  const s = ka(e), o = Ih(e), a = kh(o), l = Gi(e), c = s === "y", f = n.x + n.width / 2 - i.width / 2, m = n.y + n.height / 2 - i.height / 2, b = n[a] / 2 - i[a] / 2;
  let C;
  switch (l) {
    case "top":
      C = {
        x: f,
        y: n.y - i.height
      };
      break;
    case "bottom":
      C = {
        x: f,
        y: n.y + n.height
      };
      break;
    case "right":
      C = {
        x: n.x + n.width,
        y: m
      };
      break;
    case "left":
      C = {
        x: n.x - i.width,
        y: m
      };
      break;
    default:
      C = {
        x: n.x,
        y: n.y
      };
  }
  switch (lo(e)) {
    case "start":
      C[o] -= b * (r && c ? -1 : 1);
      break;
    case "end":
      C[o] += b * (r && c ? -1 : 1);
      break;
  }
  return C;
}
const _k = async (t, e, r) => {
  const {
    placement: n = "bottom",
    strategy: i = "absolute",
    middleware: s = [],
    platform: o
  } = r, a = s.filter(Boolean), l = await (o.isRTL == null ? void 0 : o.isRTL(e));
  let c = await o.getElementRects({
    reference: t,
    floating: e,
    strategy: i
  }), {
    x: f,
    y: m
  } = L0(c, n, l), b = n, C = {}, N = 0;
  for (let z = 0; z < a.length; z++) {
    const {
      name: A,
      fn: Q
    } = a[z], {
      x: Te,
      y: ce,
      data: ge,
      reset: Y
    } = await Q({
      x: f,
      y: m,
      initialPlacement: n,
      placement: b,
      strategy: i,
      middlewareData: C,
      rects: c,
      platform: o,
      elements: {
        reference: t,
        floating: e
      }
    });
    if (f = Te ?? f, m = ce ?? m, C = {
      ...C,
      [A]: {
        ...C[A],
        ...ge
      }
    }, Y && N <= 50) {
      N++, typeof Y == "object" && (Y.placement && (b = Y.placement), Y.rects && (c = Y.rects === !0 ? await o.getElementRects({
        reference: t,
        floating: e,
        strategy: i
      }) : Y.rects), {
        x: f,
        y: m
      } = L0(c, b, l)), z = -1;
      continue;
    }
  }
  return {
    x: f,
    y: m,
    placement: b,
    strategy: i,
    middlewareData: C
  };
};
async function Oh(t, e) {
  var r;
  e === void 0 && (e = {});
  const {
    x: n,
    y: i,
    platform: s,
    rects: o,
    elements: a,
    strategy: l
  } = t, {
    boundary: c = "clippingAncestors",
    rootBoundary: f = "viewport",
    elementContext: m = "floating",
    altBoundary: b = !1,
    padding: C = 0
  } = ao(e, t), N = wS(C), A = a[b ? m === "floating" ? "reference" : "floating" : m], Q = Fl(await s.getClippingRect({
    element: (r = await (s.isElement == null ? void 0 : s.isElement(A))) == null || r ? A : A.contextElement || await (s.getDocumentElement == null ? void 0 : s.getDocumentElement(a.floating)),
    boundary: c,
    rootBoundary: f,
    strategy: l
  })), Te = m === "floating" ? {
    ...o.floating,
    x: n,
    y: i
  } : o.reference, ce = await (s.getOffsetParent == null ? void 0 : s.getOffsetParent(a.floating)), ge = await (s.isElement == null ? void 0 : s.isElement(ce)) ? await (s.getScale == null ? void 0 : s.getScale(ce)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  }, Y = Fl(s.convertOffsetParentRelativeRectToViewportRelativeRect ? await s.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect: Te,
    offsetParent: ce,
    strategy: l
  }) : Te);
  return {
    top: (Q.top - Y.top + N.top) / ge.y,
    bottom: (Y.bottom - Q.bottom + N.bottom) / ge.y,
    left: (Q.left - Y.left + N.left) / ge.x,
    right: (Y.right - Q.right + N.right) / ge.x
  };
}
const hk = (t) => ({
  name: "arrow",
  options: t,
  async fn(e) {
    const {
      x: r,
      y: n,
      placement: i,
      rects: s,
      platform: o,
      elements: a,
      middlewareData: l
    } = e, {
      element: c,
      padding: f = 0
    } = ao(t, e) || {};
    if (c == null)
      return {};
    const m = wS(f), b = {
      x: r,
      y: n
    }, C = Ih(i), N = kh(C), z = await o.getDimensions(c), A = C === "y", Q = A ? "top" : "left", Te = A ? "bottom" : "right", ce = A ? "clientHeight" : "clientWidth", ge = s.reference[N] + s.reference[C] - b[C] - s.floating[N], Y = b[C] - s.reference[C], fe = await (o.getOffsetParent == null ? void 0 : o.getOffsetParent(c));
    let ae = fe ? fe[ce] : 0;
    (!ae || !await (o.isElement == null ? void 0 : o.isElement(fe))) && (ae = a.floating[ce] || s.floating[N]);
    const Re = ge / 2 - Y / 2, pe = ae / 2 - z[N] / 2 - 1, Ce = qi(m[Q], pe), J = qi(m[Te], pe), R = Ce, ve = ae - z[N] - J, F = ae / 2 - z[N] / 2 + Re, ne = h_(R, F, ve), H = !l.arrow && lo(i) != null && F != ne && s.reference[N] / 2 - (F < R ? Ce : J) - z[N] / 2 < 0, we = H ? F < R ? F - R : F - ve : 0;
    return {
      [C]: b[C] + we,
      data: {
        [C]: ne,
        centerOffset: F - ne - we,
        ...H && {
          alignmentOffset: we
        }
      },
      reset: H
    };
  }
}), mk = function(t) {
  return t === void 0 && (t = {}), {
    name: "flip",
    options: t,
    async fn(e) {
      var r, n;
      const {
        placement: i,
        middlewareData: s,
        rects: o,
        initialPlacement: a,
        platform: l,
        elements: c
      } = e, {
        mainAxis: f = !0,
        crossAxis: m = !0,
        fallbackPlacements: b,
        fallbackStrategy: C = "bestFit",
        fallbackAxisSideDirection: N = "none",
        flipAlignment: z = !0,
        ...A
      } = ao(t, e);
      if ((r = s.arrow) != null && r.alignmentOffset)
        return {};
      const Q = Gi(i), Te = Gi(a) === a, ce = await (l.isRTL == null ? void 0 : l.isRTL(c.floating)), ge = b || (Te || !z ? [Pl(a)] : uk(a));
      !b && N !== "none" && ge.push(...fk(a, z, N, ce));
      const Y = [a, ...ge], fe = await Oh(e, A), ae = [];
      let Re = ((n = s.flip) == null ? void 0 : n.overflows) || [];
      if (f && ae.push(fe[Q]), m) {
        const R = ck(i, o, ce);
        ae.push(fe[R[0]], fe[R[1]]);
      }
      if (Re = [...Re, {
        placement: i,
        overflows: ae
      }], !ae.every((R) => R <= 0)) {
        var pe, Ce;
        const R = (((pe = s.flip) == null ? void 0 : pe.index) || 0) + 1, ve = Y[R];
        if (ve)
          return {
            data: {
              index: R,
              overflows: Re
            },
            reset: {
              placement: ve
            }
          };
        let F = (Ce = Re.filter((ne) => ne.overflows[0] <= 0).sort((ne, H) => ne.overflows[1] - H.overflows[1])[0]) == null ? void 0 : Ce.placement;
        if (!F)
          switch (C) {
            case "bestFit": {
              var J;
              const ne = (J = Re.map((H) => [H.placement, H.overflows.filter((we) => we > 0).reduce((we, _e) => we + _e, 0)]).sort((H, we) => H[1] - we[1])[0]) == null ? void 0 : J[0];
              ne && (F = ne);
              break;
            }
            case "initialPlacement":
              F = a;
              break;
          }
        if (i !== F)
          return {
            reset: {
              placement: F
            }
          };
      }
      return {};
    }
  };
};
async function gk(t, e) {
  const {
    placement: r,
    platform: n,
    elements: i
  } = t, s = await (n.isRTL == null ? void 0 : n.isRTL(i.floating)), o = Gi(r), a = lo(r), l = ka(r) === "y", c = ["left", "top"].includes(o) ? -1 : 1, f = s && l ? -1 : 1, m = ao(e, t);
  let {
    mainAxis: b,
    crossAxis: C,
    alignmentAxis: N
  } = typeof m == "number" ? {
    mainAxis: m,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...m
  };
  return a && typeof N == "number" && (C = a === "end" ? N * -1 : N), l ? {
    x: C * f,
    y: b * c
  } : {
    x: b * c,
    y: C * f
  };
}
const $k = function(t) {
  return t === void 0 && (t = 0), {
    name: "offset",
    options: t,
    async fn(e) {
      var r, n;
      const {
        x: i,
        y: s,
        placement: o,
        middlewareData: a
      } = e, l = await gk(e, t);
      return o === ((r = a.offset) == null ? void 0 : r.placement) && (n = a.arrow) != null && n.alignmentOffset ? {} : {
        x: i + l.x,
        y: s + l.y,
        data: {
          ...l,
          placement: o
        }
      };
    }
  };
}, bk = function(t) {
  return t === void 0 && (t = {}), {
    name: "shift",
    options: t,
    async fn(e) {
      const {
        x: r,
        y: n,
        placement: i
      } = e, {
        mainAxis: s = !0,
        crossAxis: o = !1,
        limiter: a = {
          fn: (A) => {
            let {
              x: Q,
              y: Te
            } = A;
            return {
              x: Q,
              y: Te
            };
          }
        },
        ...l
      } = ao(t, e), c = {
        x: r,
        y: n
      }, f = await Oh(e, l), m = ka(Gi(i)), b = CS(m);
      let C = c[b], N = c[m];
      if (s) {
        const A = b === "y" ? "top" : "left", Q = b === "y" ? "bottom" : "right", Te = C + f[A], ce = C - f[Q];
        C = h_(Te, C, ce);
      }
      if (o) {
        const A = m === "y" ? "top" : "left", Q = m === "y" ? "bottom" : "right", Te = N + f[A], ce = N - f[Q];
        N = h_(Te, N, ce);
      }
      const z = a.fn({
        ...e,
        [b]: C,
        [m]: N
      });
      return {
        ...z,
        data: {
          x: z.x - r,
          y: z.y - n
        }
      };
    }
  };
}, Ek = function(t) {
  return t === void 0 && (t = {}), {
    name: "size",
    options: t,
    async fn(e) {
      const {
        placement: r,
        rects: n,
        platform: i,
        elements: s
      } = e, {
        apply: o = () => {
        },
        ...a
      } = ao(t, e), l = await Oh(e, a), c = Gi(r), f = lo(r), m = ka(r) === "y", {
        width: b,
        height: C
      } = n.floating;
      let N, z;
      c === "top" || c === "bottom" ? (N = c, z = f === (await (i.isRTL == null ? void 0 : i.isRTL(s.floating)) ? "start" : "end") ? "left" : "right") : (z = c, N = f === "end" ? "top" : "bottom");
      const A = C - l[N], Q = b - l[z], Te = !e.middlewareData.shift;
      let ce = A, ge = Q;
      if (m) {
        const fe = b - l.left - l.right;
        ge = f || Te ? qi(Q, fe) : fe;
      } else {
        const fe = C - l.top - l.bottom;
        ce = f || Te ? qi(A, fe) : fe;
      }
      if (Te && !f) {
        const fe = un(l.left, 0), ae = un(l.right, 0), Re = un(l.top, 0), pe = un(l.bottom, 0);
        m ? ge = b - 2 * (fe !== 0 || ae !== 0 ? fe + ae : un(l.left, l.right)) : ce = C - 2 * (Re !== 0 || pe !== 0 ? Re + pe : un(l.top, l.bottom));
      }
      await o({
        ...e,
        availableWidth: ge,
        availableHeight: ce
      });
      const Y = await i.getDimensions(s.floating);
      return b !== Y.width || C !== Y.height ? {
        reset: {
          rects: !0
        }
      } : {};
    }
  };
};
function Yi(t) {
  return AS(t) ? (t.nodeName || "").toLowerCase() : "#document";
}
function _n(t) {
  var e;
  return (t == null || (e = t.ownerDocument) == null ? void 0 : e.defaultView) || window;
}
function gi(t) {
  var e;
  return (e = (AS(t) ? t.ownerDocument : t.document) || window.document) == null ? void 0 : e.documentElement;
}
function AS(t) {
  return t instanceof Node || t instanceof _n(t).Node;
}
function di(t) {
  return t instanceof Element || t instanceof _n(t).Element;
}
function ti(t) {
  return t instanceof HTMLElement || t instanceof _n(t).HTMLElement;
}
function P0(t) {
  return typeof ShadowRoot > "u" ? !1 : t instanceof ShadowRoot || t instanceof _n(t).ShadowRoot;
}
function Ia(t) {
  const {
    overflow: e,
    overflowX: r,
    overflowY: n,
    display: i
  } = An(t);
  return /auto|scroll|overlay|hidden|clip/.test(e + n + r) && !["inline", "contents"].includes(i);
}
function vk(t) {
  return ["table", "td", "th"].includes(Yi(t));
}
function Dh(t) {
  const e = Mh(), r = An(t);
  return r.transform !== "none" || r.perspective !== "none" || (r.containerType ? r.containerType !== "normal" : !1) || !e && (r.backdropFilter ? r.backdropFilter !== "none" : !1) || !e && (r.filter ? r.filter !== "none" : !1) || ["transform", "perspective", "filter"].some((n) => (r.willChange || "").includes(n)) || ["paint", "layout", "strict", "content"].some((n) => (r.contain || "").includes(n));
}
function Sk(t) {
  let e = js(t);
  for (; ti(e) && !gc(e); ) {
    if (Dh(e))
      return e;
    e = js(e);
  }
  return null;
}
function Mh() {
  return typeof CSS > "u" || !CSS.supports ? !1 : CSS.supports("-webkit-backdrop-filter", "none");
}
function gc(t) {
  return ["html", "body", "#document"].includes(Yi(t));
}
function An(t) {
  return _n(t).getComputedStyle(t);
}
function $c(t) {
  return di(t) ? {
    scrollLeft: t.scrollLeft,
    scrollTop: t.scrollTop
  } : {
    scrollLeft: t.pageXOffset,
    scrollTop: t.pageYOffset
  };
}
function js(t) {
  if (Yi(t) === "html")
    return t;
  const e = (
    // Step into the shadow DOM of the parent of a slotted node.
    t.assignedSlot || // DOM Element detected.
    t.parentNode || // ShadowRoot detected.
    P0(t) && t.host || // Fallback.
    gi(t)
  );
  return P0(e) ? e.host : e;
}
function RS(t) {
  const e = js(t);
  return gc(e) ? t.ownerDocument ? t.ownerDocument.body : t.body : ti(e) && Ia(e) ? e : RS(e);
}
function ia(t, e, r) {
  var n;
  e === void 0 && (e = []), r === void 0 && (r = !0);
  const i = RS(t), s = i === ((n = t.ownerDocument) == null ? void 0 : n.body), o = _n(i);
  return s ? e.concat(o, o.visualViewport || [], Ia(i) ? i : [], o.frameElement && r ? ia(o.frameElement) : []) : e.concat(i, ia(i, [], r));
}
function xS(t) {
  const e = An(t);
  let r = parseFloat(e.width) || 0, n = parseFloat(e.height) || 0;
  const i = ti(t), s = i ? t.offsetWidth : r, o = i ? t.offsetHeight : n, a = Ll(r) !== s || Ll(n) !== o;
  return a && (r = s, n = o), {
    width: r,
    height: n,
    $: a
  };
}
function Lh(t) {
  return di(t) ? t : t.contextElement;
}
function Bs(t) {
  const e = Lh(t);
  if (!ti(e))
    return zi(1);
  const r = e.getBoundingClientRect(), {
    width: n,
    height: i,
    $: s
  } = xS(e);
  let o = (s ? Ll(r.width) : r.width) / n, a = (s ? Ll(r.height) : r.height) / i;
  return (!o || !Number.isFinite(o)) && (o = 1), (!a || !Number.isFinite(a)) && (a = 1), {
    x: o,
    y: a
  };
}
const yk = /* @__PURE__ */ zi(0);
function NS(t) {
  const e = _n(t);
  return !Mh() || !e.visualViewport ? yk : {
    x: e.visualViewport.offsetLeft,
    y: e.visualViewport.offsetTop
  };
}
function Tk(t, e, r) {
  return e === void 0 && (e = !1), !r || e && r !== _n(t) ? !1 : e;
}
function hs(t, e, r, n) {
  e === void 0 && (e = !1), r === void 0 && (r = !1);
  const i = t.getBoundingClientRect(), s = Lh(t);
  let o = zi(1);
  e && (n ? di(n) && (o = Bs(n)) : o = Bs(t));
  const a = Tk(s, r, n) ? NS(s) : zi(0);
  let l = (i.left + a.x) / o.x, c = (i.top + a.y) / o.y, f = i.width / o.x, m = i.height / o.y;
  if (s) {
    const b = _n(s), C = n && di(n) ? _n(n) : n;
    let N = b.frameElement;
    for (; N && n && C !== b; ) {
      const z = Bs(N), A = N.getBoundingClientRect(), Q = An(N), Te = A.left + (N.clientLeft + parseFloat(Q.paddingLeft)) * z.x, ce = A.top + (N.clientTop + parseFloat(Q.paddingTop)) * z.y;
      l *= z.x, c *= z.y, f *= z.x, m *= z.y, l += Te, c += ce, N = _n(N).frameElement;
    }
  }
  return Fl({
    width: f,
    height: m,
    x: l,
    y: c
  });
}
function Ck(t) {
  let {
    rect: e,
    offsetParent: r,
    strategy: n
  } = t;
  const i = ti(r), s = gi(r);
  if (r === s)
    return e;
  let o = {
    scrollLeft: 0,
    scrollTop: 0
  }, a = zi(1);
  const l = zi(0);
  if ((i || !i && n !== "fixed") && ((Yi(r) !== "body" || Ia(s)) && (o = $c(r)), ti(r))) {
    const c = hs(r);
    a = Bs(r), l.x = c.x + r.clientLeft, l.y = c.y + r.clientTop;
  }
  return {
    width: e.width * a.x,
    height: e.height * a.y,
    x: e.x * a.x - o.scrollLeft * a.x + l.x,
    y: e.y * a.y - o.scrollTop * a.y + l.y
  };
}
function wk(t) {
  return Array.from(t.getClientRects());
}
function kS(t) {
  return hs(gi(t)).left + $c(t).scrollLeft;
}
function Ak(t) {
  const e = gi(t), r = $c(t), n = t.ownerDocument.body, i = un(e.scrollWidth, e.clientWidth, n.scrollWidth, n.clientWidth), s = un(e.scrollHeight, e.clientHeight, n.scrollHeight, n.clientHeight);
  let o = -r.scrollLeft + kS(t);
  const a = -r.scrollTop;
  return An(n).direction === "rtl" && (o += un(e.clientWidth, n.clientWidth) - i), {
    width: i,
    height: s,
    x: o,
    y: a
  };
}
function Rk(t, e) {
  const r = _n(t), n = gi(t), i = r.visualViewport;
  let s = n.clientWidth, o = n.clientHeight, a = 0, l = 0;
  if (i) {
    s = i.width, o = i.height;
    const c = Mh();
    (!c || c && e === "fixed") && (a = i.offsetLeft, l = i.offsetTop);
  }
  return {
    width: s,
    height: o,
    x: a,
    y: l
  };
}
function xk(t, e) {
  const r = hs(t, !0, e === "fixed"), n = r.top + t.clientTop, i = r.left + t.clientLeft, s = ti(t) ? Bs(t) : zi(1), o = t.clientWidth * s.x, a = t.clientHeight * s.y, l = i * s.x, c = n * s.y;
  return {
    width: o,
    height: a,
    x: l,
    y: c
  };
}
function F0(t, e, r) {
  let n;
  if (e === "viewport")
    n = Rk(t, r);
  else if (e === "document")
    n = Ak(gi(t));
  else if (di(e))
    n = xk(e, r);
  else {
    const i = NS(t);
    n = {
      ...e,
      x: e.x - i.x,
      y: e.y - i.y
    };
  }
  return Fl(n);
}
function IS(t, e) {
  const r = js(t);
  return r === e || !di(r) || gc(r) ? !1 : An(r).position === "fixed" || IS(r, e);
}
function Nk(t, e) {
  const r = e.get(t);
  if (r)
    return r;
  let n = ia(t, [], !1).filter((a) => di(a) && Yi(a) !== "body"), i = null;
  const s = An(t).position === "fixed";
  let o = s ? js(t) : t;
  for (; di(o) && !gc(o); ) {
    const a = An(o), l = Dh(o);
    !l && a.position === "fixed" && (i = null), (s ? !l && !i : !l && a.position === "static" && !!i && ["absolute", "fixed"].includes(i.position) || Ia(o) && !l && IS(t, o)) ? n = n.filter((f) => f !== o) : i = a, o = js(o);
  }
  return e.set(t, n), n;
}
function kk(t) {
  let {
    element: e,
    boundary: r,
    rootBoundary: n,
    strategy: i
  } = t;
  const o = [...r === "clippingAncestors" ? Nk(e, this._c) : [].concat(r), n], a = o[0], l = o.reduce((c, f) => {
    const m = F0(e, f, i);
    return c.top = un(m.top, c.top), c.right = qi(m.right, c.right), c.bottom = qi(m.bottom, c.bottom), c.left = un(m.left, c.left), c;
  }, F0(e, a, i));
  return {
    width: l.right - l.left,
    height: l.bottom - l.top,
    x: l.left,
    y: l.top
  };
}
function Ik(t) {
  const {
    width: e,
    height: r
  } = xS(t);
  return {
    width: e,
    height: r
  };
}
function Ok(t, e, r) {
  const n = ti(e), i = gi(e), s = r === "fixed", o = hs(t, !0, s, e);
  let a = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const l = zi(0);
  if (n || !n && !s)
    if ((Yi(e) !== "body" || Ia(i)) && (a = $c(e)), n) {
      const c = hs(e, !0, s, e);
      l.x = c.x + e.clientLeft, l.y = c.y + e.clientTop;
    } else
      i && (l.x = kS(i));
  return {
    x: o.left + a.scrollLeft - l.x,
    y: o.top + a.scrollTop - l.y,
    width: o.width,
    height: o.height
  };
}
function B0(t, e) {
  return !ti(t) || An(t).position === "fixed" ? null : e ? e(t) : t.offsetParent;
}
function OS(t, e) {
  const r = _n(t);
  if (!ti(t))
    return r;
  let n = B0(t, e);
  for (; n && vk(n) && An(n).position === "static"; )
    n = B0(n, e);
  return n && (Yi(n) === "html" || Yi(n) === "body" && An(n).position === "static" && !Dh(n)) ? r : n || Sk(t) || r;
}
const Dk = async function(t) {
  let {
    reference: e,
    floating: r,
    strategy: n
  } = t;
  const i = this.getOffsetParent || OS, s = this.getDimensions;
  return {
    reference: Ok(e, await i(r), n),
    floating: {
      x: 0,
      y: 0,
      ...await s(r)
    }
  };
};
function Mk(t) {
  return An(t).direction === "rtl";
}
const yl = {
  convertOffsetParentRelativeRectToViewportRelativeRect: Ck,
  getDocumentElement: gi,
  getClippingRect: kk,
  getOffsetParent: OS,
  getElementRects: Dk,
  getClientRects: wk,
  getDimensions: Ik,
  getScale: Bs,
  isElement: di,
  isRTL: Mk
};
function Lk(t, e) {
  let r = null, n;
  const i = gi(t);
  function s() {
    clearTimeout(n), r && r.disconnect(), r = null;
  }
  function o(a, l) {
    a === void 0 && (a = !1), l === void 0 && (l = 1), s();
    const {
      left: c,
      top: f,
      width: m,
      height: b
    } = t.getBoundingClientRect();
    if (a || e(), !m || !b)
      return;
    const C = Qa(f), N = Qa(i.clientWidth - (c + m)), z = Qa(i.clientHeight - (f + b)), A = Qa(c), Te = {
      rootMargin: -C + "px " + -N + "px " + -z + "px " + -A + "px",
      threshold: un(0, qi(1, l)) || 1
    };
    let ce = !0;
    function ge(Y) {
      const fe = Y[0].intersectionRatio;
      if (fe !== l) {
        if (!ce)
          return o();
        fe ? o(!1, fe) : n = setTimeout(() => {
          o(!1, 1e-7);
        }, 100);
      }
      ce = !1;
    }
    try {
      r = new IntersectionObserver(ge, {
        ...Te,
        // Handle <iframe>s
        root: i.ownerDocument
      });
    } catch {
      r = new IntersectionObserver(ge, Te);
    }
    r.observe(t);
  }
  return o(!0), s;
}
function Pk(t, e, r, n) {
  n === void 0 && (n = {});
  const {
    ancestorScroll: i = !0,
    ancestorResize: s = !0,
    elementResize: o = typeof ResizeObserver == "function",
    layoutShift: a = typeof IntersectionObserver == "function",
    animationFrame: l = !1
  } = n, c = Lh(t), f = i || s ? [...c ? ia(c) : [], ...ia(e)] : [];
  f.forEach((Q) => {
    i && Q.addEventListener("scroll", r, {
      passive: !0
    }), s && Q.addEventListener("resize", r);
  });
  const m = c && a ? Lk(c, r) : null;
  let b = -1, C = null;
  o && (C = new ResizeObserver((Q) => {
    let [Te] = Q;
    Te && Te.target === c && C && (C.unobserve(e), cancelAnimationFrame(b), b = requestAnimationFrame(() => {
      C && C.observe(e);
    })), r();
  }), c && !l && C.observe(c), C.observe(e));
  let N, z = l ? hs(t) : null;
  l && A();
  function A() {
    const Q = hs(t);
    z && (Q.x !== z.x || Q.y !== z.y || Q.width !== z.width || Q.height !== z.height) && r(), z = Q, N = requestAnimationFrame(A);
  }
  return r(), () => {
    f.forEach((Q) => {
      i && Q.removeEventListener("scroll", r), s && Q.removeEventListener("resize", r);
    }), m && m(), C && C.disconnect(), C = null, l && cancelAnimationFrame(N);
  };
}
const Fk = bk, Bk = mk, U0 = Ek, Uk = hk, qk = (t, e, r) => {
  const n = /* @__PURE__ */ new Map(), i = {
    platform: yl,
    ...r
  }, s = {
    ...i.platform,
    _c: n
  };
  return _k(t, e, {
    ...i,
    platform: s
  });
};
function zk(t) {
  return Gk(t);
}
function Rp(t) {
  return t.assignedSlot ? t.assignedSlot : t.parentNode instanceof ShadowRoot ? t.parentNode.host : t.parentNode;
}
function Gk(t) {
  for (let e = t; e; e = Rp(e))
    if (e instanceof Element && getComputedStyle(e).display === "none")
      return null;
  for (let e = Rp(t); e; e = Rp(e)) {
    if (!(e instanceof Element))
      continue;
    const r = getComputedStyle(e);
    if (r.display !== "contents" && (r.position !== "static" || r.filter !== "none" || e.tagName === "BODY"))
      return e;
  }
  return null;
}
function Yk(t) {
  return t !== null && typeof t == "object" && "getBoundingClientRect" in t;
}
var rr = class extends gr {
  constructor() {
    super(...arguments), this.active = !1, this.placement = "top", this.strategy = "absolute", this.distance = 0, this.skidding = 0, this.arrow = !1, this.arrowPlacement = "anchor", this.arrowPadding = 10, this.flip = !1, this.flipFallbackPlacements = "", this.flipFallbackStrategy = "best-fit", this.flipPadding = 0, this.shift = !1, this.shiftPadding = 0, this.autoSizePadding = 0;
  }
  async connectedCallback() {
    super.connectedCallback(), await this.updateComplete, this.start();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.stop();
  }
  async updated(t) {
    super.updated(t), t.has("active") && (this.active ? this.start() : this.stop()), t.has("anchor") && this.handleAnchorChange(), this.active && (await this.updateComplete, this.reposition());
  }
  async handleAnchorChange() {
    if (await this.stop(), this.anchor && typeof this.anchor == "string") {
      const t = this.getRootNode();
      this.anchorEl = t.getElementById(this.anchor);
    } else
      this.anchor instanceof Element || Yk(this.anchor) ? this.anchorEl = this.anchor : this.anchorEl = this.querySelector('[slot="anchor"]');
    this.anchorEl instanceof HTMLSlotElement && (this.anchorEl = this.anchorEl.assignedElements({ flatten: !0 })[0]), this.anchorEl && this.start();
  }
  start() {
    this.anchorEl && (this.cleanup = Pk(this.anchorEl, this.popup, () => {
      this.reposition();
    }));
  }
  async stop() {
    return new Promise((t) => {
      this.cleanup ? (this.cleanup(), this.cleanup = void 0, this.removeAttribute("data-current-placement"), this.style.removeProperty("--auto-size-available-width"), this.style.removeProperty("--auto-size-available-height"), requestAnimationFrame(() => t())) : t();
    });
  }
  /** Forces the popup to recalculate and reposition itself. */
  reposition() {
    if (!this.active || !this.anchorEl)
      return;
    const t = [
      // The offset middleware goes first
      $k({ mainAxis: this.distance, crossAxis: this.skidding })
    ];
    this.sync ? t.push(
      U0({
        apply: ({ rects: r }) => {
          const n = this.sync === "width" || this.sync === "both", i = this.sync === "height" || this.sync === "both";
          this.popup.style.width = n ? `${r.reference.width}px` : "", this.popup.style.height = i ? `${r.reference.height}px` : "";
        }
      })
    ) : (this.popup.style.width = "", this.popup.style.height = ""), this.flip && t.push(
      Bk({
        boundary: this.flipBoundary,
        // @ts-expect-error - We're converting a string attribute to an array here
        fallbackPlacements: this.flipFallbackPlacements,
        fallbackStrategy: this.flipFallbackStrategy === "best-fit" ? "bestFit" : "initialPlacement",
        padding: this.flipPadding
      })
    ), this.shift && t.push(
      Fk({
        boundary: this.shiftBoundary,
        padding: this.shiftPadding
      })
    ), this.autoSize ? t.push(
      U0({
        boundary: this.autoSizeBoundary,
        padding: this.autoSizePadding,
        apply: ({ availableWidth: r, availableHeight: n }) => {
          this.autoSize === "vertical" || this.autoSize === "both" ? this.style.setProperty("--auto-size-available-height", `${n}px`) : this.style.removeProperty("--auto-size-available-height"), this.autoSize === "horizontal" || this.autoSize === "both" ? this.style.setProperty("--auto-size-available-width", `${r}px`) : this.style.removeProperty("--auto-size-available-width");
        }
      })
    ) : (this.style.removeProperty("--auto-size-available-width"), this.style.removeProperty("--auto-size-available-height")), this.arrow && t.push(
      Uk({
        element: this.arrowEl,
        padding: this.arrowPadding
      })
    );
    const e = this.strategy === "absolute" ? (r) => yl.getOffsetParent(r, zk) : yl.getOffsetParent;
    qk(this.anchorEl, this.popup, {
      placement: this.placement,
      middleware: t,
      strategy: this.strategy,
      platform: Aa(Xi({}, yl), {
        getOffsetParent: e
      })
    }).then(({ x: r, y: n, middlewareData: i, placement: s }) => {
      const o = getComputedStyle(this).direction === "rtl", a = { top: "bottom", right: "left", bottom: "top", left: "right" }[s.split("-")[0]];
      if (this.setAttribute("data-current-placement", s), Object.assign(this.popup.style, {
        left: `${r}px`,
        top: `${n}px`
      }), this.arrow) {
        const l = i.arrow.x, c = i.arrow.y;
        let f = "", m = "", b = "", C = "";
        if (this.arrowPlacement === "start") {
          const N = typeof l == "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "";
          f = typeof c == "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "", m = o ? N : "", C = o ? "" : N;
        } else if (this.arrowPlacement === "end") {
          const N = typeof l == "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "";
          m = o ? "" : N, C = o ? N : "", b = typeof c == "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "";
        } else
          this.arrowPlacement === "center" ? (C = typeof l == "number" ? "calc(50% - var(--arrow-size-diagonal))" : "", f = typeof c == "number" ? "calc(50% - var(--arrow-size-diagonal))" : "") : (C = typeof l == "number" ? `${l}px` : "", f = typeof c == "number" ? `${c}px` : "");
        Object.assign(this.arrowEl.style, {
          top: f,
          right: m,
          bottom: b,
          left: C,
          [a]: "calc(var(--arrow-size-diagonal) * -1)"
        });
      }
    }), this.emit("sl-reposition");
  }
  render() {
    return Ct`
      <slot name="anchor" @slotchange=${this.handleAnchorChange}></slot>

      <div
        part="popup"
        class=${Ur({
      popup: !0,
      "popup--active": this.active,
      "popup--fixed": this.strategy === "fixed",
      "popup--has-arrow": this.arrow
    })}
      >
        <slot></slot>
        ${this.arrow ? Ct`<div part="arrow" class="popup__arrow" role="presentation"></div>` : ""}
      </div>
    `;
  }
};
rr.styles = ok;
ct([
  Ht(".popup")
], rr.prototype, "popup", 2);
ct([
  Ht(".popup__arrow")
], rr.prototype, "arrowEl", 2);
ct([
  ut()
], rr.prototype, "anchor", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], rr.prototype, "active", 2);
ct([
  ut({ reflect: !0 })
], rr.prototype, "placement", 2);
ct([
  ut({ reflect: !0 })
], rr.prototype, "strategy", 2);
ct([
  ut({ type: Number })
], rr.prototype, "distance", 2);
ct([
  ut({ type: Number })
], rr.prototype, "skidding", 2);
ct([
  ut({ type: Boolean })
], rr.prototype, "arrow", 2);
ct([
  ut({ attribute: "arrow-placement" })
], rr.prototype, "arrowPlacement", 2);
ct([
  ut({ attribute: "arrow-padding", type: Number })
], rr.prototype, "arrowPadding", 2);
ct([
  ut({ type: Boolean })
], rr.prototype, "flip", 2);
ct([
  ut({
    attribute: "flip-fallback-placements",
    converter: {
      fromAttribute: (t) => t.split(" ").map((e) => e.trim()).filter((e) => e !== ""),
      toAttribute: (t) => t.join(" ")
    }
  })
], rr.prototype, "flipFallbackPlacements", 2);
ct([
  ut({ attribute: "flip-fallback-strategy" })
], rr.prototype, "flipFallbackStrategy", 2);
ct([
  ut({ type: Object })
], rr.prototype, "flipBoundary", 2);
ct([
  ut({ attribute: "flip-padding", type: Number })
], rr.prototype, "flipPadding", 2);
ct([
  ut({ type: Boolean })
], rr.prototype, "shift", 2);
ct([
  ut({ type: Object })
], rr.prototype, "shiftBoundary", 2);
ct([
  ut({ attribute: "shift-padding", type: Number })
], rr.prototype, "shiftPadding", 2);
ct([
  ut({ attribute: "auto-size" })
], rr.prototype, "autoSize", 2);
ct([
  ut()
], rr.prototype, "sync", 2);
ct([
  ut({ type: Object })
], rr.prototype, "autoSizeBoundary", 2);
ct([
  ut({ attribute: "auto-size-padding", type: Number })
], rr.prototype, "autoSizePadding", 2);
var Xr = class extends gr {
  constructor() {
    super(...arguments), this.localize = new ii(this), this.open = !1, this.placement = "bottom-start", this.disabled = !1, this.stayOpenOnSelect = !1, this.distance = 0, this.skidding = 0, this.hoist = !1, this.handleKeyDown = (t) => {
      this.open && t.key === "Escape" && (t.stopPropagation(), this.hide(), this.focusOnTrigger());
    }, this.handleDocumentKeyDown = (t) => {
      var e;
      if (t.key === "Escape" && this.open) {
        t.stopPropagation(), this.focusOnTrigger(), this.hide();
        return;
      }
      if (t.key === "Tab") {
        if (this.open && ((e = document.activeElement) == null ? void 0 : e.tagName.toLowerCase()) === "sl-menu-item") {
          t.preventDefault(), this.hide(), this.focusOnTrigger();
          return;
        }
        setTimeout(() => {
          var r, n, i;
          const s = ((r = this.containingElement) == null ? void 0 : r.getRootNode()) instanceof ShadowRoot ? (i = (n = document.activeElement) == null ? void 0 : n.shadowRoot) == null ? void 0 : i.activeElement : document.activeElement;
          (!this.containingElement || (s == null ? void 0 : s.closest(this.containingElement.tagName.toLowerCase())) !== this.containingElement) && this.hide();
        });
      }
    }, this.handleDocumentMouseDown = (t) => {
      const e = t.composedPath();
      this.containingElement && !e.includes(this.containingElement) && this.hide();
    }, this.handlePanelSelect = (t) => {
      const e = t.target;
      !this.stayOpenOnSelect && e.tagName.toLowerCase() === "sl-menu" && (this.hide(), this.focusOnTrigger());
    };
  }
  connectedCallback() {
    super.connectedCallback(), this.containingElement || (this.containingElement = this);
  }
  firstUpdated() {
    this.panel.hidden = !this.open, this.open && (this.addOpenListeners(), this.popup.active = !0);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeOpenListeners(), this.hide();
  }
  focusOnTrigger() {
    const t = this.trigger.assignedElements({ flatten: !0 })[0];
    typeof (t == null ? void 0 : t.focus) == "function" && t.focus();
  }
  getMenu() {
    return this.panel.assignedElements({ flatten: !0 }).find((t) => t.tagName.toLowerCase() === "sl-menu");
  }
  handleTriggerClick() {
    this.open ? this.hide() : (this.show(), this.focusOnTrigger());
  }
  async handleTriggerKeyDown(t) {
    if ([" ", "Enter"].includes(t.key)) {
      t.preventDefault(), this.handleTriggerClick();
      return;
    }
    const e = this.getMenu();
    if (e) {
      const r = e.getAllItems(), n = r[0], i = r[r.length - 1];
      ["ArrowDown", "ArrowUp", "Home", "End"].includes(t.key) && (t.preventDefault(), this.open || (this.show(), await this.updateComplete), r.length > 0 && this.updateComplete.then(() => {
        (t.key === "ArrowDown" || t.key === "Home") && (e.setCurrentItem(n), n.focus()), (t.key === "ArrowUp" || t.key === "End") && (e.setCurrentItem(i), i.focus());
      }));
    }
  }
  handleTriggerKeyUp(t) {
    t.key === " " && t.preventDefault();
  }
  handleTriggerSlotChange() {
    this.updateAccessibleTrigger();
  }
  //
  // Slotted triggers can be arbitrary content, but we need to link them to the dropdown panel with `aria-haspopup` and
  // `aria-expanded`. These must be applied to the "accessible trigger" (the tabbable portion of the trigger element
  // that gets slotted in) so screen readers will understand them. The accessible trigger could be the slotted element,
  // a child of the slotted element, or an element in the slotted element's shadow root.
  //
  // For example, the accessible trigger of an <sl-button> is a <button> located inside its shadow root.
  //
  // To determine this, we assume the first tabbable element in the trigger slot is the "accessible trigger."
  //
  updateAccessibleTrigger() {
    const e = this.trigger.assignedElements({ flatten: !0 }).find((n) => ik(n).start);
    let r;
    if (e) {
      switch (e.tagName.toLowerCase()) {
        case "sl-button":
        case "sl-icon-button":
          r = e.button;
          break;
        default:
          r = e;
      }
      r.setAttribute("aria-haspopup", "true"), r.setAttribute("aria-expanded", this.open ? "true" : "false");
    }
  }
  /** Shows the dropdown panel. */
  async show() {
    if (!this.open)
      return this.open = !0, Fi(this, "sl-after-show");
  }
  /** Hides the dropdown panel */
  async hide() {
    if (this.open)
      return this.open = !1, Fi(this, "sl-after-hide");
  }
  /**
   * Instructs the dropdown menu to reposition. Useful when the position or size of the trigger changes when the menu
   * is activated.
   */
  reposition() {
    this.popup.reposition();
  }
  addOpenListeners() {
    this.panel.addEventListener("sl-select", this.handlePanelSelect), this.panel.addEventListener("keydown", this.handleKeyDown), document.addEventListener("keydown", this.handleDocumentKeyDown), document.addEventListener("mousedown", this.handleDocumentMouseDown);
  }
  removeOpenListeners() {
    this.panel && (this.panel.removeEventListener("sl-select", this.handlePanelSelect), this.panel.removeEventListener("keydown", this.handleKeyDown)), document.removeEventListener("keydown", this.handleDocumentKeyDown), document.removeEventListener("mousedown", this.handleDocumentMouseDown);
  }
  async handleOpenChange() {
    if (this.disabled) {
      this.open = !1;
      return;
    }
    if (this.updateAccessibleTrigger(), this.open) {
      this.emit("sl-show"), this.addOpenListeners(), await Ui(this), this.panel.hidden = !1, this.popup.active = !0;
      const { keyframes: t, options: e } = Pi(this, "dropdown.show", { dir: this.localize.dir() });
      await Bi(this.popup.popup, t, e), this.emit("sl-after-show");
    } else {
      this.emit("sl-hide"), this.removeOpenListeners(), await Ui(this);
      const { keyframes: t, options: e } = Pi(this, "dropdown.hide", { dir: this.localize.dir() });
      await Bi(this.popup.popup, t, e), this.panel.hidden = !0, this.popup.active = !1, this.emit("sl-after-hide");
    }
  }
  render() {
    return Ct`
      <sl-popup
        part="base"
        id="dropdown"
        placement=${this.placement}
        distance=${this.distance}
        skidding=${this.skidding}
        strategy=${this.hoist ? "fixed" : "absolute"}
        flip
        shift
        auto-size="vertical"
        auto-size-padding="10"
        class=${Ur({
      dropdown: !0,
      "dropdown--open": this.open
    })}
      >
        <slot
          name="trigger"
          slot="anchor"
          part="trigger"
          class="dropdown__trigger"
          @click=${this.handleTriggerClick}
          @keydown=${this.handleTriggerKeyDown}
          @keyup=${this.handleTriggerKeyUp}
          @slotchange=${this.handleTriggerSlotChange}
        ></slot>

        <div aria-hidden=${this.open ? "false" : "true"} aria-labelledby="dropdown">
          <slot part="panel" class="dropdown__panel"></slot>
        </div>
      </sl-popup>
    `;
  }
};
Xr.styles = tk;
Xr.dependencies = { "sl-popup": rr };
ct([
  Ht(".dropdown")
], Xr.prototype, "popup", 2);
ct([
  Ht(".dropdown__trigger")
], Xr.prototype, "trigger", 2);
ct([
  Ht(".dropdown__panel")
], Xr.prototype, "panel", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], Xr.prototype, "open", 2);
ct([
  ut({ reflect: !0 })
], Xr.prototype, "placement", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], Xr.prototype, "disabled", 2);
ct([
  ut({ attribute: "stay-open-on-select", type: Boolean, reflect: !0 })
], Xr.prototype, "stayOpenOnSelect", 2);
ct([
  ut({ attribute: !1 })
], Xr.prototype, "containingElement", 2);
ct([
  ut({ type: Number })
], Xr.prototype, "distance", 2);
ct([
  ut({ type: Number })
], Xr.prototype, "skidding", 2);
ct([
  ut({ type: Boolean })
], Xr.prototype, "hoist", 2);
ct([
  _r("open", { waitUntilFirstUpdate: !0 })
], Xr.prototype, "handleOpenChange", 1);
Zi("dropdown.show", {
  keyframes: [
    { opacity: 0, scale: 0.9 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 100, easing: "ease" }
});
Zi("dropdown.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.9 }
  ],
  options: { duration: 100, easing: "ease" }
});
Xr.define("sl-dropdown");
var Hk = Kt`
  ${wr}

  :host {
    --submenu-offset: -2px;

    /* Private */
    --safe-triangle-cursor-x: 0;
    --safe-triangle-cursor-y: 0;
    --safe-triangle-submenu-start-x: 0;
    --safe-triangle-submenu-start-y: 0;
    --safe-triangle-submenu-end-x: 0;
    --safe-triangle-submenu-end-y: 0;

    display: block;
  }

  :host([inert]) {
    display: none;
  }

  .menu-item {
    position: relative;
    display: flex;
    align-items: stretch;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-letter-spacing-normal);
    color: var(--sl-color-neutral-700);
    padding: var(--sl-spacing-2x-small) var(--sl-spacing-2x-small);
    transition: var(--sl-transition-fast) fill;
    user-select: none;
    -webkit-user-select: none;
    white-space: nowrap;
    cursor: pointer;
  }

  .menu-item.menu-item--disabled {
    outline: none;
    opacity: 0.5;
    cursor: not-allowed;
  }

  .menu-item .menu-item__label {
    flex: 1 1 auto;
    display: inline-block;
    text-overflow: ellipsis;
    overflow: hidden;
  }

  .menu-item .menu-item__prefix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .menu-item .menu-item__prefix::slotted(*) {
    margin-inline-end: var(--sl-spacing-x-small);
  }

  .menu-item .menu-item__suffix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .menu-item .menu-item__suffix::slotted(*) {
    margin-inline-start: var(--sl-spacing-x-small);
  }

  /* Safe triangle */
  .menu-item--submenu-expanded::after {
    content: '';
    position: fixed;
    z-index: calc(var(--sl-z-index-dropdown) - 1);
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    clip-path: polygon(
      var(--safe-triangle-cursor-x) var(--safe-triangle-cursor-y),
      var(--safe-triangle-submenu-start-x) var(--safe-triangle-submenu-start-y),
      var(--safe-triangle-submenu-end-x) var(--safe-triangle-submenu-end-y)
    );
  }

  :host(:focus-visible) {
    outline: none;
  }

  :host(:hover:not([aria-disabled='true'], :focus-visible)) .menu-item,
  .menu-item--submenu-expanded {
    background-color: var(--sl-color-neutral-100);
    color: var(--sl-color-neutral-1000);
  }

  :host(:focus-visible) .menu-item {
    outline: none;
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
    opacity: 1;
  }

  .menu-item .menu-item__check,
  .menu-item .menu-item__chevron {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.5em;
    visibility: hidden;
  }

  .menu-item--checked .menu-item__check,
  .menu-item--has-submenu .menu-item__chevron {
    visibility: visible;
  }

  /* Add elevation and z-index to submenus */
  sl-popup::part(popup) {
    box-shadow: var(--sl-shadow-large);
    z-index: var(--sl-z-index-dropdown);
    margin-left: var(--submenu-offset);
  }

  .menu-item--rtl sl-popup::part(popup) {
    margin-left: calc(-1 * var(--submenu-offset));
  }

  @media (forced-colors: active) {
    :host(:hover:not([aria-disabled='true'])) .menu-item,
    :host(:focus-visible) .menu-item {
      outline: dashed 1px SelectedItem;
      outline-offset: -1px;
    }
  }
`;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Lo = (t, e) => {
  var n;
  const r = t._$AN;
  if (r === void 0)
    return !1;
  for (const i of r)
    (n = i._$AO) == null || n.call(i, e, !1), Lo(i, e);
  return !0;
}, Bl = (t) => {
  let e, r;
  do {
    if ((e = t._$AM) === void 0)
      break;
    r = e._$AN, r.delete(t), t = e;
  } while ((r == null ? void 0 : r.size) === 0);
}, DS = (t) => {
  for (let e; e = t._$AM; t = e) {
    let r = e._$AN;
    if (r === void 0)
      e._$AN = r = /* @__PURE__ */ new Set();
    else if (r.has(t))
      break;
    r.add(t), Kk(e);
  }
};
function Vk(t) {
  this._$AN !== void 0 ? (Bl(this), this._$AM = t, DS(this)) : this._$AM = t;
}
function Wk(t, e = !1, r = 0) {
  const n = this._$AH, i = this._$AN;
  if (i !== void 0 && i.size !== 0)
    if (e)
      if (Array.isArray(n))
        for (let s = r; s < n.length; s++)
          Lo(n[s], !1), Bl(n[s]);
      else
        n != null && (Lo(n, !1), Bl(n));
    else
      Lo(this, t);
}
const Kk = (t) => {
  t.type == ci.CHILD && (t._$AP ?? (t._$AP = Wk), t._$AQ ?? (t._$AQ = Vk));
};
class Qk extends hc {
  constructor() {
    super(...arguments), this._$AN = void 0;
  }
  _$AT(e, r, n) {
    super._$AT(e, r, n), DS(this), this.isConnected = e._$AU;
  }
  _$AO(e, r = !0) {
    var n, i;
    e !== this.isConnected && (this.isConnected = e, e ? (n = this.reconnected) == null || n.call(this) : (i = this.disconnected) == null || i.call(this)), r && (Lo(this, e), Bl(this));
  }
  setValue(e) {
    if (cS(this._$Ct))
      this._$Ct._$AI(e, this);
    else {
      const r = [...this._$Ct._$AH];
      r[this._$Ci] = e, this._$Ct._$AI(r, this, 0);
    }
  }
  disconnected() {
  }
  reconnected() {
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const jk = () => new Xk();
class Xk {
}
const xp = /* @__PURE__ */ new WeakMap(), Zk = _c(class extends Qk {
  render(t) {
    return ur;
  }
  update(t, [e]) {
    var n;
    const r = e !== this.G;
    return r && this.G !== void 0 && this.ot(void 0), (r || this.rt !== this.lt) && (this.G = e, this.ct = (n = t.options) == null ? void 0 : n.host, this.ot(this.lt = t.element)), ur;
  }
  ot(t) {
    if (typeof this.G == "function") {
      const e = this.ct ?? globalThis;
      let r = xp.get(e);
      r === void 0 && (r = /* @__PURE__ */ new WeakMap(), xp.set(e, r)), r.get(this.G) !== void 0 && this.G.call(this.ct, void 0), r.set(this.G, t), t !== void 0 && this.G.call(this.ct, t);
    } else
      this.G.value = t;
  }
  get rt() {
    var t, e;
    return typeof this.G == "function" ? (t = xp.get(this.ct ?? globalThis)) == null ? void 0 : t.get(this.G) : (e = this.G) == null ? void 0 : e.value;
  }
  disconnected() {
    this.rt === this.lt && this.ot(void 0);
  }
  reconnected() {
    this.ot(this.lt);
  }
});
var Jk = class {
  constructor(t, e, r) {
    this.popupRef = jk(), this.enableSubmenuTimer = -1, this.isConnected = !1, this.isPopupConnected = !1, this.skidding = 0, this.submenuOpenDelay = 100, this.handleMouseMove = (n) => {
      this.host.style.setProperty("--safe-triangle-cursor-x", `${n.clientX}px`), this.host.style.setProperty("--safe-triangle-cursor-y", `${n.clientY}px`);
    }, this.handleMouseOver = () => {
      this.hasSlotController.test("submenu") && this.enableSubmenu();
    }, this.handleKeyDown = (n) => {
      switch (n.key) {
        case "Escape":
        case "Tab":
          this.disableSubmenu();
          break;
        case "ArrowLeft":
          n.target !== this.host && (n.preventDefault(), n.stopPropagation(), this.host.focus(), this.disableSubmenu());
          break;
        case "ArrowRight":
        case "Enter":
        case " ":
          this.handleSubmenuEntry(n);
          break;
      }
    }, this.handleClick = (n) => {
      var i;
      n.target === this.host ? (n.preventDefault(), n.stopPropagation()) : n.target instanceof Element && (n.target.tagName === "sl-menu-item" || (i = n.target.role) != null && i.startsWith("menuitem")) && this.disableSubmenu();
    }, this.handleFocusOut = (n) => {
      n.relatedTarget && n.relatedTarget instanceof Element && this.host.contains(n.relatedTarget) || this.disableSubmenu();
    }, this.handlePopupMouseover = (n) => {
      n.stopPropagation();
    }, this.handlePopupReposition = () => {
      const n = this.host.renderRoot.querySelector("slot[name='submenu']"), i = n == null ? void 0 : n.assignedElements({ flatten: !0 }).filter((f) => f.localName === "sl-menu")[0], s = this.localize.dir() === "rtl";
      if (!i)
        return;
      const { left: o, top: a, width: l, height: c } = i.getBoundingClientRect();
      this.host.style.setProperty("--safe-triangle-submenu-start-x", `${s ? o + l : o}px`), this.host.style.setProperty("--safe-triangle-submenu-start-y", `${a}px`), this.host.style.setProperty("--safe-triangle-submenu-end-x", `${s ? o + l : o}px`), this.host.style.setProperty("--safe-triangle-submenu-end-y", `${a + c}px`);
    }, (this.host = t).addController(this), this.hasSlotController = e, this.localize = r;
  }
  hostConnected() {
    this.hasSlotController.test("submenu") && !this.host.disabled && this.addListeners();
  }
  hostDisconnected() {
    this.removeListeners();
  }
  hostUpdated() {
    this.hasSlotController.test("submenu") && !this.host.disabled ? (this.addListeners(), this.updateSkidding()) : this.removeListeners();
  }
  addListeners() {
    this.isConnected || (this.host.addEventListener("mousemove", this.handleMouseMove), this.host.addEventListener("mouseover", this.handleMouseOver), this.host.addEventListener("keydown", this.handleKeyDown), this.host.addEventListener("click", this.handleClick), this.host.addEventListener("focusout", this.handleFocusOut), this.isConnected = !0), this.isPopupConnected || this.popupRef.value && (this.popupRef.value.addEventListener("mouseover", this.handlePopupMouseover), this.popupRef.value.addEventListener("sl-reposition", this.handlePopupReposition), this.isPopupConnected = !0);
  }
  removeListeners() {
    this.isConnected && (this.host.removeEventListener("mousemove", this.handleMouseMove), this.host.removeEventListener("mouseover", this.handleMouseOver), this.host.removeEventListener("keydown", this.handleKeyDown), this.host.removeEventListener("click", this.handleClick), this.host.removeEventListener("focusout", this.handleFocusOut), this.isConnected = !1), this.isPopupConnected && this.popupRef.value && (this.popupRef.value.removeEventListener("mouseover", this.handlePopupMouseover), this.popupRef.value.removeEventListener("sl-reposition", this.handlePopupReposition), this.isPopupConnected = !1);
  }
  handleSubmenuEntry(t) {
    const e = this.host.renderRoot.querySelector("slot[name='submenu']");
    if (!e) {
      console.error("Cannot activate a submenu if no corresponding menuitem can be found.", this);
      return;
    }
    let r = null;
    for (const n of e.assignedElements())
      if (r = n.querySelectorAll("sl-menu-item, [role^='menuitem']"), r.length !== 0)
        break;
    if (!(!r || r.length === 0)) {
      r[0].setAttribute("tabindex", "0");
      for (let n = 1; n !== r.length; ++n)
        r[n].setAttribute("tabindex", "-1");
      this.popupRef.value && (t.preventDefault(), t.stopPropagation(), this.popupRef.value.active ? r[0] instanceof HTMLElement && r[0].focus() : (this.enableSubmenu(!1), this.host.updateComplete.then(() => {
        r[0] instanceof HTMLElement && r[0].focus();
      }), this.host.requestUpdate()));
    }
  }
  setSubmenuState(t) {
    this.popupRef.value && this.popupRef.value.active !== t && (this.popupRef.value.active = t, this.host.requestUpdate());
  }
  // Shows the submenu. Supports disabling the opening delay, e.g. for keyboard events that want to set the focus to the
  // newly opened menu.
  enableSubmenu(t = !0) {
    t ? this.enableSubmenuTimer = window.setTimeout(() => {
      this.setSubmenuState(!0);
    }, this.submenuOpenDelay) : this.setSubmenuState(!0);
  }
  disableSubmenu() {
    clearTimeout(this.enableSubmenuTimer), this.setSubmenuState(!1);
  }
  // Calculate the space the top of a menu takes-up, for aligning the popup menu-item with the activating element.
  updateSkidding() {
    var t;
    if (!((t = this.host.parentElement) != null && t.computedStyleMap))
      return;
    const e = this.host.parentElement.computedStyleMap(), n = ["padding-top", "border-top-width", "margin-top"].reduce((i, s) => {
      var o;
      const a = (o = e.get(s)) != null ? o : new CSSUnitValue(0, "px"), c = (a instanceof CSSUnitValue ? a : new CSSUnitValue(0, "px")).to("px");
      return i - c.value;
    }, 0);
    this.skidding = n;
  }
  isExpanded() {
    return this.popupRef.value ? this.popupRef.value.active : !1;
  }
  renderSubmenu() {
    const t = this.localize.dir() === "ltr";
    return this.isConnected ? Ct`
      <sl-popup
        ${Zk(this.popupRef)}
        placement=${t ? "right-start" : "left-start"}
        anchor="anchor"
        flip
        flip-fallback-strategy="best-fit"
        skidding="${this.skidding}"
        strategy="fixed"
      >
        <slot name="submenu"></slot>
      </sl-popup>
    ` : Ct` <slot name="submenu" hidden></slot> `;
  }
}, kn = class extends gr {
  constructor() {
    super(...arguments), this.type = "normal", this.checked = !1, this.value = "", this.disabled = !1, this.localize = new ii(this), this.hasSlotController = new Ra(this, "submenu"), this.submenuController = new Jk(this, this.hasSlotController, this.localize), this.handleHostClick = (t) => {
      this.disabled && (t.preventDefault(), t.stopImmediatePropagation());
    }, this.handleMouseOver = (t) => {
      this.focus(), t.stopPropagation();
    };
  }
  connectedCallback() {
    super.connectedCallback(), this.addEventListener("click", this.handleHostClick), this.addEventListener("mouseover", this.handleMouseOver);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeEventListener("click", this.handleHostClick), this.removeEventListener("mouseover", this.handleMouseOver);
  }
  handleDefaultSlotChange() {
    const t = this.getTextLabel();
    if (typeof this.cachedTextLabel > "u") {
      this.cachedTextLabel = t;
      return;
    }
    t !== this.cachedTextLabel && (this.cachedTextLabel = t, this.emit("slotchange", { bubbles: !0, composed: !1, cancelable: !1 }));
  }
  handleCheckedChange() {
    if (this.checked && this.type !== "checkbox") {
      this.checked = !1, console.error('The checked attribute can only be used on menu items with type="checkbox"', this);
      return;
    }
    this.type === "checkbox" ? this.setAttribute("aria-checked", this.checked ? "true" : "false") : this.removeAttribute("aria-checked");
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  handleTypeChange() {
    this.type === "checkbox" ? (this.setAttribute("role", "menuitemcheckbox"), this.setAttribute("aria-checked", this.checked ? "true" : "false")) : (this.setAttribute("role", "menuitem"), this.removeAttribute("aria-checked"));
  }
  /** Returns a text label based on the contents of the menu item's default slot. */
  getTextLabel() {
    return VC(this.defaultSlot);
  }
  isSubmenu() {
    return this.hasSlotController.test("submenu");
  }
  render() {
    const t = this.localize.dir() === "rtl", e = this.submenuController.isExpanded();
    return Ct`
      <div
        id="anchor"
        part="base"
        class=${Ur({
      "menu-item": !0,
      "menu-item--rtl": t,
      "menu-item--checked": this.checked,
      "menu-item--disabled": this.disabled,
      "menu-item--has-submenu": this.isSubmenu(),
      "menu-item--submenu-expanded": e
    })}
        ?aria-haspopup="${this.isSubmenu()}"
        ?aria-expanded="${!!e}"
      >
        <span part="checked-icon" class="menu-item__check">
          <sl-icon name="check" library="system" aria-hidden="true"></sl-icon>
        </span>

        <slot name="prefix" part="prefix" class="menu-item__prefix"></slot>

        <slot part="label" class="menu-item__label" @slotchange=${this.handleDefaultSlotChange}></slot>

        <slot name="suffix" part="suffix" class="menu-item__suffix"></slot>

        <span part="submenu-icon" class="menu-item__chevron">
          <sl-icon name=${t ? "chevron-left" : "chevron-right"} library="system" aria-hidden="true"></sl-icon>
        </span>

        ${this.submenuController.renderSubmenu()}
      </div>
    `;
  }
};
kn.styles = Hk;
kn.dependencies = {
  "sl-icon": gn,
  "sl-popup": rr
};
ct([
  Ht("slot:not([name])")
], kn.prototype, "defaultSlot", 2);
ct([
  Ht(".menu-item")
], kn.prototype, "menuItem", 2);
ct([
  ut()
], kn.prototype, "type", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], kn.prototype, "checked", 2);
ct([
  ut()
], kn.prototype, "value", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], kn.prototype, "disabled", 2);
ct([
  _r("checked")
], kn.prototype, "handleCheckedChange", 1);
ct([
  _r("disabled")
], kn.prototype, "handleDisabledChange", 1);
ct([
  _r("type")
], kn.prototype, "handleTypeChange", 1);
kn.define("sl-menu-item");
var eI = Kt`
  ${wr}

  :host {
    display: block;
    position: relative;
    background: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-radius: var(--sl-border-radius-medium);
    padding: var(--sl-spacing-x-small) 0;
    overflow: auto;
    overscroll-behavior: none;
  }

  ::slotted(sl-divider) {
    --spacing: var(--sl-spacing-x-small);
  }
`, Ph = class extends gr {
  connectedCallback() {
    super.connectedCallback(), this.setAttribute("role", "menu");
  }
  handleClick(t) {
    const e = ["menuitem", "menuitemcheckbox"], r = t.composedPath().find((i) => {
      var s;
      return e.includes(((s = i == null ? void 0 : i.getAttribute) == null ? void 0 : s.call(i, "role")) || "");
    });
    if (!r)
      return;
    const n = r;
    n.type === "checkbox" && (n.checked = !n.checked), this.emit("sl-select", { detail: { item: n } });
  }
  handleKeyDown(t) {
    if (t.key === "Enter" || t.key === " ") {
      const e = this.getCurrentItem();
      t.preventDefault(), t.stopPropagation(), e == null || e.click();
    } else if (["ArrowDown", "ArrowUp", "Home", "End"].includes(t.key)) {
      const e = this.getAllItems(), r = this.getCurrentItem();
      let n = r ? e.indexOf(r) : 0;
      e.length > 0 && (t.preventDefault(), t.stopPropagation(), t.key === "ArrowDown" ? n++ : t.key === "ArrowUp" ? n-- : t.key === "Home" ? n = 0 : t.key === "End" && (n = e.length - 1), n < 0 && (n = e.length - 1), n > e.length - 1 && (n = 0), this.setCurrentItem(e[n]), e[n].focus());
    }
  }
  handleMouseDown(t) {
    const e = t.target;
    this.isMenuItem(e) && this.setCurrentItem(e);
  }
  handleSlotChange() {
    const t = this.getAllItems();
    t.length > 0 && this.setCurrentItem(t[0]);
  }
  isMenuItem(t) {
    var e;
    return t.tagName.toLowerCase() === "sl-menu-item" || ["menuitem", "menuitemcheckbox", "menuitemradio"].includes((e = t.getAttribute("role")) != null ? e : "");
  }
  /** @internal Gets all slotted menu items, ignoring dividers, headers, and other elements. */
  getAllItems() {
    return [...this.defaultSlot.assignedElements({ flatten: !0 })].filter((t) => !(t.inert || !this.isMenuItem(t)));
  }
  /**
   * @internal Gets the current menu item, which is the menu item that has `tabindex="0"` within the roving tab index.
   * The menu item may or may not have focus, but for keyboard interaction purposes it's considered the "active" item.
   */
  getCurrentItem() {
    return this.getAllItems().find((t) => t.getAttribute("tabindex") === "0");
  }
  /**
   * @internal Sets the current menu item to the specified element. This sets `tabindex="0"` on the target element and
   * `tabindex="-1"` to all other items. This method must be called prior to setting focus on a menu item.
   */
  setCurrentItem(t) {
    this.getAllItems().forEach((r) => {
      r.setAttribute("tabindex", r === t ? "0" : "-1");
    });
  }
  render() {
    return Ct`
      <slot
        @slotchange=${this.handleSlotChange}
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
        @mousedown=${this.handleMouseDown}
      ></slot>
    `;
  }
};
Ph.styles = eI;
ct([
  Ht("slot")
], Ph.prototype, "defaultSlot", 2);
Ph.define("sl-menu");
const tI = ":host{display:inline-block}.time.clock__time{margin:0 var(--sl-spacing-large)}sl-dropdown:not(.control)::part(panel){padding:var(--sl-spacing-small);background:var(--sl-panel-background-color);border:solid var(--sl-panel-border-width) var(--sl-panel-border-color);border-radius:var(--sl-border-radius-medium)}", MS = new Intl.DateTimeFormat().resolvedOptions().locale;
function rI(t = MS) {
  return (/* @__PURE__ */ new Date()).toLocaleDateString(t, {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric"
  });
}
function q0(t = MS) {
  return (/* @__PURE__ */ new Date()).toLocaleTimeString(t, {
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit"
  });
}
var nI = Object.defineProperty, iI = Object.getOwnPropertyDescriptor, Ss = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? iI(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && nI(e, r, i), i;
};
const Yo = class Yo extends hn {
  constructor() {
    super(...arguments), this._state = 3, this._time = q0(), this.date = !1, this.time = !1, this.size = "small";
  }
  /**
   * Le nom courant de l'élément : `Horloge`.
   */
  get tagTitle() {
    return "Horloge";
  }
  firstUpdated(e) {
    const r = this;
    setInterval(() => r.setClock(), 1e3);
  }
  handleClickButton() {
    switch (this._state = (this._state + 1) % 4, this._state) {
      case 0:
        this.date = !1, this.time = !0;
        break;
      case 1:
        this.date = !0, this.time = !0;
        break;
      case 2:
        this.date = !0, this.time = !1;
        break;
      case 3:
        this.date = !1, this.time = !1;
        break;
    }
  }
  render() {
    const e = ["small", "medium", "large"].includes(this.size) ? this.size : "small";
    return Ct`
      <sl-button part="base" size=${e} @click=${() => this.handleClickButton()}>
        <span class="clock__date">${this.date ? Ct`${rI()}` : Ct``}</span>
        <it-mdi-calendar-clock-outline></it-mdi-calendar-clock-outline>
        <span class="clock__time">${this.time ? Ct`${this._time}` : Ct``}</span>
      </sl-button>
    `;
  }
  setClock() {
    this._time = q0();
  }
  /**
   * Syntaxe `asciidoc` équivalente :
   *
   * ```
   * name:target[attributes]
   * ```
   *
   * - `name` : `clock-it` (la macro `asciidoc` a le même nom que l'élément `html` correspondant);
   * - `target` : la macro `clock-it` n'a pas de cible (_target_);
   * - `attributes` : `hide-date`, `hide-time`, `size`.
   *
   * Voir la documentation Asciidoc sur les <a href="https://docs.asciidoctor.org/asciidoc/latest/key-concepts/#macros">macros de type _inline_</a>
   * 
   * @examples
   * `clock-it:[]`, 
   * `clock-it:[date]`, 
   * `clock-it:[date, size=medium]`
   */
  toAsciidoc() {
    const e = {
      date: this.date,
      time: this.time
    }, r = [`size=${this.size}`];
    for (const n of Object.keys(e))
      e[n] && r.push(n);
    return `clock-it:[${r.join(",")}]`;
  }
};
Yo.styles = [
  on(Yo, Yo, "styles"),
  jr(tI),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: icons */
it-mdi-calendar-clock-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M6 1v2H5c-1.11 0-2 .89-2 2v14a2 2 0 0 0 2 2h6.1c1.26 1.24 2.99 2 4.9 2c3.87 0 7-3.13 7-7c0-1.91-.76-3.64-2-4.9V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1M5 5h14v2H5m0 2h14v.67c-.91-.43-1.93-.67-3-.67c-3.87 0-7 3.13-7 7c0 1.07.24 2.09.67 3H5m11-7.85c2.68 0 4.85 2.17 4.85 4.85c0 2.68-2.17 4.85-4.85 4.85c-2.68 0-4.85-2.17-4.85-4.85c0-2.68 2.17-4.85 4.85-4.85M15 13v3.69l3.19 1.84l.75-1.3l-2.44-1.41V13Z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
/* layer: default */
.static{position:static;}`
];
let ri = Yo;
Ss([
  Gr()
], ri.prototype, "_time", 2);
Ss([
  Ht(".clock__date")
], ri.prototype, "clockElement", 2);
Ss([
  Ht(".clock__time")
], ri.prototype, "timeElement", 2);
Ss([
  Ht(".dropdown-icon")
], ri.prototype, "icon", 2);
Ss([
  ut({ type: Boolean, reflect: !0 })
], ri.prototype, "date", 2);
Ss([
  ut({ type: Boolean, reflect: !0 })
], ri.prototype, "time", 2);
Ss([
  ut({ type: String, reflect: !0 })
], ri.prototype, "size", 2);
customElements && !customElements.get("clock-it") && customElements.define("clock-it", ri);
var sI = Kt`
  ${wr}

  :host {
    display: inline-block;
    color: var(--sl-color-neutral-600);
  }

  .icon-button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    background: none;
    border: none;
    border-radius: var(--sl-border-radius-medium);
    font-size: inherit;
    color: inherit;
    padding: var(--sl-spacing-x-small);
    cursor: pointer;
    transition: var(--sl-transition-x-fast) color;
    -webkit-appearance: none;
  }

  .icon-button:hover:not(.icon-button--disabled),
  .icon-button:focus-visible:not(.icon-button--disabled) {
    color: var(--sl-color-primary-600);
  }

  .icon-button:active:not(.icon-button--disabled) {
    color: var(--sl-color-primary-700);
  }

  .icon-button:focus {
    outline: none;
  }

  .icon-button--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .icon-button:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .icon-button__icon {
    pointer-events: none;
  }
`, bn = class extends gr {
  constructor() {
    super(...arguments), this.hasFocus = !1, this.label = "", this.disabled = !1;
  }
  handleBlur() {
    this.hasFocus = !1, this.emit("sl-blur");
  }
  handleFocus() {
    this.hasFocus = !0, this.emit("sl-focus");
  }
  handleClick(t) {
    this.disabled && (t.preventDefault(), t.stopPropagation());
  }
  /** Simulates a click on the icon button. */
  click() {
    this.button.click();
  }
  /** Sets focus on the icon button. */
  focus(t) {
    this.button.focus(t);
  }
  /** Removes focus from the icon button. */
  blur() {
    this.button.blur();
  }
  render() {
    const t = !!this.href, e = t ? Dl`a` : Dl`button`;
    return Sl`
      <${e}
        part="base"
        class=${Ur({
      "icon-button": !0,
      "icon-button--disabled": !t && this.disabled,
      "icon-button--focused": this.hasFocus
    })}
        ?disabled=${Wt(t ? void 0 : this.disabled)}
        type=${Wt(t ? void 0 : "button")}
        href=${Wt(t ? this.href : void 0)}
        target=${Wt(t ? this.target : void 0)}
        download=${Wt(t ? this.download : void 0)}
        rel=${Wt(t && this.target ? "noreferrer noopener" : void 0)}
        role=${Wt(t ? void 0 : "button")}
        aria-disabled=${this.disabled ? "true" : "false"}
        aria-label="${this.label}"
        tabindex=${this.disabled ? "-1" : "0"}
        @blur=${this.handleBlur}
        @focus=${this.handleFocus}
        @click=${this.handleClick}
      >
        <sl-icon
          class="icon-button__icon"
          name=${Wt(this.name)}
          library=${Wt(this.library)}
          src=${Wt(this.src)}
          aria-hidden="true"
        ></sl-icon>
      </${e}>
    `;
  }
};
bn.styles = sI;
bn.dependencies = { "sl-icon": gn };
ct([
  Ht(".icon-button")
], bn.prototype, "button", 2);
ct([
  Gr()
], bn.prototype, "hasFocus", 2);
ct([
  ut()
], bn.prototype, "name", 2);
ct([
  ut()
], bn.prototype, "library", 2);
ct([
  ut()
], bn.prototype, "src", 2);
ct([
  ut()
], bn.prototype, "href", 2);
ct([
  ut()
], bn.prototype, "target", 2);
ct([
  ut()
], bn.prototype, "download", 2);
ct([
  ut()
], bn.prototype, "label", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], bn.prototype, "disabled", 2);
var oI = Kt`
  ${wr}

  :host {
    display: contents;

    /* For better DX, we'll reset the margin here so the base part can inherit it */
    margin: 0;
  }

  .alert {
    position: relative;
    display: flex;
    align-items: stretch;
    background-color: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-top-width: calc(var(--sl-panel-border-width) * 3);
    border-radius: var(--sl-border-radius-medium);
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-normal);
    line-height: 1.6;
    color: var(--sl-color-neutral-700);
    margin: inherit;
  }

  .alert:not(.alert--has-icon) .alert__icon,
  .alert:not(.alert--closable) .alert__close-button {
    display: none;
  }

  .alert__icon {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-large);
    padding-inline-start: var(--sl-spacing-large);
  }

  .alert--primary {
    border-top-color: var(--sl-color-primary-600);
  }

  .alert--primary .alert__icon {
    color: var(--sl-color-primary-600);
  }

  .alert--success {
    border-top-color: var(--sl-color-success-600);
  }

  .alert--success .alert__icon {
    color: var(--sl-color-success-600);
  }

  .alert--neutral {
    border-top-color: var(--sl-color-neutral-600);
  }

  .alert--neutral .alert__icon {
    color: var(--sl-color-neutral-600);
  }

  .alert--warning {
    border-top-color: var(--sl-color-warning-600);
  }

  .alert--warning .alert__icon {
    color: var(--sl-color-warning-600);
  }

  .alert--danger {
    border-top-color: var(--sl-color-danger-600);
  }

  .alert--danger .alert__icon {
    color: var(--sl-color-danger-600);
  }

  .alert__message {
    flex: 1 1 auto;
    display: block;
    padding: var(--sl-spacing-large);
    overflow: hidden;
  }

  .alert__close-button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-medium);
    padding-inline-end: var(--sl-spacing-medium);
  }
`, Rs = Object.assign(document.createElement("div"), { className: "sl-toast-stack" }), si = class extends gr {
  constructor() {
    super(...arguments), this.hasSlotController = new Ra(this, "icon", "suffix"), this.localize = new ii(this), this.open = !1, this.closable = !1, this.variant = "primary", this.duration = 1 / 0;
  }
  firstUpdated() {
    this.base.hidden = !this.open;
  }
  restartAutoHide() {
    clearTimeout(this.autoHideTimeout), this.open && this.duration < 1 / 0 && (this.autoHideTimeout = window.setTimeout(() => this.hide(), this.duration));
  }
  handleCloseClick() {
    this.hide();
  }
  handleMouseMove() {
    this.restartAutoHide();
  }
  async handleOpenChange() {
    if (this.open) {
      this.emit("sl-show"), this.duration < 1 / 0 && this.restartAutoHide(), await Ui(this.base), this.base.hidden = !1;
      const { keyframes: t, options: e } = Pi(this, "alert.show", { dir: this.localize.dir() });
      await Bi(this.base, t, e), this.emit("sl-after-show");
    } else {
      this.emit("sl-hide"), clearTimeout(this.autoHideTimeout), await Ui(this.base);
      const { keyframes: t, options: e } = Pi(this, "alert.hide", { dir: this.localize.dir() });
      await Bi(this.base, t, e), this.base.hidden = !0, this.emit("sl-after-hide");
    }
  }
  handleDurationChange() {
    this.restartAutoHide();
  }
  /** Shows the alert. */
  async show() {
    if (!this.open)
      return this.open = !0, Fi(this, "sl-after-show");
  }
  /** Hides the alert */
  async hide() {
    if (this.open)
      return this.open = !1, Fi(this, "sl-after-hide");
  }
  /**
   * Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when
   * dismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by
   * calling this method again. The returned promise will resolve after the alert is hidden.
   */
  async toast() {
    return new Promise((t) => {
      Rs.parentElement === null && document.body.append(Rs), Rs.appendChild(this), requestAnimationFrame(() => {
        this.clientWidth, this.show();
      }), this.addEventListener(
        "sl-after-hide",
        () => {
          Rs.removeChild(this), t(), Rs.querySelector("sl-alert") === null && Rs.remove();
        },
        { once: !0 }
      );
    });
  }
  render() {
    return Ct`
      <div
        part="base"
        class=${Ur({
      alert: !0,
      "alert--open": this.open,
      "alert--closable": this.closable,
      "alert--has-icon": this.hasSlotController.test("icon"),
      "alert--primary": this.variant === "primary",
      "alert--success": this.variant === "success",
      "alert--neutral": this.variant === "neutral",
      "alert--warning": this.variant === "warning",
      "alert--danger": this.variant === "danger"
    })}
        role="alert"
        aria-hidden=${this.open ? "false" : "true"}
        @mousemove=${this.handleMouseMove}
      >
        <div part="icon" class="alert__icon">
          <slot name="icon"></slot>
        </div>

        <div part="message" class="alert__message" aria-live="polite">
          <slot></slot>
        </div>

        ${this.closable ? Ct`
              <sl-icon-button
                part="close-button"
                exportparts="base:close-button__base"
                class="alert__close-button"
                name="x-lg"
                library="system"
                label=${this.localize.term("close")}
                @click=${this.handleCloseClick}
              ></sl-icon-button>
            ` : ""}
      </div>
    `;
  }
};
si.styles = oI;
si.dependencies = { "sl-icon-button": bn };
ct([
  Ht('[part~="base"]')
], si.prototype, "base", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], si.prototype, "open", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], si.prototype, "closable", 2);
ct([
  ut({ reflect: !0 })
], si.prototype, "variant", 2);
ct([
  ut({ type: Number })
], si.prototype, "duration", 2);
ct([
  _r("open", { waitUntilFirstUpdate: !0 })
], si.prototype, "handleOpenChange", 1);
ct([
  _r("duration")
], si.prototype, "handleDurationChange", 1);
Zi("alert.show", {
  keyframes: [
    { opacity: 0, scale: 0.8 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 250, easing: "ease" }
});
Zi("alert.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.8 }
  ],
  options: { duration: 250, easing: "ease" }
});
si.define("sl-alert");
var aI = Kt`
  ${wr}

  :host {
    display: inline-flex;
  }

  .badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: max(12px, 0.75em);
    font-weight: var(--sl-font-weight-semibold);
    letter-spacing: var(--sl-letter-spacing-normal);
    line-height: 1;
    border-radius: var(--sl-border-radius-small);
    border: solid 1px var(--sl-color-neutral-0);
    white-space: nowrap;
    padding: 0.35em 0.6em;
    user-select: none;
    -webkit-user-select: none;
    cursor: inherit;
  }

  /* Variant modifiers */
  .badge--primary {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--success {
    background-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--neutral {
    background-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--warning {
    background-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--danger {
    background-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  /* Pill modifier */
  .badge--pill {
    border-radius: var(--sl-border-radius-pill);
  }

  /* Pulse modifier */
  .badge--pulse {
    animation: pulse 1.5s infinite;
  }

  .badge--pulse.badge--primary {
    --pulse-color: var(--sl-color-primary-600);
  }

  .badge--pulse.badge--success {
    --pulse-color: var(--sl-color-success-600);
  }

  .badge--pulse.badge--neutral {
    --pulse-color: var(--sl-color-neutral-600);
  }

  .badge--pulse.badge--warning {
    --pulse-color: var(--sl-color-warning-600);
  }

  .badge--pulse.badge--danger {
    --pulse-color: var(--sl-color-danger-600);
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 var(--pulse-color);
    }
    70% {
      box-shadow: 0 0 0 0.5rem transparent;
    }
    100% {
      box-shadow: 0 0 0 0 transparent;
    }
  }
`, Oa = class extends gr {
  constructor() {
    super(...arguments), this.variant = "primary", this.pill = !1, this.pulse = !1;
  }
  render() {
    return Ct`
      <span
        part="base"
        class=${Ur({
      badge: !0,
      "badge--primary": this.variant === "primary",
      "badge--success": this.variant === "success",
      "badge--neutral": this.variant === "neutral",
      "badge--warning": this.variant === "warning",
      "badge--danger": this.variant === "danger",
      "badge--pill": this.pill,
      "badge--pulse": this.pulse
    })}
        role="status"
      >
        <slot></slot>
      </span>
    `;
  }
};
Oa.styles = aI;
ct([
  ut({ reflect: !0 })
], Oa.prototype, "variant", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], Oa.prototype, "pill", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], Oa.prototype, "pulse", 2);
Oa.define("sl-badge");
var lI = Kt`
  ${wr}

  :host {
    display: inline-block;
  }

  .button-group {
    display: flex;
    flex-wrap: nowrap;
  }
`, Da = class extends gr {
  constructor() {
    super(...arguments), this.disableRole = !1, this.label = "";
  }
  handleFocus(t) {
    const e = Eo(t.target);
    e == null || e.classList.add("sl-button-group__button--focus");
  }
  handleBlur(t) {
    const e = Eo(t.target);
    e == null || e.classList.remove("sl-button-group__button--focus");
  }
  handleMouseOver(t) {
    const e = Eo(t.target);
    e == null || e.classList.add("sl-button-group__button--hover");
  }
  handleMouseOut(t) {
    const e = Eo(t.target);
    e == null || e.classList.remove("sl-button-group__button--hover");
  }
  handleSlotChange() {
    const t = [...this.defaultSlot.assignedElements({ flatten: !0 })];
    t.forEach((e) => {
      const r = t.indexOf(e), n = Eo(e);
      n && (n.classList.add("sl-button-group__button"), n.classList.toggle("sl-button-group__button--first", r === 0), n.classList.toggle("sl-button-group__button--inner", r > 0 && r < t.length - 1), n.classList.toggle("sl-button-group__button--last", r === t.length - 1), n.classList.toggle("sl-button-group__button--radio", n.tagName.toLowerCase() === "sl-radio-button"));
    });
  }
  render() {
    return Ct`
      <div
        part="base"
        class="button-group"
        role="${this.disableRole ? "presentation" : "group"}"
        aria-label=${this.label}
        @focusout=${this.handleBlur}
        @focusin=${this.handleFocus}
        @mouseover=${this.handleMouseOver}
        @mouseout=${this.handleMouseOut}
      >
        <slot @slotchange=${this.handleSlotChange}></slot>
      </div>
    `;
  }
};
Da.styles = lI;
ct([
  Ht("slot")
], Da.prototype, "defaultSlot", 2);
ct([
  Gr()
], Da.prototype, "disableRole", 2);
ct([
  ut()
], Da.prototype, "label", 2);
function Eo(t) {
  var e;
  const r = "sl-button, sl-radio-button";
  return (e = t.closest(r)) != null ? e : t.querySelector(r);
}
Da.define("sl-button-group");
var cI = Kt`
  ${wr}

  :host {
    --max-width: 20rem;
    --hide-delay: 0ms;
    --show-delay: 150ms;

    display: contents;
  }

  .tooltip {
    --arrow-size: var(--sl-tooltip-arrow-size);
    --arrow-color: var(--sl-tooltip-background-color);
  }

  .tooltip::part(popup) {
    pointer-events: none;
    z-index: var(--sl-z-index-tooltip);
  }

  .tooltip[placement^='top']::part(popup) {
    transform-origin: bottom;
  }

  .tooltip[placement^='bottom']::part(popup) {
    transform-origin: top;
  }

  .tooltip[placement^='left']::part(popup) {
    transform-origin: right;
  }

  .tooltip[placement^='right']::part(popup) {
    transform-origin: left;
  }

  .tooltip__body {
    display: block;
    width: max-content;
    max-width: var(--max-width);
    border-radius: var(--sl-tooltip-border-radius);
    background-color: var(--sl-tooltip-background-color);
    font-family: var(--sl-tooltip-font-family);
    font-size: var(--sl-tooltip-font-size);
    font-weight: var(--sl-tooltip-font-weight);
    line-height: var(--sl-tooltip-line-height);
    color: var(--sl-tooltip-color);
    padding: var(--sl-tooltip-padding);
    pointer-events: none;
    user-select: none;
    -webkit-user-select: none;
  }
`, Dr = class extends gr {
  constructor() {
    super(), this.localize = new ii(this), this.content = "", this.placement = "top", this.disabled = !1, this.distance = 8, this.open = !1, this.skidding = 0, this.trigger = "hover focus", this.hoist = !1, this.handleBlur = () => {
      this.hasTrigger("focus") && this.hide();
    }, this.handleClick = () => {
      this.hasTrigger("click") && (this.open ? this.hide() : this.show());
    }, this.handleFocus = () => {
      this.hasTrigger("focus") && this.show();
    }, this.handleKeyDown = (t) => {
      this.open && !this.disabled && t.key === "Escape" && (t.stopPropagation(), this.hide());
    }, this.handleMouseOver = () => {
      if (this.hasTrigger("hover")) {
        const t = D0(getComputedStyle(this).getPropertyValue("--show-delay"));
        clearTimeout(this.hoverTimeout), this.hoverTimeout = window.setTimeout(() => this.show(), t);
      }
    }, this.handleMouseOut = () => {
      if (this.hasTrigger("hover")) {
        const t = D0(getComputedStyle(this).getPropertyValue("--hide-delay"));
        clearTimeout(this.hoverTimeout), this.hoverTimeout = window.setTimeout(() => this.hide(), t);
      }
    }, this.addEventListener("blur", this.handleBlur, !0), this.addEventListener("focus", this.handleFocus, !0), this.addEventListener("click", this.handleClick), this.addEventListener("keydown", this.handleKeyDown), this.addEventListener("mouseover", this.handleMouseOver), this.addEventListener("mouseout", this.handleMouseOut);
  }
  connectedCallback() {
    super.connectedCallback();
  }
  firstUpdated() {
    this.body.hidden = !this.open, this.open && (this.popup.active = !0, this.popup.reposition());
  }
  hasTrigger(t) {
    return this.trigger.split(" ").includes(t);
  }
  async handleOpenChange() {
    if (this.open) {
      if (this.disabled)
        return;
      this.emit("sl-show"), await Ui(this.body), this.body.hidden = !1, this.popup.active = !0;
      const { keyframes: t, options: e } = Pi(this, "tooltip.show", { dir: this.localize.dir() });
      await Bi(this.popup.popup, t, e), this.emit("sl-after-show");
    } else {
      this.emit("sl-hide"), await Ui(this.body);
      const { keyframes: t, options: e } = Pi(this, "tooltip.hide", { dir: this.localize.dir() });
      await Bi(this.popup.popup, t, e), this.popup.active = !1, this.body.hidden = !0, this.emit("sl-after-hide");
    }
  }
  async handleOptionsChange() {
    this.hasUpdated && (await this.updateComplete, this.popup.reposition());
  }
  handleDisabledChange() {
    this.disabled && this.open && this.hide();
  }
  /** Shows the tooltip. */
  async show() {
    if (!this.open)
      return this.open = !0, Fi(this, "sl-after-show");
  }
  /** Hides the tooltip */
  async hide() {
    if (this.open)
      return this.open = !1, Fi(this, "sl-after-hide");
  }
  //
  // NOTE: Tooltip is a bit unique in that we're using aria-live instead of aria-labelledby to trick screen readers into
  // announcing the content. It works really well, but it violates an accessibility rule. We're also adding the
  // aria-describedby attribute to a slot, which is required by <sl-popup> to correctly locate the first assigned
  // element, otherwise positioning is incorrect.
  //
  render() {
    return Ct`
      <sl-popup
        part="base"
        exportparts="
          popup:base__popup,
          arrow:base__arrow
        "
        class=${Ur({
      tooltip: !0,
      "tooltip--open": this.open
    })}
        placement=${this.placement}
        distance=${this.distance}
        skidding=${this.skidding}
        strategy=${this.hoist ? "fixed" : "absolute"}
        flip
        shift
        arrow
      >
        ${""}
        <slot slot="anchor" aria-describedby="tooltip"></slot>

        ${""}
        <div part="body" id="tooltip" class="tooltip__body" role="tooltip" aria-live=${this.open ? "polite" : "off"}>
          <slot name="content">${this.content}</slot>
        </div>
      </sl-popup>
    `;
  }
};
Dr.styles = cI;
Dr.dependencies = { "sl-popup": rr };
ct([
  Ht("slot:not([name])")
], Dr.prototype, "defaultSlot", 2);
ct([
  Ht(".tooltip__body")
], Dr.prototype, "body", 2);
ct([
  Ht("sl-popup")
], Dr.prototype, "popup", 2);
ct([
  ut()
], Dr.prototype, "content", 2);
ct([
  ut()
], Dr.prototype, "placement", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], Dr.prototype, "disabled", 2);
ct([
  ut({ type: Number })
], Dr.prototype, "distance", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], Dr.prototype, "open", 2);
ct([
  ut({ type: Number })
], Dr.prototype, "skidding", 2);
ct([
  ut()
], Dr.prototype, "trigger", 2);
ct([
  ut({ type: Boolean })
], Dr.prototype, "hoist", 2);
ct([
  _r("open", { waitUntilFirstUpdate: !0 })
], Dr.prototype, "handleOpenChange", 1);
ct([
  _r(["content", "distance", "hoist", "placement", "skidding"])
], Dr.prototype, "handleOptionsChange", 1);
ct([
  _r("disabled")
], Dr.prototype, "handleDisabledChange", 1);
Zi("tooltip.show", {
  keyframes: [
    { opacity: 0, scale: 0.8 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 150, easing: "ease" }
});
Zi("tooltip.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.8 }
  ],
  options: { duration: 150, easing: "ease" }
});
Dr.define("sl-tooltip");
class Jt {
  /**
  Get the line description around the given position.
  */
  lineAt(e) {
    if (e < 0 || e > this.length)
      throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);
    return this.lineInner(e, !1, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(e) {
    if (e < 1 || e > this.lines)
      throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);
    return this.lineInner(e, !0, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(e, r, n) {
    [e, r] = Xs(this, e, r);
    let i = [];
    return this.decompose(
      0,
      e,
      i,
      2
      /* Open.To */
    ), n.length && n.decompose(
      0,
      n.length,
      i,
      3
      /* Open.To */
    ), this.decompose(
      r,
      this.length,
      i,
      1
      /* Open.From */
    ), Vn.from(i, this.length - (r - e) + n.length);
  }
  /**
  Append another document to this one.
  */
  append(e) {
    return this.replace(this.length, this.length, e);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(e, r = this.length) {
    [e, r] = Xs(this, e, r);
    let n = [];
    return this.decompose(e, r, n, 0), Vn.from(n, r - e);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(e) {
    if (e == this)
      return !0;
    if (e.length != this.length || e.lines != this.lines)
      return !1;
    let r = this.scanIdentical(e, 1), n = this.length - this.scanIdentical(e, -1), i = new Po(this), s = new Po(e);
    for (let o = r, a = r; ; ) {
      if (i.next(o), s.next(o), o = 0, i.lineBreak != s.lineBreak || i.done != s.done || i.value != s.value)
        return !1;
      if (a += i.value.length, i.done || a >= n)
        return !0;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(e = 1) {
    return new Po(this, e);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(e, r = this.length) {
    return new LS(this, e, r);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(e, r) {
    let n;
    if (e == null)
      n = this.iter();
    else {
      r == null && (r = this.lines + 1);
      let i = this.line(e).from;
      n = this.iterRange(i, Math.max(i, r == this.lines + 1 ? this.length : r <= 1 ? 0 : this.line(r - 1).to));
    }
    return new PS(n);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let e = [];
    return this.flatten(e), e;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(e) {
    if (e.length == 0)
      throw new RangeError("A document must have at least one line");
    return e.length == 1 && !e[0] ? Jt.empty : e.length <= 32 ? new $r(e) : Vn.from($r.split(e, []));
  }
}
class $r extends Jt {
  constructor(e, r = uI(e)) {
    super(), this.text = e, this.length = r;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(e, r, n, i) {
    for (let s = 0; ; s++) {
      let o = this.text[s], a = i + o.length;
      if ((r ? n : a) >= e)
        return new dI(i, a, n, o);
      i = a + 1, n++;
    }
  }
  decompose(e, r, n, i) {
    let s = e <= 0 && r >= this.length ? this : new $r(z0(this.text, e, r), Math.min(r, this.length) - Math.max(0, e));
    if (i & 1) {
      let o = n.pop(), a = Tl(s.text, o.text.slice(), 0, s.length);
      if (a.length <= 32)
        n.push(new $r(a, o.length + s.length));
      else {
        let l = a.length >> 1;
        n.push(new $r(a.slice(0, l)), new $r(a.slice(l)));
      }
    } else
      n.push(s);
  }
  replace(e, r, n) {
    if (!(n instanceof $r))
      return super.replace(e, r, n);
    [e, r] = Xs(this, e, r);
    let i = Tl(this.text, Tl(n.text, z0(this.text, 0, e)), r), s = this.length + n.length - (r - e);
    return i.length <= 32 ? new $r(i, s) : Vn.from($r.split(i, []), s);
  }
  sliceString(e, r = this.length, n = `
`) {
    [e, r] = Xs(this, e, r);
    let i = "";
    for (let s = 0, o = 0; s <= r && o < this.text.length; o++) {
      let a = this.text[o], l = s + a.length;
      s > e && o && (i += n), e < l && r > s && (i += a.slice(Math.max(0, e - s), r - s)), s = l + 1;
    }
    return i;
  }
  flatten(e) {
    for (let r of this.text)
      e.push(r);
  }
  scanIdentical() {
    return 0;
  }
  static split(e, r) {
    let n = [], i = -1;
    for (let s of e)
      n.push(s), i += s.length + 1, n.length == 32 && (r.push(new $r(n, i)), n = [], i = -1);
    return i > -1 && r.push(new $r(n, i)), r;
  }
}
class Vn extends Jt {
  constructor(e, r) {
    super(), this.children = e, this.length = r, this.lines = 0;
    for (let n of e)
      this.lines += n.lines;
  }
  lineInner(e, r, n, i) {
    for (let s = 0; ; s++) {
      let o = this.children[s], a = i + o.length, l = n + o.lines - 1;
      if ((r ? l : a) >= e)
        return o.lineInner(e, r, n, i);
      i = a + 1, n = l + 1;
    }
  }
  decompose(e, r, n, i) {
    for (let s = 0, o = 0; o <= r && s < this.children.length; s++) {
      let a = this.children[s], l = o + a.length;
      if (e <= l && r >= o) {
        let c = i & ((o <= e ? 1 : 0) | (l >= r ? 2 : 0));
        o >= e && l <= r && !c ? n.push(a) : a.decompose(e - o, r - o, n, c);
      }
      o = l + 1;
    }
  }
  replace(e, r, n) {
    if ([e, r] = Xs(this, e, r), n.lines < this.lines)
      for (let i = 0, s = 0; i < this.children.length; i++) {
        let o = this.children[i], a = s + o.length;
        if (e >= s && r <= a) {
          let l = o.replace(e - s, r - s, n), c = this.lines - o.lines + l.lines;
          if (l.lines < c >> 4 && l.lines > c >> 6) {
            let f = this.children.slice();
            return f[i] = l, new Vn(f, this.length - (r - e) + n.length);
          }
          return super.replace(s, a, l);
        }
        s = a + 1;
      }
    return super.replace(e, r, n);
  }
  sliceString(e, r = this.length, n = `
`) {
    [e, r] = Xs(this, e, r);
    let i = "";
    for (let s = 0, o = 0; s < this.children.length && o <= r; s++) {
      let a = this.children[s], l = o + a.length;
      o > e && s && (i += n), e < l && r > o && (i += a.sliceString(e - o, r - o, n)), o = l + 1;
    }
    return i;
  }
  flatten(e) {
    for (let r of this.children)
      r.flatten(e);
  }
  scanIdentical(e, r) {
    if (!(e instanceof Vn))
      return 0;
    let n = 0, [i, s, o, a] = r > 0 ? [0, 0, this.children.length, e.children.length] : [this.children.length - 1, e.children.length - 1, -1, -1];
    for (; ; i += r, s += r) {
      if (i == o || s == a)
        return n;
      let l = this.children[i], c = e.children[s];
      if (l != c)
        return n + l.scanIdentical(c, r);
      n += l.length + 1;
    }
  }
  static from(e, r = e.reduce((n, i) => n + i.length + 1, -1)) {
    let n = 0;
    for (let C of e)
      n += C.lines;
    if (n < 32) {
      let C = [];
      for (let N of e)
        N.flatten(C);
      return new $r(C, r);
    }
    let i = Math.max(
      32,
      n >> 5
      /* Tree.BranchShift */
    ), s = i << 1, o = i >> 1, a = [], l = 0, c = -1, f = [];
    function m(C) {
      let N;
      if (C.lines > s && C instanceof Vn)
        for (let z of C.children)
          m(z);
      else
        C.lines > o && (l > o || !l) ? (b(), a.push(C)) : C instanceof $r && l && (N = f[f.length - 1]) instanceof $r && C.lines + N.lines <= 32 ? (l += C.lines, c += C.length + 1, f[f.length - 1] = new $r(N.text.concat(C.text), N.length + 1 + C.length)) : (l + C.lines > i && b(), l += C.lines, c += C.length + 1, f.push(C));
    }
    function b() {
      l != 0 && (a.push(f.length == 1 ? f[0] : Vn.from(f, c)), c = -1, l = f.length = 0);
    }
    for (let C of e)
      m(C);
    return b(), a.length == 1 ? a[0] : new Vn(a, r);
  }
}
Jt.empty = /* @__PURE__ */ new $r([""], 0);
function uI(t) {
  let e = -1;
  for (let r of t)
    e += r.length + 1;
  return e;
}
function Tl(t, e, r = 0, n = 1e9) {
  for (let i = 0, s = 0, o = !0; s < t.length && i <= n; s++) {
    let a = t[s], l = i + a.length;
    l >= r && (l > n && (a = a.slice(0, n - i)), i < r && (a = a.slice(r - i)), o ? (e[e.length - 1] += a, o = !1) : e.push(a)), i = l + 1;
  }
  return e;
}
function z0(t, e, r) {
  return Tl(t, [""], e, r);
}
class Po {
  constructor(e, r = 1) {
    this.dir = r, this.done = !1, this.lineBreak = !1, this.value = "", this.nodes = [e], this.offsets = [r > 0 ? 1 : (e instanceof $r ? e.text.length : e.children.length) << 1];
  }
  nextInner(e, r) {
    for (this.done = this.lineBreak = !1; ; ) {
      let n = this.nodes.length - 1, i = this.nodes[n], s = this.offsets[n], o = s >> 1, a = i instanceof $r ? i.text.length : i.children.length;
      if (o == (r > 0 ? a : 0)) {
        if (n == 0)
          return this.done = !0, this.value = "", this;
        r > 0 && this.offsets[n - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((s & 1) == (r > 0 ? 0 : 1)) {
        if (this.offsets[n] += r, e == 0)
          return this.lineBreak = !0, this.value = `
`, this;
        e--;
      } else if (i instanceof $r) {
        let l = i.text[o + (r < 0 ? -1 : 0)];
        if (this.offsets[n] += r, l.length > Math.max(0, e))
          return this.value = e == 0 ? l : r > 0 ? l.slice(e) : l.slice(0, l.length - e), this;
        e -= l.length;
      } else {
        let l = i.children[o + (r < 0 ? -1 : 0)];
        e > l.length ? (e -= l.length, this.offsets[n] += r) : (r < 0 && this.offsets[n]--, this.nodes.push(l), this.offsets.push(r > 0 ? 1 : (l instanceof $r ? l.text.length : l.children.length) << 1));
      }
    }
  }
  next(e = 0) {
    return e < 0 && (this.nextInner(-e, -this.dir), e = this.value.length), this.nextInner(e, this.dir);
  }
}
class LS {
  constructor(e, r, n) {
    this.value = "", this.done = !1, this.cursor = new Po(e, r > n ? -1 : 1), this.pos = r > n ? e.length : 0, this.from = Math.min(r, n), this.to = Math.max(r, n);
  }
  nextInner(e, r) {
    if (r < 0 ? this.pos <= this.from : this.pos >= this.to)
      return this.value = "", this.done = !0, this;
    e += Math.max(0, r < 0 ? this.pos - this.to : this.from - this.pos);
    let n = r < 0 ? this.pos - this.from : this.to - this.pos;
    e > n && (e = n), n -= e;
    let { value: i } = this.cursor.next(e);
    return this.pos += (i.length + e) * r, this.value = i.length <= n ? i : r < 0 ? i.slice(i.length - n) : i.slice(0, n), this.done = !this.value, this;
  }
  next(e = 0) {
    return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)), this.nextInner(e, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
}
class PS {
  constructor(e) {
    this.inner = e, this.afterBreak = !0, this.value = "", this.done = !1;
  }
  next(e = 0) {
    let { done: r, lineBreak: n, value: i } = this.inner.next(e);
    return r && this.afterBreak ? (this.value = "", this.afterBreak = !1) : r ? (this.done = !0, this.value = "") : n ? this.afterBreak ? this.value = "" : (this.afterBreak = !0, this.next()) : (this.value = i, this.afterBreak = !1), this;
  }
  get lineBreak() {
    return !1;
  }
}
typeof Symbol < "u" && (Jt.prototype[Symbol.iterator] = function() {
  return this.iter();
}, Po.prototype[Symbol.iterator] = LS.prototype[Symbol.iterator] = PS.prototype[Symbol.iterator] = function() {
  return this;
});
class dI {
  /**
  @internal
  */
  constructor(e, r, n, i) {
    this.from = e, this.to = r, this.number = n, this.text = i;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
}
function Xs(t, e, r) {
  return e = Math.max(0, Math.min(t.length, e)), [e, Math.max(e, Math.min(t.length, r))];
}
let Us = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((t) => t ? parseInt(t, 36) : 1);
for (let t = 1; t < Us.length; t++)
  Us[t] += Us[t - 1];
function fI(t) {
  for (let e = 1; e < Us.length; e += 2)
    if (Us[e] > t)
      return Us[e - 1] <= t;
  return !1;
}
function G0(t) {
  return t >= 127462 && t <= 127487;
}
const Y0 = 8205;
function Or(t, e, r = !0, n = !0) {
  return (r ? FS : pI)(t, e, n);
}
function FS(t, e, r) {
  if (e == t.length)
    return e;
  e && BS(t.charCodeAt(e)) && US(t.charCodeAt(e - 1)) && e--;
  let n = xr(t, e);
  for (e += vn(n); e < t.length; ) {
    let i = xr(t, e);
    if (n == Y0 || i == Y0 || r && fI(i))
      e += vn(i), n = i;
    else if (G0(i)) {
      let s = 0, o = e - 2;
      for (; o >= 0 && G0(xr(t, o)); )
        s++, o -= 2;
      if (s % 2 == 0)
        break;
      e += 2;
    } else
      break;
  }
  return e;
}
function pI(t, e, r) {
  for (; e > 0; ) {
    let n = FS(t, e - 2, r);
    if (n < e)
      return n;
    e--;
  }
  return 0;
}
function BS(t) {
  return t >= 56320 && t < 57344;
}
function US(t) {
  return t >= 55296 && t < 56320;
}
function xr(t, e) {
  let r = t.charCodeAt(e);
  if (!US(r) || e + 1 == t.length)
    return r;
  let n = t.charCodeAt(e + 1);
  return BS(n) ? (r - 55296 << 10) + (n - 56320) + 65536 : r;
}
function Fh(t) {
  return t <= 65535 ? String.fromCharCode(t) : (t -= 65536, String.fromCharCode((t >> 10) + 55296, (t & 1023) + 56320));
}
function vn(t) {
  return t < 65536 ? 1 : 2;
}
const g_ = /\r\n?|\n/;
var Wr = /* @__PURE__ */ function(t) {
  return t[t.Simple = 0] = "Simple", t[t.TrackDel = 1] = "TrackDel", t[t.TrackBefore = 2] = "TrackBefore", t[t.TrackAfter = 3] = "TrackAfter", t;
}(Wr || (Wr = {}));
class Jn {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(e) {
    this.sections = e;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let e = 0;
    for (let r = 0; r < this.sections.length; r += 2)
      e += this.sections[r];
    return e;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let e = 0;
    for (let r = 0; r < this.sections.length; r += 2) {
      let n = this.sections[r + 1];
      e += n < 0 ? this.sections[r] : n;
    }
    return e;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(e) {
    for (let r = 0, n = 0, i = 0; r < this.sections.length; ) {
      let s = this.sections[r++], o = this.sections[r++];
      o < 0 ? (e(n, i, s), i += s) : i += o, n += s;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(e, r = !1) {
    $_(this, e, r);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let e = [];
    for (let r = 0; r < this.sections.length; ) {
      let n = this.sections[r++], i = this.sections[r++];
      i < 0 ? e.push(n, i) : e.push(i, n);
    }
    return new Jn(e);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(e) {
    return this.empty ? e : e.empty ? this : qS(this, e);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `other` happened before the ones in `this`.
  */
  mapDesc(e, r = !1) {
    return e.empty ? this : b_(this, e, r);
  }
  mapPos(e, r = -1, n = Wr.Simple) {
    let i = 0, s = 0;
    for (let o = 0; o < this.sections.length; ) {
      let a = this.sections[o++], l = this.sections[o++], c = i + a;
      if (l < 0) {
        if (c > e)
          return s + (e - i);
        s += a;
      } else {
        if (n != Wr.Simple && c >= e && (n == Wr.TrackDel && i < e && c > e || n == Wr.TrackBefore && i < e || n == Wr.TrackAfter && c > e))
          return null;
        if (c > e || c == e && r < 0 && !a)
          return e == i || r < 0 ? s : s + l;
        s += l;
      }
      i = c;
    }
    if (e > i)
      throw new RangeError(`Position ${e} is out of range for changeset of length ${i}`);
    return s;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(e, r = e) {
    for (let n = 0, i = 0; n < this.sections.length && i <= r; ) {
      let s = this.sections[n++], o = this.sections[n++], a = i + s;
      if (o >= 0 && i <= r && a >= e)
        return i < e && a > r ? "cover" : !0;
      i = a;
    }
    return !1;
  }
  /**
  @internal
  */
  toString() {
    let e = "";
    for (let r = 0; r < this.sections.length; ) {
      let n = this.sections[r++], i = this.sections[r++];
      e += (e ? " " : "") + n + (i >= 0 ? ":" + i : "");
    }
    return e;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e) || e.length % 2 || e.some((r) => typeof r != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new Jn(e);
  }
  /**
  @internal
  */
  static create(e) {
    return new Jn(e);
  }
}
class vr extends Jn {
  constructor(e, r) {
    super(e), this.inserted = r;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(e) {
    if (this.length != e.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    return $_(this, (r, n, i, s, o) => e = e.replace(i, i + (n - r), o), !1), e;
  }
  mapDesc(e, r = !1) {
    return b_(this, e, r, !0);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(e) {
    let r = this.sections.slice(), n = [];
    for (let i = 0, s = 0; i < r.length; i += 2) {
      let o = r[i], a = r[i + 1];
      if (a >= 0) {
        r[i] = a, r[i + 1] = o;
        let l = i >> 1;
        for (; n.length < l; )
          n.push(Jt.empty);
        n.push(o ? e.slice(s, s + o) : Jt.empty);
      }
      s += o;
    }
    return new vr(r, n);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(e) {
    return this.empty ? e : e.empty ? this : qS(this, e, !0);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(e, r = !1) {
    return e.empty ? this : b_(this, e, r, !0);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(e, r = !1) {
    $_(this, e, r);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return Jn.create(this.sections);
  }
  /**
  @internal
  */
  filter(e) {
    let r = [], n = [], i = [], s = new sa(this);
    e:
      for (let o = 0, a = 0; ; ) {
        let l = o == e.length ? 1e9 : e[o++];
        for (; a < l || a == l && s.len == 0; ) {
          if (s.done)
            break e;
          let f = Math.min(s.len, l - a);
          Pr(i, f, -1);
          let m = s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0;
          Pr(r, f, m), m > 0 && Ri(n, r, s.text), s.forward(f), a += f;
        }
        let c = e[o++];
        for (; a < c; ) {
          if (s.done)
            break e;
          let f = Math.min(s.len, c - a);
          Pr(r, f, -1), Pr(i, f, s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0), s.forward(f), a += f;
        }
      }
    return {
      changes: new vr(r, n),
      filtered: Jn.create(i)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let e = [];
    for (let r = 0; r < this.sections.length; r += 2) {
      let n = this.sections[r], i = this.sections[r + 1];
      i < 0 ? e.push(n) : i == 0 ? e.push([n]) : e.push([n].concat(this.inserted[r >> 1].toJSON()));
    }
    return e;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(e, r, n) {
    let i = [], s = [], o = 0, a = null;
    function l(f = !1) {
      if (!f && !i.length)
        return;
      o < r && Pr(i, r - o, -1);
      let m = new vr(i, s);
      a = a ? a.compose(m.map(a)) : m, i = [], s = [], o = 0;
    }
    function c(f) {
      if (Array.isArray(f))
        for (let m of f)
          c(m);
      else if (f instanceof vr) {
        if (f.length != r)
          throw new RangeError(`Mismatched change set length (got ${f.length}, expected ${r})`);
        l(), a = a ? a.compose(f.map(a)) : f;
      } else {
        let { from: m, to: b = m, insert: C } = f;
        if (m > b || m < 0 || b > r)
          throw new RangeError(`Invalid change range ${m} to ${b} (in doc of length ${r})`);
        let N = C ? typeof C == "string" ? Jt.of(C.split(n || g_)) : C : Jt.empty, z = N.length;
        if (m == b && z == 0)
          return;
        m < o && l(), m > o && Pr(i, m - o, -1), Pr(i, b - m, z), Ri(s, i, N), o = b;
      }
    }
    return c(e), l(!a), a;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(e) {
    return new vr(e ? [e, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let r = [], n = [];
    for (let i = 0; i < e.length; i++) {
      let s = e[i];
      if (typeof s == "number")
        r.push(s, -1);
      else {
        if (!Array.isArray(s) || typeof s[0] != "number" || s.some((o, a) => a && typeof o != "string"))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        if (s.length == 1)
          r.push(s[0], 0);
        else {
          for (; n.length < i; )
            n.push(Jt.empty);
          n[i] = Jt.of(s.slice(1)), r.push(s[0], n[i].length);
        }
      }
    }
    return new vr(r, n);
  }
  /**
  @internal
  */
  static createSet(e, r) {
    return new vr(e, r);
  }
}
function Pr(t, e, r, n = !1) {
  if (e == 0 && r <= 0)
    return;
  let i = t.length - 2;
  i >= 0 && r <= 0 && r == t[i + 1] ? t[i] += e : e == 0 && t[i] == 0 ? t[i + 1] += r : n ? (t[i] += e, t[i + 1] += r) : t.push(e, r);
}
function Ri(t, e, r) {
  if (r.length == 0)
    return;
  let n = e.length - 2 >> 1;
  if (n < t.length)
    t[t.length - 1] = t[t.length - 1].append(r);
  else {
    for (; t.length < n; )
      t.push(Jt.empty);
    t.push(r);
  }
}
function $_(t, e, r) {
  let n = t.inserted;
  for (let i = 0, s = 0, o = 0; o < t.sections.length; ) {
    let a = t.sections[o++], l = t.sections[o++];
    if (l < 0)
      i += a, s += a;
    else {
      let c = i, f = s, m = Jt.empty;
      for (; c += a, f += l, l && n && (m = m.append(n[o - 2 >> 1])), !(r || o == t.sections.length || t.sections[o + 1] < 0); )
        a = t.sections[o++], l = t.sections[o++];
      e(i, c, s, f, m), i = c, s = f;
    }
  }
}
function b_(t, e, r, n = !1) {
  let i = [], s = n ? [] : null, o = new sa(t), a = new sa(e);
  for (let l = -1; ; )
    if (o.ins == -1 && a.ins == -1) {
      let c = Math.min(o.len, a.len);
      Pr(i, c, -1), o.forward(c), a.forward(c);
    } else if (a.ins >= 0 && (o.ins < 0 || l == o.i || o.off == 0 && (a.len < o.len || a.len == o.len && !r))) {
      let c = a.len;
      for (Pr(i, a.ins, -1); c; ) {
        let f = Math.min(o.len, c);
        o.ins >= 0 && l < o.i && o.len <= f && (Pr(i, 0, o.ins), s && Ri(s, i, o.text), l = o.i), o.forward(f), c -= f;
      }
      a.next();
    } else if (o.ins >= 0) {
      let c = 0, f = o.len;
      for (; f; )
        if (a.ins == -1) {
          let m = Math.min(f, a.len);
          c += m, f -= m, a.forward(m);
        } else if (a.ins == 0 && a.len < f)
          f -= a.len, a.next();
        else
          break;
      Pr(i, c, l < o.i ? o.ins : 0), s && l < o.i && Ri(s, i, o.text), l = o.i, o.forward(o.len - f);
    } else {
      if (o.done && a.done)
        return s ? vr.createSet(i, s) : Jn.create(i);
      throw new Error("Mismatched change set lengths");
    }
}
function qS(t, e, r = !1) {
  let n = [], i = r ? [] : null, s = new sa(t), o = new sa(e);
  for (let a = !1; ; ) {
    if (s.done && o.done)
      return i ? vr.createSet(n, i) : Jn.create(n);
    if (s.ins == 0)
      Pr(n, s.len, 0, a), s.next();
    else if (o.len == 0 && !o.done)
      Pr(n, 0, o.ins, a), i && Ri(i, n, o.text), o.next();
    else {
      if (s.done || o.done)
        throw new Error("Mismatched change set lengths");
      {
        let l = Math.min(s.len2, o.len), c = n.length;
        if (s.ins == -1) {
          let f = o.ins == -1 ? -1 : o.off ? 0 : o.ins;
          Pr(n, l, f, a), i && f && Ri(i, n, o.text);
        } else
          o.ins == -1 ? (Pr(n, s.off ? 0 : s.len, l, a), i && Ri(i, n, s.textBit(l))) : (Pr(n, s.off ? 0 : s.len, o.off ? 0 : o.ins, a), i && !o.off && Ri(i, n, o.text));
        a = (s.ins > l || o.ins >= 0 && o.len > l) && (a || n.length > c), s.forward2(l), o.forward(l);
      }
    }
  }
}
class sa {
  constructor(e) {
    this.set = e, this.i = 0, this.next();
  }
  next() {
    let { sections: e } = this.set;
    this.i < e.length ? (this.len = e[this.i++], this.ins = e[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: e } = this.set, r = this.i - 2 >> 1;
    return r >= e.length ? Jt.empty : e[r];
  }
  textBit(e) {
    let { inserted: r } = this.set, n = this.i - 2 >> 1;
    return n >= r.length && !e ? Jt.empty : r[n].slice(this.off, e == null ? void 0 : this.off + e);
  }
  forward(e) {
    e == this.len ? this.next() : (this.len -= e, this.off += e);
  }
  forward2(e) {
    this.ins == -1 ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e, this.off += e);
  }
}
class us {
  constructor(e, r, n) {
    this.from = e, this.to = r, this.flags = n;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let e = this.flags & 7;
    return e == 7 ? null : e;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let e = this.flags >> 6;
    return e == 16777215 ? void 0 : e;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(e, r = -1) {
    let n, i;
    return this.empty ? n = i = e.mapPos(this.from, r) : (n = e.mapPos(this.from, 1), i = e.mapPos(this.to, -1)), n == this.from && i == this.to ? this : new us(n, i, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(e, r = e) {
    if (e <= this.anchor && r >= this.anchor)
      return $t.range(e, r);
    let n = Math.abs(e - this.anchor) > Math.abs(r - this.anchor) ? e : r;
    return $t.range(this.anchor, n);
  }
  /**
  Compare this range to another range.
  */
  eq(e, r = !1) {
    return this.anchor == e.anchor && this.head == e.head && (!r || !this.empty || this.assoc == e.assoc);
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(e) {
    if (!e || typeof e.anchor != "number" || typeof e.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return $t.range(e.anchor, e.head);
  }
  /**
  @internal
  */
  static create(e, r, n) {
    return new us(e, r, n);
  }
}
class $t {
  constructor(e, r) {
    this.ranges = e, this.mainIndex = r;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(e, r = -1) {
    return e.empty ? this : $t.create(this.ranges.map((n) => n.map(e, r)), this.mainIndex);
  }
  /**
  Compare this selection to another selection. By default, ranges
  are compared only by position. When `includeAssoc` is true,
  cursor ranges must also have the same
  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
  */
  eq(e, r = !1) {
    if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex)
      return !1;
    for (let n = 0; n < this.ranges.length; n++)
      if (!this.ranges[n].eq(e.ranges[n], r))
        return !1;
    return !0;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new $t([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(e, r = !0) {
    return $t.create([e].concat(this.ranges), r ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(e, r = this.mainIndex) {
    let n = this.ranges.slice();
    return n[r] = e, $t.create(n, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((e) => e.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(e) {
    if (!e || !Array.isArray(e.ranges) || typeof e.main != "number" || e.main >= e.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new $t(e.ranges.map((r) => us.fromJSON(r)), e.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(e, r = e) {
    return new $t([$t.range(e, r)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(e, r = 0) {
    if (e.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let n = 0, i = 0; i < e.length; i++) {
      let s = e[i];
      if (s.empty ? s.from <= n : s.from < n)
        return $t.normalized(e.slice(), r);
      n = s.to;
    }
    return new $t(e, r);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(e, r = 0, n, i) {
    return us.create(e, e, (r == 0 ? 0 : r < 0 ? 8 : 16) | (n == null ? 7 : Math.min(6, n)) | (i ?? 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(e, r, n, i) {
    let s = (n ?? 16777215) << 6 | (i == null ? 7 : Math.min(6, i));
    return r < e ? us.create(r, e, 48 | s) : us.create(e, r, (r > e ? 8 : 0) | s);
  }
  /**
  @internal
  */
  static normalized(e, r = 0) {
    let n = e[r];
    e.sort((i, s) => i.from - s.from), r = e.indexOf(n);
    for (let i = 1; i < e.length; i++) {
      let s = e[i], o = e[i - 1];
      if (s.empty ? s.from <= o.to : s.from < o.to) {
        let a = o.from, l = Math.max(s.to, o.to);
        i <= r && r--, e.splice(--i, 2, s.anchor > s.head ? $t.range(l, a) : $t.range(a, l));
      }
    }
    return new $t(e, r);
  }
}
function zS(t, e) {
  for (let r of t.ranges)
    if (r.to > e)
      throw new RangeError("Selection points outside of document");
}
let Bh = 0;
class xt {
  constructor(e, r, n, i, s) {
    this.combine = e, this.compareInput = r, this.compare = n, this.isStatic = i, this.id = Bh++, this.default = e([]), this.extensions = typeof s == "function" ? s(this) : s;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(e = {}) {
    return new xt(e.combine || ((r) => r), e.compareInput || ((r, n) => r === n), e.compare || (e.combine ? (r, n) => r === n : Uh), !!e.static, e.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(e) {
    return new Cl([], this, 0, e);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(e, r) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Cl(e, this, 1, r);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(e, r) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Cl(e, this, 2, r);
  }
  from(e, r) {
    return r || (r = (n) => n), this.compute([e], (n) => r(n.field(e)));
  }
}
function Uh(t, e) {
  return t == e || t.length == e.length && t.every((r, n) => r === e[n]);
}
class Cl {
  constructor(e, r, n, i) {
    this.dependencies = e, this.facet = r, this.type = n, this.value = i, this.id = Bh++;
  }
  dynamicSlot(e) {
    var r;
    let n = this.value, i = this.facet.compareInput, s = this.id, o = e[s] >> 1, a = this.type == 2, l = !1, c = !1, f = [];
    for (let m of this.dependencies)
      m == "doc" ? l = !0 : m == "selection" ? c = !0 : ((r = e[m.id]) !== null && r !== void 0 ? r : 1) & 1 || f.push(e[m.id]);
    return {
      create(m) {
        return m.values[o] = n(m), 1;
      },
      update(m, b) {
        if (l && b.docChanged || c && (b.docChanged || b.selection) || E_(m, f)) {
          let C = n(m);
          if (a ? !H0(C, m.values[o], i) : !i(C, m.values[o]))
            return m.values[o] = C, 1;
        }
        return 0;
      },
      reconfigure: (m, b) => {
        let C, N = b.config.address[s];
        if (N != null) {
          let z = ql(b, N);
          if (this.dependencies.every((A) => A instanceof xt ? b.facet(A) === m.facet(A) : A instanceof Mr ? b.field(A, !1) == m.field(A, !1) : !0) || (a ? H0(C = n(m), z, i) : i(C = n(m), z)))
            return m.values[o] = z, 0;
        } else
          C = n(m);
        return m.values[o] = C, 1;
      }
    };
  }
}
function H0(t, e, r) {
  if (t.length != e.length)
    return !1;
  for (let n = 0; n < t.length; n++)
    if (!r(t[n], e[n]))
      return !1;
  return !0;
}
function E_(t, e) {
  let r = !1;
  for (let n of e)
    Fo(t, n) & 1 && (r = !0);
  return r;
}
function _I(t, e, r) {
  let n = r.map((l) => t[l.id]), i = r.map((l) => l.type), s = n.filter((l) => !(l & 1)), o = t[e.id] >> 1;
  function a(l) {
    let c = [];
    for (let f = 0; f < n.length; f++) {
      let m = ql(l, n[f]);
      if (i[f] == 2)
        for (let b of m)
          c.push(b);
      else
        c.push(m);
    }
    return e.combine(c);
  }
  return {
    create(l) {
      for (let c of n)
        Fo(l, c);
      return l.values[o] = a(l), 1;
    },
    update(l, c) {
      if (!E_(l, s))
        return 0;
      let f = a(l);
      return e.compare(f, l.values[o]) ? 0 : (l.values[o] = f, 1);
    },
    reconfigure(l, c) {
      let f = E_(l, n), m = c.config.facets[e.id], b = c.facet(e);
      if (m && !f && Uh(r, m))
        return l.values[o] = b, 0;
      let C = a(l);
      return e.compare(C, b) ? (l.values[o] = b, 0) : (l.values[o] = C, 1);
    }
  };
}
const V0 = /* @__PURE__ */ xt.define({ static: !0 });
class Mr {
  constructor(e, r, n, i, s) {
    this.id = e, this.createF = r, this.updateF = n, this.compareF = i, this.spec = s, this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(e) {
    let r = new Mr(Bh++, e.create, e.update, e.compare || ((n, i) => n === i), e);
    return e.provide && (r.provides = e.provide(r)), r;
  }
  create(e) {
    let r = e.facet(V0).find((n) => n.field == this);
    return ((r == null ? void 0 : r.create) || this.createF)(e);
  }
  /**
  @internal
  */
  slot(e) {
    let r = e[this.id] >> 1;
    return {
      create: (n) => (n.values[r] = this.create(n), 1),
      update: (n, i) => {
        let s = n.values[r], o = this.updateF(s, i);
        return this.compareF(s, o) ? 0 : (n.values[r] = o, 1);
      },
      reconfigure: (n, i) => i.config.address[this.id] != null ? (n.values[r] = i.field(this), 0) : (n.values[r] = this.create(n), 1)
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(e) {
    return [this, V0.of({ field: this, create: e })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
}
const os = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function vo(t) {
  return (e) => new GS(e, t);
}
const co = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ vo(os.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ vo(os.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ vo(os.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ vo(os.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ vo(os.lowest)
};
class GS {
  constructor(e, r) {
    this.inner = e, this.prec = r;
  }
}
class Yn {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(e) {
    return new v_(this, e);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(e) {
    return Yn.reconfigure.of({ compartment: this, extension: e });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(e) {
    return e.config.compartments.get(this);
  }
}
class v_ {
  constructor(e, r) {
    this.compartment = e, this.inner = r;
  }
}
class Ul {
  constructor(e, r, n, i, s, o) {
    for (this.base = e, this.compartments = r, this.dynamicSlots = n, this.address = i, this.staticValues = s, this.facets = o, this.statusTemplate = []; this.statusTemplate.length < n.length; )
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(e) {
    let r = this.address[e.id];
    return r == null ? e.default : this.staticValues[r >> 1];
  }
  static resolve(e, r, n) {
    let i = [], s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ new Map();
    for (let b of hI(e, r, o))
      b instanceof Mr ? i.push(b) : (s[b.facet.id] || (s[b.facet.id] = [])).push(b);
    let a = /* @__PURE__ */ Object.create(null), l = [], c = [];
    for (let b of i)
      a[b.id] = c.length << 1, c.push((C) => b.slot(C));
    let f = n == null ? void 0 : n.config.facets;
    for (let b in s) {
      let C = s[b], N = C[0].facet, z = f && f[b] || [];
      if (C.every(
        (A) => A.type == 0
        /* Provider.Static */
      ))
        if (a[N.id] = l.length << 1 | 1, Uh(z, C))
          l.push(n.facet(N));
        else {
          let A = N.combine(C.map((Q) => Q.value));
          l.push(n && N.compare(A, n.facet(N)) ? n.facet(N) : A);
        }
      else {
        for (let A of C)
          A.type == 0 ? (a[A.id] = l.length << 1 | 1, l.push(A.value)) : (a[A.id] = c.length << 1, c.push((Q) => A.dynamicSlot(Q)));
        a[N.id] = c.length << 1, c.push((A) => _I(A, N, C));
      }
    }
    let m = c.map((b) => b(a));
    return new Ul(e, o, m, a, l, s);
  }
}
function hI(t, e, r) {
  let n = [[], [], [], [], []], i = /* @__PURE__ */ new Map();
  function s(o, a) {
    let l = i.get(o);
    if (l != null) {
      if (l <= a)
        return;
      let c = n[l].indexOf(o);
      c > -1 && n[l].splice(c, 1), o instanceof v_ && r.delete(o.compartment);
    }
    if (i.set(o, a), Array.isArray(o))
      for (let c of o)
        s(c, a);
    else if (o instanceof v_) {
      if (r.has(o.compartment))
        throw new RangeError("Duplicate use of compartment in extensions");
      let c = e.get(o.compartment) || o.inner;
      r.set(o.compartment, c), s(c, a);
    } else if (o instanceof GS)
      s(o.inner, o.prec);
    else if (o instanceof Mr)
      n[a].push(o), o.provides && s(o.provides, a);
    else if (o instanceof Cl)
      n[a].push(o), o.facet.extensions && s(o.facet.extensions, os.default);
    else {
      let c = o.extension;
      if (!c)
        throw new Error(`Unrecognized extension value in extension set (${o}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      s(c, a);
    }
  }
  return s(t, os.default), n.reduce((o, a) => o.concat(a));
}
function Fo(t, e) {
  if (e & 1)
    return 2;
  let r = e >> 1, n = t.status[r];
  if (n == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (n & 2)
    return n;
  t.status[r] = 4;
  let i = t.computeSlot(t, t.config.dynamicSlots[r]);
  return t.status[r] = 2 | i;
}
function ql(t, e) {
  return e & 1 ? t.config.staticValues[e >> 1] : t.values[e >> 1];
}
const YS = /* @__PURE__ */ xt.define(), S_ = /* @__PURE__ */ xt.define({
  combine: (t) => t.some((e) => e),
  static: !0
}), HS = /* @__PURE__ */ xt.define({
  combine: (t) => t.length ? t[0] : void 0,
  static: !0
}), VS = /* @__PURE__ */ xt.define(), WS = /* @__PURE__ */ xt.define(), KS = /* @__PURE__ */ xt.define(), QS = /* @__PURE__ */ xt.define({
  combine: (t) => t.length ? t[0] : !1
});
class $i {
  /**
  @internal
  */
  constructor(e, r) {
    this.type = e, this.value = r;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new mI();
  }
}
class mI {
  /**
  Create an instance of this annotation.
  */
  of(e) {
    return new $i(this, e);
  }
}
class gI {
  /**
  @internal
  */
  constructor(e) {
    this.map = e;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(e) {
    return new Gt(this, e);
  }
}
class Gt {
  /**
  @internal
  */
  constructor(e, r) {
    this.type = e, this.value = r;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(e) {
    let r = this.type.map(this.value, e);
    return r === void 0 ? void 0 : r == this.value ? this : new Gt(this.type, r);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(e) {
    return this.type == e;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(e = {}) {
    return new gI(e.map || ((r) => r));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(e, r) {
    if (!e.length)
      return e;
    let n = [];
    for (let i of e) {
      let s = i.map(r);
      s && n.push(s);
    }
    return n;
  }
}
Gt.reconfigure = /* @__PURE__ */ Gt.define();
Gt.appendConfig = /* @__PURE__ */ Gt.define();
class Sr {
  constructor(e, r, n, i, s, o) {
    this.startState = e, this.changes = r, this.selection = n, this.effects = i, this.annotations = s, this.scrollIntoView = o, this._doc = null, this._state = null, n && zS(n, r.newLength), s.some((a) => a.type == Sr.time) || (this.annotations = s.concat(Sr.time.of(Date.now())));
  }
  /**
  @internal
  */
  static create(e, r, n, i, s, o) {
    return new Sr(e, r, n, i, s, o);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(e) {
    for (let r of this.annotations)
      if (r.type == e)
        return r.value;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(e) {
    let r = this.annotation(Sr.userEvent);
    return !!(r && (r == e || r.length > e.length && r.slice(0, e.length) == e && r[e.length] == "."));
  }
}
Sr.time = /* @__PURE__ */ $i.define();
Sr.userEvent = /* @__PURE__ */ $i.define();
Sr.addToHistory = /* @__PURE__ */ $i.define();
Sr.remote = /* @__PURE__ */ $i.define();
function $I(t, e) {
  let r = [];
  for (let n = 0, i = 0; ; ) {
    let s, o;
    if (n < t.length && (i == e.length || e[i] >= t[n]))
      s = t[n++], o = t[n++];
    else if (i < e.length)
      s = e[i++], o = e[i++];
    else
      return r;
    !r.length || r[r.length - 1] < s ? r.push(s, o) : r[r.length - 1] < o && (r[r.length - 1] = o);
  }
}
function jS(t, e, r) {
  var n;
  let i, s, o;
  return r ? (i = e.changes, s = vr.empty(e.changes.length), o = t.changes.compose(e.changes)) : (i = e.changes.map(t.changes), s = t.changes.mapDesc(e.changes, !0), o = t.changes.compose(i)), {
    changes: o,
    selection: e.selection ? e.selection.map(s) : (n = t.selection) === null || n === void 0 ? void 0 : n.map(i),
    effects: Gt.mapEffects(t.effects, i).concat(Gt.mapEffects(e.effects, s)),
    annotations: t.annotations.length ? t.annotations.concat(e.annotations) : e.annotations,
    scrollIntoView: t.scrollIntoView || e.scrollIntoView
  };
}
function y_(t, e, r) {
  let n = e.selection, i = qs(e.annotations);
  return e.userEvent && (i = i.concat(Sr.userEvent.of(e.userEvent))), {
    changes: e.changes instanceof vr ? e.changes : vr.of(e.changes || [], r, t.facet(HS)),
    selection: n && (n instanceof $t ? n : $t.single(n.anchor, n.head)),
    effects: qs(e.effects),
    annotations: i,
    scrollIntoView: !!e.scrollIntoView
  };
}
function XS(t, e, r) {
  let n = y_(t, e.length ? e[0] : {}, t.doc.length);
  e.length && e[0].filter === !1 && (r = !1);
  for (let s = 1; s < e.length; s++) {
    e[s].filter === !1 && (r = !1);
    let o = !!e[s].sequential;
    n = jS(n, y_(t, e[s], o ? n.changes.newLength : t.doc.length), o);
  }
  let i = Sr.create(t, n.changes, n.selection, n.effects, n.annotations, n.scrollIntoView);
  return EI(r ? bI(i) : i);
}
function bI(t) {
  let e = t.startState, r = !0;
  for (let i of e.facet(VS)) {
    let s = i(t);
    if (s === !1) {
      r = !1;
      break;
    }
    Array.isArray(s) && (r = r === !0 ? s : $I(r, s));
  }
  if (r !== !0) {
    let i, s;
    if (r === !1)
      s = t.changes.invertedDesc, i = vr.empty(e.doc.length);
    else {
      let o = t.changes.filter(r);
      i = o.changes, s = o.filtered.mapDesc(o.changes).invertedDesc;
    }
    t = Sr.create(e, i, t.selection && t.selection.map(s), Gt.mapEffects(t.effects, s), t.annotations, t.scrollIntoView);
  }
  let n = e.facet(WS);
  for (let i = n.length - 1; i >= 0; i--) {
    let s = n[i](t);
    s instanceof Sr ? t = s : Array.isArray(s) && s.length == 1 && s[0] instanceof Sr ? t = s[0] : t = XS(e, qs(s), !1);
  }
  return t;
}
function EI(t) {
  let e = t.startState, r = e.facet(KS), n = t;
  for (let i = r.length - 1; i >= 0; i--) {
    let s = r[i](t);
    s && Object.keys(s).length && (n = jS(n, y_(e, s, t.changes.newLength), !0));
  }
  return n == t ? t : Sr.create(e, t.changes, t.selection, n.effects, n.annotations, n.scrollIntoView);
}
const vI = [];
function qs(t) {
  return t == null ? vI : Array.isArray(t) ? t : [t];
}
var dr = /* @__PURE__ */ function(t) {
  return t[t.Word = 0] = "Word", t[t.Space = 1] = "Space", t[t.Other = 2] = "Other", t;
}(dr || (dr = {}));
const SI = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let T_;
try {
  T_ = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function yI(t) {
  if (T_)
    return T_.test(t);
  for (let e = 0; e < t.length; e++) {
    let r = t[e];
    if (/\w/.test(r) || r > "" && (r.toUpperCase() != r.toLowerCase() || SI.test(r)))
      return !0;
  }
  return !1;
}
function TI(t) {
  return (e) => {
    if (!/\S/.test(e))
      return dr.Space;
    if (yI(e))
      return dr.Word;
    for (let r = 0; r < t.length; r++)
      if (e.indexOf(t[r]) > -1)
        return dr.Word;
    return dr.Other;
  };
}
class Qt {
  constructor(e, r, n, i, s, o) {
    this.config = e, this.doc = r, this.selection = n, this.values = i, this.status = e.statusTemplate.slice(), this.computeSlot = s, o && (o._state = this);
    for (let a = 0; a < this.config.dynamicSlots.length; a++)
      Fo(this, a << 1);
    this.computeSlot = null;
  }
  field(e, r = !0) {
    let n = this.config.address[e.id];
    if (n == null) {
      if (r)
        throw new RangeError("Field is not present in this state");
      return;
    }
    return Fo(this, n), ql(this, n);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...e) {
    return XS(this, e, !0);
  }
  /**
  @internal
  */
  applyTransaction(e) {
    let r = this.config, { base: n, compartments: i } = r;
    for (let a of e.effects)
      a.is(Yn.reconfigure) ? (r && (i = /* @__PURE__ */ new Map(), r.compartments.forEach((l, c) => i.set(c, l)), r = null), i.set(a.value.compartment, a.value.extension)) : a.is(Gt.reconfigure) ? (r = null, n = a.value) : a.is(Gt.appendConfig) && (r = null, n = qs(n).concat(a.value));
    let s;
    r ? s = e.startState.values.slice() : (r = Ul.resolve(n, i, this), s = new Qt(r, this.doc, this.selection, r.dynamicSlots.map(() => null), (l, c) => c.reconfigure(l, this), null).values);
    let o = e.startState.facet(S_) ? e.newSelection : e.newSelection.asSingle();
    new Qt(r, e.newDoc, o, s, (a, l) => l.update(a, e), e);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(e) {
    return typeof e == "string" && (e = this.toText(e)), this.changeByRange((r) => ({
      changes: { from: r.from, to: r.to, insert: e },
      range: $t.cursor(r.from + e.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(e) {
    let r = this.selection, n = e(r.ranges[0]), i = this.changes(n.changes), s = [n.range], o = qs(n.effects);
    for (let a = 1; a < r.ranges.length; a++) {
      let l = e(r.ranges[a]), c = this.changes(l.changes), f = c.map(i);
      for (let b = 0; b < a; b++)
        s[b] = s[b].map(f);
      let m = i.mapDesc(c, !0);
      s.push(l.range.map(m)), i = i.compose(f), o = Gt.mapEffects(o, f).concat(Gt.mapEffects(qs(l.effects), m));
    }
    return {
      changes: i,
      selection: $t.create(s, r.mainIndex),
      effects: o
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(e = []) {
    return e instanceof vr ? e : vr.of(e, this.doc.length, this.facet(Qt.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(e) {
    return Jt.of(e.split(this.facet(Qt.lineSeparator) || g_));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(e = 0, r = this.doc.length) {
    return this.doc.sliceString(e, r, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(e) {
    let r = this.config.address[e.id];
    return r == null ? e.default : (Fo(this, r), ql(this, r));
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(e) {
    let r = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (e)
      for (let n in e) {
        let i = e[n];
        i instanceof Mr && this.config.address[i.id] != null && (r[n] = i.spec.toJSON(this.field(e[n]), this));
      }
    return r;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(e, r = {}, n) {
    if (!e || typeof e.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let i = [];
    if (n) {
      for (let s in n)
        if (Object.prototype.hasOwnProperty.call(e, s)) {
          let o = n[s], a = e[s];
          i.push(o.init((l) => o.spec.fromJSON(a, l)));
        }
    }
    return Qt.create({
      doc: e.doc,
      selection: $t.fromJSON(e.selection),
      extensions: r.extensions ? i.concat([r.extensions]) : i
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(e = {}) {
    let r = Ul.resolve(e.extensions || [], /* @__PURE__ */ new Map()), n = e.doc instanceof Jt ? e.doc : Jt.of((e.doc || "").split(r.staticFacet(Qt.lineSeparator) || g_)), i = e.selection ? e.selection instanceof $t ? e.selection : $t.single(e.selection.anchor, e.selection.head) : $t.single(0);
    return zS(i, n.length), r.staticFacet(S_) || (i = i.asSingle()), new Qt(r, n, i, r.dynamicSlots.map(() => null), (s, o) => o.create(s), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(Qt.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(Qt.lineSeparator) || `
`;
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(QS);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(e, ...r) {
    for (let n of this.facet(Qt.phrases))
      if (Object.prototype.hasOwnProperty.call(n, e)) {
        e = n[e];
        break;
      }
    return r.length && (e = e.replace(/\$(\$|\d*)/g, (n, i) => {
      if (i == "$")
        return "$";
      let s = +(i || 1);
      return !s || s > r.length ? n : r[s - 1];
    })), e;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(e, r, n = -1) {
    let i = [];
    for (let s of this.facet(YS))
      for (let o of s(this, r, n))
        Object.prototype.hasOwnProperty.call(o, e) && i.push(o[e]);
    return i;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(e) {
    return TI(this.languageDataAt("wordChars", e).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(e) {
    let { text: r, from: n, length: i } = this.doc.lineAt(e), s = this.charCategorizer(e), o = e - n, a = e - n;
    for (; o > 0; ) {
      let l = Or(r, o, !1);
      if (s(r.slice(l, o)) != dr.Word)
        break;
      o = l;
    }
    for (; a < i; ) {
      let l = Or(r, a);
      if (s(r.slice(a, l)) != dr.Word)
        break;
      a = l;
    }
    return o == a ? null : $t.range(o + n, a + n);
  }
}
Qt.allowMultipleSelections = S_;
Qt.tabSize = /* @__PURE__ */ xt.define({
  combine: (t) => t.length ? t[0] : 4
});
Qt.lineSeparator = HS;
Qt.readOnly = QS;
Qt.phrases = /* @__PURE__ */ xt.define({
  compare(t, e) {
    let r = Object.keys(t), n = Object.keys(e);
    return r.length == n.length && r.every((i) => t[i] == e[i]);
  }
});
Qt.languageData = YS;
Qt.changeFilter = VS;
Qt.transactionFilter = WS;
Qt.transactionExtender = KS;
Yn.reconfigure = /* @__PURE__ */ Gt.define();
function Pn(t, e, r = {}) {
  let n = {};
  for (let i of t)
    for (let s of Object.keys(i)) {
      let o = i[s], a = n[s];
      if (a === void 0)
        n[s] = o;
      else if (!(a === o || o === void 0))
        if (Object.hasOwnProperty.call(r, s))
          n[s] = r[s](a, o);
        else
          throw new Error("Config merge conflict for field " + s);
    }
  for (let i in e)
    n[i] === void 0 && (n[i] = e[i]);
  return n;
}
class ms {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(e) {
    return this == e;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(e, r = e) {
    return C_.create(e, r, this);
  }
}
ms.prototype.startSide = ms.prototype.endSide = 0;
ms.prototype.point = !1;
ms.prototype.mapMode = Wr.TrackDel;
let C_ = class ZS {
  constructor(e, r, n) {
    this.from = e, this.to = r, this.value = n;
  }
  /**
  @internal
  */
  static create(e, r, n) {
    return new ZS(e, r, n);
  }
};
function w_(t, e) {
  return t.from - e.from || t.value.startSide - e.value.startSide;
}
class qh {
  constructor(e, r, n, i) {
    this.from = e, this.to = r, this.value = n, this.maxPoint = i;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(e, r, n, i = 0) {
    let s = n ? this.to : this.from;
    for (let o = i, a = s.length; ; ) {
      if (o == a)
        return o;
      let l = o + a >> 1, c = s[l] - e || (n ? this.value[l].endSide : this.value[l].startSide) - r;
      if (l == o)
        return c >= 0 ? o : a;
      c >= 0 ? a = l : o = l + 1;
    }
  }
  between(e, r, n, i) {
    for (let s = this.findIndex(r, -1e9, !0), o = this.findIndex(n, 1e9, !1, s); s < o; s++)
      if (i(this.from[s] + e, this.to[s] + e, this.value[s]) === !1)
        return !1;
  }
  map(e, r) {
    let n = [], i = [], s = [], o = -1, a = -1;
    for (let l = 0; l < this.value.length; l++) {
      let c = this.value[l], f = this.from[l] + e, m = this.to[l] + e, b, C;
      if (f == m) {
        let N = r.mapPos(f, c.startSide, c.mapMode);
        if (N == null || (b = C = N, c.startSide != c.endSide && (C = r.mapPos(f, c.endSide), C < b)))
          continue;
      } else if (b = r.mapPos(f, c.startSide), C = r.mapPos(m, c.endSide), b > C || b == C && c.startSide > 0 && c.endSide <= 0)
        continue;
      (C - b || c.endSide - c.startSide) < 0 || (o < 0 && (o = b), c.point && (a = Math.max(a, C - b)), n.push(c), i.push(b - o), s.push(C - o));
    }
    return { mapped: n.length ? new qh(i, s, n, a) : null, pos: o };
  }
}
class Zt {
  constructor(e, r, n, i) {
    this.chunkPos = e, this.chunk = r, this.nextLayer = n, this.maxPoint = i;
  }
  /**
  @internal
  */
  static create(e, r, n, i) {
    return new Zt(e, r, n, i);
  }
  /**
  @internal
  */
  get length() {
    let e = this.chunk.length - 1;
    return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let e = this.nextLayer.size;
    for (let r of this.chunk)
      e += r.value.length;
    return e;
  }
  /**
  @internal
  */
  chunkEnd(e) {
    return this.chunkPos[e] + this.chunk[e].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(e) {
    let { add: r = [], sort: n = !1, filterFrom: i = 0, filterTo: s = this.length } = e, o = e.filter;
    if (r.length == 0 && !o)
      return this;
    if (n && (r = r.slice().sort(w_)), this.isEmpty)
      return r.length ? Zt.of(r) : this;
    let a = new JS(this, null, -1).goto(0), l = 0, c = [], f = new fi();
    for (; a.value || l < r.length; )
      if (l < r.length && (a.from - r[l].from || a.startSide - r[l].value.startSide) >= 0) {
        let m = r[l++];
        f.addInner(m.from, m.to, m.value) || c.push(m);
      } else
        a.rangeIndex == 1 && a.chunkIndex < this.chunk.length && (l == r.length || this.chunkEnd(a.chunkIndex) < r[l].from) && (!o || i > this.chunkEnd(a.chunkIndex) || s < this.chunkPos[a.chunkIndex]) && f.addChunk(this.chunkPos[a.chunkIndex], this.chunk[a.chunkIndex]) ? a.nextChunk() : ((!o || i > a.to || s < a.from || o(a.from, a.to, a.value)) && (f.addInner(a.from, a.to, a.value) || c.push(C_.create(a.from, a.to, a.value))), a.next());
    return f.finishInner(this.nextLayer.isEmpty && !c.length ? Zt.empty : this.nextLayer.update({ add: c, filter: o, filterFrom: i, filterTo: s }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(e) {
    if (e.empty || this.isEmpty)
      return this;
    let r = [], n = [], i = -1;
    for (let o = 0; o < this.chunk.length; o++) {
      let a = this.chunkPos[o], l = this.chunk[o], c = e.touchesRange(a, a + l.length);
      if (c === !1)
        i = Math.max(i, l.maxPoint), r.push(l), n.push(e.mapPos(a));
      else if (c === !0) {
        let { mapped: f, pos: m } = l.map(a, e);
        f && (i = Math.max(i, f.maxPoint), r.push(f), n.push(m));
      }
    }
    let s = this.nextLayer.map(e);
    return r.length == 0 ? s : new Zt(n, r, s || Zt.empty, i);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(e, r, n) {
    if (!this.isEmpty) {
      for (let i = 0; i < this.chunk.length; i++) {
        let s = this.chunkPos[i], o = this.chunk[i];
        if (r >= s && e <= s + o.length && o.between(s, e - s, r - s, n) === !1)
          return;
      }
      this.nextLayer.between(e, r, n);
    }
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(e = 0) {
    return oa.from([this]).goto(e);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(e, r = 0) {
    return oa.from(e).goto(r);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(e, r, n, i, s = -1) {
    let o = e.filter((m) => m.maxPoint > 0 || !m.isEmpty && m.maxPoint >= s), a = r.filter((m) => m.maxPoint > 0 || !m.isEmpty && m.maxPoint >= s), l = W0(o, a, n), c = new So(o, l, s), f = new So(a, l, s);
    n.iterGaps((m, b, C) => K0(c, m, f, b, C, i)), n.empty && n.length == 0 && K0(c, 0, f, 0, 0, i);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(e, r, n = 0, i) {
    i == null && (i = 999999999);
    let s = e.filter((f) => !f.isEmpty && r.indexOf(f) < 0), o = r.filter((f) => !f.isEmpty && e.indexOf(f) < 0);
    if (s.length != o.length)
      return !1;
    if (!s.length)
      return !0;
    let a = W0(s, o), l = new So(s, a, 0).goto(n), c = new So(o, a, 0).goto(n);
    for (; ; ) {
      if (l.to != c.to || !A_(l.active, c.active) || l.point && (!c.point || !l.point.eq(c.point)))
        return !1;
      if (l.to > i)
        return !0;
      l.next(), c.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(e, r, n, i, s = -1) {
    let o = new So(e, null, s).goto(r), a = r, l = o.openStart;
    for (; ; ) {
      let c = Math.min(o.to, n);
      if (o.point) {
        let f = o.activeForPoint(o.to), m = o.pointFrom < r ? f.length + 1 : Math.min(f.length, l);
        i.point(a, c, o.point, f, m, o.pointRank), l = Math.min(o.openEnd(c), f.length);
      } else
        c > a && (i.span(a, c, o.active, l), l = o.openEnd(c));
      if (o.to > n)
        return l + (o.point && o.to > n ? 1 : 0);
      a = o.to, o.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(e, r = !1) {
    let n = new fi();
    for (let i of e instanceof C_ ? [e] : r ? CI(e) : e)
      n.add(i.from, i.to, i.value);
    return n.finish();
  }
  /**
  Join an array of range sets into a single set.
  */
  static join(e) {
    if (!e.length)
      return Zt.empty;
    let r = e[e.length - 1];
    for (let n = e.length - 2; n >= 0; n--)
      for (let i = e[n]; i != Zt.empty; i = i.nextLayer)
        r = new Zt(i.chunkPos, i.chunk, r, Math.max(i.maxPoint, r.maxPoint));
    return r;
  }
}
Zt.empty = /* @__PURE__ */ new Zt([], [], null, -1);
function CI(t) {
  if (t.length > 1)
    for (let e = t[0], r = 1; r < t.length; r++) {
      let n = t[r];
      if (w_(e, n) > 0)
        return t.slice().sort(w_);
      e = n;
    }
  return t;
}
Zt.empty.nextLayer = Zt.empty;
class fi {
  finishChunk(e) {
    this.chunks.push(new qh(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, e && (this.from = [], this.to = [], this.value = []);
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(e, r, n) {
    this.addInner(e, r, n) || (this.nextLayer || (this.nextLayer = new fi())).add(e, r, n);
  }
  /**
  @internal
  */
  addInner(e, r, n) {
    let i = e - this.lastTo || n.startSide - this.last.endSide;
    if (i <= 0 && (e - this.lastFrom || n.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return i < 0 ? !1 : (this.from.length == 250 && this.finishChunk(!0), this.chunkStart < 0 && (this.chunkStart = e), this.from.push(e - this.chunkStart), this.to.push(r - this.chunkStart), this.last = n, this.lastFrom = e, this.lastTo = r, this.value.push(n), n.point && (this.maxPoint = Math.max(this.maxPoint, r - e)), !0);
  }
  /**
  @internal
  */
  addChunk(e, r) {
    if ((e - this.lastTo || r.value[0].startSide - this.last.endSide) < 0)
      return !1;
    this.from.length && this.finishChunk(!0), this.setMaxPoint = Math.max(this.setMaxPoint, r.maxPoint), this.chunks.push(r), this.chunkPos.push(e);
    let n = r.value.length - 1;
    return this.last = r.value[n], this.lastFrom = r.from[n] + e, this.lastTo = r.to[n] + e, !0;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(Zt.empty);
  }
  /**
  @internal
  */
  finishInner(e) {
    if (this.from.length && this.finishChunk(!1), this.chunks.length == 0)
      return e;
    let r = Zt.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);
    return this.from = null, r;
  }
}
function W0(t, e, r) {
  let n = /* @__PURE__ */ new Map();
  for (let s of t)
    for (let o = 0; o < s.chunk.length; o++)
      s.chunk[o].maxPoint <= 0 && n.set(s.chunk[o], s.chunkPos[o]);
  let i = /* @__PURE__ */ new Set();
  for (let s of e)
    for (let o = 0; o < s.chunk.length; o++) {
      let a = n.get(s.chunk[o]);
      a != null && (r ? r.mapPos(a) : a) == s.chunkPos[o] && !(r != null && r.touchesRange(a, a + s.chunk[o].length)) && i.add(s.chunk[o]);
    }
  return i;
}
class JS {
  constructor(e, r, n, i = 0) {
    this.layer = e, this.skip = r, this.minPoint = n, this.rank = i;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(e, r = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(e, r, !1), this;
  }
  gotoInner(e, r, n) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let i = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(i) || this.layer.chunkEnd(this.chunkIndex) < e || i.maxPoint < this.minPoint))
        break;
      this.chunkIndex++, n = !1;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let i = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], r, !0);
      (!n || this.rangeIndex < i) && this.setRangeIndex(i);
    }
    this.next();
  }
  forward(e, r) {
    (this.to - e || this.endSide - r) < 0 && this.gotoInner(e, r, !0);
  }
  next() {
    for (; ; )
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9, this.value = null;
        break;
      } else {
        let e = this.layer.chunkPos[this.chunkIndex], r = this.layer.chunk[this.chunkIndex], n = e + r.from[this.rangeIndex];
        if (this.from = n, this.to = e + r.to[this.rangeIndex], this.value = r.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
  }
  setRangeIndex(e) {
    if (e == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip)
        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )
          this.chunkIndex++;
      this.rangeIndex = 0;
    } else
      this.rangeIndex = e;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(e) {
    return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide;
  }
}
class oa {
  constructor(e) {
    this.heap = e;
  }
  static from(e, r = null, n = -1) {
    let i = [];
    for (let s = 0; s < e.length; s++)
      for (let o = e[s]; !o.isEmpty; o = o.nextLayer)
        o.maxPoint >= n && i.push(new JS(o, r, n, s));
    return i.length == 1 ? i[0] : new oa(i);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(e, r = -1e9) {
    for (let n of this.heap)
      n.goto(e, r);
    for (let n = this.heap.length >> 1; n >= 0; n--)
      Np(this.heap, n);
    return this.next(), this;
  }
  forward(e, r) {
    for (let n of this.heap)
      n.forward(e, r);
    for (let n = this.heap.length >> 1; n >= 0; n--)
      Np(this.heap, n);
    (this.to - e || this.value.endSide - r) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0)
      this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let e = this.heap[0];
      this.from = e.from, this.to = e.to, this.value = e.value, this.rank = e.rank, e.value && e.next(), Np(this.heap, 0);
    }
  }
}
function Np(t, e) {
  for (let r = t[e]; ; ) {
    let n = (e << 1) + 1;
    if (n >= t.length)
      break;
    let i = t[n];
    if (n + 1 < t.length && i.compare(t[n + 1]) >= 0 && (i = t[n + 1], n++), r.compare(i) < 0)
      break;
    t[n] = r, t[e] = i, e = n;
  }
}
class So {
  constructor(e, r, n) {
    this.minPoint = n, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = oa.from(e, r, n);
  }
  goto(e, r = -1e9) {
    return this.cursor.goto(e, r), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = e, this.endSide = r, this.openStart = -1, this.next(), this;
  }
  forward(e, r) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - r) < 0; )
      this.removeActive(this.minActive);
    this.cursor.forward(e, r);
  }
  removeActive(e) {
    ja(this.active, e), ja(this.activeTo, e), ja(this.activeRank, e), this.minActive = Q0(this.active, this.activeTo);
  }
  addActive(e) {
    let r = 0, { value: n, to: i, rank: s } = this.cursor;
    for (; r < this.activeRank.length && (s - this.activeRank[r] || i - this.activeTo[r]) > 0; )
      r++;
    Xa(this.active, r, n), Xa(this.activeTo, r, i), Xa(this.activeRank, r, s), e && Xa(e, r, this.cursor.from), this.minActive = Q0(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let e = this.to, r = this.point;
    this.point = null;
    let n = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let i = this.minActive;
      if (i > -1 && (this.activeTo[i] - this.cursor.from || this.active[i].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[i] > e) {
          this.to = this.activeTo[i], this.endSide = this.active[i].endSide;
          break;
        }
        this.removeActive(i), n && ja(n, i);
      } else if (this.cursor.value)
        if (this.cursor.from > e) {
          this.to = this.cursor.from, this.endSide = this.cursor.startSide;
          break;
        } else {
          let s = this.cursor.value;
          if (!s.point)
            this.addActive(n), this.cursor.next();
          else if (r && this.cursor.to == this.to && this.cursor.from < this.cursor.to)
            this.cursor.next();
          else {
            this.point = s, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = s.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
            break;
          }
        }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (n) {
      this.openStart = 0;
      for (let i = n.length - 1; i >= 0 && n[i] < e; i--)
        this.openStart++;
    }
  }
  activeForPoint(e) {
    if (!this.active.length)
      return this.active;
    let r = [];
    for (let n = this.active.length - 1; n >= 0 && !(this.activeRank[n] < this.pointRank); n--)
      (this.activeTo[n] > e || this.activeTo[n] == e && this.active[n].endSide >= this.point.endSide) && r.push(this.active[n]);
    return r.reverse();
  }
  openEnd(e) {
    let r = 0;
    for (let n = this.activeTo.length - 1; n >= 0 && this.activeTo[n] > e; n--)
      r++;
    return r;
  }
}
function K0(t, e, r, n, i, s) {
  t.goto(e), r.goto(n);
  let o = n + i, a = n, l = n - e;
  for (; ; ) {
    let c = t.to + l - r.to || t.endSide - r.endSide, f = c < 0 ? t.to + l : r.to, m = Math.min(f, o);
    if (t.point || r.point ? t.point && r.point && (t.point == r.point || t.point.eq(r.point)) && A_(t.activeForPoint(t.to), r.activeForPoint(r.to)) || s.comparePoint(a, m, t.point, r.point) : m > a && !A_(t.active, r.active) && s.compareRange(a, m, t.active, r.active), f > o)
      break;
    a = f, c <= 0 && t.next(), c >= 0 && r.next();
  }
}
function A_(t, e) {
  if (t.length != e.length)
    return !1;
  for (let r = 0; r < t.length; r++)
    if (t[r] != e[r] && !t[r].eq(e[r]))
      return !1;
  return !0;
}
function ja(t, e) {
  for (let r = e, n = t.length - 1; r < n; r++)
    t[r] = t[r + 1];
  t.pop();
}
function Xa(t, e, r) {
  for (let n = t.length - 1; n >= e; n--)
    t[n + 1] = t[n];
  t[e] = r;
}
function Q0(t, e) {
  let r = -1, n = 1e9;
  for (let i = 0; i < e.length; i++)
    (e[i] - n || t[i].endSide - t[r].endSide) < 0 && (r = i, n = e[i]);
  return r;
}
function uo(t, e, r = t.length) {
  let n = 0;
  for (let i = 0; i < r; )
    t.charCodeAt(i) == 9 ? (n += e - n % e, i++) : (n++, i = Or(t, i));
  return n;
}
function R_(t, e, r, n) {
  for (let i = 0, s = 0; ; ) {
    if (s >= e)
      return i;
    if (i == t.length)
      break;
    s += t.charCodeAt(i) == 9 ? r - s % r : 1, i = Or(t, i);
  }
  return n === !0 ? -1 : t.length;
}
const x_ = "ͼ", j0 = typeof Symbol > "u" ? "__" + x_ : Symbol.for(x_), N_ = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet"), X0 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : {};
class Hi {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(e, r) {
    this.rules = [];
    let { finish: n } = r || {};
    function i(o) {
      return /^@/.test(o) ? [o] : o.split(/,\s*/);
    }
    function s(o, a, l, c) {
      let f = [], m = /^@(\w+)\b/.exec(o[0]), b = m && m[1] == "keyframes";
      if (m && a == null)
        return l.push(o[0] + ";");
      for (let C in a) {
        let N = a[C];
        if (/&/.test(C))
          s(
            C.split(/,\s*/).map((z) => o.map((A) => z.replace(/&/, A))).reduce((z, A) => z.concat(A)),
            N,
            l
          );
        else if (N && typeof N == "object") {
          if (!m)
            throw new RangeError("The value of a property (" + C + ") should be a primitive value.");
          s(i(C), N, f, b);
        } else
          N != null && f.push(C.replace(/_.*/, "").replace(/[A-Z]/g, (z) => "-" + z.toLowerCase()) + ": " + N + ";");
      }
      (f.length || b) && l.push((n && !m && !c ? o.map(n) : o).join(", ") + " {" + f.join(" ") + "}");
    }
    for (let o in e)
      s(i(o), e[o], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join(`
`);
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let e = X0[j0] || 1;
    return X0[j0] = e + 1, x_ + e.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(e, r, n) {
    let i = e[N_], s = n && n.nonce;
    i ? s && i.setNonce(s) : i = new wI(e, s), i.mount(Array.isArray(r) ? r : [r]);
  }
}
let Z0 = /* @__PURE__ */ new Map();
class wI {
  constructor(e, r) {
    let n = e.ownerDocument || e, i = n.defaultView;
    if (!e.head && e.adoptedStyleSheets && i.CSSStyleSheet) {
      let s = Z0.get(n);
      if (s)
        return e.adoptedStyleSheets = [s.sheet, ...e.adoptedStyleSheets], e[N_] = s;
      this.sheet = new i.CSSStyleSheet(), e.adoptedStyleSheets = [this.sheet, ...e.adoptedStyleSheets], Z0.set(n, this);
    } else {
      this.styleTag = n.createElement("style"), r && this.styleTag.setAttribute("nonce", r);
      let s = e.head || e;
      s.insertBefore(this.styleTag, s.firstChild);
    }
    this.modules = [], e[N_] = this;
  }
  mount(e) {
    let r = this.sheet, n = 0, i = 0;
    for (let s = 0; s < e.length; s++) {
      let o = e[s], a = this.modules.indexOf(o);
      if (a < i && a > -1 && (this.modules.splice(a, 1), i--, a = -1), a == -1) {
        if (this.modules.splice(i++, 0, o), r)
          for (let l = 0; l < o.rules.length; l++)
            r.insertRule(o.rules[l], n++);
      } else {
        for (; i < a; )
          n += this.modules[i++].rules.length;
        n += o.rules.length, i++;
      }
    }
    if (!r) {
      let s = "";
      for (let o = 0; o < this.modules.length; o++)
        s += this.modules[o].getRules() + `
`;
      this.styleTag.textContent = s;
    }
  }
  setNonce(e) {
    this.styleTag && this.styleTag.getAttribute("nonce") != e && this.styleTag.setAttribute("nonce", e);
  }
}
var Vi = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, aa = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, AI = typeof navigator < "u" && /Mac/.test(navigator.platform), RI = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var Nr = 0; Nr < 10; Nr++)
  Vi[48 + Nr] = Vi[96 + Nr] = String(Nr);
for (var Nr = 1; Nr <= 24; Nr++)
  Vi[Nr + 111] = "F" + Nr;
for (var Nr = 65; Nr <= 90; Nr++)
  Vi[Nr] = String.fromCharCode(Nr + 32), aa[Nr] = String.fromCharCode(Nr);
for (var kp in Vi)
  aa.hasOwnProperty(kp) || (aa[kp] = Vi[kp]);
function xI(t) {
  var e = AI && t.metaKey && t.shiftKey && !t.ctrlKey && !t.altKey || RI && t.shiftKey && t.key && t.key.length == 1 || t.key == "Unidentified", r = !e && t.key || (t.shiftKey ? aa : Vi)[t.keyCode] || t.key || "Unidentified";
  return r == "Esc" && (r = "Escape"), r == "Del" && (r = "Delete"), r == "Left" && (r = "ArrowLeft"), r == "Up" && (r = "ArrowUp"), r == "Right" && (r = "ArrowRight"), r == "Down" && (r = "ArrowDown"), r;
}
function zl(t) {
  let e;
  return t.nodeType == 11 ? e = t.getSelection ? t : t.ownerDocument : e = t, e.getSelection();
}
function k_(t, e) {
  return e ? t == e || t.contains(e.nodeType != 1 ? e.parentNode : e) : !1;
}
function NI(t) {
  let e = t.activeElement;
  for (; e && e.shadowRoot; )
    e = e.shadowRoot.activeElement;
  return e;
}
function wl(t, e) {
  if (!e.anchorNode)
    return !1;
  try {
    return k_(t, e.anchorNode);
  } catch {
    return !1;
  }
}
function Zs(t) {
  return t.nodeType == 3 ? gs(t, 0, t.nodeValue.length).getClientRects() : t.nodeType == 1 ? t.getClientRects() : [];
}
function Bo(t, e, r, n) {
  return r ? J0(t, e, r, n, -1) || J0(t, e, r, n, 1) : !1;
}
function la(t) {
  for (var e = 0; ; e++)
    if (t = t.previousSibling, !t)
      return e;
}
function J0(t, e, r, n, i) {
  for (; ; ) {
    if (t == r && e == n)
      return !0;
    if (e == (i < 0 ? 0 : pi(t))) {
      if (t.nodeName == "DIV")
        return !1;
      let s = t.parentNode;
      if (!s || s.nodeType != 1)
        return !1;
      e = la(t) + (i < 0 ? 0 : 1), t = s;
    } else if (t.nodeType == 1) {
      if (t = t.childNodes[e + (i < 0 ? -1 : 0)], t.nodeType == 1 && t.contentEditable == "false")
        return !1;
      e = i < 0 ? pi(t) : 0;
    } else
      return !1;
  }
}
function pi(t) {
  return t.nodeType == 3 ? t.nodeValue.length : t.childNodes.length;
}
function bc(t, e) {
  let r = e ? t.left : t.right;
  return { left: r, right: r, top: t.top, bottom: t.bottom };
}
function kI(t) {
  return {
    left: 0,
    right: t.innerWidth,
    top: 0,
    bottom: t.innerHeight
  };
}
function ey(t, e) {
  let r = e.width / t.offsetWidth, n = e.height / t.offsetHeight;
  return (r > 0.995 && r < 1.005 || !isFinite(r) || Math.abs(e.width - t.offsetWidth) < 1) && (r = 1), (n > 0.995 && n < 1.005 || !isFinite(n) || Math.abs(e.height - t.offsetHeight) < 1) && (n = 1), { scaleX: r, scaleY: n };
}
function II(t, e, r, n, i, s, o, a) {
  let l = t.ownerDocument, c = l.defaultView || window;
  for (let f = t, m = !1; f && !m; )
    if (f.nodeType == 1) {
      let b, C = f == l.body, N = 1, z = 1;
      if (C)
        b = kI(c);
      else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(f).position) && (m = !0), f.scrollHeight <= f.clientHeight && f.scrollWidth <= f.clientWidth) {
          f = f.assignedSlot || f.parentNode;
          continue;
        }
        let Te = f.getBoundingClientRect();
        ({ scaleX: N, scaleY: z } = ey(f, Te)), b = {
          left: Te.left,
          right: Te.left + f.clientWidth * N,
          top: Te.top,
          bottom: Te.top + f.clientHeight * z
        };
      }
      let A = 0, Q = 0;
      if (i == "nearest")
        e.top < b.top ? (Q = -(b.top - e.top + o), r > 0 && e.bottom > b.bottom + Q && (Q = e.bottom - b.bottom + Q + o)) : e.bottom > b.bottom && (Q = e.bottom - b.bottom + o, r < 0 && e.top - Q < b.top && (Q = -(b.top + Q - e.top + o)));
      else {
        let Te = e.bottom - e.top, ce = b.bottom - b.top;
        Q = (i == "center" && Te <= ce ? e.top + Te / 2 - ce / 2 : i == "start" || i == "center" && r < 0 ? e.top - o : e.bottom - ce + o) - b.top;
      }
      if (n == "nearest" ? e.left < b.left ? (A = -(b.left - e.left + s), r > 0 && e.right > b.right + A && (A = e.right - b.right + A + s)) : e.right > b.right && (A = e.right - b.right + s, r < 0 && e.left < b.left + A && (A = -(b.left + A - e.left + s))) : A = (n == "center" ? e.left + (e.right - e.left) / 2 - (b.right - b.left) / 2 : n == "start" == a ? e.left - s : e.right - (b.right - b.left) + s) - b.left, A || Q)
        if (C)
          c.scrollBy(A, Q);
        else {
          let Te = 0, ce = 0;
          if (Q) {
            let ge = f.scrollTop;
            f.scrollTop += Q / z, ce = (f.scrollTop - ge) * z;
          }
          if (A) {
            let ge = f.scrollLeft;
            f.scrollLeft += A / N, Te = (f.scrollLeft - ge) * N;
          }
          e = {
            left: e.left - Te,
            top: e.top - ce,
            right: e.right - Te,
            bottom: e.bottom - ce
          }, Te && Math.abs(Te - A) < 1 && (n = "nearest"), ce && Math.abs(ce - Q) < 1 && (i = "nearest");
        }
      if (C)
        break;
      f = f.assignedSlot || f.parentNode;
    } else if (f.nodeType == 11)
      f = f.host;
    else
      break;
}
function OI(t) {
  let e = t.ownerDocument;
  for (let r = t.parentNode; r && r != e.body; )
    if (r.nodeType == 1) {
      if (r.scrollHeight > r.clientHeight || r.scrollWidth > r.clientWidth)
        return r;
      r = r.assignedSlot || r.parentNode;
    } else if (r.nodeType == 11)
      r = r.host;
    else
      break;
  return null;
}
class DI {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(e) {
    return this.anchorNode == e.anchorNode && this.anchorOffset == e.anchorOffset && this.focusNode == e.focusNode && this.focusOffset == e.focusOffset;
  }
  setRange(e) {
    let { anchorNode: r, focusNode: n } = e;
    this.set(r, Math.min(e.anchorOffset, r ? pi(r) : 0), n, Math.min(e.focusOffset, n ? pi(n) : 0));
  }
  set(e, r, n, i) {
    this.anchorNode = e, this.anchorOffset = r, this.focusNode = n, this.focusOffset = i;
  }
}
let xs = null;
function ty(t) {
  if (t.setActive)
    return t.setActive();
  if (xs)
    return t.focus(xs);
  let e = [];
  for (let r = t; r && (e.push(r, r.scrollTop, r.scrollLeft), r != r.ownerDocument); r = r.parentNode)
    ;
  if (t.focus(xs == null ? {
    get preventScroll() {
      return xs = { preventScroll: !0 }, !0;
    }
  } : void 0), !xs) {
    xs = !1;
    for (let r = 0; r < e.length; ) {
      let n = e[r++], i = e[r++], s = e[r++];
      n.scrollTop != i && (n.scrollTop = i), n.scrollLeft != s && (n.scrollLeft = s);
    }
  }
}
let eE;
function gs(t, e, r = e) {
  let n = eE || (eE = document.createRange());
  return n.setEnd(t, r), n.setStart(t, e), n;
}
function zs(t, e, r) {
  let n = { key: e, code: e, keyCode: r, which: r, cancelable: !0 }, i = new KeyboardEvent("keydown", n);
  i.synthetic = !0, t.dispatchEvent(i);
  let s = new KeyboardEvent("keyup", n);
  return s.synthetic = !0, t.dispatchEvent(s), i.defaultPrevented || s.defaultPrevented;
}
function MI(t) {
  for (; t; ) {
    if (t && (t.nodeType == 9 || t.nodeType == 11 && t.host))
      return t;
    t = t.assignedSlot || t.parentNode;
  }
  return null;
}
function ry(t) {
  for (; t.attributes.length; )
    t.removeAttributeNode(t.attributes[0]);
}
function LI(t, e) {
  let r = e.focusNode, n = e.focusOffset;
  if (!r || e.anchorNode != r || e.anchorOffset != n)
    return !1;
  for (n = Math.min(n, pi(r)); ; )
    if (n) {
      if (r.nodeType != 1)
        return !1;
      let i = r.childNodes[n - 1];
      i.contentEditable == "false" ? n-- : (r = i, n = pi(r));
    } else {
      if (r == t)
        return !0;
      n = la(r), r = r.parentNode;
    }
}
function ny(t) {
  return t.scrollTop > Math.max(1, t.scrollHeight - t.clientHeight - 4);
}
class Fr {
  constructor(e, r, n = !0) {
    this.node = e, this.offset = r, this.precise = n;
  }
  static before(e, r) {
    return new Fr(e.parentNode, la(e), r);
  }
  static after(e, r) {
    return new Fr(e.parentNode, la(e) + 1, r);
  }
}
const zh = [];
class ar {
  constructor() {
    this.parent = null, this.dom = null, this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(e) {
    let r = this.posAtStart;
    for (let n of this.children) {
      if (n == e)
        return r;
      r += n.length + n.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(e) {
    return this.posBefore(e) + e.length;
  }
  sync(e, r) {
    if (this.flags & 2) {
      let n = this.dom, i = null, s;
      for (let o of this.children) {
        if (o.flags & 7) {
          if (!o.dom && (s = i ? i.nextSibling : n.firstChild)) {
            let a = ar.get(s);
            (!a || !a.parent && a.canReuseDOM(o)) && o.reuseDOM(s);
          }
          o.sync(e, r), o.flags &= -8;
        }
        if (s = i ? i.nextSibling : n.firstChild, r && !r.written && r.node == n && s != o.dom && (r.written = !0), o.dom.parentNode == n)
          for (; s && s != o.dom; )
            s = tE(s);
        else
          n.insertBefore(o.dom, s);
        i = o.dom;
      }
      for (s = i ? i.nextSibling : n.firstChild, s && r && r.node == n && (r.written = !0); s; )
        s = tE(s);
    } else if (this.flags & 1)
      for (let n of this.children)
        n.flags & 7 && (n.sync(e, r), n.flags &= -8);
  }
  reuseDOM(e) {
  }
  localPosFromDOM(e, r) {
    let n;
    if (e == this.dom)
      n = this.dom.childNodes[r];
    else {
      let i = pi(e) == 0 ? 0 : r == 0 ? -1 : 1;
      for (; ; ) {
        let s = e.parentNode;
        if (s == this.dom)
          break;
        i == 0 && s.firstChild != s.lastChild && (e == s.firstChild ? i = -1 : i = 1), e = s;
      }
      i < 0 ? n = e : n = e.nextSibling;
    }
    if (n == this.dom.firstChild)
      return 0;
    for (; n && !ar.get(n); )
      n = n.nextSibling;
    if (!n)
      return this.length;
    for (let i = 0, s = 0; ; i++) {
      let o = this.children[i];
      if (o.dom == n)
        return s;
      s += o.length + o.breakAfter;
    }
  }
  domBoundsAround(e, r, n = 0) {
    let i = -1, s = -1, o = -1, a = -1;
    for (let l = 0, c = n, f = n; l < this.children.length; l++) {
      let m = this.children[l], b = c + m.length;
      if (c < e && b > r)
        return m.domBoundsAround(e, r, c);
      if (b >= e && i == -1 && (i = l, s = c), c > r && m.dom.parentNode == this.dom) {
        o = l, a = f;
        break;
      }
      f = b, c = b + m.breakAfter;
    }
    return {
      from: s,
      to: a < 0 ? n + this.length : a,
      startDOM: (i ? this.children[i - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: o < this.children.length && o >= 0 ? this.children[o].dom : null
    };
  }
  markDirty(e = !1) {
    this.flags |= 2, this.markParentsDirty(e);
  }
  markParentsDirty(e) {
    for (let r = this.parent; r; r = r.parent) {
      if (e && (r.flags |= 2), r.flags & 1)
        return;
      r.flags |= 1, e = !1;
    }
  }
  setParent(e) {
    this.parent != e && (this.parent = e, this.flags & 7 && this.markParentsDirty(!0));
  }
  setDOM(e) {
    this.dom != e && (this.dom && (this.dom.cmView = null), this.dom = e, e.cmView = this);
  }
  get rootView() {
    for (let e = this; ; ) {
      let r = e.parent;
      if (!r)
        return e;
      e = r;
    }
  }
  replaceChildren(e, r, n = zh) {
    this.markDirty();
    for (let i = e; i < r; i++) {
      let s = this.children[i];
      s.parent == this && n.indexOf(s) < 0 && s.destroy();
    }
    this.children.splice(e, r - e, ...n);
    for (let i = 0; i < n.length; i++)
      n[i].setParent(this);
  }
  ignoreMutation(e) {
    return !1;
  }
  ignoreEvent(e) {
    return !1;
  }
  childCursor(e = this.length) {
    return new iy(this.children, e, this.children.length);
  }
  childPos(e, r = 1) {
    return this.childCursor().findPos(e, r);
  }
  toString() {
    let e = this.constructor.name.replace("View", "");
    return e + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (e == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(e) {
    return e.cmView;
  }
  get isEditable() {
    return !0;
  }
  get isWidget() {
    return !1;
  }
  get isHidden() {
    return !1;
  }
  merge(e, r, n, i, s, o) {
    return !1;
  }
  become(e) {
    return !1;
  }
  canReuseDOM(e) {
    return e.constructor == this.constructor && !((this.flags | e.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    for (let e of this.children)
      e.parent == this && e.destroy();
    this.parent = null;
  }
}
ar.prototype.breakAfter = 0;
function tE(t) {
  let e = t.nextSibling;
  return t.parentNode.removeChild(t), e;
}
class iy {
  constructor(e, r, n) {
    this.children = e, this.pos = r, this.i = n, this.off = 0;
  }
  findPos(e, r = 1) {
    for (; ; ) {
      if (e > this.pos || e == this.pos && (r > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
        return this.off = e - this.pos, this;
      let n = this.children[--this.i];
      this.pos -= n.length + n.breakAfter;
    }
  }
}
function sy(t, e, r, n, i, s, o, a, l) {
  let { children: c } = t, f = c.length ? c[e] : null, m = s.length ? s[s.length - 1] : null, b = m ? m.breakAfter : o;
  if (!(e == n && f && !o && !b && s.length < 2 && f.merge(r, i, s.length ? m : null, r == 0, a, l))) {
    if (n < c.length) {
      let C = c[n];
      C && (i < C.length || C.breakAfter && (m != null && m.breakAfter)) ? (e == n && (C = C.split(i), i = 0), !b && m && C.merge(0, i, m, !0, 0, l) ? s[s.length - 1] = C : ((i || C.children.length && !C.children[0].length) && C.merge(0, i, null, !1, 0, l), s.push(C))) : C != null && C.breakAfter && (m ? m.breakAfter = 1 : o = 1), n++;
    }
    for (f && (f.breakAfter = o, r > 0 && (!o && s.length && f.merge(r, f.length, s[0], !1, a, 0) ? f.breakAfter = s.shift().breakAfter : (r < f.length || f.children.length && f.children[f.children.length - 1].length == 0) && f.merge(r, f.length, null, !1, a, 0), e++)); e < n && s.length; )
      if (c[n - 1].become(s[s.length - 1]))
        n--, s.pop(), l = s.length ? 0 : a;
      else if (c[e].become(s[0]))
        e++, s.shift(), a = s.length ? 0 : l;
      else
        break;
    !s.length && e && n < c.length && !c[e - 1].breakAfter && c[n].merge(0, 0, c[e - 1], !1, a, l) && e--, (e < n || s.length) && t.replaceChildren(e, n, s);
  }
}
function oy(t, e, r, n, i, s) {
  let o = t.childCursor(), { i: a, off: l } = o.findPos(r, 1), { i: c, off: f } = o.findPos(e, -1), m = e - r;
  for (let b of n)
    m += b.length;
  t.length += m, sy(t, c, f, a, l, n, 0, i, s);
}
let fn = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" }, I_ = typeof document < "u" ? document : { documentElement: { style: {} } };
const O_ = /* @__PURE__ */ /Edge\/(\d+)/.exec(fn.userAgent), ay = /* @__PURE__ */ /MSIE \d/.test(fn.userAgent), D_ = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(fn.userAgent), Ec = !!(ay || D_ || O_), rE = !Ec && /* @__PURE__ */ /gecko\/(\d+)/i.test(fn.userAgent), Ip = !Ec && /* @__PURE__ */ /Chrome\/(\d+)/.exec(fn.userAgent), nE = "webkitFontSmoothing" in I_.documentElement.style, ly = !Ec && /* @__PURE__ */ /Apple Computer/.test(fn.vendor), iE = ly && (/* @__PURE__ */ /Mobile\/\w+/.test(fn.userAgent) || fn.maxTouchPoints > 2);
var kt = {
  mac: iE || /* @__PURE__ */ /Mac/.test(fn.platform),
  windows: /* @__PURE__ */ /Win/.test(fn.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(fn.platform),
  ie: Ec,
  ie_version: ay ? I_.documentMode || 6 : D_ ? +D_[1] : O_ ? +O_[1] : 0,
  gecko: rE,
  gecko_version: rE ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(fn.userAgent) || [0, 0])[1] : 0,
  chrome: !!Ip,
  chrome_version: Ip ? +Ip[1] : 0,
  ios: iE,
  android: /* @__PURE__ */ /Android\b/.test(fn.userAgent),
  webkit: nE,
  safari: ly,
  webkit_version: nE ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: I_.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const PI = 256;
class _i extends ar {
  constructor(e) {
    super(), this.text = e;
  }
  get length() {
    return this.text.length;
  }
  createDOM(e) {
    this.setDOM(e || document.createTextNode(this.text));
  }
  sync(e, r) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (r && r.node == this.dom && (r.written = !0), this.dom.nodeValue = this.text);
  }
  reuseDOM(e) {
    e.nodeType == 3 && this.createDOM(e);
  }
  merge(e, r, n) {
    return this.flags & 8 || n && (!(n instanceof _i) || this.length - (r - e) + n.length > PI || n.flags & 8) ? !1 : (this.text = this.text.slice(0, e) + (n ? n.text : "") + this.text.slice(r), this.markDirty(), !0);
  }
  split(e) {
    let r = new _i(this.text.slice(e));
    return this.text = this.text.slice(0, e), this.markDirty(), r.flags |= this.flags & 8, r;
  }
  localPosFromDOM(e, r) {
    return e == this.dom ? r : r ? this.text.length : 0;
  }
  domAtPos(e) {
    return new Fr(this.dom, e);
  }
  domBoundsAround(e, r, n) {
    return { from: n, to: n + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(e, r) {
    return FI(this.dom, e, r);
  }
}
class hi extends ar {
  constructor(e, r = [], n = 0) {
    super(), this.mark = e, this.children = r, this.length = n;
    for (let i of r)
      i.setParent(this);
  }
  setAttrs(e) {
    if (ry(e), this.mark.class && (e.className = this.mark.class), this.mark.attrs)
      for (let r in this.mark.attrs)
        e.setAttribute(r, this.mark.attrs[r]);
    return e;
  }
  canReuseDOM(e) {
    return super.canReuseDOM(e) && !((this.flags | e.flags) & 8);
  }
  reuseDOM(e) {
    e.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, r) {
    this.dom ? this.flags & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(e, r);
  }
  merge(e, r, n, i, s, o) {
    return n && (!(n instanceof hi && n.mark.eq(this.mark)) || e && s <= 0 || r < this.length && o <= 0) ? !1 : (oy(this, e, r, n ? n.children.slice() : [], s - 1, o - 1), this.markDirty(), !0);
  }
  split(e) {
    let r = [], n = 0, i = -1, s = 0;
    for (let a of this.children) {
      let l = n + a.length;
      l > e && r.push(n < e ? a.split(e - n) : a), i < 0 && n >= e && (i = s), n = l, s++;
    }
    let o = this.length - e;
    return this.length = e, i > -1 && (this.children.length = i, this.markDirty()), new hi(this.mark, r, o);
  }
  domAtPos(e) {
    return cy(this, e);
  }
  coordsAt(e, r) {
    return dy(this, e, r);
  }
}
function FI(t, e, r) {
  let n = t.nodeValue.length;
  e > n && (e = n);
  let i = e, s = e, o = 0;
  e == 0 && r < 0 || e == n && r >= 0 ? kt.chrome || kt.gecko || (e ? (i--, o = 1) : s < n && (s++, o = -1)) : r < 0 ? i-- : s < n && s++;
  let a = gs(t, i, s).getClientRects();
  if (!a.length)
    return null;
  let l = a[(o ? o < 0 : r >= 0) ? 0 : a.length - 1];
  return kt.safari && !o && l.width == 0 && (l = Array.prototype.find.call(a, (c) => c.width) || l), o ? bc(l, o < 0) : l || null;
}
class xi extends ar {
  static create(e, r, n) {
    return new xi(e, r, n);
  }
  constructor(e, r, n) {
    super(), this.widget = e, this.length = r, this.side = n, this.prevWidget = null;
  }
  split(e) {
    let r = xi.create(this.widget, this.length - e, this.side);
    return this.length -= e, r;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  getSide() {
    return this.side;
  }
  merge(e, r, n, i, s, o) {
    return n && (!(n instanceof xi) || !this.widget.compare(n.widget) || e > 0 && s <= 0 || r < this.length && o <= 0) ? !1 : (this.length = e + (n ? n.length : 0) + (this.length - r), !0);
  }
  become(e) {
    return e instanceof xi && e.side == this.side && this.widget.constructor == e.widget.constructor ? (this.widget.compare(e.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return Jt.empty;
    let e = this;
    for (; e.parent; )
      e = e.parent;
    let { view: r } = e, n = r && r.state.doc, i = this.posAtStart;
    return n ? n.slice(i, i + this.length) : Jt.empty;
  }
  domAtPos(e) {
    return (this.length ? e == 0 : this.side > 0) ? Fr.before(this.dom) : Fr.after(this.dom, e == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e, r) {
    let n = this.widget.coordsAt(this.dom, e, r);
    if (n)
      return n;
    let i = this.dom.getClientRects(), s = null;
    if (!i.length)
      return null;
    let o = this.side ? this.side < 0 : e > 0;
    for (let a = o ? i.length - 1 : 0; s = i[a], !(e > 0 ? a == 0 : a == i.length - 1 || s.top < s.bottom); a += o ? -1 : 1)
      ;
    return bc(s, !o);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}
class Js extends ar {
  constructor(e) {
    super(), this.side = e;
  }
  get length() {
    return 0;
  }
  merge() {
    return !1;
  }
  become(e) {
    return e instanceof Js && e.side == this.side;
  }
  split() {
    return new Js(this.side);
  }
  sync() {
    if (!this.dom) {
      let e = document.createElement("img");
      e.className = "cm-widgetBuffer", e.setAttribute("aria-hidden", "true"), this.setDOM(e);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(e) {
    return this.side > 0 ? Fr.before(this.dom) : Fr.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return Jt.empty;
  }
  get isHidden() {
    return !0;
  }
}
_i.prototype.children = xi.prototype.children = Js.prototype.children = zh;
function cy(t, e) {
  let r = t.dom, { children: n } = t, i = 0;
  for (let s = 0; i < n.length; i++) {
    let o = n[i], a = s + o.length;
    if (!(a == s && o.getSide() <= 0)) {
      if (e > s && e < a && o.dom.parentNode == r)
        return o.domAtPos(e - s);
      if (e <= s)
        break;
      s = a;
    }
  }
  for (let s = i; s > 0; s--) {
    let o = n[s - 1];
    if (o.dom.parentNode == r)
      return o.domAtPos(o.length);
  }
  for (let s = i; s < n.length; s++) {
    let o = n[s];
    if (o.dom.parentNode == r)
      return o.domAtPos(0);
  }
  return new Fr(r, 0);
}
function uy(t, e, r) {
  let n, { children: i } = t;
  r > 0 && e instanceof hi && i.length && (n = i[i.length - 1]) instanceof hi && n.mark.eq(e.mark) ? uy(n, e.children[0], r - 1) : (i.push(e), e.setParent(t)), t.length += e.length;
}
function dy(t, e, r) {
  let n = null, i = -1, s = null, o = -1;
  function a(c, f) {
    for (let m = 0, b = 0; m < c.children.length && b <= f; m++) {
      let C = c.children[m], N = b + C.length;
      N >= f && (C.children.length ? a(C, f - b) : (!s || s.isHidden && r > 0) && (N > f || b == N && C.getSide() > 0) ? (s = C, o = f - b) : (b < f || b == N && C.getSide() < 0 && !C.isHidden) && (n = C, i = f - b)), b = N;
    }
  }
  a(t, e);
  let l = (r < 0 ? n : s) || n || s;
  return l ? l.coordsAt(Math.max(0, l == n ? i : o), r) : BI(t);
}
function BI(t) {
  let e = t.dom.lastChild;
  if (!e)
    return t.dom.getBoundingClientRect();
  let r = Zs(e);
  return r[r.length - 1] || null;
}
function M_(t, e) {
  for (let r in t)
    r == "class" && e.class ? e.class += " " + t.class : r == "style" && e.style ? e.style += ";" + t.style : e[r] = t[r];
  return e;
}
const sE = /* @__PURE__ */ Object.create(null);
function Gh(t, e, r) {
  if (t == e)
    return !0;
  t || (t = sE), e || (e = sE);
  let n = Object.keys(t), i = Object.keys(e);
  if (n.length - (r && n.indexOf(r) > -1 ? 1 : 0) != i.length - (r && i.indexOf(r) > -1 ? 1 : 0))
    return !1;
  for (let s of n)
    if (s != r && (i.indexOf(s) == -1 || t[s] !== e[s]))
      return !1;
  return !0;
}
function L_(t, e, r) {
  let n = !1;
  if (e)
    for (let i in e)
      r && i in r || (n = !0, i == "style" ? t.style.cssText = "" : t.removeAttribute(i));
  if (r)
    for (let i in r)
      e && e[i] == r[i] || (n = !0, i == "style" ? t.style.cssText = r[i] : t.setAttribute(i, r[i]));
  return n;
}
function UI(t) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let r = 0; r < t.attributes.length; r++) {
    let n = t.attributes[r];
    e[n.name] = n.value;
  }
  return e;
}
class Er extends ar {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  // Consumes source
  merge(e, r, n, i, s, o) {
    if (n) {
      if (!(n instanceof Er))
        return !1;
      this.dom || n.transferDOM(this);
    }
    return i && this.setDeco(n ? n.attrs : null), oy(this, e, r, n ? n.children.slice() : [], s, o), !0;
  }
  split(e) {
    let r = new Er();
    if (r.breakAfter = this.breakAfter, this.length == 0)
      return r;
    let { i: n, off: i } = this.childPos(e);
    i && (r.append(this.children[n].split(i), 0), this.children[n].merge(i, this.children[n].length, null, !1, 0, 0), n++);
    for (let s = n; s < this.children.length; s++)
      r.append(this.children[s], 0);
    for (; n > 0 && this.children[n - 1].length == 0; )
      this.children[--n].destroy();
    return this.children.length = n, this.markDirty(), this.length = e, r;
  }
  transferDOM(e) {
    this.dom && (this.markDirty(), e.setDOM(this.dom), e.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(e) {
    Gh(this.attrs, e) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = e);
  }
  append(e, r) {
    uy(this, e, r);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(e) {
    let r = e.spec.attributes, n = e.spec.class;
    r && (this.attrs = M_(r, this.attrs || {})), n && (this.attrs = M_({ class: n }, this.attrs || {}));
  }
  domAtPos(e) {
    return cy(this, e);
  }
  reuseDOM(e) {
    e.nodeName == "DIV" && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, r) {
    var n;
    this.dom ? this.flags & 4 && (ry(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (L_(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(e, r);
    let i = this.dom.lastChild;
    for (; i && ar.get(i) instanceof hi; )
      i = i.lastChild;
    if (!i || !this.length || i.nodeName != "BR" && ((n = ar.get(i)) === null || n === void 0 ? void 0 : n.isEditable) == !1 && (!kt.ios || !this.children.some((s) => s instanceof _i))) {
      let s = document.createElement("BR");
      s.cmIgnore = !0, this.dom.appendChild(s);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let e = 0, r;
    for (let n of this.children) {
      if (!(n instanceof _i) || /[^ -~]/.test(n.text))
        return null;
      let i = Zs(n.dom);
      if (i.length != 1)
        return null;
      e += i[0].width, r = i[0].height;
    }
    return e ? {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: e / this.length,
      textHeight: r
    } : null;
  }
  coordsAt(e, r) {
    let n = dy(this, e, r);
    if (!this.children.length && n && this.parent) {
      let { heightOracle: i } = this.parent.view.viewState, s = n.bottom - n.top;
      if (Math.abs(s - i.lineHeight) < 2 && i.textHeight < s) {
        let o = (s - i.textHeight) / 2;
        return { top: n.top + o, bottom: n.bottom - o, left: n.left, right: n.left };
      }
    }
    return n;
  }
  become(e) {
    return !1;
  }
  covers() {
    return !0;
  }
  static find(e, r) {
    for (let n = 0, i = 0; n < e.children.length; n++) {
      let s = e.children[n], o = i + s.length;
      if (o >= r) {
        if (s instanceof Er)
          return s;
        if (o > r)
          break;
      }
      i = o + s.breakAfter;
    }
    return null;
  }
}
class Di extends ar {
  constructor(e, r, n) {
    super(), this.widget = e, this.length = r, this.deco = n, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(e, r, n, i, s, o) {
    return n && (!(n instanceof Di) || !this.widget.compare(n.widget) || e > 0 && s <= 0 || r < this.length && o <= 0) ? !1 : (this.length = e + (n ? n.length : 0) + (this.length - r), !0);
  }
  domAtPos(e) {
    return e == 0 ? Fr.before(this.dom) : Fr.after(this.dom, e == this.length);
  }
  split(e) {
    let r = this.length - e;
    this.length = e;
    let n = new Di(this.widget, r, this.deco);
    return n.breakAfter = this.breakAfter, n;
  }
  get children() {
    return zh;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Jt.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(e) {
    return e instanceof Di && e.widget.constructor == this.widget.constructor ? (e.widget.compare(this.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, this.deco = e.deco, this.breakAfter = e.breakAfter, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  coordsAt(e, r) {
    return this.widget.coordsAt(this.dom, e, r);
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
  covers(e) {
    let { startSide: r, endSide: n } = this.deco;
    return r == n ? !1 : e < 0 ? r < 0 : n > 0;
  }
}
class bi {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(e) {
    return !1;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(e, r) {
    return !1;
  }
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(e) {
    return !0;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(e, r, n) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return !1;
  }
  /**
  @internal
  */
  get editable() {
    return !1;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(e) {
  }
}
var Kr = /* @__PURE__ */ function(t) {
  return t[t.Text = 0] = "Text", t[t.WidgetBefore = 1] = "WidgetBefore", t[t.WidgetAfter = 2] = "WidgetAfter", t[t.WidgetRange = 3] = "WidgetRange", t;
}(Kr || (Kr = {}));
class Ot extends ms {
  constructor(e, r, n, i) {
    super(), this.startSide = e, this.endSide = r, this.widget = n, this.spec = i;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return !1;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(e) {
    return new Ma(e);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(e) {
    let r = Math.max(-1e4, Math.min(1e4, e.side || 0)), n = !!e.block;
    return r += n && !e.inlineOrder ? r > 0 ? 3e8 : -4e8 : r > 0 ? 1e8 : -1e8, new Wi(e, r, r, n, e.widget || null, !1);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(e) {
    let r = !!e.block, n, i;
    if (e.isBlockGap)
      n = -5e8, i = 4e8;
    else {
      let { start: s, end: o } = fy(e, r);
      n = (s ? r ? -3e8 : -1 : 5e8) - 1, i = (o ? r ? 2e8 : 1 : -6e8) + 1;
    }
    return new Wi(e, n, i, r, e.widget || null, !0);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(e) {
    return new La(e);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(e, r = !1) {
    return Zt.of(e, r);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : !1;
  }
}
Ot.none = Zt.empty;
class Ma extends Ot {
  constructor(e) {
    let { start: r, end: n } = fy(e);
    super(r ? -1 : 5e8, n ? 1 : -6e8, null, e), this.tagName = e.tagName || "span", this.class = e.class || "", this.attrs = e.attributes || null;
  }
  eq(e) {
    var r, n;
    return this == e || e instanceof Ma && this.tagName == e.tagName && (this.class || ((r = this.attrs) === null || r === void 0 ? void 0 : r.class)) == (e.class || ((n = e.attrs) === null || n === void 0 ? void 0 : n.class)) && Gh(this.attrs, e.attrs, "class");
  }
  range(e, r = e) {
    if (e >= r)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(e, r);
  }
}
Ma.prototype.point = !1;
class La extends Ot {
  constructor(e) {
    super(-2e8, -2e8, null, e);
  }
  eq(e) {
    return e instanceof La && this.spec.class == e.spec.class && Gh(this.spec.attributes, e.spec.attributes);
  }
  range(e, r = e) {
    if (r != e)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(e, r);
  }
}
La.prototype.mapMode = Wr.TrackBefore;
La.prototype.point = !0;
class Wi extends Ot {
  constructor(e, r, n, i, s, o) {
    super(r, n, s, e), this.block = i, this.isReplace = o, this.mapMode = i ? r <= 0 ? Wr.TrackBefore : Wr.TrackAfter : Wr.TrackDel;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? Kr.WidgetRange : this.startSide <= 0 ? Kr.WidgetBefore : Kr.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(e) {
    return e instanceof Wi && qI(this.widget, e.widget) && this.block == e.block && this.startSide == e.startSide && this.endSide == e.endSide;
  }
  range(e, r = e) {
    if (this.isReplace && (e > r || e == r && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && r != e)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(e, r);
  }
}
Wi.prototype.point = !0;
function fy(t, e = !1) {
  let { inclusiveStart: r, inclusiveEnd: n } = t;
  return r == null && (r = t.inclusive), n == null && (n = t.inclusive), { start: r ?? e, end: n ?? e };
}
function qI(t, e) {
  return t == e || !!(t && e && t.compare(e));
}
function P_(t, e, r, n = 0) {
  let i = r.length - 1;
  i >= 0 && r[i] + n >= t ? r[i] = Math.max(r[i], e) : r.push(t, e);
}
class Uo {
  constructor(e, r, n, i) {
    this.doc = e, this.pos = r, this.end = n, this.disallowBlockEffectsFor = i, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = !0, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = e.iter(), this.skip = r;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let e = this.content[this.content.length - 1];
    return !(e.breakAfter || e instanceof Di && e.deco.endSide < 0);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new Er()), this.atCursorPos = !0), this.curLine;
  }
  flushBuffer(e = this.bufferMarks) {
    this.pendingBuffer && (this.curLine.append(Za(new Js(-1), e), e.length), this.pendingBuffer = 0);
  }
  addBlockWidget(e) {
    this.flushBuffer(), this.curLine = null, this.content.push(e);
  }
  finish(e) {
    this.pendingBuffer && e <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, !this.posCovered() && !(e && this.content.length && this.content[this.content.length - 1] instanceof Di) && this.getLine();
  }
  buildText(e, r, n) {
    for (; e > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: s, lineBreak: o, done: a } = this.cursor.next(this.skip);
        if (this.skip = 0, a)
          throw new Error("Ran out of text content when drawing inline views");
        if (o) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = !0, e--;
          continue;
        } else
          this.text = s, this.textOff = 0;
      }
      let i = Math.min(
        this.text.length - this.textOff,
        e,
        512
        /* T.Chunk */
      );
      this.flushBuffer(r.slice(r.length - n)), this.getLine().append(Za(new _i(this.text.slice(this.textOff, this.textOff + i)), r), n), this.atCursorPos = !0, this.textOff += i, e -= i, n = 0;
    }
  }
  span(e, r, n, i) {
    this.buildText(r - e, n, i), this.pos = r, this.openStart < 0 && (this.openStart = i);
  }
  point(e, r, n, i, s, o) {
    if (this.disallowBlockEffectsFor[o] && n instanceof Wi) {
      if (n.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (r > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let a = r - e;
    if (n instanceof Wi)
      if (n.block)
        n.startSide > 0 && !this.posCovered() && this.getLine(), this.addBlockWidget(new Di(n.widget || new oE("div"), a, n));
      else {
        let l = xi.create(n.widget || new oE("span"), a, a ? 0 : n.startSide), c = this.atCursorPos && !l.isEditable && s <= i.length && (e < r || n.startSide > 0), f = !l.isEditable && (e < r || s > i.length || n.startSide <= 0), m = this.getLine();
        this.pendingBuffer == 2 && !c && !l.isEditable && (this.pendingBuffer = 0), this.flushBuffer(i), c && (m.append(Za(new Js(1), i), s), s = i.length + Math.max(0, s - i.length)), m.append(Za(l, i), s), this.atCursorPos = f, this.pendingBuffer = f ? e < r || s > i.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = i.slice());
      }
    else
      this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(n);
    a && (this.textOff + a <= this.text.length ? this.textOff += a : (this.skip += a - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = r), this.openStart < 0 && (this.openStart = s);
  }
  static build(e, r, n, i, s) {
    let o = new Uo(e, r, n, s);
    return o.openEnd = Zt.spans(i, r, n, o), o.openStart < 0 && (o.openStart = o.openEnd), o.finish(o.openEnd), o;
  }
}
function Za(t, e) {
  for (let r of e)
    t = new hi(r, [t], t.length);
  return t;
}
class oE extends bi {
  constructor(e) {
    super(), this.tag = e;
  }
  eq(e) {
    return e.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(e) {
    return e.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return !0;
  }
}
var lr = /* @__PURE__ */ function(t) {
  return t[t.LTR = 0] = "LTR", t[t.RTL = 1] = "RTL", t;
}(lr || (lr = {}));
const $s = lr.LTR, Yh = lr.RTL;
function py(t) {
  let e = [];
  for (let r = 0; r < t.length; r++)
    e.push(1 << +t[r]);
  return e;
}
const zI = /* @__PURE__ */ py("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), GI = /* @__PURE__ */ py("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), F_ = /* @__PURE__ */ Object.create(null), Un = [];
for (let t of ["()", "[]", "{}"]) {
  let e = /* @__PURE__ */ t.charCodeAt(0), r = /* @__PURE__ */ t.charCodeAt(1);
  F_[e] = r, F_[r] = -e;
}
function _y(t) {
  return t <= 247 ? zI[t] : 1424 <= t && t <= 1524 ? 2 : 1536 <= t && t <= 1785 ? GI[t - 1536] : 1774 <= t && t <= 2220 ? 4 : 8192 <= t && t <= 8204 ? 256 : 64336 <= t && t <= 65023 ? 4 : 1;
}
const YI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
class Ni {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? Yh : $s;
  }
  /**
  @internal
  */
  constructor(e, r, n) {
    this.from = e, this.to = r, this.level = n;
  }
  /**
  @internal
  */
  side(e, r) {
    return this.dir == r == e ? this.to : this.from;
  }
  /**
  @internal
  */
  forward(e, r) {
    return e == (this.dir == r);
  }
  /**
  @internal
  */
  static find(e, r, n, i) {
    let s = -1;
    for (let o = 0; o < e.length; o++) {
      let a = e[o];
      if (a.from <= r && a.to >= r) {
        if (a.level == n)
          return o;
        (s < 0 || (i != 0 ? i < 0 ? a.from < r : a.to > r : e[s].level > a.level)) && (s = o);
      }
    }
    if (s < 0)
      throw new RangeError("Index out of range");
    return s;
  }
}
function hy(t, e) {
  if (t.length != e.length)
    return !1;
  for (let r = 0; r < t.length; r++) {
    let n = t[r], i = e[r];
    if (n.from != i.from || n.to != i.to || n.direction != i.direction || !hy(n.inner, i.inner))
      return !1;
  }
  return !0;
}
const tr = [];
function HI(t, e, r, n, i) {
  for (let s = 0; s <= n.length; s++) {
    let o = s ? n[s - 1].to : e, a = s < n.length ? n[s].from : r, l = s ? 256 : i;
    for (let c = o, f = l, m = l; c < a; c++) {
      let b = _y(t.charCodeAt(c));
      b == 512 ? b = f : b == 8 && m == 4 && (b = 16), tr[c] = b == 4 ? 2 : b, b & 7 && (m = b), f = b;
    }
    for (let c = o, f = l, m = l; c < a; c++) {
      let b = tr[c];
      if (b == 128)
        c < a - 1 && f == tr[c + 1] && f & 24 ? b = tr[c] = f : tr[c] = 256;
      else if (b == 64) {
        let C = c + 1;
        for (; C < a && tr[C] == 64; )
          C++;
        let N = c && f == 8 || C < r && tr[C] == 8 ? m == 1 ? 1 : 8 : 256;
        for (let z = c; z < C; z++)
          tr[z] = N;
        c = C - 1;
      } else
        b == 8 && m == 1 && (tr[c] = 1);
      f = b, b & 7 && (m = b);
    }
  }
}
function VI(t, e, r, n, i) {
  let s = i == 1 ? 2 : 1;
  for (let o = 0, a = 0, l = 0; o <= n.length; o++) {
    let c = o ? n[o - 1].to : e, f = o < n.length ? n[o].from : r;
    for (let m = c, b, C, N; m < f; m++)
      if (C = F_[b = t.charCodeAt(m)])
        if (C < 0) {
          for (let z = a - 3; z >= 0; z -= 3)
            if (Un[z + 1] == -C) {
              let A = Un[z + 2], Q = A & 2 ? i : A & 4 ? A & 1 ? s : i : 0;
              Q && (tr[m] = tr[Un[z]] = Q), a = z;
              break;
            }
        } else {
          if (Un.length == 189)
            break;
          Un[a++] = m, Un[a++] = b, Un[a++] = l;
        }
      else if ((N = tr[m]) == 2 || N == 1) {
        let z = N == i;
        l = z ? 0 : 1;
        for (let A = a - 3; A >= 0; A -= 3) {
          let Q = Un[A + 2];
          if (Q & 2)
            break;
          if (z)
            Un[A + 2] |= 2;
          else {
            if (Q & 4)
              break;
            Un[A + 2] |= 4;
          }
        }
      }
  }
}
function WI(t, e, r, n) {
  for (let i = 0, s = n; i <= r.length; i++) {
    let o = i ? r[i - 1].to : t, a = i < r.length ? r[i].from : e;
    for (let l = o; l < a; ) {
      let c = tr[l];
      if (c == 256) {
        let f = l + 1;
        for (; ; )
          if (f == a) {
            if (i == r.length)
              break;
            f = r[i++].to, a = i < r.length ? r[i].from : e;
          } else if (tr[f] == 256)
            f++;
          else
            break;
        let m = s == 1, b = (f < e ? tr[f] : n) == 1, C = m == b ? m ? 1 : 2 : n;
        for (let N = f, z = i, A = z ? r[z - 1].to : t; N > l; )
          N == A && (N = r[--z].from, A = z ? r[z - 1].to : t), tr[--N] = C;
        l = f;
      } else
        s = c, l++;
    }
  }
}
function B_(t, e, r, n, i, s, o) {
  let a = n % 2 ? 2 : 1;
  if (n % 2 == i % 2)
    for (let l = e, c = 0; l < r; ) {
      let f = !0, m = !1;
      if (c == s.length || l < s[c].from) {
        let z = tr[l];
        z != a && (f = !1, m = z == 16);
      }
      let b = !f && a == 1 ? [] : null, C = f ? n : n + 1, N = l;
      e:
        for (; ; )
          if (c < s.length && N == s[c].from) {
            if (m)
              break e;
            let z = s[c];
            if (!f)
              for (let A = z.to, Q = c + 1; ; ) {
                if (A == r)
                  break e;
                if (Q < s.length && s[Q].from == A)
                  A = s[Q++].to;
                else {
                  if (tr[A] == a)
                    break e;
                  break;
                }
              }
            if (c++, b)
              b.push(z);
            else {
              z.from > l && o.push(new Ni(l, z.from, C));
              let A = z.direction == $s != !(C % 2);
              U_(t, A ? n + 1 : n, i, z.inner, z.from, z.to, o), l = z.to;
            }
            N = z.to;
          } else {
            if (N == r || (f ? tr[N] != a : tr[N] == a))
              break;
            N++;
          }
      b ? B_(t, l, N, n + 1, i, b, o) : l < N && o.push(new Ni(l, N, C)), l = N;
    }
  else
    for (let l = r, c = s.length; l > e; ) {
      let f = !0, m = !1;
      if (!c || l > s[c - 1].to) {
        let z = tr[l - 1];
        z != a && (f = !1, m = z == 16);
      }
      let b = !f && a == 1 ? [] : null, C = f ? n : n + 1, N = l;
      e:
        for (; ; )
          if (c && N == s[c - 1].to) {
            if (m)
              break e;
            let z = s[--c];
            if (!f)
              for (let A = z.from, Q = c; ; ) {
                if (A == e)
                  break e;
                if (Q && s[Q - 1].to == A)
                  A = s[--Q].from;
                else {
                  if (tr[A - 1] == a)
                    break e;
                  break;
                }
              }
            if (b)
              b.push(z);
            else {
              z.to < l && o.push(new Ni(z.to, l, C));
              let A = z.direction == $s != !(C % 2);
              U_(t, A ? n + 1 : n, i, z.inner, z.from, z.to, o), l = z.from;
            }
            N = z.from;
          } else {
            if (N == e || (f ? tr[N - 1] != a : tr[N - 1] == a))
              break;
            N--;
          }
      b ? B_(t, N, l, n + 1, i, b, o) : N < l && o.push(new Ni(N, l, C)), l = N;
    }
}
function U_(t, e, r, n, i, s, o) {
  let a = e % 2 ? 2 : 1;
  HI(t, i, s, n, a), VI(t, i, s, n, a), WI(i, s, n, a), B_(t, i, s, e, r, n, o);
}
function KI(t, e, r) {
  if (!t)
    return [new Ni(0, 0, e == Yh ? 1 : 0)];
  if (e == $s && !r.length && !YI.test(t))
    return my(t.length);
  if (r.length)
    for (; t.length > tr.length; )
      tr[tr.length] = 256;
  let n = [], i = e == $s ? 0 : 1;
  return U_(t, i, i, r, 0, t.length, n), n;
}
function my(t) {
  return [new Ni(0, t, 0)];
}
let gy = "";
function QI(t, e, r, n, i) {
  var s;
  let o = n.head - t.from, a = Ni.find(e, o, (s = n.bidiLevel) !== null && s !== void 0 ? s : -1, n.assoc), l = e[a], c = l.side(i, r);
  if (o == c) {
    let b = a += i ? 1 : -1;
    if (b < 0 || b >= e.length)
      return null;
    l = e[a = b], o = l.side(!i, r), c = l.side(i, r);
  }
  let f = Or(t.text, o, l.forward(i, r));
  (f < l.from || f > l.to) && (f = c), gy = t.text.slice(Math.min(o, f), Math.max(o, f));
  let m = a == (i ? e.length - 1 : 0) ? null : e[a + (i ? 1 : -1)];
  return m && f == c && m.level + (i ? 0 : 1) < l.level ? $t.cursor(m.side(!i, r) + t.from, m.forward(i, r) ? 1 : -1, m.level) : $t.cursor(f + t.from, l.forward(i, r) ? -1 : 1, l.level);
}
function jI(t, e, r) {
  for (let n = e; n < r; n++) {
    let i = _y(t.charCodeAt(n));
    if (i == 1)
      return $s;
    if (i == 2 || i == 4)
      return Yh;
  }
  return $s;
}
const $y = /* @__PURE__ */ xt.define(), by = /* @__PURE__ */ xt.define(), Ey = /* @__PURE__ */ xt.define(), vy = /* @__PURE__ */ xt.define(), q_ = /* @__PURE__ */ xt.define(), Sy = /* @__PURE__ */ xt.define(), yy = /* @__PURE__ */ xt.define(), Ty = /* @__PURE__ */ xt.define({
  combine: (t) => t.some((e) => e)
}), Cy = /* @__PURE__ */ xt.define({
  combine: (t) => t.some((e) => e)
});
class Gs {
  constructor(e, r = "nearest", n = "nearest", i = 5, s = 5, o = !1) {
    this.range = e, this.y = r, this.x = n, this.yMargin = i, this.xMargin = s, this.isSnapshot = o;
  }
  map(e) {
    return e.empty ? this : new Gs(this.range.map(e), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(e) {
    return this.range.to <= e.doc.length ? this : new Gs($t.cursor(e.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
}
const Ja = /* @__PURE__ */ Gt.define({ map: (t, e) => t.map(e) });
function Tn(t, e, r) {
  let n = t.facet(vy);
  n.length ? n[0](e) : window.onerror ? window.onerror(String(e), r, void 0, void 0, e) : r ? console.error(r + ":", e) : console.error(e);
}
const vc = /* @__PURE__ */ xt.define({ combine: (t) => t.length ? t[0] : !0 });
let XI = 0;
const Ao = /* @__PURE__ */ xt.define();
class mr {
  constructor(e, r, n, i, s) {
    this.id = e, this.create = r, this.domEventHandlers = n, this.domEventObservers = i, this.extension = s(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(e, r) {
    const { eventHandlers: n, eventObservers: i, provide: s, decorations: o } = r || {};
    return new mr(XI++, e, n, i, (a) => {
      let l = [Ao.of(a)];
      return o && l.push(ca.of((c) => {
        let f = c.plugin(a);
        return f ? o(f) : Ot.none;
      })), s && l.push(s(a)), l;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(e, r) {
    return mr.define((n) => new e(n), r);
  }
}
class Op {
  constructor(e) {
    this.spec = e, this.mustUpdate = null, this.value = null;
  }
  update(e) {
    if (this.value) {
      if (this.mustUpdate) {
        let r = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update)
          try {
            this.value.update(r);
          } catch (n) {
            if (Tn(r.state, n, "CodeMirror plugin crashed"), this.value.destroy)
              try {
                this.value.destroy();
              } catch {
              }
            this.deactivate();
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.create(e);
      } catch (r) {
        Tn(e.state, r, "CodeMirror plugin crashed"), this.deactivate();
      }
    return this;
  }
  destroy(e) {
    var r;
    if (!((r = this.value) === null || r === void 0) && r.destroy)
      try {
        this.value.destroy();
      } catch (n) {
        Tn(e.state, n, "CodeMirror plugin crashed");
      }
  }
  deactivate() {
    this.spec = this.value = null;
  }
}
const wy = /* @__PURE__ */ xt.define(), Hh = /* @__PURE__ */ xt.define(), ca = /* @__PURE__ */ xt.define(), Ay = /* @__PURE__ */ xt.define(), Vh = /* @__PURE__ */ xt.define(), Ry = /* @__PURE__ */ xt.define();
function aE(t, e) {
  let r = t.state.facet(Ry);
  if (!r.length)
    return r;
  let n = r.map((s) => s instanceof Function ? s(t) : s), i = [];
  return Zt.spans(n, e.from, e.to, {
    point() {
    },
    span(s, o, a, l) {
      let c = s - e.from, f = o - e.from, m = i;
      for (let b = a.length - 1; b >= 0; b--, l--) {
        let C = a[b].spec.bidiIsolate, N;
        if (C == null && (C = jI(e.text, c, f)), l > 0 && m.length && (N = m[m.length - 1]).to == c && N.direction == C)
          N.to = f, m = N.inner;
        else {
          let z = { from: c, to: f, direction: C, inner: [] };
          m.push(z), m = z.inner;
        }
      }
    }
  }), i;
}
const xy = /* @__PURE__ */ xt.define();
function Ny(t) {
  let e = 0, r = 0, n = 0, i = 0;
  for (let s of t.state.facet(xy)) {
    let o = s(t);
    o && (o.left != null && (e = Math.max(e, o.left)), o.right != null && (r = Math.max(r, o.right)), o.top != null && (n = Math.max(n, o.top)), o.bottom != null && (i = Math.max(i, o.bottom)));
  }
  return { left: e, right: r, top: n, bottom: i };
}
const Ro = /* @__PURE__ */ xt.define();
class Cn {
  constructor(e, r, n, i) {
    this.fromA = e, this.toA = r, this.fromB = n, this.toB = i;
  }
  join(e) {
    return new Cn(Math.min(this.fromA, e.fromA), Math.max(this.toA, e.toA), Math.min(this.fromB, e.fromB), Math.max(this.toB, e.toB));
  }
  addToSet(e) {
    let r = e.length, n = this;
    for (; r > 0; r--) {
      let i = e[r - 1];
      if (!(i.fromA > n.toA)) {
        if (i.toA < n.fromA)
          break;
        n = n.join(i), e.splice(r - 1, 1);
      }
    }
    return e.splice(r, 0, n), e;
  }
  static extendWithRanges(e, r) {
    if (r.length == 0)
      return e;
    let n = [];
    for (let i = 0, s = 0, o = 0, a = 0; ; i++) {
      let l = i == e.length ? null : e[i], c = o - a, f = l ? l.fromB : 1e9;
      for (; s < r.length && r[s] < f; ) {
        let m = r[s], b = r[s + 1], C = Math.max(a, m), N = Math.min(f, b);
        if (C <= N && new Cn(C + c, N + c, C, N).addToSet(n), b > f)
          break;
        s += 2;
      }
      if (!l)
        return n;
      new Cn(l.fromA, l.toA, l.fromB, l.toB).addToSet(n), o = l.toA, a = l.toB;
    }
  }
}
class Gl {
  constructor(e, r, n) {
    this.view = e, this.state = r, this.transactions = n, this.flags = 0, this.startState = e.state, this.changes = vr.empty(this.startState.doc.length);
    for (let s of n)
      this.changes = this.changes.compose(s.changes);
    let i = [];
    this.changes.iterChangedRanges((s, o, a, l) => i.push(new Cn(s, o, a, l))), this.changedRanges = i;
  }
  /**
  @internal
  */
  static create(e, r, n) {
    return new Gl(e, r, n);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & 10) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((e) => e.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}
class lE extends ar {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(e) {
    super(), this.view = e, this.decorations = [], this.dynamicDecorationMap = [], this.domChanged = null, this.hasComposition = null, this.markedForComposition = /* @__PURE__ */ new Set(), this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = !1, this.lastUpdate = Date.now(), this.setDOM(e.contentDOM), this.children = [new Er()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new Cn(0, 0, 0, e.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(e) {
    var r;
    let n = e.changedRanges;
    this.minWidth > 0 && n.length && (n.every(({ fromA: c, toA: f }) => f < this.minWidthFrom || c > this.minWidthTo) ? (this.minWidthFrom = e.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = e.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0);
    let i = -1;
    this.view.inputState.composing >= 0 && (!((r = this.domChanged) === null || r === void 0) && r.newSel ? i = this.domChanged.newSel.head : !iO(e.changes, this.hasComposition) && !e.selectionSet && (i = e.state.selection.main.head));
    let s = i > -1 ? JI(this.view, e.changes, i) : null;
    if (this.domChanged = null, this.hasComposition) {
      this.markedForComposition.clear();
      let { from: c, to: f } = this.hasComposition;
      n = new Cn(c, f, e.changes.mapPos(c, -1), e.changes.mapPos(f, 1)).addToSet(n.slice());
    }
    this.hasComposition = s ? { from: s.range.fromB, to: s.range.toB } : null, (kt.ie || kt.chrome) && !s && e && e.state.doc.lines != e.startState.doc.lines && (this.forceSelection = !0);
    let o = this.decorations, a = this.updateDeco(), l = rO(o, a, e.changes);
    return n = Cn.extendWithRanges(n, l), !(this.flags & 7) && n.length == 0 ? !1 : (this.updateInner(n, e.startState.doc.length, s), e.transactions.length && (this.lastUpdate = Date.now()), !0);
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(e, r, n) {
    this.view.viewState.mustMeasureContent = !0, this.updateChildren(e, r, n);
    let { observer: i } = this.view;
    i.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let o = kt.chrome || kt.ios ? { node: i.selectionRange.focusNode, written: !1 } : void 0;
      this.sync(this.view, o), this.flags &= -8, o && (o.written || i.selectionRange.focusNode != o.node) && (this.forceSelection = !0), this.dom.style.height = "";
    }), this.markedForComposition.forEach(
      (o) => o.flags &= -9
      /* ViewFlag.Composition */
    );
    let s = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
      for (let o of this.children)
        o instanceof Di && o.widget instanceof cE && s.push(o.dom);
    i.updateGaps(s);
  }
  updateChildren(e, r, n) {
    let i = n ? n.range.addToSet(e.slice()) : e, s = this.childCursor(r);
    for (let o = i.length - 1; ; o--) {
      let a = o >= 0 ? i[o] : null;
      if (!a)
        break;
      let { fromA: l, toA: c, fromB: f, toB: m } = a, b, C, N, z;
      if (n && n.range.fromB < m && n.range.toB > f) {
        let ge = Uo.build(this.view.state.doc, f, n.range.fromB, this.decorations, this.dynamicDecorationMap), Y = Uo.build(this.view.state.doc, n.range.toB, m, this.decorations, this.dynamicDecorationMap);
        C = ge.breakAtStart, N = ge.openStart, z = Y.openEnd;
        let fe = this.compositionView(n);
        Y.breakAtStart ? fe.breakAfter = 1 : Y.content.length && fe.merge(fe.length, fe.length, Y.content[0], !1, Y.openStart, 0) && (fe.breakAfter = Y.content[0].breakAfter, Y.content.shift()), ge.content.length && fe.merge(0, 0, ge.content[ge.content.length - 1], !0, 0, ge.openEnd) && ge.content.pop(), b = ge.content.concat(fe).concat(Y.content);
      } else
        ({ content: b, breakAtStart: C, openStart: N, openEnd: z } = Uo.build(this.view.state.doc, f, m, this.decorations, this.dynamicDecorationMap));
      let { i: A, off: Q } = s.findPos(c, 1), { i: Te, off: ce } = s.findPos(l, -1);
      sy(this, Te, ce, A, Q, b, C, N, z);
    }
    n && this.fixCompositionDOM(n);
  }
  compositionView(e) {
    let r = new _i(e.text.nodeValue);
    r.flags |= 8;
    for (let { deco: i } of e.marks)
      r = new hi(i, [r], r.length);
    let n = new Er();
    return n.append(r, 0), n;
  }
  fixCompositionDOM(e) {
    let r = (s, o) => {
      o.flags |= 8 | (o.children.some(
        (l) => l.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0), this.markedForComposition.add(o);
      let a = ar.get(s);
      a && a != o && (a.dom = null), o.setDOM(s);
    }, n = this.childPos(e.range.fromB, 1), i = this.children[n.i];
    r(e.line, i);
    for (let s = e.marks.length - 1; s >= -1; s--)
      n = i.childPos(n.off, 1), i = i.children[n.i], r(s >= 0 ? e.marks[s].node : e.text, i);
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(e = !1, r = !1) {
    (e || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange();
    let n = this.view.root.activeElement, i = n == this.dom, s = !i && wl(this.dom, this.view.observer.selectionRange) && !(n && this.dom.contains(n));
    if (!(i || r || s))
      return;
    let o = this.forceSelection;
    this.forceSelection = !1;
    let a = this.view.state.selection.main, l = this.moveToLine(this.domAtPos(a.anchor)), c = a.empty ? l : this.moveToLine(this.domAtPos(a.head));
    if (kt.gecko && a.empty && !this.hasComposition && ZI(l)) {
      let m = document.createTextNode("");
      this.view.observer.ignore(() => l.node.insertBefore(m, l.node.childNodes[l.offset] || null)), l = c = new Fr(m, 0), o = !0;
    }
    let f = this.view.observer.selectionRange;
    (o || !f.focusNode || (!Bo(l.node, l.offset, f.anchorNode, f.anchorOffset) || !Bo(c.node, c.offset, f.focusNode, f.focusOffset)) && !this.suppressWidgetCursorChange(f, a)) && (this.view.observer.ignore(() => {
      kt.android && kt.chrome && this.dom.contains(f.focusNode) && nO(f.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: !0 }));
      let m = zl(this.view.root);
      if (m)
        if (a.empty) {
          if (kt.gecko) {
            let b = eO(l.node, l.offset);
            if (b && b != 3) {
              let C = Iy(l.node, l.offset, b == 1 ? 1 : -1);
              C && (l = new Fr(C.node, C.offset));
            }
          }
          m.collapse(l.node, l.offset), a.bidiLevel != null && m.caretBidiLevel !== void 0 && (m.caretBidiLevel = a.bidiLevel);
        } else if (m.extend) {
          m.collapse(l.node, l.offset);
          try {
            m.extend(c.node, c.offset);
          } catch {
          }
        } else {
          let b = document.createRange();
          a.anchor > a.head && ([l, c] = [c, l]), b.setEnd(c.node, c.offset), b.setStart(l.node, l.offset), m.removeAllRanges(), m.addRange(b);
        }
      s && this.view.root.activeElement == this.dom && (this.dom.blur(), n && n.focus());
    }), this.view.observer.setSelectionRange(l, c)), this.impreciseAnchor = l.precise ? null : new Fr(f.anchorNode, f.anchorOffset), this.impreciseHead = c.precise ? null : new Fr(f.focusNode, f.focusOffset);
  }
  // If a zero-length widget is inserted next to the cursor during
  // composition, avoid moving it across it and disrupting the
  // composition.
  suppressWidgetCursorChange(e, r) {
    return this.hasComposition && r.empty && Bo(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset) && this.posFromDOM(e.focusNode, e.focusOffset) == r.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view: e } = this, r = e.state.selection.main, n = zl(e.root), { anchorNode: i, anchorOffset: s } = e.observer.selectionRange;
    if (!n || !r.empty || !r.assoc || !n.modify)
      return;
    let o = Er.find(this, r.head);
    if (!o)
      return;
    let a = o.posAtStart;
    if (r.head == a || r.head == a + o.length)
      return;
    let l = this.coordsAt(r.head, -1), c = this.coordsAt(r.head, 1);
    if (!l || !c || l.bottom > c.top)
      return;
    let f = this.domAtPos(r.head + r.assoc);
    n.collapse(f.node, f.offset), n.modify("move", r.assoc < 0 ? "forward" : "backward", "lineboundary"), e.observer.readSelectionRange();
    let m = e.observer.selectionRange;
    e.docView.posFromDOM(m.anchorNode, m.anchorOffset) != r.from && n.collapse(i, s);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(e) {
    let r = this.dom, n;
    if (e.node != r)
      return e;
    for (let i = e.offset; !n && i < r.childNodes.length; i++) {
      let s = ar.get(r.childNodes[i]);
      s instanceof Er && (n = s.domAtPos(0));
    }
    for (let i = e.offset - 1; !n && i >= 0; i--) {
      let s = ar.get(r.childNodes[i]);
      s instanceof Er && (n = s.domAtPos(s.length));
    }
    return n ? new Fr(n.node, n.offset, !0) : e;
  }
  nearest(e) {
    for (let r = e; r; ) {
      let n = ar.get(r);
      if (n && n.rootView == this)
        return n;
      r = r.parentNode;
    }
    return null;
  }
  posFromDOM(e, r) {
    let n = this.nearest(e);
    if (!n)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return n.localPosFromDOM(e, r) + n.posAtStart;
  }
  domAtPos(e) {
    let { i: r, off: n } = this.childCursor().findPos(e, -1);
    for (; r < this.children.length - 1; ) {
      let i = this.children[r];
      if (n < i.length || i instanceof Er)
        break;
      r++, n = 0;
    }
    return this.children[r].domAtPos(n);
  }
  coordsAt(e, r) {
    let n = null, i = 0;
    for (let s = this.length, o = this.children.length - 1; o >= 0; o--) {
      let a = this.children[o], l = s - a.breakAfter, c = l - a.length;
      if (l < e)
        break;
      c <= e && (c < e || a.covers(-1)) && (l > e || a.covers(1)) && (!n || a instanceof Er && !(n instanceof Er && r >= 0)) && (n = a, i = c), s = c;
    }
    return n ? n.coordsAt(e - i, r) : null;
  }
  coordsForChar(e) {
    let { i: r, off: n } = this.childPos(e, 1), i = this.children[r];
    if (!(i instanceof Er))
      return null;
    for (; i.children.length; ) {
      let { i: a, off: l } = i.childPos(n, 1);
      for (; ; a++) {
        if (a == i.children.length)
          return null;
        if ((i = i.children[a]).length)
          break;
      }
      n = l;
    }
    if (!(i instanceof _i))
      return null;
    let s = Or(i.text, n);
    if (s == n)
      return null;
    let o = gs(i.dom, n, s).getClientRects();
    for (let a = 0; a < o.length; a++) {
      let l = o[a];
      if (a == o.length - 1 || l.top < l.bottom && l.left < l.right)
        return l;
    }
    return null;
  }
  measureVisibleLineHeights(e) {
    let r = [], { from: n, to: i } = e, s = this.view.contentDOM.clientWidth, o = s > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, a = -1, l = this.view.textDirection == lr.LTR;
    for (let c = 0, f = 0; f < this.children.length; f++) {
      let m = this.children[f], b = c + m.length;
      if (b > i)
        break;
      if (c >= n) {
        let C = m.dom.getBoundingClientRect();
        if (r.push(C.height), o) {
          let N = m.dom.lastChild, z = N ? Zs(N) : [];
          if (z.length) {
            let A = z[z.length - 1], Q = l ? A.right - C.left : C.right - A.left;
            Q > a && (a = Q, this.minWidth = s, this.minWidthFrom = c, this.minWidthTo = b);
          }
        }
      }
      c = b + m.breakAfter;
    }
    return r;
  }
  textDirectionAt(e) {
    let { i: r } = this.childPos(e, 1);
    return getComputedStyle(this.children[r].dom).direction == "rtl" ? lr.RTL : lr.LTR;
  }
  measureTextSize() {
    for (let s of this.children)
      if (s instanceof Er) {
        let o = s.measureTextSize();
        if (o)
          return o;
      }
    let e = document.createElement("div"), r, n, i;
    return e.className = "cm-line", e.style.width = "99999px", e.style.position = "absolute", e.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(e);
      let s = Zs(e.firstChild)[0];
      r = e.getBoundingClientRect().height, n = s ? s.width / 27 : 7, i = s ? s.height : r, e.remove();
    }), { lineHeight: r, charWidth: n, textHeight: i };
  }
  childCursor(e = this.length) {
    let r = this.children.length;
    return r && (e -= this.children[--r].length), new iy(this.children, e, r);
  }
  computeBlockGapDeco() {
    let e = [], r = this.view.viewState;
    for (let n = 0, i = 0; ; i++) {
      let s = i == r.viewports.length ? null : r.viewports[i], o = s ? s.from - 1 : this.length;
      if (o > n) {
        let a = (r.lineBlockAt(o).bottom - r.lineBlockAt(n).top) / this.view.scaleY;
        e.push(Ot.replace({
          widget: new cE(a),
          block: !0,
          inclusive: !0,
          isBlockGap: !0
        }).range(n, o));
      }
      if (!s)
        break;
      n = s.to + 1;
    }
    return Ot.set(e);
  }
  updateDeco() {
    let e = this.view.state.facet(ca).map((i, s) => (this.dynamicDecorationMap[s] = typeof i == "function") ? i(this.view) : i), r = !1, n = this.view.state.facet(Ay).map((i, s) => {
      let o = typeof i == "function";
      return o && (r = !0), o ? i(this.view) : i;
    });
    n.length && (this.dynamicDecorationMap[e.length] = r, e.push(Zt.join(n)));
    for (let i = e.length; i < e.length + 3; i++)
      this.dynamicDecorationMap[i] = !1;
    return this.decorations = [
      ...e,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ];
  }
  scrollIntoView(e) {
    if (e.isSnapshot) {
      let c = this.view.viewState.lineBlockAt(e.range.head);
      this.view.scrollDOM.scrollTop = c.top - e.yMargin, this.view.scrollDOM.scrollLeft = e.xMargin;
      return;
    }
    let { range: r } = e, n = this.coordsAt(r.head, r.empty ? r.assoc : r.head > r.anchor ? -1 : 1), i;
    if (!n)
      return;
    !r.empty && (i = this.coordsAt(r.anchor, r.anchor > r.head ? -1 : 1)) && (n = {
      left: Math.min(n.left, i.left),
      top: Math.min(n.top, i.top),
      right: Math.max(n.right, i.right),
      bottom: Math.max(n.bottom, i.bottom)
    });
    let s = Ny(this.view), o = {
      left: n.left - s.left,
      top: n.top - s.top,
      right: n.right + s.right,
      bottom: n.bottom + s.bottom
    }, { offsetWidth: a, offsetHeight: l } = this.view.scrollDOM;
    II(this.view.scrollDOM, o, r.head < r.anchor ? -1 : 1, e.x, e.y, Math.max(Math.min(e.xMargin, a), -a), Math.max(Math.min(e.yMargin, l), -l), this.view.textDirection == lr.LTR);
  }
}
function ZI(t) {
  return t.node.nodeType == 1 && t.node.firstChild && (t.offset == 0 || t.node.childNodes[t.offset - 1].contentEditable == "false") && (t.offset == t.node.childNodes.length || t.node.childNodes[t.offset].contentEditable == "false");
}
class cE extends bi {
  constructor(e) {
    super(), this.height = e;
  }
  toDOM() {
    let e = document.createElement("div");
    return e.className = "cm-gap", this.updateDOM(e), e;
  }
  eq(e) {
    return e.height == this.height;
  }
  updateDOM(e) {
    return e.style.height = this.height + "px", !0;
  }
  get editable() {
    return !0;
  }
  get estimatedHeight() {
    return this.height;
  }
}
function ky(t, e) {
  let r = t.observer.selectionRange, n = r.focusNode && Iy(r.focusNode, r.focusOffset, 0);
  if (!n)
    return null;
  let i = e - n.offset;
  return { from: i, to: i + n.node.nodeValue.length, node: n.node };
}
function JI(t, e, r) {
  let n = ky(t, r);
  if (!n)
    return null;
  let { node: i, from: s, to: o } = n, a = i.nodeValue;
  if (/[\n\r]/.test(a) || t.state.doc.sliceString(n.from, n.to) != a)
    return null;
  let l = e.invertedDesc, c = new Cn(l.mapPos(s), l.mapPos(o), s, o), f = [];
  for (let m = i.parentNode; ; m = m.parentNode) {
    let b = ar.get(m);
    if (b instanceof hi)
      f.push({ node: m, deco: b.mark });
    else {
      if (b instanceof Er || m.nodeName == "DIV" && m.parentNode == t.contentDOM)
        return { range: c, text: i, marks: f, line: m };
      if (m != t.contentDOM)
        f.push({ node: m, deco: new Ma({
          inclusive: !0,
          attributes: UI(m),
          tagName: m.tagName.toLowerCase()
        }) });
      else
        return null;
    }
  }
}
function Iy(t, e, r) {
  if (r <= 0)
    for (let n = t, i = e; ; ) {
      if (n.nodeType == 3)
        return { node: n, offset: i };
      if (n.nodeType == 1 && i > 0)
        n = n.childNodes[i - 1], i = pi(n);
      else
        break;
    }
  if (r >= 0)
    for (let n = t, i = e; ; ) {
      if (n.nodeType == 3)
        return { node: n, offset: i };
      if (n.nodeType == 1 && i < n.childNodes.length && r >= 0)
        n = n.childNodes[i], i = 0;
      else
        break;
    }
  return null;
}
function eO(t, e) {
  return t.nodeType != 1 ? 0 : (e && t.childNodes[e - 1].contentEditable == "false" ? 1 : 0) | (e < t.childNodes.length && t.childNodes[e].contentEditable == "false" ? 2 : 0);
}
let tO = class {
  constructor() {
    this.changes = [];
  }
  compareRange(e, r) {
    P_(e, r, this.changes);
  }
  comparePoint(e, r) {
    P_(e, r, this.changes);
  }
};
function rO(t, e, r) {
  let n = new tO();
  return Zt.compare(t, e, r, n), n.changes;
}
function nO(t, e) {
  for (let r = t; r && r != e; r = r.assignedSlot || r.parentNode)
    if (r.nodeType == 1 && r.contentEditable == "false")
      return !0;
  return !1;
}
function iO(t, e) {
  let r = !1;
  return e && t.iterChangedRanges((n, i) => {
    n < e.to && i > e.from && (r = !0);
  }), r;
}
function sO(t, e, r = 1) {
  let n = t.charCategorizer(e), i = t.doc.lineAt(e), s = e - i.from;
  if (i.length == 0)
    return $t.cursor(e);
  s == 0 ? r = 1 : s == i.length && (r = -1);
  let o = s, a = s;
  r < 0 ? o = Or(i.text, s, !1) : a = Or(i.text, s);
  let l = n(i.text.slice(o, a));
  for (; o > 0; ) {
    let c = Or(i.text, o, !1);
    if (n(i.text.slice(c, o)) != l)
      break;
    o = c;
  }
  for (; a < i.length; ) {
    let c = Or(i.text, a);
    if (n(i.text.slice(a, c)) != l)
      break;
    a = c;
  }
  return $t.range(o + i.from, a + i.from);
}
function oO(t, e) {
  return e.left > t ? e.left - t : Math.max(0, t - e.right);
}
function aO(t, e) {
  return e.top > t ? e.top - t : Math.max(0, t - e.bottom);
}
function Dp(t, e) {
  return t.top < e.bottom - 1 && t.bottom > e.top + 1;
}
function uE(t, e) {
  return e < t.top ? { top: e, left: t.left, right: t.right, bottom: t.bottom } : t;
}
function dE(t, e) {
  return e > t.bottom ? { top: t.top, left: t.left, right: t.right, bottom: e } : t;
}
function z_(t, e, r) {
  let n, i, s, o, a = !1, l, c, f, m;
  for (let N = t.firstChild; N; N = N.nextSibling) {
    let z = Zs(N);
    for (let A = 0; A < z.length; A++) {
      let Q = z[A];
      i && Dp(i, Q) && (Q = uE(dE(Q, i.bottom), i.top));
      let Te = oO(e, Q), ce = aO(r, Q);
      if (Te == 0 && ce == 0)
        return N.nodeType == 3 ? fE(N, e, r) : z_(N, e, r);
      if (!n || o > ce || o == ce && s > Te) {
        n = N, i = Q, s = Te, o = ce;
        let ge = ce ? r < Q.top ? -1 : 1 : Te ? e < Q.left ? -1 : 1 : 0;
        a = !ge || (ge > 0 ? A < z.length - 1 : A > 0);
      }
      Te == 0 ? r > Q.bottom && (!f || f.bottom < Q.bottom) ? (l = N, f = Q) : r < Q.top && (!m || m.top > Q.top) && (c = N, m = Q) : f && Dp(f, Q) ? f = dE(f, Q.bottom) : m && Dp(m, Q) && (m = uE(m, Q.top));
    }
  }
  if (f && f.bottom >= r ? (n = l, i = f) : m && m.top <= r && (n = c, i = m), !n)
    return { node: t, offset: 0 };
  let b = Math.max(i.left, Math.min(i.right, e));
  if (n.nodeType == 3)
    return fE(n, b, r);
  if (a && n.contentEditable != "false")
    return z_(n, b, r);
  let C = Array.prototype.indexOf.call(t.childNodes, n) + (e >= (i.left + i.right) / 2 ? 1 : 0);
  return { node: t, offset: C };
}
function fE(t, e, r) {
  let n = t.nodeValue.length, i = -1, s = 1e9, o = 0;
  for (let a = 0; a < n; a++) {
    let l = gs(t, a, a + 1).getClientRects();
    for (let c = 0; c < l.length; c++) {
      let f = l[c];
      if (f.top == f.bottom)
        continue;
      o || (o = e - f.left);
      let m = (f.top > r ? f.top - r : r - f.bottom) - 1;
      if (f.left - 1 <= e && f.right + 1 >= e && m < s) {
        let b = e >= (f.left + f.right) / 2, C = b;
        if ((kt.chrome || kt.gecko) && gs(t, a).getBoundingClientRect().left == f.right && (C = !b), m <= 0)
          return { node: t, offset: a + (C ? 1 : 0) };
        i = a + (C ? 1 : 0), s = m;
      }
    }
  }
  return { node: t, offset: i > -1 ? i : o > 0 ? t.nodeValue.length : 0 };
}
function Oy(t, e, r, n = -1) {
  var i, s;
  let o = t.contentDOM.getBoundingClientRect(), a = o.top + t.viewState.paddingTop, l, { docHeight: c } = t.viewState, { x: f, y: m } = e, b = m - a;
  if (b < 0)
    return 0;
  if (b > c)
    return t.state.doc.length;
  for (let ge = t.viewState.heightOracle.textHeight / 2, Y = !1; l = t.elementAtHeight(b), l.type != Kr.Text; )
    for (; b = n > 0 ? l.bottom + ge : l.top - ge, !(b >= 0 && b <= c); ) {
      if (Y)
        return r ? null : 0;
      Y = !0, n = -n;
    }
  m = a + b;
  let C = l.from;
  if (C < t.viewport.from)
    return t.viewport.from == 0 ? 0 : r ? null : pE(t, o, l, f, m);
  if (C > t.viewport.to)
    return t.viewport.to == t.state.doc.length ? t.state.doc.length : r ? null : pE(t, o, l, f, m);
  let N = t.dom.ownerDocument, z = t.root.elementFromPoint ? t.root : N, A = z.elementFromPoint(f, m);
  A && !t.contentDOM.contains(A) && (A = null), A || (f = Math.max(o.left + 1, Math.min(o.right - 1, f)), A = z.elementFromPoint(f, m), A && !t.contentDOM.contains(A) && (A = null));
  let Q, Te = -1;
  if (A && ((i = t.docView.nearest(A)) === null || i === void 0 ? void 0 : i.isEditable) != !1) {
    if (N.caretPositionFromPoint) {
      let ge = N.caretPositionFromPoint(f, m);
      ge && ({ offsetNode: Q, offset: Te } = ge);
    } else if (N.caretRangeFromPoint) {
      let ge = N.caretRangeFromPoint(f, m);
      ge && ({ startContainer: Q, startOffset: Te } = ge, (!t.contentDOM.contains(Q) || kt.safari && lO(Q, Te, f) || kt.chrome && cO(Q, Te, f)) && (Q = void 0));
    }
  }
  if (!Q || !t.docView.dom.contains(Q)) {
    let ge = Er.find(t.docView, C);
    if (!ge)
      return b > l.top + l.height / 2 ? l.to : l.from;
    ({ node: Q, offset: Te } = z_(ge.dom, f, m));
  }
  let ce = t.docView.nearest(Q);
  if (!ce)
    return null;
  if (ce.isWidget && ((s = ce.dom) === null || s === void 0 ? void 0 : s.nodeType) == 1) {
    let ge = ce.dom.getBoundingClientRect();
    return e.y < ge.top || e.y <= ge.bottom && e.x <= (ge.left + ge.right) / 2 ? ce.posAtStart : ce.posAtEnd;
  } else
    return ce.localPosFromDOM(Q, Te) + ce.posAtStart;
}
function pE(t, e, r, n, i) {
  let s = Math.round((n - e.left) * t.defaultCharacterWidth);
  if (t.lineWrapping && r.height > t.defaultLineHeight * 1.5) {
    let a = t.viewState.heightOracle.textHeight, l = Math.floor((i - r.top - (t.defaultLineHeight - a) * 0.5) / a);
    s += l * t.viewState.heightOracle.lineLength;
  }
  let o = t.state.sliceDoc(r.from, r.to);
  return r.from + R_(o, s, t.state.tabSize);
}
function lO(t, e, r) {
  let n;
  if (t.nodeType != 3 || e != (n = t.nodeValue.length))
    return !1;
  for (let i = t.nextSibling; i; i = i.nextSibling)
    if (i.nodeType != 1 || i.nodeName != "BR")
      return !1;
  return gs(t, n - 1, n).getBoundingClientRect().left > r;
}
function cO(t, e, r) {
  if (e != 0)
    return !1;
  for (let i = t; ; ) {
    let s = i.parentNode;
    if (!s || s.nodeType != 1 || s.firstChild != i)
      return !1;
    if (s.classList.contains("cm-line"))
      break;
    i = s;
  }
  let n = t.nodeType == 1 ? t.getBoundingClientRect() : gs(t, 0, Math.max(t.nodeValue.length, 1)).getBoundingClientRect();
  return r - n.left > 5;
}
function G_(t, e) {
  let r = t.lineBlockAt(e);
  if (Array.isArray(r.type)) {
    for (let n of r.type)
      if (n.to > e || n.to == e && (n.to == r.to || n.type == Kr.Text))
        return n;
  }
  return r;
}
function uO(t, e, r, n) {
  let i = G_(t, e.head), s = !n || i.type != Kr.Text || !(t.lineWrapping || i.widgetLineBreaks) ? null : t.coordsAtPos(e.assoc < 0 && e.head > i.from ? e.head - 1 : e.head);
  if (s) {
    let o = t.dom.getBoundingClientRect(), a = t.textDirectionAt(i.from), l = t.posAtCoords({
      x: r == (a == lr.LTR) ? o.right - 1 : o.left + 1,
      y: (s.top + s.bottom) / 2
    });
    if (l != null)
      return $t.cursor(l, r ? -1 : 1);
  }
  return $t.cursor(r ? i.to : i.from, r ? -1 : 1);
}
function _E(t, e, r, n) {
  let i = t.state.doc.lineAt(e.head), s = t.bidiSpans(i), o = t.textDirectionAt(i.from);
  for (let a = e, l = null; ; ) {
    let c = QI(i, s, o, a, r), f = gy;
    if (!c) {
      if (i.number == (r ? t.state.doc.lines : 1))
        return a;
      f = `
`, i = t.state.doc.line(i.number + (r ? 1 : -1)), s = t.bidiSpans(i), c = t.visualLineSide(i, !r);
    }
    if (l) {
      if (!l(f))
        return a;
    } else {
      if (!n)
        return c;
      l = n(f);
    }
    a = c;
  }
}
function dO(t, e, r) {
  let n = t.state.charCategorizer(e), i = n(r);
  return (s) => {
    let o = n(s);
    return i == dr.Space && (i = o), i == o;
  };
}
function fO(t, e, r, n) {
  let i = e.head, s = r ? 1 : -1;
  if (i == (r ? t.state.doc.length : 0))
    return $t.cursor(i, e.assoc);
  let o = e.goalColumn, a, l = t.contentDOM.getBoundingClientRect(), c = t.coordsAtPos(i, e.assoc || -1), f = t.documentTop;
  if (c)
    o == null && (o = c.left - l.left), a = s < 0 ? c.top : c.bottom;
  else {
    let C = t.viewState.lineBlockAt(i);
    o == null && (o = Math.min(l.right - l.left, t.defaultCharacterWidth * (i - C.from))), a = (s < 0 ? C.top : C.bottom) + f;
  }
  let m = l.left + o, b = n ?? t.viewState.heightOracle.textHeight >> 1;
  for (let C = 0; ; C += 10) {
    let N = a + (b + C) * s, z = Oy(t, { x: m, y: N }, !1, s);
    if (N < l.top || N > l.bottom || (s < 0 ? z < i : z > i)) {
      let A = t.docView.coordsForChar(z), Q = !A || N < A.top ? -1 : 1;
      return $t.cursor(z, Q, void 0, o);
    }
  }
}
function Al(t, e, r) {
  for (; ; ) {
    let n = 0;
    for (let i of t)
      i.between(e - 1, e + 1, (s, o, a) => {
        if (e > s && e < o) {
          let l = n || r || (e - s < o - e ? -1 : 1);
          e = l < 0 ? s : o, n = l;
        }
      });
    if (!n)
      return e;
  }
}
function Mp(t, e, r) {
  let n = Al(t.state.facet(Vh).map((i) => i(t)), r.from, e.head > r.from ? -1 : 1);
  return n == r.from ? r : $t.cursor(n, n < r.from ? 1 : -1);
}
class pO {
  setSelectionOrigin(e) {
    this.lastSelectionOrigin = e, this.lastSelectionTime = Date.now();
  }
  constructor(e) {
    this.view = e, this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.pendingIOSKey = void 0, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastEscPress = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.handlers = /* @__PURE__ */ Object.create(null), this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.compositionPendingKey = !1, this.compositionPendingChange = !1, this.mouseSelection = null, this.draggedContent = null, this.handleEvent = this.handleEvent.bind(this), this.notifiedFocused = e.hasFocus, kt.safari && e.contentDOM.addEventListener("input", () => null), kt.gecko && xO(e.contentDOM.ownerDocument);
  }
  handleEvent(e) {
    !vO(this.view, e) || this.ignoreDuringComposition(e) || e.type == "keydown" && this.keydown(e) || this.runHandlers(e.type, e);
  }
  runHandlers(e, r) {
    let n = this.handlers[e];
    if (n) {
      for (let i of n.observers)
        i(this.view, r);
      for (let i of n.handlers) {
        if (r.defaultPrevented)
          break;
        if (i(this.view, r)) {
          r.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(e) {
    let r = _O(e), n = this.handlers, i = this.view.contentDOM;
    for (let s in r)
      if (s != "scroll") {
        let o = !r[s].handlers.length, a = n[s];
        a && o != !a.handlers.length && (i.removeEventListener(s, this.handleEvent), a = null), a || i.addEventListener(s, this.handleEvent, { passive: o });
      }
    for (let s in n)
      s != "scroll" && !r[s] && i.removeEventListener(s, this.handleEvent);
    this.handlers = r;
  }
  keydown(e) {
    if (this.lastKeyCode = e.keyCode, this.lastKeyTime = Date.now(), e.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)
      return !0;
    if (e.keyCode != 27 && My.indexOf(e.keyCode) < 0 && (this.view.inputState.lastEscPress = 0), kt.android && kt.chrome && !e.synthetic && (e.keyCode == 13 || e.keyCode == 8))
      return this.view.observer.delayAndroidKey(e.key, e.keyCode), !0;
    let r;
    return kt.ios && !e.synthetic && !e.altKey && !e.metaKey && ((r = Dy.find((n) => n.keyCode == e.keyCode)) && !e.ctrlKey || hO.indexOf(e.key) > -1 && e.ctrlKey && !e.shiftKey) ? (this.pendingIOSKey = r || e, setTimeout(() => this.flushIOSKey(), 250), !0) : (e.keyCode != 229 && this.view.observer.forceFlush(), !1);
  }
  flushIOSKey() {
    let e = this.pendingIOSKey;
    return e ? (this.pendingIOSKey = void 0, zs(this.view.contentDOM, e.key, e.keyCode)) : !1;
  }
  ignoreDuringComposition(e) {
    return /^key/.test(e.type) ? this.composing > 0 ? !0 : kt.safari && !kt.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100 ? (this.compositionPendingKey = !1, !0) : !1 : !1;
  }
  startMouseSelection(e) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = e;
  }
  update(e) {
    this.mouseSelection && this.mouseSelection.update(e), this.draggedContent && e.docChanged && (this.draggedContent = this.draggedContent.map(e.changes)), e.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
}
function hE(t, e) {
  return (r, n) => {
    try {
      return e.call(t, n, r);
    } catch (i) {
      Tn(r.state, i);
    }
  };
}
function _O(t) {
  let e = /* @__PURE__ */ Object.create(null);
  function r(n) {
    return e[n] || (e[n] = { observers: [], handlers: [] });
  }
  for (let n of t) {
    let i = n.spec;
    if (i && i.domEventHandlers)
      for (let s in i.domEventHandlers) {
        let o = i.domEventHandlers[s];
        o && r(s).handlers.push(hE(n.value, o));
      }
    if (i && i.domEventObservers)
      for (let s in i.domEventObservers) {
        let o = i.domEventObservers[s];
        o && r(s).observers.push(hE(n.value, o));
      }
  }
  for (let n in On)
    r(n).handlers.push(On[n]);
  for (let n in Dn)
    r(n).observers.push(Dn[n]);
  return e;
}
const Dy = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
], hO = "dthko", My = [16, 17, 18, 20, 91, 92, 224, 225], el = 6;
function tl(t) {
  return Math.max(0, t) * 0.7 + 8;
}
function mO(t, e) {
  return Math.max(Math.abs(t.clientX - e.clientX), Math.abs(t.clientY - e.clientY));
}
class gO {
  constructor(e, r, n, i) {
    this.view = e, this.startEvent = r, this.style = n, this.mustSelect = i, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = r, this.scrollParent = OI(e.contentDOM), this.atoms = e.state.facet(Vh).map((o) => o(e));
    let s = e.contentDOM.ownerDocument;
    s.addEventListener("mousemove", this.move = this.move.bind(this)), s.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = r.shiftKey, this.multiple = e.state.facet(Qt.allowMultipleSelections) && $O(e, r), this.dragging = EO(e, r) && By(r) == 1 ? null : !1;
  }
  start(e) {
    this.dragging === !1 && this.select(e);
  }
  move(e) {
    var r;
    if (e.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && mO(this.startEvent, e) < 10)
      return;
    this.select(this.lastEvent = e);
    let n = 0, i = 0, s = ((r = this.scrollParent) === null || r === void 0 ? void 0 : r.getBoundingClientRect()) || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight }, o = Ny(this.view);
    e.clientX - o.left <= s.left + el ? n = -tl(s.left - e.clientX) : e.clientX + o.right >= s.right - el && (n = tl(e.clientX - s.right)), e.clientY - o.top <= s.top + el ? i = -tl(s.top - e.clientY) : e.clientY + o.bottom >= s.bottom - el && (i = tl(e.clientY - s.bottom)), this.setScrollSpeed(n, i);
  }
  up(e) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || e.preventDefault(), this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let e = this.view.contentDOM.ownerDocument;
    e.removeEventListener("mousemove", this.move), e.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(e, r) {
    this.scrollSpeed = { x: e, y: r }, e || r ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);
  }
  scroll() {
    this.scrollParent ? (this.scrollParent.scrollLeft += this.scrollSpeed.x, this.scrollParent.scrollTop += this.scrollSpeed.y) : this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y), this.dragging === !1 && this.select(this.lastEvent);
  }
  skipAtoms(e) {
    let r = null;
    for (let n = 0; n < e.ranges.length; n++) {
      let i = e.ranges[n], s = null;
      if (i.empty) {
        let o = Al(this.atoms, i.from, 0);
        o != i.from && (s = $t.cursor(o, -1));
      } else {
        let o = Al(this.atoms, i.from, -1), a = Al(this.atoms, i.to, 1);
        (o != i.from || a != i.to) && (s = $t.range(i.from == i.anchor ? o : a, i.from == i.head ? o : a));
      }
      s && (r || (r = e.ranges.slice()), r[n] = s);
    }
    return r ? $t.create(r, e.mainIndex) : e;
  }
  select(e) {
    let { view: r } = this, n = this.skipAtoms(this.style.get(e, this.extend, this.multiple));
    (this.mustSelect || !n.eq(r.state.selection, this.dragging === !1)) && this.view.dispatch({
      selection: n,
      userEvent: "select.pointer"
    }), this.mustSelect = !1;
  }
  update(e) {
    this.style.update(e) && setTimeout(() => this.select(this.lastEvent), 20);
  }
}
function $O(t, e) {
  let r = t.state.facet($y);
  return r.length ? r[0](e) : kt.mac ? e.metaKey : e.ctrlKey;
}
function bO(t, e) {
  let r = t.state.facet(by);
  return r.length ? r[0](e) : kt.mac ? !e.altKey : !e.ctrlKey;
}
function EO(t, e) {
  let { main: r } = t.state.selection;
  if (r.empty)
    return !1;
  let n = zl(t.root);
  if (!n || n.rangeCount == 0)
    return !0;
  let i = n.getRangeAt(0).getClientRects();
  for (let s = 0; s < i.length; s++) {
    let o = i[s];
    if (o.left <= e.clientX && o.right >= e.clientX && o.top <= e.clientY && o.bottom >= e.clientY)
      return !0;
  }
  return !1;
}
function vO(t, e) {
  if (!e.bubbles)
    return !0;
  if (e.defaultPrevented)
    return !1;
  for (let r = e.target, n; r != t.contentDOM; r = r.parentNode)
    if (!r || r.nodeType == 11 || (n = ar.get(r)) && n.ignoreEvent(e))
      return !1;
  return !0;
}
const On = /* @__PURE__ */ Object.create(null), Dn = /* @__PURE__ */ Object.create(null), Ly = kt.ie && kt.ie_version < 15 || kt.ios && kt.webkit_version < 604;
function SO(t) {
  let e = t.dom.parentNode;
  if (!e)
    return;
  let r = e.appendChild(document.createElement("textarea"));
  r.style.cssText = "position: fixed; left: -10000px; top: 10px", r.focus(), setTimeout(() => {
    t.focus(), r.remove(), Py(t, r.value);
  }, 50);
}
function Py(t, e) {
  let { state: r } = t, n, i = 1, s = r.toText(e), o = s.lines == r.selection.ranges.length;
  if (Y_ != null && r.selection.ranges.every((l) => l.empty) && Y_ == s.toString()) {
    let l = -1;
    n = r.changeByRange((c) => {
      let f = r.doc.lineAt(c.from);
      if (f.from == l)
        return { range: c };
      l = f.from;
      let m = r.toText((o ? s.line(i++).text : e) + r.lineBreak);
      return {
        changes: { from: f.from, insert: m },
        range: $t.cursor(c.from + m.length)
      };
    });
  } else
    o ? n = r.changeByRange((l) => {
      let c = s.line(i++);
      return {
        changes: { from: l.from, to: l.to, insert: c.text },
        range: $t.cursor(l.from + c.length)
      };
    }) : n = r.replaceSelection(s);
  t.dispatch(n, {
    userEvent: "input.paste",
    scrollIntoView: !0
  });
}
Dn.scroll = (t) => {
  t.inputState.lastScrollTop = t.scrollDOM.scrollTop, t.inputState.lastScrollLeft = t.scrollDOM.scrollLeft;
};
On.keydown = (t, e) => (t.inputState.setSelectionOrigin("select"), e.keyCode == 27 && (t.inputState.lastEscPress = Date.now()), !1);
Dn.touchstart = (t, e) => {
  t.inputState.lastTouchTime = Date.now(), t.inputState.setSelectionOrigin("select.pointer");
};
Dn.touchmove = (t) => {
  t.inputState.setSelectionOrigin("select.pointer");
};
On.mousedown = (t, e) => {
  if (t.observer.flush(), t.inputState.lastTouchTime > Date.now() - 2e3)
    return !1;
  let r = null;
  for (let n of t.state.facet(Ey))
    if (r = n(t, e), r)
      break;
  if (!r && e.button == 0 && (r = CO(t, e)), r) {
    let n = !t.hasFocus;
    t.inputState.startMouseSelection(new gO(t, e, r, n)), n && t.observer.ignore(() => ty(t.contentDOM));
    let i = t.inputState.mouseSelection;
    if (i)
      return i.start(e), i.dragging === !1;
  }
  return !1;
};
function mE(t, e, r, n) {
  if (n == 1)
    return $t.cursor(e, r);
  if (n == 2)
    return sO(t.state, e, r);
  {
    let i = Er.find(t.docView, e), s = t.state.doc.lineAt(i ? i.posAtEnd : e), o = i ? i.posAtStart : s.from, a = i ? i.posAtEnd : s.to;
    return a < t.state.doc.length && a == s.to && a++, $t.range(o, a);
  }
}
let Fy = (t, e) => t >= e.top && t <= e.bottom, gE = (t, e, r) => Fy(e, r) && t >= r.left && t <= r.right;
function yO(t, e, r, n) {
  let i = Er.find(t.docView, e);
  if (!i)
    return 1;
  let s = e - i.posAtStart;
  if (s == 0)
    return 1;
  if (s == i.length)
    return -1;
  let o = i.coordsAt(s, -1);
  if (o && gE(r, n, o))
    return -1;
  let a = i.coordsAt(s, 1);
  return a && gE(r, n, a) ? 1 : o && Fy(n, o) ? -1 : 1;
}
function $E(t, e) {
  let r = t.posAtCoords({ x: e.clientX, y: e.clientY }, !1);
  return { pos: r, bias: yO(t, r, e.clientX, e.clientY) };
}
const TO = kt.ie && kt.ie_version <= 11;
let bE = null, EE = 0, vE = 0;
function By(t) {
  if (!TO)
    return t.detail;
  let e = bE, r = vE;
  return bE = t, vE = Date.now(), EE = !e || r > Date.now() - 400 && Math.abs(e.clientX - t.clientX) < 2 && Math.abs(e.clientY - t.clientY) < 2 ? (EE + 1) % 3 : 1;
}
function CO(t, e) {
  let r = $E(t, e), n = By(e), i = t.state.selection;
  return {
    update(s) {
      s.docChanged && (r.pos = s.changes.mapPos(r.pos), i = i.map(s.changes));
    },
    get(s, o, a) {
      let l = $E(t, s), c, f = mE(t, l.pos, l.bias, n);
      if (r.pos != l.pos && !o) {
        let m = mE(t, r.pos, r.bias, n), b = Math.min(m.from, f.from), C = Math.max(m.to, f.to);
        f = b < f.from ? $t.range(b, C) : $t.range(C, b);
      }
      return o ? i.replaceRange(i.main.extend(f.from, f.to)) : a && n == 1 && i.ranges.length > 1 && (c = wO(i, l.pos)) ? c : a ? i.addRange(f) : $t.create([f]);
    }
  };
}
function wO(t, e) {
  for (let r = 0; r < t.ranges.length; r++) {
    let { from: n, to: i } = t.ranges[r];
    if (n <= e && i >= e)
      return $t.create(t.ranges.slice(0, r).concat(t.ranges.slice(r + 1)), t.mainIndex == r ? 0 : t.mainIndex - (t.mainIndex > r ? 1 : 0));
  }
  return null;
}
On.dragstart = (t, e) => {
  let { selection: { main: r } } = t.state;
  if (e.target.draggable) {
    let i = t.docView.nearest(e.target);
    if (i && i.isWidget) {
      let s = i.posAtStart, o = s + i.length;
      (s >= r.to || o <= r.from) && (r = $t.range(s, o));
    }
  }
  let { inputState: n } = t;
  return n.mouseSelection && (n.mouseSelection.dragging = !0), n.draggedContent = r, e.dataTransfer && (e.dataTransfer.setData("Text", t.state.sliceDoc(r.from, r.to)), e.dataTransfer.effectAllowed = "copyMove"), !1;
};
On.dragend = (t) => (t.inputState.draggedContent = null, !1);
function SE(t, e, r, n) {
  if (!r)
    return;
  let i = t.posAtCoords({ x: e.clientX, y: e.clientY }, !1), { draggedContent: s } = t.inputState, o = n && s && bO(t, e) ? { from: s.from, to: s.to } : null, a = { from: i, insert: r }, l = t.state.changes(o ? [o, a] : a);
  t.focus(), t.dispatch({
    changes: l,
    selection: { anchor: l.mapPos(i, -1), head: l.mapPos(i, 1) },
    userEvent: o ? "move.drop" : "input.drop"
  }), t.inputState.draggedContent = null;
}
On.drop = (t, e) => {
  if (!e.dataTransfer)
    return !1;
  if (t.state.readOnly)
    return !0;
  let r = e.dataTransfer.files;
  if (r && r.length) {
    let n = Array(r.length), i = 0, s = () => {
      ++i == r.length && SE(t, e, n.filter((o) => o != null).join(t.state.lineBreak), !1);
    };
    for (let o = 0; o < r.length; o++) {
      let a = new FileReader();
      a.onerror = s, a.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(a.result) || (n[o] = a.result), s();
      }, a.readAsText(r[o]);
    }
    return !0;
  } else {
    let n = e.dataTransfer.getData("Text");
    if (n)
      return SE(t, e, n, !0), !0;
  }
  return !1;
};
On.paste = (t, e) => {
  if (t.state.readOnly)
    return !0;
  t.observer.flush();
  let r = Ly ? null : e.clipboardData;
  return r ? (Py(t, r.getData("text/plain") || r.getData("text/uri-text")), !0) : (SO(t), !1);
};
function AO(t, e) {
  let r = t.dom.parentNode;
  if (!r)
    return;
  let n = r.appendChild(document.createElement("textarea"));
  n.style.cssText = "position: fixed; left: -10000px; top: 10px", n.value = e, n.focus(), n.selectionEnd = e.length, n.selectionStart = 0, setTimeout(() => {
    n.remove(), t.focus();
  }, 50);
}
function RO(t) {
  let e = [], r = [], n = !1;
  for (let i of t.selection.ranges)
    i.empty || (e.push(t.sliceDoc(i.from, i.to)), r.push(i));
  if (!e.length) {
    let i = -1;
    for (let { from: s } of t.selection.ranges) {
      let o = t.doc.lineAt(s);
      o.number > i && (e.push(o.text), r.push({ from: o.from, to: Math.min(t.doc.length, o.to + 1) })), i = o.number;
    }
    n = !0;
  }
  return { text: e.join(t.lineBreak), ranges: r, linewise: n };
}
let Y_ = null;
On.copy = On.cut = (t, e) => {
  let { text: r, ranges: n, linewise: i } = RO(t.state);
  if (!r && !i)
    return !1;
  Y_ = i ? r : null, e.type == "cut" && !t.state.readOnly && t.dispatch({
    changes: n,
    scrollIntoView: !0,
    userEvent: "delete.cut"
  });
  let s = Ly ? null : e.clipboardData;
  return s ? (s.clearData(), s.setData("text/plain", r), !0) : (AO(t, r), !1);
};
const Uy = /* @__PURE__ */ $i.define();
function qy(t, e) {
  let r = [];
  for (let n of t.facet(yy)) {
    let i = n(t, e);
    i && r.push(i);
  }
  return r ? t.update({ effects: r, annotations: Uy.of(!0) }) : null;
}
function zy(t) {
  setTimeout(() => {
    let e = t.hasFocus;
    if (e != t.inputState.notifiedFocused) {
      let r = qy(t.state, e);
      r ? t.dispatch(r) : t.update([]);
    }
  }, 10);
}
Dn.focus = (t) => {
  t.inputState.lastFocusTime = Date.now(), !t.scrollDOM.scrollTop && (t.inputState.lastScrollTop || t.inputState.lastScrollLeft) && (t.scrollDOM.scrollTop = t.inputState.lastScrollTop, t.scrollDOM.scrollLeft = t.inputState.lastScrollLeft), zy(t);
};
Dn.blur = (t) => {
  t.observer.clearSelectionRange(), zy(t);
};
Dn.compositionstart = Dn.compositionupdate = (t) => {
  t.inputState.compositionFirstChange == null && (t.inputState.compositionFirstChange = !0), t.inputState.composing < 0 && (t.inputState.composing = 0);
};
Dn.compositionend = (t) => {
  t.inputState.composing = -1, t.inputState.compositionEndedAt = Date.now(), t.inputState.compositionPendingKey = !0, t.inputState.compositionPendingChange = t.observer.pendingRecords().length > 0, t.inputState.compositionFirstChange = null, kt.chrome && kt.android ? t.observer.flushSoon() : t.inputState.compositionPendingChange ? Promise.resolve().then(() => t.observer.flush()) : setTimeout(() => {
    t.inputState.composing < 0 && t.docView.hasComposition && t.update([]);
  }, 50);
};
Dn.contextmenu = (t) => {
  t.inputState.lastContextMenu = Date.now();
};
On.beforeinput = (t, e) => {
  var r;
  let n;
  if (kt.chrome && kt.android && (n = Dy.find((i) => i.inputType == e.inputType)) && (t.observer.delayAndroidKey(n.key, n.keyCode), n.key == "Backspace" || n.key == "Delete")) {
    let i = ((r = window.visualViewport) === null || r === void 0 ? void 0 : r.height) || 0;
    setTimeout(() => {
      var s;
      (((s = window.visualViewport) === null || s === void 0 ? void 0 : s.height) || 0) > i + 10 && t.hasFocus && (t.contentDOM.blur(), t.focus());
    }, 100);
  }
  return !1;
};
const yE = /* @__PURE__ */ new Set();
function xO(t) {
  yE.has(t) || (yE.add(t), t.addEventListener("copy", () => {
  }), t.addEventListener("cut", () => {
  }));
}
const TE = ["pre-wrap", "normal", "pre-line", "break-spaces"];
class NO {
  constructor(e) {
    this.lineWrapping = e, this.doc = Jt.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.textHeight = 14, this.lineLength = 30, this.heightChanged = !1;
  }
  heightForGap(e, r) {
    let n = this.doc.lineAt(r).number - this.doc.lineAt(e).number + 1;
    return this.lineWrapping && (n += Math.max(0, Math.ceil((r - e - n * this.lineLength * 0.5) / this.lineLength))), this.lineHeight * n;
  }
  heightForLine(e) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((e - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(e) {
    return this.doc = e, this;
  }
  mustRefreshForWrapping(e) {
    return TE.indexOf(e) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(e) {
    let r = !1;
    for (let n = 0; n < e.length; n++) {
      let i = e[n];
      i < 0 ? n++ : this.heightSamples[Math.floor(i * 10)] || (r = !0, this.heightSamples[Math.floor(i * 10)] = !0);
    }
    return r;
  }
  refresh(e, r, n, i, s, o) {
    let a = TE.indexOf(e) > -1, l = Math.round(r) != Math.round(this.lineHeight) || this.lineWrapping != a;
    if (this.lineWrapping = a, this.lineHeight = r, this.charWidth = n, this.textHeight = i, this.lineLength = s, l) {
      this.heightSamples = {};
      for (let c = 0; c < o.length; c++) {
        let f = o[c];
        f < 0 ? c++ : this.heightSamples[Math.floor(f * 10)] = !0;
      }
    }
    return l;
  }
}
class kO {
  constructor(e, r) {
    this.from = e, this.heights = r, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}
class Wn {
  /**
  @internal
  */
  constructor(e, r, n, i, s) {
    this.from = e, this.length = r, this.top = n, this.height = i, this._content = s;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? Kr.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof Wi ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(e) {
    let r = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(e._content) ? e._content : [e]);
    return new Wn(this.from, this.length + e.length, this.top, this.height + e.height, r);
  }
}
var or = /* @__PURE__ */ function(t) {
  return t[t.ByPos = 0] = "ByPos", t[t.ByHeight = 1] = "ByHeight", t[t.ByPosNoHeight = 2] = "ByPosNoHeight", t;
}(or || (or = {}));
const Rl = 1e-3;
class Qr {
  constructor(e, r, n = 2) {
    this.length = e, this.height = r, this.flags = n;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(e) {
    this.flags = (e ? 2 : 0) | this.flags & -3;
  }
  setHeight(e, r) {
    this.height != r && (Math.abs(this.height - r) > Rl && (e.heightChanged = !0), this.height = r);
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(e, r, n) {
    return Qr.of(n);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(e, r) {
    r.push(this);
  }
  decomposeRight(e, r) {
    r.push(this);
  }
  applyChanges(e, r, n, i) {
    let s = this, o = n.doc;
    for (let a = i.length - 1; a >= 0; a--) {
      let { fromA: l, toA: c, fromB: f, toB: m } = i[a], b = s.lineAt(l, or.ByPosNoHeight, n.setDoc(r), 0, 0), C = b.to >= c ? b : s.lineAt(c, or.ByPosNoHeight, n, 0, 0);
      for (m += C.to - c, c = C.to; a > 0 && b.from <= i[a - 1].toA; )
        l = i[a - 1].fromA, f = i[a - 1].fromB, a--, l < b.from && (b = s.lineAt(l, or.ByPosNoHeight, n, 0, 0));
      f += b.from - l, l = b.from;
      let N = Wh.build(n.setDoc(o), e, f, m);
      s = s.replace(l, c, N);
    }
    return s.updateHeight(n, 0);
  }
  static empty() {
    return new cn(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(e) {
    if (e.length == 1)
      return e[0];
    let r = 0, n = e.length, i = 0, s = 0;
    for (; ; )
      if (r == n)
        if (i > s * 2) {
          let a = e[r - 1];
          a.break ? e.splice(--r, 1, a.left, null, a.right) : e.splice(--r, 1, a.left, a.right), n += 1 + a.break, i -= a.size;
        } else if (s > i * 2) {
          let a = e[n];
          a.break ? e.splice(n, 1, a.left, null, a.right) : e.splice(n, 1, a.left, a.right), n += 2 + a.break, s -= a.size;
        } else
          break;
      else if (i < s) {
        let a = e[r++];
        a && (i += a.size);
      } else {
        let a = e[--n];
        a && (s += a.size);
      }
    let o = 0;
    return e[r - 1] == null ? (o = 1, r--) : e[r] == null && (o = 1, n++), new IO(Qr.of(e.slice(0, r)), o, Qr.of(e.slice(n)));
  }
}
Qr.prototype.size = 1;
class Gy extends Qr {
  constructor(e, r, n) {
    super(e, r), this.deco = n;
  }
  blockAt(e, r, n, i) {
    return new Wn(i, this.length, n, this.height, this.deco || 0);
  }
  lineAt(e, r, n, i, s) {
    return this.blockAt(0, n, i, s);
  }
  forEachLine(e, r, n, i, s, o) {
    e <= s + this.length && r >= s && o(this.blockAt(0, n, i, s));
  }
  updateHeight(e, r = 0, n = !1, i) {
    return i && i.from <= r && i.more && this.setHeight(e, i.heights[i.index++]), this.outdated = !1, this;
  }
  toString() {
    return `block(${this.length})`;
  }
}
class cn extends Gy {
  constructor(e, r) {
    super(e, r, null), this.collapsed = 0, this.widgetHeight = 0, this.breaks = 0;
  }
  blockAt(e, r, n, i) {
    return new Wn(i, this.length, n, this.height, this.breaks);
  }
  replace(e, r, n) {
    let i = n[0];
    return n.length == 1 && (i instanceof cn || i instanceof Rr && i.flags & 4) && Math.abs(this.length - i.length) < 10 ? (i instanceof Rr ? i = new cn(i.length, this.height) : i.height = this.height, this.outdated || (i.outdated = !1), i) : Qr.of(n);
  }
  updateHeight(e, r = 0, n = !1, i) {
    return i && i.from <= r && i.more ? this.setHeight(e, i.heights[i.index++]) : (n || this.outdated) && this.setHeight(e, Math.max(this.widgetHeight, e.heightForLine(this.length - this.collapsed)) + this.breaks * e.lineHeight), this.outdated = !1, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
}
class Rr extends Qr {
  constructor(e) {
    super(e, 0);
  }
  heightMetrics(e, r) {
    let n = e.doc.lineAt(r).number, i = e.doc.lineAt(r + this.length).number, s = i - n + 1, o, a = 0;
    if (e.lineWrapping) {
      let l = Math.min(this.height, e.lineHeight * s);
      o = l / s, this.length > s + 1 && (a = (this.height - l) / (this.length - s - 1));
    } else
      o = this.height / s;
    return { firstLine: n, lastLine: i, perLine: o, perChar: a };
  }
  blockAt(e, r, n, i) {
    let { firstLine: s, lastLine: o, perLine: a, perChar: l } = this.heightMetrics(r, i);
    if (r.lineWrapping) {
      let c = i + Math.round(Math.max(0, Math.min(1, (e - n) / this.height)) * this.length), f = r.doc.lineAt(c), m = a + f.length * l, b = Math.max(n, e - m / 2);
      return new Wn(f.from, f.length, b, m, 0);
    } else {
      let c = Math.max(0, Math.min(o - s, Math.floor((e - n) / a))), { from: f, length: m } = r.doc.line(s + c);
      return new Wn(f, m, n + a * c, a, 0);
    }
  }
  lineAt(e, r, n, i, s) {
    if (r == or.ByHeight)
      return this.blockAt(e, n, i, s);
    if (r == or.ByPosNoHeight) {
      let { from: C, to: N } = n.doc.lineAt(e);
      return new Wn(C, N - C, 0, 0, 0);
    }
    let { firstLine: o, perLine: a, perChar: l } = this.heightMetrics(n, s), c = n.doc.lineAt(e), f = a + c.length * l, m = c.number - o, b = i + a * m + l * (c.from - s - m);
    return new Wn(c.from, c.length, Math.max(i, Math.min(b, i + this.height - f)), f, 0);
  }
  forEachLine(e, r, n, i, s, o) {
    e = Math.max(e, s), r = Math.min(r, s + this.length);
    let { firstLine: a, perLine: l, perChar: c } = this.heightMetrics(n, s);
    for (let f = e, m = i; f <= r; ) {
      let b = n.doc.lineAt(f);
      if (f == e) {
        let N = b.number - a;
        m += l * N + c * (e - s - N);
      }
      let C = l + c * b.length;
      o(new Wn(b.from, b.length, m, C, 0)), m += C, f = b.to + 1;
    }
  }
  replace(e, r, n) {
    let i = this.length - r;
    if (i > 0) {
      let s = n[n.length - 1];
      s instanceof Rr ? n[n.length - 1] = new Rr(s.length + i) : n.push(null, new Rr(i - 1));
    }
    if (e > 0) {
      let s = n[0];
      s instanceof Rr ? n[0] = new Rr(e + s.length) : n.unshift(new Rr(e - 1), null);
    }
    return Qr.of(n);
  }
  decomposeLeft(e, r) {
    r.push(new Rr(e - 1), null);
  }
  decomposeRight(e, r) {
    r.push(null, new Rr(this.length - e - 1));
  }
  updateHeight(e, r = 0, n = !1, i) {
    let s = r + this.length;
    if (i && i.from <= r + this.length && i.more) {
      let o = [], a = Math.max(r, i.from), l = -1;
      for (i.from > r && o.push(new Rr(i.from - r - 1).updateHeight(e, r)); a <= s && i.more; ) {
        let f = e.doc.lineAt(a).length;
        o.length && o.push(null);
        let m = i.heights[i.index++];
        l == -1 ? l = m : Math.abs(m - l) >= Rl && (l = -2);
        let b = new cn(f, m);
        b.outdated = !1, o.push(b), a += f + 1;
      }
      a <= s && o.push(null, new Rr(s - a).updateHeight(e, a));
      let c = Qr.of(o);
      return (l < 0 || Math.abs(c.height - this.height) >= Rl || Math.abs(l - this.heightMetrics(e, r).perLine) >= Rl) && (e.heightChanged = !0), c;
    } else
      (n || this.outdated) && (this.setHeight(e, e.heightForGap(r, r + this.length)), this.outdated = !1);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
}
class IO extends Qr {
  constructor(e, r, n) {
    super(e.length + r + n.length, e.height + n.height, r | (e.outdated || n.outdated ? 2 : 0)), this.left = e, this.right = n, this.size = e.size + n.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(e, r, n, i) {
    let s = n + this.left.height;
    return e < s ? this.left.blockAt(e, r, n, i) : this.right.blockAt(e, r, s, i + this.left.length + this.break);
  }
  lineAt(e, r, n, i, s) {
    let o = i + this.left.height, a = s + this.left.length + this.break, l = r == or.ByHeight ? e < o : e < a, c = l ? this.left.lineAt(e, r, n, i, s) : this.right.lineAt(e, r, n, o, a);
    if (this.break || (l ? c.to < a : c.from > a))
      return c;
    let f = r == or.ByPosNoHeight ? or.ByPosNoHeight : or.ByPos;
    return l ? c.join(this.right.lineAt(a, f, n, o, a)) : this.left.lineAt(a, f, n, i, s).join(c);
  }
  forEachLine(e, r, n, i, s, o) {
    let a = i + this.left.height, l = s + this.left.length + this.break;
    if (this.break)
      e < l && this.left.forEachLine(e, r, n, i, s, o), r >= l && this.right.forEachLine(e, r, n, a, l, o);
    else {
      let c = this.lineAt(l, or.ByPos, n, i, s);
      e < c.from && this.left.forEachLine(e, c.from - 1, n, i, s, o), c.to >= e && c.from <= r && o(c), r > c.to && this.right.forEachLine(c.to + 1, r, n, a, l, o);
    }
  }
  replace(e, r, n) {
    let i = this.left.length + this.break;
    if (r < i)
      return this.balanced(this.left.replace(e, r, n), this.right);
    if (e > this.left.length)
      return this.balanced(this.left, this.right.replace(e - i, r - i, n));
    let s = [];
    e > 0 && this.decomposeLeft(e, s);
    let o = s.length;
    for (let a of n)
      s.push(a);
    if (e > 0 && CE(s, o - 1), r < this.length) {
      let a = s.length;
      this.decomposeRight(r, s), CE(s, a);
    }
    return Qr.of(s);
  }
  decomposeLeft(e, r) {
    let n = this.left.length;
    if (e <= n)
      return this.left.decomposeLeft(e, r);
    r.push(this.left), this.break && (n++, e >= n && r.push(null)), e > n && this.right.decomposeLeft(e - n, r);
  }
  decomposeRight(e, r) {
    let n = this.left.length, i = n + this.break;
    if (e >= i)
      return this.right.decomposeRight(e - i, r);
    e < n && this.left.decomposeRight(e, r), this.break && e < i && r.push(null), r.push(this.right);
  }
  balanced(e, r) {
    return e.size > 2 * r.size || r.size > 2 * e.size ? Qr.of(this.break ? [e, null, r] : [e, r]) : (this.left = e, this.right = r, this.height = e.height + r.height, this.outdated = e.outdated || r.outdated, this.size = e.size + r.size, this.length = e.length + this.break + r.length, this);
  }
  updateHeight(e, r = 0, n = !1, i) {
    let { left: s, right: o } = this, a = r + s.length + this.break, l = null;
    return i && i.from <= r + s.length && i.more ? l = s = s.updateHeight(e, r, n, i) : s.updateHeight(e, r, n), i && i.from <= a + o.length && i.more ? l = o = o.updateHeight(e, a, n, i) : o.updateHeight(e, a, n), l ? this.balanced(s, o) : (this.height = this.left.height + this.right.height, this.outdated = !1, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
}
function CE(t, e) {
  let r, n;
  t[e] == null && (r = t[e - 1]) instanceof Rr && (n = t[e + 1]) instanceof Rr && t.splice(e - 1, 3, new Rr(r.length + 1 + n.length));
}
const OO = 5;
class Wh {
  constructor(e, r) {
    this.pos = e, this.oracle = r, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = e;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(e, r) {
    if (this.lineStart > -1) {
      let n = Math.min(r, this.lineEnd), i = this.nodes[this.nodes.length - 1];
      i instanceof cn ? i.length += n - this.pos : (n > this.pos || !this.isCovered) && this.nodes.push(new cn(n - this.pos, -1)), this.writtenTo = n, r > n && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = r;
  }
  point(e, r, n) {
    if (e < r || n.heightRelevant) {
      let i = n.widget ? n.widget.estimatedHeight : 0, s = n.widget ? n.widget.lineBreaks : 0;
      i < 0 && (i = this.oracle.lineHeight);
      let o = r - e;
      n.block ? this.addBlock(new Gy(o, i, n)) : (o || s || i >= OO) && this.addLineDeco(i, s, o);
    } else
      r > e && this.span(e, r);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: e, to: r } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = e, this.lineEnd = r, this.writtenTo < e && ((this.writtenTo < e - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, e - 1)), this.nodes.push(null)), this.pos > e && this.nodes.push(new cn(this.pos - e, -1)), this.writtenTo = this.pos;
  }
  blankContent(e, r) {
    let n = new Rr(r - e);
    return this.oracle.doc.lineAt(e).to == r && (n.flags |= 4), n;
  }
  ensureLine() {
    this.enterLine();
    let e = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (e instanceof cn)
      return e;
    let r = new cn(0, -1);
    return this.nodes.push(r), r;
  }
  addBlock(e) {
    this.enterLine();
    let r = e.deco;
    r && r.startSide > 0 && !this.isCovered && this.ensureLine(), this.nodes.push(e), this.writtenTo = this.pos = this.pos + e.length, r && r.endSide > 0 && (this.covering = e);
  }
  addLineDeco(e, r, n) {
    let i = this.ensureLine();
    i.length += n, i.collapsed += n, i.widgetHeight = Math.max(i.widgetHeight, e), i.breaks += r, this.writtenTo = this.pos = this.pos + n;
  }
  finish(e) {
    let r = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(r instanceof cn) && !this.isCovered ? this.nodes.push(new cn(0, -1)) : (this.writtenTo < this.pos || r == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let n = e;
    for (let i of this.nodes)
      i instanceof cn && i.updateHeight(this.oracle, n), n += i ? i.length : 1;
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(e, r, n, i) {
    let s = new Wh(n, e);
    return Zt.spans(r, n, i, s, 0), s.finish(n);
  }
}
function DO(t, e, r) {
  let n = new MO();
  return Zt.compare(t, e, r, n, 0), n.changes;
}
class MO {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(e, r, n, i) {
    (e < r || n && n.heightRelevant || i && i.heightRelevant) && P_(e, r, this.changes, 5);
  }
}
function LO(t, e) {
  let r = t.getBoundingClientRect(), n = t.ownerDocument, i = n.defaultView || window, s = Math.max(0, r.left), o = Math.min(i.innerWidth, r.right), a = Math.max(0, r.top), l = Math.min(i.innerHeight, r.bottom);
  for (let c = t.parentNode; c && c != n.body; )
    if (c.nodeType == 1) {
      let f = c, m = window.getComputedStyle(f);
      if ((f.scrollHeight > f.clientHeight || f.scrollWidth > f.clientWidth) && m.overflow != "visible") {
        let b = f.getBoundingClientRect();
        s = Math.max(s, b.left), o = Math.min(o, b.right), a = Math.max(a, b.top), l = c == t.parentNode ? b.bottom : Math.min(l, b.bottom);
      }
      c = m.position == "absolute" || m.position == "fixed" ? f.offsetParent : f.parentNode;
    } else if (c.nodeType == 11)
      c = c.host;
    else
      break;
  return {
    left: s - r.left,
    right: Math.max(s, o) - r.left,
    top: a - (r.top + e),
    bottom: Math.max(a, l) - (r.top + e)
  };
}
function PO(t, e) {
  let r = t.getBoundingClientRect();
  return {
    left: 0,
    right: r.right - r.left,
    top: e,
    bottom: r.bottom - (r.top + e)
  };
}
class Lp {
  constructor(e, r, n) {
    this.from = e, this.to = r, this.size = n;
  }
  static same(e, r) {
    if (e.length != r.length)
      return !1;
    for (let n = 0; n < e.length; n++) {
      let i = e[n], s = r[n];
      if (i.from != s.from || i.to != s.to || i.size != s.size)
        return !1;
    }
    return !0;
  }
  draw(e, r) {
    return Ot.replace({
      widget: new FO(this.size * (r ? e.scaleY : e.scaleX), r)
    }).range(this.from, this.to);
  }
}
class FO extends bi {
  constructor(e, r) {
    super(), this.size = e, this.vertical = r;
  }
  eq(e) {
    return e.size == this.size && e.vertical == this.vertical;
  }
  toDOM() {
    let e = document.createElement("div");
    return this.vertical ? e.style.height = this.size + "px" : (e.style.width = this.size + "px", e.style.height = "2px", e.style.display = "inline-block"), e;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}
class wE {
  constructor(e) {
    this.state = e, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = !0, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scrollTop = 0, this.scrolledToBottom = !0, this.scaleX = 1, this.scaleY = 1, this.scrollAnchorPos = 0, this.scrollAnchorHeight = -1, this.scaler = AE, this.scrollTarget = null, this.printing = !1, this.mustMeasureContent = !0, this.defaultTextDirection = lr.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = !1;
    let r = e.facet(Hh).some((n) => typeof n != "function" && n.class == "cm-lineWrapping");
    this.heightOracle = new NO(r), this.stateDeco = e.facet(ca).filter((n) => typeof n != "function"), this.heightMap = Qr.empty().applyChanges(this.stateDeco, Jt.empty, this.heightOracle.setDoc(e.doc), [new Cn(0, 0, 0, e.doc.length)]), this.viewport = this.getViewport(0, null), this.updateViewportLines(), this.updateForViewport(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = Ot.set(this.lineGaps.map((n) => n.draw(this, !1))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let e = [this.viewport], { main: r } = this.state.selection;
    for (let n = 0; n <= 1; n++) {
      let i = n ? r.head : r.anchor;
      if (!e.some(({ from: s, to: o }) => i >= s && i <= o)) {
        let { from: s, to: o } = this.lineBlockAt(i);
        e.push(new rl(s, o));
      }
    }
    this.viewports = e.sort((n, i) => n.from - i.from), this.scaler = this.heightMap.height <= 7e6 ? AE : new qO(this.heightOracle, this.heightMap, this.viewports);
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (e) => {
      this.viewportLines.push(this.scaler.scale == 1 ? e : xo(e, this.scaler));
    });
  }
  update(e, r = null) {
    this.state = e.state;
    let n = this.stateDeco;
    this.stateDeco = this.state.facet(ca).filter((f) => typeof f != "function");
    let i = e.changedRanges, s = Cn.extendWithRanges(i, DO(n, this.stateDeco, e ? e.changes : vr.empty(this.state.doc.length))), o = this.heightMap.height, a = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    this.heightMap = this.heightMap.applyChanges(this.stateDeco, e.startState.doc, this.heightOracle.setDoc(this.state.doc), s), this.heightMap.height != o && (e.flags |= 2), a ? (this.scrollAnchorPos = e.changes.mapPos(a.from, -1), this.scrollAnchorHeight = a.top) : (this.scrollAnchorPos = -1, this.scrollAnchorHeight = this.heightMap.height);
    let l = s.length ? this.mapViewport(this.viewport, e.changes) : this.viewport;
    (r && (r.range.head < l.from || r.range.head > l.to) || !this.viewportIsAppropriate(l)) && (l = this.getViewport(0, r));
    let c = !e.changes.empty || e.flags & 2 || l.from != this.viewport.from || l.to != this.viewport.to;
    this.viewport = l, this.updateForViewport(), c && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, e.changes))), e.flags |= this.computeVisibleRanges(), r && (this.scrollTarget = r), !this.mustEnforceCursorAssoc && e.selectionSet && e.view.lineWrapping && e.state.selection.main.empty && e.state.selection.main.assoc && !e.state.facet(Cy) && (this.mustEnforceCursorAssoc = !0);
  }
  measure(e) {
    let r = e.contentDOM, n = window.getComputedStyle(r), i = this.heightOracle, s = n.whiteSpace;
    this.defaultTextDirection = n.direction == "rtl" ? lr.RTL : lr.LTR;
    let o = this.heightOracle.mustRefreshForWrapping(s), a = r.getBoundingClientRect(), l = o || this.mustMeasureContent || this.contentDOMHeight != a.height;
    this.contentDOMHeight = a.height, this.mustMeasureContent = !1;
    let c = 0, f = 0;
    if (a.width && a.height) {
      let { scaleX: ge, scaleY: Y } = ey(r, a);
      (this.scaleX != ge || this.scaleY != Y) && (this.scaleX = ge, this.scaleY = Y, c |= 8, o = l = !0);
    }
    let m = (parseInt(n.paddingTop) || 0) * this.scaleY, b = (parseInt(n.paddingBottom) || 0) * this.scaleY;
    (this.paddingTop != m || this.paddingBottom != b) && (this.paddingTop = m, this.paddingBottom = b, c |= 10), this.editorWidth != e.scrollDOM.clientWidth && (i.lineWrapping && (l = !0), this.editorWidth = e.scrollDOM.clientWidth, c |= 8);
    let C = e.scrollDOM.scrollTop * this.scaleY;
    this.scrollTop != C && (this.scrollAnchorHeight = -1, this.scrollTop = C), this.scrolledToBottom = ny(e.scrollDOM);
    let N = (this.printing ? PO : LO)(r, this.paddingTop), z = N.top - this.pixelViewport.top, A = N.bottom - this.pixelViewport.bottom;
    this.pixelViewport = N;
    let Q = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (Q != this.inView && (this.inView = Q, Q && (l = !0)), !this.inView && !this.scrollTarget)
      return 0;
    let Te = a.width;
    if ((this.contentDOMWidth != Te || this.editorHeight != e.scrollDOM.clientHeight) && (this.contentDOMWidth = a.width, this.editorHeight = e.scrollDOM.clientHeight, c |= 8), l) {
      let ge = e.docView.measureVisibleLineHeights(this.viewport);
      if (i.mustRefreshForHeights(ge) && (o = !0), o || i.lineWrapping && Math.abs(Te - this.contentDOMWidth) > i.charWidth) {
        let { lineHeight: Y, charWidth: fe, textHeight: ae } = e.docView.measureTextSize();
        o = Y > 0 && i.refresh(s, Y, fe, ae, Te / fe, ge), o && (e.docView.minWidth = 0, c |= 8);
      }
      z > 0 && A > 0 ? f = Math.max(z, A) : z < 0 && A < 0 && (f = Math.min(z, A)), i.heightChanged = !1;
      for (let Y of this.viewports) {
        let fe = Y.from == this.viewport.from ? ge : e.docView.measureVisibleLineHeights(Y);
        this.heightMap = (o ? Qr.empty().applyChanges(this.stateDeco, Jt.empty, this.heightOracle, [new Cn(0, 0, 0, e.state.doc.length)]) : this.heightMap).updateHeight(i, 0, o, new kO(Y.from, fe));
      }
      i.heightChanged && (c |= 2);
    }
    let ce = !this.viewportIsAppropriate(this.viewport, f) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return ce && (this.viewport = this.getViewport(f, this.scrollTarget)), this.updateForViewport(), (c & 2 || ce) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(o ? [] : this.lineGaps, e)), c |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = !1, e.docView.enforceCursorAssoc()), c;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(e, r) {
    let n = 0.5 - Math.max(-0.5, Math.min(0.5, e / 1e3 / 2)), i = this.heightMap, s = this.heightOracle, { visibleTop: o, visibleBottom: a } = this, l = new rl(i.lineAt(o - n * 1e3, or.ByHeight, s, 0, 0).from, i.lineAt(a + (1 - n) * 1e3, or.ByHeight, s, 0, 0).to);
    if (r) {
      let { head: c } = r.range;
      if (c < l.from || c > l.to) {
        let f = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), m = i.lineAt(c, or.ByPos, s, 0, 0), b;
        r.y == "center" ? b = (m.top + m.bottom) / 2 - f / 2 : r.y == "start" || r.y == "nearest" && c < l.from ? b = m.top : b = m.bottom - f, l = new rl(i.lineAt(b - 1e3 / 2, or.ByHeight, s, 0, 0).from, i.lineAt(b + f + 1e3 / 2, or.ByHeight, s, 0, 0).to);
      }
    }
    return l;
  }
  mapViewport(e, r) {
    let n = r.mapPos(e.from, -1), i = r.mapPos(e.to, 1);
    return new rl(this.heightMap.lineAt(n, or.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(i, or.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: e, to: r }, n = 0) {
    if (!this.inView)
      return !0;
    let { top: i } = this.heightMap.lineAt(e, or.ByPos, this.heightOracle, 0, 0), { bottom: s } = this.heightMap.lineAt(r, or.ByPos, this.heightOracle, 0, 0), { visibleTop: o, visibleBottom: a } = this;
    return (e == 0 || i <= o - Math.max(10, Math.min(
      -n,
      250
      /* VP.MaxCoverMargin */
    ))) && (r == this.state.doc.length || s >= a + Math.max(10, Math.min(
      n,
      250
      /* VP.MaxCoverMargin */
    ))) && i > o - 2 * 1e3 && s < a + 2 * 1e3;
  }
  mapLineGaps(e, r) {
    if (!e.length || r.empty)
      return e;
    let n = [];
    for (let i of e)
      r.touchesRange(i.from, i.to) || n.push(new Lp(r.mapPos(i.from), r.mapPos(i.to), i.size));
    return n;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(e, r) {
    let n = this.heightOracle.lineWrapping, i = n ? 1e4 : 2e3, s = i >> 1, o = i << 1;
    if (this.defaultTextDirection != lr.LTR && !n)
      return [];
    let a = [], l = (c, f, m, b) => {
      if (f - c < s)
        return;
      let C = this.state.selection.main, N = [C.from];
      C.empty || N.push(C.to);
      for (let A of N)
        if (A > c && A < f) {
          l(c, A - 10, m, b), l(A + 10, f, m, b);
          return;
        }
      let z = UO(e, (A) => A.from >= m.from && A.to <= m.to && Math.abs(A.from - c) < s && Math.abs(A.to - f) < s && !N.some((Q) => A.from < Q && A.to > Q));
      if (!z) {
        if (f < m.to && r && n && r.visibleRanges.some((A) => A.from <= f && A.to >= f)) {
          let A = r.moveToLineBoundary($t.cursor(f), !1, !0).head;
          A > c && (f = A);
        }
        z = new Lp(c, f, this.gapSize(m, c, f, b));
      }
      a.push(z);
    };
    for (let c of this.viewportLines) {
      if (c.length < o)
        continue;
      let f = BO(c.from, c.to, this.stateDeco);
      if (f.total < o)
        continue;
      let m = this.scrollTarget ? this.scrollTarget.range.head : null, b, C;
      if (n) {
        let N = i / this.heightOracle.lineLength * this.heightOracle.lineHeight, z, A;
        if (m != null) {
          let Q = il(f, m), Te = ((this.visibleBottom - this.visibleTop) / 2 + N) / c.height;
          z = Q - Te, A = Q + Te;
        } else
          z = (this.visibleTop - c.top - N) / c.height, A = (this.visibleBottom - c.top + N) / c.height;
        b = nl(f, z), C = nl(f, A);
      } else {
        let N = f.total * this.heightOracle.charWidth, z = i * this.heightOracle.charWidth, A, Q;
        if (m != null) {
          let Te = il(f, m), ce = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + z) / N;
          A = Te - ce, Q = Te + ce;
        } else
          A = (this.pixelViewport.left - z) / N, Q = (this.pixelViewport.right + z) / N;
        b = nl(f, A), C = nl(f, Q);
      }
      b > c.from && l(c.from, b, c, f), C < c.to && l(C, c.to, c, f);
    }
    return a;
  }
  gapSize(e, r, n, i) {
    let s = il(i, n) - il(i, r);
    return this.heightOracle.lineWrapping ? e.height * s : i.total * this.heightOracle.charWidth * s;
  }
  updateLineGaps(e) {
    Lp.same(e, this.lineGaps) || (this.lineGaps = e, this.lineGapDeco = Ot.set(e.map((r) => r.draw(this, this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges() {
    let e = this.stateDeco;
    this.lineGaps.length && (e = e.concat(this.lineGapDeco));
    let r = [];
    Zt.spans(e, this.viewport.from, this.viewport.to, {
      span(i, s) {
        r.push({ from: i, to: s });
      },
      point() {
      }
    }, 20);
    let n = r.length != this.visibleRanges.length || this.visibleRanges.some((i, s) => i.from != r[s].from || i.to != r[s].to);
    return this.visibleRanges = r, n ? 4 : 0;
  }
  lineBlockAt(e) {
    return e >= this.viewport.from && e <= this.viewport.to && this.viewportLines.find((r) => r.from <= e && r.to >= e) || xo(this.heightMap.lineAt(e, or.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(e) {
    return xo(this.heightMap.lineAt(this.scaler.fromDOM(e), or.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(e) {
    let r = this.lineBlockAtHeight(e + 8);
    return r.from >= this.viewport.from || this.viewportLines[0].top - e > 200 ? r : this.viewportLines[0];
  }
  elementAtHeight(e) {
    return xo(this.heightMap.blockAt(this.scaler.fromDOM(e), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
}
class rl {
  constructor(e, r) {
    this.from = e, this.to = r;
  }
}
function BO(t, e, r) {
  let n = [], i = t, s = 0;
  return Zt.spans(r, t, e, {
    span() {
    },
    point(o, a) {
      o > i && (n.push({ from: i, to: o }), s += o - i), i = a;
    }
  }, 20), i < e && (n.push({ from: i, to: e }), s += e - i), { total: s, ranges: n };
}
function nl({ total: t, ranges: e }, r) {
  if (r <= 0)
    return e[0].from;
  if (r >= 1)
    return e[e.length - 1].to;
  let n = Math.floor(t * r);
  for (let i = 0; ; i++) {
    let { from: s, to: o } = e[i], a = o - s;
    if (n <= a)
      return s + n;
    n -= a;
  }
}
function il(t, e) {
  let r = 0;
  for (let { from: n, to: i } of t.ranges) {
    if (e <= i) {
      r += e - n;
      break;
    }
    r += i - n;
  }
  return r / t.total;
}
function UO(t, e) {
  for (let r of t)
    if (e(r))
      return r;
}
const AE = {
  toDOM(t) {
    return t;
  },
  fromDOM(t) {
    return t;
  },
  scale: 1
};
class qO {
  constructor(e, r, n) {
    let i = 0, s = 0, o = 0;
    this.viewports = n.map(({ from: a, to: l }) => {
      let c = r.lineAt(a, or.ByPos, e, 0, 0).top, f = r.lineAt(l, or.ByPos, e, 0, 0).bottom;
      return i += f - c, { from: a, to: l, top: c, bottom: f, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - i) / (r.height - i);
    for (let a of this.viewports)
      a.domTop = o + (a.top - s) * this.scale, o = a.domBottom = a.domTop + (a.bottom - a.top), s = a.bottom;
  }
  toDOM(e) {
    for (let r = 0, n = 0, i = 0; ; r++) {
      let s = r < this.viewports.length ? this.viewports[r] : null;
      if (!s || e < s.top)
        return i + (e - n) * this.scale;
      if (e <= s.bottom)
        return s.domTop + (e - s.top);
      n = s.bottom, i = s.domBottom;
    }
  }
  fromDOM(e) {
    for (let r = 0, n = 0, i = 0; ; r++) {
      let s = r < this.viewports.length ? this.viewports[r] : null;
      if (!s || e < s.domTop)
        return n + (e - i) / this.scale;
      if (e <= s.domBottom)
        return s.top + (e - s.domTop);
      n = s.bottom, i = s.domBottom;
    }
  }
}
function xo(t, e) {
  if (e.scale == 1)
    return t;
  let r = e.toDOM(t.top), n = e.toDOM(t.bottom);
  return new Wn(t.from, t.length, r, n - r, Array.isArray(t._content) ? t._content.map((i) => xo(i, e)) : t._content);
}
const sl = /* @__PURE__ */ xt.define({ combine: (t) => t.join(" ") }), H_ = /* @__PURE__ */ xt.define({ combine: (t) => t.indexOf(!0) > -1 }), V_ = /* @__PURE__ */ Hi.newName(), Yy = /* @__PURE__ */ Hi.newName(), Hy = /* @__PURE__ */ Hi.newName(), Vy = { "&light": "." + Yy, "&dark": "." + Hy };
function W_(t, e, r) {
  return new Hi(e, {
    finish(n) {
      return /&/.test(n) ? n.replace(/&\w*/, (i) => {
        if (i == "&")
          return t;
        if (!r || !r[i])
          throw new RangeError(`Unsupported selector: ${i}`);
        return r[i];
      }) : t + " " + n;
    }
  });
}
const zO = /* @__PURE__ */ W_("." + V_, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    // https://github.com/codemirror/dev/issues/456
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    // For IE
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    // For Safari, which doesn't support overflow-wrap: anywhere
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  ".cm-iso": {
    unicodeBidi: "isolate"
  },
  ".cm-announced": {
    position: "fixed",
    top: "-10000px"
  },
  "@media print": {
    ".cm-announced": { display: "none" }
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    insetInlineStart: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    // Necessary -- prevents margin collapsing
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace:before": {
    content: "attr(data-display)",
    position: "absolute",
    pointerEvents: "none",
    color: "#888"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, Vy), No = "￿";
class GO {
  constructor(e, r) {
    this.points = e, this.text = "", this.lineSeparator = r.facet(Qt.lineSeparator);
  }
  append(e) {
    this.text += e;
  }
  lineBreak() {
    this.text += No;
  }
  readRange(e, r) {
    if (!e)
      return this;
    let n = e.parentNode;
    for (let i = e; ; ) {
      this.findPointBefore(n, i);
      let s = this.text.length;
      this.readNode(i);
      let o = i.nextSibling;
      if (o == r)
        break;
      let a = ar.get(i), l = ar.get(o);
      (a && l ? a.breakAfter : (a ? a.breakAfter : RE(i)) || RE(o) && (i.nodeName != "BR" || i.cmIgnore) && this.text.length > s) && this.lineBreak(), i = o;
    }
    return this.findPointBefore(n, r), this;
  }
  readTextNode(e) {
    let r = e.nodeValue;
    for (let n of this.points)
      n.node == e && (n.pos = this.text.length + Math.min(n.offset, r.length));
    for (let n = 0, i = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let s = -1, o = 1, a;
      if (this.lineSeparator ? (s = r.indexOf(this.lineSeparator, n), o = this.lineSeparator.length) : (a = i.exec(r)) && (s = a.index, o = a[0].length), this.append(r.slice(n, s < 0 ? r.length : s)), s < 0)
        break;
      if (this.lineBreak(), o > 1)
        for (let l of this.points)
          l.node == e && l.pos > this.text.length && (l.pos -= o - 1);
      n = s + o;
    }
  }
  readNode(e) {
    if (e.cmIgnore)
      return;
    let r = ar.get(e), n = r && r.overrideDOMText;
    if (n != null) {
      this.findPointInside(e, n.length);
      for (let i = n.iter(); !i.next().done; )
        i.lineBreak ? this.lineBreak() : this.append(i.value);
    } else
      e.nodeType == 3 ? this.readTextNode(e) : e.nodeName == "BR" ? e.nextSibling && this.lineBreak() : e.nodeType == 1 && this.readRange(e.firstChild, null);
  }
  findPointBefore(e, r) {
    for (let n of this.points)
      n.node == e && e.childNodes[n.offset] == r && (n.pos = this.text.length);
  }
  findPointInside(e, r) {
    for (let n of this.points)
      (e.nodeType == 3 ? n.node == e : e.contains(n.node)) && (n.pos = this.text.length + (YO(e, n.node, n.offset) ? r : 0));
  }
}
function YO(t, e, r) {
  for (; ; ) {
    if (!e || r < pi(e))
      return !1;
    if (e == t)
      return !0;
    r = la(e) + 1, e = e.parentNode;
  }
}
function RE(t) {
  return t.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(t.nodeName);
}
class xE {
  constructor(e, r) {
    this.node = e, this.offset = r, this.pos = -1;
  }
}
class HO {
  constructor(e, r, n, i) {
    this.typeOver = i, this.bounds = null, this.text = "";
    let { impreciseHead: s, impreciseAnchor: o } = e.docView;
    if (e.state.readOnly && r > -1)
      this.newSel = null;
    else if (r > -1 && (this.bounds = e.docView.domBoundsAround(r, n, 0))) {
      let a = s || o ? [] : KO(e), l = new GO(a, e.state);
      l.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = l.text, this.newSel = QO(a, this.bounds.from);
    } else {
      let a = e.observer.selectionRange, l = s && s.node == a.focusNode && s.offset == a.focusOffset || !k_(e.contentDOM, a.focusNode) ? e.state.selection.main.head : e.docView.posFromDOM(a.focusNode, a.focusOffset), c = o && o.node == a.anchorNode && o.offset == a.anchorOffset || !k_(e.contentDOM, a.anchorNode) ? e.state.selection.main.anchor : e.docView.posFromDOM(a.anchorNode, a.anchorOffset), f = e.viewport;
      if (kt.ios && e.state.selection.main.empty && l != c && (f.from > 0 || f.to < e.state.doc.length)) {
        let m = f.from - Math.min(l, c), b = f.to - Math.max(l, c);
        (m == 0 || m == 1) && (b == 0 || b == -1) && (l = 0, c = e.state.doc.length);
      }
      this.newSel = $t.single(c, l);
    }
  }
}
function Wy(t, e) {
  let r, { newSel: n } = e, i = t.state.selection.main, s = t.inputState.lastKeyTime > Date.now() - 100 ? t.inputState.lastKeyCode : -1;
  if (e.bounds) {
    let { from: o, to: a } = e.bounds, l = i.from, c = null;
    (s === 8 || kt.android && e.text.length < a - o) && (l = i.to, c = "end");
    let f = WO(t.state.doc.sliceString(o, a, No), e.text, l - o, c);
    f && (kt.chrome && s == 13 && f.toB == f.from + 2 && e.text.slice(f.from, f.toB) == No + No && f.toB--, r = {
      from: o + f.from,
      to: o + f.toA,
      insert: Jt.of(e.text.slice(f.from, f.toB).split(No))
    });
  } else
    n && (!t.hasFocus && t.state.facet(vc) || n.main.eq(i)) && (n = null);
  if (!r && !n)
    return !1;
  if (!r && e.typeOver && !i.empty && n && n.main.empty ? r = { from: i.from, to: i.to, insert: t.state.doc.slice(i.from, i.to) } : r && r.from >= i.from && r.to <= i.to && (r.from != i.from || r.to != i.to) && i.to - i.from - (r.to - r.from) <= 4 ? r = {
    from: i.from,
    to: i.to,
    insert: t.state.doc.slice(i.from, r.from).append(r.insert).append(t.state.doc.slice(r.to, i.to))
  } : (kt.mac || kt.android) && r && r.from == r.to && r.from == i.head - 1 && /^\. ?$/.test(r.insert.toString()) && t.contentDOM.getAttribute("autocorrect") == "off" ? (n && r.insert.length == 2 && (n = $t.single(n.main.anchor - 1, n.main.head - 1)), r = { from: i.from, to: i.to, insert: Jt.of([" "]) }) : kt.chrome && r && r.from == r.to && r.from == i.head && r.insert.toString() == `
 ` && t.lineWrapping && (n && (n = $t.single(n.main.anchor - 1, n.main.head - 1)), r = { from: i.from, to: i.to, insert: Jt.of([" "]) }), r) {
    if (kt.ios && t.inputState.flushIOSKey() || kt.android && (r.from == i.from && r.to == i.to && r.insert.length == 1 && r.insert.lines == 2 && zs(t.contentDOM, "Enter", 13) || (r.from == i.from - 1 && r.to == i.to && r.insert.length == 0 || s == 8 && r.insert.length < r.to - r.from && r.to > i.head) && zs(t.contentDOM, "Backspace", 8) || r.from == i.from && r.to == i.to + 1 && r.insert.length == 0 && zs(t.contentDOM, "Delete", 46)))
      return !0;
    let o = r.insert.toString();
    t.inputState.composing >= 0 && t.inputState.composing++;
    let a, l = () => a || (a = VO(t, r, n));
    return t.state.facet(Sy).some((c) => c(t, r.from, r.to, o, l)) || t.dispatch(l()), !0;
  } else if (n && !n.main.eq(i)) {
    let o = !1, a = "select";
    return t.inputState.lastSelectionTime > Date.now() - 50 && (t.inputState.lastSelectionOrigin == "select" && (o = !0), a = t.inputState.lastSelectionOrigin), t.dispatch({ selection: n, scrollIntoView: o, userEvent: a }), !0;
  } else
    return !1;
}
function VO(t, e, r) {
  let n, i = t.state, s = i.selection.main;
  if (e.from >= s.from && e.to <= s.to && e.to - e.from >= (s.to - s.from) / 3 && (!r || r.main.empty && r.main.from == e.from + e.insert.length) && t.inputState.composing < 0) {
    let a = s.from < e.from ? i.sliceDoc(s.from, e.from) : "", l = s.to > e.to ? i.sliceDoc(e.to, s.to) : "";
    n = i.replaceSelection(t.state.toText(a + e.insert.sliceString(0, void 0, t.state.lineBreak) + l));
  } else {
    let a = i.changes(e), l = r && r.main.to <= a.newLength ? r.main : void 0;
    if (i.selection.ranges.length > 1 && t.inputState.composing >= 0 && e.to <= s.to && e.to >= s.to - 10) {
      let c = t.state.sliceDoc(e.from, e.to), f, m = r && ky(t, r.main.head);
      if (m) {
        let N = e.insert.length - (e.to - e.from);
        f = { from: m.from, to: m.to - N };
      } else
        f = t.state.doc.lineAt(s.head);
      let b = s.to - e.to, C = s.to - s.from;
      n = i.changeByRange((N) => {
        if (N.from == s.from && N.to == s.to)
          return { changes: a, range: l || N.map(a) };
        let z = N.to - b, A = z - c.length;
        if (N.to - N.from != C || t.state.sliceDoc(A, z) != c || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        N.to >= f.from && N.from <= f.to)
          return { range: N };
        let Q = i.changes({ from: A, to: z, insert: e.insert }), Te = N.to - s.to;
        return {
          changes: Q,
          range: l ? $t.range(Math.max(0, l.anchor + Te), Math.max(0, l.head + Te)) : N.map(Q)
        };
      });
    } else
      n = {
        changes: a,
        selection: l && i.selection.replaceRange(l)
      };
  }
  let o = "input.type";
  return (t.composing || t.inputState.compositionPendingChange && t.inputState.compositionEndedAt > Date.now() - 50) && (t.inputState.compositionPendingChange = !1, o += ".compose", t.inputState.compositionFirstChange && (o += ".start", t.inputState.compositionFirstChange = !1)), i.update(n, { userEvent: o, scrollIntoView: !0 });
}
function WO(t, e, r, n) {
  let i = Math.min(t.length, e.length), s = 0;
  for (; s < i && t.charCodeAt(s) == e.charCodeAt(s); )
    s++;
  if (s == i && t.length == e.length)
    return null;
  let o = t.length, a = e.length;
  for (; o > 0 && a > 0 && t.charCodeAt(o - 1) == e.charCodeAt(a - 1); )
    o--, a--;
  if (n == "end") {
    let l = Math.max(0, s - Math.min(o, a));
    r -= o + l - s;
  }
  if (o < s && t.length < e.length) {
    let l = r <= s && r >= o ? s - r : 0;
    s -= l, a = s + (a - o), o = s;
  } else if (a < s) {
    let l = r <= s && r >= a ? s - r : 0;
    s -= l, o = s + (o - a), a = s;
  }
  return { from: s, toA: o, toB: a };
}
function KO(t) {
  let e = [];
  if (t.root.activeElement != t.contentDOM)
    return e;
  let { anchorNode: r, anchorOffset: n, focusNode: i, focusOffset: s } = t.observer.selectionRange;
  return r && (e.push(new xE(r, n)), (i != r || s != n) && e.push(new xE(i, s))), e;
}
function QO(t, e) {
  if (t.length == 0)
    return null;
  let r = t[0].pos, n = t.length == 2 ? t[1].pos : r;
  return r > -1 && n > -1 ? $t.single(r + e, n + e) : null;
}
const jO = {
  childList: !0,
  characterData: !0,
  subtree: !0,
  attributes: !0,
  characterDataOldValue: !0
}, Pp = kt.ie && kt.ie_version <= 11;
class XO {
  constructor(e) {
    this.view = e, this.active = !1, this.selectionRange = new DI(), this.selectionChanged = !1, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.intersecting = !1, this.gapIntersection = null, this.gaps = [], this.parentCheck = -1, this.dom = e.contentDOM, this.observer = new MutationObserver((r) => {
      for (let n of r)
        this.queue.push(n);
      (kt.ie && kt.ie_version <= 11 || kt.ios && e.composing) && r.some((n) => n.type == "childList" && n.removedNodes.length || n.type == "characterData" && n.oldValue.length > n.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), Pp && (this.onCharData = (r) => {
      this.queue.push({
        target: r.target,
        type: "characterData",
        oldValue: r.prevValue
      }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), typeof ResizeObserver == "function" && (this.resizeScroll = new ResizeObserver(() => {
      var r;
      ((r = this.view.docView) === null || r === void 0 ? void 0 : r.lastUpdate) < Date.now() - 75 && this.onResize();
    }), this.resizeScroll.observe(e.scrollDOM)), this.addWindowListeners(this.win = e.win), this.start(), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((r) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), r.length > 0 && r[r.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, { threshold: [0, 1e-3] }), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((r) => {
      r.length > 0 && r[r.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange();
  }
  onScrollChanged(e) {
    this.view.inputState.runHandlers("scroll", e), this.intersecting && this.view.measure();
  }
  onScroll(e) {
    this.intersecting && this.flush(!1), this.onScrollChanged(e);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint() {
    this.view.viewState.printing = !0, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = !1, this.view.requestMeasure();
    }, 500);
  }
  updateGaps(e) {
    if (this.gapIntersection && (e.length != this.gaps.length || this.gaps.some((r, n) => r != e[n]))) {
      this.gapIntersection.disconnect();
      for (let r of e)
        this.gapIntersection.observe(r);
      this.gaps = e;
    }
  }
  onSelectionChange(e) {
    let r = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: n } = this, i = this.selectionRange;
    if (n.state.facet(vc) ? n.root.activeElement != this.dom : !wl(n.dom, i))
      return;
    let s = i.anchorNode && n.docView.nearest(i.anchorNode);
    if (s && s.ignoreEvent(e)) {
      r || (this.selectionChanged = !1);
      return;
    }
    (kt.ie && kt.ie_version <= 11 || kt.android && kt.chrome) && !n.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    i.focusNode && Bo(i.focusNode, i.focusOffset, i.anchorNode, i.anchorOffset) ? this.flushSoon() : this.flush(!1);
  }
  readSelectionRange() {
    let { view: e } = this, r = kt.safari && e.root.nodeType == 11 && NI(this.dom.ownerDocument) == this.dom && ZO(this.view) || zl(e.root);
    if (!r || this.selectionRange.eq(r))
      return !1;
    let n = wl(this.dom, r);
    return n && !this.selectionChanged && e.inputState.lastFocusTime > Date.now() - 200 && e.inputState.lastTouchTime < Date.now() - 300 && LI(this.dom, r) ? (this.view.inputState.lastFocusTime = 0, e.docView.updateSelection(), !1) : (this.selectionRange.setRange(r), n && (this.selectionChanged = !0), !0);
  }
  setSelectionRange(e, r) {
    this.selectionRange.set(e.node, e.offset, r.node, r.offset), this.selectionChanged = !1;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let e = 0, r = null;
    for (let n = this.dom; n; )
      if (n.nodeType == 1)
        !r && e < this.scrollTargets.length && this.scrollTargets[e] == n ? e++ : r || (r = this.scrollTargets.slice(0, e)), r && r.push(n), n = n.assignedSlot || n.parentNode;
      else if (n.nodeType == 11)
        n = n.host;
      else
        break;
    if (e < this.scrollTargets.length && !r && (r = this.scrollTargets.slice(0, e)), r) {
      for (let n of this.scrollTargets)
        n.removeEventListener("scroll", this.onScroll);
      for (let n of this.scrollTargets = r)
        n.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(e) {
    if (!this.active)
      return e();
    try {
      return this.stop(), e();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, jO), Pp && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = !0);
  }
  stop() {
    this.active && (this.active = !1, this.observer.disconnect(), Pp && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  // Throw away any pending changes
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = !1;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(e, r) {
    var n;
    if (!this.delayedAndroidKey) {
      let i = () => {
        let s = this.delayedAndroidKey;
        s && (this.clearDelayedAndroidKey(), this.view.inputState.lastKeyCode = s.keyCode, this.view.inputState.lastKeyTime = Date.now(), !this.flush() && s.force && zs(this.dom, s.key, s.keyCode));
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(i);
    }
    (!this.delayedAndroidKey || e == "Enter") && (this.delayedAndroidKey = {
      key: e,
      keyCode: r,
      // Only run the key handler when no changes are detected if
      // this isn't coming right after another change, in which case
      // it is probably part of a weird chain of updates, and should
      // be ignored if it returns the DOM to its previous state.
      force: this.lastChange < Date.now() - 50 || !!(!((n = this.delayedAndroidKey) === null || n === void 0) && n.force)
    });
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
      this.delayedFlush = -1, this.flush();
    }));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();
  }
  pendingRecords() {
    for (let e of this.observer.takeRecords())
      this.queue.push(e);
    return this.queue;
  }
  processRecords() {
    let e = this.pendingRecords();
    e.length && (this.queue = []);
    let r = -1, n = -1, i = !1;
    for (let s of e) {
      let o = this.readMutation(s);
      o && (o.typeOver && (i = !0), r == -1 ? { from: r, to: n } = o : (r = Math.min(o.from, r), n = Math.max(o.to, n)));
    }
    return { from: r, to: n, typeOver: i };
  }
  readChange() {
    let { from: e, to: r, typeOver: n } = this.processRecords(), i = this.selectionChanged && wl(this.dom, this.selectionRange);
    if (e < 0 && !i)
      return null;
    e > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = !1;
    let s = new HO(this.view, e, r, n);
    return this.view.docView.domChanged = { newSel: s.newSel ? s.newSel.main : null }, s;
  }
  // Apply pending changes, if any
  flush(e = !0) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return !1;
    e && this.readSelectionRange();
    let r = this.readChange();
    if (!r)
      return this.view.requestMeasure(), !1;
    let n = this.view.state, i = Wy(this.view, r);
    return this.view.state == n && this.view.update([]), i;
  }
  readMutation(e) {
    let r = this.view.docView.nearest(e.target);
    if (!r || r.ignoreMutation(e))
      return null;
    if (r.markDirty(e.type == "attributes"), e.type == "attributes" && (r.flags |= 4), e.type == "childList") {
      let n = NE(r, e.previousSibling || e.target.previousSibling, -1), i = NE(r, e.nextSibling || e.target.nextSibling, 1);
      return {
        from: n ? r.posAfter(n) : r.posAtStart,
        to: i ? r.posBefore(i) : r.posAtEnd,
        typeOver: !1
      };
    } else
      return e.type == "characterData" ? { from: r.posAtStart, to: r.posAtEnd, typeOver: e.target.nodeValue == e.oldValue } : null;
  }
  setWindow(e) {
    e != this.win && (this.removeWindowListeners(this.win), this.win = e, this.addWindowListeners(this.win));
  }
  addWindowListeners(e) {
    e.addEventListener("resize", this.onResize), e.addEventListener("beforeprint", this.onPrint), e.addEventListener("scroll", this.onScroll), e.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(e) {
    e.removeEventListener("scroll", this.onScroll), e.removeEventListener("resize", this.onResize), e.removeEventListener("beforeprint", this.onPrint), e.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  destroy() {
    var e, r, n;
    this.stop(), (e = this.intersection) === null || e === void 0 || e.disconnect(), (r = this.gapIntersection) === null || r === void 0 || r.disconnect(), (n = this.resizeScroll) === null || n === void 0 || n.disconnect();
    for (let i of this.scrollTargets)
      i.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey);
  }
}
function NE(t, e, r) {
  for (; e; ) {
    let n = ar.get(e);
    if (n && n.parent == t)
      return n;
    let i = e.parentNode;
    e = i != t.dom ? i : r > 0 ? e.nextSibling : e.previousSibling;
  }
  return null;
}
function ZO(t) {
  let e = null;
  function r(l) {
    l.preventDefault(), l.stopImmediatePropagation(), e = l.getTargetRanges()[0];
  }
  if (t.contentDOM.addEventListener("beforeinput", r, !0), t.dom.ownerDocument.execCommand("indent"), t.contentDOM.removeEventListener("beforeinput", r, !0), !e)
    return null;
  let n = e.startContainer, i = e.startOffset, s = e.endContainer, o = e.endOffset, a = t.docView.domAtPos(t.state.selection.main.anchor);
  return Bo(a.node, a.offset, s, o) && ([n, i, s, o] = [s, o, n, i]), { anchorNode: n, anchorOffset: i, focusNode: s, focusOffset: o };
}
class Rt {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(e = {}) {
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = !1, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.className = "cm-announced", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), e.parent && e.parent.appendChild(this.dom);
    let { dispatch: r } = e;
    this.dispatchTransactions = e.dispatchTransactions || r && ((n) => n.forEach((i) => r(i, this))) || ((n) => this.update(n)), this.dispatch = this.dispatch.bind(this), this._root = e.root || MI(e.parent) || document, this.viewState = new wE(e.state || Qt.create(e)), e.scrollTo && e.scrollTo.is(Ja) && (this.viewState.scrollTarget = e.scrollTo.value.clip(this.viewState.state)), this.plugins = this.state.facet(Ao).map((n) => new Op(n));
    for (let n of this.plugins)
      n.update(this);
    this.observer = new XO(this), this.inputState = new pO(this), this.inputState.ensureHandlers(this.plugins), this.docView = new lE(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure();
  }
  dispatch(...e) {
    let r = e.length == 1 && e[0] instanceof Sr ? e : e.length == 1 && Array.isArray(e[0]) ? e[0] : [this.state.update(...e)];
    this.dispatchTransactions(r, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let r = !1, n = !1, i, s = this.state;
    for (let b of e) {
      if (b.startState != s)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      s = b.state;
    }
    if (this.destroyed) {
      this.viewState.state = s;
      return;
    }
    let o = this.hasFocus, a = 0, l = null;
    e.some((b) => b.annotation(Uy)) ? (this.inputState.notifiedFocused = o, a = 1) : o != this.inputState.notifiedFocused && (this.inputState.notifiedFocused = o, l = qy(s, o), l || (a = 1));
    let c = this.observer.delayedAndroidKey, f = null;
    if (c ? (this.observer.clearDelayedAndroidKey(), f = this.observer.readChange(), (f && !this.state.doc.eq(s.doc) || !this.state.selection.eq(s.selection)) && (f = null)) : this.observer.clear(), s.facet(Qt.phrases) != this.state.facet(Qt.phrases))
      return this.setState(s);
    i = Gl.create(this, s, e), i.flags |= a;
    let m = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let b of e) {
        if (m && (m = m.map(b.changes)), b.scrollIntoView) {
          let { main: C } = b.state.selection;
          m = new Gs(C.empty ? C : $t.cursor(C.head, C.head > C.anchor ? -1 : 1));
        }
        for (let C of b.effects)
          C.is(Ja) && (m = C.value.clip(this.state));
      }
      this.viewState.update(i, m), this.bidiCache = Yl.update(this.bidiCache, i.changes), i.empty || (this.updatePlugins(i), this.inputState.update(i)), r = this.docView.update(i), this.state.facet(Ro) != this.styleModules && this.mountStyles(), n = this.updateAttrs(), this.showAnnouncements(e), this.docView.updateSelection(r, e.some((b) => b.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (i.startState.facet(sl) != i.state.facet(sl) && (this.viewState.mustMeasureContent = !0), (r || n || m || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), !i.empty)
      for (let b of this.state.facet(q_))
        try {
          b(i);
        } catch (C) {
          Tn(this.state, C, "update listener");
        }
    (l || f) && Promise.resolve().then(() => {
      l && this.state == l.startState && this.dispatch(l), f && !Wy(this, f) && c.force && zs(this.contentDOM, c.key, c.keyCode);
    });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = e;
      return;
    }
    this.updateState = 2;
    let r = this.hasFocus;
    try {
      for (let n of this.plugins)
        n.destroy(this);
      this.viewState = new wE(e), this.plugins = e.facet(Ao).map((n) => new Op(n)), this.pluginMap.clear();
      for (let n of this.plugins)
        n.update(this);
      this.docView.destroy(), this.docView = new lE(this), this.inputState.ensureHandlers(this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    r && this.focus(), this.requestMeasure();
  }
  updatePlugins(e) {
    let r = e.startState.facet(Ao), n = e.state.facet(Ao);
    if (r != n) {
      let i = [];
      for (let s of n) {
        let o = r.indexOf(s);
        if (o < 0)
          i.push(new Op(s));
        else {
          let a = this.plugins[o];
          a.mustUpdate = e, i.push(a);
        }
      }
      for (let s of this.plugins)
        s.mustUpdate != e && s.destroy(this);
      this.plugins = i, this.pluginMap.clear();
    } else
      for (let i of this.plugins)
        i.mustUpdate = e;
    for (let i = 0; i < this.plugins.length; i++)
      this.plugins[i].update(this);
    r != n && this.inputState.ensureHandlers(this.plugins);
  }
  /**
  @internal
  */
  measure(e = !0) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.observer.delayedAndroidKey) {
      this.measureScheduled = -1, this.requestMeasure();
      return;
    }
    this.measureScheduled = 0, e && this.observer.forceFlush();
    let r = null, n = this.scrollDOM, i = n.scrollTop * this.scaleY, { scrollAnchorPos: s, scrollAnchorHeight: o } = this.viewState;
    Math.abs(i - this.viewState.scrollTop) > 1 && (o = -1), this.viewState.scrollAnchorHeight = -1;
    try {
      for (let a = 0; ; a++) {
        if (o < 0)
          if (ny(n))
            s = -1, o = this.viewState.heightMap.height;
          else {
            let C = this.viewState.scrollAnchorAt(i);
            s = C.from, o = C.top;
          }
        this.updateState = 1;
        let l = this.viewState.measure(this);
        if (!l && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (a > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let c = [];
        l & 4 || ([this.measureRequests, c] = [c, this.measureRequests]);
        let f = c.map((C) => {
          try {
            return C.read(this);
          } catch (N) {
            return Tn(this.state, N), kE;
          }
        }), m = Gl.create(this, this.state, []), b = !1;
        m.flags |= l, r ? r.flags |= l : r = m, this.updateState = 2, m.empty || (this.updatePlugins(m), this.inputState.update(m), this.updateAttrs(), b = this.docView.update(m));
        for (let C = 0; C < c.length; C++)
          if (f[C] != kE)
            try {
              let N = c[C];
              N.write && N.write(f[C], this);
            } catch (N) {
              Tn(this.state, N);
            }
        if (b && this.docView.updateSelection(!0), !m.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight)
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, o = -1;
              continue;
            } else {
              let N = (s < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(s).top) - o;
              if (N > 1 || N < -1) {
                i = i + N, n.scrollTop = i / this.scaleY, o = -1;
                continue;
              }
            }
          break;
        }
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (r && !r.empty)
      for (let a of this.state.facet(q_))
        a(r);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return V_ + " " + (this.state.facet(H_) ? Hy : Yy) + " " + this.state.facet(sl);
  }
  updateAttrs() {
    let e = IE(this, wy, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    }), r = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      translate: "no",
      contenteditable: this.state.facet(vc) ? "true" : "false",
      class: "cm-content",
      style: `${kt.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    this.state.readOnly && (r["aria-readonly"] = "true"), IE(this, Hh, r);
    let n = this.observer.ignore(() => {
      let i = L_(this.contentDOM, this.contentAttrs, r), s = L_(this.dom, this.editorAttrs, e);
      return i || s;
    });
    return this.editorAttrs = e, this.contentAttrs = r, n;
  }
  showAnnouncements(e) {
    let r = !0;
    for (let n of e)
      for (let i of n.effects)
        if (i.is(Rt.announce)) {
          r && (this.announceDOM.textContent = ""), r = !1;
          let s = this.announceDOM.appendChild(document.createElement("div"));
          s.textContent = i.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(Ro);
    let e = this.state.facet(Rt.cspNonce);
    Hi.mount(this.root, this.styleModules.concat(zO).reverse(), e ? { nonce: e } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(!1);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(e) {
    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), e) {
      if (this.measureRequests.indexOf(e) > -1)
        return;
      if (e.key != null) {
        for (let r = 0; r < this.measureRequests.length; r++)
          if (this.measureRequests[r].key === e.key) {
            this.measureRequests[r] = e;
            return;
          }
      }
      this.measureRequests.push(e);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(e) {
    let r = this.pluginMap.get(e);
    return (r === void 0 || r && r.spec != e) && this.pluginMap.set(e, r = this.plugins.find((n) => n.spec == e) || null), r && r.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(e) {
    return this.readMeasured(), this.viewState.elementAtHeight(e);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(e) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(e);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(e) {
    return this.viewState.lineBlockAt(e);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(e, r, n) {
    return Mp(this, e, _E(this, e, r, n));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(e, r) {
    return Mp(this, e, _E(this, e, r, (n) => dO(this, e.head, n)));
  }
  /**
  Get the cursor position visually at the start or end of a line.
  Note that this may differ from the _logical_ position at its
  start or end (which is simply at `line.from`/`line.to`) if text
  at the start or end goes against the line's base text direction.
  */
  visualLineSide(e, r) {
    let n = this.bidiSpans(e), i = this.textDirectionAt(e.from), s = n[r ? n.length - 1 : 0];
    return $t.cursor(s.side(r, i) + e.from, s.forward(!r, i) ? 1 : -1);
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(e, r, n = !0) {
    return uO(this, e, r, n);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(e, r, n) {
    return Mp(this, e, fO(this, e, r, n));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(e) {
    return this.docView.domAtPos(e);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(e, r = 0) {
    return this.docView.posFromDOM(e, r);
  }
  posAtCoords(e, r = !0) {
    return this.readMeasured(), Oy(this, e, r);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(e, r = 1) {
    this.readMeasured();
    let n = this.docView.coordsAt(e, r);
    if (!n || n.left == n.right)
      return n;
    let i = this.state.doc.lineAt(e), s = this.bidiSpans(i), o = s[Ni.find(s, e - i.from, -1, r)];
    return bc(n, o.dir == lr.LTR == r > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(e) {
    return this.readMeasured(), this.docView.coordsForChar(e);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(e) {
    return !this.state.facet(Ty) || e < this.viewport.from || e > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(e));
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(e) {
    if (e.length > JO)
      return my(e.length);
    let r = this.textDirectionAt(e.from), n;
    for (let s of this.bidiCache)
      if (s.from == e.from && s.dir == r && (s.fresh || hy(s.isolates, n = aE(this, e))))
        return s.order;
    n || (n = aE(this, e));
    let i = KI(e.text, r, n);
    return this.bidiCache.push(new Yl(e.from, e.to, r, n, !0, i)), i;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var e;
    return (this.dom.ownerDocument.hasFocus() || kt.safari && ((e = this.inputState) === null || e === void 0 ? void 0 : e.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      ty(this.contentDOM), this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(e) {
    this._root != e && (this._root = e, this.observer.setWindow((e.nodeType == 9 ? e : e.ownerDocument).defaultView || window), this.mountStyles());
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    for (let e of this.plugins)
      e.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.docView.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.destroyed = !0;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(e, r = {}) {
    return Ja.of(new Gs(typeof e == "number" ? $t.cursor(e) : e, r.y, r.x, r.yMargin, r.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop: e, scrollLeft: r } = this.scrollDOM, n = this.viewState.scrollAnchorAt(e);
    return Ja.of(new Gs($t.cursor(n.from), "start", "start", n.top - e, r, !0));
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(e) {
    return mr.define(() => ({}), { eventHandlers: e });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(e) {
    return mr.define(() => ({}), { eventObservers: e });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(e, r) {
    let n = Hi.newName(), i = [sl.of(n), Ro.of(W_(`.${n}`, e))];
    return r && r.dark && i.push(H_.of(!0)), i;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(e) {
    return co.lowest(Ro.of(W_("." + V_, e, Vy)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(e) {
    var r;
    let n = e.querySelector(".cm-content"), i = n && ar.get(n) || ar.get(e);
    return ((r = i == null ? void 0 : i.rootView) === null || r === void 0 ? void 0 : r.view) || null;
  }
}
Rt.styleModule = Ro;
Rt.inputHandler = Sy;
Rt.focusChangeEffect = yy;
Rt.perLineTextDirection = Ty;
Rt.exceptionSink = vy;
Rt.updateListener = q_;
Rt.editable = vc;
Rt.mouseSelectionStyle = Ey;
Rt.dragMovesSelection = by;
Rt.clickAddsSelectionRange = $y;
Rt.decorations = ca;
Rt.outerDecorations = Ay;
Rt.atomicRanges = Vh;
Rt.bidiIsolatedRanges = Ry;
Rt.scrollMargins = xy;
Rt.darkTheme = H_;
Rt.cspNonce = /* @__PURE__ */ xt.define({ combine: (t) => t.length ? t[0] : "" });
Rt.contentAttributes = Hh;
Rt.editorAttributes = wy;
Rt.lineWrapping = /* @__PURE__ */ Rt.contentAttributes.of({ class: "cm-lineWrapping" });
Rt.announce = /* @__PURE__ */ Gt.define();
const JO = 4096, kE = {};
class Yl {
  constructor(e, r, n, i, s, o) {
    this.from = e, this.to = r, this.dir = n, this.isolates = i, this.fresh = s, this.order = o;
  }
  static update(e, r) {
    if (r.empty && !e.some((s) => s.fresh))
      return e;
    let n = [], i = e.length ? e[e.length - 1].dir : lr.LTR;
    for (let s = Math.max(0, e.length - 10); s < e.length; s++) {
      let o = e[s];
      o.dir == i && !r.touchesRange(o.from, o.to) && n.push(new Yl(r.mapPos(o.from, 1), r.mapPos(o.to, -1), o.dir, o.isolates, !1, o.order));
    }
    return n;
  }
}
function IE(t, e, r) {
  for (let n = t.state.facet(e), i = n.length - 1; i >= 0; i--) {
    let s = n[i], o = typeof s == "function" ? s(t) : s;
    o && M_(o, r);
  }
  return r;
}
const eD = kt.mac ? "mac" : kt.windows ? "win" : kt.linux ? "linux" : "key";
function tD(t, e) {
  const r = t.split(/-(?!$)/);
  let n = r[r.length - 1];
  n == "Space" && (n = " ");
  let i, s, o, a;
  for (let l = 0; l < r.length - 1; ++l) {
    const c = r[l];
    if (/^(cmd|meta|m)$/i.test(c))
      a = !0;
    else if (/^a(lt)?$/i.test(c))
      i = !0;
    else if (/^(c|ctrl|control)$/i.test(c))
      s = !0;
    else if (/^s(hift)?$/i.test(c))
      o = !0;
    else if (/^mod$/i.test(c))
      e == "mac" ? a = !0 : s = !0;
    else
      throw new Error("Unrecognized modifier name: " + c);
  }
  return i && (n = "Alt-" + n), s && (n = "Ctrl-" + n), a && (n = "Meta-" + n), o && (n = "Shift-" + n), n;
}
function ol(t, e, r) {
  return e.altKey && (t = "Alt-" + t), e.ctrlKey && (t = "Ctrl-" + t), e.metaKey && (t = "Meta-" + t), r !== !1 && e.shiftKey && (t = "Shift-" + t), t;
}
const rD = /* @__PURE__ */ co.default(/* @__PURE__ */ Rt.domEventHandlers({
  keydown(t, e) {
    return Qy(Ky(e.state), t, e, "editor");
  }
})), Sc = /* @__PURE__ */ xt.define({ enables: rD }), OE = /* @__PURE__ */ new WeakMap();
function Ky(t) {
  let e = t.facet(Sc), r = OE.get(e);
  return r || OE.set(e, r = sD(e.reduce((n, i) => n.concat(i), []))), r;
}
function nD(t, e, r) {
  return Qy(Ky(t.state), e, t, r);
}
let Ci = null;
const iD = 4e3;
function sD(t, e = eD) {
  let r = /* @__PURE__ */ Object.create(null), n = /* @__PURE__ */ Object.create(null), i = (o, a) => {
    let l = n[o];
    if (l == null)
      n[o] = a;
    else if (l != a)
      throw new Error("Key binding " + o + " is used both as a regular binding and as a multi-stroke prefix");
  }, s = (o, a, l, c, f) => {
    var m, b;
    let C = r[o] || (r[o] = /* @__PURE__ */ Object.create(null)), N = a.split(/ (?!$)/).map((Q) => tD(Q, e));
    for (let Q = 1; Q < N.length; Q++) {
      let Te = N.slice(0, Q).join(" ");
      i(Te, !0), C[Te] || (C[Te] = {
        preventDefault: !0,
        stopPropagation: !1,
        run: [(ce) => {
          let ge = Ci = { view: ce, prefix: Te, scope: o };
          return setTimeout(() => {
            Ci == ge && (Ci = null);
          }, iD), !0;
        }]
      });
    }
    let z = N.join(" ");
    i(z, !1);
    let A = C[z] || (C[z] = {
      preventDefault: !1,
      stopPropagation: !1,
      run: ((b = (m = C._any) === null || m === void 0 ? void 0 : m.run) === null || b === void 0 ? void 0 : b.slice()) || []
    });
    l && A.run.push(l), c && (A.preventDefault = !0), f && (A.stopPropagation = !0);
  };
  for (let o of t) {
    let a = o.scope ? o.scope.split(" ") : ["editor"];
    if (o.any)
      for (let c of a) {
        let f = r[c] || (r[c] = /* @__PURE__ */ Object.create(null));
        f._any || (f._any = { preventDefault: !1, stopPropagation: !1, run: [] });
        for (let m in f)
          f[m].run.push(o.any);
      }
    let l = o[e] || o.key;
    if (l)
      for (let c of a)
        s(c, l, o.run, o.preventDefault, o.stopPropagation), o.shift && s(c, "Shift-" + l, o.shift, o.preventDefault, o.stopPropagation);
  }
  return r;
}
function Qy(t, e, r, n) {
  let i = xI(e), s = xr(i, 0), o = vn(s) == i.length && i != " ", a = "", l = !1, c = !1, f = !1;
  Ci && Ci.view == r && Ci.scope == n && (a = Ci.prefix + " ", My.indexOf(e.keyCode) < 0 && (c = !0, Ci = null));
  let m = /* @__PURE__ */ new Set(), b = (A) => {
    if (A) {
      for (let Q of A.run)
        if (!m.has(Q) && (m.add(Q), Q(r, e)))
          return A.stopPropagation && (f = !0), !0;
      A.preventDefault && (A.stopPropagation && (f = !0), c = !0);
    }
    return !1;
  }, C = t[n], N, z;
  return C && (b(C[a + ol(i, e, !o)]) ? l = !0 : o && (e.altKey || e.metaKey || e.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
  !(kt.windows && e.ctrlKey && e.altKey) && (N = Vi[e.keyCode]) && N != i ? (b(C[a + ol(N, e, !0)]) || e.shiftKey && (z = aa[e.keyCode]) != i && z != N && b(C[a + ol(z, e, !1)])) && (l = !0) : o && e.shiftKey && b(C[a + ol(i, e, !0)]) && (l = !0), !l && b(C._any) && (l = !0)), c && (l = !0), l && f && e.stopPropagation(), l;
}
class Pa {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  constructor(e, r, n, i, s) {
    this.className = e, this.left = r, this.top = n, this.width = i, this.height = s;
  }
  draw() {
    let e = document.createElement("div");
    return e.className = this.className, this.adjust(e), e;
  }
  update(e, r) {
    return r.className != this.className ? !1 : (this.adjust(e), !0);
  }
  adjust(e) {
    e.style.left = this.left + "px", e.style.top = this.top + "px", this.width != null && (e.style.width = this.width + "px"), e.style.height = this.height + "px";
  }
  eq(e) {
    return this.left == e.left && this.top == e.top && this.width == e.width && this.height == e.height && this.className == e.className;
  }
  /**
  Create a set of rectangles for the given selection range,
  assigning them theclass`className`. Will create a single
  rectangle for empty ranges, and a set of selection-style
  rectangles covering the range's content (in a bidi-aware
  way) for non-empty ones.
  */
  static forRange(e, r, n) {
    if (n.empty) {
      let i = e.coordsAtPos(n.head, n.assoc || 1);
      if (!i)
        return [];
      let s = jy(e);
      return [new Pa(r, i.left - s.left, i.top - s.top, null, i.bottom - i.top)];
    } else
      return oD(e, r, n);
  }
}
function jy(t) {
  let e = t.scrollDOM.getBoundingClientRect();
  return { left: (t.textDirection == lr.LTR ? e.left : e.right - t.scrollDOM.clientWidth * t.scaleX) - t.scrollDOM.scrollLeft * t.scaleX, top: e.top - t.scrollDOM.scrollTop * t.scaleY };
}
function DE(t, e, r) {
  let n = $t.cursor(e);
  return {
    from: Math.max(r.from, t.moveToLineBoundary(n, !1, !0).from),
    to: Math.min(r.to, t.moveToLineBoundary(n, !0, !0).from),
    type: Kr.Text
  };
}
function oD(t, e, r) {
  if (r.to <= t.viewport.from || r.from >= t.viewport.to)
    return [];
  let n = Math.max(r.from, t.viewport.from), i = Math.min(r.to, t.viewport.to), s = t.textDirection == lr.LTR, o = t.contentDOM, a = o.getBoundingClientRect(), l = jy(t), c = o.querySelector(".cm-line"), f = c && window.getComputedStyle(c), m = a.left + (f ? parseInt(f.paddingLeft) + Math.min(0, parseInt(f.textIndent)) : 0), b = a.right - (f ? parseInt(f.paddingRight) : 0), C = G_(t, n), N = G_(t, i), z = C.type == Kr.Text ? C : null, A = N.type == Kr.Text ? N : null;
  if (z && (t.lineWrapping || C.widgetLineBreaks) && (z = DE(t, n, z)), A && (t.lineWrapping || N.widgetLineBreaks) && (A = DE(t, i, A)), z && A && z.from == A.from)
    return Te(ce(r.from, r.to, z));
  {
    let Y = z ? ce(r.from, null, z) : ge(C, !1), fe = A ? ce(null, r.to, A) : ge(N, !0), ae = [];
    return (z || C).to < (A || N).from - (z && A ? 1 : 0) || C.widgetLineBreaks > 1 && Y.bottom + t.defaultLineHeight / 2 < fe.top ? ae.push(Q(m, Y.bottom, b, fe.top)) : Y.bottom < fe.top && t.elementAtHeight((Y.bottom + fe.top) / 2).type == Kr.Text && (Y.bottom = fe.top = (Y.bottom + fe.top) / 2), Te(Y).concat(ae).concat(Te(fe));
  }
  function Q(Y, fe, ae, Re) {
    return new Pa(
      e,
      Y - l.left,
      fe - l.top - 0.01,
      ae - Y,
      Re - fe + 0.01
      /* C.Epsilon */
    );
  }
  function Te({ top: Y, bottom: fe, horizontal: ae }) {
    let Re = [];
    for (let pe = 0; pe < ae.length; pe += 2)
      Re.push(Q(ae[pe], Y, ae[pe + 1], fe));
    return Re;
  }
  function ce(Y, fe, ae) {
    let Re = 1e9, pe = -1e9, Ce = [];
    function J(F, ne, H, we, _e) {
      let X = t.coordsAtPos(F, F == ae.to ? -2 : 2), w = t.coordsAtPos(H, H == ae.from ? 2 : -2);
      !X || !w || (Re = Math.min(X.top, w.top, Re), pe = Math.max(X.bottom, w.bottom, pe), _e == lr.LTR ? Ce.push(s && ne ? m : X.left, s && we ? b : w.right) : Ce.push(!s && we ? m : w.left, !s && ne ? b : X.right));
    }
    let R = Y ?? ae.from, ve = fe ?? ae.to;
    for (let F of t.visibleRanges)
      if (F.to > R && F.from < ve)
        for (let ne = Math.max(F.from, R), H = Math.min(F.to, ve); ; ) {
          let we = t.state.doc.lineAt(ne);
          for (let _e of t.bidiSpans(we)) {
            let X = _e.from + we.from, w = _e.to + we.from;
            if (X >= H)
              break;
            w > ne && J(Math.max(X, ne), Y == null && X <= R, Math.min(w, H), fe == null && w >= ve, _e.dir);
          }
          if (ne = we.to + 1, ne >= H)
            break;
        }
    return Ce.length == 0 && J(R, Y == null, ve, fe == null, t.textDirection), { top: Re, bottom: pe, horizontal: Ce };
  }
  function ge(Y, fe) {
    let ae = a.top + (fe ? Y.top : Y.bottom);
    return { top: ae, bottom: ae, horizontal: [] };
  }
}
function aD(t, e) {
  return t.constructor == e.constructor && t.eq(e);
}
class lD {
  constructor(e, r) {
    this.view = e, this.layer = r, this.drawn = [], this.scaleX = 1, this.scaleY = 1, this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) }, this.dom = e.scrollDOM.appendChild(document.createElement("div")), this.dom.classList.add("cm-layer"), r.above && this.dom.classList.add("cm-layer-above"), r.class && this.dom.classList.add(r.class), this.scale(), this.dom.setAttribute("aria-hidden", "true"), this.setOrder(e.state), e.requestMeasure(this.measureReq), r.mount && r.mount(this.dom, e);
  }
  update(e) {
    e.startState.facet(xl) != e.state.facet(xl) && this.setOrder(e.state), (this.layer.update(e, this.dom) || e.geometryChanged) && (this.scale(), e.view.requestMeasure(this.measureReq));
  }
  setOrder(e) {
    let r = 0, n = e.facet(xl);
    for (; r < n.length && n[r] != this.layer; )
      r++;
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - r);
  }
  measure() {
    return this.layer.markers(this.view);
  }
  scale() {
    let { scaleX: e, scaleY: r } = this.view;
    (e != this.scaleX || r != this.scaleY) && (this.scaleX = e, this.scaleY = r, this.dom.style.transform = `scale(${1 / e}, ${1 / r})`);
  }
  draw(e) {
    if (e.length != this.drawn.length || e.some((r, n) => !aD(r, this.drawn[n]))) {
      let r = this.dom.firstChild, n = 0;
      for (let i of e)
        i.update && r && i.constructor && this.drawn[n].constructor && i.update(r, this.drawn[n]) ? (r = r.nextSibling, n++) : this.dom.insertBefore(i.draw(), r);
      for (; r; ) {
        let i = r.nextSibling;
        r.remove(), r = i;
      }
      this.drawn = e;
    }
  }
  destroy() {
    this.layer.destroy && this.layer.destroy(this.dom, this.view), this.dom.remove();
  }
}
const xl = /* @__PURE__ */ xt.define();
function Xy(t) {
  return [
    mr.define((e) => new lD(e, t)),
    xl.of(t)
  ];
}
const Zy = !kt.ios, ua = /* @__PURE__ */ xt.define({
  combine(t) {
    return Pn(t, {
      cursorBlinkRate: 1200,
      drawRangeCursor: !0
    }, {
      cursorBlinkRate: (e, r) => Math.min(e, r),
      drawRangeCursor: (e, r) => e || r
    });
  }
});
function cD(t = {}) {
  return [
    ua.of(t),
    uD,
    dD,
    fD,
    Cy.of(!0)
  ];
}
function Jy(t) {
  return t.startState.facet(ua) != t.state.facet(ua);
}
const uD = /* @__PURE__ */ Xy({
  above: !0,
  markers(t) {
    let { state: e } = t, r = e.facet(ua), n = [];
    for (let i of e.selection.ranges) {
      let s = i == e.selection.main;
      if (i.empty ? !s || Zy : r.drawRangeCursor) {
        let o = s ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary", a = i.empty ? i : $t.cursor(i.head, i.head > i.anchor ? -1 : 1);
        for (let l of Pa.forRange(t, o, a))
          n.push(l);
      }
    }
    return n;
  },
  update(t, e) {
    t.transactions.some((n) => n.selection) && (e.style.animationName = e.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink");
    let r = Jy(t);
    return r && ME(t.state, e), t.docChanged || t.selectionSet || r;
  },
  mount(t, e) {
    ME(e.state, t);
  },
  class: "cm-cursorLayer"
});
function ME(t, e) {
  e.style.animationDuration = t.facet(ua).cursorBlinkRate + "ms";
}
const dD = /* @__PURE__ */ Xy({
  above: !1,
  markers(t) {
    return t.state.selection.ranges.map((e) => e.empty ? [] : Pa.forRange(t, "cm-selectionBackground", e)).reduce((e, r) => e.concat(r));
  },
  update(t, e) {
    return t.docChanged || t.selectionSet || t.viewportChanged || Jy(t);
  },
  class: "cm-selectionLayer"
}), K_ = {
  ".cm-line": {
    "& ::selection": { backgroundColor: "transparent !important" },
    "&::selection": { backgroundColor: "transparent !important" }
  }
};
Zy && (K_[".cm-line"].caretColor = "transparent !important", K_[".cm-content"] = { caretColor: "transparent !important" });
const fD = /* @__PURE__ */ co.highest(/* @__PURE__ */ Rt.theme(K_)), eT = /* @__PURE__ */ Gt.define({
  map(t, e) {
    return t == null ? null : e.mapPos(t);
  }
}), ko = /* @__PURE__ */ Mr.define({
  create() {
    return null;
  },
  update(t, e) {
    return t != null && (t = e.changes.mapPos(t)), e.effects.reduce((r, n) => n.is(eT) ? n.value : r, t);
  }
}), pD = /* @__PURE__ */ mr.fromClass(class {
  constructor(t) {
    this.view = t, this.cursor = null, this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
  }
  update(t) {
    var e;
    let r = t.state.field(ko);
    r == null ? this.cursor != null && ((e = this.cursor) === null || e === void 0 || e.remove(), this.cursor = null) : (this.cursor || (this.cursor = this.view.scrollDOM.appendChild(document.createElement("div")), this.cursor.className = "cm-dropCursor"), (t.startState.field(ko) != r || t.docChanged || t.geometryChanged) && this.view.requestMeasure(this.measureReq));
  }
  readPos() {
    let { view: t } = this, e = t.state.field(ko), r = e != null && t.coordsAtPos(e);
    if (!r)
      return null;
    let n = t.scrollDOM.getBoundingClientRect();
    return {
      left: r.left - n.left + t.scrollDOM.scrollLeft * t.scaleX,
      top: r.top - n.top + t.scrollDOM.scrollTop * t.scaleY,
      height: r.bottom - r.top
    };
  }
  drawCursor(t) {
    if (this.cursor) {
      let { scaleX: e, scaleY: r } = this.view;
      t ? (this.cursor.style.left = t.left / e + "px", this.cursor.style.top = t.top / r + "px", this.cursor.style.height = t.height / r + "px") : this.cursor.style.left = "-100000px";
    }
  }
  destroy() {
    this.cursor && this.cursor.remove();
  }
  setDropPos(t) {
    this.view.state.field(ko) != t && this.view.dispatch({ effects: eT.of(t) });
  }
}, {
  eventObservers: {
    dragover(t) {
      this.setDropPos(this.view.posAtCoords({ x: t.clientX, y: t.clientY }));
    },
    dragleave(t) {
      (t.target == this.view.contentDOM || !this.view.contentDOM.contains(t.relatedTarget)) && this.setDropPos(null);
    },
    dragend() {
      this.setDropPos(null);
    },
    drop() {
      this.setDropPos(null);
    }
  }
});
function _D() {
  return [ko, pD];
}
function LE(t, e, r, n, i) {
  e.lastIndex = 0;
  for (let s = t.iterRange(r, n), o = r, a; !s.next().done; o += s.value.length)
    if (!s.lineBreak)
      for (; a = e.exec(s.value); )
        i(o + a.index, a);
}
function hD(t, e) {
  let r = t.visibleRanges;
  if (r.length == 1 && r[0].from == t.viewport.from && r[0].to == t.viewport.to)
    return r;
  let n = [];
  for (let { from: i, to: s } of r)
    i = Math.max(t.state.doc.lineAt(i).from, i - e), s = Math.min(t.state.doc.lineAt(s).to, s + e), n.length && n[n.length - 1].to >= i ? n[n.length - 1].to = s : n.push({ from: i, to: s });
  return n;
}
class mD {
  /**
  Create a decorator.
  */
  constructor(e) {
    const { regexp: r, decoration: n, decorate: i, boundary: s, maxLength: o = 1e3 } = e;
    if (!r.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    if (this.regexp = r, i)
      this.addMatch = (a, l, c, f) => i(f, c, c + a[0].length, a, l);
    else if (typeof n == "function")
      this.addMatch = (a, l, c, f) => {
        let m = n(a, l, c);
        m && f(c, c + a[0].length, m);
      };
    else if (n)
      this.addMatch = (a, l, c, f) => f(c, c + a[0].length, n);
    else
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    this.boundary = s, this.maxLength = o;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(e) {
    let r = new fi(), n = r.add.bind(r);
    for (let { from: i, to: s } of hD(e, this.maxLength))
      LE(e.state.doc, this.regexp, i, s, (o, a) => this.addMatch(a, e, o, n));
    return r.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(e, r) {
    let n = 1e9, i = -1;
    return e.docChanged && e.changes.iterChanges((s, o, a, l) => {
      l > e.view.viewport.from && a < e.view.viewport.to && (n = Math.min(a, n), i = Math.max(l, i));
    }), e.viewportChanged || i - n > 1e3 ? this.createDeco(e.view) : i > -1 ? this.updateRange(e.view, r.map(e.changes), n, i) : r;
  }
  updateRange(e, r, n, i) {
    for (let s of e.visibleRanges) {
      let o = Math.max(s.from, n), a = Math.min(s.to, i);
      if (a > o) {
        let l = e.state.doc.lineAt(o), c = l.to < a ? e.state.doc.lineAt(a) : l, f = Math.max(s.from, l.from), m = Math.min(s.to, c.to);
        if (this.boundary) {
          for (; o > l.from; o--)
            if (this.boundary.test(l.text[o - 1 - l.from])) {
              f = o;
              break;
            }
          for (; a < c.to; a++)
            if (this.boundary.test(c.text[a - c.from])) {
              m = a;
              break;
            }
        }
        let b = [], C, N = (z, A, Q) => b.push(Q.range(z, A));
        if (l == c)
          for (this.regexp.lastIndex = f - l.from; (C = this.regexp.exec(l.text)) && C.index < m - l.from; )
            this.addMatch(C, e, C.index + l.from, N);
        else
          LE(e.state.doc, this.regexp, f, m, (z, A) => this.addMatch(A, e, z, N));
        r = r.update({ filterFrom: f, filterTo: m, filter: (z, A) => z < f || A > m, add: b });
      }
    }
    return r;
  }
}
const Q_ = /x/.unicode != null ? "gu" : "g", gD = /* @__PURE__ */ new RegExp(`[\0-\b
--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]`, Q_), $D = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
let Fp = null;
function bD() {
  var t;
  if (Fp == null && typeof document < "u" && document.body) {
    let e = document.body.style;
    Fp = ((t = e.tabSize) !== null && t !== void 0 ? t : e.MozTabSize) != null;
  }
  return Fp || !1;
}
const Nl = /* @__PURE__ */ xt.define({
  combine(t) {
    let e = Pn(t, {
      render: null,
      specialChars: gD,
      addSpecialChars: null
    });
    return (e.replaceTabs = !bD()) && (e.specialChars = new RegExp("	|" + e.specialChars.source, Q_)), e.addSpecialChars && (e.specialChars = new RegExp(e.specialChars.source + "|" + e.addSpecialChars.source, Q_)), e;
  }
});
function ED(t = {}) {
  return [Nl.of(t), vD()];
}
let PE = null;
function vD() {
  return PE || (PE = mr.fromClass(class {
    constructor(t) {
      this.view = t, this.decorations = Ot.none, this.decorationCache = /* @__PURE__ */ Object.create(null), this.decorator = this.makeDecorator(t.state.facet(Nl)), this.decorations = this.decorator.createDeco(t);
    }
    makeDecorator(t) {
      return new mD({
        regexp: t.specialChars,
        decoration: (e, r, n) => {
          let { doc: i } = r.state, s = xr(e[0], 0);
          if (s == 9) {
            let o = i.lineAt(n), a = r.state.tabSize, l = uo(o.text, a, n - o.from);
            return Ot.replace({
              widget: new CD((a - l % a) * this.view.defaultCharacterWidth / this.view.scaleX)
            });
          }
          return this.decorationCache[s] || (this.decorationCache[s] = Ot.replace({ widget: new TD(t, s) }));
        },
        boundary: t.replaceTabs ? void 0 : /[^]/
      });
    }
    update(t) {
      let e = t.state.facet(Nl);
      t.startState.facet(Nl) != e ? (this.decorator = this.makeDecorator(e), this.decorations = this.decorator.createDeco(t.view)) : this.decorations = this.decorator.updateDeco(t, this.decorations);
    }
  }, {
    decorations: (t) => t.decorations
  }));
}
const SD = "•";
function yD(t) {
  return t >= 32 ? SD : t == 10 ? "␤" : String.fromCharCode(9216 + t);
}
class TD extends bi {
  constructor(e, r) {
    super(), this.options = e, this.code = r;
  }
  eq(e) {
    return e.code == this.code;
  }
  toDOM(e) {
    let r = yD(this.code), n = e.state.phrase("Control character") + " " + ($D[this.code] || "0x" + this.code.toString(16)), i = this.options.render && this.options.render(this.code, n, r);
    if (i)
      return i;
    let s = document.createElement("span");
    return s.textContent = r, s.title = n, s.setAttribute("aria-label", n), s.className = "cm-specialChar", s;
  }
  ignoreEvent() {
    return !1;
  }
}
class CD extends bi {
  constructor(e) {
    super(), this.width = e;
  }
  eq(e) {
    return e.width == this.width;
  }
  toDOM() {
    let e = document.createElement("span");
    return e.textContent = "	", e.className = "cm-tab", e.style.width = this.width + "px", e;
  }
  ignoreEvent() {
    return !1;
  }
}
function wD() {
  return RD;
}
const AD = /* @__PURE__ */ Ot.line({ class: "cm-activeLine" }), RD = /* @__PURE__ */ mr.fromClass(class {
  constructor(t) {
    this.decorations = this.getDeco(t);
  }
  update(t) {
    (t.docChanged || t.selectionSet) && (this.decorations = this.getDeco(t.view));
  }
  getDeco(t) {
    let e = -1, r = [];
    for (let n of t.state.selection.ranges) {
      let i = t.lineBlockAt(n.head);
      i.from > e && (r.push(AD.range(i.from)), e = i.from);
    }
    return Ot.set(r);
  }
}, {
  decorations: (t) => t.decorations
});
class xD extends bi {
  constructor(e) {
    super(), this.content = e;
  }
  toDOM() {
    let e = document.createElement("span");
    return e.className = "cm-placeholder", e.style.pointerEvents = "none", e.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : this.content), typeof this.content == "string" ? e.setAttribute("aria-label", "placeholder " + this.content) : e.setAttribute("aria-hidden", "true"), e;
  }
  coordsAt(e) {
    let r = e.firstChild ? Zs(e.firstChild) : [];
    if (!r.length)
      return null;
    let n = window.getComputedStyle(e.parentNode), i = bc(r[0], n.direction != "rtl"), s = parseInt(n.lineHeight);
    return i.bottom - i.top > s * 1.5 ? { left: i.left, right: i.right, top: i.top, bottom: i.top + s } : i;
  }
  ignoreEvent() {
    return !1;
  }
}
function FE(t) {
  return mr.fromClass(class {
    constructor(e) {
      this.view = e, this.placeholder = t ? Ot.set([Ot.widget({ widget: new xD(t), side: 1 }).range(0)]) : Ot.none;
    }
    get decorations() {
      return this.view.state.doc.length ? Ot.none : this.placeholder;
    }
  }, { decorations: (e) => e.decorations });
}
const j_ = 2e3;
function ND(t, e, r) {
  let n = Math.min(e.line, r.line), i = Math.max(e.line, r.line), s = [];
  if (e.off > j_ || r.off > j_ || e.col < 0 || r.col < 0) {
    let o = Math.min(e.off, r.off), a = Math.max(e.off, r.off);
    for (let l = n; l <= i; l++) {
      let c = t.doc.line(l);
      c.length <= a && s.push($t.range(c.from + o, c.to + a));
    }
  } else {
    let o = Math.min(e.col, r.col), a = Math.max(e.col, r.col);
    for (let l = n; l <= i; l++) {
      let c = t.doc.line(l), f = R_(c.text, o, t.tabSize, !0);
      if (f < 0)
        s.push($t.cursor(c.to));
      else {
        let m = R_(c.text, a, t.tabSize);
        s.push($t.range(c.from + f, c.from + m));
      }
    }
  }
  return s;
}
function kD(t, e) {
  let r = t.coordsAtPos(t.viewport.from);
  return r ? Math.round(Math.abs((r.left - e) / t.defaultCharacterWidth)) : -1;
}
function BE(t, e) {
  let r = t.posAtCoords({ x: e.clientX, y: e.clientY }, !1), n = t.state.doc.lineAt(r), i = r - n.from, s = i > j_ ? -1 : i == n.length ? kD(t, e.clientX) : uo(n.text, t.state.tabSize, r - n.from);
  return { line: n.number, col: s, off: i };
}
function ID(t, e) {
  let r = BE(t, e), n = t.state.selection;
  return r ? {
    update(i) {
      if (i.docChanged) {
        let s = i.changes.mapPos(i.startState.doc.line(r.line).from), o = i.state.doc.lineAt(s);
        r = { line: o.number, col: r.col, off: Math.min(r.off, o.length) }, n = n.map(i.changes);
      }
    },
    get(i, s, o) {
      let a = BE(t, i);
      if (!a)
        return n;
      let l = ND(t.state, r, a);
      return l.length ? o ? $t.create(l.concat(n.ranges)) : $t.create(l) : n;
    }
  } : null;
}
function OD(t) {
  let e = (t == null ? void 0 : t.eventFilter) || ((r) => r.altKey && r.button == 0);
  return Rt.mouseSelectionStyle.of((r, n) => e(n) ? ID(r, n) : null);
}
const DD = {
  Alt: [18, (t) => !!t.altKey],
  Control: [17, (t) => !!t.ctrlKey],
  Shift: [16, (t) => !!t.shiftKey],
  Meta: [91, (t) => !!t.metaKey]
}, MD = { style: "cursor: crosshair" };
function LD(t = {}) {
  let [e, r] = DD[t.key || "Alt"], n = mr.fromClass(class {
    constructor(i) {
      this.view = i, this.isDown = !1;
    }
    set(i) {
      this.isDown != i && (this.isDown = i, this.view.update([]));
    }
  }, {
    eventObservers: {
      keydown(i) {
        this.set(i.keyCode == e || r(i));
      },
      keyup(i) {
        (i.keyCode == e || !r(i)) && this.set(!1);
      },
      mousemove(i) {
        this.set(r(i));
      }
    }
  });
  return [
    n,
    Rt.contentAttributes.of((i) => {
      var s;
      return !((s = i.plugin(n)) === null || s === void 0) && s.isDown ? MD : null;
    })
  ];
}
const yo = "-10000px";
class tT {
  constructor(e, r, n) {
    this.facet = r, this.createTooltipView = n, this.input = e.state.facet(r), this.tooltips = this.input.filter((i) => i), this.tooltipViews = this.tooltips.map(n);
  }
  update(e, r) {
    var n;
    let i = e.state.facet(this.facet), s = i.filter((l) => l);
    if (i === this.input) {
      for (let l of this.tooltipViews)
        l.update && l.update(e);
      return !1;
    }
    let o = [], a = r ? [] : null;
    for (let l = 0; l < s.length; l++) {
      let c = s[l], f = -1;
      if (c) {
        for (let m = 0; m < this.tooltips.length; m++) {
          let b = this.tooltips[m];
          b && b.create == c.create && (f = m);
        }
        if (f < 0)
          o[l] = this.createTooltipView(c), a && (a[l] = !!c.above);
        else {
          let m = o[l] = this.tooltipViews[f];
          a && (a[l] = r[f]), m.update && m.update(e);
        }
      }
    }
    for (let l of this.tooltipViews)
      o.indexOf(l) < 0 && (l.dom.remove(), (n = l.destroy) === null || n === void 0 || n.call(l));
    return r && (a.forEach((l, c) => r[c] = l), r.length = a.length), this.input = i, this.tooltips = s, this.tooltipViews = o, !0;
  }
}
function PD(t) {
  let { win: e } = t;
  return { top: 0, left: 0, bottom: e.innerHeight, right: e.innerWidth };
}
const Bp = /* @__PURE__ */ xt.define({
  combine: (t) => {
    var e, r, n;
    return {
      position: kt.ios ? "absolute" : ((e = t.find((i) => i.position)) === null || e === void 0 ? void 0 : e.position) || "fixed",
      parent: ((r = t.find((i) => i.parent)) === null || r === void 0 ? void 0 : r.parent) || null,
      tooltipSpace: ((n = t.find((i) => i.tooltipSpace)) === null || n === void 0 ? void 0 : n.tooltipSpace) || PD
    };
  }
}), UE = /* @__PURE__ */ new WeakMap(), Kh = /* @__PURE__ */ mr.fromClass(class {
  constructor(t) {
    this.view = t, this.above = [], this.inView = !0, this.madeAbsolute = !1, this.lastTransaction = 0, this.measureTimeout = -1;
    let e = t.state.facet(Bp);
    this.position = e.position, this.parent = e.parent, this.classes = t.themeClasses, this.createContainer(), this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this }, this.manager = new tT(t, Qh, (r) => this.createTooltip(r)), this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((r) => {
      Date.now() > this.lastTransaction - 50 && r.length > 0 && r[r.length - 1].intersectionRatio < 1 && this.measureSoon();
    }, { threshold: [1] }) : null, this.observeIntersection(), t.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();
  }
  createContainer() {
    this.parent ? (this.container = document.createElement("div"), this.container.style.position = "relative", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let t of this.manager.tooltipViews)
        this.intersectionObserver.observe(t.dom);
    }
  }
  measureSoon() {
    this.measureTimeout < 0 && (this.measureTimeout = setTimeout(() => {
      this.measureTimeout = -1, this.maybeMeasure();
    }, 50));
  }
  update(t) {
    t.transactions.length && (this.lastTransaction = Date.now());
    let e = this.manager.update(t, this.above);
    e && this.observeIntersection();
    let r = e || t.geometryChanged, n = t.state.facet(Bp);
    if (n.position != this.position && !this.madeAbsolute) {
      this.position = n.position;
      for (let i of this.manager.tooltipViews)
        i.dom.style.position = this.position;
      r = !0;
    }
    if (n.parent != this.parent) {
      this.parent && this.container.remove(), this.parent = n.parent, this.createContainer();
      for (let i of this.manager.tooltipViews)
        this.container.appendChild(i.dom);
      r = !0;
    } else
      this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
    r && this.maybeMeasure();
  }
  createTooltip(t) {
    let e = t.create(this.view);
    if (e.dom.classList.add("cm-tooltip"), t.arrow && !e.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let r = document.createElement("div");
      r.className = "cm-tooltip-arrow", e.dom.appendChild(r);
    }
    return e.dom.style.position = this.position, e.dom.style.top = yo, e.dom.style.left = "0px", this.container.appendChild(e.dom), e.mount && e.mount(this.view), e;
  }
  destroy() {
    var t, e;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let r of this.manager.tooltipViews)
      r.dom.remove(), (t = r.destroy) === null || t === void 0 || t.call(r);
    this.parent && this.container.remove(), (e = this.intersectionObserver) === null || e === void 0 || e.disconnect(), clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let t = this.view.dom.getBoundingClientRect(), e = 1, r = 1, n = !1;
    if (this.position == "fixed" && this.manager.tooltipViews.length) {
      let { dom: i } = this.manager.tooltipViews[0];
      if (kt.gecko)
        n = i.offsetParent != this.container.ownerDocument.body;
      else if (i.style.top == yo && i.style.left == "0px") {
        let s = i.getBoundingClientRect();
        n = Math.abs(s.top + 1e4) > 1 || Math.abs(s.left) > 1;
      }
    }
    if (n || this.position == "absolute")
      if (this.parent) {
        let i = this.parent.getBoundingClientRect();
        i.width && i.height && (e = i.width / this.parent.offsetWidth, r = i.height / this.parent.offsetHeight);
      } else
        ({ scaleX: e, scaleY: r } = this.view.viewState);
    return {
      editor: t,
      parent: this.parent ? this.container.getBoundingClientRect() : t,
      pos: this.manager.tooltips.map((i, s) => {
        let o = this.manager.tooltipViews[s];
        return o.getCoords ? o.getCoords(i.pos) : this.view.coordsAtPos(i.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom: i }) => i.getBoundingClientRect()),
      space: this.view.state.facet(Bp).tooltipSpace(this.view),
      scaleX: e,
      scaleY: r,
      makeAbsolute: n
    };
  }
  writeMeasure(t) {
    var e;
    if (t.makeAbsolute) {
      this.madeAbsolute = !0, this.position = "absolute";
      for (let a of this.manager.tooltipViews)
        a.dom.style.position = "absolute";
    }
    let { editor: r, space: n, scaleX: i, scaleY: s } = t, o = [];
    for (let a = 0; a < this.manager.tooltips.length; a++) {
      let l = this.manager.tooltips[a], c = this.manager.tooltipViews[a], { dom: f } = c, m = t.pos[a], b = t.size[a];
      if (!m || m.bottom <= Math.max(r.top, n.top) || m.top >= Math.min(r.bottom, n.bottom) || m.right < Math.max(r.left, n.left) - 0.1 || m.left > Math.min(r.right, n.right) + 0.1) {
        f.style.top = yo;
        continue;
      }
      let C = l.arrow ? c.dom.querySelector(".cm-tooltip-arrow") : null, N = C ? 7 : 0, z = b.right - b.left, A = (e = UE.get(c)) !== null && e !== void 0 ? e : b.bottom - b.top, Q = c.offset || BD, Te = this.view.textDirection == lr.LTR, ce = b.width > n.right - n.left ? Te ? n.left : n.right - b.width : Te ? Math.min(m.left - (C ? 14 : 0) + Q.x, n.right - z) : Math.max(n.left, m.left - z + (C ? 14 : 0) - Q.x), ge = this.above[a];
      !l.strictSide && (ge ? m.top - (b.bottom - b.top) - Q.y < n.top : m.bottom + (b.bottom - b.top) + Q.y > n.bottom) && ge == n.bottom - m.bottom > m.top - n.top && (ge = this.above[a] = !ge);
      let Y = (ge ? m.top - n.top : n.bottom - m.bottom) - N;
      if (Y < A && c.resize !== !1) {
        if (Y < this.view.defaultLineHeight) {
          f.style.top = yo;
          continue;
        }
        UE.set(c, A), f.style.height = (A = Y) / s + "px";
      } else
        f.style.height && (f.style.height = "");
      let fe = ge ? m.top - A - N - Q.y : m.bottom + N + Q.y, ae = ce + z;
      if (c.overlap !== !0)
        for (let Re of o)
          Re.left < ae && Re.right > ce && Re.top < fe + A && Re.bottom > fe && (fe = ge ? Re.top - A - 2 - N : Re.bottom + N + 2);
      if (this.position == "absolute" ? (f.style.top = (fe - t.parent.top) / s + "px", f.style.left = (ce - t.parent.left) / i + "px") : (f.style.top = fe / s + "px", f.style.left = ce / i + "px"), C) {
        let Re = m.left + (Te ? Q.x : -Q.x) - (ce + 14 - 7);
        C.style.left = Re / i + "px";
      }
      c.overlap !== !0 && o.push({ left: ce, top: fe, right: ae, bottom: fe + A }), f.classList.toggle("cm-tooltip-above", ge), f.classList.toggle("cm-tooltip-below", !ge), c.positioned && c.positioned(t.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView)))
      for (let t of this.manager.tooltipViews)
        t.dom.style.top = yo;
  }
}, {
  eventObservers: {
    scroll() {
      this.maybeMeasure();
    }
  }
}), FD = /* @__PURE__ */ Rt.baseTheme({
  ".cm-tooltip": {
    zIndex: 100,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: "7px",
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: "7px solid transparent",
      borderRight: "7px solid transparent"
    },
    ".cm-tooltip-above &": {
      bottom: "-7px",
      "&:before": {
        borderTop: "7px solid #bbb"
      },
      "&:after": {
        borderTop: "7px solid #f5f5f5",
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: "-7px",
      "&:before": {
        borderBottom: "7px solid #bbb"
      },
      "&:after": {
        borderBottom: "7px solid #f5f5f5",
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
}), BD = { x: 0, y: 0 }, Qh = /* @__PURE__ */ xt.define({
  enables: [Kh, FD]
}), Hl = /* @__PURE__ */ xt.define();
class yc {
  // Needs to be static so that host tooltip instances always match
  static create(e) {
    return new yc(e);
  }
  constructor(e) {
    this.view = e, this.mounted = !1, this.dom = document.createElement("div"), this.dom.classList.add("cm-tooltip-hover"), this.manager = new tT(e, Hl, (r) => this.createHostedView(r));
  }
  createHostedView(e) {
    let r = e.create(this.view);
    return r.dom.classList.add("cm-tooltip-section"), this.dom.appendChild(r.dom), this.mounted && r.mount && r.mount(this.view), r;
  }
  mount(e) {
    for (let r of this.manager.tooltipViews)
      r.mount && r.mount(e);
    this.mounted = !0;
  }
  positioned(e) {
    for (let r of this.manager.tooltipViews)
      r.positioned && r.positioned(e);
  }
  update(e) {
    this.manager.update(e);
  }
  destroy() {
    var e;
    for (let r of this.manager.tooltipViews)
      (e = r.destroy) === null || e === void 0 || e.call(r);
  }
  passProp(e) {
    let r;
    for (let n of this.manager.tooltipViews) {
      let i = n[e];
      if (i !== void 0) {
        if (r === void 0)
          r = i;
        else if (r !== i)
          return;
      }
    }
    return r;
  }
  get offset() {
    return this.passProp("offset");
  }
  get getCoords() {
    return this.passProp("getCoords");
  }
  get overlap() {
    return this.passProp("overlap");
  }
  get resize() {
    return this.passProp("resize");
  }
}
const UD = /* @__PURE__ */ Qh.compute([Hl], (t) => {
  let e = t.facet(Hl).filter((r) => r);
  return e.length === 0 ? null : {
    pos: Math.min(...e.map((r) => r.pos)),
    end: Math.max(...e.map((r) => {
      var n;
      return (n = r.end) !== null && n !== void 0 ? n : r.pos;
    })),
    create: yc.create,
    above: e[0].above,
    arrow: e.some((r) => r.arrow)
  };
});
class qD {
  constructor(e, r, n, i, s) {
    this.view = e, this.source = r, this.field = n, this.setHover = i, this.hoverTime = s, this.hoverTimeout = -1, this.restartTimeout = -1, this.pending = null, this.lastMove = { x: 0, y: 0, target: e.dom, time: 0 }, this.checkHover = this.checkHover.bind(this), e.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this)), e.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    this.pending && (this.pending = null, clearTimeout(this.restartTimeout), this.restartTimeout = setTimeout(() => this.startHover(), 20));
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    if (this.hoverTimeout = -1, this.active)
      return;
    let e = Date.now() - this.lastMove.time;
    e < this.hoverTime ? this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - e) : this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { view: e, lastMove: r } = this, n = e.docView.nearest(r.target);
    if (!n)
      return;
    let i, s = 1;
    if (n instanceof xi)
      i = n.posAtStart;
    else {
      if (i = e.posAtCoords(r), i == null)
        return;
      let a = e.coordsAtPos(i);
      if (!a || r.y < a.top || r.y > a.bottom || r.x < a.left - e.defaultCharacterWidth || r.x > a.right + e.defaultCharacterWidth)
        return;
      let l = e.bidiSpans(e.state.doc.lineAt(i)).find((f) => f.from <= i && f.to >= i), c = l && l.dir == lr.RTL ? -1 : 1;
      s = r.x < a.left ? -c : c;
    }
    let o = this.source(e, i, s);
    if (o != null && o.then) {
      let a = this.pending = { pos: i };
      o.then((l) => {
        this.pending == a && (this.pending = null, l && e.dispatch({ effects: this.setHover.of(l) }));
      }, (l) => Tn(e.state, l, "hover tooltip"));
    } else
      o && e.dispatch({ effects: this.setHover.of(o) });
  }
  get tooltip() {
    let e = this.view.plugin(Kh), r = e ? e.manager.tooltips.findIndex((n) => n.create == yc.create) : -1;
    return r > -1 ? e.manager.tooltipViews[r] : null;
  }
  mousemove(e) {
    var r;
    this.lastMove = { x: e.clientX, y: e.clientY, target: e.target, time: Date.now() }, this.hoverTimeout < 0 && (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime));
    let { active: n, tooltip: i } = this;
    if (n && i && !zD(i.dom, e) || this.pending) {
      let { pos: s } = n || this.pending, o = (r = n == null ? void 0 : n.end) !== null && r !== void 0 ? r : s;
      (s == o ? this.view.posAtCoords(this.lastMove) != s : !GD(this.view, s, o, e.clientX, e.clientY)) && (this.view.dispatch({ effects: this.setHover.of(null) }), this.pending = null);
    }
  }
  mouseleave(e) {
    clearTimeout(this.hoverTimeout), this.hoverTimeout = -1;
    let { active: r } = this;
    if (r) {
      let { tooltip: n } = this;
      n && n.dom.contains(e.relatedTarget) ? this.watchTooltipLeave(n.dom) : this.view.dispatch({ effects: this.setHover.of(null) });
    }
  }
  watchTooltipLeave(e) {
    let r = (n) => {
      e.removeEventListener("mouseleave", r), this.active && !this.view.dom.contains(n.relatedTarget) && this.view.dispatch({ effects: this.setHover.of(null) });
    };
    e.addEventListener("mouseleave", r);
  }
  destroy() {
    clearTimeout(this.hoverTimeout), this.view.dom.removeEventListener("mouseleave", this.mouseleave), this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
}
const al = 4;
function zD(t, e) {
  let r = t.getBoundingClientRect();
  return e.clientX >= r.left - al && e.clientX <= r.right + al && e.clientY >= r.top - al && e.clientY <= r.bottom + al;
}
function GD(t, e, r, n, i, s) {
  let o = t.scrollDOM.getBoundingClientRect(), a = t.documentTop + t.documentPadding.top + t.contentHeight;
  if (o.left > n || o.right < n || o.top > i || Math.min(o.bottom, a) < i)
    return !1;
  let l = t.posAtCoords({ x: n, y: i }, !1);
  return l >= e && l <= r;
}
function YD(t, e = {}) {
  let r = Gt.define(), n = Mr.define({
    create() {
      return null;
    },
    update(i, s) {
      if (i && (e.hideOnChange && (s.docChanged || s.selection) || e.hideOn && e.hideOn(s, i)))
        return null;
      if (i && s.docChanged) {
        let o = s.changes.mapPos(i.pos, -1, Wr.TrackDel);
        if (o == null)
          return null;
        let a = Object.assign(/* @__PURE__ */ Object.create(null), i);
        a.pos = o, i.end != null && (a.end = s.changes.mapPos(i.end)), i = a;
      }
      for (let o of s.effects)
        o.is(r) && (i = o.value), o.is(HD) && (i = null);
      return i;
    },
    provide: (i) => Hl.from(i)
  });
  return [
    n,
    mr.define((i) => new qD(
      i,
      t,
      n,
      r,
      e.hoverTime || 300
      /* Hover.Time */
    )),
    UD
  ];
}
function rT(t, e) {
  let r = t.plugin(Kh);
  if (!r)
    return null;
  let n = r.manager.tooltips.indexOf(e);
  return n < 0 ? null : r.manager.tooltipViews[n];
}
const HD = /* @__PURE__ */ Gt.define(), qE = /* @__PURE__ */ xt.define({
  combine(t) {
    let e, r;
    for (let n of t)
      e = e || n.topContainer, r = r || n.bottomContainer;
    return { topContainer: e, bottomContainer: r };
  }
});
function da(t, e) {
  let r = t.plugin(nT), n = r ? r.specs.indexOf(e) : -1;
  return n > -1 ? r.panels[n] : null;
}
const nT = /* @__PURE__ */ mr.fromClass(class {
  constructor(t) {
    this.input = t.state.facet(fa), this.specs = this.input.filter((r) => r), this.panels = this.specs.map((r) => r(t));
    let e = t.state.facet(qE);
    this.top = new ll(t, !0, e.topContainer), this.bottom = new ll(t, !1, e.bottomContainer), this.top.sync(this.panels.filter((r) => r.top)), this.bottom.sync(this.panels.filter((r) => !r.top));
    for (let r of this.panels)
      r.dom.classList.add("cm-panel"), r.mount && r.mount();
  }
  update(t) {
    let e = t.state.facet(qE);
    this.top.container != e.topContainer && (this.top.sync([]), this.top = new ll(t.view, !0, e.topContainer)), this.bottom.container != e.bottomContainer && (this.bottom.sync([]), this.bottom = new ll(t.view, !1, e.bottomContainer)), this.top.syncClasses(), this.bottom.syncClasses();
    let r = t.state.facet(fa);
    if (r != this.input) {
      let n = r.filter((l) => l), i = [], s = [], o = [], a = [];
      for (let l of n) {
        let c = this.specs.indexOf(l), f;
        c < 0 ? (f = l(t.view), a.push(f)) : (f = this.panels[c], f.update && f.update(t)), i.push(f), (f.top ? s : o).push(f);
      }
      this.specs = n, this.panels = i, this.top.sync(s), this.bottom.sync(o);
      for (let l of a)
        l.dom.classList.add("cm-panel"), l.mount && l.mount();
    } else
      for (let n of this.panels)
        n.update && n.update(t);
  }
  destroy() {
    this.top.sync([]), this.bottom.sync([]);
  }
}, {
  provide: (t) => Rt.scrollMargins.of((e) => {
    let r = e.plugin(t);
    return r && { top: r.top.scrollMargin(), bottom: r.bottom.scrollMargin() };
  })
});
class ll {
  constructor(e, r, n) {
    this.view = e, this.top = r, this.container = n, this.dom = void 0, this.classes = "", this.panels = [], this.syncClasses();
  }
  sync(e) {
    for (let r of this.panels)
      r.destroy && e.indexOf(r) < 0 && r.destroy();
    this.panels = e, this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      this.dom && (this.dom.remove(), this.dom = void 0);
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div"), this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom", this.dom.style[this.top ? "top" : "bottom"] = "0";
      let r = this.container || this.view.dom;
      r.insertBefore(this.dom, this.top ? r.firstChild : null);
    }
    let e = this.dom.firstChild;
    for (let r of this.panels)
      if (r.dom.parentNode == this.dom) {
        for (; e != r.dom; )
          e = zE(e);
        e = e.nextSibling;
      } else
        this.dom.insertBefore(r.dom, e);
    for (; e; )
      e = zE(e);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!(!this.container || this.classes == this.view.themeClasses)) {
      for (let e of this.classes.split(" "))
        e && this.container.classList.remove(e);
      for (let e of (this.classes = this.view.themeClasses).split(" "))
        e && this.container.classList.add(e);
    }
  }
}
function zE(t) {
  let e = t.nextSibling;
  return t.remove(), e;
}
const fa = /* @__PURE__ */ xt.define({
  enables: nT
});
class mi extends ms {
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(e) {
    return !1;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(e) {
  }
}
mi.prototype.elementClass = "";
mi.prototype.toDOM = void 0;
mi.prototype.mapMode = Wr.TrackBefore;
mi.prototype.startSide = mi.prototype.endSide = -1;
mi.prototype.point = !0;
const kl = /* @__PURE__ */ xt.define(), VD = {
  class: "",
  renderEmptyElements: !1,
  elementStyle: "",
  markers: () => Zt.empty,
  lineMarker: () => null,
  widgetMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
}, qo = /* @__PURE__ */ xt.define();
function WD(t) {
  return [iT(), qo.of(Object.assign(Object.assign({}, VD), t))];
}
const X_ = /* @__PURE__ */ xt.define({
  combine: (t) => t.some((e) => e)
});
function iT(t) {
  let e = [
    KD
  ];
  return t && t.fixed === !1 && e.push(X_.of(!0)), e;
}
const KD = /* @__PURE__ */ mr.fromClass(class {
  constructor(t) {
    this.view = t, this.prevViewport = t.viewport, this.dom = document.createElement("div"), this.dom.className = "cm-gutters", this.dom.setAttribute("aria-hidden", "true"), this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px", this.gutters = t.state.facet(qo).map((e) => new YE(t, e));
    for (let e of this.gutters)
      this.dom.appendChild(e.dom);
    this.fixed = !t.state.facet(X_), this.fixed && (this.dom.style.position = "sticky"), this.syncGutters(!1), t.scrollDOM.insertBefore(this.dom, t.contentDOM);
  }
  update(t) {
    if (this.updateGutters(t)) {
      let e = this.prevViewport, r = t.view.viewport, n = Math.min(e.to, r.to) - Math.max(e.from, r.from);
      this.syncGutters(n < (r.to - r.from) * 0.8);
    }
    t.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight + "px"), this.view.state.facet(X_) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? "sticky" : ""), this.prevViewport = t.view.viewport;
  }
  syncGutters(t) {
    let e = this.dom.nextSibling;
    t && this.dom.remove();
    let r = Zt.iter(this.view.state.facet(kl), this.view.viewport.from), n = [], i = this.gutters.map((s) => new QD(s, this.view.viewport, -this.view.documentPadding.top));
    for (let s of this.view.viewportLineBlocks)
      if (n.length && (n = []), Array.isArray(s.type)) {
        let o = !0;
        for (let a of s.type)
          if (a.type == Kr.Text && o) {
            Z_(r, n, a.from);
            for (let l of i)
              l.line(this.view, a, n);
            o = !1;
          } else if (a.widget)
            for (let l of i)
              l.widget(this.view, a);
      } else if (s.type == Kr.Text) {
        Z_(r, n, s.from);
        for (let o of i)
          o.line(this.view, s, n);
      } else if (s.widget)
        for (let o of i)
          o.widget(this.view, s);
    for (let s of i)
      s.finish();
    t && this.view.scrollDOM.insertBefore(this.dom, e);
  }
  updateGutters(t) {
    let e = t.startState.facet(qo), r = t.state.facet(qo), n = t.docChanged || t.heightChanged || t.viewportChanged || !Zt.eq(t.startState.facet(kl), t.state.facet(kl), t.view.viewport.from, t.view.viewport.to);
    if (e == r)
      for (let i of this.gutters)
        i.update(t) && (n = !0);
    else {
      n = !0;
      let i = [];
      for (let s of r) {
        let o = e.indexOf(s);
        o < 0 ? i.push(new YE(this.view, s)) : (this.gutters[o].update(t), i.push(this.gutters[o]));
      }
      for (let s of this.gutters)
        s.dom.remove(), i.indexOf(s) < 0 && s.destroy();
      for (let s of i)
        this.dom.appendChild(s.dom);
      this.gutters = i;
    }
    return n;
  }
  destroy() {
    for (let t of this.gutters)
      t.destroy();
    this.dom.remove();
  }
}, {
  provide: (t) => Rt.scrollMargins.of((e) => {
    let r = e.plugin(t);
    return !r || r.gutters.length == 0 || !r.fixed ? null : e.textDirection == lr.LTR ? { left: r.dom.offsetWidth * e.scaleX } : { right: r.dom.offsetWidth * e.scaleX };
  })
});
function GE(t) {
  return Array.isArray(t) ? t : [t];
}
function Z_(t, e, r) {
  for (; t.value && t.from <= r; )
    t.from == r && e.push(t.value), t.next();
}
class QD {
  constructor(e, r, n) {
    this.gutter = e, this.height = n, this.i = 0, this.cursor = Zt.iter(e.markers, r.from);
  }
  addElement(e, r, n) {
    let { gutter: i } = this, s = (r.top - this.height) / e.scaleY, o = r.height / e.scaleY;
    if (this.i == i.elements.length) {
      let a = new sT(e, o, s, n);
      i.elements.push(a), i.dom.appendChild(a.dom);
    } else
      i.elements[this.i].update(e, o, s, n);
    this.height = r.bottom, this.i++;
  }
  line(e, r, n) {
    let i = [];
    Z_(this.cursor, i, r.from), n.length && (i = i.concat(n));
    let s = this.gutter.config.lineMarker(e, r, i);
    s && i.unshift(s);
    let o = this.gutter;
    i.length == 0 && !o.config.renderEmptyElements || this.addElement(e, r, i);
  }
  widget(e, r) {
    let n = this.gutter.config.widgetMarker(e, r.widget, r);
    n && this.addElement(e, r, [n]);
  }
  finish() {
    let e = this.gutter;
    for (; e.elements.length > this.i; ) {
      let r = e.elements.pop();
      e.dom.removeChild(r.dom), r.destroy();
    }
  }
}
class YE {
  constructor(e, r) {
    this.view = e, this.config = r, this.elements = [], this.spacer = null, this.dom = document.createElement("div"), this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let n in r.domEventHandlers)
      this.dom.addEventListener(n, (i) => {
        let s = i.target, o;
        if (s != this.dom && this.dom.contains(s)) {
          for (; s.parentNode != this.dom; )
            s = s.parentNode;
          let l = s.getBoundingClientRect();
          o = (l.top + l.bottom) / 2;
        } else
          o = i.clientY;
        let a = e.lineBlockAtHeight(o - e.documentTop);
        r.domEventHandlers[n](e, a, i) && i.preventDefault();
      });
    this.markers = GE(r.markers(e)), r.initialSpacer && (this.spacer = new sT(e, 0, 0, [r.initialSpacer(e)]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none");
  }
  update(e) {
    let r = this.markers;
    if (this.markers = GE(this.config.markers(e.view)), this.spacer && this.config.updateSpacer) {
      let i = this.config.updateSpacer(this.spacer.markers[0], e);
      i != this.spacer.markers[0] && this.spacer.update(e.view, 0, 0, [i]);
    }
    let n = e.view.viewport;
    return !Zt.eq(this.markers, r, n.from, n.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(e) : !1);
  }
  destroy() {
    for (let e of this.elements)
      e.destroy();
  }
}
class sT {
  constructor(e, r, n, i) {
    this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement("div"), this.dom.className = "cm-gutterElement", this.update(e, r, n, i);
  }
  update(e, r, n, i) {
    this.height != r && (this.height = r, this.dom.style.height = r + "px"), this.above != n && (this.dom.style.marginTop = (this.above = n) ? n + "px" : ""), jD(this.markers, i) || this.setMarkers(e, i);
  }
  setMarkers(e, r) {
    let n = "cm-gutterElement", i = this.dom.firstChild;
    for (let s = 0, o = 0; ; ) {
      let a = o, l = s < r.length ? r[s++] : null, c = !1;
      if (l) {
        let f = l.elementClass;
        f && (n += " " + f);
        for (let m = o; m < this.markers.length; m++)
          if (this.markers[m].compare(l)) {
            a = m, c = !0;
            break;
          }
      } else
        a = this.markers.length;
      for (; o < a; ) {
        let f = this.markers[o++];
        if (f.toDOM) {
          f.destroy(i);
          let m = i.nextSibling;
          i.remove(), i = m;
        }
      }
      if (!l)
        break;
      l.toDOM && (c ? i = i.nextSibling : this.dom.insertBefore(l.toDOM(e), i)), c && o++;
    }
    this.dom.className = n, this.markers = r;
  }
  destroy() {
    this.setMarkers(null, []);
  }
}
function jD(t, e) {
  if (t.length != e.length)
    return !1;
  for (let r = 0; r < t.length; r++)
    if (!t[r].compare(e[r]))
      return !1;
  return !0;
}
const XD = /* @__PURE__ */ xt.define(), Ls = /* @__PURE__ */ xt.define({
  combine(t) {
    return Pn(t, { formatNumber: String, domEventHandlers: {} }, {
      domEventHandlers(e, r) {
        let n = Object.assign({}, e);
        for (let i in r) {
          let s = n[i], o = r[i];
          n[i] = s ? (a, l, c) => s(a, l, c) || o(a, l, c) : o;
        }
        return n;
      }
    });
  }
});
class Up extends mi {
  constructor(e) {
    super(), this.number = e;
  }
  eq(e) {
    return this.number == e.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
}
function qp(t, e) {
  return t.state.facet(Ls).formatNumber(e, t.state);
}
const ZD = /* @__PURE__ */ qo.compute([Ls], (t) => ({
  class: "cm-lineNumbers",
  renderEmptyElements: !1,
  markers(e) {
    return e.state.facet(XD);
  },
  lineMarker(e, r, n) {
    return n.some((i) => i.toDOM) ? null : new Up(qp(e, e.state.doc.lineAt(r.from).number));
  },
  widgetMarker: () => null,
  lineMarkerChange: (e) => e.startState.facet(Ls) != e.state.facet(Ls),
  initialSpacer(e) {
    return new Up(qp(e, HE(e.state.doc.lines)));
  },
  updateSpacer(e, r) {
    let n = qp(r.view, HE(r.view.state.doc.lines));
    return n == e.number ? e : new Up(n);
  },
  domEventHandlers: t.facet(Ls).domEventHandlers
}));
function Io(t = {}) {
  return [
    Ls.of(t),
    iT(),
    ZD
  ];
}
function HE(t) {
  let e = 9;
  for (; e < t; )
    e = e * 10 + 9;
  return e;
}
const JD = /* @__PURE__ */ new class extends mi {
  constructor() {
    super(...arguments), this.elementClass = "cm-activeLineGutter";
  }
}(), e2 = /* @__PURE__ */ kl.compute(["selection"], (t) => {
  let e = [], r = -1;
  for (let n of t.selection.ranges) {
    let i = t.doc.lineAt(n.head).from;
    i > r && (r = i, e.push(JD.range(i)));
  }
  return Zt.of(e);
});
function t2() {
  return e2;
}
const r2 = 1024;
let n2 = 0;
class zp {
  constructor(e, r) {
    this.from = e, this.to = r;
  }
}
class jt {
  /**
  Create a new node prop type.
  */
  constructor(e = {}) {
    this.id = n2++, this.perNode = !!e.perNode, this.deserialize = e.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(e) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof e != "function" && (e = Rn.match(e)), (r) => {
      let n = e(r);
      return n === void 0 ? null : [this, n];
    };
  }
}
jt.closedBy = new jt({ deserialize: (t) => t.split(" ") });
jt.openedBy = new jt({ deserialize: (t) => t.split(" ") });
jt.group = new jt({ deserialize: (t) => t.split(" ") });
jt.isolate = new jt({ deserialize: (t) => {
  if (t && t != "rtl" && t != "ltr" && t != "auto")
    throw new RangeError("Invalid value for isolate: " + t);
  return t || "auto";
} });
jt.contextHash = new jt({ perNode: !0 });
jt.lookAhead = new jt({ perNode: !0 });
jt.mounted = new jt({ perNode: !0 });
class Vl {
  constructor(e, r, n) {
    this.tree = e, this.overlay = r, this.parser = n;
  }
  /**
  @internal
  */
  static get(e) {
    return e && e.props && e.props[jt.mounted.id];
  }
}
const i2 = /* @__PURE__ */ Object.create(null);
class Rn {
  /**
  @internal
  */
  constructor(e, r, n, i = 0) {
    this.name = e, this.props = r, this.id = n, this.flags = i;
  }
  /**
  Define a node type.
  */
  static define(e) {
    let r = e.props && e.props.length ? /* @__PURE__ */ Object.create(null) : i2, n = (e.top ? 1 : 0) | (e.skipped ? 2 : 0) | (e.error ? 4 : 0) | (e.name == null ? 8 : 0), i = new Rn(e.name || "", r, e.id, n);
    if (e.props) {
      for (let s of e.props)
        if (Array.isArray(s) || (s = s(i)), s) {
          if (s[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          r[s[0].id] = s[1];
        }
    }
    return i;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(e) {
    return this.props[e.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(e) {
    if (typeof e == "string") {
      if (this.name == e)
        return !0;
      let r = this.prop(jt.group);
      return r ? r.indexOf(e) > -1 : !1;
    }
    return this.id == e;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(e) {
    let r = /* @__PURE__ */ Object.create(null);
    for (let n in e)
      for (let i of n.split(" "))
        r[i] = e[n];
    return (n) => {
      for (let i = n.prop(jt.group), s = -1; s < (i ? i.length : 0); s++) {
        let o = r[s < 0 ? n.name : i[s]];
        if (o)
          return o;
      }
    };
  }
}
Rn.none = new Rn(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
const cl = /* @__PURE__ */ new WeakMap(), VE = /* @__PURE__ */ new WeakMap();
var kr;
(function(t) {
  t[t.ExcludeBuffers = 1] = "ExcludeBuffers", t[t.IncludeAnonymous = 2] = "IncludeAnonymous", t[t.IgnoreMounts = 4] = "IgnoreMounts", t[t.IgnoreOverlays = 8] = "IgnoreOverlays";
})(kr || (kr = {}));
class Br {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(e, r, n, i, s) {
    if (this.type = e, this.children = r, this.positions = n, this.length = i, this.props = null, s && s.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [o, a] of s)
        this.props[typeof o == "number" ? o : o.id] = a;
    }
  }
  /**
  @internal
  */
  toString() {
    let e = Vl.get(this);
    if (e && !e.overlay)
      return e.tree.toString();
    let r = "";
    for (let n of this.children) {
      let i = n.toString();
      i && (r && (r += ","), r += i);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (r.length ? "(" + r + ")" : "") : r;
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(e = 0) {
    return new eh(this.topNode, e);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(e, r = 0, n = 0) {
    let i = cl.get(this) || this.topNode, s = new eh(i);
    return s.moveTo(e, r), cl.set(this, s._tree), s;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new wn(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(e, r = 0) {
    let n = pa(cl.get(this) || this.topNode, e, r, !1);
    return cl.set(this, n), n;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(e, r = 0) {
    let n = pa(VE.get(this) || this.topNode, e, r, !0);
    return VE.set(this, n), n;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(e, r = 0) {
    return a2(this, e, r);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(e) {
    let { enter: r, leave: n, from: i = 0, to: s = this.length } = e, o = e.mode || 0, a = (o & kr.IncludeAnonymous) > 0;
    for (let l = this.cursor(o | kr.IncludeAnonymous); ; ) {
      let c = !1;
      if (l.from <= s && l.to >= i && (!a && l.type.isAnonymous || r(l) !== !1)) {
        if (l.firstChild())
          continue;
        c = !0;
      }
      for (; c && n && (a || !l.type.isAnonymous) && n(l), !l.nextSibling(); ) {
        if (!l.parent())
          return;
        c = !0;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(e) {
    return e.perNode ? this.props ? this.props[e.id] : void 0 : this.type.prop(e);
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let e = [];
    if (this.props)
      for (let r in this.props)
        e.push([+r, this.props[r]]);
    return e;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(e = {}) {
    return this.children.length <= 8 ? this : Zh(Rn.none, this.children, this.positions, 0, this.children.length, 0, this.length, (r, n, i) => new Br(this.type, r, n, i, this.propValues), e.makeTree || ((r, n, i) => new Br(Rn.none, r, n, i)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(e) {
    return l2(e);
  }
}
Br.empty = new Br(Rn.none, [], [], 0);
class jh {
  constructor(e, r) {
    this.buffer = e, this.index = r;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new jh(this.buffer, this.index);
  }
}
class Ki {
  /**
  Create a tree buffer.
  */
  constructor(e, r, n) {
    this.buffer = e, this.length = r, this.set = n;
  }
  /**
  @internal
  */
  get type() {
    return Rn.none;
  }
  /**
  @internal
  */
  toString() {
    let e = [];
    for (let r = 0; r < this.buffer.length; )
      e.push(this.childString(r)), r = this.buffer[r + 3];
    return e.join(",");
  }
  /**
  @internal
  */
  childString(e) {
    let r = this.buffer[e], n = this.buffer[e + 3], i = this.set.types[r], s = i.name;
    if (/\W/.test(s) && !i.isError && (s = JSON.stringify(s)), e += 4, n == e)
      return s;
    let o = [];
    for (; e < n; )
      o.push(this.childString(e)), e = this.buffer[e + 3];
    return s + "(" + o.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(e, r, n, i, s) {
    let { buffer: o } = this, a = -1;
    for (let l = e; l != r && !(oT(s, i, o[l + 1], o[l + 2]) && (a = l, n > 0)); l = o[l + 3])
      ;
    return a;
  }
  /**
  @internal
  */
  slice(e, r, n) {
    let i = this.buffer, s = new Uint16Array(r - e), o = 0;
    for (let a = e, l = 0; a < r; ) {
      s[l++] = i[a++], s[l++] = i[a++] - n;
      let c = s[l++] = i[a++] - n;
      s[l++] = i[a++] - e, o = Math.max(o, c);
    }
    return new Ki(s, o, this.set);
  }
}
function oT(t, e, r, n) {
  switch (t) {
    case -2:
      return r < e;
    case -1:
      return n >= e && r < e;
    case 0:
      return r < e && n > e;
    case 1:
      return r <= e && n > e;
    case 2:
      return n > e;
    case 4:
      return !0;
  }
}
function pa(t, e, r, n) {
  for (var i; t.from == t.to || (r < 1 ? t.from >= e : t.from > e) || (r > -1 ? t.to <= e : t.to < e); ) {
    let o = !n && t instanceof wn && t.index < 0 ? null : t.parent;
    if (!o)
      return t;
    t = o;
  }
  let s = n ? 0 : kr.IgnoreOverlays;
  if (n)
    for (let o = t, a = o.parent; a; o = a, a = o.parent)
      o instanceof wn && o.index < 0 && ((i = a.enter(e, r, s)) === null || i === void 0 ? void 0 : i.from) != o.from && (t = a);
  for (; ; ) {
    let o = t.enter(e, r, s);
    if (!o)
      return t;
    t = o;
  }
}
class aT {
  cursor(e = 0) {
    return new eh(this, e);
  }
  getChild(e, r = null, n = null) {
    let i = WE(this, e, r, n);
    return i.length ? i[0] : null;
  }
  getChildren(e, r = null, n = null) {
    return WE(this, e, r, n);
  }
  resolve(e, r = 0) {
    return pa(this, e, r, !1);
  }
  resolveInner(e, r = 0) {
    return pa(this, e, r, !0);
  }
  matchContext(e) {
    return J_(this, e);
  }
  enterUnfinishedNodesBefore(e) {
    let r = this.childBefore(e), n = this;
    for (; r; ) {
      let i = r.lastChild;
      if (!i || i.to != r.to)
        break;
      i.type.isError && i.from == i.to ? (n = r, r = i.prevSibling) : r = i;
    }
    return n;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
}
class wn extends aT {
  constructor(e, r, n, i) {
    super(), this._tree = e, this.from = r, this.index = n, this._parent = i;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(e, r, n, i, s = 0) {
    for (let o = this; ; ) {
      for (let { children: a, positions: l } = o._tree, c = r > 0 ? a.length : -1; e != c; e += r) {
        let f = a[e], m = l[e] + o.from;
        if (oT(i, n, m, m + f.length)) {
          if (f instanceof Ki) {
            if (s & kr.ExcludeBuffers)
              continue;
            let b = f.findChild(0, f.buffer.length, r, n - m, i);
            if (b > -1)
              return new ki(new s2(o, f, e, m), null, b);
          } else if (s & kr.IncludeAnonymous || !f.type.isAnonymous || Xh(f)) {
            let b;
            if (!(s & kr.IgnoreMounts) && (b = Vl.get(f)) && !b.overlay)
              return new wn(b.tree, m, e, o);
            let C = new wn(f, m, e, o);
            return s & kr.IncludeAnonymous || !C.type.isAnonymous ? C : C.nextChild(r < 0 ? f.children.length - 1 : 0, r, n, i);
          }
        }
      }
      if (s & kr.IncludeAnonymous || !o.type.isAnonymous || (o.index >= 0 ? e = o.index + r : e = r < 0 ? -1 : o._parent._tree.children.length, o = o._parent, !o))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.nextChild(
      0,
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, r, n = 0) {
    let i;
    if (!(n & kr.IgnoreOverlays) && (i = Vl.get(this._tree)) && i.overlay) {
      let s = e - this.from;
      for (let { from: o, to: a } of i.overlay)
        if ((r > 0 ? o <= s : o < s) && (r < 0 ? a >= s : a > s))
          return new wn(i.tree, i.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(0, 1, e, r, n);
  }
  nextSignificantParent() {
    let e = this;
    for (; e.type.isAnonymous && e._parent; )
      e = e._parent;
    return e;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
}
function WE(t, e, r, n) {
  let i = t.cursor(), s = [];
  if (!i.firstChild())
    return s;
  if (r != null) {
    for (let o = !1; !o; )
      if (o = i.type.is(r), !i.nextSibling())
        return s;
  }
  for (; ; ) {
    if (n != null && i.type.is(n))
      return s;
    if (i.type.is(e) && s.push(i.node), !i.nextSibling())
      return n == null ? s : [];
  }
}
function J_(t, e, r = e.length - 1) {
  for (let n = t.parent; r >= 0; n = n.parent) {
    if (!n)
      return !1;
    if (!n.type.isAnonymous) {
      if (e[r] && e[r] != n.name)
        return !1;
      r--;
    }
  }
  return !0;
}
class s2 {
  constructor(e, r, n, i) {
    this.parent = e, this.buffer = r, this.index = n, this.start = i;
  }
}
class ki extends aT {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(e, r, n) {
    super(), this.context = e, this._parent = r, this.index = n, this.type = e.buffer.set.types[e.buffer.buffer[n]];
  }
  child(e, r, n) {
    let { buffer: i } = this.context, s = i.findChild(this.index + 4, i.buffer[this.index + 3], e, r - this.context.start, n);
    return s < 0 ? null : new ki(this.context, this, s);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.child(
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.child(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, r, n = 0) {
    if (n & kr.ExcludeBuffers)
      return null;
    let { buffer: i } = this.context, s = i.findChild(this.index + 4, i.buffer[this.index + 3], r > 0 ? 1 : -1, e - this.context.start, r);
    return s < 0 ? null : new ki(this.context, this, s);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(e) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + e,
      e,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer: e } = this.context, r = e.buffer[this.index + 3];
    return r < (this._parent ? e.buffer[this._parent.index + 3] : e.buffer.length) ? new ki(this.context, this._parent, r) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: e } = this.context, r = this._parent ? this._parent.index + 4 : 0;
    return this.index == r ? this.externalSibling(-1) : new ki(this.context, this._parent, e.findChild(
      r,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let e = [], r = [], { buffer: n } = this.context, i = this.index + 4, s = n.buffer[this.index + 3];
    if (s > i) {
      let o = n.buffer[this.index + 1];
      e.push(n.slice(i, s, o)), r.push(0);
    }
    return new Br(this.type, e, r, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
}
function lT(t) {
  if (!t.length)
    return null;
  let e = 0, r = t[0];
  for (let s = 1; s < t.length; s++) {
    let o = t[s];
    (o.from > r.from || o.to < r.to) && (r = o, e = s);
  }
  let n = r instanceof wn && r.index < 0 ? null : r.parent, i = t.slice();
  return n ? i[e] = n : i.splice(e, 1), new o2(i, r);
}
class o2 {
  constructor(e, r) {
    this.heads = e, this.node = r;
  }
  get next() {
    return lT(this.heads);
  }
}
function a2(t, e, r) {
  let n = t.resolveInner(e, r), i = null;
  for (let s = n instanceof wn ? n : n.context.parent; s; s = s.parent)
    if (s.index < 0) {
      let o = s.parent;
      (i || (i = [n])).push(o.resolve(e, r)), s = o;
    } else {
      let o = Vl.get(s.tree);
      if (o && o.overlay && o.overlay[0].from <= e && o.overlay[o.overlay.length - 1].to >= e) {
        let a = new wn(o.tree, o.overlay[0].from + s.from, -1, s);
        (i || (i = [n])).push(pa(a, e, r, !1));
      }
    }
  return i ? lT(i) : n;
}
class eh {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(e, r = 0) {
    if (this.mode = r, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, e instanceof wn)
      this.yieldNode(e);
    else {
      this._tree = e.context.parent, this.buffer = e.context;
      for (let n = e._parent; n; n = n._parent)
        this.stack.unshift(n.index);
      this.bufferNode = e, this.yieldBuf(e.index);
    }
  }
  yieldNode(e) {
    return e ? (this._tree = e, this.type = e.type, this.from = e.from, this.to = e.to, !0) : !1;
  }
  yieldBuf(e, r) {
    this.index = e;
    let { start: n, buffer: i } = this.buffer;
    return this.type = r || i.set.types[i.buffer[e]], this.from = n + i.buffer[e + 1], this.to = n + i.buffer[e + 2], !0;
  }
  /**
  @internal
  */
  yield(e) {
    return e ? e instanceof wn ? (this.buffer = null, this.yieldNode(e)) : (this.buffer = e.context, this.yieldBuf(e.index, e.type)) : !1;
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(e, r, n) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(e < 0 ? this._tree._tree.children.length - 1 : 0, e, r, n, this.mode));
    let { buffer: i } = this.buffer, s = i.findChild(this.index + 4, i.buffer[this.index + 3], e, r - this.buffer.start, n);
    return s < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(s));
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(e) {
    return this.enterChild(
      1,
      e,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(e) {
    return this.enterChild(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(e, r, n = this.mode) {
    return this.buffer ? n & kr.ExcludeBuffers ? !1 : this.enterChild(1, e, r) : this.yield(this._tree.enter(e, r, n));
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & kr.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let e = this.mode & kr.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(e);
  }
  /**
  @internal
  */
  sibling(e) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + e, e, 0, 4, this.mode)) : !1;
    let { buffer: r } = this.buffer, n = this.stack.length - 1;
    if (e < 0) {
      let i = n < 0 ? 0 : this.stack[n] + 4;
      if (this.index != i)
        return this.yieldBuf(r.findChild(
          i,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let i = r.buffer[this.index + 3];
      if (i < (n < 0 ? r.buffer.length : r.buffer[this.stack[n] + 3]))
        return this.yieldBuf(i);
    }
    return n < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + e, e, 0, 4, this.mode)) : !1;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(e) {
    let r, n, { buffer: i } = this;
    if (i) {
      if (e > 0) {
        if (this.index < i.buffer.buffer.length)
          return !1;
      } else
        for (let s = 0; s < this.index; s++)
          if (i.buffer.buffer[s + 3] < this.index)
            return !1;
      ({ index: r, parent: n } = i);
    } else
      ({ index: r, _parent: n } = this._tree);
    for (; n; { index: r, _parent: n } = n)
      if (r > -1)
        for (let s = r + e, o = e < 0 ? -1 : n._tree.children.length; s != o; s += e) {
          let a = n._tree.children[s];
          if (this.mode & kr.IncludeAnonymous || a instanceof Ki || !a.type.isAnonymous || Xh(a))
            return !1;
        }
    return !0;
  }
  move(e, r) {
    if (r && this.enterChild(
      e,
      0,
      4
      /* Side.DontCare */
    ))
      return !0;
    for (; ; ) {
      if (this.sibling(e))
        return !0;
      if (this.atLastNode(e) || !this.parent())
        return !1;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(e = !0) {
    return this.move(1, e);
  }
  /**
  Move to the next node in a last-to-first pre-order traveral. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(e = !0) {
    return this.move(-1, e);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(e, r = 0) {
    for (; (this.from == this.to || (r < 1 ? this.from >= e : this.from > e) || (r > -1 ? this.to <= e : this.to < e)) && this.parent(); )
      ;
    for (; this.enterChild(1, e, r); )
      ;
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let e = this.bufferNode, r = null, n = 0;
    if (e && e.context == this.buffer)
      e:
        for (let i = this.index, s = this.stack.length; s >= 0; ) {
          for (let o = e; o; o = o._parent)
            if (o.index == i) {
              if (i == this.index)
                return o;
              r = o, n = s + 1;
              break e;
            }
          i = this.stack[--s];
        }
    for (let i = n; i < this.stack.length; i++)
      r = new ki(this.buffer, r, this.stack[i]);
    return this.bufferNode = new ki(this.buffer, r, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(e, r) {
    for (let n = 0; ; ) {
      let i = !1;
      if (this.type.isAnonymous || e(this) !== !1) {
        if (this.firstChild()) {
          n++;
          continue;
        }
        this.type.isAnonymous || (i = !0);
      }
      for (; i && r && r(this), i = this.type.isAnonymous, !this.nextSibling(); ) {
        if (!n)
          return;
        this.parent(), n--, i = !0;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(e) {
    if (!this.buffer)
      return J_(this.node, e);
    let { buffer: r } = this.buffer, { types: n } = r.set;
    for (let i = e.length - 1, s = this.stack.length - 1; i >= 0; s--) {
      if (s < 0)
        return J_(this.node, e, i);
      let o = n[r.buffer[this.stack[s]]];
      if (!o.isAnonymous) {
        if (e[i] && e[i] != o.name)
          return !1;
        i--;
      }
    }
    return !0;
  }
}
function Xh(t) {
  return t.children.some((e) => e instanceof Ki || !e.type.isAnonymous || Xh(e));
}
function l2(t) {
  var e;
  let { buffer: r, nodeSet: n, maxBufferLength: i = r2, reused: s = [], minRepeatType: o = n.types.length } = t, a = Array.isArray(r) ? new jh(r, r.length) : r, l = n.types, c = 0, f = 0;
  function m(Y, fe, ae, Re, pe, Ce) {
    let { id: J, start: R, end: ve, size: F } = a, ne = f;
    for (; F < 0; )
      if (a.next(), F == -1) {
        let w = s[J];
        ae.push(w), Re.push(R - Y);
        return;
      } else if (F == -3) {
        c = J;
        return;
      } else if (F == -4) {
        f = J;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${F}`);
    let H = l[J], we, _e, X = R - Y;
    if (ve - R <= i && (_e = A(a.pos - fe, pe))) {
      let w = new Uint16Array(_e.size - _e.skip), h = a.pos - _e.size, d = w.length;
      for (; a.pos > h; )
        d = Q(_e.start, w, d);
      we = new Ki(w, ve - _e.start, n), X = _e.start - Y;
    } else {
      let w = a.pos - F;
      a.next();
      let h = [], d = [], _ = J >= o ? J : -1, g = 0, $ = ve;
      for (; a.pos > w; )
        _ >= 0 && a.id == _ && a.size >= 0 ? (a.end <= $ - i && (N(h, d, R, g, a.end, $, _, ne), g = h.length, $ = a.end), a.next()) : Ce > 2500 ? b(R, w, h, d) : m(R, w, h, d, _, Ce + 1);
      if (_ >= 0 && g > 0 && g < h.length && N(h, d, R, g, R, $, _, ne), h.reverse(), d.reverse(), _ > -1 && g > 0) {
        let I = C(H);
        we = Zh(H, h, d, 0, h.length, 0, ve - R, I, I);
      } else
        we = z(H, h, d, ve - R, ne - ve);
    }
    ae.push(we), Re.push(X);
  }
  function b(Y, fe, ae, Re) {
    let pe = [], Ce = 0, J = -1;
    for (; a.pos > fe; ) {
      let { id: R, start: ve, end: F, size: ne } = a;
      if (ne > 4)
        a.next();
      else {
        if (J > -1 && ve < J)
          break;
        J < 0 && (J = F - i), pe.push(R, ve, F), Ce++, a.next();
      }
    }
    if (Ce) {
      let R = new Uint16Array(Ce * 4), ve = pe[pe.length - 2];
      for (let F = pe.length - 3, ne = 0; F >= 0; F -= 3)
        R[ne++] = pe[F], R[ne++] = pe[F + 1] - ve, R[ne++] = pe[F + 2] - ve, R[ne++] = ne;
      ae.push(new Ki(R, pe[2] - ve, n)), Re.push(ve - Y);
    }
  }
  function C(Y) {
    return (fe, ae, Re) => {
      let pe = 0, Ce = fe.length - 1, J, R;
      if (Ce >= 0 && (J = fe[Ce]) instanceof Br) {
        if (!Ce && J.type == Y && J.length == Re)
          return J;
        (R = J.prop(jt.lookAhead)) && (pe = ae[Ce] + J.length + R);
      }
      return z(Y, fe, ae, Re, pe);
    };
  }
  function N(Y, fe, ae, Re, pe, Ce, J, R) {
    let ve = [], F = [];
    for (; Y.length > Re; )
      ve.push(Y.pop()), F.push(fe.pop() + ae - pe);
    Y.push(z(n.types[J], ve, F, Ce - pe, R - Ce)), fe.push(pe - ae);
  }
  function z(Y, fe, ae, Re, pe = 0, Ce) {
    if (c) {
      let J = [jt.contextHash, c];
      Ce = Ce ? [J].concat(Ce) : [J];
    }
    if (pe > 25) {
      let J = [jt.lookAhead, pe];
      Ce = Ce ? [J].concat(Ce) : [J];
    }
    return new Br(Y, fe, ae, Re, Ce);
  }
  function A(Y, fe) {
    let ae = a.fork(), Re = 0, pe = 0, Ce = 0, J = ae.end - i, R = { size: 0, start: 0, skip: 0 };
    e:
      for (let ve = ae.pos - Y; ae.pos > ve; ) {
        let F = ae.size;
        if (ae.id == fe && F >= 0) {
          R.size = Re, R.start = pe, R.skip = Ce, Ce += 4, Re += 4, ae.next();
          continue;
        }
        let ne = ae.pos - F;
        if (F < 0 || ne < ve || ae.start < J)
          break;
        let H = ae.id >= o ? 4 : 0, we = ae.start;
        for (ae.next(); ae.pos > ne; ) {
          if (ae.size < 0)
            if (ae.size == -3)
              H += 4;
            else
              break e;
          else
            ae.id >= o && (H += 4);
          ae.next();
        }
        pe = we, Re += F, Ce += H;
      }
    return (fe < 0 || Re == Y) && (R.size = Re, R.start = pe, R.skip = Ce), R.size > 4 ? R : void 0;
  }
  function Q(Y, fe, ae) {
    let { id: Re, start: pe, end: Ce, size: J } = a;
    if (a.next(), J >= 0 && Re < o) {
      let R = ae;
      if (J > 4) {
        let ve = a.pos - (J - 4);
        for (; a.pos > ve; )
          ae = Q(Y, fe, ae);
      }
      fe[--ae] = R, fe[--ae] = Ce - Y, fe[--ae] = pe - Y, fe[--ae] = Re;
    } else
      J == -3 ? c = Re : J == -4 && (f = Re);
    return ae;
  }
  let Te = [], ce = [];
  for (; a.pos > 0; )
    m(t.start || 0, t.bufferStart || 0, Te, ce, -1, 0);
  let ge = (e = t.length) !== null && e !== void 0 ? e : Te.length ? ce[0] + Te[0].length : 0;
  return new Br(l[t.topID], Te.reverse(), ce.reverse(), ge);
}
const KE = /* @__PURE__ */ new WeakMap();
function Il(t, e) {
  if (!t.isAnonymous || e instanceof Ki || e.type != t)
    return 1;
  let r = KE.get(e);
  if (r == null) {
    r = 1;
    for (let n of e.children) {
      if (n.type != t || !(n instanceof Br)) {
        r = 1;
        break;
      }
      r += Il(t, n);
    }
    KE.set(e, r);
  }
  return r;
}
function Zh(t, e, r, n, i, s, o, a, l) {
  let c = 0;
  for (let N = n; N < i; N++)
    c += Il(t, e[N]);
  let f = Math.ceil(
    c * 1.5 / 8
    /* Balance.BranchFactor */
  ), m = [], b = [];
  function C(N, z, A, Q, Te) {
    for (let ce = A; ce < Q; ) {
      let ge = ce, Y = z[ce], fe = Il(t, N[ce]);
      for (ce++; ce < Q; ce++) {
        let ae = Il(t, N[ce]);
        if (fe + ae >= f)
          break;
        fe += ae;
      }
      if (ce == ge + 1) {
        if (fe > f) {
          let ae = N[ge];
          C(ae.children, ae.positions, 0, ae.children.length, z[ge] + Te);
          continue;
        }
        m.push(N[ge]);
      } else {
        let ae = z[ce - 1] + N[ce - 1].length - Y;
        m.push(Zh(t, N, z, ge, ce, Y, ae, null, l));
      }
      b.push(Y + Te - s);
    }
  }
  return C(e, r, n, i, 0), (a || l)(m, b, o);
}
class ps {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(e, r, n, i, s = !1, o = !1) {
    this.from = e, this.to = r, this.tree = n, this.offset = i, this.open = (s ? 1 : 0) | (o ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(e, r = [], n = !1) {
    let i = [new ps(0, e.length, e, 0, !1, n)];
    for (let s of r)
      s.to > e.length && i.push(s);
    return i;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(e, r, n = 128) {
    if (!r.length)
      return e;
    let i = [], s = 1, o = e.length ? e[0] : null;
    for (let a = 0, l = 0, c = 0; ; a++) {
      let f = a < r.length ? r[a] : null, m = f ? f.fromA : 1e9;
      if (m - l >= n)
        for (; o && o.from < m; ) {
          let b = o;
          if (l >= b.from || m <= b.to || c) {
            let C = Math.max(b.from, l) - c, N = Math.min(b.to, m) - c;
            b = C >= N ? null : new ps(C, N, b.tree, b.offset + c, a > 0, !!f);
          }
          if (b && i.push(b), o.to > m)
            break;
          o = s < e.length ? e[s++] : null;
        }
      if (!f)
        break;
      l = f.toA, c = f.toA - f.toB;
    }
    return i;
  }
}
class c2 {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(e, r, n) {
    return typeof e == "string" && (e = new u2(e)), n = n ? n.length ? n.map((i) => new zp(i.from, i.to)) : [new zp(0, 0)] : [new zp(0, e.length)], this.createParse(e, r || [], n);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(e, r, n) {
    let i = this.startParse(e, r, n);
    for (; ; ) {
      let s = i.advance();
      if (s)
        return s;
    }
  }
}
class u2 {
  constructor(e) {
    this.string = e;
  }
  get length() {
    return this.string.length;
  }
  chunk(e) {
    return this.string.slice(e);
  }
  get lineChunks() {
    return !1;
  }
  read(e, r) {
    return this.string.slice(e, r);
  }
}
new jt({ perNode: !0 });
let d2 = 0;
class Hn {
  /**
  @internal
  */
  constructor(e, r, n) {
    this.set = e, this.base = r, this.modified = n, this.id = d2++;
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and
  [highlighters](#highlight.tagHighlighter) that don't mention
  this tag will try to fall back to the parent tag (or grandparent
  tag, etc).
  */
  static define(e) {
    if (e != null && e.base)
      throw new Error("Can not derive from a modified tag");
    let r = new Hn([], null, []);
    if (r.set.push(r), e)
      for (let n of e.set)
        r.set.push(n);
    return r;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier() {
    let e = new Wl();
    return (r) => r.modified.indexOf(e) > -1 ? r : Wl.get(r.base || r, r.modified.concat(e).sort((n, i) => n.id - i.id));
  }
}
let f2 = 0;
class Wl {
  constructor() {
    this.instances = [], this.id = f2++;
  }
  static get(e, r) {
    if (!r.length)
      return e;
    let n = r[0].instances.find((a) => a.base == e && p2(r, a.modified));
    if (n)
      return n;
    let i = [], s = new Hn(i, e, r);
    for (let a of r)
      a.instances.push(s);
    let o = _2(r);
    for (let a of e.set)
      if (!a.modified.length)
        for (let l of o)
          i.push(Wl.get(a, l));
    return s;
  }
}
function p2(t, e) {
  return t.length == e.length && t.every((r, n) => r == e[n]);
}
function _2(t) {
  let e = [[]];
  for (let r = 0; r < t.length; r++)
    for (let n = 0, i = e.length; n < i; n++)
      e.push(e[n].concat(t[r]));
  return e.sort((r, n) => n.length - r.length);
}
function h2(t) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let r in t) {
    let n = t[r];
    Array.isArray(n) || (n = [n]);
    for (let i of r.split(" "))
      if (i) {
        let s = [], o = 2, a = i;
        for (let m = 0; ; ) {
          if (a == "..." && m > 0 && m + 3 == i.length) {
            o = 1;
            break;
          }
          let b = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(a);
          if (!b)
            throw new RangeError("Invalid path: " + i);
          if (s.push(b[0] == "*" ? "" : b[0][0] == '"' ? JSON.parse(b[0]) : b[0]), m += b[0].length, m == i.length)
            break;
          let C = i[m++];
          if (m == i.length && C == "!") {
            o = 0;
            break;
          }
          if (C != "/")
            throw new RangeError("Invalid path: " + i);
          a = i.slice(m);
        }
        let l = s.length - 1, c = s[l];
        if (!c)
          throw new RangeError("Invalid path: " + i);
        let f = new Kl(n, o, l > 0 ? s.slice(0, l) : null);
        e[c] = f.sort(e[c]);
      }
  }
  return cT.add(e);
}
const cT = new jt();
class Kl {
  constructor(e, r, n, i) {
    this.tags = e, this.mode = r, this.context = n, this.next = i;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(e) {
    return !e || e.depth < this.depth ? (this.next = e, this) : (e.next = this.sort(e.next), e);
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
Kl.empty = new Kl([], 2, null);
function uT(t, e) {
  let r = /* @__PURE__ */ Object.create(null);
  for (let s of t)
    if (!Array.isArray(s.tag))
      r[s.tag.id] = s.class;
    else
      for (let o of s.tag)
        r[o.id] = s.class;
  let { scope: n, all: i = null } = e || {};
  return {
    style: (s) => {
      let o = i;
      for (let a of s)
        for (let l of a.set) {
          let c = r[l.id];
          if (c) {
            o = o ? o + " " + c : c;
            break;
          }
        }
      return o;
    },
    scope: n
  };
}
function m2(t, e) {
  let r = null;
  for (let n of t) {
    let i = n.style(e);
    i && (r = r ? r + " " + i : i);
  }
  return r;
}
function g2(t, e, r, n = 0, i = t.length) {
  let s = new $2(n, Array.isArray(e) ? e : [e], r);
  s.highlightRange(t.cursor(), n, i, "", s.highlighters), s.flush(i);
}
class $2 {
  constructor(e, r, n) {
    this.at = e, this.highlighters = r, this.span = n, this.class = "";
  }
  startSpan(e, r) {
    r != this.class && (this.flush(e), e > this.at && (this.at = e), this.class = r);
  }
  flush(e) {
    e > this.at && this.class && this.span(this.at, e, this.class);
  }
  highlightRange(e, r, n, i, s) {
    let { type: o, from: a, to: l } = e;
    if (a >= n || l <= r)
      return;
    o.isTop && (s = this.highlighters.filter((C) => !C.scope || C.scope(o)));
    let c = i, f = b2(e) || Kl.empty, m = m2(s, f.tags);
    if (m && (c && (c += " "), c += m, f.mode == 1 && (i += (i ? " " : "") + m)), this.startSpan(Math.max(r, a), c), f.opaque)
      return;
    let b = e.tree && e.tree.prop(jt.mounted);
    if (b && b.overlay) {
      let C = e.node.enter(b.overlay[0].from + a, 1), N = this.highlighters.filter((A) => !A.scope || A.scope(b.tree.type)), z = e.firstChild();
      for (let A = 0, Q = a; ; A++) {
        let Te = A < b.overlay.length ? b.overlay[A] : null, ce = Te ? Te.from + a : l, ge = Math.max(r, Q), Y = Math.min(n, ce);
        if (ge < Y && z)
          for (; e.from < Y && (this.highlightRange(e, ge, Y, i, s), this.startSpan(Math.min(Y, e.to), c), !(e.to >= ce || !e.nextSibling())); )
            ;
        if (!Te || ce > n)
          break;
        Q = Te.to + a, Q > r && (this.highlightRange(C.cursor(), Math.max(r, Te.from + a), Math.min(n, Q), "", N), this.startSpan(Math.min(n, Q), c));
      }
      z && e.parent();
    } else if (e.firstChild()) {
      b && (i = "");
      do
        if (!(e.to <= r)) {
          if (e.from >= n)
            break;
          this.highlightRange(e, r, n, i, s), this.startSpan(Math.min(n, e.to), c);
        }
      while (e.nextSibling());
      e.parent();
    }
  }
}
function b2(t) {
  let e = t.type.prop(cT);
  for (; e && e.context && !t.matchContext(e.context); )
    e = e.next;
  return e || null;
}
const At = Hn.define, ul = At(), vi = At(), QE = At(vi), jE = At(vi), Si = At(), dl = At(Si), Gp = At(Si), Gn = At(), is = At(Gn), qn = At(), zn = At(), th = At(), To = At(th), fl = At(), mt = {
  /**
  A comment.
  */
  comment: ul,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: At(ul),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: At(ul),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: At(ul),
  /**
  Any kind of identifier.
  */
  name: vi,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: At(vi),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName: QE,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: At(QE),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName: jE,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: At(jE),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: At(vi),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: At(vi),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: At(vi),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: At(vi),
  /**
  A literal value.
  */
  literal: Si,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string: dl,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: At(dl),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: At(dl),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: At(dl),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: Gp,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: At(Gp),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: At(Gp),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: At(Si),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: At(Si),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: At(Si),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: At(Si),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: At(Si),
  /**
  A language keyword.
  */
  keyword: qn,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: At(qn),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: At(qn),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: At(qn),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: At(qn),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: At(qn),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: At(qn),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: At(qn),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: At(qn),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: At(qn),
  /**
  An operator.
  */
  operator: zn,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: At(zn),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: At(zn),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: At(zn),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: At(zn),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: At(zn),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: At(zn),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: At(zn),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: At(zn),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: At(zn),
  /**
  Program or markup punctuation.
  */
  punctuation: th,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: At(th),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket: To,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: At(To),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: At(To),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: At(To),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: At(To),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: Gn,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading: is,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: At(is),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: At(is),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: At(is),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: At(is),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: At(is),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: At(is),
  /**
  A prose separator (such as a horizontal rule).
  */
  contentSeparator: At(Gn),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: At(Gn),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: At(Gn),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: At(Gn),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: At(Gn),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: At(Gn),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: At(Gn),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: At(Gn),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: At(),
  /**
  Deleted text.
  */
  deleted: At(),
  /**
  Changed text.
  */
  changed: At(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: At(),
  /**
  Metadata or meta-instruction.
  */
  meta: fl,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: At(fl),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: At(fl),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: At(fl),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Hn.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Hn.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: Hn.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Hn.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Hn.defineModifier(),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Hn.defineModifier()
};
uT([
  { tag: mt.link, class: "tok-link" },
  { tag: mt.heading, class: "tok-heading" },
  { tag: mt.emphasis, class: "tok-emphasis" },
  { tag: mt.strong, class: "tok-strong" },
  { tag: mt.keyword, class: "tok-keyword" },
  { tag: mt.atom, class: "tok-atom" },
  { tag: mt.bool, class: "tok-bool" },
  { tag: mt.url, class: "tok-url" },
  { tag: mt.labelName, class: "tok-labelName" },
  { tag: mt.inserted, class: "tok-inserted" },
  { tag: mt.deleted, class: "tok-deleted" },
  { tag: mt.literal, class: "tok-literal" },
  { tag: mt.string, class: "tok-string" },
  { tag: mt.number, class: "tok-number" },
  { tag: [mt.regexp, mt.escape, mt.special(mt.string)], class: "tok-string2" },
  { tag: mt.variableName, class: "tok-variableName" },
  { tag: mt.local(mt.variableName), class: "tok-variableName tok-local" },
  { tag: mt.definition(mt.variableName), class: "tok-variableName tok-definition" },
  { tag: mt.special(mt.variableName), class: "tok-variableName2" },
  { tag: mt.definition(mt.propertyName), class: "tok-propertyName tok-definition" },
  { tag: mt.typeName, class: "tok-typeName" },
  { tag: mt.namespace, class: "tok-namespace" },
  { tag: mt.className, class: "tok-className" },
  { tag: mt.macroName, class: "tok-macroName" },
  { tag: mt.propertyName, class: "tok-propertyName" },
  { tag: mt.operator, class: "tok-operator" },
  { tag: mt.comment, class: "tok-comment" },
  { tag: mt.meta, class: "tok-meta" },
  { tag: mt.invalid, class: "tok-invalid" },
  { tag: mt.punctuation, class: "tok-punctuation" }
]);
var Yp;
const Oo = /* @__PURE__ */ new jt(), E2 = /* @__PURE__ */ new jt();
class Kn {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(e, r, n = [], i = "") {
    this.data = e, this.name = i, Qt.prototype.hasOwnProperty("tree") || Object.defineProperty(Qt.prototype, "tree", { get() {
      return zr(this);
    } }), this.parser = r, this.extension = [
      Qi.of(this),
      Qt.languageData.of((s, o, a) => {
        let l = XE(s, o, a), c = l.type.prop(Oo);
        if (!c)
          return [];
        let f = s.facet(c), m = l.type.prop(E2);
        if (m) {
          let b = l.resolve(o - l.from, a);
          for (let C of m)
            if (C.test(b, s)) {
              let N = s.facet(C.facet);
              return C.type == "replace" ? N : N.concat(f);
            }
        }
        return f;
      })
    ].concat(n);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(e, r, n = -1) {
    return XE(e, r, n).type.prop(Oo) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(e) {
    let r = e.facet(Qi);
    if ((r == null ? void 0 : r.data) == this.data)
      return [{ from: 0, to: e.doc.length }];
    if (!r || !r.allowsNesting)
      return [];
    let n = [], i = (s, o) => {
      if (s.prop(Oo) == this.data) {
        n.push({ from: o, to: o + s.length });
        return;
      }
      let a = s.prop(jt.mounted);
      if (a) {
        if (a.tree.prop(Oo) == this.data) {
          if (a.overlay)
            for (let l of a.overlay)
              n.push({ from: l.from + o, to: l.to + o });
          else
            n.push({ from: o, to: o + s.length });
          return;
        } else if (a.overlay) {
          let l = n.length;
          if (i(a.tree, a.overlay[0].from + o), n.length > l)
            return;
        }
      }
      for (let l = 0; l < s.children.length; l++) {
        let c = s.children[l];
        c instanceof Br && i(c, s.positions[l] + o);
      }
    };
    return i(zr(e), 0), n;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return !0;
  }
}
Kn.setState = /* @__PURE__ */ Gt.define();
function XE(t, e, r) {
  let n = t.facet(Qi), i = zr(t).topNode;
  if (!n || n.allowsNesting)
    for (let s = i; s; s = s.enter(e, r, kr.ExcludeBuffers))
      s.type.isTop && (i = s);
  return i;
}
function zr(t) {
  let e = t.field(Kn.state, !1);
  return e ? e.tree : Br.empty;
}
class v2 {
  /**
  Create an input object for the given document.
  */
  constructor(e) {
    this.doc = e, this.cursorPos = 0, this.string = "", this.cursor = e.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(e) {
    return this.string = this.cursor.next(e - this.cursorPos).value, this.cursorPos = e + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(e) {
    return this.syncTo(e), this.string;
  }
  get lineChunks() {
    return !0;
  }
  read(e, r) {
    let n = this.cursorPos - this.string.length;
    return e < n || r >= this.cursorPos ? this.doc.sliceString(e, r) : this.string.slice(e - n, r - n);
  }
}
let Co = null;
class Ql {
  constructor(e, r, n = [], i, s, o, a, l) {
    this.parser = e, this.state = r, this.fragments = n, this.tree = i, this.treeLen = s, this.viewport = o, this.skipped = a, this.scheduleOn = l, this.parse = null, this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(e, r, n) {
    return new Ql(e, r, [], Br.empty, 0, n, [], null);
  }
  startParse() {
    return this.parser.startParse(new v2(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(e, r) {
    return r != null && r >= this.state.doc.length && (r = void 0), this.tree != Br.empty && this.isDone(r ?? this.state.doc.length) ? (this.takeTree(), !0) : this.withContext(() => {
      var n;
      if (typeof e == "number") {
        let i = Date.now() + e;
        e = () => Date.now() > i;
      }
      for (this.parse || (this.parse = this.startParse()), r != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > r) && r < this.state.doc.length && this.parse.stopAt(r); ; ) {
        let i = this.parse.advance();
        if (i)
          if (this.fragments = this.withoutTempSkipped(ps.addTree(i, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (n = this.parse.stoppedAt) !== null && n !== void 0 ? n : this.state.doc.length, this.tree = i, this.parse = null, this.treeLen < (r ?? this.state.doc.length))
            this.parse = this.startParse();
          else
            return !0;
        if (e())
          return !1;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let e, r;
    this.parse && (e = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > e) && this.parse.stopAt(e), this.withContext(() => {
      for (; !(r = this.parse.advance()); )
        ;
    }), this.treeLen = e, this.tree = r, this.fragments = this.withoutTempSkipped(ps.addTree(this.tree, this.fragments, !0)), this.parse = null);
  }
  withContext(e) {
    let r = Co;
    Co = this;
    try {
      return e();
    } finally {
      Co = r;
    }
  }
  withoutTempSkipped(e) {
    for (let r; r = this.tempSkipped.pop(); )
      e = ZE(e, r.from, r.to);
    return e;
  }
  /**
  @internal
  */
  changes(e, r) {
    let { fragments: n, tree: i, treeLen: s, viewport: o, skipped: a } = this;
    if (this.takeTree(), !e.empty) {
      let l = [];
      if (e.iterChangedRanges((c, f, m, b) => l.push({ fromA: c, toA: f, fromB: m, toB: b })), n = ps.applyChanges(n, l), i = Br.empty, s = 0, o = { from: e.mapPos(o.from, -1), to: e.mapPos(o.to, 1) }, this.skipped.length) {
        a = [];
        for (let c of this.skipped) {
          let f = e.mapPos(c.from, 1), m = e.mapPos(c.to, -1);
          f < m && a.push({ from: f, to: m });
        }
      }
    }
    return new Ql(this.parser, r, n, i, s, o, a, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(e) {
    if (this.viewport.from == e.from && this.viewport.to == e.to)
      return !1;
    this.viewport = e;
    let r = this.skipped.length;
    for (let n = 0; n < this.skipped.length; n++) {
      let { from: i, to: s } = this.skipped[n];
      i < e.to && s > e.from && (this.fragments = ZE(this.fragments, i, s), this.skipped.splice(n--, 1));
    }
    return this.skipped.length >= r ? !1 : (this.reset(), !0);
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(e, r) {
    this.skipped.push({ from: e, to: r });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(e) {
    return new class extends c2 {
      createParse(r, n, i) {
        let s = i[0].from, o = i[i.length - 1].to;
        return {
          parsedPos: s,
          advance() {
            let l = Co;
            if (l) {
              for (let c of i)
                l.tempSkipped.push(c);
              e && (l.scheduleOn = l.scheduleOn ? Promise.all([l.scheduleOn, e]) : e);
            }
            return this.parsedPos = o, new Br(Rn.none, [], [], o - s);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  /**
  @internal
  */
  isDone(e) {
    e = Math.min(e, this.state.doc.length);
    let r = this.fragments;
    return this.treeLen >= e && r.length && r[0].from == 0 && r[0].to >= e;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return Co;
  }
}
function ZE(t, e, r) {
  return ps.applyChanges(t, [{ fromA: e, toA: r, fromB: e, toB: r }]);
}
class eo {
  constructor(e) {
    this.context = e, this.tree = e.tree;
  }
  apply(e) {
    if (!e.docChanged && this.tree == this.context.tree)
      return this;
    let r = this.context.changes(e.changes, e.state), n = this.context.treeLen == e.startState.doc.length ? void 0 : Math.max(e.changes.mapPos(this.context.treeLen), r.viewport.to);
    return r.work(20, n) || r.takeTree(), new eo(r);
  }
  static init(e) {
    let r = Math.min(3e3, e.doc.length), n = Ql.create(e.facet(Qi).parser, e, { from: 0, to: r });
    return n.work(20, r) || n.takeTree(), new eo(n);
  }
}
Kn.state = /* @__PURE__ */ Mr.define({
  create: eo.init,
  update(t, e) {
    for (let r of e.effects)
      if (r.is(Kn.setState))
        return r.value;
    return e.startState.facet(Qi) != e.state.facet(Qi) ? eo.init(e.state) : t.apply(e);
  }
});
let dT = (t) => {
  let e = setTimeout(
    () => t(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(e);
};
typeof requestIdleCallback < "u" && (dT = (t) => {
  let e = -1, r = setTimeout(
    () => {
      e = requestIdleCallback(t, {
        timeout: 400
        /* Work.MinPause */
      });
    },
    100
    /* Work.MinPause */
  );
  return () => e < 0 ? clearTimeout(r) : cancelIdleCallback(e);
});
const Hp = typeof navigator < "u" && (!((Yp = navigator.scheduling) === null || Yp === void 0) && Yp.isInputPending) ? () => navigator.scheduling.isInputPending() : null, S2 = /* @__PURE__ */ mr.fromClass(class {
  constructor(e) {
    this.view = e, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(e) {
    let r = this.view.state.field(Kn.state).context;
    (r.updateViewport(e.view.viewport) || this.view.viewport.to > r.treeLen) && this.scheduleWork(), (e.docChanged || e.selectionSet) && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(r);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: e } = this.view, r = e.field(Kn.state);
    (r.tree != r.context.tree || !r.context.isDone(e.doc.length)) && (this.working = dT(this.work));
  }
  work(e) {
    this.working = null;
    let r = Date.now();
    if (this.chunkEnd < r && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = r + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: n, viewport: { to: i } } = this.view, s = n.field(Kn.state);
    if (s.tree == s.context.tree && s.context.isDone(
      i + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let o = Date.now() + Math.min(this.chunkBudget, 100, e && !Hp ? Math.max(25, e.timeRemaining() - 5) : 1e9), a = s.context.treeLen < i && n.doc.length > i + 1e3, l = s.context.work(() => Hp && Hp() || Date.now() > o, i + (a ? 0 : 1e5));
    this.chunkBudget -= Date.now() - r, (l || this.chunkBudget <= 0) && (s.context.takeTree(), this.view.dispatch({ effects: Kn.setState.of(new eo(s.context)) })), this.chunkBudget > 0 && !(l && !a) && this.scheduleWork(), this.checkAsyncSchedule(s.context);
  }
  checkAsyncSchedule(e) {
    e.scheduleOn && (this.workScheduled++, e.scheduleOn.then(() => this.scheduleWork()).catch((r) => Tn(this.view.state, r)).then(() => this.workScheduled--), e.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), Qi = /* @__PURE__ */ xt.define({
  combine(t) {
    return t.length ? t[0] : null;
  },
  enables: (t) => [
    Kn.state,
    S2,
    Rt.contentAttributes.compute([t], (e) => {
      let r = e.facet(t);
      return r && r.name ? { "data-language": r.name } : {};
    })
  ]
}), y2 = /* @__PURE__ */ xt.define(), _a = /* @__PURE__ */ xt.define({
  combine: (t) => {
    if (!t.length)
      return "  ";
    let e = t[0];
    if (!e || /\S/.test(e) || Array.from(e).some((r) => r != e[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(t[0]));
    return e;
  }
});
function to(t) {
  let e = t.facet(_a);
  return e.charCodeAt(0) == 9 ? t.tabSize * e.length : e.length;
}
function ha(t, e) {
  let r = "", n = t.tabSize, i = t.facet(_a)[0];
  if (i == "	") {
    for (; e >= n; )
      r += "	", e -= n;
    i = " ";
  }
  for (let s = 0; s < e; s++)
    r += i;
  return r;
}
function Jh(t, e) {
  t instanceof Qt && (t = new Tc(t));
  for (let n of t.state.facet(y2)) {
    let i = n(t, e);
    if (i !== void 0)
      return i;
  }
  let r = zr(t.state);
  return r.length >= e ? C2(t, r, e) : null;
}
class Tc {
  /**
  Create an indent context.
  */
  constructor(e, r = {}) {
    this.state = e, this.options = r, this.unit = to(e);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(e, r = 1) {
    let n = this.state.doc.lineAt(e), { simulateBreak: i, simulateDoubleBreak: s } = this.options;
    return i != null && i >= n.from && i <= n.to ? s && i == e ? { text: "", from: e } : (r < 0 ? i < e : i <= e) ? { text: n.text.slice(i - n.from), from: i } : { text: n.text.slice(0, i - n.from), from: n.from } : n;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(e, r = 1) {
    if (this.options.simulateDoubleBreak && e == this.options.simulateBreak)
      return "";
    let { text: n, from: i } = this.lineAt(e, r);
    return n.slice(e - i, Math.min(n.length, e + 100 - i));
  }
  /**
  Find the column for the given position.
  */
  column(e, r = 1) {
    let { text: n, from: i } = this.lineAt(e, r), s = this.countColumn(n, e - i), o = this.options.overrideIndentation ? this.options.overrideIndentation(i) : -1;
    return o > -1 && (s += o - this.countColumn(n, n.search(/\S|$/))), s;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(e, r = e.length) {
    return uo(e, this.state.tabSize, r);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(e, r = 1) {
    let { text: n, from: i } = this.lineAt(e, r), s = this.options.overrideIndentation;
    if (s) {
      let o = s(i);
      if (o > -1)
        return o;
    }
    return this.countColumn(n, n.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const T2 = /* @__PURE__ */ new jt();
function C2(t, e, r) {
  let n = e.resolveStack(r), i = n.node.enterUnfinishedNodesBefore(r);
  if (i != n.node) {
    let s = [];
    for (let o = i; o != n.node; o = o.parent)
      s.push(o);
    for (let o = s.length - 1; o >= 0; o--)
      n = { node: s[o], next: n };
  }
  return fT(n, t, r);
}
function fT(t, e, r) {
  for (let n = t; n; n = n.next) {
    let i = A2(n.node);
    if (i)
      return i(em.create(e, r, n));
  }
  return 0;
}
function w2(t) {
  return t.pos == t.options.simulateBreak && t.options.simulateDoubleBreak;
}
function A2(t) {
  let e = t.type.prop(T2);
  if (e)
    return e;
  let r = t.firstChild, n;
  if (r && (n = r.type.prop(jt.closedBy))) {
    let i = t.lastChild, s = i && n.indexOf(i.name) > -1;
    return (o) => k2(o, !0, 1, void 0, s && !w2(o) ? i.from : void 0);
  }
  return t.parent == null ? R2 : null;
}
function R2() {
  return 0;
}
class em extends Tc {
  constructor(e, r, n) {
    super(e.state, e.options), this.base = e, this.pos = r, this.context = n;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(e, r, n) {
    return new em(e, r, n);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(e) {
    let r = this.state.doc.lineAt(e.from);
    for (; ; ) {
      let n = e.resolve(r.from);
      for (; n.parent && n.parent.from == n.from; )
        n = n.parent;
      if (x2(n, e))
        break;
      r = this.state.doc.lineAt(n.from);
    }
    return this.lineIndent(r.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return fT(this.context.next, this.base, this.pos);
  }
}
function x2(t, e) {
  for (let r = e; r; r = r.parent)
    if (t == r)
      return !0;
  return !1;
}
function N2(t) {
  let e = t.node, r = e.childAfter(e.from), n = e.lastChild;
  if (!r)
    return null;
  let i = t.options.simulateBreak, s = t.state.doc.lineAt(r.from), o = i == null || i <= s.from ? s.to : Math.min(s.to, i);
  for (let a = r.to; ; ) {
    let l = e.childAfter(a);
    if (!l || l == n)
      return null;
    if (!l.type.isSkipped)
      return l.from < o ? r : null;
    a = l.to;
  }
}
function k2(t, e, r, n, i) {
  let s = t.textAfter, o = s.match(/^\s*/)[0].length, a = n && s.slice(o, o + n.length) == n || i == t.pos + o, l = e ? N2(t) : null;
  return l ? a ? t.column(l.from) : t.column(l.to) : t.baseIndent + (a ? 0 : t.unit * r);
}
const I2 = 200;
function O2() {
  return Qt.transactionFilter.of((t) => {
    if (!t.docChanged || !t.isUserEvent("input.type") && !t.isUserEvent("input.complete"))
      return t;
    let e = t.startState.languageDataAt("indentOnInput", t.startState.selection.main.head);
    if (!e.length)
      return t;
    let r = t.newDoc, { head: n } = t.newSelection.main, i = r.lineAt(n);
    if (n > i.from + I2)
      return t;
    let s = r.sliceString(i.from, n);
    if (!e.some((c) => c.test(s)))
      return t;
    let { state: o } = t, a = -1, l = [];
    for (let { head: c } of o.selection.ranges) {
      let f = o.doc.lineAt(c);
      if (f.from == a)
        continue;
      a = f.from;
      let m = Jh(o, f.from);
      if (m == null)
        continue;
      let b = /^\s*/.exec(f.text)[0], C = ha(o, m);
      b != C && l.push({ from: f.from, to: f.from + b.length, insert: C });
    }
    return l.length ? [t, { changes: l, sequential: !0 }] : t;
  });
}
const D2 = /* @__PURE__ */ xt.define(), M2 = /* @__PURE__ */ new jt();
function L2(t, e, r) {
  let n = zr(t);
  if (n.length < r)
    return null;
  let i = n.resolveStack(r, 1), s = null;
  for (let o = i; o; o = o.next) {
    let a = o.node;
    if (a.to <= r || a.from > r)
      continue;
    if (s && a.from < e)
      break;
    let l = a.type.prop(M2);
    if (l && (a.to < n.length - 50 || n.length == t.doc.length || !P2(a))) {
      let c = l(a, t);
      c && c.from <= r && c.from >= e && c.to > r && (s = c);
    }
  }
  return s;
}
function P2(t) {
  let e = t.lastChild;
  return e && e.to == t.to && e.type.isError;
}
function jl(t, e, r) {
  for (let n of t.facet(D2)) {
    let i = n(t, e, r);
    if (i)
      return i;
  }
  return L2(t, e, r);
}
function pT(t, e) {
  let r = e.mapPos(t.from, 1), n = e.mapPos(t.to, -1);
  return r >= n ? void 0 : { from: r, to: n };
}
const Cc = /* @__PURE__ */ Gt.define({ map: pT }), Fa = /* @__PURE__ */ Gt.define({ map: pT });
function _T(t) {
  let e = [];
  for (let { head: r } of t.state.selection.ranges)
    e.some((n) => n.from <= r && n.to >= r) || e.push(t.lineBlockAt(r));
  return e;
}
const bs = /* @__PURE__ */ Mr.define({
  create() {
    return Ot.none;
  },
  update(t, e) {
    t = t.map(e.changes);
    for (let r of e.effects)
      if (r.is(Cc) && !F2(t, r.value.from, r.value.to)) {
        let { preparePlaceholder: n } = e.state.facet(tm), i = n ? Ot.replace({ widget: new Y2(n(e.state, r.value)) }) : JE;
        t = t.update({ add: [i.range(r.value.from, r.value.to)] });
      } else
        r.is(Fa) && (t = t.update({
          filter: (n, i) => r.value.from != n || r.value.to != i,
          filterFrom: r.value.from,
          filterTo: r.value.to
        }));
    if (e.selection) {
      let r = !1, { head: n } = e.selection.main;
      t.between(n, n, (i, s) => {
        i < n && s > n && (r = !0);
      }), r && (t = t.update({
        filterFrom: n,
        filterTo: n,
        filter: (i, s) => s <= n || i >= n
      }));
    }
    return t;
  },
  provide: (t) => Rt.decorations.from(t),
  toJSON(t, e) {
    let r = [];
    return t.between(0, e.doc.length, (n, i) => {
      r.push(n, i);
    }), r;
  },
  fromJSON(t) {
    if (!Array.isArray(t) || t.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let e = [];
    for (let r = 0; r < t.length; ) {
      let n = t[r++], i = t[r++];
      if (typeof n != "number" || typeof i != "number")
        throw new RangeError("Invalid JSON for fold state");
      e.push(JE.range(n, i));
    }
    return Ot.set(e, !0);
  }
});
function Xl(t, e, r) {
  var n;
  let i = null;
  return (n = t.field(bs, !1)) === null || n === void 0 || n.between(e, r, (s, o) => {
    (!i || i.from > s) && (i = { from: s, to: o });
  }), i;
}
function F2(t, e, r) {
  let n = !1;
  return t.between(e, e, (i, s) => {
    i == e && s == r && (n = !0);
  }), n;
}
function hT(t, e) {
  return t.field(bs, !1) ? e : e.concat(Gt.appendConfig.of($T()));
}
const B2 = (t) => {
  for (let e of _T(t)) {
    let r = jl(t.state, e.from, e.to);
    if (r)
      return t.dispatch({ effects: hT(t.state, [Cc.of(r), mT(t, r)]) }), !0;
  }
  return !1;
}, U2 = (t) => {
  if (!t.state.field(bs, !1))
    return !1;
  let e = [];
  for (let r of _T(t)) {
    let n = Xl(t.state, r.from, r.to);
    n && e.push(Fa.of(n), mT(t, n, !1));
  }
  return e.length && t.dispatch({ effects: e }), e.length > 0;
};
function mT(t, e, r = !0) {
  let n = t.state.doc.lineAt(e.from).number, i = t.state.doc.lineAt(e.to).number;
  return Rt.announce.of(`${t.state.phrase(r ? "Folded lines" : "Unfolded lines")} ${n} ${t.state.phrase("to")} ${i}.`);
}
const q2 = (t) => {
  let { state: e } = t, r = [];
  for (let n = 0; n < e.doc.length; ) {
    let i = t.lineBlockAt(n), s = jl(e, i.from, i.to);
    s && r.push(Cc.of(s)), n = (s ? t.lineBlockAt(s.to) : i).to + 1;
  }
  return r.length && t.dispatch({ effects: hT(t.state, r) }), !!r.length;
}, z2 = (t) => {
  let e = t.state.field(bs, !1);
  if (!e || !e.size)
    return !1;
  let r = [];
  return e.between(0, t.state.doc.length, (n, i) => {
    r.push(Fa.of({ from: n, to: i }));
  }), t.dispatch({ effects: r }), !0;
}, gT = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: B2 },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: U2 },
  { key: "Ctrl-Alt-[", run: q2 },
  { key: "Ctrl-Alt-]", run: z2 }
], G2 = {
  placeholderDOM: null,
  preparePlaceholder: null,
  placeholderText: "…"
}, tm = /* @__PURE__ */ xt.define({
  combine(t) {
    return Pn(t, G2);
  }
});
function $T(t) {
  let e = [bs, W2];
  return t && e.push(tm.of(t)), e;
}
function bT(t, e) {
  let { state: r } = t, n = r.facet(tm), i = (o) => {
    let a = t.lineBlockAt(t.posAtDOM(o.target)), l = Xl(t.state, a.from, a.to);
    l && t.dispatch({ effects: Fa.of(l) }), o.preventDefault();
  };
  if (n.placeholderDOM)
    return n.placeholderDOM(t, i, e);
  let s = document.createElement("span");
  return s.textContent = n.placeholderText, s.setAttribute("aria-label", r.phrase("folded code")), s.title = r.phrase("unfold"), s.className = "cm-foldPlaceholder", s.onclick = i, s;
}
const JE = /* @__PURE__ */ Ot.replace({ widget: /* @__PURE__ */ new class extends bi {
  toDOM(t) {
    return bT(t, null);
  }
}() });
class Y2 extends bi {
  constructor(e) {
    super(), this.value = e;
  }
  eq(e) {
    return this.value == e.value;
  }
  toDOM(e) {
    return bT(e, this.value);
  }
}
const H2 = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => !1
};
class Vp extends mi {
  constructor(e, r) {
    super(), this.config = e, this.open = r;
  }
  eq(e) {
    return this.config == e.config && this.open == e.open;
  }
  toDOM(e) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let r = document.createElement("span");
    return r.textContent = this.open ? this.config.openText : this.config.closedText, r.title = e.state.phrase(this.open ? "Fold line" : "Unfold line"), r;
  }
}
function V2(t = {}) {
  let e = Object.assign(Object.assign({}, H2), t), r = new Vp(e, !0), n = new Vp(e, !1), i = mr.fromClass(class {
    constructor(o) {
      this.from = o.viewport.from, this.markers = this.buildMarkers(o);
    }
    update(o) {
      (o.docChanged || o.viewportChanged || o.startState.facet(Qi) != o.state.facet(Qi) || o.startState.field(bs, !1) != o.state.field(bs, !1) || zr(o.startState) != zr(o.state) || e.foldingChanged(o)) && (this.markers = this.buildMarkers(o.view));
    }
    buildMarkers(o) {
      let a = new fi();
      for (let l of o.viewportLineBlocks) {
        let c = Xl(o.state, l.from, l.to) ? n : jl(o.state, l.from, l.to) ? r : null;
        c && a.add(l.from, l.from, c);
      }
      return a.finish();
    }
  }), { domEventHandlers: s } = e;
  return [
    i,
    WD({
      class: "cm-foldGutter",
      markers(o) {
        var a;
        return ((a = o.plugin(i)) === null || a === void 0 ? void 0 : a.markers) || Zt.empty;
      },
      initialSpacer() {
        return new Vp(e, !1);
      },
      domEventHandlers: Object.assign(Object.assign({}, s), { click: (o, a, l) => {
        if (s.click && s.click(o, a, l))
          return !0;
        let c = Xl(o.state, a.from, a.to);
        if (c)
          return o.dispatch({ effects: Fa.of(c) }), !0;
        let f = jl(o.state, a.from, a.to);
        return f ? (o.dispatch({ effects: Cc.of(f) }), !0) : !1;
      } })
    }),
    $T()
  ];
}
const W2 = /* @__PURE__ */ Rt.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
class Ba {
  constructor(e, r) {
    this.specs = e;
    let n;
    function i(a) {
      let l = Hi.newName();
      return (n || (n = /* @__PURE__ */ Object.create(null)))["." + l] = a, l;
    }
    const s = typeof r.all == "string" ? r.all : r.all ? i(r.all) : void 0, o = r.scope;
    this.scope = o instanceof Kn ? (a) => a.prop(Oo) == o.data : o ? (a) => a == o : void 0, this.style = uT(e.map((a) => ({
      tag: a.tag,
      class: a.class || i(Object.assign({}, a, { tag: null }))
    })), {
      all: s
    }).style, this.module = n ? new Hi(n) : null, this.themeType = r.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(e, r) {
    return new Ba(e, r || {});
  }
}
const rh = /* @__PURE__ */ xt.define(), ET = /* @__PURE__ */ xt.define({
  combine(t) {
    return t.length ? [t[0]] : null;
  }
});
function Wp(t) {
  let e = t.facet(rh);
  return e.length ? e : t.facet(ET);
}
function vT(t, e) {
  let r = [Q2], n;
  return t instanceof Ba && (t.module && r.push(Rt.styleModule.of(t.module)), n = t.themeType), e != null && e.fallback ? r.push(ET.of(t)) : n ? r.push(rh.computeN([Rt.darkTheme], (i) => i.facet(Rt.darkTheme) == (n == "dark") ? [t] : [])) : r.push(rh.of(t)), r;
}
class K2 {
  constructor(e) {
    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = zr(e.state), this.decorations = this.buildDeco(e, Wp(e.state));
  }
  update(e) {
    let r = zr(e.state), n = Wp(e.state), i = n != Wp(e.startState);
    r.length < e.view.viewport.to && !i && r.type == this.tree.type ? this.decorations = this.decorations.map(e.changes) : (r != this.tree || e.viewportChanged || i) && (this.tree = r, this.decorations = this.buildDeco(e.view, n));
  }
  buildDeco(e, r) {
    if (!r || !this.tree.length)
      return Ot.none;
    let n = new fi();
    for (let { from: i, to: s } of e.visibleRanges)
      g2(this.tree, r, (o, a, l) => {
        n.add(o, a, this.markCache[l] || (this.markCache[l] = Ot.mark({ class: l })));
      }, i, s);
    return n.finish();
  }
}
const Q2 = /* @__PURE__ */ co.high(/* @__PURE__ */ mr.fromClass(K2, {
  decorations: (t) => t.decorations
})), j2 = /* @__PURE__ */ Ba.define([
  {
    tag: mt.meta,
    color: "#404740"
  },
  {
    tag: mt.link,
    textDecoration: "underline"
  },
  {
    tag: mt.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: mt.emphasis,
    fontStyle: "italic"
  },
  {
    tag: mt.strong,
    fontWeight: "bold"
  },
  {
    tag: mt.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: mt.keyword,
    color: "#708"
  },
  {
    tag: [mt.atom, mt.bool, mt.url, mt.contentSeparator, mt.labelName],
    color: "#219"
  },
  {
    tag: [mt.literal, mt.inserted],
    color: "#164"
  },
  {
    tag: [mt.string, mt.deleted],
    color: "#a11"
  },
  {
    tag: [mt.regexp, mt.escape, /* @__PURE__ */ mt.special(mt.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ mt.definition(mt.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ mt.local(mt.variableName),
    color: "#30a"
  },
  {
    tag: [mt.typeName, mt.namespace],
    color: "#085"
  },
  {
    tag: mt.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ mt.special(mt.variableName), mt.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ mt.definition(mt.propertyName),
    color: "#00c"
  },
  {
    tag: mt.comment,
    color: "#940"
  },
  {
    tag: mt.invalid,
    color: "#f00"
  }
]), X2 = /* @__PURE__ */ Rt.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
}), ST = 1e4, yT = "()[]{}", TT = /* @__PURE__ */ xt.define({
  combine(t) {
    return Pn(t, {
      afterCursor: !0,
      brackets: yT,
      maxScanDistance: ST,
      renderMatch: eM
    });
  }
}), Z2 = /* @__PURE__ */ Ot.mark({ class: "cm-matchingBracket" }), J2 = /* @__PURE__ */ Ot.mark({ class: "cm-nonmatchingBracket" });
function eM(t) {
  let e = [], r = t.matched ? Z2 : J2;
  return e.push(r.range(t.start.from, t.start.to)), t.end && e.push(r.range(t.end.from, t.end.to)), e;
}
const tM = /* @__PURE__ */ Mr.define({
  create() {
    return Ot.none;
  },
  update(t, e) {
    if (!e.docChanged && !e.selection)
      return t;
    let r = [], n = e.state.facet(TT);
    for (let i of e.state.selection.ranges) {
      if (!i.empty)
        continue;
      let s = Qn(e.state, i.head, -1, n) || i.head > 0 && Qn(e.state, i.head - 1, 1, n) || n.afterCursor && (Qn(e.state, i.head, 1, n) || i.head < e.state.doc.length && Qn(e.state, i.head + 1, -1, n));
      s && (r = r.concat(n.renderMatch(s, e.state)));
    }
    return Ot.set(r, !0);
  },
  provide: (t) => Rt.decorations.from(t)
}), rM = [
  tM,
  X2
];
function nM(t = {}) {
  return [TT.of(t), rM];
}
const iM = /* @__PURE__ */ new jt();
function nh(t, e, r) {
  let n = t.prop(e < 0 ? jt.openedBy : jt.closedBy);
  if (n)
    return n;
  if (t.name.length == 1) {
    let i = r.indexOf(t.name);
    if (i > -1 && i % 2 == (e < 0 ? 1 : 0))
      return [r[i + e]];
  }
  return null;
}
function ih(t) {
  let e = t.type.prop(iM);
  return e ? e(t.node) : t;
}
function Qn(t, e, r, n = {}) {
  let i = n.maxScanDistance || ST, s = n.brackets || yT, o = zr(t), a = o.resolveInner(e, r);
  for (let l = a; l; l = l.parent) {
    let c = nh(l.type, r, s);
    if (c && l.from < l.to) {
      let f = ih(l);
      if (f && (r > 0 ? e >= f.from && e < f.to : e > f.from && e <= f.to))
        return sM(t, e, r, l, f, c, s);
    }
  }
  return oM(t, e, r, o, a.type, i, s);
}
function sM(t, e, r, n, i, s, o) {
  let a = n.parent, l = { from: i.from, to: i.to }, c = 0, f = a == null ? void 0 : a.cursor();
  if (f && (r < 0 ? f.childBefore(n.from) : f.childAfter(n.to)))
    do
      if (r < 0 ? f.to <= n.from : f.from >= n.to) {
        if (c == 0 && s.indexOf(f.type.name) > -1 && f.from < f.to) {
          let m = ih(f);
          return { start: l, end: m ? { from: m.from, to: m.to } : void 0, matched: !0 };
        } else if (nh(f.type, r, o))
          c++;
        else if (nh(f.type, -r, o)) {
          if (c == 0) {
            let m = ih(f);
            return {
              start: l,
              end: m && m.from < m.to ? { from: m.from, to: m.to } : void 0,
              matched: !1
            };
          }
          c--;
        }
      }
    while (r < 0 ? f.prevSibling() : f.nextSibling());
  return { start: l, matched: !1 };
}
function oM(t, e, r, n, i, s, o) {
  let a = r < 0 ? t.sliceDoc(e - 1, e) : t.sliceDoc(e, e + 1), l = o.indexOf(a);
  if (l < 0 || l % 2 == 0 != r > 0)
    return null;
  let c = { from: r < 0 ? e - 1 : e, to: r > 0 ? e + 1 : e }, f = t.doc.iterRange(e, r > 0 ? t.doc.length : 0), m = 0;
  for (let b = 0; !f.next().done && b <= s; ) {
    let C = f.value;
    r < 0 && (b += C.length);
    let N = e + b * r;
    for (let z = r > 0 ? 0 : C.length - 1, A = r > 0 ? C.length : -1; z != A; z += r) {
      let Q = o.indexOf(C[z]);
      if (!(Q < 0 || n.resolveInner(N + z, 1).type != i))
        if (Q % 2 == 0 == r > 0)
          m++;
        else {
          if (m == 1)
            return { start: c, end: { from: N + z, to: N + z + 1 }, matched: Q >> 1 == l >> 1 };
          m--;
        }
    }
    r > 0 && (b += C.length);
  }
  return f.done ? { start: c, matched: !1 } : null;
}
const aM = /* @__PURE__ */ Object.create(null), ev = [Rn.none], tv = [], rv = /* @__PURE__ */ Object.create(null), lM = /* @__PURE__ */ Object.create(null);
for (let [t, e] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  lM[t] = /* @__PURE__ */ cM(aM, e);
function Kp(t, e) {
  tv.indexOf(t) > -1 || (tv.push(t), console.warn(e));
}
function cM(t, e) {
  let r = [];
  for (let a of e.split(" ")) {
    let l = [];
    for (let c of a.split(".")) {
      let f = t[c] || mt[c];
      f ? typeof f == "function" ? l.length ? l = l.map(f) : Kp(c, `Modifier ${c} used at start of tag`) : l.length ? Kp(c, `Tag ${c} used as modifier`) : l = Array.isArray(f) ? f : [f] : Kp(c, `Unknown highlighting tag ${c}`);
    }
    for (let c of l)
      r.push(c);
  }
  if (!r.length)
    return 0;
  let n = e.replace(/ /g, "_"), i = n + " " + r.map((a) => a.id), s = rv[i];
  if (s)
    return s.id;
  let o = rv[i] = Rn.define({
    id: ev.length,
    name: n,
    props: [h2({ [n]: r })]
  });
  return ev.push(o), o.id;
}
lr.RTL, lr.LTR;
const CT = (t) => {
  let { state: e } = t, r = e.doc.lineAt(e.selection.main.from), n = nm(t.state, r.from);
  return n.line ? uM(t) : n.block ? dM(t) : !1;
};
function rm(t, e) {
  return ({ state: r, dispatch: n }) => {
    if (r.readOnly)
      return !1;
    let i = t(e, r);
    return i ? (n(r.update(i)), !0) : !1;
  };
}
const uM = /* @__PURE__ */ rm(
  _M,
  0
  /* CommentOption.Toggle */
), wT = /* @__PURE__ */ rm(
  AT,
  0
  /* CommentOption.Toggle */
), dM = /* @__PURE__ */ rm(
  (t, e) => AT(t, e, pM(e)),
  0
  /* CommentOption.Toggle */
);
function nm(t, e) {
  let r = t.languageDataAt("commentTokens", e);
  return r.length ? r[0] : {};
}
const wo = 50;
function fM(t, { open: e, close: r }, n, i) {
  let s = t.sliceDoc(n - wo, n), o = t.sliceDoc(i, i + wo), a = /\s*$/.exec(s)[0].length, l = /^\s*/.exec(o)[0].length, c = s.length - a;
  if (s.slice(c - e.length, c) == e && o.slice(l, l + r.length) == r)
    return {
      open: { pos: n - a, margin: a && 1 },
      close: { pos: i + l, margin: l && 1 }
    };
  let f, m;
  i - n <= 2 * wo ? f = m = t.sliceDoc(n, i) : (f = t.sliceDoc(n, n + wo), m = t.sliceDoc(i - wo, i));
  let b = /^\s*/.exec(f)[0].length, C = /\s*$/.exec(m)[0].length, N = m.length - C - r.length;
  return f.slice(b, b + e.length) == e && m.slice(N, N + r.length) == r ? {
    open: {
      pos: n + b + e.length,
      margin: /\s/.test(f.charAt(b + e.length)) ? 1 : 0
    },
    close: {
      pos: i - C - r.length,
      margin: /\s/.test(m.charAt(N - 1)) ? 1 : 0
    }
  } : null;
}
function pM(t) {
  let e = [];
  for (let r of t.selection.ranges) {
    let n = t.doc.lineAt(r.from), i = r.to <= n.to ? n : t.doc.lineAt(r.to), s = e.length - 1;
    s >= 0 && e[s].to > n.from ? e[s].to = i.to : e.push({ from: n.from + /^\s*/.exec(n.text)[0].length, to: i.to });
  }
  return e;
}
function AT(t, e, r = e.selection.ranges) {
  let n = r.map((s) => nm(e, s.from).block);
  if (!n.every((s) => s))
    return null;
  let i = r.map((s, o) => fM(e, n[o], s.from, s.to));
  if (t != 2 && !i.every((s) => s))
    return { changes: e.changes(r.map((s, o) => i[o] ? [] : [{ from: s.from, insert: n[o].open + " " }, { from: s.to, insert: " " + n[o].close }])) };
  if (t != 1 && i.some((s) => s)) {
    let s = [];
    for (let o = 0, a; o < i.length; o++)
      if (a = i[o]) {
        let l = n[o], { open: c, close: f } = a;
        s.push({ from: c.pos - l.open.length, to: c.pos + c.margin }, { from: f.pos - f.margin, to: f.pos + l.close.length });
      }
    return { changes: s };
  }
  return null;
}
function _M(t, e, r = e.selection.ranges) {
  let n = [], i = -1;
  for (let { from: s, to: o } of r) {
    let a = n.length, l = 1e9, c = nm(e, s).line;
    if (c) {
      for (let f = s; f <= o; ) {
        let m = e.doc.lineAt(f);
        if (m.from > i && (s == o || o > m.from)) {
          i = m.from;
          let b = /^\s*/.exec(m.text)[0].length, C = b == m.length, N = m.text.slice(b, b + c.length) == c ? b : -1;
          b < m.text.length && b < l && (l = b), n.push({ line: m, comment: N, token: c, indent: b, empty: C, single: !1 });
        }
        f = m.to + 1;
      }
      if (l < 1e9)
        for (let f = a; f < n.length; f++)
          n[f].indent < n[f].line.text.length && (n[f].indent = l);
      n.length == a + 1 && (n[a].single = !0);
    }
  }
  if (t != 2 && n.some((s) => s.comment < 0 && (!s.empty || s.single))) {
    let s = [];
    for (let { line: a, token: l, indent: c, empty: f, single: m } of n)
      (m || !f) && s.push({ from: a.from + c, insert: l + " " });
    let o = e.changes(s);
    return { changes: o, selection: e.selection.map(o, 1) };
  } else if (t != 1 && n.some((s) => s.comment >= 0)) {
    let s = [];
    for (let { line: o, comment: a, token: l } of n)
      if (a >= 0) {
        let c = o.from + a, f = c + l.length;
        o.text[f - o.from] == " " && f++, s.push({ from: c, to: f });
      }
    return { changes: s };
  }
  return null;
}
const sh = /* @__PURE__ */ $i.define(), hM = /* @__PURE__ */ $i.define(), mM = /* @__PURE__ */ xt.define(), RT = /* @__PURE__ */ xt.define({
  combine(t) {
    return Pn(t, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (e, r) => r
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (e, r) => (n, i) => e(n, i) || r(n, i)
    });
  }
}), xT = /* @__PURE__ */ Mr.define({
  create() {
    return jn.empty;
  },
  update(t, e) {
    let r = e.state.facet(RT), n = e.annotation(sh);
    if (n) {
      let l = nn.fromTransaction(e, n.selection), c = n.side, f = c == 0 ? t.undone : t.done;
      return l ? f = Jl(f, f.length, r.minDepth, l) : f = kT(f, e.startState.selection), new jn(c == 0 ? n.rest : f, c == 0 ? f : n.rest);
    }
    let i = e.annotation(hM);
    if ((i == "full" || i == "before") && (t = t.isolate()), e.annotation(Sr.addToHistory) === !1)
      return e.changes.empty ? t : t.addMapping(e.changes.desc);
    let s = nn.fromTransaction(e), o = e.annotation(Sr.time), a = e.annotation(Sr.userEvent);
    return s ? t = t.addChanges(s, o, a, r, e) : e.selection && (t = t.addSelection(e.startState.selection, o, a, r.newGroupDelay)), (i == "full" || i == "after") && (t = t.isolate()), t;
  },
  toJSON(t) {
    return { done: t.done.map((e) => e.toJSON()), undone: t.undone.map((e) => e.toJSON()) };
  },
  fromJSON(t) {
    return new jn(t.done.map(nn.fromJSON), t.undone.map(nn.fromJSON));
  }
});
function gM(t = {}) {
  return [
    xT,
    RT.of(t),
    Rt.domEventHandlers({
      beforeinput(e, r) {
        let n = e.inputType == "historyUndo" ? im : e.inputType == "historyRedo" ? Zl : null;
        return n ? (e.preventDefault(), n(r)) : !1;
      }
    })
  ];
}
function wc(t, e) {
  return function({ state: r, dispatch: n }) {
    if (!e && r.readOnly)
      return !1;
    let i = r.field(xT, !1);
    if (!i)
      return !1;
    let s = i.pop(t, r, e);
    return s ? (n(s), !0) : !1;
  };
}
const im = /* @__PURE__ */ wc(0, !1), Zl = /* @__PURE__ */ wc(1, !1), $M = /* @__PURE__ */ wc(0, !0), bM = /* @__PURE__ */ wc(1, !0);
class nn {
  constructor(e, r, n, i, s) {
    this.changes = e, this.effects = r, this.mapped = n, this.startSelection = i, this.selectionsAfter = s;
  }
  setSelAfter(e) {
    return new nn(this.changes, this.effects, this.mapped, this.startSelection, e);
  }
  toJSON() {
    var e, r, n;
    return {
      changes: (e = this.changes) === null || e === void 0 ? void 0 : e.toJSON(),
      mapped: (r = this.mapped) === null || r === void 0 ? void 0 : r.toJSON(),
      startSelection: (n = this.startSelection) === null || n === void 0 ? void 0 : n.toJSON(),
      selectionsAfter: this.selectionsAfter.map((i) => i.toJSON())
    };
  }
  static fromJSON(e) {
    return new nn(e.changes && vr.fromJSON(e.changes), [], e.mapped && Jn.fromJSON(e.mapped), e.startSelection && $t.fromJSON(e.startSelection), e.selectionsAfter.map($t.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(e, r) {
    let n = yn;
    for (let i of e.startState.facet(mM)) {
      let s = i(e);
      s.length && (n = n.concat(s));
    }
    return !n.length && e.changes.empty ? null : new nn(e.changes.invert(e.startState.doc), n, void 0, r || e.startState.selection, yn);
  }
  static selection(e) {
    return new nn(void 0, yn, void 0, void 0, e);
  }
}
function Jl(t, e, r, n) {
  let i = e + 1 > r + 20 ? e - r - 1 : 0, s = t.slice(i, e);
  return s.push(n), s;
}
function EM(t, e) {
  let r = [], n = !1;
  return t.iterChangedRanges((i, s) => r.push(i, s)), e.iterChangedRanges((i, s, o, a) => {
    for (let l = 0; l < r.length; ) {
      let c = r[l++], f = r[l++];
      a >= c && o <= f && (n = !0);
    }
  }), n;
}
function vM(t, e) {
  return t.ranges.length == e.ranges.length && t.ranges.filter((r, n) => r.empty != e.ranges[n].empty).length === 0;
}
function NT(t, e) {
  return t.length ? e.length ? t.concat(e) : t : e;
}
const yn = [], SM = 200;
function kT(t, e) {
  if (t.length) {
    let r = t[t.length - 1], n = r.selectionsAfter.slice(Math.max(0, r.selectionsAfter.length - SM));
    return n.length && n[n.length - 1].eq(e) ? t : (n.push(e), Jl(t, t.length - 1, 1e9, r.setSelAfter(n)));
  } else
    return [nn.selection([e])];
}
function yM(t) {
  let e = t[t.length - 1], r = t.slice();
  return r[t.length - 1] = e.setSelAfter(e.selectionsAfter.slice(0, e.selectionsAfter.length - 1)), r;
}
function Qp(t, e) {
  if (!t.length)
    return t;
  let r = t.length, n = yn;
  for (; r; ) {
    let i = TM(t[r - 1], e, n);
    if (i.changes && !i.changes.empty || i.effects.length) {
      let s = t.slice(0, r);
      return s[r - 1] = i, s;
    } else
      e = i.mapped, r--, n = i.selectionsAfter;
  }
  return n.length ? [nn.selection(n)] : yn;
}
function TM(t, e, r) {
  let n = NT(t.selectionsAfter.length ? t.selectionsAfter.map((a) => a.map(e)) : yn, r);
  if (!t.changes)
    return nn.selection(n);
  let i = t.changes.map(e), s = e.mapDesc(t.changes, !0), o = t.mapped ? t.mapped.composeDesc(s) : s;
  return new nn(i, Gt.mapEffects(t.effects, e), o, t.startSelection.map(s), n);
}
const CM = /^(input\.type|delete)($|\.)/;
class jn {
  constructor(e, r, n = 0, i = void 0) {
    this.done = e, this.undone = r, this.prevTime = n, this.prevUserEvent = i;
  }
  isolate() {
    return this.prevTime ? new jn(this.done, this.undone) : this;
  }
  addChanges(e, r, n, i, s) {
    let o = this.done, a = o[o.length - 1];
    return a && a.changes && !a.changes.empty && e.changes && (!n || CM.test(n)) && (!a.selectionsAfter.length && r - this.prevTime < i.newGroupDelay && i.joinToEvent(s, EM(a.changes, e.changes)) || // For compose (but not compose.start) events, always join with previous event
    n == "input.type.compose") ? o = Jl(o, o.length - 1, i.minDepth, new nn(e.changes.compose(a.changes), NT(e.effects, a.effects), a.mapped, a.startSelection, yn)) : o = Jl(o, o.length, i.minDepth, e), new jn(o, yn, r, n);
  }
  addSelection(e, r, n, i) {
    let s = this.done.length ? this.done[this.done.length - 1].selectionsAfter : yn;
    return s.length > 0 && r - this.prevTime < i && n == this.prevUserEvent && n && /^select($|\.)/.test(n) && vM(s[s.length - 1], e) ? this : new jn(kT(this.done, e), this.undone, r, n);
  }
  addMapping(e) {
    return new jn(Qp(this.done, e), Qp(this.undone, e), this.prevTime, this.prevUserEvent);
  }
  pop(e, r, n) {
    let i = e == 0 ? this.done : this.undone;
    if (i.length == 0)
      return null;
    let s = i[i.length - 1], o = s.selectionsAfter[0] || r.selection;
    if (n && s.selectionsAfter.length)
      return r.update({
        selection: s.selectionsAfter[s.selectionsAfter.length - 1],
        annotations: sh.of({ side: e, rest: yM(i), selection: o }),
        userEvent: e == 0 ? "select.undo" : "select.redo",
        scrollIntoView: !0
      });
    if (s.changes) {
      let a = i.length == 1 ? yn : i.slice(0, i.length - 1);
      return s.mapped && (a = Qp(a, s.mapped)), r.update({
        changes: s.changes,
        selection: s.startSelection,
        effects: s.effects,
        annotations: sh.of({ side: e, rest: a, selection: o }),
        filter: !1,
        userEvent: e == 0 ? "undo" : "redo",
        scrollIntoView: !0
      });
    } else
      return null;
  }
}
jn.empty = /* @__PURE__ */ new jn(yn, yn);
const IT = [
  { key: "Mod-z", run: im, preventDefault: !0 },
  { key: "Mod-y", mac: "Mod-Shift-z", run: Zl, preventDefault: !0 },
  { linux: "Ctrl-Shift-z", run: Zl, preventDefault: !0 },
  { key: "Mod-u", run: $M, preventDefault: !0 },
  { key: "Alt-u", mac: "Mod-Shift-u", run: bM, preventDefault: !0 }
];
function fo(t, e) {
  return $t.create(t.ranges.map(e), t.mainIndex);
}
function oi(t, e) {
  return t.update({ selection: e, scrollIntoView: !0, userEvent: "select" });
}
function Fn({ state: t, dispatch: e }, r) {
  let n = fo(t.selection, r);
  return n.eq(t.selection, !0) ? !1 : (e(oi(t, n)), !0);
}
function Ac(t, e) {
  return $t.cursor(e ? t.to : t.from);
}
function OT(t, e) {
  return Fn(t, (r) => r.empty ? t.moveByChar(r, e) : Ac(r, e));
}
function Yr(t) {
  return t.textDirectionAt(t.state.selection.main.head) == lr.LTR;
}
const DT = (t) => OT(t, !Yr(t)), MT = (t) => OT(t, Yr(t));
function LT(t, e) {
  return Fn(t, (r) => r.empty ? t.moveByGroup(r, e) : Ac(r, e));
}
const wM = (t) => LT(t, !Yr(t)), AM = (t) => LT(t, Yr(t));
function RM(t, e, r) {
  if (e.type.prop(r))
    return !0;
  let n = e.to - e.from;
  return n && (n > 2 || /[^\s,.;:]/.test(t.sliceDoc(e.from, e.to))) || e.firstChild;
}
function Rc(t, e, r) {
  let n = zr(t).resolveInner(e.head), i = r ? jt.closedBy : jt.openedBy;
  for (let l = e.head; ; ) {
    let c = r ? n.childAfter(l) : n.childBefore(l);
    if (!c)
      break;
    RM(t, c, i) ? n = c : l = r ? c.to : c.from;
  }
  let s = n.type.prop(i), o, a;
  return s && (o = r ? Qn(t, n.from, 1) : Qn(t, n.to, -1)) && o.matched ? a = r ? o.end.to : o.end.from : a = r ? n.to : n.from, $t.cursor(a, r ? -1 : 1);
}
const xM = (t) => Fn(t, (e) => Rc(t.state, e, !Yr(t))), NM = (t) => Fn(t, (e) => Rc(t.state, e, Yr(t)));
function PT(t, e) {
  return Fn(t, (r) => {
    if (!r.empty)
      return Ac(r, e);
    let n = t.moveVertically(r, e);
    return n.head != r.head ? n : t.moveToLineBoundary(r, e);
  });
}
const FT = (t) => PT(t, !1), BT = (t) => PT(t, !0);
function UT(t) {
  let e = t.scrollDOM.clientHeight < t.scrollDOM.scrollHeight - 2, r = 0, n = 0, i;
  if (e) {
    for (let s of t.state.facet(Rt.scrollMargins)) {
      let o = s(t);
      o != null && o.top && (r = Math.max(o == null ? void 0 : o.top, r)), o != null && o.bottom && (n = Math.max(o == null ? void 0 : o.bottom, n));
    }
    i = t.scrollDOM.clientHeight - r - n;
  } else
    i = (t.dom.ownerDocument.defaultView || window).innerHeight;
  return {
    marginTop: r,
    marginBottom: n,
    selfScroll: e,
    height: Math.max(t.defaultLineHeight, i - 5)
  };
}
function qT(t, e) {
  let r = UT(t), { state: n } = t, i = fo(n.selection, (o) => o.empty ? t.moveVertically(o, e, r.height) : Ac(o, e));
  if (i.eq(n.selection))
    return !1;
  let s;
  if (r.selfScroll) {
    let o = t.coordsAtPos(n.selection.main.head), a = t.scrollDOM.getBoundingClientRect(), l = a.top + r.marginTop, c = a.bottom - r.marginBottom;
    o && o.top > l && o.bottom < c && (s = Rt.scrollIntoView(i.main.head, { y: "start", yMargin: o.top - l }));
  }
  return t.dispatch(oi(n, i), { effects: s }), !0;
}
const nv = (t) => qT(t, !1), oh = (t) => qT(t, !0);
function Ji(t, e, r) {
  let n = t.lineBlockAt(e.head), i = t.moveToLineBoundary(e, r);
  if (i.head == e.head && i.head != (r ? n.to : n.from) && (i = t.moveToLineBoundary(e, r, !1)), !r && i.head == n.from && n.length) {
    let s = /^\s*/.exec(t.state.sliceDoc(n.from, Math.min(n.from + 100, n.to)))[0].length;
    s && e.head != n.from + s && (i = $t.cursor(n.from + s));
  }
  return i;
}
const kM = (t) => Fn(t, (e) => Ji(t, e, !0)), IM = (t) => Fn(t, (e) => Ji(t, e, !1)), OM = (t) => Fn(t, (e) => Ji(t, e, !Yr(t))), DM = (t) => Fn(t, (e) => Ji(t, e, Yr(t))), MM = (t) => Fn(t, (e) => $t.cursor(t.lineBlockAt(e.head).from, 1)), LM = (t) => Fn(t, (e) => $t.cursor(t.lineBlockAt(e.head).to, -1));
function PM(t, e, r) {
  let n = !1, i = fo(t.selection, (s) => {
    let o = Qn(t, s.head, -1) || Qn(t, s.head, 1) || s.head > 0 && Qn(t, s.head - 1, 1) || s.head < t.doc.length && Qn(t, s.head + 1, -1);
    if (!o || !o.end)
      return s;
    n = !0;
    let a = o.start.from == s.head ? o.end.to : o.end.from;
    return r ? $t.range(s.anchor, a) : $t.cursor(a);
  });
  return n ? (e(oi(t, i)), !0) : !1;
}
const FM = ({ state: t, dispatch: e }) => PM(t, e, !1);
function In(t, e) {
  let r = fo(t.state.selection, (n) => {
    let i = e(n);
    return $t.range(n.anchor, i.head, i.goalColumn, i.bidiLevel || void 0);
  });
  return r.eq(t.state.selection) ? !1 : (t.dispatch(oi(t.state, r)), !0);
}
function zT(t, e) {
  return In(t, (r) => t.moveByChar(r, e));
}
const GT = (t) => zT(t, !Yr(t)), YT = (t) => zT(t, Yr(t));
function HT(t, e) {
  return In(t, (r) => t.moveByGroup(r, e));
}
const BM = (t) => HT(t, !Yr(t)), UM = (t) => HT(t, Yr(t)), qM = (t) => In(t, (e) => Rc(t.state, e, !Yr(t))), zM = (t) => In(t, (e) => Rc(t.state, e, Yr(t)));
function VT(t, e) {
  return In(t, (r) => t.moveVertically(r, e));
}
const WT = (t) => VT(t, !1), KT = (t) => VT(t, !0);
function QT(t, e) {
  return In(t, (r) => t.moveVertically(r, e, UT(t).height));
}
const iv = (t) => QT(t, !1), sv = (t) => QT(t, !0), GM = (t) => In(t, (e) => Ji(t, e, !0)), YM = (t) => In(t, (e) => Ji(t, e, !1)), HM = (t) => In(t, (e) => Ji(t, e, !Yr(t))), VM = (t) => In(t, (e) => Ji(t, e, Yr(t))), WM = (t) => In(t, (e) => $t.cursor(t.lineBlockAt(e.head).from)), KM = (t) => In(t, (e) => $t.cursor(t.lineBlockAt(e.head).to)), ov = ({ state: t, dispatch: e }) => (e(oi(t, { anchor: 0 })), !0), av = ({ state: t, dispatch: e }) => (e(oi(t, { anchor: t.doc.length })), !0), lv = ({ state: t, dispatch: e }) => (e(oi(t, { anchor: t.selection.main.anchor, head: 0 })), !0), cv = ({ state: t, dispatch: e }) => (e(oi(t, { anchor: t.selection.main.anchor, head: t.doc.length })), !0), QM = ({ state: t, dispatch: e }) => (e(t.update({ selection: { anchor: 0, head: t.doc.length }, userEvent: "select" })), !0), jM = ({ state: t, dispatch: e }) => {
  let r = xc(t).map(({ from: n, to: i }) => $t.range(n, Math.min(i + 1, t.doc.length)));
  return e(t.update({ selection: $t.create(r), userEvent: "select" })), !0;
}, XM = ({ state: t, dispatch: e }) => {
  let r = fo(t.selection, (n) => {
    var i;
    let s = zr(t).resolveStack(n.from, 1);
    for (let o = s; o; o = o.next) {
      let { node: a } = o;
      if ((a.from < n.from && a.to >= n.to || a.to > n.to && a.from <= n.from) && (!((i = a.parent) === null || i === void 0) && i.parent))
        return $t.range(a.to, a.from);
    }
    return n;
  });
  return e(oi(t, r)), !0;
}, ZM = ({ state: t, dispatch: e }) => {
  let r = t.selection, n = null;
  return r.ranges.length > 1 ? n = $t.create([r.main]) : r.main.empty || (n = $t.create([$t.cursor(r.main.head)])), n ? (e(oi(t, n)), !0) : !1;
};
function Ua(t, e) {
  if (t.state.readOnly)
    return !1;
  let r = "delete.selection", { state: n } = t, i = n.changeByRange((s) => {
    let { from: o, to: a } = s;
    if (o == a) {
      let l = e(s);
      l < o ? (r = "delete.backward", l = pl(t, l, !1)) : l > o && (r = "delete.forward", l = pl(t, l, !0)), o = Math.min(o, l), a = Math.max(a, l);
    } else
      o = pl(t, o, !1), a = pl(t, a, !0);
    return o == a ? { range: s } : { changes: { from: o, to: a }, range: $t.cursor(o, o < s.head ? -1 : 1) };
  });
  return i.changes.empty ? !1 : (t.dispatch(n.update(i, {
    scrollIntoView: !0,
    userEvent: r,
    effects: r == "delete.selection" ? Rt.announce.of(n.phrase("Selection deleted")) : void 0
  })), !0);
}
function pl(t, e, r) {
  if (t instanceof Rt)
    for (let n of t.state.facet(Rt.atomicRanges).map((i) => i(t)))
      n.between(e, e, (i, s) => {
        i < e && s > e && (e = r ? s : i);
      });
  return e;
}
const jT = (t, e) => Ua(t, (r) => {
  let n = r.from, { state: i } = t, s = i.doc.lineAt(n), o, a;
  if (!e && n > s.from && n < s.from + 200 && !/[^ \t]/.test(o = s.text.slice(0, n - s.from))) {
    if (o[o.length - 1] == "	")
      return n - 1;
    let l = uo(o, i.tabSize), c = l % to(i) || to(i);
    for (let f = 0; f < c && o[o.length - 1 - f] == " "; f++)
      n--;
    a = n;
  } else
    a = Or(s.text, n - s.from, e, e) + s.from, a == n && s.number != (e ? i.doc.lines : 1) ? a += e ? 1 : -1 : !e && /[\ufe00-\ufe0f]/.test(s.text.slice(a - s.from, n - s.from)) && (a = Or(s.text, a - s.from, !1, !1) + s.from);
  return a;
}), ah = (t) => jT(t, !1), XT = (t) => jT(t, !0), ZT = (t, e) => Ua(t, (r) => {
  let n = r.head, { state: i } = t, s = i.doc.lineAt(n), o = i.charCategorizer(n);
  for (let a = null; ; ) {
    if (n == (e ? s.to : s.from)) {
      n == r.head && s.number != (e ? i.doc.lines : 1) && (n += e ? 1 : -1);
      break;
    }
    let l = Or(s.text, n - s.from, e) + s.from, c = s.text.slice(Math.min(n, l) - s.from, Math.max(n, l) - s.from), f = o(c);
    if (a != null && f != a)
      break;
    (c != " " || n != r.head) && (a = f), n = l;
  }
  return n;
}), JT = (t) => ZT(t, !1), JM = (t) => ZT(t, !0), eL = (t) => Ua(t, (e) => {
  let r = t.lineBlockAt(e.head).to;
  return e.head < r ? r : Math.min(t.state.doc.length, e.head + 1);
}), tL = (t) => Ua(t, (e) => {
  let r = t.moveToLineBoundary(e, !1).head;
  return e.head > r ? r : Math.max(0, e.head - 1);
}), rL = (t) => Ua(t, (e) => {
  let r = t.moveToLineBoundary(e, !0).head;
  return e.head < r ? r : Math.min(t.state.doc.length, e.head + 1);
}), nL = ({ state: t, dispatch: e }) => {
  if (t.readOnly)
    return !1;
  let r = t.changeByRange((n) => ({
    changes: { from: n.from, to: n.to, insert: Jt.of(["", ""]) },
    range: $t.cursor(n.from)
  }));
  return e(t.update(r, { scrollIntoView: !0, userEvent: "input" })), !0;
}, iL = ({ state: t, dispatch: e }) => {
  if (t.readOnly)
    return !1;
  let r = t.changeByRange((n) => {
    if (!n.empty || n.from == 0 || n.from == t.doc.length)
      return { range: n };
    let i = n.from, s = t.doc.lineAt(i), o = i == s.from ? i - 1 : Or(s.text, i - s.from, !1) + s.from, a = i == s.to ? i + 1 : Or(s.text, i - s.from, !0) + s.from;
    return {
      changes: { from: o, to: a, insert: t.doc.slice(i, a).append(t.doc.slice(o, i)) },
      range: $t.cursor(a)
    };
  });
  return r.changes.empty ? !1 : (e(t.update(r, { scrollIntoView: !0, userEvent: "move.character" })), !0);
};
function xc(t) {
  let e = [], r = -1;
  for (let n of t.selection.ranges) {
    let i = t.doc.lineAt(n.from), s = t.doc.lineAt(n.to);
    if (!n.empty && n.to == s.from && (s = t.doc.lineAt(n.to - 1)), r >= i.number) {
      let o = e[e.length - 1];
      o.to = s.to, o.ranges.push(n);
    } else
      e.push({ from: i.from, to: s.to, ranges: [n] });
    r = s.number + 1;
  }
  return e;
}
function e1(t, e, r) {
  if (t.readOnly)
    return !1;
  let n = [], i = [];
  for (let s of xc(t)) {
    if (r ? s.to == t.doc.length : s.from == 0)
      continue;
    let o = t.doc.lineAt(r ? s.to + 1 : s.from - 1), a = o.length + 1;
    if (r) {
      n.push({ from: s.to, to: o.to }, { from: s.from, insert: o.text + t.lineBreak });
      for (let l of s.ranges)
        i.push($t.range(Math.min(t.doc.length, l.anchor + a), Math.min(t.doc.length, l.head + a)));
    } else {
      n.push({ from: o.from, to: s.from }, { from: s.to, insert: t.lineBreak + o.text });
      for (let l of s.ranges)
        i.push($t.range(l.anchor - a, l.head - a));
    }
  }
  return n.length ? (e(t.update({
    changes: n,
    scrollIntoView: !0,
    selection: $t.create(i, t.selection.mainIndex),
    userEvent: "move.line"
  })), !0) : !1;
}
const sL = ({ state: t, dispatch: e }) => e1(t, e, !1), oL = ({ state: t, dispatch: e }) => e1(t, e, !0);
function t1(t, e, r) {
  if (t.readOnly)
    return !1;
  let n = [];
  for (let i of xc(t))
    r ? n.push({ from: i.from, insert: t.doc.slice(i.from, i.to) + t.lineBreak }) : n.push({ from: i.to, insert: t.lineBreak + t.doc.slice(i.from, i.to) });
  return e(t.update({ changes: n, scrollIntoView: !0, userEvent: "input.copyline" })), !0;
}
const aL = ({ state: t, dispatch: e }) => t1(t, e, !1), lL = ({ state: t, dispatch: e }) => t1(t, e, !0), cL = (t) => {
  if (t.state.readOnly)
    return !1;
  let { state: e } = t, r = e.changes(xc(e).map(({ from: i, to: s }) => (i > 0 ? i-- : s < e.doc.length && s++, { from: i, to: s }))), n = fo(e.selection, (i) => t.moveVertically(i, !0)).map(r);
  return t.dispatch({ changes: r, selection: n, scrollIntoView: !0, userEvent: "delete.line" }), !0;
};
function uL(t, e) {
  if (/\(\)|\[\]|\{\}/.test(t.sliceDoc(e - 1, e + 1)))
    return { from: e, to: e };
  let r = zr(t).resolveInner(e), n = r.childBefore(e), i = r.childAfter(e), s;
  return n && i && n.to <= e && i.from >= e && (s = n.type.prop(jt.closedBy)) && s.indexOf(i.name) > -1 && t.doc.lineAt(n.to).from == t.doc.lineAt(i.from).from && !/\S/.test(t.sliceDoc(n.to, i.from)) ? { from: n.to, to: i.from } : null;
}
const dL = /* @__PURE__ */ r1(!1), fL = /* @__PURE__ */ r1(!0);
function r1(t) {
  return ({ state: e, dispatch: r }) => {
    if (e.readOnly)
      return !1;
    let n = e.changeByRange((i) => {
      let { from: s, to: o } = i, a = e.doc.lineAt(s), l = !t && s == o && uL(e, s);
      t && (s = o = (o <= a.to ? a : e.doc.lineAt(o)).to);
      let c = new Tc(e, { simulateBreak: s, simulateDoubleBreak: !!l }), f = Jh(c, s);
      for (f == null && (f = uo(/^\s*/.exec(e.doc.lineAt(s).text)[0], e.tabSize)); o < a.to && /\s/.test(a.text[o - a.from]); )
        o++;
      l ? { from: s, to: o } = l : s > a.from && s < a.from + 100 && !/\S/.test(a.text.slice(0, s)) && (s = a.from);
      let m = ["", ha(e, f)];
      return l && m.push(ha(e, c.lineIndent(a.from, -1))), {
        changes: { from: s, to: o, insert: Jt.of(m) },
        range: $t.cursor(s + 1 + m[1].length)
      };
    });
    return r(e.update(n, { scrollIntoView: !0, userEvent: "input" })), !0;
  };
}
function sm(t, e) {
  let r = -1;
  return t.changeByRange((n) => {
    let i = [];
    for (let o = n.from; o <= n.to; ) {
      let a = t.doc.lineAt(o);
      a.number > r && (n.empty || n.to > a.from) && (e(a, i, n), r = a.number), o = a.to + 1;
    }
    let s = t.changes(i);
    return {
      changes: i,
      range: $t.range(s.mapPos(n.anchor, 1), s.mapPos(n.head, 1))
    };
  });
}
const pL = ({ state: t, dispatch: e }) => {
  if (t.readOnly)
    return !1;
  let r = /* @__PURE__ */ Object.create(null), n = new Tc(t, { overrideIndentation: (s) => {
    let o = r[s];
    return o ?? -1;
  } }), i = sm(t, (s, o, a) => {
    let l = Jh(n, s.from);
    if (l == null)
      return;
    /\S/.test(s.text) || (l = 0);
    let c = /^\s*/.exec(s.text)[0], f = ha(t, l);
    (c != f || a.from < s.from + c.length) && (r[s.from] = l, o.push({ from: s.from, to: s.from + c.length, insert: f }));
  });
  return i.changes.empty || e(t.update(i, { userEvent: "indent" })), !0;
}, om = ({ state: t, dispatch: e }) => t.readOnly ? !1 : (e(t.update(sm(t, (r, n) => {
  n.push({ from: r.from, insert: t.facet(_a) });
}), { userEvent: "input.indent" })), !0), am = ({ state: t, dispatch: e }) => t.readOnly ? !1 : (e(t.update(sm(t, (r, n) => {
  let i = /^\s*/.exec(r.text)[0];
  if (!i)
    return;
  let s = uo(i, t.tabSize), o = 0, a = ha(t, Math.max(0, s - to(t)));
  for (; o < i.length && o < a.length && i.charCodeAt(o) == a.charCodeAt(o); )
    o++;
  n.push({ from: r.from + o, to: r.from + i.length, insert: a.slice(o) });
}), { userEvent: "delete.dedent" })), !0), _L = [
  { key: "Ctrl-b", run: DT, shift: GT, preventDefault: !0 },
  { key: "Ctrl-f", run: MT, shift: YT },
  { key: "Ctrl-p", run: FT, shift: WT },
  { key: "Ctrl-n", run: BT, shift: KT },
  { key: "Ctrl-a", run: MM, shift: WM },
  { key: "Ctrl-e", run: LM, shift: KM },
  { key: "Ctrl-d", run: XT },
  { key: "Ctrl-h", run: ah },
  { key: "Ctrl-k", run: eL },
  { key: "Ctrl-Alt-h", run: JT },
  { key: "Ctrl-o", run: nL },
  { key: "Ctrl-t", run: iL },
  { key: "Ctrl-v", run: oh }
], hL = /* @__PURE__ */ [
  { key: "ArrowLeft", run: DT, shift: GT, preventDefault: !0 },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: wM, shift: BM, preventDefault: !0 },
  { mac: "Cmd-ArrowLeft", run: OM, shift: HM, preventDefault: !0 },
  { key: "ArrowRight", run: MT, shift: YT, preventDefault: !0 },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: AM, shift: UM, preventDefault: !0 },
  { mac: "Cmd-ArrowRight", run: DM, shift: VM, preventDefault: !0 },
  { key: "ArrowUp", run: FT, shift: WT, preventDefault: !0 },
  { mac: "Cmd-ArrowUp", run: ov, shift: lv },
  { mac: "Ctrl-ArrowUp", run: nv, shift: iv },
  { key: "ArrowDown", run: BT, shift: KT, preventDefault: !0 },
  { mac: "Cmd-ArrowDown", run: av, shift: cv },
  { mac: "Ctrl-ArrowDown", run: oh, shift: sv },
  { key: "PageUp", run: nv, shift: iv },
  { key: "PageDown", run: oh, shift: sv },
  { key: "Home", run: IM, shift: YM, preventDefault: !0 },
  { key: "Mod-Home", run: ov, shift: lv },
  { key: "End", run: kM, shift: GM, preventDefault: !0 },
  { key: "Mod-End", run: av, shift: cv },
  { key: "Enter", run: dL },
  { key: "Mod-a", run: QM },
  { key: "Backspace", run: ah, shift: ah },
  { key: "Delete", run: XT },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: JT },
  { key: "Mod-Delete", mac: "Alt-Delete", run: JM },
  { mac: "Mod-Backspace", run: tL },
  { mac: "Mod-Delete", run: rL }
].concat(/* @__PURE__ */ _L.map((t) => ({ mac: t.key, run: t.run, shift: t.shift }))), n1 = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: xM, shift: qM },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: NM, shift: zM },
  { key: "Alt-ArrowUp", run: sL },
  { key: "Shift-Alt-ArrowUp", run: aL },
  { key: "Alt-ArrowDown", run: oL },
  { key: "Shift-Alt-ArrowDown", run: lL },
  { key: "Escape", run: ZM },
  { key: "Mod-Enter", run: fL },
  { key: "Alt-l", mac: "Ctrl-l", run: jM },
  { key: "Mod-i", run: XM, preventDefault: !0 },
  { key: "Mod-[", run: am },
  { key: "Mod-]", run: om },
  { key: "Mod-Alt-\\", run: pL },
  { key: "Shift-Mod-k", run: cL },
  { key: "Shift-Mod-\\", run: FM },
  { key: "Mod-/", run: CT },
  { key: "Alt-A", run: wT }
].concat(hL), i1 = { key: "Tab", run: om, shift: am };
function nr() {
  var t = arguments[0];
  typeof t == "string" && (t = document.createElement(t));
  var e = 1, r = arguments[1];
  if (r && typeof r == "object" && r.nodeType == null && !Array.isArray(r)) {
    for (var n in r)
      if (Object.prototype.hasOwnProperty.call(r, n)) {
        var i = r[n];
        typeof i == "string" ? t.setAttribute(n, i) : i != null && (t[n] = i);
      }
    e++;
  }
  for (; e < arguments.length; e++)
    s1(t, arguments[e]);
  return t;
}
function s1(t, e) {
  if (typeof e == "string")
    t.appendChild(document.createTextNode(e));
  else if (e != null)
    if (e.nodeType != null)
      t.appendChild(e);
    else if (Array.isArray(e))
      for (var r = 0; r < e.length; r++)
        s1(t, e[r]);
    else
      throw new RangeError("Unsupported child node: " + e);
}
const uv = typeof String.prototype.normalize == "function" ? (t) => t.normalize("NFKD") : (t) => t;
class ro {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(e, r, n = 0, i = e.length, s, o) {
    this.test = o, this.value = { from: 0, to: 0 }, this.done = !1, this.matches = [], this.buffer = "", this.bufferPos = 0, this.iter = e.iterRange(n, i), this.bufferStart = n, this.normalize = s ? (a) => s(uv(a)) : uv, this.query = this.normalize(r);
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      if (this.bufferStart += this.buffer.length, this.iter.next(), this.iter.done)
        return -1;
      this.bufferPos = 0, this.buffer = this.iter.value;
    }
    return xr(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    for (; this.matches.length; )
      this.matches.pop();
    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (; ; ) {
      let e = this.peek();
      if (e < 0)
        return this.done = !0, this;
      let r = Fh(e), n = this.bufferStart + this.bufferPos;
      this.bufferPos += vn(e);
      let i = this.normalize(r);
      for (let s = 0, o = n; ; s++) {
        let a = i.charCodeAt(s), l = this.match(a, o);
        if (s == i.length - 1) {
          if (l)
            return this.value = l, this;
          break;
        }
        o == n && s < r.length && r.charCodeAt(s) == a && o++;
      }
    }
  }
  match(e, r) {
    let n = null;
    for (let i = 0; i < this.matches.length; i += 2) {
      let s = this.matches[i], o = !1;
      this.query.charCodeAt(s) == e && (s == this.query.length - 1 ? n = { from: this.matches[i + 1], to: r + 1 } : (this.matches[i]++, o = !0)), o || (this.matches.splice(i, 2), i -= 2);
    }
    return this.query.charCodeAt(0) == e && (this.query.length == 1 ? n = { from: r, to: r + 1 } : this.matches.push(1, r)), n && this.test && !this.test(n.from, n.to, this.buffer, this.bufferStart) && (n = null), n;
  }
}
typeof Symbol < "u" && (ro.prototype[Symbol.iterator] = function() {
  return this;
});
const o1 = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") }, lm = "gm" + (/x/.unicode == null ? "" : "u");
class a1 {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(e, r, n, i = 0, s = e.length) {
    if (this.text = e, this.to = s, this.curLine = "", this.done = !1, this.value = o1, /\\[sWDnr]|\n|\r|\[\^/.test(r))
      return new l1(e, r, n, i, s);
    this.re = new RegExp(r, lm + (n != null && n.ignoreCase ? "i" : "")), this.test = n == null ? void 0 : n.test, this.iter = e.iter();
    let o = e.lineAt(i);
    this.curLineStart = o.from, this.matchPos = ec(e, i), this.getLine(this.curLineStart);
  }
  getLine(e) {
    this.iter.next(e), this.iter.lineBreak ? this.curLine = "" : (this.curLine = this.iter.value, this.curLineStart + this.curLine.length > this.to && (this.curLine = this.curLine.slice(0, this.to - this.curLineStart)), this.iter.next());
  }
  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1, this.curLineStart > this.to ? this.curLine = "" : this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let e = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = e;
      let r = this.matchPos <= this.to && this.re.exec(this.curLine);
      if (r) {
        let n = this.curLineStart + r.index, i = n + r[0].length;
        if (this.matchPos = ec(this.text, i + (n == i ? 1 : 0)), n == this.curLineStart + this.curLine.length && this.nextLine(), (n < i || n > this.value.to) && (!this.test || this.test(n, i, r)))
          return this.value = { from: n, to: i, match: r }, this;
        e = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to)
        this.nextLine(), e = 0;
      else
        return this.done = !0, this;
    }
  }
}
const jp = /* @__PURE__ */ new WeakMap();
class Ys {
  constructor(e, r) {
    this.from = e, this.text = r;
  }
  get to() {
    return this.from + this.text.length;
  }
  static get(e, r, n) {
    let i = jp.get(e);
    if (!i || i.from >= n || i.to <= r) {
      let a = new Ys(r, e.sliceString(r, n));
      return jp.set(e, a), a;
    }
    if (i.from == r && i.to == n)
      return i;
    let { text: s, from: o } = i;
    return o > r && (s = e.sliceString(r, o) + s, o = r), i.to < n && (s += e.sliceString(i.to, n)), jp.set(e, new Ys(o, s)), new Ys(r, s.slice(r - o, n - o));
  }
}
class l1 {
  constructor(e, r, n, i, s) {
    this.text = e, this.to = s, this.done = !1, this.value = o1, this.matchPos = ec(e, i), this.re = new RegExp(r, lm + (n != null && n.ignoreCase ? "i" : "")), this.test = n == null ? void 0 : n.test, this.flat = Ys.get(e, i, this.chunkEnd(
      i + 5e3
      /* Chunk.Base */
    ));
  }
  chunkEnd(e) {
    return e >= this.to ? this.to : this.text.lineAt(e).to;
  }
  next() {
    for (; ; ) {
      let e = this.re.lastIndex = this.matchPos - this.flat.from, r = this.re.exec(this.flat.text);
      if (r && !r[0] && r.index == e && (this.re.lastIndex = e + 1, r = this.re.exec(this.flat.text)), r) {
        let n = this.flat.from + r.index, i = n + r[0].length;
        if ((this.flat.to >= this.to || r.index + r[0].length <= this.flat.text.length - 10) && (!this.test || this.test(n, i, r)))
          return this.value = { from: n, to: i, match: r }, this.matchPos = ec(this.text, i + (n == i ? 1 : 0)), this;
      }
      if (this.flat.to == this.to)
        return this.done = !0, this;
      this.flat = Ys.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
    }
  }
}
typeof Symbol < "u" && (a1.prototype[Symbol.iterator] = l1.prototype[Symbol.iterator] = function() {
  return this;
});
function mL(t) {
  try {
    return new RegExp(t, lm), !0;
  } catch {
    return !1;
  }
}
function ec(t, e) {
  if (e >= t.length)
    return e;
  let r = t.lineAt(e), n;
  for (; e < r.to && (n = r.text.charCodeAt(e - r.from)) >= 56320 && n < 57344; )
    e++;
  return e;
}
function lh(t) {
  let e = String(t.state.doc.lineAt(t.state.selection.main.head).number), r = nr("input", { class: "cm-textfield", name: "line", value: e }), n = nr("form", {
    class: "cm-gotoLine",
    onkeydown: (s) => {
      s.keyCode == 27 ? (s.preventDefault(), t.dispatch({ effects: tc.of(!1) }), t.focus()) : s.keyCode == 13 && (s.preventDefault(), i());
    },
    onsubmit: (s) => {
      s.preventDefault(), i();
    }
  }, nr("label", t.state.phrase("Go to line"), ": ", r), " ", nr("button", { class: "cm-button", type: "submit" }, t.state.phrase("go")));
  function i() {
    let s = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(r.value);
    if (!s)
      return;
    let { state: o } = t, a = o.doc.lineAt(o.selection.main.head), [, l, c, f, m] = s, b = f ? +f.slice(1) : 0, C = c ? +c : a.number;
    if (c && m) {
      let A = C / 100;
      l && (A = A * (l == "-" ? -1 : 1) + a.number / o.doc.lines), C = Math.round(o.doc.lines * A);
    } else
      c && l && (C = C * (l == "-" ? -1 : 1) + a.number);
    let N = o.doc.line(Math.max(1, Math.min(o.doc.lines, C))), z = $t.cursor(N.from + Math.max(0, Math.min(b, N.length)));
    t.dispatch({
      effects: [tc.of(!1), Rt.scrollIntoView(z.from, { y: "center" })],
      selection: z
    }), t.focus();
  }
  return { dom: n };
}
const tc = /* @__PURE__ */ Gt.define(), dv = /* @__PURE__ */ Mr.define({
  create() {
    return !0;
  },
  update(t, e) {
    for (let r of e.effects)
      r.is(tc) && (t = r.value);
    return t;
  },
  provide: (t) => fa.from(t, (e) => e ? lh : null)
}), c1 = (t) => {
  let e = da(t, lh);
  if (!e) {
    let r = [tc.of(!0)];
    t.state.field(dv, !1) == null && r.push(Gt.appendConfig.of([dv, gL])), t.dispatch({ effects: r }), e = da(t, lh);
  }
  return e && e.dom.querySelector("input").select(), !0;
}, gL = /* @__PURE__ */ Rt.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    "& label": { fontSize: "80%" }
  }
}), $L = {
  highlightWordAroundCursor: !1,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: !1
}, u1 = /* @__PURE__ */ xt.define({
  combine(t) {
    return Pn(t, $L, {
      highlightWordAroundCursor: (e, r) => e || r,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
function bL(t) {
  let e = [TL, yL];
  return t && e.push(u1.of(t)), e;
}
const EL = /* @__PURE__ */ Ot.mark({ class: "cm-selectionMatch" }), vL = /* @__PURE__ */ Ot.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
function fv(t, e, r, n) {
  return (r == 0 || t(e.sliceDoc(r - 1, r)) != dr.Word) && (n == e.doc.length || t(e.sliceDoc(n, n + 1)) != dr.Word);
}
function SL(t, e, r, n) {
  return t(e.sliceDoc(r, r + 1)) == dr.Word && t(e.sliceDoc(n - 1, n)) == dr.Word;
}
const yL = /* @__PURE__ */ mr.fromClass(class {
  constructor(t) {
    this.decorations = this.getDeco(t);
  }
  update(t) {
    (t.selectionSet || t.docChanged || t.viewportChanged) && (this.decorations = this.getDeco(t.view));
  }
  getDeco(t) {
    let e = t.state.facet(u1), { state: r } = t, n = r.selection;
    if (n.ranges.length > 1)
      return Ot.none;
    let i = n.main, s, o = null;
    if (i.empty) {
      if (!e.highlightWordAroundCursor)
        return Ot.none;
      let l = r.wordAt(i.head);
      if (!l)
        return Ot.none;
      o = r.charCategorizer(i.head), s = r.sliceDoc(l.from, l.to);
    } else {
      let l = i.to - i.from;
      if (l < e.minSelectionLength || l > 200)
        return Ot.none;
      if (e.wholeWords) {
        if (s = r.sliceDoc(i.from, i.to), o = r.charCategorizer(i.head), !(fv(o, r, i.from, i.to) && SL(o, r, i.from, i.to)))
          return Ot.none;
      } else if (s = r.sliceDoc(i.from, i.to).trim(), !s)
        return Ot.none;
    }
    let a = [];
    for (let l of t.visibleRanges) {
      let c = new ro(r.doc, s, l.from, l.to);
      for (; !c.next().done; ) {
        let { from: f, to: m } = c.value;
        if ((!o || fv(o, r, f, m)) && (i.empty && f <= i.from && m >= i.to ? a.push(vL.range(f, m)) : (f >= i.to || m <= i.from) && a.push(EL.range(f, m)), a.length > e.maxMatches))
          return Ot.none;
      }
    }
    return Ot.set(a);
  }
}, {
  decorations: (t) => t.decorations
}), TL = /* @__PURE__ */ Rt.baseTheme({
  ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
  ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
}), CL = ({ state: t, dispatch: e }) => {
  let { selection: r } = t, n = $t.create(r.ranges.map((i) => t.wordAt(i.head) || $t.cursor(i.head)), r.mainIndex);
  return n.eq(r) ? !1 : (e(t.update({ selection: n })), !0);
};
function wL(t, e) {
  let { main: r, ranges: n } = t.selection, i = t.wordAt(r.head), s = i && i.from == r.from && i.to == r.to;
  for (let o = !1, a = new ro(t.doc, e, n[n.length - 1].to); ; )
    if (a.next(), a.done) {
      if (o)
        return null;
      a = new ro(t.doc, e, 0, Math.max(0, n[n.length - 1].from - 1)), o = !0;
    } else {
      if (o && n.some((l) => l.from == a.value.from))
        continue;
      if (s) {
        let l = t.wordAt(a.value.from);
        if (!l || l.from != a.value.from || l.to != a.value.to)
          continue;
      }
      return a.value;
    }
}
const AL = ({ state: t, dispatch: e }) => {
  let { ranges: r } = t.selection;
  if (r.some((s) => s.from === s.to))
    return CL({ state: t, dispatch: e });
  let n = t.sliceDoc(r[0].from, r[0].to);
  if (t.selection.ranges.some((s) => t.sliceDoc(s.from, s.to) != n))
    return !1;
  let i = wL(t, n);
  return i ? (e(t.update({
    selection: t.selection.addRange($t.range(i.from, i.to), !1),
    effects: Rt.scrollIntoView(i.to)
  })), !0) : !1;
}, po = /* @__PURE__ */ xt.define({
  combine(t) {
    return Pn(t, {
      top: !1,
      caseSensitive: !1,
      literal: !1,
      regexp: !1,
      wholeWord: !1,
      createPanel: (e) => new FL(e),
      scrollToMatch: (e) => Rt.scrollIntoView(e)
    });
  }
});
class d1 {
  /**
  Create a query object.
  */
  constructor(e) {
    this.search = e.search, this.caseSensitive = !!e.caseSensitive, this.literal = !!e.literal, this.regexp = !!e.regexp, this.replace = e.replace || "", this.valid = !!this.search && (!this.regexp || mL(this.search)), this.unquoted = this.unquote(this.search), this.wholeWord = !!e.wholeWord;
  }
  /**
  @internal
  */
  unquote(e) {
    return this.literal ? e : e.replace(/\\([nrt\\])/g, (r, n) => n == "n" ? `
` : n == "r" ? "\r" : n == "t" ? "	" : "\\");
  }
  /**
  Compare this query to another query.
  */
  eq(e) {
    return this.search == e.search && this.replace == e.replace && this.caseSensitive == e.caseSensitive && this.regexp == e.regexp && this.wholeWord == e.wholeWord;
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new kL(this) : new xL(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(e, r = 0, n) {
    let i = e.doc ? e : Qt.create({ doc: e });
    return n == null && (n = i.doc.length), this.regexp ? Os(this, i, r, n) : Is(this, i, r, n);
  }
}
class f1 {
  constructor(e) {
    this.spec = e;
  }
}
function Is(t, e, r, n) {
  return new ro(e.doc, t.unquoted, r, n, t.caseSensitive ? void 0 : (i) => i.toLowerCase(), t.wholeWord ? RL(e.doc, e.charCategorizer(e.selection.main.head)) : void 0);
}
function RL(t, e) {
  return (r, n, i, s) => ((s > r || s + i.length < n) && (s = Math.max(0, r - 2), i = t.sliceString(s, Math.min(t.length, n + 2))), (e(rc(i, r - s)) != dr.Word || e(nc(i, r - s)) != dr.Word) && (e(nc(i, n - s)) != dr.Word || e(rc(i, n - s)) != dr.Word));
}
class xL extends f1 {
  constructor(e) {
    super(e);
  }
  nextMatch(e, r, n) {
    let i = Is(this.spec, e, n, e.doc.length).nextOverlapping();
    return i.done && (i = Is(this.spec, e, 0, r).nextOverlapping()), i.done ? null : i.value;
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(e, r, n) {
    for (let i = n; ; ) {
      let s = Math.max(r, i - 1e4 - this.spec.unquoted.length), o = Is(this.spec, e, s, i), a = null;
      for (; !o.nextOverlapping().done; )
        a = o.value;
      if (a)
        return a;
      if (s == r)
        return null;
      i -= 1e4;
    }
  }
  prevMatch(e, r, n) {
    return this.prevMatchInRange(e, 0, r) || this.prevMatchInRange(e, n, e.doc.length);
  }
  getReplacement(e) {
    return this.spec.unquote(this.spec.replace);
  }
  matchAll(e, r) {
    let n = Is(this.spec, e, 0, e.doc.length), i = [];
    for (; !n.next().done; ) {
      if (i.length >= r)
        return null;
      i.push(n.value);
    }
    return i;
  }
  highlight(e, r, n, i) {
    let s = Is(this.spec, e, Math.max(0, r - this.spec.unquoted.length), Math.min(n + this.spec.unquoted.length, e.doc.length));
    for (; !s.next().done; )
      i(s.value.from, s.value.to);
  }
}
function Os(t, e, r, n) {
  return new a1(e.doc, t.search, {
    ignoreCase: !t.caseSensitive,
    test: t.wholeWord ? NL(e.charCategorizer(e.selection.main.head)) : void 0
  }, r, n);
}
function rc(t, e) {
  return t.slice(Or(t, e, !1), e);
}
function nc(t, e) {
  return t.slice(e, Or(t, e));
}
function NL(t) {
  return (e, r, n) => !n[0].length || (t(rc(n.input, n.index)) != dr.Word || t(nc(n.input, n.index)) != dr.Word) && (t(nc(n.input, n.index + n[0].length)) != dr.Word || t(rc(n.input, n.index + n[0].length)) != dr.Word);
}
class kL extends f1 {
  nextMatch(e, r, n) {
    let i = Os(this.spec, e, n, e.doc.length).next();
    return i.done && (i = Os(this.spec, e, 0, r).next()), i.done ? null : i.value;
  }
  prevMatchInRange(e, r, n) {
    for (let i = 1; ; i++) {
      let s = Math.max(
        r,
        n - i * 1e4
        /* FindPrev.ChunkSize */
      ), o = Os(this.spec, e, s, n), a = null;
      for (; !o.next().done; )
        a = o.value;
      if (a && (s == r || a.from > s + 10))
        return a;
      if (s == r)
        return null;
    }
  }
  prevMatch(e, r, n) {
    return this.prevMatchInRange(e, 0, r) || this.prevMatchInRange(e, n, e.doc.length);
  }
  getReplacement(e) {
    return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g, (r, n) => n == "$" ? "$" : n == "&" ? e.match[0] : n != "0" && +n < e.match.length ? e.match[n] : r);
  }
  matchAll(e, r) {
    let n = Os(this.spec, e, 0, e.doc.length), i = [];
    for (; !n.next().done; ) {
      if (i.length >= r)
        return null;
      i.push(n.value);
    }
    return i;
  }
  highlight(e, r, n, i) {
    let s = Os(this.spec, e, Math.max(
      0,
      r - 250
      /* RegExp.HighlightMargin */
    ), Math.min(n + 250, e.doc.length));
    for (; !s.next().done; )
      i(s.value.from, s.value.to);
  }
}
const ma = /* @__PURE__ */ Gt.define(), cm = /* @__PURE__ */ Gt.define(), Mi = /* @__PURE__ */ Mr.define({
  create(t) {
    return new Xp(ch(t).create(), null);
  },
  update(t, e) {
    for (let r of e.effects)
      r.is(ma) ? t = new Xp(r.value.create(), t.panel) : r.is(cm) && (t = new Xp(t.query, r.value ? um : null));
    return t;
  },
  provide: (t) => fa.from(t, (e) => e.panel)
});
class Xp {
  constructor(e, r) {
    this.query = e, this.panel = r;
  }
}
const IL = /* @__PURE__ */ Ot.mark({ class: "cm-searchMatch" }), OL = /* @__PURE__ */ Ot.mark({ class: "cm-searchMatch cm-searchMatch-selected" }), DL = /* @__PURE__ */ mr.fromClass(class {
  constructor(t) {
    this.view = t, this.decorations = this.highlight(t.state.field(Mi));
  }
  update(t) {
    let e = t.state.field(Mi);
    (e != t.startState.field(Mi) || t.docChanged || t.selectionSet || t.viewportChanged) && (this.decorations = this.highlight(e));
  }
  highlight({ query: t, panel: e }) {
    if (!e || !t.spec.valid)
      return Ot.none;
    let { view: r } = this, n = new fi();
    for (let i = 0, s = r.visibleRanges, o = s.length; i < o; i++) {
      let { from: a, to: l } = s[i];
      for (; i < o - 1 && l > s[i + 1].from - 2 * 250; )
        l = s[++i].to;
      t.highlight(r.state, a, l, (c, f) => {
        let m = r.state.selection.ranges.some((b) => b.from == c && b.to == f);
        n.add(c, f, m ? OL : IL);
      });
    }
    return n.finish();
  }
}, {
  decorations: (t) => t.decorations
});
function qa(t) {
  return (e) => {
    let r = e.state.field(Mi, !1);
    return r && r.query.spec.valid ? t(e, r) : dm(e);
  };
}
const ic = /* @__PURE__ */ qa((t, { query: e }) => {
  let { to: r } = t.state.selection.main, n = e.nextMatch(t.state, r, r);
  if (!n)
    return !1;
  let i = $t.single(n.from, n.to), s = t.state.facet(po);
  return t.dispatch({
    selection: i,
    effects: [fm(t, n), s.scrollToMatch(i.main, t)],
    userEvent: "select.search"
  }), _1(t), !0;
}), sc = /* @__PURE__ */ qa((t, { query: e }) => {
  let { state: r } = t, { from: n } = r.selection.main, i = e.prevMatch(r, n, n);
  if (!i)
    return !1;
  let s = $t.single(i.from, i.to), o = t.state.facet(po);
  return t.dispatch({
    selection: s,
    effects: [fm(t, i), o.scrollToMatch(s.main, t)],
    userEvent: "select.search"
  }), _1(t), !0;
}), ML = /* @__PURE__ */ qa((t, { query: e }) => {
  let r = e.matchAll(t.state, 1e3);
  return !r || !r.length ? !1 : (t.dispatch({
    selection: $t.create(r.map((n) => $t.range(n.from, n.to))),
    userEvent: "select.search.matches"
  }), !0);
}), LL = ({ state: t, dispatch: e }) => {
  let r = t.selection;
  if (r.ranges.length > 1 || r.main.empty)
    return !1;
  let { from: n, to: i } = r.main, s = [], o = 0;
  for (let a = new ro(t.doc, t.sliceDoc(n, i)); !a.next().done; ) {
    if (s.length > 1e3)
      return !1;
    a.value.from == n && (o = s.length), s.push($t.range(a.value.from, a.value.to));
  }
  return e(t.update({
    selection: $t.create(s, o),
    userEvent: "select.search.matches"
  })), !0;
}, pv = /* @__PURE__ */ qa((t, { query: e }) => {
  let { state: r } = t, { from: n, to: i } = r.selection.main;
  if (r.readOnly)
    return !1;
  let s = e.nextMatch(r, n, n);
  if (!s)
    return !1;
  let o = [], a, l, c = [];
  if (s.from == n && s.to == i && (l = r.toText(e.getReplacement(s)), o.push({ from: s.from, to: s.to, insert: l }), s = e.nextMatch(r, s.from, s.to), c.push(Rt.announce.of(r.phrase("replaced match on line $", r.doc.lineAt(n).number) + "."))), s) {
    let f = o.length == 0 || o[0].from >= s.to ? 0 : s.to - s.from - l.length;
    a = $t.single(s.from - f, s.to - f), c.push(fm(t, s)), c.push(r.facet(po).scrollToMatch(a.main, t));
  }
  return t.dispatch({
    changes: o,
    selection: a,
    effects: c,
    userEvent: "input.replace"
  }), !0;
}), PL = /* @__PURE__ */ qa((t, { query: e }) => {
  if (t.state.readOnly)
    return !1;
  let r = e.matchAll(t.state, 1e9).map((i) => {
    let { from: s, to: o } = i;
    return { from: s, to: o, insert: e.getReplacement(i) };
  });
  if (!r.length)
    return !1;
  let n = t.state.phrase("replaced $ matches", r.length) + ".";
  return t.dispatch({
    changes: r,
    effects: Rt.announce.of(n),
    userEvent: "input.replace.all"
  }), !0;
});
function um(t) {
  return t.state.facet(po).createPanel(t);
}
function ch(t, e) {
  var r, n, i, s, o;
  let a = t.selection.main, l = a.empty || a.to > a.from + 100 ? "" : t.sliceDoc(a.from, a.to);
  if (e && !l)
    return e;
  let c = t.facet(po);
  return new d1({
    search: ((r = e == null ? void 0 : e.literal) !== null && r !== void 0 ? r : c.literal) ? l : l.replace(/\n/g, "\\n"),
    caseSensitive: (n = e == null ? void 0 : e.caseSensitive) !== null && n !== void 0 ? n : c.caseSensitive,
    literal: (i = e == null ? void 0 : e.literal) !== null && i !== void 0 ? i : c.literal,
    regexp: (s = e == null ? void 0 : e.regexp) !== null && s !== void 0 ? s : c.regexp,
    wholeWord: (o = e == null ? void 0 : e.wholeWord) !== null && o !== void 0 ? o : c.wholeWord
  });
}
function p1(t) {
  let e = da(t, um);
  return e && e.dom.querySelector("[main-field]");
}
function _1(t) {
  let e = p1(t);
  e && e == t.root.activeElement && e.select();
}
const dm = (t) => {
  let e = t.state.field(Mi, !1);
  if (e && e.panel) {
    let r = p1(t);
    if (r && r != t.root.activeElement) {
      let n = ch(t.state, e.query.spec);
      n.valid && t.dispatch({ effects: ma.of(n) }), r.focus(), r.select();
    }
  } else
    t.dispatch({ effects: [
      cm.of(!0),
      e ? ma.of(ch(t.state, e.query.spec)) : Gt.appendConfig.of(UL)
    ] });
  return !0;
}, h1 = (t) => {
  let e = t.state.field(Mi, !1);
  if (!e || !e.panel)
    return !1;
  let r = da(t, um);
  return r && r.dom.contains(t.root.activeElement) && t.focus(), t.dispatch({ effects: cm.of(!1) }), !0;
}, m1 = [
  { key: "Mod-f", run: dm, scope: "editor search-panel" },
  { key: "F3", run: ic, shift: sc, scope: "editor search-panel", preventDefault: !0 },
  { key: "Mod-g", run: ic, shift: sc, scope: "editor search-panel", preventDefault: !0 },
  { key: "Escape", run: h1, scope: "editor search-panel" },
  { key: "Mod-Shift-l", run: LL },
  { key: "Mod-Alt-g", run: c1 },
  { key: "Mod-d", run: AL, preventDefault: !0 }
];
class FL {
  constructor(e) {
    this.view = e;
    let r = this.query = e.state.field(Mi).query.spec;
    this.commit = this.commit.bind(this), this.searchField = nr("input", {
      value: r.search,
      placeholder: an(e, "Find"),
      "aria-label": an(e, "Find"),
      class: "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.replaceField = nr("input", {
      value: r.replace,
      placeholder: an(e, "Replace"),
      "aria-label": an(e, "Replace"),
      class: "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.caseField = nr("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: r.caseSensitive,
      onchange: this.commit
    }), this.reField = nr("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: r.regexp,
      onchange: this.commit
    }), this.wordField = nr("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: r.wholeWord,
      onchange: this.commit
    });
    function n(i, s, o) {
      return nr("button", { class: "cm-button", name: i, onclick: s, type: "button" }, o);
    }
    this.dom = nr("div", { onkeydown: (i) => this.keydown(i), class: "cm-search" }, [
      this.searchField,
      n("next", () => ic(e), [an(e, "next")]),
      n("prev", () => sc(e), [an(e, "previous")]),
      n("select", () => ML(e), [an(e, "all")]),
      nr("label", null, [this.caseField, an(e, "match case")]),
      nr("label", null, [this.reField, an(e, "regexp")]),
      nr("label", null, [this.wordField, an(e, "by word")]),
      ...e.state.readOnly ? [] : [
        nr("br"),
        this.replaceField,
        n("replace", () => pv(e), [an(e, "replace")]),
        n("replaceAll", () => PL(e), [an(e, "replace all")])
      ],
      nr("button", {
        name: "close",
        onclick: () => h1(e),
        "aria-label": an(e, "close"),
        type: "button"
      }, ["×"])
    ]);
  }
  commit() {
    let e = new d1({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    });
    e.eq(this.query) || (this.query = e, this.view.dispatch({ effects: ma.of(e) }));
  }
  keydown(e) {
    nD(this.view, e, "search-panel") ? e.preventDefault() : e.keyCode == 13 && e.target == this.searchField ? (e.preventDefault(), (e.shiftKey ? sc : ic)(this.view)) : e.keyCode == 13 && e.target == this.replaceField && (e.preventDefault(), pv(this.view));
  }
  update(e) {
    for (let r of e.transactions)
      for (let n of r.effects)
        n.is(ma) && !n.value.eq(this.query) && this.setQuery(n.value);
  }
  setQuery(e) {
    this.query = e, this.searchField.value = e.search, this.replaceField.value = e.replace, this.caseField.checked = e.caseSensitive, this.reField.checked = e.regexp, this.wordField.checked = e.wholeWord;
  }
  mount() {
    this.searchField.select();
  }
  get pos() {
    return 80;
  }
  get top() {
    return this.view.state.facet(po).top;
  }
}
function an(t, e) {
  return t.state.phrase(e);
}
const _l = 30, hl = /[\s\.,:;?!]/;
function fm(t, { from: e, to: r }) {
  let n = t.state.doc.lineAt(e), i = t.state.doc.lineAt(r).to, s = Math.max(n.from, e - _l), o = Math.min(i, r + _l), a = t.state.sliceDoc(s, o);
  if (s != n.from) {
    for (let l = 0; l < _l; l++)
      if (!hl.test(a[l + 1]) && hl.test(a[l])) {
        a = a.slice(l);
        break;
      }
  }
  if (o != i) {
    for (let l = a.length - 1; l > a.length - _l; l--)
      if (!hl.test(a[l - 1]) && hl.test(a[l])) {
        a = a.slice(0, l);
        break;
      }
  }
  return Rt.announce.of(`${t.state.phrase("current match")}. ${a} ${t.state.phrase("on line")} ${n.number}.`);
}
const BL = /* @__PURE__ */ Rt.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
  "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
  "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
}), UL = [
  Mi,
  /* @__PURE__ */ co.low(DL),
  BL
];
class g1 {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(e, r, n) {
    this.state = e, this.pos = r, this.explicit = n, this.abortListeners = [];
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(e) {
    let r = zr(this.state).resolveInner(this.pos, -1);
    for (; r && e.indexOf(r.name) < 0; )
      r = r.parent;
    return r ? {
      from: r.from,
      to: this.pos,
      text: this.state.sliceDoc(r.from, this.pos),
      type: r.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(e) {
    let r = this.state.doc.lineAt(this.pos), n = Math.max(r.from, this.pos - 250), i = r.text.slice(n - r.from, this.pos - r.from), s = i.search($1(e, !1));
    return s < 0 ? null : { from: n + s, to: this.pos, text: i.slice(s) };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  */
  addEventListener(e, r) {
    e == "abort" && this.abortListeners && this.abortListeners.push(r);
  }
}
function _v(t) {
  let e = Object.keys(t).join(""), r = /\w/.test(e);
  return r && (e = e.replace(/\w/g, "")), `[${r ? "\\w" : ""}${e.replace(/[^\w\s]/g, "\\$&")}]`;
}
function qL(t) {
  let e = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ Object.create(null);
  for (let { label: i } of t) {
    e[i[0]] = !0;
    for (let s = 1; s < i.length; s++)
      r[i[s]] = !0;
  }
  let n = _v(e) + _v(r) + "*$";
  return [new RegExp("^" + n), new RegExp(n)];
}
function zL(t) {
  let e = t.map((i) => typeof i == "string" ? { label: i } : i), [r, n] = e.every((i) => /^\w+$/.test(i.label)) ? [/\w*$/, /\w+$/] : qL(e);
  return (i) => {
    let s = i.matchBefore(n);
    return s || i.explicit ? { from: s ? s.from : i.pos, options: e, validFor: r } : null;
  };
}
class hv {
  constructor(e, r, n, i) {
    this.completion = e, this.source = r, this.match = n, this.score = i;
  }
}
function Li(t) {
  return t.selection.main.from;
}
function $1(t, e) {
  var r;
  let { source: n } = t, i = e && n[0] != "^", s = n[n.length - 1] != "$";
  return !i && !s ? t : new RegExp(`${i ? "^" : ""}(?:${n})${s ? "$" : ""}`, (r = t.flags) !== null && r !== void 0 ? r : t.ignoreCase ? "i" : "");
}
const GL = /* @__PURE__ */ $i.define();
function YL(t, e, r, n) {
  let { main: i } = t.selection, s = r - i.from, o = n - i.from;
  return Object.assign(Object.assign({}, t.changeByRange((a) => a != i && r != n && t.sliceDoc(a.from + s, a.from + o) != t.sliceDoc(r, n) ? { range: a } : {
    changes: { from: a.from + s, to: n == i.from ? a.to : a.from + o, insert: e },
    range: $t.cursor(a.from + s + e.length)
  })), { scrollIntoView: !0, userEvent: "input.complete" });
}
const mv = /* @__PURE__ */ new WeakMap();
function HL(t) {
  if (!Array.isArray(t))
    return t;
  let e = mv.get(t);
  return e || mv.set(t, e = zL(t)), e;
}
const oc = /* @__PURE__ */ Gt.define(), ga = /* @__PURE__ */ Gt.define();
class VL {
  constructor(e) {
    this.pattern = e, this.chars = [], this.folded = [], this.any = [], this.precise = [], this.byWord = [], this.score = 0, this.matched = [];
    for (let r = 0; r < e.length; ) {
      let n = xr(e, r), i = vn(n);
      this.chars.push(n);
      let s = e.slice(r, r + i), o = s.toUpperCase();
      this.folded.push(xr(o == s ? s.toLowerCase() : o, 0)), r += i;
    }
    this.astral = e.length != this.chars.length;
  }
  ret(e, r) {
    return this.score = e, this.matched = r, !0;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return a boolean indicating whether there was a match and,
  // on success, set `this.score` to the score, `this.matched` to an
  // array of `from, to` pairs indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  match(e) {
    if (this.pattern.length == 0)
      return this.ret(-100, []);
    if (e.length < this.pattern.length)
      return !1;
    let { chars: r, folded: n, any: i, precise: s, byWord: o } = this;
    if (r.length == 1) {
      let Te = xr(e, 0), ce = vn(Te), ge = ce == e.length ? 0 : -100;
      if (Te != r[0])
        if (Te == n[0])
          ge += -200;
        else
          return !1;
      return this.ret(ge, [0, ce]);
    }
    let a = e.indexOf(this.pattern);
    if (a == 0)
      return this.ret(e.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
    let l = r.length, c = 0;
    if (a < 0) {
      for (let Te = 0, ce = Math.min(e.length, 200); Te < ce && c < l; ) {
        let ge = xr(e, Te);
        (ge == r[c] || ge == n[c]) && (i[c++] = Te), Te += vn(ge);
      }
      if (c < l)
        return !1;
    }
    let f = 0, m = 0, b = !1, C = 0, N = -1, z = -1, A = /[a-z]/.test(e), Q = !0;
    for (let Te = 0, ce = Math.min(e.length, 200), ge = 0; Te < ce && m < l; ) {
      let Y = xr(e, Te);
      a < 0 && (f < l && Y == r[f] && (s[f++] = Te), C < l && (Y == r[C] || Y == n[C] ? (C == 0 && (N = Te), z = Te + 1, C++) : C = 0));
      let fe, ae = Y < 255 ? Y >= 48 && Y <= 57 || Y >= 97 && Y <= 122 ? 2 : Y >= 65 && Y <= 90 ? 1 : 0 : (fe = Fh(Y)) != fe.toLowerCase() ? 1 : fe != fe.toUpperCase() ? 2 : 0;
      (!Te || ae == 1 && A || ge == 0 && ae != 0) && (r[m] == Y || n[m] == Y && (b = !0) ? o[m++] = Te : o.length && (Q = !1)), ge = ae, Te += vn(Y);
    }
    return m == l && o[0] == 0 && Q ? this.result(-100 + (b ? -200 : 0), o, e) : C == l && N == 0 ? this.ret(-200 - e.length + (z == e.length ? 0 : -100), [0, z]) : a > -1 ? this.ret(-700 - e.length, [a, a + this.pattern.length]) : C == l ? this.ret(-900 - e.length, [N, z]) : m == l ? this.result(-100 + (b ? -200 : 0) + -700 + (Q ? 0 : -1100), o, e) : r.length == 2 ? !1 : this.result((i[0] ? -700 : 0) + -200 + -1100, i, e);
  }
  result(e, r, n) {
    let i = [], s = 0;
    for (let o of r) {
      let a = o + (this.astral ? vn(xr(n, o)) : 1);
      s && i[s - 1] == o ? i[s - 1] = a : (i[s++] = o, i[s++] = a);
    }
    return this.ret(e - n.length, i);
  }
}
const Ir = /* @__PURE__ */ xt.define({
  combine(t) {
    return Pn(t, {
      activateOnTyping: !0,
      activateOnTypingDelay: 100,
      selectOnOpen: !0,
      override: null,
      closeOnBlur: !0,
      maxRenderedOptions: 100,
      defaultKeymap: !0,
      tooltipClass: () => "",
      optionClass: () => "",
      aboveCursor: !1,
      icons: !0,
      addToOptions: [],
      positionInfo: WL,
      compareCompletions: (e, r) => e.label.localeCompare(r.label),
      interactionDelay: 75,
      updateSyncTime: 100
    }, {
      defaultKeymap: (e, r) => e && r,
      closeOnBlur: (e, r) => e && r,
      icons: (e, r) => e && r,
      tooltipClass: (e, r) => (n) => gv(e(n), r(n)),
      optionClass: (e, r) => (n) => gv(e(n), r(n)),
      addToOptions: (e, r) => e.concat(r)
    });
  }
});
function gv(t, e) {
  return t ? e ? t + " " + e : t : e;
}
function WL(t, e, r, n, i, s) {
  let o = t.textDirection == lr.RTL, a = o, l = !1, c = "top", f, m, b = e.left - i.left, C = i.right - e.right, N = n.right - n.left, z = n.bottom - n.top;
  if (a && b < Math.min(N, C) ? a = !1 : !a && C < Math.min(N, b) && (a = !0), N <= (a ? b : C))
    f = Math.max(i.top, Math.min(r.top, i.bottom - z)) - e.top, m = Math.min(400, a ? b : C);
  else {
    l = !0, m = Math.min(
      400,
      (o ? e.right : i.right - e.left) - 30
      /* Info.Margin */
    );
    let Te = i.bottom - e.bottom;
    Te >= z || Te > e.top ? f = r.bottom - e.top : (c = "bottom", f = e.bottom - r.top);
  }
  let A = (e.bottom - e.top) / s.offsetHeight, Q = (e.right - e.left) / s.offsetWidth;
  return {
    style: `${c}: ${f / A}px; max-width: ${m / Q}px`,
    class: "cm-completionInfo-" + (l ? o ? "left-narrow" : "right-narrow" : a ? "left" : "right")
  };
}
function KL(t) {
  let e = t.addToOptions.slice();
  return t.icons && e.push({
    render(r) {
      let n = document.createElement("div");
      return n.classList.add("cm-completionIcon"), r.type && n.classList.add(...r.type.split(/\s+/g).map((i) => "cm-completionIcon-" + i)), n.setAttribute("aria-hidden", "true"), n;
    },
    position: 20
  }), e.push({
    render(r, n, i, s) {
      let o = document.createElement("span");
      o.className = "cm-completionLabel";
      let a = r.displayLabel || r.label, l = 0;
      for (let c = 0; c < s.length; ) {
        let f = s[c++], m = s[c++];
        f > l && o.appendChild(document.createTextNode(a.slice(l, f)));
        let b = o.appendChild(document.createElement("span"));
        b.appendChild(document.createTextNode(a.slice(f, m))), b.className = "cm-completionMatchedText", l = m;
      }
      return l < a.length && o.appendChild(document.createTextNode(a.slice(l))), o;
    },
    position: 50
  }, {
    render(r) {
      if (!r.detail)
        return null;
      let n = document.createElement("span");
      return n.className = "cm-completionDetail", n.textContent = r.detail, n;
    },
    position: 80
  }), e.sort((r, n) => r.position - n.position).map((r) => r.render);
}
function Zp(t, e, r) {
  if (t <= r)
    return { from: 0, to: t };
  if (e < 0 && (e = 0), e <= t >> 1) {
    let i = Math.floor(e / r);
    return { from: i * r, to: (i + 1) * r };
  }
  let n = Math.floor((t - e) / r);
  return { from: t - (n + 1) * r, to: t - n * r };
}
class QL {
  constructor(e, r, n) {
    this.view = e, this.stateField = r, this.applyCompletion = n, this.info = null, this.infoDestroy = null, this.placeInfoReq = {
      read: () => this.measureInfo(),
      write: (l) => this.placeInfo(l),
      key: this
    }, this.space = null, this.currentClass = "";
    let i = e.state.field(r), { options: s, selected: o } = i.open, a = e.state.facet(Ir);
    this.optionContent = KL(a), this.optionClass = a.optionClass, this.tooltipClass = a.tooltipClass, this.range = Zp(s.length, o, a.maxRenderedOptions), this.dom = document.createElement("div"), this.dom.className = "cm-tooltip-autocomplete", this.updateTooltipClass(e.state), this.dom.addEventListener("mousedown", (l) => {
      let { options: c } = e.state.field(r).open;
      for (let f = l.target, m; f && f != this.dom; f = f.parentNode)
        if (f.nodeName == "LI" && (m = /-(\d+)$/.exec(f.id)) && +m[1] < c.length) {
          this.applyCompletion(e, c[+m[1]]), l.preventDefault();
          return;
        }
    }), this.dom.addEventListener("focusout", (l) => {
      let c = e.state.field(this.stateField, !1);
      c && c.tooltip && e.state.facet(Ir).closeOnBlur && l.relatedTarget != e.contentDOM && e.dispatch({ effects: ga.of(null) });
    }), this.showOptions(s, i.id);
  }
  mount() {
    this.updateSel();
  }
  showOptions(e, r) {
    this.list && this.list.remove(), this.list = this.dom.appendChild(this.createListBox(e, r, this.range)), this.list.addEventListener("scroll", () => {
      this.info && this.view.requestMeasure(this.placeInfoReq);
    });
  }
  update(e) {
    var r;
    let n = e.state.field(this.stateField), i = e.startState.field(this.stateField);
    if (this.updateTooltipClass(e.state), n != i) {
      let { options: s, selected: o, disabled: a } = n.open;
      (!i.open || i.open.options != s) && (this.range = Zp(s.length, o, e.state.facet(Ir).maxRenderedOptions), this.showOptions(s, n.id)), this.updateSel(), a != ((r = i.open) === null || r === void 0 ? void 0 : r.disabled) && this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!a);
    }
  }
  updateTooltipClass(e) {
    let r = this.tooltipClass(e);
    if (r != this.currentClass) {
      for (let n of this.currentClass.split(" "))
        n && this.dom.classList.remove(n);
      for (let n of r.split(" "))
        n && this.dom.classList.add(n);
      this.currentClass = r;
    }
  }
  positioned(e) {
    this.space = e, this.info && this.view.requestMeasure(this.placeInfoReq);
  }
  updateSel() {
    let e = this.view.state.field(this.stateField), r = e.open;
    if ((r.selected > -1 && r.selected < this.range.from || r.selected >= this.range.to) && (this.range = Zp(r.options.length, r.selected, this.view.state.facet(Ir).maxRenderedOptions), this.showOptions(r.options, e.id)), this.updateSelectedOption(r.selected)) {
      this.destroyInfo();
      let { completion: n } = r.options[r.selected], { info: i } = n;
      if (!i)
        return;
      let s = typeof i == "string" ? document.createTextNode(i) : i(n);
      if (!s)
        return;
      "then" in s ? s.then((o) => {
        o && this.view.state.field(this.stateField, !1) == e && this.addInfoPane(o, n);
      }).catch((o) => Tn(this.view.state, o, "completion info")) : this.addInfoPane(s, n);
    }
  }
  addInfoPane(e, r) {
    this.destroyInfo();
    let n = this.info = document.createElement("div");
    if (n.className = "cm-tooltip cm-completionInfo", e.nodeType != null)
      n.appendChild(e), this.infoDestroy = null;
    else {
      let { dom: i, destroy: s } = e;
      n.appendChild(i), this.infoDestroy = s || null;
    }
    this.dom.appendChild(n), this.view.requestMeasure(this.placeInfoReq);
  }
  updateSelectedOption(e) {
    let r = null;
    for (let n = this.list.firstChild, i = this.range.from; n; n = n.nextSibling, i++)
      n.nodeName != "LI" || !n.id ? i-- : i == e ? n.hasAttribute("aria-selected") || (n.setAttribute("aria-selected", "true"), r = n) : n.hasAttribute("aria-selected") && n.removeAttribute("aria-selected");
    return r && XL(this.list, r), r;
  }
  measureInfo() {
    let e = this.dom.querySelector("[aria-selected]");
    if (!e || !this.info)
      return null;
    let r = this.dom.getBoundingClientRect(), n = this.info.getBoundingClientRect(), i = e.getBoundingClientRect(), s = this.space;
    if (!s) {
      let o = this.dom.ownerDocument.defaultView || window;
      s = { left: 0, top: 0, right: o.innerWidth, bottom: o.innerHeight };
    }
    return i.top > Math.min(s.bottom, r.bottom) - 10 || i.bottom < Math.max(s.top, r.top) + 10 ? null : this.view.state.facet(Ir).positionInfo(this.view, r, i, n, s, this.dom);
  }
  placeInfo(e) {
    this.info && (e ? (e.style && (this.info.style.cssText = e.style), this.info.className = "cm-tooltip cm-completionInfo " + (e.class || "")) : this.info.style.cssText = "top: -1e6px");
  }
  createListBox(e, r, n) {
    const i = document.createElement("ul");
    i.id = r, i.setAttribute("role", "listbox"), i.setAttribute("aria-expanded", "true"), i.setAttribute("aria-label", this.view.state.phrase("Completions"));
    let s = null;
    for (let o = n.from; o < n.to; o++) {
      let { completion: a, match: l } = e[o], { section: c } = a;
      if (c) {
        let b = typeof c == "string" ? c : c.name;
        if (b != s && (o > n.from || n.from == 0))
          if (s = b, typeof c != "string" && c.header)
            i.appendChild(c.header(c));
          else {
            let C = i.appendChild(document.createElement("completion-section"));
            C.textContent = b;
          }
      }
      const f = i.appendChild(document.createElement("li"));
      f.id = r + "-" + o, f.setAttribute("role", "option");
      let m = this.optionClass(a);
      m && (f.className = m);
      for (let b of this.optionContent) {
        let C = b(a, this.view.state, this.view, l);
        C && f.appendChild(C);
      }
    }
    return n.from && i.classList.add("cm-completionListIncompleteTop"), n.to < e.length && i.classList.add("cm-completionListIncompleteBottom"), i;
  }
  destroyInfo() {
    this.info && (this.infoDestroy && this.infoDestroy(), this.info.remove(), this.info = null);
  }
  destroy() {
    this.destroyInfo();
  }
}
function jL(t, e) {
  return (r) => new QL(r, t, e);
}
function XL(t, e) {
  let r = t.getBoundingClientRect(), n = e.getBoundingClientRect(), i = r.height / t.offsetHeight;
  n.top < r.top ? t.scrollTop -= (r.top - n.top) / i : n.bottom > r.bottom && (t.scrollTop += (n.bottom - r.bottom) / i);
}
function $v(t) {
  return (t.boost || 0) * 100 + (t.apply ? 10 : 0) + (t.info ? 5 : 0) + (t.type ? 1 : 0);
}
function ZL(t, e) {
  let r = [], n = null, i = (l) => {
    r.push(l);
    let { section: c } = l.completion;
    if (c) {
      n || (n = []);
      let f = typeof c == "string" ? c : c.name;
      n.some((m) => m.name == f) || n.push(typeof c == "string" ? { name: f } : c);
    }
  };
  for (let l of t)
    if (l.hasResult()) {
      let c = l.result.getMatch;
      if (l.result.filter === !1)
        for (let f of l.result.options)
          i(new hv(f, l.source, c ? c(f) : [], 1e9 - r.length));
      else {
        let f = new VL(e.sliceDoc(l.from, l.to));
        for (let m of l.result.options)
          if (f.match(m.label)) {
            let b = m.displayLabel ? c ? c(m, f.matched) : [] : f.matched;
            i(new hv(m, l.source, b, f.score + (m.boost || 0)));
          }
      }
    }
  if (n) {
    let l = /* @__PURE__ */ Object.create(null), c = 0, f = (m, b) => {
      var C, N;
      return ((C = m.rank) !== null && C !== void 0 ? C : 1e9) - ((N = b.rank) !== null && N !== void 0 ? N : 1e9) || (m.name < b.name ? -1 : 1);
    };
    for (let m of n.sort(f))
      c -= 1e5, l[m.name] = c;
    for (let m of r) {
      let { section: b } = m.completion;
      b && (m.score += l[typeof b == "string" ? b : b.name]);
    }
  }
  let s = [], o = null, a = e.facet(Ir).compareCompletions;
  for (let l of r.sort((c, f) => f.score - c.score || a(c.completion, f.completion))) {
    let c = l.completion;
    !o || o.label != c.label || o.detail != c.detail || o.type != null && c.type != null && o.type != c.type || o.apply != c.apply || o.boost != c.boost ? s.push(l) : $v(l.completion) > $v(o) && (s[s.length - 1] = l), o = l.completion;
  }
  return s;
}
class Ps {
  constructor(e, r, n, i, s, o) {
    this.options = e, this.attrs = r, this.tooltip = n, this.timestamp = i, this.selected = s, this.disabled = o;
  }
  setSelected(e, r) {
    return e == this.selected || e >= this.options.length ? this : new Ps(this.options, bv(r, e), this.tooltip, this.timestamp, e, this.disabled);
  }
  static build(e, r, n, i, s) {
    let o = ZL(e, r);
    if (!o.length)
      return i && e.some(
        (l) => l.state == 1
        /* State.Pending */
      ) ? new Ps(i.options, i.attrs, i.tooltip, i.timestamp, i.selected, !0) : null;
    let a = r.facet(Ir).selectOnOpen ? 0 : -1;
    if (i && i.selected != a && i.selected != -1) {
      let l = i.options[i.selected].completion;
      for (let c = 0; c < o.length; c++)
        if (o[c].completion == l) {
          a = c;
          break;
        }
    }
    return new Ps(o, bv(n, a), {
      pos: e.reduce((l, c) => c.hasResult() ? Math.min(l, c.from) : l, 1e8),
      create: nP,
      above: s.aboveCursor
    }, i ? i.timestamp : Date.now(), a, !1);
  }
  map(e) {
    return new Ps(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: e.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
  }
}
class ac {
  constructor(e, r, n) {
    this.active = e, this.id = r, this.open = n;
  }
  static start() {
    return new ac(tP, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
  }
  update(e) {
    let { state: r } = e, n = r.facet(Ir), s = (n.override || r.languageDataAt("autocomplete", Li(r)).map(HL)).map((a) => (this.active.find((c) => c.source == a) || new rn(
      a,
      this.active.some(
        (c) => c.state != 0
        /* State.Inactive */
      ) ? 1 : 0
      /* State.Inactive */
    )).update(e, n));
    s.length == this.active.length && s.every((a, l) => a == this.active[l]) && (s = this.active);
    let o = this.open;
    o && e.docChanged && (o = o.map(e.changes)), e.selection || s.some((a) => a.hasResult() && e.changes.touchesRange(a.from, a.to)) || !JL(s, this.active) ? o = Ps.build(s, r, this.id, o, n) : o && o.disabled && !s.some(
      (a) => a.state == 1
      /* State.Pending */
    ) && (o = null), !o && s.every(
      (a) => a.state != 1
      /* State.Pending */
    ) && s.some((a) => a.hasResult()) && (s = s.map((a) => a.hasResult() ? new rn(
      a.source,
      0
      /* State.Inactive */
    ) : a));
    for (let a of e.effects)
      a.is(E1) && (o = o && o.setSelected(a.value, this.id));
    return s == this.active && o == this.open ? this : new ac(s, this.id, o);
  }
  get tooltip() {
    return this.open ? this.open.tooltip : null;
  }
  get attrs() {
    return this.open ? this.open.attrs : eP;
  }
}
function JL(t, e) {
  if (t == e)
    return !0;
  for (let r = 0, n = 0; ; ) {
    for (; r < t.length && !t[r].hasResult; )
      r++;
    for (; n < e.length && !e[n].hasResult; )
      n++;
    let i = r == t.length, s = n == e.length;
    if (i || s)
      return i == s;
    if (t[r++].result != e[n++].result)
      return !1;
  }
}
const eP = {
  "aria-autocomplete": "list"
};
function bv(t, e) {
  let r = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": t
  };
  return e > -1 && (r["aria-activedescendant"] = t + "-" + e), r;
}
const tP = [];
function uh(t) {
  return t.isUserEvent("input.type") ? "input" : t.isUserEvent("delete.backward") ? "delete" : null;
}
class rn {
  constructor(e, r, n = -1) {
    this.source = e, this.state = r, this.explicitPos = n;
  }
  hasResult() {
    return !1;
  }
  update(e, r) {
    let n = uh(e), i = this;
    n ? i = i.handleUserEvent(e, n, r) : e.docChanged ? i = i.handleChange(e) : e.selection && i.state != 0 && (i = new rn(
      i.source,
      0
      /* State.Inactive */
    ));
    for (let s of e.effects)
      if (s.is(oc))
        i = new rn(i.source, 1, s.value ? Li(e.state) : -1);
      else if (s.is(ga))
        i = new rn(
          i.source,
          0
          /* State.Inactive */
        );
      else if (s.is(b1))
        for (let o of s.value)
          o.source == i.source && (i = o);
    return i;
  }
  handleUserEvent(e, r, n) {
    return r == "delete" || !n.activateOnTyping ? this.map(e.changes) : new rn(
      this.source,
      1
      /* State.Pending */
    );
  }
  handleChange(e) {
    return e.changes.touchesRange(Li(e.startState)) ? new rn(
      this.source,
      0
      /* State.Inactive */
    ) : this.map(e.changes);
  }
  map(e) {
    return e.empty || this.explicitPos < 0 ? this : new rn(this.source, this.state, e.mapPos(this.explicitPos));
  }
}
class Hs extends rn {
  constructor(e, r, n, i, s) {
    super(e, 2, r), this.result = n, this.from = i, this.to = s;
  }
  hasResult() {
    return !0;
  }
  handleUserEvent(e, r, n) {
    var i;
    let s = e.changes.mapPos(this.from), o = e.changes.mapPos(this.to, 1), a = Li(e.state);
    if ((this.explicitPos < 0 ? a <= s : a < this.from) || a > o || r == "delete" && Li(e.startState) == this.from)
      return new rn(
        this.source,
        r == "input" && n.activateOnTyping ? 1 : 0
        /* State.Inactive */
      );
    let l = this.explicitPos < 0 ? -1 : e.changes.mapPos(this.explicitPos), c;
    return rP(this.result.validFor, e.state, s, o) ? new Hs(this.source, l, this.result, s, o) : this.result.update && (c = this.result.update(this.result, s, o, new g1(e.state, a, l >= 0))) ? new Hs(this.source, l, c, c.from, (i = c.to) !== null && i !== void 0 ? i : Li(e.state)) : new rn(this.source, 1, l);
  }
  handleChange(e) {
    return e.changes.touchesRange(this.from, this.to) ? new rn(
      this.source,
      0
      /* State.Inactive */
    ) : this.map(e.changes);
  }
  map(e) {
    return e.empty ? this : new Hs(this.source, this.explicitPos < 0 ? -1 : e.mapPos(this.explicitPos), this.result, e.mapPos(this.from), e.mapPos(this.to, 1));
  }
}
function rP(t, e, r, n) {
  if (!t)
    return !1;
  let i = e.sliceDoc(r, n);
  return typeof t == "function" ? t(i, r, n, e) : $1(t, !0).test(i);
}
const b1 = /* @__PURE__ */ Gt.define({
  map(t, e) {
    return t.map((r) => r.map(e));
  }
}), E1 = /* @__PURE__ */ Gt.define(), dn = /* @__PURE__ */ Mr.define({
  create() {
    return ac.start();
  },
  update(t, e) {
    return t.update(e);
  },
  provide: (t) => [
    Qh.from(t, (e) => e.tooltip),
    Rt.contentAttributes.from(t, (e) => e.attrs)
  ]
});
function v1(t, e) {
  const r = e.completion.apply || e.completion.label;
  let n = t.state.field(dn).active.find((i) => i.source == e.source);
  return n instanceof Hs ? (typeof r == "string" ? t.dispatch(Object.assign(Object.assign({}, YL(t.state, r, n.from, n.to)), { annotations: GL.of(e.completion) })) : r(t, e.completion, n.from, n.to), !0) : !1;
}
const nP = /* @__PURE__ */ jL(dn, v1);
function ml(t, e = "option") {
  return (r) => {
    let n = r.state.field(dn, !1);
    if (!n || !n.open || n.open.disabled || Date.now() - n.open.timestamp < r.state.facet(Ir).interactionDelay)
      return !1;
    let i = 1, s;
    e == "page" && (s = rT(r, n.open.tooltip)) && (i = Math.max(2, Math.floor(s.dom.offsetHeight / s.dom.querySelector("li").offsetHeight) - 1));
    let { length: o } = n.open.options, a = n.open.selected > -1 ? n.open.selected + i * (t ? 1 : -1) : t ? 0 : o - 1;
    return a < 0 ? a = e == "page" ? 0 : o - 1 : a >= o && (a = e == "page" ? o - 1 : 0), r.dispatch({ effects: E1.of(a) }), !0;
  };
}
const iP = (t) => {
  let e = t.state.field(dn, !1);
  return t.state.readOnly || !e || !e.open || e.open.selected < 0 || e.open.disabled || Date.now() - e.open.timestamp < t.state.facet(Ir).interactionDelay ? !1 : v1(t, e.open.options[e.open.selected]);
}, sP = (t) => t.state.field(dn, !1) ? (t.dispatch({ effects: oc.of(!0) }), !0) : !1, oP = (t) => {
  let e = t.state.field(dn, !1);
  return !e || !e.active.some(
    (r) => r.state != 0
    /* State.Inactive */
  ) ? !1 : (t.dispatch({ effects: ga.of(null) }), !0);
};
class aP {
  constructor(e, r) {
    this.active = e, this.context = r, this.time = Date.now(), this.updates = [], this.done = void 0;
  }
}
const lP = 50, cP = 1e3, uP = /* @__PURE__ */ mr.fromClass(class {
  constructor(t) {
    this.view = t, this.debounceUpdate = -1, this.running = [], this.debounceAccept = -1, this.pendingStart = !1, this.composing = 0;
    for (let e of t.state.field(dn).active)
      e.state == 1 && this.startQuery(e);
  }
  update(t) {
    let e = t.state.field(dn);
    if (!t.selectionSet && !t.docChanged && t.startState.field(dn) == e)
      return;
    let r = t.transactions.some((i) => (i.selection || i.docChanged) && !uh(i));
    for (let i = 0; i < this.running.length; i++) {
      let s = this.running[i];
      if (r || s.updates.length + t.transactions.length > lP && Date.now() - s.time > cP) {
        for (let o of s.context.abortListeners)
          try {
            o();
          } catch (a) {
            Tn(this.view.state, a);
          }
        s.context.abortListeners = null, this.running.splice(i--, 1);
      } else
        s.updates.push(...t.transactions);
    }
    this.debounceUpdate > -1 && clearTimeout(this.debounceUpdate), t.transactions.some((i) => i.effects.some((s) => s.is(oc))) && (this.pendingStart = !0);
    let n = this.pendingStart ? 50 : t.state.facet(Ir).activateOnTypingDelay;
    if (this.debounceUpdate = e.active.some((i) => i.state == 1 && !this.running.some((s) => s.active.source == i.source)) ? setTimeout(() => this.startUpdate(), n) : -1, this.composing != 0)
      for (let i of t.transactions)
        uh(i) == "input" ? this.composing = 2 : this.composing == 2 && i.selection && (this.composing = 3);
  }
  startUpdate() {
    this.debounceUpdate = -1, this.pendingStart = !1;
    let { state: t } = this.view, e = t.field(dn);
    for (let r of e.active)
      r.state == 1 && !this.running.some((n) => n.active.source == r.source) && this.startQuery(r);
  }
  startQuery(t) {
    let { state: e } = this.view, r = Li(e), n = new g1(e, r, t.explicitPos == r), i = new aP(t, n);
    this.running.push(i), Promise.resolve(t.source(n)).then((s) => {
      i.context.aborted || (i.done = s || null, this.scheduleAccept());
    }, (s) => {
      this.view.dispatch({ effects: ga.of(null) }), Tn(this.view.state, s);
    });
  }
  scheduleAccept() {
    this.running.every((t) => t.done !== void 0) ? this.accept() : this.debounceAccept < 0 && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(Ir).updateSyncTime));
  }
  // For each finished query in this.running, try to create a result
  // or, if appropriate, restart the query.
  accept() {
    var t;
    this.debounceAccept > -1 && clearTimeout(this.debounceAccept), this.debounceAccept = -1;
    let e = [], r = this.view.state.facet(Ir);
    for (let n = 0; n < this.running.length; n++) {
      let i = this.running[n];
      if (i.done === void 0)
        continue;
      if (this.running.splice(n--, 1), i.done) {
        let o = new Hs(i.active.source, i.active.explicitPos, i.done, i.done.from, (t = i.done.to) !== null && t !== void 0 ? t : Li(i.updates.length ? i.updates[0].startState : this.view.state));
        for (let a of i.updates)
          o = o.update(a, r);
        if (o.hasResult()) {
          e.push(o);
          continue;
        }
      }
      let s = this.view.state.field(dn).active.find((o) => o.source == i.active.source);
      if (s && s.state == 1)
        if (i.done == null) {
          let o = new rn(
            i.active.source,
            0
            /* State.Inactive */
          );
          for (let a of i.updates)
            o = o.update(a, r);
          o.state != 1 && e.push(o);
        } else
          this.startQuery(s);
    }
    e.length && this.view.dispatch({ effects: b1.of(e) });
  }
}, {
  eventHandlers: {
    blur(t) {
      let e = this.view.state.field(dn, !1);
      if (e && e.tooltip && this.view.state.facet(Ir).closeOnBlur) {
        let r = e.open && rT(this.view, e.open.tooltip);
        (!r || !r.dom.contains(t.relatedTarget)) && setTimeout(() => this.view.dispatch({ effects: ga.of(null) }), 10);
      }
    },
    compositionstart() {
      this.composing = 1;
    },
    compositionend() {
      this.composing == 3 && setTimeout(() => this.view.dispatch({ effects: oc.of(!1) }), 20), this.composing = 0;
    }
  }
}), dP = /* @__PURE__ */ Rt.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: "400px",
    boxSizing: "border-box"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: "30px" },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: "30px" },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'ƒ'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'○'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'◌'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'𝑥'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'𝐶'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'𝑡'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'∪'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'□'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'🔑︎'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'▢'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
}), $a = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
}, ds = /* @__PURE__ */ Gt.define({
  map(t, e) {
    let r = e.mapPos(t, -1, Wr.TrackAfter);
    return r ?? void 0;
  }
}), pm = /* @__PURE__ */ new class extends ms {
}();
pm.startSide = 1;
pm.endSide = -1;
const S1 = /* @__PURE__ */ Mr.define({
  create() {
    return Zt.empty;
  },
  update(t, e) {
    if (t = t.map(e.changes), e.selection) {
      let r = e.state.doc.lineAt(e.selection.main.head);
      t = t.update({ filter: (n) => n >= r.from && n <= r.to });
    }
    for (let r of e.effects)
      r.is(ds) && (t = t.update({ add: [pm.range(r.value, r.value + 1)] }));
    return t;
  }
});
function fP() {
  return [_P, S1];
}
const Jp = "()[]{}<>";
function y1(t) {
  for (let e = 0; e < Jp.length; e += 2)
    if (Jp.charCodeAt(e) == t)
      return Jp.charAt(e + 1);
  return Fh(t < 128 ? t : t + 1);
}
function T1(t, e) {
  return t.languageDataAt("closeBrackets", e)[0] || $a;
}
const pP = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), _P = /* @__PURE__ */ Rt.inputHandler.of((t, e, r, n) => {
  if ((pP ? t.composing : t.compositionStarted) || t.state.readOnly)
    return !1;
  let i = t.state.selection.main;
  if (n.length > 2 || n.length == 2 && vn(xr(n, 0)) == 1 || e != i.from || r != i.to)
    return !1;
  let s = gP(t.state, n);
  return s ? (t.dispatch(s), !0) : !1;
}), hP = ({ state: t, dispatch: e }) => {
  if (t.readOnly)
    return !1;
  let n = T1(t, t.selection.main.head).brackets || $a.brackets, i = null, s = t.changeByRange((o) => {
    if (o.empty) {
      let a = $P(t.doc, o.head);
      for (let l of n)
        if (l == a && Nc(t.doc, o.head) == y1(xr(l, 0)))
          return {
            changes: { from: o.head - l.length, to: o.head + l.length },
            range: $t.cursor(o.head - l.length)
          };
    }
    return { range: i = o };
  });
  return i || e(t.update(s, { scrollIntoView: !0, userEvent: "delete.backward" })), !i;
}, mP = [
  { key: "Backspace", run: hP }
];
function gP(t, e) {
  let r = T1(t, t.selection.main.head), n = r.brackets || $a.brackets;
  for (let i of n) {
    let s = y1(xr(i, 0));
    if (e == i)
      return s == i ? vP(t, i, n.indexOf(i + i + i) > -1, r) : bP(t, i, s, r.before || $a.before);
    if (e == s && C1(t, t.selection.main.from))
      return EP(t, i, s);
  }
  return null;
}
function C1(t, e) {
  let r = !1;
  return t.field(S1).between(0, t.doc.length, (n) => {
    n == e && (r = !0);
  }), r;
}
function Nc(t, e) {
  let r = t.sliceString(e, e + 2);
  return r.slice(0, vn(xr(r, 0)));
}
function $P(t, e) {
  let r = t.sliceString(e - 2, e);
  return vn(xr(r, 0)) == r.length ? r : r.slice(1);
}
function bP(t, e, r, n) {
  let i = null, s = t.changeByRange((o) => {
    if (!o.empty)
      return {
        changes: [{ insert: e, from: o.from }, { insert: r, from: o.to }],
        effects: ds.of(o.to + e.length),
        range: $t.range(o.anchor + e.length, o.head + e.length)
      };
    let a = Nc(t.doc, o.head);
    return !a || /\s/.test(a) || n.indexOf(a) > -1 ? {
      changes: { insert: e + r, from: o.head },
      effects: ds.of(o.head + e.length),
      range: $t.cursor(o.head + e.length)
    } : { range: i = o };
  });
  return i ? null : t.update(s, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function EP(t, e, r) {
  let n = null, i = t.changeByRange((s) => s.empty && Nc(t.doc, s.head) == r ? {
    changes: { from: s.head, to: s.head + r.length, insert: r },
    range: $t.cursor(s.head + r.length)
  } : n = { range: s });
  return n ? null : t.update(i, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function vP(t, e, r, n) {
  let i = n.stringPrefixes || $a.stringPrefixes, s = null, o = t.changeByRange((a) => {
    if (!a.empty)
      return {
        changes: [{ insert: e, from: a.from }, { insert: e, from: a.to }],
        effects: ds.of(a.to + e.length),
        range: $t.range(a.anchor + e.length, a.head + e.length)
      };
    let l = a.head, c = Nc(t.doc, l), f;
    if (c == e) {
      if (Ev(t, l))
        return {
          changes: { insert: e + e, from: l },
          effects: ds.of(l + e.length),
          range: $t.cursor(l + e.length)
        };
      if (C1(t, l)) {
        let b = r && t.sliceDoc(l, l + e.length * 3) == e + e + e ? e + e + e : e;
        return {
          changes: { from: l, to: l + b.length, insert: b },
          range: $t.cursor(l + b.length)
        };
      }
    } else {
      if (r && t.sliceDoc(l - 2 * e.length, l) == e + e && (f = vv(t, l - 2 * e.length, i)) > -1 && Ev(t, f))
        return {
          changes: { insert: e + e + e + e, from: l },
          effects: ds.of(l + e.length),
          range: $t.cursor(l + e.length)
        };
      if (t.charCategorizer(l)(c) != dr.Word && vv(t, l, i) > -1 && !SP(t, l, e, i))
        return {
          changes: { insert: e + e, from: l },
          effects: ds.of(l + e.length),
          range: $t.cursor(l + e.length)
        };
    }
    return { range: s = a };
  });
  return s ? null : t.update(o, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function Ev(t, e) {
  let r = zr(t).resolveInner(e + 1);
  return r.parent && r.from == e;
}
function SP(t, e, r, n) {
  let i = zr(t).resolveInner(e, -1), s = n.reduce((o, a) => Math.max(o, a.length), 0);
  for (let o = 0; o < 5; o++) {
    let a = t.sliceDoc(i.from, Math.min(i.to, i.from + r.length + s)), l = a.indexOf(r);
    if (!l || l > -1 && n.indexOf(a.slice(0, l)) > -1) {
      let f = i.firstChild;
      for (; f && f.from == i.from && f.to - f.from > r.length + l; ) {
        if (t.sliceDoc(f.to - r.length, f.to) == r)
          return !1;
        f = f.firstChild;
      }
      return !0;
    }
    let c = i.to == e && i.parent;
    if (!c)
      break;
    i = c;
  }
  return !1;
}
function vv(t, e, r) {
  let n = t.charCategorizer(e);
  if (n(t.sliceDoc(e - 1, e)) != dr.Word)
    return e;
  for (let i of r) {
    let s = e - i.length;
    if (t.sliceDoc(s, e) == i && n(t.sliceDoc(s - 1, s)) != dr.Word)
      return s;
  }
  return -1;
}
function yP(t = {}) {
  return [
    dn,
    Ir.of(t),
    uP,
    TP,
    dP
  ];
}
const w1 = [
  { key: "Ctrl-Space", run: sP },
  { key: "Escape", run: oP },
  { key: "ArrowDown", run: /* @__PURE__ */ ml(!0) },
  { key: "ArrowUp", run: /* @__PURE__ */ ml(!1) },
  { key: "PageDown", run: /* @__PURE__ */ ml(!0, "page") },
  { key: "PageUp", run: /* @__PURE__ */ ml(!1, "page") },
  { key: "Enter", run: iP }
], TP = /* @__PURE__ */ co.highest(/* @__PURE__ */ Sc.computeN([Ir], (t) => t.facet(Ir).defaultKeymap ? [w1] : []));
class CP {
  constructor(e, r, n) {
    this.from = e, this.to = r, this.diagnostic = n;
  }
}
class as {
  constructor(e, r, n) {
    this.diagnostics = e, this.panel = r, this.selected = n;
  }
  static init(e, r, n) {
    let i = e, s = n.facet(x1).markerFilter;
    s && (i = s(i));
    let o = Ot.set(i.map((a) => a.from == a.to || a.from == a.to - 1 && n.doc.lineAt(a.from).to == a.from ? Ot.widget({
      widget: new DP(a),
      diagnostic: a
    }).range(a.from) : Ot.mark({
      attributes: { class: "cm-lintRange cm-lintRange-" + a.severity + (a.markClass ? " " + a.markClass : "") },
      diagnostic: a
    }).range(a.from, a.to)), !0);
    return new as(o, r, no(o));
  }
}
function no(t, e = null, r = 0) {
  let n = null;
  return t.between(r, 1e9, (i, s, { spec: o }) => {
    if (!(e && o.diagnostic != e))
      return n = new CP(i, s, o.diagnostic), !1;
  }), n;
}
function wP(t, e) {
  let r = t.startState.doc.lineAt(e.pos);
  return !!(t.effects.some((n) => n.is(A1)) || t.changes.touchesRange(r.from, r.to));
}
function AP(t, e) {
  return t.field(pn, !1) ? e : e.concat(Gt.appendConfig.of(PP));
}
const A1 = /* @__PURE__ */ Gt.define(), _m = /* @__PURE__ */ Gt.define(), R1 = /* @__PURE__ */ Gt.define(), pn = /* @__PURE__ */ Mr.define({
  create() {
    return new as(Ot.none, null, null);
  },
  update(t, e) {
    if (e.docChanged) {
      let r = t.diagnostics.map(e.changes), n = null;
      if (t.selected) {
        let i = e.changes.mapPos(t.selected.from, 1);
        n = no(r, t.selected.diagnostic, i) || no(r, null, i);
      }
      t = new as(r, t.panel, n);
    }
    for (let r of e.effects)
      r.is(A1) ? t = as.init(r.value, t.panel, e.state) : r.is(_m) ? t = new as(t.diagnostics, r.value ? kc.open : null, t.selected) : r.is(R1) && (t = new as(t.diagnostics, t.panel, r.value));
    return t;
  },
  provide: (t) => [
    fa.from(t, (e) => e.panel),
    Rt.decorations.from(t, (e) => e.diagnostics)
  ]
}), RP = /* @__PURE__ */ Ot.mark({ class: "cm-lintRange cm-lintRange-active" });
function xP(t, e, r) {
  let { diagnostics: n } = t.state.field(pn), i = [], s = 2e8, o = 0;
  n.between(e - (r < 0 ? 1 : 0), e + (r > 0 ? 1 : 0), (l, c, { spec: f }) => {
    e >= l && e <= c && (l == c || (e > l || r > 0) && (e < c || r < 0)) && (i.push(f.diagnostic), s = Math.min(l, s), o = Math.max(c, o));
  });
  let a = t.state.facet(x1).tooltipFilter;
  return a && (i = a(i)), i.length ? {
    pos: s,
    end: o,
    above: t.state.doc.lineAt(s).to < o,
    create() {
      return { dom: NP(t, i) };
    }
  } : null;
}
function NP(t, e) {
  return nr("ul", { class: "cm-tooltip-lint" }, e.map((r) => k1(t, r, !1)));
}
const kP = (t) => {
  let e = t.state.field(pn, !1);
  (!e || !e.panel) && t.dispatch({ effects: AP(t.state, [_m.of(!0)]) });
  let r = da(t, kc.open);
  return r && r.dom.querySelector(".cm-panel-lint ul").focus(), !0;
}, Sv = (t) => {
  let e = t.state.field(pn, !1);
  return !e || !e.panel ? !1 : (t.dispatch({ effects: _m.of(!1) }), !0);
}, IP = (t) => {
  let e = t.state.field(pn, !1);
  if (!e)
    return !1;
  let r = t.state.selection.main, n = e.diagnostics.iter(r.to + 1);
  return !n.value && (n = e.diagnostics.iter(0), !n.value || n.from == r.from && n.to == r.to) ? !1 : (t.dispatch({ selection: { anchor: n.from, head: n.to }, scrollIntoView: !0 }), !0);
}, OP = [
  { key: "Mod-Shift-m", run: kP, preventDefault: !0 },
  { key: "F8", run: IP }
], x1 = /* @__PURE__ */ xt.define({
  combine(t) {
    return Object.assign({ sources: t.map((e) => e.source) }, Pn(t.map((e) => e.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null
    }, {
      needsRefresh: (e, r) => e ? r ? (n) => e(n) || r(n) : e : r
    }));
  }
});
function N1(t) {
  let e = [];
  if (t)
    e:
      for (let { name: r } of t) {
        for (let n = 0; n < r.length; n++) {
          let i = r[n];
          if (/[a-zA-Z]/.test(i) && !e.some((s) => s.toLowerCase() == i.toLowerCase())) {
            e.push(i);
            continue e;
          }
        }
        e.push("");
      }
  return e;
}
function k1(t, e, r) {
  var n;
  let i = r ? N1(e.actions) : [];
  return nr("li", { class: "cm-diagnostic cm-diagnostic-" + e.severity }, nr("span", { class: "cm-diagnosticText" }, e.renderMessage ? e.renderMessage() : e.message), (n = e.actions) === null || n === void 0 ? void 0 : n.map((s, o) => {
    let a = !1, l = (b) => {
      if (b.preventDefault(), a)
        return;
      a = !0;
      let C = no(t.state.field(pn).diagnostics, e);
      C && s.apply(t, C.from, C.to);
    }, { name: c } = s, f = i[o] ? c.indexOf(i[o]) : -1, m = f < 0 ? c : [
      c.slice(0, f),
      nr("u", c.slice(f, f + 1)),
      c.slice(f + 1)
    ];
    return nr("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: l,
      onmousedown: l,
      "aria-label": ` Action: ${c}${f < 0 ? "" : ` (access key "${i[o]})"`}.`
    }, m);
  }), e.source && nr("div", { class: "cm-diagnosticSource" }, e.source));
}
class DP extends bi {
  constructor(e) {
    super(), this.diagnostic = e;
  }
  eq(e) {
    return e.diagnostic == this.diagnostic;
  }
  toDOM() {
    return nr("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
  }
}
class yv {
  constructor(e, r) {
    this.diagnostic = r, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = k1(e, r, !0), this.dom.id = this.id, this.dom.setAttribute("role", "option");
  }
}
class kc {
  constructor(e) {
    this.view = e, this.items = [];
    let r = (i) => {
      if (i.keyCode == 27)
        Sv(this.view), this.view.focus();
      else if (i.keyCode == 38 || i.keyCode == 33)
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      else if (i.keyCode == 40 || i.keyCode == 34)
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      else if (i.keyCode == 36)
        this.moveSelection(0);
      else if (i.keyCode == 35)
        this.moveSelection(this.items.length - 1);
      else if (i.keyCode == 13)
        this.view.focus();
      else if (i.keyCode >= 65 && i.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic: s } = this.items[this.selectedIndex], o = N1(s.actions);
        for (let a = 0; a < o.length; a++)
          if (o[a].toUpperCase().charCodeAt(0) == i.keyCode) {
            let l = no(this.view.state.field(pn).diagnostics, s);
            l && s.actions[a].apply(e, l.from, l.to);
          }
      } else
        return;
      i.preventDefault();
    }, n = (i) => {
      for (let s = 0; s < this.items.length; s++)
        this.items[s].dom.contains(i.target) && this.moveSelection(s);
    };
    this.list = nr("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: r,
      onclick: n
    }), this.dom = nr("div", { class: "cm-panel-lint" }, this.list, nr("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => Sv(this.view)
    }, "×")), this.update();
  }
  get selectedIndex() {
    let e = this.view.state.field(pn).selected;
    if (!e)
      return -1;
    for (let r = 0; r < this.items.length; r++)
      if (this.items[r].diagnostic == e.diagnostic)
        return r;
    return -1;
  }
  update() {
    let { diagnostics: e, selected: r } = this.view.state.field(pn), n = 0, i = !1, s = null;
    for (e.between(0, this.view.state.doc.length, (o, a, { spec: l }) => {
      let c = -1, f;
      for (let m = n; m < this.items.length; m++)
        if (this.items[m].diagnostic == l.diagnostic) {
          c = m;
          break;
        }
      c < 0 ? (f = new yv(this.view, l.diagnostic), this.items.splice(n, 0, f), i = !0) : (f = this.items[c], c > n && (this.items.splice(n, c - n), i = !0)), r && f.diagnostic == r.diagnostic ? f.dom.hasAttribute("aria-selected") || (f.dom.setAttribute("aria-selected", "true"), s = f) : f.dom.hasAttribute("aria-selected") && f.dom.removeAttribute("aria-selected"), n++;
    }); n < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0); )
      i = !0, this.items.pop();
    this.items.length == 0 && (this.items.push(new yv(this.view, {
      from: -1,
      to: -1,
      severity: "info",
      message: this.view.state.phrase("No diagnostics")
    })), i = !0), s ? (this.list.setAttribute("aria-activedescendant", s.id), this.view.requestMeasure({
      key: this,
      read: () => ({ sel: s.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
      write: ({ sel: o, panel: a }) => {
        let l = a.height / this.list.offsetHeight;
        o.top < a.top ? this.list.scrollTop -= (a.top - o.top) / l : o.bottom > a.bottom && (this.list.scrollTop += (o.bottom - a.bottom) / l);
      }
    })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), i && this.sync();
  }
  sync() {
    let e = this.list.firstChild;
    function r() {
      let n = e;
      e = n.nextSibling, n.remove();
    }
    for (let n of this.items)
      if (n.dom.parentNode == this.list) {
        for (; e != n.dom; )
          r();
        e = n.dom.nextSibling;
      } else
        this.list.insertBefore(n.dom, e);
    for (; e; )
      r();
  }
  moveSelection(e) {
    if (this.selectedIndex < 0)
      return;
    let r = this.view.state.field(pn), n = no(r.diagnostics, this.items[e].diagnostic);
    n && this.view.dispatch({
      selection: { anchor: n.from, head: n.to },
      scrollIntoView: !0,
      effects: R1.of(n)
    });
  }
  static open(e) {
    return new kc(e);
  }
}
function MP(t, e = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${e}>${encodeURIComponent(t)}</svg>')`;
}
function gl(t) {
  return MP(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${t}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
const LP = /* @__PURE__ */ Rt.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ gl("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ gl("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ gl("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ gl("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
}), PP = [
  pn,
  /* @__PURE__ */ Rt.decorations.compute([pn], (t) => {
    let { selected: e, panel: r } = t.field(pn);
    return !e || !r || e.from == e.to ? Ot.none : Ot.set([
      RP.range(e.from, e.to)
    ]);
  }),
  /* @__PURE__ */ YD(xP, { hideOn: wP }),
  LP
], FP = [
  Io(),
  t2(),
  ED(),
  gM(),
  V2(),
  cD(),
  _D(),
  Qt.allowMultipleSelections.of(!0),
  O2(),
  vT(j2, { fallback: !0 }),
  nM(),
  fP(),
  yP(),
  OD(),
  LD(),
  wD(),
  bL(),
  Sc.of([
    ...mP,
    ...n1,
    ...m1,
    ...IT,
    ...gT,
    ...w1,
    ...OP
  ])
];
function BP(t, e = t.state) {
  const r = /* @__PURE__ */ new Set();
  for (const { from: n, to: i } of t.visibleRanges) {
    let s = n;
    for (; s <= i; ) {
      const o = e.doc.lineAt(s);
      r.has(o) || r.add(o), s = o.to + 1;
    }
  }
  return r;
}
function dh(t) {
  const e = t.selection.main.head;
  return t.doc.lineAt(e);
}
function Tv(t, e) {
  let r = 0;
  e:
    for (let n = 0; n < t.length; n++)
      switch (t[n]) {
        case " ": {
          r += 1;
          continue e;
        }
        case "	": {
          r += e - r % e;
          continue e;
        }
        case "\r":
          continue e;
        default:
          break e;
      }
  return r;
}
const lc = /* @__PURE__ */ xt.define({
  combine(t) {
    return Pn(t, {
      highlightActiveBlock: !0,
      hideFirstIndent: !1,
      markerType: "fullScope",
      thickness: 1
    });
  }
});
class UP {
  /**
   * @param lines - The set of lines to get the indentation map for.
   * @param state - The {@link EditorState} to derive the indentation map from.
   * @param unitWidth - The width of the editor's indent unit.
   * @param markerType - The type of indentation to use (terminate at end of scope vs last line of code in scope)
   */
  constructor(e, r, n, i) {
    this.lines = e, this.state = r, this.map = /* @__PURE__ */ new Map(), this.unitWidth = n, this.markerType = i;
    for (const s of this.lines)
      this.add(s);
    this.state.facet(lc).highlightActiveBlock && this.findAndSetActiveLines();
  }
  /**
   * Checks if the indentation map has an entry for the given line.
   *
   * @param line - The {@link Line} or line number to check for.
   */
  has(e) {
    return this.map.has(typeof e == "number" ? e : e.number);
  }
  /**
   * Returns the {@link IndentEntry} for the given line.
   *
   * Note that this function will throw an error if the line does not exist in the map.
   *
   * @param line - The {@link Line} or line number to get the entry for.
   */
  get(e) {
    const r = this.map.get(typeof e == "number" ? e : e.number);
    if (!r)
      throw new Error("Line not found in indentation map");
    return r;
  }
  /**
   * Sets the {@link IndentEntry} for the given line.
   *
   * @param line - The {@link Line} to set the entry for.
   * @param col - The visual beginning whitespace width of the line.
   * @param level - The indentation level of the line.
   */
  set(e, r, n) {
    const i = !e.text.trim().length, s = { line: e, col: r, level: n, empty: i };
    return this.map.set(s.line.number, s), s;
  }
  /**
   * Adds a line to the indentation map.
   *
   * @param line - The {@link Line} to add to the map.
   */
  add(e) {
    if (this.has(e))
      return this.get(e);
    if (!e.length || !e.text.trim().length) {
      if (e.number === 1)
        return this.set(e, 0, 0);
      if (e.number === this.state.doc.lines) {
        const o = this.closestNonEmpty(e, -1);
        return this.set(e, 0, o.level);
      }
      const i = this.closestNonEmpty(e, -1), s = this.closestNonEmpty(e, 1);
      return i.level >= s.level && this.markerType !== "codeOnly" ? this.set(e, 0, i.level) : i.empty && i.level === 0 && s.level !== 0 ? this.set(e, 0, 0) : s.level > i.level ? this.set(e, 0, i.level + 1) : this.set(e, 0, s.level);
    }
    const r = Tv(e.text, this.state.tabSize), n = Math.floor(r / this.unitWidth);
    return this.set(e, r, n);
  }
  /**
   * Finds the closest non-empty line, starting from the given line.
   *
   * @param from - The {@link Line} to start from.
   * @param dir - The direction to search in. Either `1` or `-1`.
   */
  closestNonEmpty(e, r) {
    let n = e.number + r;
    for (; r === -1 ? n >= 1 : n <= this.state.doc.lines; ) {
      if (this.has(n)) {
        const o = this.get(n);
        if (!o.empty)
          return o;
      }
      const s = this.state.doc.line(n);
      if (s.text.trim().length) {
        const o = Tv(s.text, this.state.tabSize), a = Math.floor(o / this.unitWidth);
        return this.set(s, o, a);
      }
      n += r;
    }
    const i = this.state.doc.line(r === -1 ? 1 : this.state.doc.lines);
    return this.set(i, 0, 0);
  }
  /**
   * Finds the state's active block (via the current selection) and sets all
   * the active indent level for the lines in the block.
   */
  findAndSetActiveLines() {
    const e = dh(this.state);
    if (!this.has(e))
      return;
    let r = this.get(e);
    if (this.has(r.line.number + 1)) {
      const s = this.get(r.line.number + 1);
      s.level > r.level && (r = s);
    }
    if (this.has(r.line.number - 1)) {
      const s = this.get(r.line.number - 1);
      s.level > r.level && (r = s);
    }
    if (r.level === 0)
      return;
    r.active = r.level;
    let n, i;
    for (n = r.line.number; n > 1; n--) {
      if (!this.has(n - 1))
        continue;
      const s = this.get(n - 1);
      if (s.level < r.level)
        break;
      s.active = r.level;
    }
    for (i = r.line.number; i < this.state.doc.lines; i++) {
      if (!this.has(i + 1))
        continue;
      const s = this.get(i + 1);
      if (s.level < r.level)
        break;
      s.active = r.level;
    }
  }
}
function qP(t) {
  const e = {
    light: "#F0F1F2",
    dark: "#2B3245",
    activeLight: "#E4E5E6",
    activeDark: "#3C445C"
  };
  let r = e;
  return t && (r = Object.assign(Object.assign({}, e), t)), Rt.baseTheme({
    "&light": {
      "--indent-marker-bg-color": r.light,
      "--indent-marker-active-bg-color": r.activeLight
    },
    "&dark": {
      "--indent-marker-bg-color": r.dark,
      "--indent-marker-active-bg-color": r.activeDark
    },
    ".cm-line": {
      position: "relative"
    },
    // this pseudo-element is used to draw the indent markers,
    // while still allowing the line to have its own background.
    ".cm-indent-markers::before": {
      content: '""',
      position: "absolute",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      background: "var(--indent-markers)",
      pointerEvents: "none",
      zIndex: "-1"
    }
  });
}
function $l(t, e, r, n, i) {
  return `${`repeating-linear-gradient(to right, var(${t}) 0 ${e}px, transparent ${e}px ${r}ch)`} ${n * r}.5ch/calc(${r * i}ch - 1px) no-repeat`;
}
function zP(t, e, r, n) {
  const { level: i, active: s } = t;
  if (r && i === 0)
    return [];
  const o = r ? 1 : 0, a = [];
  if (s !== void 0) {
    const l = s - o - 1;
    l > 0 && a.push($l("--indent-marker-bg-color", n, e, o, l)), a.push($l("--indent-marker-active-bg-color", n, e, s - 1, 1)), s !== i && a.push($l("--indent-marker-bg-color", n, e, s, i - s));
  } else
    a.push($l("--indent-marker-bg-color", n, e, o, i - o));
  return a.join(",");
}
class GP {
  constructor(e) {
    this.view = e, this.unitWidth = to(e.state), this.currentLineNumber = dh(e.state).number, this.generate(e.state);
  }
  update(e) {
    const r = to(e.state), n = r !== this.unitWidth;
    n && (this.unitWidth = r);
    const i = dh(e.state).number, s = i !== this.currentLineNumber;
    this.currentLineNumber = i;
    const o = e.state.facet(lc).highlightActiveBlock && s;
    (e.docChanged || e.viewportChanged || n || o) && this.generate(e.state);
  }
  generate(e) {
    const r = new fi(), n = BP(this.view, e), { hideFirstIndent: i, markerType: s, thickness: o } = e.facet(lc), a = new UP(n, e, this.unitWidth, s);
    for (const l of n) {
      const c = a.get(l.number);
      if (!(c != null && c.level))
        continue;
      const f = zP(c, this.unitWidth, i, o);
      r.add(l.from, l.from, Ot.line({
        class: "cm-indent-markers",
        attributes: {
          style: `--indent-markers: ${f}`
        }
      }));
    }
    this.decorations = r.finish();
  }
}
function YP(t = {}) {
  return [
    lc.of(t),
    qP(t.colors),
    mr.fromClass(GP, {
      decorations: (e) => e.decorations
    })
  ];
}
const HP = ":host{display:block;z-index:1200}.toolbar{display:flex;justify-content:space-between;align-items:center;width:100%}::slotted(*){margin:0}.toolbar__start,.toolbar__center,.toolbar__end{display:flex}.toolbar__top,.toolbar__bottom{flex-direction:row;position:fixed;left:0;right:0}.toolbar__top{top:0}.toolbar__bottom{bottom:0}.toolbar__left,.toolbar__right{flex-direction:column;position:fixed;top:0;bottom:0}.toolbar__left .toolbar__start,.toolbar__right .toolbar__start,.toolbar__left .toolbar__center,.toolbar__right .toolbar__center,.toolbar__left .toolbar__end,.toolbar__right .toolbar__end{flex-direction:column;align-items:stretch}.toolbar__left{left:0}.toolbar__right{right:0}";
var VP = Object.defineProperty, WP = Object.getOwnPropertyDescriptor, I1 = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? WP(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && VP(e, r, i), i;
};
const Ho = class Ho extends hn {
  constructor() {
    super(...arguments), this.fixed = !1, this.placement = "top";
  }
  get tagTitle() {
    return "Barre d'outils";
  }
  toAsciidoc() {
    throw new Error("Method not implemented.");
  }
  render() {
    const e = {
      toolbar: !0,
      toolbar__top: this.fixed && this.placement === "top",
      toolbar__bottom: this.fixed && this.placement === "bottom"
    };
    return Ct`
      <div part="base" class=${Ur(e)}>
        <div part="start" class="toolbar__start">
          <slot name="start"></slot>
        </div>
        <div part="center" class="toolbar__center">
          <slot name="center"></slot>
        </div>
        <div part="end" class="toolbar__end">
          <slot name="end"></slot>
        </div>
      </div>
    `;
  }
};
Ho.styles = [
  on(Ho, Ho, "styles"),
  jr(HP),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
/* layer: default */
.fixed{position:fixed;}
.static{position:static;}`
];
let ba = Ho;
I1([
  ut({ type: Boolean, reflect: !0 })
], ba.prototype, "fixed", 2);
I1([
  ut({ type: String, reflect: !0 })
], ba.prototype, "placement", 2);
customElements && !customElements.get("toolbar-it") && customElements.define("toolbar-it", ba);
function fh(t, e, r) {
  const n = new CustomEvent(e, {
    bubbles: !0,
    cancelable: !1,
    composed: !0,
    detail: {},
    ...r
  });
  return t.dispatchEvent(n), n;
}
const KP = ":host{display:block}.answer-form__fieldset{margin-bottom:var(--sl-spacing-medium);padding:var(--sl-spacing-medium);border:1px solid var(--sl-color-neutral-400);border-radius:var(--sl-border-radius-large)}.answer-form__legend{padding:var(--sl-spacing-3x-small);color:var(--sl-color-neutral-400)}";
var QP = Object.defineProperty, jP = Object.getOwnPropertyDescriptor, Ic = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? jP(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && QP(e, r, i), i;
};
const Vo = class Vo extends hn {
  constructor() {
    super(...arguments), this.legend = "", this.btnFeedback = !1, this.fieldset = !1;
  }
  render() {
    const e = {
      "answer-form__fieldset": !0,
      rtl: this.dir === "rtl"
    };
    return Ct`
      <form part="base" class="answer-form">
        ${this.fieldset ? Ct`
            <fieldset class=${Ur(e)}>
              <legend class="answer-form__legend">${this.legend}</legend>
              ${this.renderAnswer()}
            </fieldset>
            ` : this.renderAnswer()}
      </form>
    `;
  }
};
Vo.styles = [
  on(Vo, Vo, "styles"),
  jr(KP),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
/* layer: default */
.static{position:static;}`
];
let Es = Vo;
Ic([
  Ht("form.answer-form")
], Es.prototype, "form", 2);
Ic([
  ut({ type: String, reflect: !0 })
], Es.prototype, "legend", 2);
Ic([
  ut({ type: Boolean, reflect: !0, attribute: "btn-feedback" })
], Es.prototype, "btnFeedback", 2);
Ic([
  ut({ type: Boolean, reflect: !0 })
], Es.prototype, "fieldset", 2);
const XP = {
  // @codemirror/view
  "Control character": "caractère de contrôle",
  // @codemirror/commands
  "Selection deleted": "sélection supprimée",
  // @codemirror/language
  "Folded lines": "lignes pliées",
  "Unfolded lines": "lignes dépliées",
  to: "à",
  "folded code": "code plié",
  unfold: "déplier",
  "Fold line": "plier la ligne",
  "Unfold line": "déplier la ligne",
  // @codemirror/search
  "Go to line": "atteindre la ligne (ligne:colonne) ",
  go: "ok",
  Find: "chercher",
  Replace: "remplacer",
  next: "suivant",
  previous: "précédent",
  all: "tout",
  "match case": "respecter la casse",
  "by word": "mot entier",
  regexp: "expression régulière",
  replace: "remplacer",
  "replace all": "remplacer tout",
  close: "fermer",
  "current match": "correspondance courante",
  "replaced $ matches": "$ correspondances remplacées",
  "replaced match on line $": "correspondance remplacée à la ligne $",
  "on line": "en ligne",
  // @codemirror/autocomplete
  Completions: "complétions",
  // @codemirror/lint
  Diagnostics: "diagnostics",
  "No diagnostics": "pas de diagnostic"
};
function O1() {
  const t = navigator.userAgent;
  return t.search("Windows") !== -1 ? "windows" : t.search("Mac") !== -1 ? "mac" : t.search("X11") !== -1 ? "unix" : t.search("Linux") !== -1 ? "linux" : "unknown";
}
function ZP() {
  const t = [], e = {
    "Mod-z": "undo",
    "Mod-y": "redo",
    "Mod-u": "undoSelection",
    "Alt-u": "redoSelection",
    "Ctrl-Shift-z": "redo"
  };
  return IT.forEach((r) => {
    if ((r.key || r.mac) && r.run) {
      if (r.key && r.mac)
        t.push({ name: e[r.key], key: r.mac.replace("Mod-", "Cmd-"), run: r.run });
      else if (r.key && !r.mac) {
        const n = O1() === "mac" ? "Cmd-" : "Ctrl-";
        t.push({ name: e[r.key], key: r.key.replace("Mod-", n), run: r.run });
      }
    }
  }), t;
}
function JP() {
  let t = [];
  return n1.concat(gT).concat(m1).concat([i1]).forEach((r) => {
    var n, i;
    if ((r.key || r.mac) && r.run && r.run.name) {
      if (r.mac)
        t.push({ name: r.run.name, key: r.mac.replace("Mod-", "Cmd-"), run: r.run }), (n = r.shift) != null && n.name && t.push({ name: r.shift.name, key: `Shift-${r.mac}`.replace("Mod-", "Cmd-"), run: r.run });
      else if (r.key && !r.mac) {
        const s = O1() === "mac" ? "Cmd-" : "Ctrl-";
        t.push({ name: r.run.name, key: r.key.replace("Mod-", s), run: r.run }), (i = r.shift) != null && i.name && t.push({ name: r.shift.name, key: `Shift-${r.key}`.replace("Mod-", s), run: r.run });
      }
    }
  }), t = t.concat(ZP()), t.sort((r, n) => r.name < n.name ? -1 : 1), t;
}
const D1 = ({ variant: t, settings: e, styles: r }) => {
  const n = Rt.theme(
    {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      "&": {
        backgroundColor: e.background,
        color: e.foreground
      },
      ".cm-content": {
        caretColor: e.caret
      },
      ".cm-cursor, .cm-dropCursor": {
        borderLeftColor: e.caret
      },
      "&.cm-focused .cm-selectionBackground, .cm-content ::selection": {
        backgroundColor: e.selection
      },
      ".cm-activeLine": {
        backgroundColor: e.lineHighlight
      },
      ".cm-gutters": {
        backgroundColor: e.gutterBackground,
        color: e.gutterForeground
      },
      ".cm-activeLineGutter": {
        backgroundColor: e.lineHighlight
      }
    },
    {
      dark: t === "dark"
    }
  ), i = Ba.define(r);
  return [n, vT(i)];
}, Cv = D1({
  variant: "dark",
  settings: {
    background: "#00254b",
    foreground: "#FFFFFF",
    caret: "#FFFFFF",
    selection: "#B36539BF",
    gutterBackground: "#00254b",
    gutterForeground: "#FFFFFF70",
    lineHighlight: "#00000059"
  },
  styles: [
    {
      tag: mt.comment,
      color: "#0088FF"
    },
    {
      tag: mt.string,
      color: "#3AD900"
    },
    {
      tag: mt.regexp,
      color: "#80FFC2"
    },
    {
      tag: [mt.number, mt.bool, mt.null],
      color: "#FF628C"
    },
    {
      tag: [mt.definitionKeyword, mt.modifier],
      color: "#FFEE80"
    },
    {
      tag: mt.variableName,
      color: "#CCCCCC"
    },
    {
      tag: mt.self,
      color: "#FF80E1"
    },
    {
      tag: [
        mt.className,
        mt.definition(mt.propertyName),
        mt.function(mt.variableName),
        mt.definition(mt.typeName),
        mt.labelName
      ],
      color: "#FFDD00"
    },
    {
      tag: [mt.keyword, mt.operator],
      color: "#FF9D00"
    },
    {
      tag: [mt.propertyName, mt.typeName],
      color: "#80FFBB"
    },
    {
      tag: mt.special(mt.brace),
      color: "#EDEF7D"
    },
    {
      tag: mt.attributeName,
      color: "#9EFFFF"
    },
    {
      tag: mt.derefOperator,
      color: "#fff"
    }
  ]
}), wv = D1({
  variant: "light",
  settings: {
    background: "#faf4ed",
    foreground: "#575279",
    caret: "#575279",
    selection: "#6e6a8614",
    gutterBackground: "#faf4ed",
    gutterForeground: "#57527970",
    lineHighlight: "#6e6a860d"
  },
  styles: [
    {
      tag: mt.comment,
      color: "#9893a5"
    },
    {
      tag: [mt.bool, mt.null],
      color: "#286983"
    },
    {
      tag: mt.number,
      color: "#d7827e"
    },
    {
      tag: mt.className,
      color: "#d7827e"
    },
    {
      tag: [mt.angleBracket, mt.tagName, mt.typeName],
      color: "#56949f"
    },
    {
      tag: mt.attributeName,
      color: "#907aa9"
    },
    {
      tag: mt.punctuation,
      color: "#797593"
    },
    {
      tag: [mt.keyword, mt.modifier],
      color: "#286983"
    },
    {
      tag: [mt.string, mt.regexp],
      color: "#ea9d34"
    },
    {
      tag: mt.variableName,
      color: "#d7827e"
    }
  ]
}), e3 = ":host{display:block}:host:focus{border:1px solid var(--color-primary)}.code-edit{display:flex;flex-direction:column}.code-edit:hover .menu-button{display:block}.editor{outline:none;border-radius:.5em}.editor-base{position:relative}.cm-editor{border-radius:.375rem;padding:4px 0}.dropdown__shortcuts__label{display:inline-flex;justify-content:space-between}.menu-button{display:none;position:absolute;top:4px;right:4px}.sl-toast-stack{left:0;right:auto}";
var t3 = Object.defineProperty, r3 = Object.getOwnPropertyDescriptor, Zr = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? r3(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && t3(e, r, i), i;
};
const n3 = Rt.theme({
  "&.cm-editor.cm-focused": { outline: "none" }
}), i3 = Rt.domEventHandlers({
  keyup(t, e) {
    fh(e.dom, "keyup-mouseup-it");
  },
  mouseup(t, e) {
    fh(e.dom, "keyup-mouseup-it");
  }
}), s3 = [
  {
    key: "F1",
    run(t) {
      return fh(t.dom, "toggle-toolbar-it"), !0;
    }
  },
  {
    key: "F4",
    run(t) {
      const e = M1.keymap.filter((r) => r.name === "gotoLine");
      return e.length === 1 && e[0].run(t), !0;
    }
  },
  i1
];
var ui;
const Hr = (ui = class extends Es {
  constructor() {
    super(...arguments), this._language = "text", this._placeholder = "F1: afficher/masquer les barres d'outils et d'informations", this._readOnly = !1, this._indentSize = 2, this._theme = "dark", this.message = "", this.extensions = [], this.initialDoc = "", this.languageConfig = new Yn(), this.lineNumbersConfig = new Yn(), this.placeholderConfig = new Yn(), this.readOnlyConfig = new Yn(), this.indentationConfig = new Yn(), this.themeConfig = new Yn(), this.cursorLine = 0, this.cursorColumn = 0, this.lineNumbers = !1, this.src = "", this.toolbar = !1;
  }
  get indentSize() {
    return this._indentSize;
  }
  set indentSize(e) {
    e !== this._indentSize && (this._indentSize = e, this.editor && this.setIndentationExtension());
  }
  get language() {
    return this._language;
  }
  set language(e) {
    e !== this._language && (this._language = e, this.editor && this.setLanguageExtension());
  }
  get placeholder() {
    return this._placeholder;
  }
  set placeholder(e) {
    e !== this._placeholder && (this._placeholder = e, this.editor && this.setPlaceholderExtension());
  }
  get readOnly() {
    return this._readOnly;
  }
  set readOnly(e) {
    e !== this._readOnly && (this._readOnly = e, this.editor && this.setReadOnlyExtension());
  }
  get theme() {
    return this._theme;
  }
  set theme(e) {
    e !== this._theme && (this._theme = e, this.editor && this.setThemeExtension());
  }
  get value() {
    let e = this.initialDoc;
    return this.editor && (e = this.editor.state.doc.toString()), e;
  }
  set value(e) {
    e !== this.value && this.editor && this.editor.dispatch({
      changes: {
        from: 0,
        to: this.editor.state.doc.length,
        insert: e
      }
    });
  }
  /**
   * La réponse de l'éditeur.
   *
   * @returns {string}
   * @memberof CodeEditIt
   */
  answer() {
    return this.value;
  }
  get indentString() {
    let e = "";
    for (let r = 0; r < this.indentSize; r++)
      e = e.concat(" ");
    return e;
  }
  /**
   * Le nom courant de l'élément.
   *
   * @readonly
   * @type {string}
   * @memberof CodeEditIt
   */
  get tagTitle() {
    return `Editeur de code ${this.language}`;
  }
  createListeners() {
    this.addEventListener("keyup-mouseup-it", () => {
      const e = this.editor.state;
      this.cursorLine = e.doc.lineAt(e.selection.main.head).number, this.cursorColumn = e.selection.main.head - e.doc.lineAt(e.selection.main.head).from;
    }), this.addEventListener("toggle-toolbar-it", () => {
      this.toolbar = !this.toolbar;
    });
  }
  async fetchContent(e) {
    return await this.fetchSrc(e ?? "");
  }
  async fetchSrc(e) {
    return (await fetch(e)).text();
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async firstUpdated(e) {
    this.legend = `Editeur de code ${this.language}`, this.extensions = this.getInitialExtensions(), this.editor = new Rt({
      doc: "",
      extensions: this.extensions,
      parent: this.editorContainer,
      root: this.shadowRoot
    }), this.value = await this.getInitialDoc(), this.setLanguageExtension(), this.createListeners();
  }
  getCmLang() {
    return [];
  }
  getHelpUrl(e) {
    return this.language && this.language !== "text" ? `https://devdocs.io/${e}/` : "";
  }
  async getInitialDoc() {
    if (this.initialDoc = "", this.src)
      console.log("SRC", this.src), await this.fetchContent(this.src).then((e) => {
        console.log("RESP", e), this.initialDoc += e;
      }), console.log("RES", this.initialDoc);
    else {
      const e = this.querySelector('script[type="enibook"]');
      if (e) {
        const r = xh(e.innerHTML);
        this.initialDoc += r.replace(/&lt;(\/?script)(.*?)&gt;/g, "<$1$2>");
      }
    }
    return this.initialDoc;
  }
  getInitialExtensions() {
    return [
      FP,
      Qt.phrases.of(XP),
      i3,
      YP({
        highlightActiveBlock: !1,
        hideFirstIndent: !0
      }),
      Sc.of(s3),
      this.indentationConfig.of(_a.of(this.indentString)),
      this.languageConfig.of([]),
      this.lineNumbers ? this.lineNumbersConfig.of(Io()) : this.lineNumbersConfig.of(Io({ formatNumber: () => "" })),
      Rt.lineWrapping,
      n3,
      this.placeholderConfig.of(FE(this.placeholder)),
      this.readOnlyConfig.of(Qt.readOnly.of(this.readOnly)),
      this.themeConfig.of(this.theme === "dark" ? Cv : wv)
    ];
  }
  handleCopyClipboard() {
    navigator.clipboard.writeText(this.value).then(
      () => {
        this.notify("Contenu de l'éditeur copié dans le presse-papier.", "success", "it-mdi-check-circle-outline");
      },
      () => {
        this.notify("A priori, interdiction d'écrire dans le presse-papier !", "warning", "it-mdi-alert-outline");
      }
    );
  }
  handleLineNumbers() {
    this.lineNumbers = !this.lineNumbers, this.editor.dispatch({
      effects: [
        this.lineNumbers ? this.lineNumbersConfig.reconfigure(Io()) : this.lineNumbersConfig.reconfigure(Io({ formatNumber: () => "" }))
      ]
    });
  }
  handleSelectCommand(e) {
    const r = e.detail.item.value;
    (0, eval)(`${r}(this.editor)`);
  }
  /*
  protected handleSelectLanguage(event: CustomEvent) {
    const item = event.detail.item
    this.languageMenuItems.forEach(anItem => { anItem.checked = false })
    item.checked = true
    this.language = item.value
    this.editor.dispatch({
      effects: [
        this.languageConfig.reconfigure(this.getCmLang()),
        this.placeholderConfig.reconfigure(placeholder(this.placeholder))
      ]
    })
  }
  */
  /*
   protected async loadLanguage(lang: string): Promise<LanguageSupport | undefined>{
     const desc = LanguageDescription.matchLanguageName(languages, lang, true)
     const support = await desc?.load()
     return support
   }
   */
  renderAnswer() {
    return Ct`
      <div part="base" class="code-edit">
        <div part="toolbar">
          ${this.renderToolbar()}
        </div>
        <div class="editor-base">
          <div part="editor" class="editor"></div>
          <div part="menuBtn" class="menu-button">
            <sl-tooltip content="activer/désactiver les barres d'outils et d'informations">
              <sl-button variant="neutral" size="small" @click=${() => {
      this.toolbar = !this.toolbar;
    }}><it-mdi-tools></it-mdi-tools></sl-button>
            </sl-tooltip>
            ${this.btnFeedback ? Ct`<sl-tooltip content="interprétation"><sl-button variant="neutral" size="small" @click=${() => {
      this.emit("feedback-requested-it");
    }}><it-mdi-play></it-mdi-play></sl-button></sl-tooltip>` : Ct``}
          </div>
        </div>
        <div part="statusbar">
          ${this.renderStatusBar()}
        </div>
      </div>
    `;
  }
  renderCommentButtons() {
    return Ct`
      <sl-button-group ?hidden=${this.readOnly} label="commentaires">
        <sl-tooltip content="commenter/décommenter la ligne">
          <sl-button size="small" @click=${() => {
      CT(this.editor);
    }}><svg xmlns="http://www.w3.org/2000/svg" style="vertical-align:middle;display:inline-block" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><path fill="currentColor" d="M5 5v14h2v2H3V3h4v2H5m15 6H7v2h13V7m0 4Z"/></svg></sl-button>
        </sl-tooltip>
        <sl-tooltip content="commenter/décommenter le bloc">
          <sl-button size="small" @click=${() => {
      wT(this.editor);
    }}><it-mdi-format-list-group></it-mdi-format-list-group></sl-button>
        </sl-tooltip>
      </sl-button-group>
    `;
  }
  renderHistoryButtons() {
    return Ct`
      <sl-button-group ?hidden=${this.readOnly} label="historique">
        <sl-tooltip content="annuler toutes les modifications">
          <sl-button size="small" @click=${() => {
      this.reset();
    }}><it-mdi-refresh></it-mdi-refresh></sl-button>
        </sl-tooltip>
        <sl-tooltip content="annuler la dernière modification">
          <sl-button size="small" @click=${() => {
      im(this.editor);
    }}><it-mdi-undo></it-mdi-undo></sl-button>
        </sl-tooltip>
        <sl-tooltip content="rétablir la dernière annulation">
          <sl-button size="small" @click=${() => {
      Zl(this.editor);
    }}><it-mdi-redo></it-mdi-redo></sl-button>
        </sl-tooltip>
      </sl-button-group>
    `;
  }
  renderIndentationButtons() {
    return Ct`
      <sl-button-group ?hidden=${this.readOnly} label="indentation">
        <sl-tooltip content="indenter">
          <sl-button size="small" @click=${() => {
      om(this.editor);
    }}><it-mdi-format-indent-increase></it-mdi-format-indent-increase></sl-button>
        </sl-tooltip>
        <sl-tooltip content="désindenter">
          <sl-button size="small" @click=${() => {
      am(this.editor);
    }}><it-mdi-format-indent-decrease></it-mdi-format-indent-decrease></sl-button>
        </sl-tooltip>
      </sl-button-group>
    `;
  }
  renderMiscButtons() {
    return Ct`
      <sl-button-group label="outils">
        <sl-tooltip content="afficher/cacher les numéros de ligne">
          <sl-button size="small" @click=${() => this.handleLineNumbers()}><it-mdi-format-list-numbered></it-mdi-format-list-numbered></sl-button>
        </sl-tooltip>
        <sl-tooltip content="raccourcis clavier">
          <sl-dropdown stay-open-on-select hoist ?hidden=${this.readOnly}>
            <sl-button slot="trigger" size="small" caret><it-mdi-keyboard></it-mdi-keyboard></sl-button>
            <sl-menu class="dropdown__shortcuts">
              <sl-menu-item disabled>Commande<div slot="suffix">Raccourci clavier</div></sl-menu-item>
              <sl-divider></sl-divider>
              ${ui.keymap.map((e) => Ct`<sl-menu-item @click=${() => {
      e.run(this.editor);
    }}>${e.name}<div slot="suffix">${e.key}</div></sl-menu-item>`)}
              <sl-divider></sl-divider>
              <sl-menu-item disabled>Commande<div slot="suffix">Raccourci clavier</div></sl-menu-item>
            </sl-menu>
          </sl-dropdown>
        </sl-tooltip>
        <sl-tooltip content="copier dans le presse-papier">
          <sl-button size="small" @click=${() => this.handleCopyClipboard()}><it-mdi-content-copy></it-mdi-content-copy></sl-button>
        </sl-tooltip>
        <sl-tooltip content="changer de thème">
          <sl-button size="small" @click=${() => this.toggleTheme()}><it-mdi-theme-light-dark></it-mdi-theme-light-dark></sl-button>
        </sl-tooltip>
        <sl-tooltip .content=${this.fullscreen ? "quitter le mode plein écran" : "passer en mode plein écran"}>
          <sl-button size="small" @click=${() => this.toggleFullscreen()}>
            ${this.fullscreen ? Ct`<it-mdi-fullscreen-exit></it-mdi-fullscreen-exit>` : Ct`<it-mdi-fullscreen></it-mdi-fullscreen>`}
          </sl-button>
        </sl-tooltip>
      </sl-button-group>
    `;
  }
  renderSearchButtons() {
    return Ct`
      <sl-button-group label="rechercher/remplacer">
        <sl-tooltip content="${this.readOnly ? "rechercher" : "rechercher/remplacer"}">
          <sl-button size="small" @click=${() => {
      dm(this.editor);
    }}><it-mdi-find-replace></it-mdi-find-replace></sl-button>
        </sl-tooltip>
        <sl-tooltip content="atteindre la ligne:colonne">
          <sl-button size="small" @click=${() => {
      c1(this.editor);
    }}><it-mdi-text-search></it-mdi-text-search></sl-button>
        </sl-tooltip>
      </sl-button-group>
    `;
  }
  renderStatusBar() {
    return Ct`
      <toolbar-it class="statusbar" ?hidden=${!this.toolbar}>
        <sl-button-group slot="end" label="informations">
          <sl-button size="small" variant="neutral">L ${this.cursorLine} - C ${this.cursorColumn}</sl-button>
          <sl-button size="small" variant="neutral">Indentation : ${this.indentSize}</sl-button>
          <sl-button size="small" variant="neutral" href="${this.getHelpUrl(this.language)}" target="_blank">Langage : ${this.language}</sl-button>
          <sl-button size="small" variant="neutral">Mode : ${this.readOnly ? Ct`lecture seule` : Ct`édition`}</sl-button>
        </sl-button-group>
      </toolbar-it>
    `;
  }
  renderToolbar() {
    return Ct`
      <toolbar-it class="toolbar" ?hidden=${!this.toolbar}>
        <div slot="start">
          ${this.renderHistoryButtons()}
          ${this.renderIndentationButtons()}
          ${this.renderCommentButtons()}
          ${this.renderSearchButtons()}
        </div>
        <div slot="end">
          ${this.renderMiscButtons()}
        </div>
      </toolbar-it>
    `;
  }
  /**
   * Réinitialiser l'éditeur.
   *
   * @memberof CodeEditIt
   */
  reset() {
    this.value = this.initialDoc;
  }
  async setLanguageExtension() {
    this.language && this.language !== "text" && this.editor.dispatch({
      effects: [
        this.languageConfig.reconfigure(this.getCmLang())
      ]
    });
  }
  setPlaceholderExtension() {
    this.editor.dispatch({
      effects: [
        this.placeholderConfig.reconfigure(FE(this.placeholder))
      ]
    });
  }
  setReadOnlyExtension() {
    this.editor.dispatch({
      effects: [
        this.readOnlyConfig.reconfigure(Qt.readOnly.of(this.readOnly))
      ]
    });
  }
  setIndentationExtension() {
    this.editor.dispatch({
      effects: [
        this.indentationConfig.reconfigure(_a.of(this.indentString))
      ]
    });
  }
  setThemeExtension() {
    this.editor.dispatch({
      effects: [
        this.themeConfig.reconfigure(this.theme === "dark" ? Cv : wv)
      ]
    });
  }
  toAsciidoc() {
    return "Editeur de code";
  }
  toggleTheme() {
    this.theme = this.theme === "dark" ? "light" : "dark", this.setThemeExtension();
  }
  updated(e) {
    e.has("fieldset") && (this.editorContainer.innerHTML = "", this.editorContainer.appendChild(this.editor.dom));
  }
}, ui.styles = [
  on(ui, ui, "styles"),
  jr(e3),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: icons */
.it-mdi-alert-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M12 2L1 21h22M12 6l7.53 13H4.47M11 10v4h2v-4m-2 6v2h2v-2'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
.it-mdi-check-circle-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10s10-4.5 10-10S17.5 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m4.59-12.42L10 14.17l-2.59-2.58L6 13l4 4l8-8z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-content-copy{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M19 21H8V7h11m0-2H8a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2m-3-4H4a2 2 0 0 0-2 2v14h2V3h12z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-find-replace{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05A6.976 6.976 0 0 0 11 4c-3.53 0-6.43 2.61-6.92 6H6.1A5 5 0 0 1 11 6m5.64 9.14A6.89 6.89 0 0 0 17.92 12H15.9a5 5 0 0 1-4.9 4c-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05A6.976 6.976 0 0 0 11 18c1.55 0 3-.5 4.14-1.36L20 21.5l1.5-1.5z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-format-indent-decrease{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M11 13h10v-2H11m0-2h10V7H11M3 3v2h18V3M3 21h18v-2H3m0-7l4 4V8m4 9h10v-2H11z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-format-indent-increase{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M11 13h10v-2H11m0-2h10V7H11M3 3v2h18V3M11 17h10v-2H11M3 8v8l4-4m-4 9h18v-2H3z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-format-list-group{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M5 5v14h2v2H3V3h4v2zm15 2H7v2h13zm0 4H7v2h13zm0 4H7v2h13z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-format-list-numbered{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M7 13v-2h14v2zm0 6v-2h14v2zM7 7V5h14v2zM3 8V5H2V4h2v4zm-1 9v-1h3v4H2v-1h2v-.5H3v-1h1V17zm2.25-7a.75.75 0 0 1 .75.75c0 .2-.08.39-.21.52L3.12 13H5v1H2v-.92L4 11H2v-1z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-fullscreen{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M5 5h5v2H7v3H5zm9 0h5v5h-2V7h-3zm3 9h2v5h-5v-2h3zm-7 3v2H5v-5h2v3z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-fullscreen-exit{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M14 14h5v2h-3v3h-2zm-9 0h5v5H8v-3H5zm3-9h2v5H5V8h3zm11 3v2h-5V5h2v3z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-keyboard{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M19 10h-2V8h2m0 5h-2v-2h2m-3-1h-2V8h2m0 5h-2v-2h2m0 6H8v-2h8m-9-5H5V8h2m0 5H5v-2h2m1 0h2v2H8m0-5h2v2H8m3 1h2v2h-2m0-5h2v2h-2m9-5H4c-1.11 0-2 .89-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-play{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M8 5.14v14l11-7z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-redo{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M18.4 10.6C16.55 9 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16a8.002 8.002 0 0 1 7.6-5.5c1.95 0 3.73.72 5.12 1.88L13 16h9V7z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-refresh{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M17.65 6.35A7.958 7.958 0 0 0 12 4a8 8 0 0 0-8 8a8 8 0 0 0 8 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18a6 6 0 0 1-6-6a6 6 0 0 1 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-text-search{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='m19.31 18.9l3.08 3.1L21 23.39l-3.12-3.07c-.69.43-1.51.68-2.38.68c-2.5 0-4.5-2-4.5-4.5s2-4.5 4.5-4.5s4.5 2 4.5 4.5c0 .88-.25 1.71-.69 2.4m-3.81.1a2.5 2.5 0 0 0 0-5a2.5 2.5 0 0 0 0 5M21 4v2H3V4zM3 16v-2h6v2zm0-5V9h18v2h-2.03c-1.01-.63-2.2-1-3.47-1s-2.46.37-3.47 1z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-theme-light-dark{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M7.5 2c-1.79 1.15-3 3.18-3 5.5s1.21 4.35 3.03 5.5C4.46 13 2 10.54 2 7.5A5.5 5.5 0 0 1 7.5 2m11.57 1.5l1.43 1.43L4.93 20.5L3.5 19.07zm-6.18 2.43L11.41 5L9.97 6l.42-1.7L9 3.24l1.75-.12l.58-1.65L12 3.1l1.73.03l-1.35 1.13zm-3.3 3.61l-1.16-.73l-1.12.78l.34-1.32l-1.09-.83l1.36-.09l.45-1.29l.51 1.27l1.36.03l-1.05.87zM19 13.5a5.5 5.5 0 0 1-5.5 5.5c-1.22 0-2.35-.4-3.26-1.07l7.69-7.69c.67.91 1.07 2.04 1.07 3.26m-4.4 6.58l2.77-1.15l-.24 3.35zm4.33-2.7l1.15-2.77l2.2 2.54zm1.15-4.96l-1.14-2.78l3.34.24zM9.63 18.93l2.77 1.15l-2.53 2.19z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-tools{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='m21.71 20.29l-1.42 1.42a1 1 0 0 1-1.41 0L7 9.85A3.81 3.81 0 0 1 6 10a4 4 0 0 1-3.78-5.3l2.54 2.54l.53-.53l1.42-1.42l.53-.53L4.7 2.22A4 4 0 0 1 10 6a3.81 3.81 0 0 1-.15 1l11.86 11.88a1 1 0 0 1 0 1.41M2.29 18.88a1 1 0 0 0 0 1.41l1.42 1.42a1 1 0 0 0 1.41 0l5.47-5.46l-2.83-2.83M20 2l-4 2v2l-2.17 2.17l2 2L18 8h2l2-4Z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-undo{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M12.5 8c-2.65 0-5.05 1-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88c3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
/* layer: default */
.static{position:static;}
[hidden=""]{display:none;}
.outline{outline-style:solid;}`
], ui.keymap = JP(), ui);
Zr([
  Gr()
], Hr.prototype, "message", 2);
Zr([
  Ht(".editor")
], Hr.prototype, "editorContainer", 2);
Zr([
  Ht("sl-menu.dropdown__languages")
], Hr.prototype, "menuLanguages", 2);
Zr([
  YC("sl-menu.dropdown__languages > sl-menu-item")
], Hr.prototype, "languageMenuItems", 2);
Zr([
  Gr()
], Hr.prototype, "cursorLine", 2);
Zr([
  Gr()
], Hr.prototype, "cursorColumn", 2);
Zr([
  ut({ type: Number, reflect: !0, attribute: "indent-size" })
], Hr.prototype, "indentSize", 1);
Zr([
  ut({ type: String, reflect: !0 })
], Hr.prototype, "language", 1);
Zr([
  ut({ type: Boolean, reflect: !0, attribute: "line-numbers" })
], Hr.prototype, "lineNumbers", 2);
Zr([
  ut({ type: String, reflect: !0 })
], Hr.prototype, "placeholder", 1);
Zr([
  ut({ type: Boolean, reflect: !0, attribute: "read-only" })
], Hr.prototype, "readOnly", 1);
Zr([
  ut({ type: String, reflect: !0 })
], Hr.prototype, "src", 2);
Zr([
  ut({ type: String, reflect: !0 })
], Hr.prototype, "theme", 1);
Zr([
  ut({ type: Boolean, reflect: !1 })
], Hr.prototype, "toolbar", 2);
Zr([
  ut({ attribute: !1 })
], Hr.prototype, "value", 1);
let M1 = Hr;
customElements && !customElements.get("code-it") && customElements.define("code-it", M1);
var o3 = Kt`
  ${wr}

  :host {
    --color: var(--sl-panel-border-color);
    --width: var(--sl-panel-border-width);
    --spacing: var(--sl-spacing-medium);
  }

  :host(:not([vertical])) {
    display: block;
    border-top: solid var(--width) var(--color);
    margin: var(--spacing) 0;
  }

  :host([vertical]) {
    display: inline-block;
    height: 100%;
    border-left: solid var(--width) var(--color);
    margin: 0 var(--spacing);
  }
`, Oc = class extends gr {
  constructor() {
    super(...arguments), this.vertical = !1;
  }
  connectedCallback() {
    super.connectedCallback(), this.setAttribute("role", "separator");
  }
  handleVerticalChange() {
    this.setAttribute("aria-orientation", this.vertical ? "vertical" : "horizontal");
  }
};
Oc.styles = o3;
ct([
  ut({ type: Boolean, reflect: !0 })
], Oc.prototype, "vertical", 2);
ct([
  _r("vertical")
], Oc.prototype, "handleVerticalChange", 1);
Oc.define("sl-divider");
var a3 = Kt`
  ${wr}

  :host {
    display: block;
  }

  .menu-label {
    display: inline-block;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-letter-spacing-normal);
    color: var(--sl-color-neutral-500);
    padding: var(--sl-spacing-2x-small) var(--sl-spacing-x-large);
    user-select: none;
    -webkit-user-select: none;
  }
`, L1 = class extends gr {
  render() {
    return Ct` <slot part="base" class="menu-label"></slot> `;
  }
};
L1.styles = a3;
L1.define("sl-menu-label");
var P1 = Kt`
  .form-control .form-control__label {
    display: none;
  }

  .form-control .form-control__help-text {
    display: none;
  }

  /* Label */
  .form-control--has-label .form-control__label {
    display: inline-block;
    color: var(--sl-input-label-color);
    margin-bottom: var(--sl-spacing-3x-small);
  }

  .form-control--has-label.form-control--small .form-control__label {
    font-size: var(--sl-input-label-font-size-small);
  }

  .form-control--has-label.form-control--medium .form-control__label {
    font-size: var(--sl-input-label-font-size-medium);
  }

  .form-control--has-label.form-control--large .form-control__label {
    font-size: var(--sl-input-label-font-size-large);
  }

  :host([required]) .form-control--has-label .form-control__label::after {
    content: var(--sl-input-required-content);
    margin-inline-start: var(--sl-input-required-content-offset);
    color: var(--sl-input-required-content-color);
  }

  /* Help text */
  .form-control--has-help-text .form-control__help-text {
    display: block;
    color: var(--sl-input-help-text-color);
    margin-top: var(--sl-spacing-3x-small);
  }

  .form-control--has-help-text.form-control--small .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-small);
  }

  .form-control--has-help-text.form-control--medium .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-medium);
  }

  .form-control--has-help-text.form-control--large .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-large);
  }

  .form-control--has-help-text.form-control--radio-group .form-control__help-text {
    margin-top: var(--sl-spacing-2x-small);
  }
`, l3 = Kt`
  ${wr}
  ${P1}

  :host {
    --thumb-size: 20px;
    --tooltip-offset: 10px;
    --track-color-active: var(--sl-color-neutral-200);
    --track-color-inactive: var(--sl-color-neutral-200);
    --track-active-offset: 0%;
    --track-height: 6px;

    display: block;
  }

  .range {
    position: relative;
  }

  .range__control {
    --percent: 0%;
    -webkit-appearance: none;
    border-radius: 3px;
    width: 100%;
    height: var(--track-height);
    background: transparent;
    line-height: var(--sl-input-height-medium);
    vertical-align: middle;
    margin: 0;

    background-image: linear-gradient(
      to right,
      var(--track-color-inactive) 0%,
      var(--track-color-inactive) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) 100%
    );
  }

  .range--rtl .range__control {
    background-image: linear-gradient(
      to left,
      var(--track-color-inactive) 0%,
      var(--track-color-inactive) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) 100%
    );
  }

  /* Webkit */
  .range__control::-webkit-slider-runnable-track {
    width: 100%;
    height: var(--track-height);
    border-radius: 3px;
    border: none;
  }

  .range__control::-webkit-slider-thumb {
    border: none;
    width: var(--thumb-size);
    height: var(--thumb-size);
    border-radius: 50%;
    background-color: var(--sl-color-primary-600);
    border: solid var(--sl-input-border-width) var(--sl-color-primary-600);
    -webkit-appearance: none;
    margin-top: calc(var(--thumb-size) / -2 + var(--track-height) / 2);
    cursor: pointer;
  }

  .range__control:enabled::-webkit-slider-thumb:hover {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
  }

  .range__control:enabled:focus-visible::-webkit-slider-thumb {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .range__control:enabled::-webkit-slider-thumb:active {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    cursor: grabbing;
  }

  /* Firefox */
  .range__control::-moz-focus-outer {
    border: 0;
  }

  .range__control::-moz-range-progress {
    background-color: var(--track-color-active);
    border-radius: 3px;
    height: var(--track-height);
  }

  .range__control::-moz-range-track {
    width: 100%;
    height: var(--track-height);
    background-color: var(--track-color-inactive);
    border-radius: 3px;
    border: none;
  }

  .range__control::-moz-range-thumb {
    border: none;
    height: var(--thumb-size);
    width: var(--thumb-size);
    border-radius: 50%;
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    transition:
      var(--sl-transition-fast) border-color,
      var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) box-shadow;
    cursor: pointer;
  }

  .range__control:enabled::-moz-range-thumb:hover {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
  }

  .range__control:enabled:focus-visible::-moz-range-thumb {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .range__control:enabled::-moz-range-thumb:active {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    cursor: grabbing;
  }

  /* States */
  .range__control:focus-visible {
    outline: none;
  }

  .range__control:disabled {
    opacity: 0.5;
  }

  .range__control:disabled::-webkit-slider-thumb {
    cursor: not-allowed;
  }

  .range__control:disabled::-moz-range-thumb {
    cursor: not-allowed;
  }

  /* Tooltip output */
  .range__tooltip {
    position: absolute;
    z-index: var(--sl-z-index-tooltip);
    left: 0;
    border-radius: var(--sl-tooltip-border-radius);
    background-color: var(--sl-tooltip-background-color);
    font-family: var(--sl-tooltip-font-family);
    font-size: var(--sl-tooltip-font-size);
    font-weight: var(--sl-tooltip-font-weight);
    line-height: var(--sl-tooltip-line-height);
    color: var(--sl-tooltip-color);
    opacity: 0;
    padding: var(--sl-tooltip-padding);
    transition: var(--sl-transition-fast) opacity;
    pointer-events: none;
  }

  .range__tooltip:after {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    left: 50%;
    translate: calc(-1 * var(--sl-tooltip-arrow-size));
  }

  .range--tooltip-visible .range__tooltip {
    opacity: 1;
  }

  /* Tooltip on top */
  .range--tooltip-top .range__tooltip {
    top: calc(-1 * var(--thumb-size) - var(--tooltip-offset));
  }

  .range--tooltip-top .range__tooltip:after {
    border-top: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-left: var(--sl-tooltip-arrow-size) solid transparent;
    border-right: var(--sl-tooltip-arrow-size) solid transparent;
    top: 100%;
  }

  /* Tooltip on bottom */
  .range--tooltip-bottom .range__tooltip {
    bottom: calc(-1 * var(--thumb-size) - var(--tooltip-offset));
  }

  .range--tooltip-bottom .range__tooltip:after {
    border-bottom: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-left: var(--sl-tooltip-arrow-size) solid transparent;
    border-right: var(--sl-tooltip-arrow-size) solid transparent;
    bottom: 100%;
  }

  @media (forced-colors: active) {
    .range__control,
    .range__tooltip {
      border: solid 1px transparent;
    }

    .range__control::-webkit-slider-thumb {
      border: solid 1px transparent;
    }

    .range__control::-moz-range-thumb {
      border: solid 1px transparent;
    }

    .range__tooltip:after {
      display: none;
    }
  }
`, F1 = (t = "value") => (e, r) => {
  const n = e.constructor, i = n.prototype.attributeChangedCallback;
  n.prototype.attributeChangedCallback = function(s, o, a) {
    var l;
    const c = n.getPropertyOptions(t), f = typeof c.attribute == "string" ? c.attribute : t;
    if (s === f) {
      const m = c.converter || Ws, C = (typeof m == "function" ? m : (l = m == null ? void 0 : m.fromAttribute) != null ? l : Ws.fromAttribute)(a, c.type);
      this[t] !== C && (this[r] = C);
    }
    i.call(this, s, o, a);
  };
};
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const B1 = _c(class extends hc {
  constructor(t) {
    if (super(t), t.type !== ci.PROPERTY && t.type !== ci.ATTRIBUTE && t.type !== ci.BOOLEAN_ATTRIBUTE)
      throw Error("The `live` directive is not allowed on child or event bindings");
    if (!cS(t))
      throw Error("`live` bindings can only contain a single expression");
  }
  render(t) {
    return t;
  }
  update(t, [e]) {
    if (e === Sn || e === ur)
      return e;
    const r = t.element, n = t.name;
    if (t.type === ci.PROPERTY) {
      if (e === r[n])
        return Sn;
    } else if (t.type === ci.BOOLEAN_ATTRIBUTE) {
      if (!!e === r.hasAttribute(n))
        return Sn;
    } else if (t.type === ci.ATTRIBUTE && r.getAttribute(n) === e + "")
      return Sn;
    return iw(t), e;
  }
});
var hr = class extends gr {
  constructor() {
    super(...arguments), this.formControlController = new yh(this), this.hasSlotController = new Ra(this, "help-text", "label"), this.localize = new ii(this), this.hasFocus = !1, this.hasTooltip = !1, this.title = "", this.name = "", this.value = 0, this.label = "", this.helpText = "", this.disabled = !1, this.min = 0, this.max = 100, this.step = 1, this.tooltip = "top", this.tooltipFormatter = (t) => t.toString(), this.form = "", this.defaultValue = 0;
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  connectedCallback() {
    super.connectedCallback(), this.resizeObserver = new ResizeObserver(() => this.syncRange()), this.value < this.min && (this.value = this.min), this.value > this.max && (this.value = this.max), this.updateComplete.then(() => {
      this.syncRange(), this.resizeObserver.observe(this.input);
    });
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.resizeObserver.unobserve(this.input);
  }
  handleChange() {
    this.emit("sl-change");
  }
  handleInput() {
    this.value = parseFloat(this.input.value), this.emit("sl-input"), this.syncRange();
  }
  handleBlur() {
    this.hasFocus = !1, this.hasTooltip = !1, this.emit("sl-blur");
  }
  handleFocus() {
    this.hasFocus = !0, this.hasTooltip = !0, this.emit("sl-focus");
  }
  handleThumbDragStart() {
    this.hasTooltip = !0;
  }
  handleThumbDragEnd() {
    this.hasTooltip = !1;
  }
  syncProgress(t) {
    this.input.style.setProperty("--percent", `${t * 100}%`);
  }
  syncTooltip(t) {
    if (this.output !== null) {
      const e = this.input.offsetWidth, r = this.output.offsetWidth, n = getComputedStyle(this.input).getPropertyValue("--thumb-size"), i = this.localize.dir() === "rtl", s = e * t;
      if (i) {
        const o = `${e - s}px + ${t} * ${n}`;
        this.output.style.translate = `calc((${o} - ${r / 2}px - ${n} / 2))`;
      } else {
        const o = `${s}px - ${t} * ${n}`;
        this.output.style.translate = `calc(${o} - ${r / 2}px + ${n} / 2)`;
      }
    }
  }
  handleValueChange() {
    this.formControlController.updateValidity(), this.input.value = this.value.toString(), this.value = parseFloat(this.input.value), this.syncRange();
  }
  handleDisabledChange() {
    this.formControlController.setValidity(this.disabled);
  }
  syncRange() {
    const t = Math.max(0, (this.value - this.min) / (this.max - this.min));
    this.syncProgress(t), this.tooltip !== "none" && this.syncTooltip(t);
  }
  handleInvalid(t) {
    this.formControlController.setValidity(!1), this.formControlController.emitInvalidEvent(t);
  }
  /** Sets focus on the range. */
  focus(t) {
    this.input.focus(t);
  }
  /** Removes focus from the range. */
  blur() {
    this.input.blur();
  }
  /** Increments the value of the range by the value of the step attribute. */
  stepUp() {
    this.input.stepUp(), this.value !== Number(this.input.value) && (this.value = Number(this.input.value));
  }
  /** Decrements the value of the range by the value of the step attribute. */
  stepDown() {
    this.input.stepDown(), this.value !== Number(this.input.value) && (this.value = Number(this.input.value));
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(t) {
    this.input.setCustomValidity(t), this.formControlController.updateValidity();
  }
  render() {
    const t = this.hasSlotController.test("label"), e = this.hasSlotController.test("help-text"), r = this.label ? !0 : !!t, n = this.helpText ? !0 : !!e;
    return Ct`
      <div
        part="form-control"
        class=${Ur({
      "form-control": !0,
      "form-control--medium": !0,
      // range only has one size
      "form-control--has-label": r,
      "form-control--has-help-text": n
    })}
      >
        <label
          part="form-control-label"
          class="form-control__label"
          for="input"
          aria-hidden=${r ? "false" : "true"}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div
            part="base"
            class=${Ur({
      range: !0,
      "range--disabled": this.disabled,
      "range--focused": this.hasFocus,
      "range--rtl": this.localize.dir() === "rtl",
      "range--tooltip-visible": this.hasTooltip,
      "range--tooltip-top": this.tooltip === "top",
      "range--tooltip-bottom": this.tooltip === "bottom"
    })}
            @mousedown=${this.handleThumbDragStart}
            @mouseup=${this.handleThumbDragEnd}
            @touchstart=${this.handleThumbDragStart}
            @touchend=${this.handleThumbDragEnd}
          >
            <input
              part="input"
              id="input"
              class="range__control"
              title=${this.title}
              type="range"
              name=${Wt(this.name)}
              ?disabled=${this.disabled}
              min=${Wt(this.min)}
              max=${Wt(this.max)}
              step=${Wt(this.step)}
              .value=${B1(this.value.toString())}
              aria-describedby="help-text"
              @change=${this.handleChange}
              @focus=${this.handleFocus}
              @input=${this.handleInput}
              @invalid=${this.handleInvalid}
              @blur=${this.handleBlur}
            />
            ${this.tooltip !== "none" && !this.disabled ? Ct`
                  <output part="tooltip" class="range__tooltip">
                    ${typeof this.tooltipFormatter == "function" ? this.tooltipFormatter(this.value) : this.value}
                  </output>
                ` : ""}
          </div>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${n ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
hr.styles = l3;
ct([
  Ht(".range__control")
], hr.prototype, "input", 2);
ct([
  Ht(".range__tooltip")
], hr.prototype, "output", 2);
ct([
  Gr()
], hr.prototype, "hasFocus", 2);
ct([
  Gr()
], hr.prototype, "hasTooltip", 2);
ct([
  ut()
], hr.prototype, "title", 2);
ct([
  ut()
], hr.prototype, "name", 2);
ct([
  ut({ type: Number })
], hr.prototype, "value", 2);
ct([
  ut()
], hr.prototype, "label", 2);
ct([
  ut({ attribute: "help-text" })
], hr.prototype, "helpText", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], hr.prototype, "disabled", 2);
ct([
  ut({ type: Number })
], hr.prototype, "min", 2);
ct([
  ut({ type: Number })
], hr.prototype, "max", 2);
ct([
  ut({ type: Number })
], hr.prototype, "step", 2);
ct([
  ut()
], hr.prototype, "tooltip", 2);
ct([
  ut({ attribute: !1 })
], hr.prototype, "tooltipFormatter", 2);
ct([
  ut({ reflect: !0 })
], hr.prototype, "form", 2);
ct([
  F1()
], hr.prototype, "defaultValue", 2);
ct([
  zC({ passive: !0 })
], hr.prototype, "handleThumbDragStart", 1);
ct([
  _r("value", { waitUntilFirstUpdate: !0 })
], hr.prototype, "handleValueChange", 1);
ct([
  _r("disabled", { waitUntilFirstUpdate: !0 })
], hr.prototype, "handleDisabledChange", 1);
ct([
  _r("hasTooltip", { waitUntilFirstUpdate: !0 })
], hr.prototype, "syncRange", 1);
hr.define("sl-range");
const c3 = ":host{display:inline-block}.primary-color__colors{display:grid;grid-template-columns:repeat(9,1fr);grid-gap:var(--sl-spacing-small);justify-items:center;z-index:var(--sl-z-index-dropdown);border:solid var(--sl-panel-border-width) var(--sl-panel-border-color);border-radius:var(--sl-border-radius-medium);background:var(--sl-panel-background-color);padding:var(--sl-spacing-x-small)}.primary-color__ranges{background:var(--sl-panel-background-color);z-index:var(--sl-z-index-dropdown)}sl-range{--thumb-size: var(--sl-spacing-small);--tooltip-offset: calc(-1*var(--sl-spacing-small));--track-color-active: var(--color-primary);--track-color-inactive: var(--sl-color-primary-200);--track-height: var(--sl-spacing-3x-small)}sl-range::part(base){padding:var(--sl-spacing-small);padding-top:var(--sl-spacing-x-large)}sl-range::part(tooltip){left:var(--sl-spacing-small)}";
var u3 = Object.defineProperty, d3 = Object.getOwnPropertyDescriptor, hm = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? d3(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && u3(e, r, i), i;
};
const f3 = [
  "gray",
  "red",
  "orange",
  "amber",
  "yellow",
  "lime",
  "green",
  "emerald",
  "teal",
  "cyan",
  "sky",
  "blue",
  "indigo",
  "violet",
  "purple",
  "fuchsia",
  "pink",
  "rose"
], Wo = class Wo extends hn {
  constructor() {
    super(), this.color = "purple", this.range = 5, this.size = "small", this.initLocalStorage(), this.setPrimaryColor();
  }
  /** Modifie la couleur principale du thème à l'aide des primitives [`shoelace`](https://shoelace.style/tokens/color). */
  cssPrimaryColor() {
    return `
      :root,
      .sl-theme-light,
      .sl-theme-dark {
        --sl-color-primary-50: var(--sl-color-${this.color}-50);
        --sl-color-primary-100: var(--sl-color-${this.color}-100);
        --sl-color-primary-200: var(--sl-color-${this.color}-200);
        --sl-color-primary-300: var(--sl-color-${this.color}-300);
        --sl-color-primary-400: var(--sl-color-${this.color}-400);
        --sl-color-primary-500: var(--sl-color-${this.color}-500);
        --sl-color-primary-600: var(--sl-color-${this.color}-600);
        --sl-color-primary-700: var(--sl-color-${this.color}-700);
        --sl-color-primary-800: var(--sl-color-${this.color}-800);
        --sl-color-primary-900: var(--sl-color-${this.color}-900);
        --sl-color-primary-950: var(--sl-color-${this.color}-950);
        --color-primary: var(--sl-color-primary-${this.range}00);
        --color-success: var(--sl-color-success-500);
        --color-warning: var(--sl-color-warning-500);
        --color-danger: var(--sl-color-danger-500);
        --color-neutral: var(--sl-color-neutral-500);
      }
    `;
  }
  get colors() {
    return f3.map(
      (e) => ({ name: e, value: `var(--sl-color-${e}-${this.range}00);` })
    );
  }
  handleChangeRange(e) {
    const r = e.target;
    this.range = r.value, this.setPrimaryColor();
  }
  initLocalStorage() {
    const e = localStorage.getItem("color"), r = localStorage.getItem("range");
    e ? this.color = e : localStorage.setItem("color", this.color), r ? this.range = parseInt(r) : localStorage.setItem("range", `${this.range}`);
  }
  render() {
    return Ct`
      <div part="base" class="primary-color">
        <sl-dropdown hoist>
          <sl-button size=${this.size} slot="trigger" caret>
            <it-mdi-palette-outline style="color:var(--color-primary);"></it-mdi-palette-outline>
          </sl-button>
          <div class='primary-color__colors'>
            ${this.colors.map(
      (e) => Ct`
                <div class='primary-color__colors__color' @click=${() => {
        this.color = e.name, this.setPrimaryColor();
      }}>
                  <it-mdi-square-rounded title=${e.name} style="cursor:pointer;width:1.5em;height:1.5em;color:${e.value}"></it-mdi-square-rounded>
                </div>
              `
    )}
          </div>
          <div class='primary-color__ranges'>
            <sl-range min="1" max="9" step="1" tooltip="top" .value=${this.range} @sl-change=${this.handleChangeRange}></sl-range>
          </div>
        </sl-dropdown>
      </div>
    `;
  }
  setPrimaryColor() {
    localStorage.color = this.color, localStorage.range = this.range;
    let e = document.querySelector("style#colors");
    e || (e = document.createElement("style"), e.id = "colors", document.head.appendChild(e)), e.innerHTML = this.cssPrimaryColor();
  }
  get tagTitle() {
    return "Couleurs";
  }
  toAsciidoc() {
    throw new Error("Method not implemented.");
  }
};
Wo.styles = [
  on(Wo, Wo, "styles"),
  jr(c3),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: icons */
it-mdi-palette-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M12 22A10 10 0 0 1 2 12A10 10 0 0 1 12 2c5.5 0 10 4 10 9a6 6 0 0 1-6 6h-1.8c-.3 0-.5.2-.5.5c0 .1.1.2.1.3c.4.5.6 1.1.6 1.7c.1 1.4-1 2.5-2.4 2.5m0-18a8 8 0 0 0-8 8a8 8 0 0 0 8 8c.3 0 .5-.2.5-.5c0-.2-.1-.3-.1-.4c-.4-.5-.6-1-.6-1.6c0-1.4 1.1-2.5 2.5-2.5H16a4 4 0 0 0 4-4c0-3.9-3.6-7-8-7m-5.5 6c.8 0 1.5.7 1.5 1.5S7.3 13 6.5 13S5 12.3 5 11.5S5.7 10 6.5 10m3-4c.8 0 1.5.7 1.5 1.5S10.3 9 9.5 9S8 8.3 8 7.5S8.7 6 9.5 6m5 0c.8 0 1.5.7 1.5 1.5S15.3 9 14.5 9S13 8.3 13 7.5S13.7 6 14.5 6m3 4c.8 0 1.5.7 1.5 1.5s-.7 1.5-1.5 1.5s-1.5-.7-1.5-1.5s.7-1.5 1.5-1.5'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-square-rounded{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M8 3h8c2.76 0 5 2.24 5 5v8c0 2.76-2.24 5-5 5H8c-2.76 0-5-2.24-5-5V8c0-2.76 2.24-5 5-5'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
/* layer: default */
.static{position:static;}`
];
let io = Wo;
hm([
  ut({ type: String, reflect: !0 })
], io.prototype, "color", 2);
hm([
  ut({ type: String, reflect: !0 })
], io.prototype, "range", 2);
hm([
  ut({ type: String, reflect: !0 })
], io.prototype, "size", 2);
customElements && !customElements.get("color-it") && customElements.define("color-it", io);
const Ko = class Ko extends ei {
  renderCode() {
    return this.code;
  }
  /**
   * Le nom courant de l'élément : `Aperçu HTML`.
   */
  get tagTitle() {
    return "Aperçu HTML";
  }
  /**
   * Syntaxe `asciidoc` équivalente :
   *
   * ```
   * [style,attributes]
   * ----
   * code html
   * ----
   * ```
   *
   * - `style` : `html-preview-it` (le style `asciidoc` a le même nom que l'élément `html` correspondant);
   * - `attributes` : `position`.
   *
   * Voir la documentation Asciidoc sur le [style d'un bloc](https://docs.asciidoctor.org/asciidoc/latest/blocks/#block-style).
   *
   * @example
   * ```
   * [html-preview-it,position=75]
   * ----
   * <p>
   *  Voici une horloge :
   *  <clock-it date time></clock-it>
   * </p>
   * ----
   * ```
   *
   */
  toAsciidoc() {
    const e = {
      // propriétés booléennes  : attrName: this.propName
    }, r = [
      /*propriétés avec valeur : attrName=`${this.propName}`*/
      `position="${this.position}"`
    ];
    for (const i of Object.keys(e))
      e[i] && r.push(i);
    return `
    [html-preview-it,${r.join(",")}]
    ----
    ${this.code}
    ----
    `.replace(/^ +| +$/gm, "");
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  updated(e) {
    var n;
    super.updated(e);
    const r = (n = this.shadowRoot) == null ? void 0 : n.querySelectorAll(".preview__view__code script");
    if (r)
      for (const i of r)
        Nh(i);
  }
};
Ko.styles = [
  // unsafeCSS(styles),
  on(Ko, Ko, "styles"),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: default */
.static{position:static;}`
];
let ph = Ko;
customElements && !customElements.get("html-preview-it") && customElements.define("html-preview-it", ph);
const p3 = [
  "enib",
  "lorem",
  "ipsum",
  "dolor",
  "sit",
  "amet,",
  "consectetur",
  "adipiscing",
  "elit",
  "ut",
  "aliquam,",
  "purus",
  "sit",
  "amet",
  "luctus",
  "venenatis,",
  "lectus",
  "magna",
  "fringilla",
  "urna,",
  "porttitor",
  "rhoncus",
  "dolor",
  "purus",
  "non",
  "enim",
  "enit",
  "enise",
  "praesent",
  "elementum",
  "facilisis",
  "leo,",
  "vel",
  "fringilla",
  "est",
  "ullamcorper",
  "eget",
  "nulla",
  "facilisi",
  "etiam",
  "dignissim",
  "diam",
  "quis",
  "lobortis",
  "scelerisque",
  "fermentum",
  "dui",
  "faucibus",
  "in",
  "ornare",
  "quam",
  "viverra",
  "orci",
  "sagittis",
  "eu",
  "volutpat",
  "odio",
  "facilisis",
  "mauris",
  "sit",
  "amet",
  "massa",
  "vitae",
  "tortor",
  "condimentum",
  "lacinia",
  "quis",
  "vel",
  "eros",
  "donec",
  "ac",
  "odio",
  "tempor",
  "orci",
  "dapibus",
  "ultrices",
  "in",
  "iaculis",
  "nunc",
  "sed",
  "augue",
  "lacus,",
  "viverra",
  "vitae",
  "congue",
  "eu,",
  "consequat",
  "ac",
  "felis",
  "donec",
  "et",
  "odio",
  "pellentesque",
  "diam",
  "volutpat",
  "commodo",
  "sed",
  "egestas",
  "egestas",
  "fringilla",
  "phasellus",
  "faucibus",
  "scelerisque",
  "eleifend",
  "donec",
  "pretium",
  "vulputate",
  "sapien",
  "nec",
  "sagittis",
  "aliquam",
  "malesuada",
  "bibendum",
  "arcu",
  "vitae",
  "elementum",
  "curabitur",
  "vitae",
  "nunc",
  "sed",
  "velit",
  "dignissim",
  "sodales",
  "ut",
  "eu",
  "sem",
  "integer",
  "vitae",
  "justo",
  "eget",
  "magna",
  "fermentum",
  "iaculis",
  "eu",
  "non",
  "diam",
  "phasellus",
  "vestibulum",
  "lorem",
  "sed",
  "risus",
  "ultricies",
  "tristique",
  "nulla",
  "aliquet",
  "tortor,",
  "at",
  "auctor",
  "urna",
  "nunc",
  "id",
  "cursus",
  "metus",
  "aliquam",
  "eleifend",
  "mi",
  "in",
  "nulla",
  "posuere",
  "sollicitudin",
  "aliquam",
  "ultrices",
  "sagittis",
  "orci,",
  "a",
  "scelerisque",
  "purus",
  "semper",
  "eget",
  "duis",
  "at",
  "tellus",
  "at",
  "urna",
  "condimentum",
  "mattis",
  "pellentesque",
  "id",
  "nibh",
  "tortor,",
  "id",
  "aliquet",
  "lectus",
  "proin",
  "nibh",
  "nisl,",
  "condimentum",
  "id",
  "venenatis",
  "a,",
  "condimentum",
  "vitae",
  "sapien",
  "pellentesque",
  "habitant",
  "morbi",
  "tristique",
  "senectus",
  "et",
  "netus",
  "et",
  "malesuada",
  "fames",
  "ac",
  "turpis",
  "egestas",
  "sed",
  "tempus,",
  "urna",
  "et",
  "pharetra",
  "pharetra,",
  "massa",
  "massa",
  "ultricies",
  "mi,",
  "quis",
  "hendrerit",
  "dolor",
  "magna",
  "eget",
  "est",
  "lorem",
  "ipsum",
  "dolor",
  "sit",
  "amet,",
  "consectetur",
  "adipiscing",
  "elit",
  "pellentesque",
  "habitant",
  "morbi",
  "tristique",
  "senectus",
  "et",
  "netus",
  "et",
  "malesuada",
  "fames",
  "ac",
  "turpis",
  "egestas",
  "integer",
  "eget",
  "aliquet",
  "nibh",
  "praesent",
  "tristique",
  "magna",
  "sit",
  "amet",
  "purus",
  "gravida",
  "quis",
  "blandit",
  "turpis",
  "cursus",
  "in",
  "hac",
  "habitasse",
  "platea",
  "dictumst",
  "quisque",
  "sagittis,",
  "purus",
  "sit",
  "amet",
  "volutpat",
  "consequat,",
  "mauris",
  "nunc",
  "congue",
  "nisi,",
  "vitae",
  "suscipit",
  "tellus",
  "mauris",
  "a",
  "diam",
  "maecenas",
  "sed",
  "ut",
  "sem",
  "viverra",
  "aliquet",
  "eget",
  "sit",
  "amet",
  "tellus",
  "cras",
  "adipiscing",
  "eu",
  "turpis",
  "egestas",
  "pretium",
  "aenean",
  "pharetra,",
  "magna",
  "ac",
  "placerat",
  "vestibulum,",
  "lectus",
  "mauris",
  "ultrices",
  "eros,",
  "in",
  "cursus",
  "turpis",
  "massa",
  "tincidunt",
  "dui",
  "ut",
  "ornare",
  "lectus",
  "sit",
  "amet",
  "est",
  "placerat",
  "in",
  "egestas",
  "erat",
  "imperdiet",
  "sed",
  "euismod",
  "nisi",
  "porta",
  "lorem",
  "mollis",
  "aliquam",
  "ut",
  "porttitor",
  "leo",
  "a",
  "diam",
  "sollicitudin",
  "tempor",
  "id",
  "eu",
  "nisl",
  "nunc",
  "mi",
  "ipsum,",
  "faucibus",
  "vitae",
  "aliquet",
  "nec,",
  "ullamcorper",
  "sit",
  "amet",
  "risus",
  "nullam",
  "eget",
  "felis",
  "eget",
  "nunc",
  "lobortis",
  "mattis",
  "aliquam",
  "faucibus",
  "purus",
  "in",
  "massa",
  "tempor",
  "nec",
  "feugiat",
  "nisl",
  "pretium",
  "fusce",
  "id",
  "velit",
  "ut",
  "tortor",
  "pretium",
  "viverra",
  "suspendisse",
  "potenti",
  "nullam",
  "ac",
  "tortor",
  "vitae",
  "purus",
  "faucibus",
  "ornare",
  "suspendisse",
  "sed",
  "nisi",
  "lacus,",
  "sed",
  "viverra",
  "tellus",
  "in",
  "hac",
  "habitasse",
  "platea",
  "dictumst",
  "vestibulum",
  "rhoncus",
  "est",
  "pellentesque",
  "elit",
  "ullamcorper",
  "dignissim",
  "cras",
  "tincidunt",
  "lobortis",
  "feugiat",
  "vivamus",
  "at",
  "augue",
  "eget",
  "arcu",
  "dictum",
  "varius",
  "duis",
  "at",
  "consectetur",
  "lorem",
  "donec",
  "massa",
  "sapien,",
  "faucibus",
  "et",
  "molestie",
  "ac,",
  "feugiat",
  "sed",
  "lectus",
  "vestibulum",
  "mattis",
  "ullamcorper",
  "velit",
  "sed",
  "ullamcorper",
  "morbi",
  "tincidunt",
  "ornare",
  "massa,",
  "eget",
  "egestas",
  "purus",
  "viverra",
  "accumsan",
  "in",
  "nisl",
  "nisi,",
  "scelerisque",
  "eu",
  "ultrices",
  "vitae,",
  "auctor",
  "eu",
  "augue",
  "ut",
  "lectus",
  "arcu,",
  "bibendum",
  "at",
  "varius",
  "vel,",
  "pharetra",
  "vel",
  "turpis",
  "nunc",
  "eget",
  "lorem",
  "dolor,",
  "sed",
  "viverra",
  "ipsum",
  "nunc",
  "aliquet",
  "bibendum",
  "enim,",
  "facilisis",
  "gravida",
  "neque",
  "convallis",
  "a",
  "cras",
  "semper",
  "auctor",
  "neque,",
  "vitae",
  "tempus",
  "quam",
  "pellentesque",
  "nec",
  "nam",
  "aliquam",
  "sem",
  "et",
  "tortor",
  "consequat",
  "id",
  "porta",
  "nibh",
  "enib,",
  "venenatis",
  "cras",
  "sed",
  "felis",
  "eget",
  "velit",
  "aliquet",
  "sagittis",
  "id",
  "consectetur",
  "purus",
  "ut",
  "faucibus",
  "pulvinar",
  "elementum",
  "integer",
  "neque,",
  "volutpat",
  "ac",
  "tincidunt",
  "vitae,",
  "semper",
  "quis",
  "lectus",
  "nulla",
  "at",
  "volutpat",
  "diam",
  "ut",
  "venenatis",
  "tellus",
  "in",
  "metus",
  "vulputate",
  "eu",
  "scelerisque",
  "felis",
  "imperdiet",
  "proin",
  "fermentum",
  "leo",
  "vel",
  "orci",
  "porta",
  "non",
  "pulvinar",
  "neque",
  "laoreet",
  "suspendisse",
  "interdum",
  "consectetur",
  "libero,",
  "id",
  "faucibus",
  "nisl",
  "tincidunt",
  "eget",
  "nullam",
  "non",
  "nisi",
  "est,",
  "sit",
  "amet",
  "facilisis",
  "magna",
  "etiam",
  "tempor,",
  "orci",
  "eu",
  "lobortis",
  "elementum,",
  "nibh",
  "tellus",
  "molestie",
  "nunc,",
  "non",
  "blandit",
  "massa",
  "nec",
  "dui",
  "nunc",
  "mattis",
  "ut",
  "tellus",
  "elementum",
  "sagittis",
  "vitae",
  "et",
  "leo",
  "duis",
  "ut",
  "diam",
  "quam",
  "nulla",
  "porttitor",
  "massa",
  "id",
  "neque",
  "aliquam",
  "vestibulum",
  "morbi",
  "blandit",
  "cursus",
  "risus,",
  "at",
  "ultrices",
  "mi",
  "tempus",
  "imperdiet",
  "nulla",
  "malesuada",
  "pellentesque",
  "elit",
  "eget",
  "gravida",
  "cum",
  "sociis",
  "natoque",
  "penatibus",
  "et",
  "magnis",
  "dis",
  "parturient",
  "montes,",
  "nascetur",
  "ridiculus",
  "mus",
  "mauris",
  "vitae",
  "ultricies",
  "leo",
  "integer",
  "malesuada",
  "nunc",
  "vel",
  "risus",
  "commodo",
  "viverra",
  "maecenas",
  "accumsan,",
  "lacus",
  "vel",
  "facilisis",
  "volutpat,",
  "est",
  "velit",
  "egestas",
  "dui,",
  "id",
  "ornare",
  "arcu",
  "odio",
  "ut",
  "sem",
  "nulla",
  "pharetra",
  "diam",
  "sit",
  "amet",
  "nisl",
  "suscipit",
  "adipiscing",
  "bibendum",
  "est",
  "ultricies",
  "integer",
  "quis",
  "auctor",
  "elit",
  "sed",
  "vulputate",
  "mi",
  "sit",
  "amet",
  "mauris",
  "commodo",
  "quis",
  "imperdiet",
  "massa",
  "tincidunt",
  "nunc",
  "pulvinar",
  "sapien",
  "et",
  "ligula",
  "ullamcorper",
  "malesuada",
  "proin",
  "libero",
  "nunc,",
  "consequat",
  "interdum",
  "varius",
  "sit",
  "amet,",
  "mattis",
  "vulputate",
  "nulla",
  "aliquet",
  "porttitor",
  "lacus,",
  "luctus",
  "accumsan",
  "tortor",
  "posuere",
  "ac",
  "ut",
  "consequat",
  "semper",
  "viverra",
  "nam",
  "libero",
  "justo,",
  "laoreet",
  "sit",
  "amet",
  "cursus",
  "sit",
  "amet,",
  "dictum",
  "sit",
  "amet",
  "justo",
  "donec",
  "diam,",
  "vulputate",
  "ut",
  "pharetra",
  "sit",
  "amet,",
  "aliquam",
  "id",
  "diam",
  "maecenas",
  "ultricies",
  "mi",
  "eget",
  "mauris",
  "pharetra",
  "et",
  "ultrices",
  "neque",
  "ornare",
  "aenean",
  "euismod",
  "elementum",
  "nisi,",
  "quis",
  "eleifend",
  "quam",
  "adipiscing",
  "vitae",
  "proin",
  "sagittis,",
  "nisl",
  "rhoncus",
  "mattis",
  "rhoncus,",
  "urna",
  "neque",
  "viverra",
  "justo,",
  "nec",
  "ultrices",
  "dui",
  "sapien",
  "eget",
  "mi",
  "proin",
  "sed",
  "libero",
  "enim,",
  "sed",
  "faucibus",
  "turpis",
  "in",
  "eu",
  "mi",
  "bibendum",
  "neque",
  "egestas",
  "congue",
  "quisque",
  "egestas",
  "diam",
  "in",
  "arcu",
  "cursus",
  "euismod",
  "quis",
  "viverra",
  "nibh",
  "cras",
  "pulvinar",
  "mattis",
  "nunc,",
  "sed",
  "blandit",
  "libero",
  "volutpat",
  "sed",
  "cras",
  "ornare",
  "arcu",
  "dui",
  "vivamus",
  "arcu",
  "felis,",
  "bibendum",
  "ut",
  "tristique",
  "et,",
  "egestas",
  "quis",
  "ipsum",
  "suspendisse",
  "ultrices",
  "gravida",
  "dictum",
  "fusce",
  "ut",
  "placerat",
  "orci",
  "nulla",
  "pellentesque",
  "dignissim",
  "enim,",
  "sit",
  "amet",
  "venenatis",
  "urna",
  "cursus",
  "eget",
  "nunc",
  "scelerisque",
  "viverra",
  "mauris,",
  "in",
  "aliquam",
  "sem",
  "fringilla",
  "ut",
  "morbi",
  "tincidunt",
  "augue",
  "interdum",
  "velit",
  "euismod",
  "in",
  "pellentesque",
  "massa",
  "placerat",
  "duis",
  "ultricies",
  "lacus",
  "sed",
  "turpis",
  "tincidunt",
  "id",
  "aliquet",
  "risus",
  "feugiat",
  "in",
  "ante",
  "metus,",
  "dictum",
  "at",
  "tempor",
  "commodo,",
  "ullamcorper",
  "a",
  "lacus",
  "vestibulum",
  "sed",
  "arcu",
  "non",
  "odio",
  "euismod",
  "lacinia",
  "at",
  "quis",
  "risus",
  "sed",
  "vulputate",
  "odio",
  "ut",
  "blandit",
  "volutpat",
  "maecenas",
  "volutpat",
  "blandit",
  "aliquam",
  "etiam",
  "erat",
  "velit,",
  "scelerisque",
  "in",
  "dictum",
  "non,",
  "consectetur",
  "a",
  "erat",
  "nam",
  "at",
  "lectus",
  "urna",
  "duis",
  "convallis",
  "convallis",
  "tellus,",
  "id",
  "interdum",
  "velit",
  "laoreet",
  "id",
  "donec",
  "ultrices",
  "tincidunt",
  "arcu,",
  "non",
  "sodales",
  "neque",
  "sodales",
  "ut",
  "etiam",
  "sit",
  "amet",
  "nisl",
  "purus,",
  "in",
  "mollis",
  "nunc",
  "sed",
  "id",
  "semper",
  "risus",
  "in",
  "hendrerit",
  "gravida",
  "rutrum",
  "quisque",
  "non",
  "tellus",
  "orci,",
  "ac",
  "auctor",
  "augue",
  "mauris",
  "augue",
  "neque,",
  "gravida",
  "in",
  "fermentum",
  "et,",
  "sollicitudin",
  "ac",
  "orci",
  "phasellus",
  "egestas",
  "tellus",
  "rutrum",
  "tellus",
  "pellentesque",
  "eu",
  "tincidunt",
  "tortor",
  "aliquam",
  "nulla",
  "facilisi",
  "cras",
  "fermentum,",
  "odio",
  "eu",
  "feugiat",
  "pretium,",
  "nibh",
  "ipsum",
  "consequat",
  "nisl,",
  "vel",
  "pretium",
  "lectus",
  "quam",
  "id",
  "leo",
  "in",
  "vitae",
  "turpis",
  "massa",
  "sed",
  "elementum",
  "tempus",
  "egestas",
  "sed",
  "sed",
  "risus",
  "pretium",
  "quam",
  "vulputate",
  "dignissim",
  "suspendisse",
  "in",
  "est",
  "ante",
  "in",
  "nibh",
  "mauris,",
  "cursus",
  "mattis",
  "molestie",
  "a,",
  "iaculis",
  "at",
  "erat",
  "pellentesque",
  "adipiscing",
  "commodo",
  "elit,",
  "at",
  "imperdiet",
  "dui",
  "accumsan",
  "sit",
  "amet",
  "nulla",
  "facilisi",
  "morbi",
  "tempus",
  "iaculis",
  "urna,",
  "id",
  "volutpat",
  "lacus",
  "laoreet",
  "non",
  "curabitur",
  "gravida",
  "arcu",
  "ac",
  "tortor",
  "dignissim",
  "convallis",
  "aenean",
  "et",
  "tortor",
  "at",
  "risus",
  "viverra",
  "adipiscing",
  "at",
  "in",
  "tellus",
  "integer",
  "feugiat",
  "scelerisque",
  "varius",
  "morbi",
  "nunc,",
  "faucibus",
  "a",
  "pellentesque",
  "sit",
  "amet,",
  "porttitor",
  "eget",
  "dolor",
  "morbi",
  "non",
  "arcu",
  "risus,",
  "quis",
  "varius",
  "quam",
  "quisque",
  "id",
  "diam",
  "vel",
  "quam",
  "elementum",
  "pulvinar",
  "etiam",
  "non",
  "quam",
  "lacus",
  "suspendisse",
  "faucibus",
  "interdum",
  "posuere",
  "lorem",
  "ipsum",
  "dolor",
  "sit",
  "amet,",
  "consectetur",
  "adipiscing",
  "elit",
  "duis",
  "tristique",
  "sollicitudin",
  "nibh",
  "sit",
  "amet",
  "commodo",
  "nulla",
  "facilisi",
  "nullam",
  "vehicula",
  "ipsum",
  "a",
  "arcu",
  "cursus",
  "vitae",
  "congue",
  "mauris",
  "rhoncus",
  "aenean",
  "vel",
  "elit",
  "scelerisque",
  "mauris",
  "pellentesque",
  "pulvinar",
  "pellentesque",
  "habitant",
  "morbi",
  "tristique",
  "senectus",
  "et",
  "netus",
  "et",
  "malesuada",
  "fames",
  "ac",
  "turpis",
  "egestas",
  "maecenas",
  "pharetra",
  "convallis",
  "posuere",
  "morbi",
  "leo",
  "urna,",
  "molestie",
  "at",
  "elementum",
  "eu,",
  "facilisis",
  "sed",
  "odio",
  "morbi",
  "quis",
  "commodo",
  "odio",
  "aenean",
  "sed",
  "adipiscing",
  "diam",
  "donec",
  "adipiscing",
  "tristique",
  "risus",
  "nec",
  "feugiat",
  "in",
  "fermentum",
  "posuere",
  "urna",
  "nec",
  "tincidunt",
  "praesent",
  "semper",
  "feugiat",
  "nibh",
  "sed",
  "pulvinar",
  "proin",
  "gravida",
  "hendrerit",
  "lectus",
  "a",
  "molestie",
  "enibook"
], _3 = ":host{display:block;margin-bottom:.5rem}p{margin:0;margin-bottom:.5rem}p:last-child{margin-bottom:0}ol,ul,dl{margin:0}dt{font-weight:600}";
var h3 = Object.defineProperty, m3 = Object.getOwnPropertyDescriptor, U1 = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? m3(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && h3(e, r, i), i;
};
const Qo = class Qo extends hn {
  constructor() {
    super(...arguments), this.count = 1, this.type = "paragraph";
  }
  createTerm() {
    const e = this.randomLength(1, 3), r = [];
    for (let n = 0; n < e; n++)
      r.push(this.createText("word"));
    return r.join(" ");
  }
  /** Texte aléatoire généré selon son type. */
  createText(e = "paragraph") {
    let r, n;
    const i = [], s = [], o = [];
    switch (e) {
      case "dlist":
      case "olist":
      case "ulist":
        n = this.randomLength(1, 3);
        for (let a = 0; a < n; a++)
          s.push(this.createText("sentence"));
        r = s.join(" ");
        break;
      case "paragraph":
        n = this.randomLength(2, 10);
        for (let a = 0; a < n; a++)
          i.push(this.createText("sentence"));
        r = i.join(" ");
        break;
      case "sentence":
        n = this.randomLength(5, 30);
        for (let a = 0; a < n; a++)
          o.push(this.createText("word"));
        o[0] = o[0].substring(0, 1).toUpperCase() + o[0].substring(1), r = `${o.join(" ")}.`.replace(/(\.,|,\.)/g, ".");
        break;
      case "word":
        r = this.dictionary[this.randomLength(0, this.dictionary.length - 1)];
        break;
    }
    return r;
  }
  /**
   * Dictionnaire de mots.
   */
  get dictionary() {
    return p3;
  }
  /**
   * Le nom courant de l'élément : `Lorem Ipsum`.
   */
  get tagTitle() {
    return "Lorem Ipsum";
  }
  randomLength(e, r) {
    return e < 0 || r < e ? this.randomLength(1, 10) : Math.floor(Math.random() * (r - e + 1) + e);
  }
  render() {
    return this.count < 1 && (this.count = 1), Ct`
      <div part="base" class="lorem-ipsum prose">
        ${this.renderTemplate()}
      </div>
    `;
  }
  renderTemplate() {
    let e = Ct``;
    switch (this.type) {
      case "dlist":
        e = this.renderList("dl", this.count);
        break;
      case "olist":
        e = this.renderList("ol", this.count);
        break;
      case "paragraph":
        e = this.renderParagraph(this.count);
        break;
      case "sentence":
        e = this.renderSentence(this.count);
        break;
      case "ulist":
        e = this.renderList("ul", this.count);
        break;
      case "word":
        e = this.renderWord(this.count);
        break;
    }
    return e;
  }
  renderList(e = "ul", r = 1) {
    const n = [];
    for (let o = 0; o < r; o++)
      n.push(this.createText("olist"));
    let i = Ct`${n.map(
      (o) => Ct`<li>${o}</li>`
    )}`;
    const s = Ct`${n.map(
      (o) => Ct`<dt>${this.createTerm()}</dt>
          <dd>${o}</dd>`
    )}`;
    switch (e) {
      case "ol":
        i = Ct`<ol part="olist">
          ${i}
        </ol>`;
        break;
      case "dl":
        i = Ct`<dl part="dlist">${s}</dl>`;
        break;
      case "ul":
      default:
        i = Ct`<ul part="ulist">
          ${i}
        </ul>`;
    }
    return i;
  }
  renderParagraph(e = 1) {
    const r = [];
    for (let n = 0; n < e; n++)
      r.push(this.createText("paragraph"));
    return Ct`${r.map(
      (n) => Ct`<p part="paragraph">${n}</p>`
    )}`;
  }
  renderSentence(e = 1) {
    const r = [];
    for (let n = 0; n < e; n++)
      r.push(this.createText("sentence"));
    return Ct`<p part="sentence">
      ${r.map((n) => Ct`${n}<br />`)}
    </p>`;
  }
  renderWord(e = 1) {
    const r = [];
    for (let n = 0; n < e; n++)
      r.push(this.createText("word"));
    return Ct`<p part="word">${r.map((n) => Ct`${n} `)}</p>`;
  }
  /**
   * Syntaxe `asciidoc` équivalente `name::target[attributes]`
   *
   * Voir la documentation Asciidoc sur les <a href="https://docs.asciidoctor.org/asciidoc/latest/key-concepts/#macros">macros de type _block_</a>
   * @examples `lorem-ipsum::paragraph[]` , `lorem-ipsum::olist[count=2]`
   */
  toAsciidoc() {
    return `
      lorem-ipsum::${this.type}[count=${this.count}]
    `.replace(/^ +| +$/gm, "");
  }
};
Qo.styles = [
  on(Qo, Qo, "styles"),
  jr(_3),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
.prose,
[prose=""]{color:var(--un-prose-body);max-width:65ch;}
/* layer: default */
.static{position:static;}`
];
let Ea = Qo;
U1([
  ut({ type: Number, reflect: !0 })
], Ea.prototype, "count", 2);
U1([
  ut({ type: String, reflect: !0 })
], Ea.prototype, "type", 2);
customElements && !customElements.get("lorem-ipsum-it") && customElements.define("lorem-ipsum-it", Ea);
const Av = {};
function g3(t) {
  let e = Av[t];
  if (e)
    return e;
  e = Av[t] = [];
  for (let r = 0; r < 128; r++) {
    const n = String.fromCharCode(r);
    e.push(n);
  }
  for (let r = 0; r < t.length; r++) {
    const n = t.charCodeAt(r);
    e[n] = "%" + ("0" + n.toString(16).toUpperCase()).slice(-2);
  }
  return e;
}
function so(t, e) {
  typeof e != "string" && (e = so.defaultChars);
  const r = g3(e);
  return t.replace(/(%[a-f0-9]{2})+/gi, function(n) {
    let i = "";
    for (let s = 0, o = n.length; s < o; s += 3) {
      const a = parseInt(n.slice(s + 1, s + 3), 16);
      if (a < 128) {
        i += r[a];
        continue;
      }
      if ((a & 224) === 192 && s + 3 < o) {
        const l = parseInt(n.slice(s + 4, s + 6), 16);
        if ((l & 192) === 128) {
          const c = a << 6 & 1984 | l & 63;
          c < 128 ? i += "��" : i += String.fromCharCode(c), s += 3;
          continue;
        }
      }
      if ((a & 240) === 224 && s + 6 < o) {
        const l = parseInt(n.slice(s + 4, s + 6), 16), c = parseInt(n.slice(s + 7, s + 9), 16);
        if ((l & 192) === 128 && (c & 192) === 128) {
          const f = a << 12 & 61440 | l << 6 & 4032 | c & 63;
          f < 2048 || f >= 55296 && f <= 57343 ? i += "���" : i += String.fromCharCode(f), s += 6;
          continue;
        }
      }
      if ((a & 248) === 240 && s + 9 < o) {
        const l = parseInt(n.slice(s + 4, s + 6), 16), c = parseInt(n.slice(s + 7, s + 9), 16), f = parseInt(n.slice(s + 10, s + 12), 16);
        if ((l & 192) === 128 && (c & 192) === 128 && (f & 192) === 128) {
          let m = a << 18 & 1835008 | l << 12 & 258048 | c << 6 & 4032 | f & 63;
          m < 65536 || m > 1114111 ? i += "����" : (m -= 65536, i += String.fromCharCode(55296 + (m >> 10), 56320 + (m & 1023))), s += 9;
          continue;
        }
      }
      i += "�";
    }
    return i;
  });
}
so.defaultChars = ";/?:@&=+$,#";
so.componentChars = "";
const Rv = {};
function $3(t) {
  let e = Rv[t];
  if (e)
    return e;
  e = Rv[t] = [];
  for (let r = 0; r < 128; r++) {
    const n = String.fromCharCode(r);
    /^[0-9a-z]$/i.test(n) ? e.push(n) : e.push("%" + ("0" + r.toString(16).toUpperCase()).slice(-2));
  }
  for (let r = 0; r < t.length; r++)
    e[t.charCodeAt(r)] = t[r];
  return e;
}
function za(t, e, r) {
  typeof e != "string" && (r = e, e = za.defaultChars), typeof r > "u" && (r = !0);
  const n = $3(e);
  let i = "";
  for (let s = 0, o = t.length; s < o; s++) {
    const a = t.charCodeAt(s);
    if (r && a === 37 && s + 2 < o && /^[0-9a-f]{2}$/i.test(t.slice(s + 1, s + 3))) {
      i += t.slice(s, s + 3), s += 2;
      continue;
    }
    if (a < 128) {
      i += n[a];
      continue;
    }
    if (a >= 55296 && a <= 57343) {
      if (a >= 55296 && a <= 56319 && s + 1 < o) {
        const l = t.charCodeAt(s + 1);
        if (l >= 56320 && l <= 57343) {
          i += encodeURIComponent(t[s] + t[s + 1]), s++;
          continue;
        }
      }
      i += "%EF%BF%BD";
      continue;
    }
    i += encodeURIComponent(t[s]);
  }
  return i;
}
za.defaultChars = ";/?:@&=+$,-_.!~*'()#";
za.componentChars = "-_.!~*'()";
function mm(t) {
  let e = "";
  return e += t.protocol || "", e += t.slashes ? "//" : "", e += t.auth ? t.auth + "@" : "", t.hostname && t.hostname.indexOf(":") !== -1 ? e += "[" + t.hostname + "]" : e += t.hostname || "", e += t.port ? ":" + t.port : "", e += t.pathname || "", e += t.search || "", e += t.hash || "", e;
}
function cc() {
  this.protocol = null, this.slashes = null, this.auth = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.pathname = null;
}
const b3 = /^([a-z0-9.+-]+:)/i, E3 = /:[0-9]*$/, v3 = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, S3 = ["<", ">", '"', "`", " ", "\r", `
`, "	"], y3 = ["{", "}", "|", "\\", "^", "`"].concat(S3), T3 = ["'"].concat(y3), xv = ["%", "/", "?", ";", "#"].concat(T3), Nv = ["/", "?", "#"], C3 = 255, kv = /^[+a-z0-9A-Z_-]{0,63}$/, w3 = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, Iv = {
  javascript: !0,
  "javascript:": !0
}, Ov = {
  http: !0,
  https: !0,
  ftp: !0,
  gopher: !0,
  file: !0,
  "http:": !0,
  "https:": !0,
  "ftp:": !0,
  "gopher:": !0,
  "file:": !0
};
function gm(t, e) {
  if (t && t instanceof cc)
    return t;
  const r = new cc();
  return r.parse(t, e), r;
}
cc.prototype.parse = function(t, e) {
  let r, n, i, s = t;
  if (s = s.trim(), !e && t.split("#").length === 1) {
    const c = v3.exec(s);
    if (c)
      return this.pathname = c[1], c[2] && (this.search = c[2]), this;
  }
  let o = b3.exec(s);
  if (o && (o = o[0], r = o.toLowerCase(), this.protocol = o, s = s.substr(o.length)), (e || o || s.match(/^\/\/[^@\/]+@[^@\/]+/)) && (i = s.substr(0, 2) === "//", i && !(o && Iv[o]) && (s = s.substr(2), this.slashes = !0)), !Iv[o] && (i || o && !Ov[o])) {
    let c = -1;
    for (let N = 0; N < Nv.length; N++)
      n = s.indexOf(Nv[N]), n !== -1 && (c === -1 || n < c) && (c = n);
    let f, m;
    c === -1 ? m = s.lastIndexOf("@") : m = s.lastIndexOf("@", c), m !== -1 && (f = s.slice(0, m), s = s.slice(m + 1), this.auth = f), c = -1;
    for (let N = 0; N < xv.length; N++)
      n = s.indexOf(xv[N]), n !== -1 && (c === -1 || n < c) && (c = n);
    c === -1 && (c = s.length), s[c - 1] === ":" && c--;
    const b = s.slice(0, c);
    s = s.slice(c), this.parseHost(b), this.hostname = this.hostname || "";
    const C = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
    if (!C) {
      const N = this.hostname.split(/\./);
      for (let z = 0, A = N.length; z < A; z++) {
        const Q = N[z];
        if (Q && !Q.match(kv)) {
          let Te = "";
          for (let ce = 0, ge = Q.length; ce < ge; ce++)
            Q.charCodeAt(ce) > 127 ? Te += "x" : Te += Q[ce];
          if (!Te.match(kv)) {
            const ce = N.slice(0, z), ge = N.slice(z + 1), Y = Q.match(w3);
            Y && (ce.push(Y[1]), ge.unshift(Y[2])), ge.length && (s = ge.join(".") + s), this.hostname = ce.join(".");
            break;
          }
        }
      }
    }
    this.hostname.length > C3 && (this.hostname = ""), C && (this.hostname = this.hostname.substr(1, this.hostname.length - 2));
  }
  const a = s.indexOf("#");
  a !== -1 && (this.hash = s.substr(a), s = s.slice(0, a));
  const l = s.indexOf("?");
  return l !== -1 && (this.search = s.substr(l), s = s.slice(0, l)), s && (this.pathname = s), Ov[r] && this.hostname && !this.pathname && (this.pathname = ""), this;
};
cc.prototype.parseHost = function(t) {
  let e = E3.exec(t);
  e && (e = e[0], e !== ":" && (this.port = e.substr(1)), t = t.substr(0, t.length - e.length)), t && (this.hostname = t);
};
const A3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  decode: so,
  encode: za,
  format: mm,
  parse: gm
}, Symbol.toStringTag, { value: "Module" })), q1 = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, z1 = /[\0-\x1F\x7F-\x9F]/, R3 = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC3F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/, $m = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/, G1 = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/, x3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Any: q1,
  Cc: z1,
  Cf: R3,
  P: $m,
  Z: G1
}, Symbol.toStringTag, { value: "Module" })), N3 = new Uint16Array(
  // prettier-ignore
  'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((t) => t.charCodeAt(0))
), k3 = new Uint16Array(
  // prettier-ignore
  "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((t) => t.charCodeAt(0))
);
var e_;
const I3 = /* @__PURE__ */ new Map([
  [0, 65533],
  // C1 Unicode control character reference replacements
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]), O3 = (
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
  (e_ = String.fromCodePoint) !== null && e_ !== void 0 ? e_ : function(t) {
    let e = "";
    return t > 65535 && (t -= 65536, e += String.fromCharCode(t >>> 10 & 1023 | 55296), t = 56320 | t & 1023), e += String.fromCharCode(t), e;
  }
);
function D3(t) {
  var e;
  return t >= 55296 && t <= 57343 || t > 1114111 ? 65533 : (e = I3.get(t)) !== null && e !== void 0 ? e : t;
}
var Cr;
(function(t) {
  t[t.NUM = 35] = "NUM", t[t.SEMI = 59] = "SEMI", t[t.EQUALS = 61] = "EQUALS", t[t.ZERO = 48] = "ZERO", t[t.NINE = 57] = "NINE", t[t.LOWER_A = 97] = "LOWER_A", t[t.LOWER_F = 102] = "LOWER_F", t[t.LOWER_X = 120] = "LOWER_X", t[t.LOWER_Z = 122] = "LOWER_Z", t[t.UPPER_A = 65] = "UPPER_A", t[t.UPPER_F = 70] = "UPPER_F", t[t.UPPER_Z = 90] = "UPPER_Z";
})(Cr || (Cr = {}));
const M3 = 32;
var Ii;
(function(t) {
  t[t.VALUE_LENGTH = 49152] = "VALUE_LENGTH", t[t.BRANCH_LENGTH = 16256] = "BRANCH_LENGTH", t[t.JUMP_TABLE = 127] = "JUMP_TABLE";
})(Ii || (Ii = {}));
function _h(t) {
  return t >= Cr.ZERO && t <= Cr.NINE;
}
function L3(t) {
  return t >= Cr.UPPER_A && t <= Cr.UPPER_F || t >= Cr.LOWER_A && t <= Cr.LOWER_F;
}
function P3(t) {
  return t >= Cr.UPPER_A && t <= Cr.UPPER_Z || t >= Cr.LOWER_A && t <= Cr.LOWER_Z || _h(t);
}
function F3(t) {
  return t === Cr.EQUALS || P3(t);
}
var Tr;
(function(t) {
  t[t.EntityStart = 0] = "EntityStart", t[t.NumericStart = 1] = "NumericStart", t[t.NumericDecimal = 2] = "NumericDecimal", t[t.NumericHex = 3] = "NumericHex", t[t.NamedEntity = 4] = "NamedEntity";
})(Tr || (Tr = {}));
var wi;
(function(t) {
  t[t.Legacy = 0] = "Legacy", t[t.Strict = 1] = "Strict", t[t.Attribute = 2] = "Attribute";
})(wi || (wi = {}));
class B3 {
  constructor(e, r, n) {
    this.decodeTree = e, this.emitCodePoint = r, this.errors = n, this.state = Tr.EntityStart, this.consumed = 1, this.result = 0, this.treeIndex = 0, this.excess = 1, this.decodeMode = wi.Strict;
  }
  /** Resets the instance to make it reusable. */
  startEntity(e) {
    this.decodeMode = e, this.state = Tr.EntityStart, this.result = 0, this.treeIndex = 0, this.excess = 1, this.consumed = 1;
  }
  /**
   * Write an entity to the decoder. This can be called multiple times with partial entities.
   * If the entity is incomplete, the decoder will return -1.
   *
   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
   * entity is incomplete, and resume when the next string is written.
   *
   * @param string The string containing the entity (or a continuation of the entity).
   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  write(e, r) {
    switch (this.state) {
      case Tr.EntityStart:
        return e.charCodeAt(r) === Cr.NUM ? (this.state = Tr.NumericStart, this.consumed += 1, this.stateNumericStart(e, r + 1)) : (this.state = Tr.NamedEntity, this.stateNamedEntity(e, r));
      case Tr.NumericStart:
        return this.stateNumericStart(e, r);
      case Tr.NumericDecimal:
        return this.stateNumericDecimal(e, r);
      case Tr.NumericHex:
        return this.stateNumericHex(e, r);
      case Tr.NamedEntity:
        return this.stateNamedEntity(e, r);
    }
  }
  /**
   * Switches between the numeric decimal and hexadecimal states.
   *
   * Equivalent to the `Numeric character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericStart(e, r) {
    return r >= e.length ? -1 : (e.charCodeAt(r) | M3) === Cr.LOWER_X ? (this.state = Tr.NumericHex, this.consumed += 1, this.stateNumericHex(e, r + 1)) : (this.state = Tr.NumericDecimal, this.stateNumericDecimal(e, r));
  }
  addToNumericResult(e, r, n, i) {
    if (r !== n) {
      const s = n - r;
      this.result = this.result * Math.pow(i, s) + parseInt(e.substr(r, s), i), this.consumed += s;
    }
  }
  /**
   * Parses a hexadecimal numeric entity.
   *
   * Equivalent to the `Hexademical character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericHex(e, r) {
    const n = r;
    for (; r < e.length; ) {
      const i = e.charCodeAt(r);
      if (_h(i) || L3(i))
        r += 1;
      else
        return this.addToNumericResult(e, n, r, 16), this.emitNumericEntity(i, 3);
    }
    return this.addToNumericResult(e, n, r, 16), -1;
  }
  /**
   * Parses a decimal numeric entity.
   *
   * Equivalent to the `Decimal character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericDecimal(e, r) {
    const n = r;
    for (; r < e.length; ) {
      const i = e.charCodeAt(r);
      if (_h(i))
        r += 1;
      else
        return this.addToNumericResult(e, n, r, 10), this.emitNumericEntity(i, 2);
    }
    return this.addToNumericResult(e, n, r, 10), -1;
  }
  /**
   * Validate and emit a numeric entity.
   *
   * Implements the logic from the `Hexademical character reference start
   * state` and `Numeric character reference end state` in the HTML spec.
   *
   * @param lastCp The last code point of the entity. Used to see if the
   *               entity was terminated with a semicolon.
   * @param expectedLength The minimum number of characters that should be
   *                       consumed. Used to validate that at least one digit
   *                       was consumed.
   * @returns The number of characters that were consumed.
   */
  emitNumericEntity(e, r) {
    var n;
    if (this.consumed <= r)
      return (n = this.errors) === null || n === void 0 || n.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
    if (e === Cr.SEMI)
      this.consumed += 1;
    else if (this.decodeMode === wi.Strict)
      return 0;
    return this.emitCodePoint(D3(this.result), this.consumed), this.errors && (e !== Cr.SEMI && this.errors.missingSemicolonAfterCharacterReference(), this.errors.validateNumericCharacterReference(this.result)), this.consumed;
  }
  /**
   * Parses a named entity.
   *
   * Equivalent to the `Named character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNamedEntity(e, r) {
    const { decodeTree: n } = this;
    let i = n[this.treeIndex], s = (i & Ii.VALUE_LENGTH) >> 14;
    for (; r < e.length; r++, this.excess++) {
      const o = e.charCodeAt(r);
      if (this.treeIndex = U3(n, i, this.treeIndex + Math.max(1, s), o), this.treeIndex < 0)
        return this.result === 0 || // If we are parsing an attribute
        this.decodeMode === wi.Attribute && // We shouldn't have consumed any characters after the entity,
        (s === 0 || // And there should be no invalid characters.
        F3(o)) ? 0 : this.emitNotTerminatedNamedEntity();
      if (i = n[this.treeIndex], s = (i & Ii.VALUE_LENGTH) >> 14, s !== 0) {
        if (o === Cr.SEMI)
          return this.emitNamedEntityData(this.treeIndex, s, this.consumed + this.excess);
        this.decodeMode !== wi.Strict && (this.result = this.treeIndex, this.consumed += this.excess, this.excess = 0);
      }
    }
    return -1;
  }
  /**
   * Emit a named entity that was not terminated with a semicolon.
   *
   * @returns The number of characters consumed.
   */
  emitNotTerminatedNamedEntity() {
    var e;
    const { result: r, decodeTree: n } = this, i = (n[r] & Ii.VALUE_LENGTH) >> 14;
    return this.emitNamedEntityData(r, i, this.consumed), (e = this.errors) === null || e === void 0 || e.missingSemicolonAfterCharacterReference(), this.consumed;
  }
  /**
   * Emit a named entity.
   *
   * @param result The index of the entity in the decode tree.
   * @param valueLength The number of bytes in the entity.
   * @param consumed The number of characters consumed.
   *
   * @returns The number of characters consumed.
   */
  emitNamedEntityData(e, r, n) {
    const { decodeTree: i } = this;
    return this.emitCodePoint(r === 1 ? i[e] & ~Ii.VALUE_LENGTH : i[e + 1], n), r === 3 && this.emitCodePoint(i[e + 2], n), n;
  }
  /**
   * Signal to the parser that the end of the input was reached.
   *
   * Remaining data will be emitted and relevant errors will be produced.
   *
   * @returns The number of characters consumed.
   */
  end() {
    var e;
    switch (this.state) {
      case Tr.NamedEntity:
        return this.result !== 0 && (this.decodeMode !== wi.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
      case Tr.NumericDecimal:
        return this.emitNumericEntity(0, 2);
      case Tr.NumericHex:
        return this.emitNumericEntity(0, 3);
      case Tr.NumericStart:
        return (e = this.errors) === null || e === void 0 || e.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
      case Tr.EntityStart:
        return 0;
    }
  }
}
function Y1(t) {
  let e = "";
  const r = new B3(t, (n) => e += O3(n));
  return function(i, s) {
    let o = 0, a = 0;
    for (; (a = i.indexOf("&", a)) >= 0; ) {
      e += i.slice(o, a), r.startEntity(s);
      const c = r.write(
        i,
        // Skip the "&"
        a + 1
      );
      if (c < 0) {
        o = a + r.end();
        break;
      }
      o = a + c, a = c === 0 ? o + 1 : o;
    }
    const l = e + i.slice(o);
    return e = "", l;
  };
}
function U3(t, e, r, n) {
  const i = (e & Ii.BRANCH_LENGTH) >> 7, s = e & Ii.JUMP_TABLE;
  if (i === 0)
    return s !== 0 && n === s ? r : -1;
  if (s) {
    const l = n - s;
    return l < 0 || l >= i ? -1 : t[r + l] - 1;
  }
  let o = r, a = o + i - 1;
  for (; o <= a; ) {
    const l = o + a >>> 1, c = t[l];
    if (c < n)
      o = l + 1;
    else if (c > n)
      a = l - 1;
    else
      return t[l + i];
  }
  return -1;
}
const q3 = Y1(N3);
Y1(k3);
function H1(t, e = wi.Legacy) {
  return q3(t, e);
}
function z3(t) {
  return Object.prototype.toString.call(t);
}
function bm(t) {
  return z3(t) === "[object String]";
}
const G3 = Object.prototype.hasOwnProperty;
function Y3(t, e) {
  return G3.call(t, e);
}
function Dc(t) {
  return Array.prototype.slice.call(arguments, 1).forEach(function(r) {
    if (r) {
      if (typeof r != "object")
        throw new TypeError(r + "must be object");
      Object.keys(r).forEach(function(n) {
        t[n] = r[n];
      });
    }
  }), t;
}
function V1(t, e, r) {
  return [].concat(t.slice(0, e), r, t.slice(e + 1));
}
function Em(t) {
  return !(t >= 55296 && t <= 57343 || t >= 64976 && t <= 65007 || (t & 65535) === 65535 || (t & 65535) === 65534 || t >= 0 && t <= 8 || t === 11 || t >= 14 && t <= 31 || t >= 127 && t <= 159 || t > 1114111);
}
function uc(t) {
  if (t > 65535) {
    t -= 65536;
    const e = 55296 + (t >> 10), r = 56320 + (t & 1023);
    return String.fromCharCode(e, r);
  }
  return String.fromCharCode(t);
}
const W1 = /\\([!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])/g, H3 = /&([a-z#][a-z0-9]{1,31});/gi, V3 = new RegExp(W1.source + "|" + H3.source, "gi"), W3 = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;
function K3(t, e) {
  if (e.charCodeAt(0) === 35 && W3.test(e)) {
    const n = e[1].toLowerCase() === "x" ? parseInt(e.slice(2), 16) : parseInt(e.slice(1), 10);
    return Em(n) ? uc(n) : t;
  }
  const r = H1(t);
  return r !== t ? r : t;
}
function Q3(t) {
  return t.indexOf("\\") < 0 ? t : t.replace(W1, "$1");
}
function va(t) {
  return t.indexOf("\\") < 0 && t.indexOf("&") < 0 ? t : t.replace(V3, function(e, r, n) {
    return r || K3(e, n);
  });
}
const j3 = /[&<>"]/, X3 = /[&<>"]/g, Z3 = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;"
};
function J3(t) {
  return Z3[t];
}
function ji(t) {
  return j3.test(t) ? t.replace(X3, J3) : t;
}
const eF = /[.?*+^$[\]\\(){}|-]/g;
function tF(t) {
  return t.replace(eF, "\\$&");
}
function ir(t) {
  switch (t) {
    case 9:
    case 32:
      return !0;
  }
  return !1;
}
function Sa(t) {
  if (t >= 8192 && t <= 8202)
    return !0;
  switch (t) {
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 32:
    case 160:
    case 5760:
    case 8239:
    case 8287:
    case 12288:
      return !0;
  }
  return !1;
}
function ya(t) {
  return $m.test(t);
}
function Ta(t) {
  switch (t) {
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 124:
    case 125:
    case 126:
      return !0;
    default:
      return !1;
  }
}
function Mc(t) {
  return t = t.trim().replace(/\s+/g, " "), "ẞ".toLowerCase() === "Ṿ" && (t = t.replace(/ẞ/g, "ß")), t.toLowerCase().toUpperCase();
}
const rF = { mdurl: A3, ucmicro: x3 }, nF = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  arrayReplaceAt: V1,
  assign: Dc,
  escapeHtml: ji,
  escapeRE: tF,
  fromCodePoint: uc,
  has: Y3,
  isMdAsciiPunct: Ta,
  isPunctChar: ya,
  isSpace: ir,
  isString: bm,
  isValidEntityCode: Em,
  isWhiteSpace: Sa,
  lib: rF,
  normalizeReference: Mc,
  unescapeAll: va,
  unescapeMd: Q3
}, Symbol.toStringTag, { value: "Module" }));
function iF(t, e, r) {
  let n, i, s, o;
  const a = t.posMax, l = t.pos;
  for (t.pos = e + 1, n = 1; t.pos < a; ) {
    if (s = t.src.charCodeAt(t.pos), s === 93 && (n--, n === 0)) {
      i = !0;
      break;
    }
    if (o = t.pos, t.md.inline.skipToken(t), s === 91) {
      if (o === t.pos - 1)
        n++;
      else if (r)
        return t.pos = l, -1;
    }
  }
  let c = -1;
  return i && (c = t.pos), t.pos = l, c;
}
function sF(t, e, r) {
  let n, i = e;
  const s = {
    ok: !1,
    pos: 0,
    lines: 0,
    str: ""
  };
  if (t.charCodeAt(i) === 60) {
    for (i++; i < r; ) {
      if (n = t.charCodeAt(i), n === 10 || n === 60)
        return s;
      if (n === 62)
        return s.pos = i + 1, s.str = va(t.slice(e + 1, i)), s.ok = !0, s;
      if (n === 92 && i + 1 < r) {
        i += 2;
        continue;
      }
      i++;
    }
    return s;
  }
  let o = 0;
  for (; i < r && (n = t.charCodeAt(i), !(n === 32 || n < 32 || n === 127)); ) {
    if (n === 92 && i + 1 < r) {
      if (t.charCodeAt(i + 1) === 32)
        break;
      i += 2;
      continue;
    }
    if (n === 40 && (o++, o > 32))
      return s;
    if (n === 41) {
      if (o === 0)
        break;
      o--;
    }
    i++;
  }
  return e === i || o !== 0 || (s.str = va(t.slice(e, i)), s.pos = i, s.ok = !0), s;
}
function oF(t, e, r) {
  let n, i, s = 0, o = e;
  const a = {
    ok: !1,
    pos: 0,
    lines: 0,
    str: ""
  };
  if (o >= r || (i = t.charCodeAt(o), i !== 34 && i !== 39 && i !== 40))
    return a;
  for (o++, i === 40 && (i = 41); o < r; ) {
    if (n = t.charCodeAt(o), n === i)
      return a.pos = o + 1, a.lines = s, a.str = va(t.slice(e + 1, o)), a.ok = !0, a;
    if (n === 40 && i === 41)
      return a;
    n === 10 ? s++ : n === 92 && o + 1 < r && (o++, t.charCodeAt(o) === 10 && s++), o++;
  }
  return a;
}
const aF = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  parseLinkDestination: sF,
  parseLinkLabel: iF,
  parseLinkTitle: oF
}, Symbol.toStringTag, { value: "Module" })), ai = {};
ai.code_inline = function(t, e, r, n, i) {
  const s = t[e];
  return "<code" + i.renderAttrs(s) + ">" + ji(s.content) + "</code>";
};
ai.code_block = function(t, e, r, n, i) {
  const s = t[e];
  return "<pre" + i.renderAttrs(s) + "><code>" + ji(t[e].content) + `</code></pre>
`;
};
ai.fence = function(t, e, r, n, i) {
  const s = t[e], o = s.info ? va(s.info).trim() : "";
  let a = "", l = "";
  if (o) {
    const f = o.split(/(\s+)/g);
    a = f[0], l = f.slice(2).join("");
  }
  let c;
  if (r.highlight ? c = r.highlight(s.content, a, l) || ji(s.content) : c = ji(s.content), c.indexOf("<pre") === 0)
    return c + `
`;
  if (o) {
    const f = s.attrIndex("class"), m = s.attrs ? s.attrs.slice() : [];
    f < 0 ? m.push(["class", r.langPrefix + a]) : (m[f] = m[f].slice(), m[f][1] += " " + r.langPrefix + a);
    const b = {
      attrs: m
    };
    return `<pre><code${i.renderAttrs(b)}>${c}</code></pre>
`;
  }
  return `<pre><code${i.renderAttrs(s)}>${c}</code></pre>
`;
};
ai.image = function(t, e, r, n, i) {
  const s = t[e];
  return s.attrs[s.attrIndex("alt")][1] = i.renderInlineAsText(s.children, r, n), i.renderToken(t, e, r);
};
ai.hardbreak = function(t, e, r) {
  return r.xhtmlOut ? `<br />
` : `<br>
`;
};
ai.softbreak = function(t, e, r) {
  return r.breaks ? r.xhtmlOut ? `<br />
` : `<br>
` : `
`;
};
ai.text = function(t, e) {
  return ji(t[e].content);
};
ai.html_block = function(t, e) {
  return t[e].content;
};
ai.html_inline = function(t, e) {
  return t[e].content;
};
function _o() {
  this.rules = Dc({}, ai);
}
_o.prototype.renderAttrs = function(e) {
  let r, n, i;
  if (!e.attrs)
    return "";
  for (i = "", r = 0, n = e.attrs.length; r < n; r++)
    i += " " + ji(e.attrs[r][0]) + '="' + ji(e.attrs[r][1]) + '"';
  return i;
};
_o.prototype.renderToken = function(e, r, n) {
  const i = e[r];
  let s = "";
  if (i.hidden)
    return "";
  i.block && i.nesting !== -1 && r && e[r - 1].hidden && (s += `
`), s += (i.nesting === -1 ? "</" : "<") + i.tag, s += this.renderAttrs(i), i.nesting === 0 && n.xhtmlOut && (s += " /");
  let o = !1;
  if (i.block && (o = !0, i.nesting === 1 && r + 1 < e.length)) {
    const a = e[r + 1];
    (a.type === "inline" || a.hidden || a.nesting === -1 && a.tag === i.tag) && (o = !1);
  }
  return s += o ? `>
` : ">", s;
};
_o.prototype.renderInline = function(t, e, r) {
  let n = "";
  const i = this.rules;
  for (let s = 0, o = t.length; s < o; s++) {
    const a = t[s].type;
    typeof i[a] < "u" ? n += i[a](t, s, e, r, this) : n += this.renderToken(t, s, e);
  }
  return n;
};
_o.prototype.renderInlineAsText = function(t, e, r) {
  let n = "";
  for (let i = 0, s = t.length; i < s; i++)
    switch (t[i].type) {
      case "text":
        n += t[i].content;
        break;
      case "image":
        n += this.renderInlineAsText(t[i].children, e, r);
        break;
      case "html_inline":
      case "html_block":
        n += t[i].content;
        break;
      case "softbreak":
      case "hardbreak":
        n += `
`;
        break;
    }
  return n;
};
_o.prototype.render = function(t, e, r) {
  let n = "";
  const i = this.rules;
  for (let s = 0, o = t.length; s < o; s++) {
    const a = t[s].type;
    a === "inline" ? n += this.renderInline(t[s].children, e, r) : typeof i[a] < "u" ? n += i[a](t, s, e, r, this) : n += this.renderToken(t, s, e, r);
  }
  return n;
};
function sn() {
  this.__rules__ = [], this.__cache__ = null;
}
sn.prototype.__find__ = function(t) {
  for (let e = 0; e < this.__rules__.length; e++)
    if (this.__rules__[e].name === t)
      return e;
  return -1;
};
sn.prototype.__compile__ = function() {
  const t = this, e = [""];
  t.__rules__.forEach(function(r) {
    r.enabled && r.alt.forEach(function(n) {
      e.indexOf(n) < 0 && e.push(n);
    });
  }), t.__cache__ = {}, e.forEach(function(r) {
    t.__cache__[r] = [], t.__rules__.forEach(function(n) {
      n.enabled && (r && n.alt.indexOf(r) < 0 || t.__cache__[r].push(n.fn));
    });
  });
};
sn.prototype.at = function(t, e, r) {
  const n = this.__find__(t), i = r || {};
  if (n === -1)
    throw new Error("Parser rule not found: " + t);
  this.__rules__[n].fn = e, this.__rules__[n].alt = i.alt || [], this.__cache__ = null;
};
sn.prototype.before = function(t, e, r, n) {
  const i = this.__find__(t), s = n || {};
  if (i === -1)
    throw new Error("Parser rule not found: " + t);
  this.__rules__.splice(i, 0, {
    name: e,
    enabled: !0,
    fn: r,
    alt: s.alt || []
  }), this.__cache__ = null;
};
sn.prototype.after = function(t, e, r, n) {
  const i = this.__find__(t), s = n || {};
  if (i === -1)
    throw new Error("Parser rule not found: " + t);
  this.__rules__.splice(i + 1, 0, {
    name: e,
    enabled: !0,
    fn: r,
    alt: s.alt || []
  }), this.__cache__ = null;
};
sn.prototype.push = function(t, e, r) {
  const n = r || {};
  this.__rules__.push({
    name: t,
    enabled: !0,
    fn: e,
    alt: n.alt || []
  }), this.__cache__ = null;
};
sn.prototype.enable = function(t, e) {
  Array.isArray(t) || (t = [t]);
  const r = [];
  return t.forEach(function(n) {
    const i = this.__find__(n);
    if (i < 0) {
      if (e)
        return;
      throw new Error("Rules manager: invalid rule name " + n);
    }
    this.__rules__[i].enabled = !0, r.push(n);
  }, this), this.__cache__ = null, r;
};
sn.prototype.enableOnly = function(t, e) {
  Array.isArray(t) || (t = [t]), this.__rules__.forEach(function(r) {
    r.enabled = !1;
  }), this.enable(t, e);
};
sn.prototype.disable = function(t, e) {
  Array.isArray(t) || (t = [t]);
  const r = [];
  return t.forEach(function(n) {
    const i = this.__find__(n);
    if (i < 0) {
      if (e)
        return;
      throw new Error("Rules manager: invalid rule name " + n);
    }
    this.__rules__[i].enabled = !1, r.push(n);
  }, this), this.__cache__ = null, r;
};
sn.prototype.getRules = function(t) {
  return this.__cache__ === null && this.__compile__(), this.__cache__[t] || [];
};
function Bn(t, e, r) {
  this.type = t, this.tag = e, this.attrs = null, this.map = null, this.nesting = r, this.level = 0, this.children = null, this.content = "", this.markup = "", this.info = "", this.meta = null, this.block = !1, this.hidden = !1;
}
Bn.prototype.attrIndex = function(e) {
  if (!this.attrs)
    return -1;
  const r = this.attrs;
  for (let n = 0, i = r.length; n < i; n++)
    if (r[n][0] === e)
      return n;
  return -1;
};
Bn.prototype.attrPush = function(e) {
  this.attrs ? this.attrs.push(e) : this.attrs = [e];
};
Bn.prototype.attrSet = function(e, r) {
  const n = this.attrIndex(e), i = [e, r];
  n < 0 ? this.attrPush(i) : this.attrs[n] = i;
};
Bn.prototype.attrGet = function(e) {
  const r = this.attrIndex(e);
  let n = null;
  return r >= 0 && (n = this.attrs[r][1]), n;
};
Bn.prototype.attrJoin = function(e, r) {
  const n = this.attrIndex(e);
  n < 0 ? this.attrPush([e, r]) : this.attrs[n][1] = this.attrs[n][1] + " " + r;
};
function K1(t, e, r) {
  this.src = t, this.env = r, this.tokens = [], this.inlineMode = !1, this.md = e;
}
K1.prototype.Token = Bn;
const lF = /\r\n?|\n/g, cF = /\0/g;
function uF(t) {
  let e;
  e = t.src.replace(lF, `
`), e = e.replace(cF, "�"), t.src = e;
}
function dF(t) {
  let e;
  t.inlineMode ? (e = new t.Token("inline", "", 0), e.content = t.src, e.map = [0, 1], e.children = [], t.tokens.push(e)) : t.md.block.parse(t.src, t.md, t.env, t.tokens);
}
function fF(t) {
  const e = t.tokens;
  for (let r = 0, n = e.length; r < n; r++) {
    const i = e[r];
    i.type === "inline" && t.md.inline.parse(i.content, t.md, t.env, i.children);
  }
}
function pF(t) {
  return /^<a[>\s]/i.test(t);
}
function _F(t) {
  return /^<\/a\s*>/i.test(t);
}
function hF(t) {
  const e = t.tokens;
  if (t.md.options.linkify)
    for (let r = 0, n = e.length; r < n; r++) {
      if (e[r].type !== "inline" || !t.md.linkify.pretest(e[r].content))
        continue;
      let i = e[r].children, s = 0;
      for (let o = i.length - 1; o >= 0; o--) {
        const a = i[o];
        if (a.type === "link_close") {
          for (o--; i[o].level !== a.level && i[o].type !== "link_open"; )
            o--;
          continue;
        }
        if (a.type === "html_inline" && (pF(a.content) && s > 0 && s--, _F(a.content) && s++), !(s > 0) && a.type === "text" && t.md.linkify.test(a.content)) {
          const l = a.content;
          let c = t.md.linkify.match(l);
          const f = [];
          let m = a.level, b = 0;
          c.length > 0 && c[0].index === 0 && o > 0 && i[o - 1].type === "text_special" && (c = c.slice(1));
          for (let C = 0; C < c.length; C++) {
            const N = c[C].url, z = t.md.normalizeLink(N);
            if (!t.md.validateLink(z))
              continue;
            let A = c[C].text;
            c[C].schema ? c[C].schema === "mailto:" && !/^mailto:/i.test(A) ? A = t.md.normalizeLinkText("mailto:" + A).replace(/^mailto:/, "") : A = t.md.normalizeLinkText(A) : A = t.md.normalizeLinkText("http://" + A).replace(/^http:\/\//, "");
            const Q = c[C].index;
            if (Q > b) {
              const Y = new t.Token("text", "", 0);
              Y.content = l.slice(b, Q), Y.level = m, f.push(Y);
            }
            const Te = new t.Token("link_open", "a", 1);
            Te.attrs = [["href", z]], Te.level = m++, Te.markup = "linkify", Te.info = "auto", f.push(Te);
            const ce = new t.Token("text", "", 0);
            ce.content = A, ce.level = m, f.push(ce);
            const ge = new t.Token("link_close", "a", -1);
            ge.level = --m, ge.markup = "linkify", ge.info = "auto", f.push(ge), b = c[C].lastIndex;
          }
          if (b < l.length) {
            const C = new t.Token("text", "", 0);
            C.content = l.slice(b), C.level = m, f.push(C);
          }
          e[r].children = i = V1(i, o, f);
        }
      }
    }
}
const Q1 = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/, mF = /\((c|tm|r)\)/i, gF = /\((c|tm|r)\)/ig, $F = {
  c: "©",
  r: "®",
  tm: "™"
};
function bF(t, e) {
  return $F[e.toLowerCase()];
}
function EF(t) {
  let e = 0;
  for (let r = t.length - 1; r >= 0; r--) {
    const n = t[r];
    n.type === "text" && !e && (n.content = n.content.replace(gF, bF)), n.type === "link_open" && n.info === "auto" && e--, n.type === "link_close" && n.info === "auto" && e++;
  }
}
function vF(t) {
  let e = 0;
  for (let r = t.length - 1; r >= 0; r--) {
    const n = t[r];
    n.type === "text" && !e && Q1.test(n.content) && (n.content = n.content.replace(/\+-/g, "±").replace(/\.{2,}/g, "…").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1—").replace(/(^|\s)--(?=\s|$)/mg, "$1–").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1–")), n.type === "link_open" && n.info === "auto" && e--, n.type === "link_close" && n.info === "auto" && e++;
  }
}
function SF(t) {
  let e;
  if (t.md.options.typographer)
    for (e = t.tokens.length - 1; e >= 0; e--)
      t.tokens[e].type === "inline" && (mF.test(t.tokens[e].content) && EF(t.tokens[e].children), Q1.test(t.tokens[e].content) && vF(t.tokens[e].children));
}
const yF = /['"]/, Dv = /['"]/g, Mv = "’";
function bl(t, e, r) {
  return t.slice(0, e) + r + t.slice(e + 1);
}
function TF(t, e) {
  let r;
  const n = [];
  for (let i = 0; i < t.length; i++) {
    const s = t[i], o = t[i].level;
    for (r = n.length - 1; r >= 0 && !(n[r].level <= o); r--)
      ;
    if (n.length = r + 1, s.type !== "text")
      continue;
    let a = s.content, l = 0, c = a.length;
    e:
      for (; l < c; ) {
        Dv.lastIndex = l;
        const f = Dv.exec(a);
        if (!f)
          break;
        let m = !0, b = !0;
        l = f.index + 1;
        const C = f[0] === "'";
        let N = 32;
        if (f.index - 1 >= 0)
          N = a.charCodeAt(f.index - 1);
        else
          for (r = i - 1; r >= 0 && !(t[r].type === "softbreak" || t[r].type === "hardbreak"); r--)
            if (t[r].content) {
              N = t[r].content.charCodeAt(t[r].content.length - 1);
              break;
            }
        let z = 32;
        if (l < c)
          z = a.charCodeAt(l);
        else
          for (r = i + 1; r < t.length && !(t[r].type === "softbreak" || t[r].type === "hardbreak"); r++)
            if (t[r].content) {
              z = t[r].content.charCodeAt(0);
              break;
            }
        const A = Ta(N) || ya(String.fromCharCode(N)), Q = Ta(z) || ya(String.fromCharCode(z)), Te = Sa(N), ce = Sa(z);
        if (ce ? m = !1 : Q && (Te || A || (m = !1)), Te ? b = !1 : A && (ce || Q || (b = !1)), z === 34 && f[0] === '"' && N >= 48 && N <= 57 && (b = m = !1), m && b && (m = A, b = Q), !m && !b) {
          C && (s.content = bl(s.content, f.index, Mv));
          continue;
        }
        if (b)
          for (r = n.length - 1; r >= 0; r--) {
            let ge = n[r];
            if (n[r].level < o)
              break;
            if (ge.single === C && n[r].level === o) {
              ge = n[r];
              let Y, fe;
              C ? (Y = e.md.options.quotes[2], fe = e.md.options.quotes[3]) : (Y = e.md.options.quotes[0], fe = e.md.options.quotes[1]), s.content = bl(s.content, f.index, fe), t[ge.token].content = bl(
                t[ge.token].content,
                ge.pos,
                Y
              ), l += fe.length - 1, ge.token === i && (l += Y.length - 1), a = s.content, c = a.length, n.length = r;
              continue e;
            }
          }
        m ? n.push({
          token: i,
          pos: f.index,
          single: C,
          level: o
        }) : b && C && (s.content = bl(s.content, f.index, Mv));
      }
  }
}
function CF(t) {
  if (t.md.options.typographer)
    for (let e = t.tokens.length - 1; e >= 0; e--)
      t.tokens[e].type !== "inline" || !yF.test(t.tokens[e].content) || TF(t.tokens[e].children, t);
}
function wF(t) {
  let e, r;
  const n = t.tokens, i = n.length;
  for (let s = 0; s < i; s++) {
    if (n[s].type !== "inline")
      continue;
    const o = n[s].children, a = o.length;
    for (e = 0; e < a; e++)
      o[e].type === "text_special" && (o[e].type = "text");
    for (e = r = 0; e < a; e++)
      o[e].type === "text" && e + 1 < a && o[e + 1].type === "text" ? o[e + 1].content = o[e].content + o[e + 1].content : (e !== r && (o[r] = o[e]), r++);
    e !== r && (o.length = r);
  }
}
const t_ = [
  ["normalize", uF],
  ["block", dF],
  ["inline", fF],
  ["linkify", hF],
  ["replacements", SF],
  ["smartquotes", CF],
  // `text_join` finds `text_special` tokens (for escape sequences)
  // and joins them with the rest of the text
  ["text_join", wF]
];
function vm() {
  this.ruler = new sn();
  for (let t = 0; t < t_.length; t++)
    this.ruler.push(t_[t][0], t_[t][1]);
}
vm.prototype.process = function(t) {
  const e = this.ruler.getRules("");
  for (let r = 0, n = e.length; r < n; r++)
    e[r](t);
};
vm.prototype.State = K1;
function li(t, e, r, n) {
  this.src = t, this.md = e, this.env = r, this.tokens = n, this.bMarks = [], this.eMarks = [], this.tShift = [], this.sCount = [], this.bsCount = [], this.blkIndent = 0, this.line = 0, this.lineMax = 0, this.tight = !1, this.ddIndent = -1, this.listIndent = -1, this.parentType = "root", this.level = 0;
  const i = this.src;
  for (let s = 0, o = 0, a = 0, l = 0, c = i.length, f = !1; o < c; o++) {
    const m = i.charCodeAt(o);
    if (!f)
      if (ir(m)) {
        a++, m === 9 ? l += 4 - l % 4 : l++;
        continue;
      } else
        f = !0;
    (m === 10 || o === c - 1) && (m !== 10 && o++, this.bMarks.push(s), this.eMarks.push(o), this.tShift.push(a), this.sCount.push(l), this.bsCount.push(0), f = !1, a = 0, l = 0, s = o + 1);
  }
  this.bMarks.push(i.length), this.eMarks.push(i.length), this.tShift.push(0), this.sCount.push(0), this.bsCount.push(0), this.lineMax = this.bMarks.length - 1;
}
li.prototype.push = function(t, e, r) {
  const n = new Bn(t, e, r);
  return n.block = !0, r < 0 && this.level--, n.level = this.level, r > 0 && this.level++, this.tokens.push(n), n;
};
li.prototype.isEmpty = function(e) {
  return this.bMarks[e] + this.tShift[e] >= this.eMarks[e];
};
li.prototype.skipEmptyLines = function(e) {
  for (let r = this.lineMax; e < r && !(this.bMarks[e] + this.tShift[e] < this.eMarks[e]); e++)
    ;
  return e;
};
li.prototype.skipSpaces = function(e) {
  for (let r = this.src.length; e < r; e++) {
    const n = this.src.charCodeAt(e);
    if (!ir(n))
      break;
  }
  return e;
};
li.prototype.skipSpacesBack = function(e, r) {
  if (e <= r)
    return e;
  for (; e > r; )
    if (!ir(this.src.charCodeAt(--e)))
      return e + 1;
  return e;
};
li.prototype.skipChars = function(e, r) {
  for (let n = this.src.length; e < n && this.src.charCodeAt(e) === r; e++)
    ;
  return e;
};
li.prototype.skipCharsBack = function(e, r, n) {
  if (e <= n)
    return e;
  for (; e > n; )
    if (r !== this.src.charCodeAt(--e))
      return e + 1;
  return e;
};
li.prototype.getLines = function(e, r, n, i) {
  if (e >= r)
    return "";
  const s = new Array(r - e);
  for (let o = 0, a = e; a < r; a++, o++) {
    let l = 0;
    const c = this.bMarks[a];
    let f = c, m;
    for (a + 1 < r || i ? m = this.eMarks[a] + 1 : m = this.eMarks[a]; f < m && l < n; ) {
      const b = this.src.charCodeAt(f);
      if (ir(b))
        b === 9 ? l += 4 - (l + this.bsCount[a]) % 4 : l++;
      else if (f - c < this.tShift[a])
        l++;
      else
        break;
      f++;
    }
    l > n ? s[o] = new Array(l - n + 1).join(" ") + this.src.slice(f, m) : s[o] = this.src.slice(f, m);
  }
  return s.join("");
};
li.prototype.Token = Bn;
function r_(t, e) {
  const r = t.bMarks[e] + t.tShift[e], n = t.eMarks[e];
  return t.src.slice(r, n);
}
function Lv(t) {
  const e = [], r = t.length;
  let n = 0, i = t.charCodeAt(n), s = !1, o = 0, a = "";
  for (; n < r; )
    i === 124 && (s ? (a += t.substring(o, n - 1), o = n) : (e.push(a + t.substring(o, n)), a = "", o = n + 1)), s = i === 92, n++, i = t.charCodeAt(n);
  return e.push(a + t.substring(o)), e;
}
function AF(t, e, r, n) {
  if (e + 2 > r)
    return !1;
  let i = e + 1;
  if (t.sCount[i] < t.blkIndent || t.sCount[i] - t.blkIndent >= 4)
    return !1;
  let s = t.bMarks[i] + t.tShift[i];
  if (s >= t.eMarks[i])
    return !1;
  const o = t.src.charCodeAt(s++);
  if (o !== 124 && o !== 45 && o !== 58 || s >= t.eMarks[i])
    return !1;
  const a = t.src.charCodeAt(s++);
  if (a !== 124 && a !== 45 && a !== 58 && !ir(a) || o === 45 && ir(a))
    return !1;
  for (; s < t.eMarks[i]; ) {
    const ce = t.src.charCodeAt(s);
    if (ce !== 124 && ce !== 45 && ce !== 58 && !ir(ce))
      return !1;
    s++;
  }
  let l = r_(t, e + 1), c = l.split("|");
  const f = [];
  for (let ce = 0; ce < c.length; ce++) {
    const ge = c[ce].trim();
    if (!ge) {
      if (ce === 0 || ce === c.length - 1)
        continue;
      return !1;
    }
    if (!/^:?-+:?$/.test(ge))
      return !1;
    ge.charCodeAt(ge.length - 1) === 58 ? f.push(ge.charCodeAt(0) === 58 ? "center" : "right") : ge.charCodeAt(0) === 58 ? f.push("left") : f.push("");
  }
  if (l = r_(t, e).trim(), l.indexOf("|") === -1 || t.sCount[e] - t.blkIndent >= 4)
    return !1;
  c = Lv(l), c.length && c[0] === "" && c.shift(), c.length && c[c.length - 1] === "" && c.pop();
  const m = c.length;
  if (m === 0 || m !== f.length)
    return !1;
  if (n)
    return !0;
  const b = t.parentType;
  t.parentType = "table";
  const C = t.md.block.ruler.getRules("blockquote"), N = t.push("table_open", "table", 1), z = [e, 0];
  N.map = z;
  const A = t.push("thead_open", "thead", 1);
  A.map = [e, e + 1];
  const Q = t.push("tr_open", "tr", 1);
  Q.map = [e, e + 1];
  for (let ce = 0; ce < c.length; ce++) {
    const ge = t.push("th_open", "th", 1);
    f[ce] && (ge.attrs = [["style", "text-align:" + f[ce]]]);
    const Y = t.push("inline", "", 0);
    Y.content = c[ce].trim(), Y.children = [], t.push("th_close", "th", -1);
  }
  t.push("tr_close", "tr", -1), t.push("thead_close", "thead", -1);
  let Te;
  for (i = e + 2; i < r && !(t.sCount[i] < t.blkIndent); i++) {
    let ce = !1;
    for (let Y = 0, fe = C.length; Y < fe; Y++)
      if (C[Y](t, i, r, !0)) {
        ce = !0;
        break;
      }
    if (ce || (l = r_(t, i).trim(), !l) || t.sCount[i] - t.blkIndent >= 4)
      break;
    if (c = Lv(l), c.length && c[0] === "" && c.shift(), c.length && c[c.length - 1] === "" && c.pop(), i === e + 2) {
      const Y = t.push("tbody_open", "tbody", 1);
      Y.map = Te = [e + 2, 0];
    }
    const ge = t.push("tr_open", "tr", 1);
    ge.map = [i, i + 1];
    for (let Y = 0; Y < m; Y++) {
      const fe = t.push("td_open", "td", 1);
      f[Y] && (fe.attrs = [["style", "text-align:" + f[Y]]]);
      const ae = t.push("inline", "", 0);
      ae.content = c[Y] ? c[Y].trim() : "", ae.children = [], t.push("td_close", "td", -1);
    }
    t.push("tr_close", "tr", -1);
  }
  return Te && (t.push("tbody_close", "tbody", -1), Te[1] = i), t.push("table_close", "table", -1), z[1] = i, t.parentType = b, t.line = i, !0;
}
function RF(t, e, r) {
  if (t.sCount[e] - t.blkIndent < 4)
    return !1;
  let n = e + 1, i = n;
  for (; n < r; ) {
    if (t.isEmpty(n)) {
      n++;
      continue;
    }
    if (t.sCount[n] - t.blkIndent >= 4) {
      n++, i = n;
      continue;
    }
    break;
  }
  t.line = i;
  const s = t.push("code_block", "code", 0);
  return s.content = t.getLines(e, i, 4 + t.blkIndent, !1) + `
`, s.map = [e, t.line], !0;
}
function xF(t, e, r, n) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4 || i + 3 > s)
    return !1;
  const o = t.src.charCodeAt(i);
  if (o !== 126 && o !== 96)
    return !1;
  let a = i;
  i = t.skipChars(i, o);
  let l = i - a;
  if (l < 3)
    return !1;
  const c = t.src.slice(a, i), f = t.src.slice(i, s);
  if (o === 96 && f.indexOf(String.fromCharCode(o)) >= 0)
    return !1;
  if (n)
    return !0;
  let m = e, b = !1;
  for (; m++, !(m >= r || (i = a = t.bMarks[m] + t.tShift[m], s = t.eMarks[m], i < s && t.sCount[m] < t.blkIndent)); )
    if (t.src.charCodeAt(i) === o && !(t.sCount[m] - t.blkIndent >= 4) && (i = t.skipChars(i, o), !(i - a < l) && (i = t.skipSpaces(i), !(i < s)))) {
      b = !0;
      break;
    }
  l = t.sCount[e], t.line = m + (b ? 1 : 0);
  const C = t.push("fence", "code", 0);
  return C.info = f, C.content = t.getLines(e + 1, m, l, !0), C.markup = c, C.map = [e, t.line], !0;
}
function NF(t, e, r, n) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  const o = t.lineMax;
  if (t.sCount[e] - t.blkIndent >= 4 || t.src.charCodeAt(i) !== 62)
    return !1;
  if (n)
    return !0;
  const a = [], l = [], c = [], f = [], m = t.md.block.ruler.getRules("blockquote"), b = t.parentType;
  t.parentType = "blockquote";
  let C = !1, N;
  for (N = e; N < r; N++) {
    const ce = t.sCount[N] < t.blkIndent;
    if (i = t.bMarks[N] + t.tShift[N], s = t.eMarks[N], i >= s)
      break;
    if (t.src.charCodeAt(i++) === 62 && !ce) {
      let Y = t.sCount[N] + 1, fe, ae;
      t.src.charCodeAt(i) === 32 ? (i++, Y++, ae = !1, fe = !0) : t.src.charCodeAt(i) === 9 ? (fe = !0, (t.bsCount[N] + Y) % 4 === 3 ? (i++, Y++, ae = !1) : ae = !0) : fe = !1;
      let Re = Y;
      for (a.push(t.bMarks[N]), t.bMarks[N] = i; i < s; ) {
        const pe = t.src.charCodeAt(i);
        if (ir(pe))
          pe === 9 ? Re += 4 - (Re + t.bsCount[N] + (ae ? 1 : 0)) % 4 : Re++;
        else
          break;
        i++;
      }
      C = i >= s, l.push(t.bsCount[N]), t.bsCount[N] = t.sCount[N] + 1 + (fe ? 1 : 0), c.push(t.sCount[N]), t.sCount[N] = Re - Y, f.push(t.tShift[N]), t.tShift[N] = i - t.bMarks[N];
      continue;
    }
    if (C)
      break;
    let ge = !1;
    for (let Y = 0, fe = m.length; Y < fe; Y++)
      if (m[Y](t, N, r, !0)) {
        ge = !0;
        break;
      }
    if (ge) {
      t.lineMax = N, t.blkIndent !== 0 && (a.push(t.bMarks[N]), l.push(t.bsCount[N]), f.push(t.tShift[N]), c.push(t.sCount[N]), t.sCount[N] -= t.blkIndent);
      break;
    }
    a.push(t.bMarks[N]), l.push(t.bsCount[N]), f.push(t.tShift[N]), c.push(t.sCount[N]), t.sCount[N] = -1;
  }
  const z = t.blkIndent;
  t.blkIndent = 0;
  const A = t.push("blockquote_open", "blockquote", 1);
  A.markup = ">";
  const Q = [e, 0];
  A.map = Q, t.md.block.tokenize(t, e, N);
  const Te = t.push("blockquote_close", "blockquote", -1);
  Te.markup = ">", t.lineMax = o, t.parentType = b, Q[1] = t.line;
  for (let ce = 0; ce < f.length; ce++)
    t.bMarks[ce + e] = a[ce], t.tShift[ce + e] = f[ce], t.sCount[ce + e] = c[ce], t.bsCount[ce + e] = l[ce];
  return t.blkIndent = z, !0;
}
function kF(t, e, r, n) {
  const i = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4)
    return !1;
  let s = t.bMarks[e] + t.tShift[e];
  const o = t.src.charCodeAt(s++);
  if (o !== 42 && o !== 45 && o !== 95)
    return !1;
  let a = 1;
  for (; s < i; ) {
    const c = t.src.charCodeAt(s++);
    if (c !== o && !ir(c))
      return !1;
    c === o && a++;
  }
  if (a < 3)
    return !1;
  if (n)
    return !0;
  t.line = e + 1;
  const l = t.push("hr", "hr", 0);
  return l.map = [e, t.line], l.markup = Array(a + 1).join(String.fromCharCode(o)), !0;
}
function Pv(t, e) {
  const r = t.eMarks[e];
  let n = t.bMarks[e] + t.tShift[e];
  const i = t.src.charCodeAt(n++);
  if (i !== 42 && i !== 45 && i !== 43)
    return -1;
  if (n < r) {
    const s = t.src.charCodeAt(n);
    if (!ir(s))
      return -1;
  }
  return n;
}
function Fv(t, e) {
  const r = t.bMarks[e] + t.tShift[e], n = t.eMarks[e];
  let i = r;
  if (i + 1 >= n)
    return -1;
  let s = t.src.charCodeAt(i++);
  if (s < 48 || s > 57)
    return -1;
  for (; ; ) {
    if (i >= n)
      return -1;
    if (s = t.src.charCodeAt(i++), s >= 48 && s <= 57) {
      if (i - r >= 10)
        return -1;
      continue;
    }
    if (s === 41 || s === 46)
      break;
    return -1;
  }
  return i < n && (s = t.src.charCodeAt(i), !ir(s)) ? -1 : i;
}
function IF(t, e) {
  const r = t.level + 2;
  for (let n = e + 2, i = t.tokens.length - 2; n < i; n++)
    t.tokens[n].level === r && t.tokens[n].type === "paragraph_open" && (t.tokens[n + 2].hidden = !0, t.tokens[n].hidden = !0, n += 2);
}
function OF(t, e, r, n) {
  let i, s, o, a, l = e, c = !0;
  if (t.sCount[l] - t.blkIndent >= 4 || t.listIndent >= 0 && t.sCount[l] - t.listIndent >= 4 && t.sCount[l] < t.blkIndent)
    return !1;
  let f = !1;
  n && t.parentType === "paragraph" && t.sCount[l] >= t.blkIndent && (f = !0);
  let m, b, C;
  if ((C = Fv(t, l)) >= 0) {
    if (m = !0, o = t.bMarks[l] + t.tShift[l], b = Number(t.src.slice(o, C - 1)), f && b !== 1)
      return !1;
  } else if ((C = Pv(t, l)) >= 0)
    m = !1;
  else
    return !1;
  if (f && t.skipSpaces(C) >= t.eMarks[l])
    return !1;
  if (n)
    return !0;
  const N = t.src.charCodeAt(C - 1), z = t.tokens.length;
  m ? (a = t.push("ordered_list_open", "ol", 1), b !== 1 && (a.attrs = [["start", b]])) : a = t.push("bullet_list_open", "ul", 1);
  const A = [l, 0];
  a.map = A, a.markup = String.fromCharCode(N);
  let Q = !1;
  const Te = t.md.block.ruler.getRules("list"), ce = t.parentType;
  for (t.parentType = "list"; l < r; ) {
    s = C, i = t.eMarks[l];
    const ge = t.sCount[l] + C - (t.bMarks[l] + t.tShift[l]);
    let Y = ge;
    for (; s < i; ) {
      const ne = t.src.charCodeAt(s);
      if (ne === 9)
        Y += 4 - (Y + t.bsCount[l]) % 4;
      else if (ne === 32)
        Y++;
      else
        break;
      s++;
    }
    const fe = s;
    let ae;
    fe >= i ? ae = 1 : ae = Y - ge, ae > 4 && (ae = 1);
    const Re = ge + ae;
    a = t.push("list_item_open", "li", 1), a.markup = String.fromCharCode(N);
    const pe = [l, 0];
    a.map = pe, m && (a.info = t.src.slice(o, C - 1));
    const Ce = t.tight, J = t.tShift[l], R = t.sCount[l], ve = t.listIndent;
    if (t.listIndent = t.blkIndent, t.blkIndent = Re, t.tight = !0, t.tShift[l] = fe - t.bMarks[l], t.sCount[l] = Y, fe >= i && t.isEmpty(l + 1) ? t.line = Math.min(t.line + 2, r) : t.md.block.tokenize(t, l, r, !0), (!t.tight || Q) && (c = !1), Q = t.line - l > 1 && t.isEmpty(t.line - 1), t.blkIndent = t.listIndent, t.listIndent = ve, t.tShift[l] = J, t.sCount[l] = R, t.tight = Ce, a = t.push("list_item_close", "li", -1), a.markup = String.fromCharCode(N), l = t.line, pe[1] = l, l >= r || t.sCount[l] < t.blkIndent || t.sCount[l] - t.blkIndent >= 4)
      break;
    let F = !1;
    for (let ne = 0, H = Te.length; ne < H; ne++)
      if (Te[ne](t, l, r, !0)) {
        F = !0;
        break;
      }
    if (F)
      break;
    if (m) {
      if (C = Fv(t, l), C < 0)
        break;
      o = t.bMarks[l] + t.tShift[l];
    } else if (C = Pv(t, l), C < 0)
      break;
    if (N !== t.src.charCodeAt(C - 1))
      break;
  }
  return m ? a = t.push("ordered_list_close", "ol", -1) : a = t.push("bullet_list_close", "ul", -1), a.markup = String.fromCharCode(N), A[1] = l, t.line = l, t.parentType = ce, c && IF(t, z), !0;
}
function DF(t, e, r, n) {
  let i = 0, s = t.bMarks[e] + t.tShift[e], o = t.eMarks[e], a = e + 1;
  if (t.sCount[e] - t.blkIndent >= 4 || t.src.charCodeAt(s) !== 91)
    return !1;
  for (; ++s < o; )
    if (t.src.charCodeAt(s) === 93 && t.src.charCodeAt(s - 1) !== 92) {
      if (s + 1 === o || t.src.charCodeAt(s + 1) !== 58)
        return !1;
      break;
    }
  const l = t.lineMax, c = t.md.block.ruler.getRules("reference"), f = t.parentType;
  for (t.parentType = "reference"; a < l && !t.isEmpty(a); a++) {
    if (t.sCount[a] - t.blkIndent > 3 || t.sCount[a] < 0)
      continue;
    let Y = !1;
    for (let fe = 0, ae = c.length; fe < ae; fe++)
      if (c[fe](t, a, l, !0)) {
        Y = !0;
        break;
      }
    if (Y)
      break;
  }
  const m = t.getLines(e, a, t.blkIndent, !1).trim();
  o = m.length;
  let b = -1;
  for (s = 1; s < o; s++) {
    const Y = m.charCodeAt(s);
    if (Y === 91)
      return !1;
    if (Y === 93) {
      b = s;
      break;
    } else
      Y === 10 ? i++ : Y === 92 && (s++, s < o && m.charCodeAt(s) === 10 && i++);
  }
  if (b < 0 || m.charCodeAt(b + 1) !== 58)
    return !1;
  for (s = b + 2; s < o; s++) {
    const Y = m.charCodeAt(s);
    if (Y === 10)
      i++;
    else if (!ir(Y))
      break;
  }
  const C = t.md.helpers.parseLinkDestination(m, s, o);
  if (!C.ok)
    return !1;
  const N = t.md.normalizeLink(C.str);
  if (!t.md.validateLink(N))
    return !1;
  s = C.pos, i += C.lines;
  const z = s, A = i, Q = s;
  for (; s < o; s++) {
    const Y = m.charCodeAt(s);
    if (Y === 10)
      i++;
    else if (!ir(Y))
      break;
  }
  const Te = t.md.helpers.parseLinkTitle(m, s, o);
  let ce;
  for (s < o && Q !== s && Te.ok ? (ce = Te.str, s = Te.pos, i += Te.lines) : (ce = "", s = z, i = A); s < o; ) {
    const Y = m.charCodeAt(s);
    if (!ir(Y))
      break;
    s++;
  }
  if (s < o && m.charCodeAt(s) !== 10 && ce)
    for (ce = "", s = z, i = A; s < o; ) {
      const Y = m.charCodeAt(s);
      if (!ir(Y))
        break;
      s++;
    }
  if (s < o && m.charCodeAt(s) !== 10)
    return !1;
  const ge = Mc(m.slice(1, b));
  return ge ? (n || (typeof t.env.references > "u" && (t.env.references = {}), typeof t.env.references[ge] > "u" && (t.env.references[ge] = { title: ce, href: N }), t.parentType = f, t.line = e + i + 1), !0) : !1;
}
const MF = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "section",
  "source",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
], LF = "[a-zA-Z_:][a-zA-Z0-9:._-]*", PF = "[^\"'=<>`\\x00-\\x20]+", FF = "'[^']*'", BF = '"[^"]*"', UF = "(?:" + PF + "|" + FF + "|" + BF + ")", qF = "(?:\\s+" + LF + "(?:\\s*=\\s*" + UF + ")?)", j1 = "<[A-Za-z][A-Za-z0-9\\-]*" + qF + "*\\s*\\/?>", X1 = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>", zF = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->", GF = "<[?][\\s\\S]*?[?]>", YF = "<![A-Z]+\\s+[^>]*>", HF = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>", VF = new RegExp("^(?:" + j1 + "|" + X1 + "|" + zF + "|" + GF + "|" + YF + "|" + HF + ")"), WF = new RegExp("^(?:" + j1 + "|" + X1 + ")"), Ns = [
  [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, !0],
  [/^<!--/, /-->/, !0],
  [/^<\?/, /\?>/, !0],
  [/^<![A-Z]/, />/, !0],
  [/^<!\[CDATA\[/, /\]\]>/, !0],
  [new RegExp("^</?(" + MF.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, !0],
  [new RegExp(WF.source + "\\s*$"), /^$/, !1]
];
function KF(t, e, r, n) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4 || !t.md.options.html || t.src.charCodeAt(i) !== 60)
    return !1;
  let o = t.src.slice(i, s), a = 0;
  for (; a < Ns.length && !Ns[a][0].test(o); a++)
    ;
  if (a === Ns.length)
    return !1;
  if (n)
    return Ns[a][2];
  let l = e + 1;
  if (!Ns[a][1].test(o)) {
    for (; l < r && !(t.sCount[l] < t.blkIndent); l++)
      if (i = t.bMarks[l] + t.tShift[l], s = t.eMarks[l], o = t.src.slice(i, s), Ns[a][1].test(o)) {
        o.length !== 0 && l++;
        break;
      }
  }
  t.line = l;
  const c = t.push("html_block", "", 0);
  return c.map = [e, l], c.content = t.getLines(e, l, t.blkIndent, !0), !0;
}
function QF(t, e, r, n) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4)
    return !1;
  let o = t.src.charCodeAt(i);
  if (o !== 35 || i >= s)
    return !1;
  let a = 1;
  for (o = t.src.charCodeAt(++i); o === 35 && i < s && a <= 6; )
    a++, o = t.src.charCodeAt(++i);
  if (a > 6 || i < s && !ir(o))
    return !1;
  if (n)
    return !0;
  s = t.skipSpacesBack(s, i);
  const l = t.skipCharsBack(s, 35, i);
  l > i && ir(t.src.charCodeAt(l - 1)) && (s = l), t.line = e + 1;
  const c = t.push("heading_open", "h" + String(a), 1);
  c.markup = "########".slice(0, a), c.map = [e, t.line];
  const f = t.push("inline", "", 0);
  f.content = t.src.slice(i, s).trim(), f.map = [e, t.line], f.children = [];
  const m = t.push("heading_close", "h" + String(a), -1);
  return m.markup = "########".slice(0, a), !0;
}
function jF(t, e, r) {
  const n = t.md.block.ruler.getRules("paragraph");
  if (t.sCount[e] - t.blkIndent >= 4)
    return !1;
  const i = t.parentType;
  t.parentType = "paragraph";
  let s = 0, o, a = e + 1;
  for (; a < r && !t.isEmpty(a); a++) {
    if (t.sCount[a] - t.blkIndent > 3)
      continue;
    if (t.sCount[a] >= t.blkIndent) {
      let C = t.bMarks[a] + t.tShift[a];
      const N = t.eMarks[a];
      if (C < N && (o = t.src.charCodeAt(C), (o === 45 || o === 61) && (C = t.skipChars(C, o), C = t.skipSpaces(C), C >= N))) {
        s = o === 61 ? 1 : 2;
        break;
      }
    }
    if (t.sCount[a] < 0)
      continue;
    let b = !1;
    for (let C = 0, N = n.length; C < N; C++)
      if (n[C](t, a, r, !0)) {
        b = !0;
        break;
      }
    if (b)
      break;
  }
  if (!s)
    return !1;
  const l = t.getLines(e, a, t.blkIndent, !1).trim();
  t.line = a + 1;
  const c = t.push("heading_open", "h" + String(s), 1);
  c.markup = String.fromCharCode(o), c.map = [e, t.line];
  const f = t.push("inline", "", 0);
  f.content = l, f.map = [e, t.line - 1], f.children = [];
  const m = t.push("heading_close", "h" + String(s), -1);
  return m.markup = String.fromCharCode(o), t.parentType = i, !0;
}
function XF(t, e, r) {
  const n = t.md.block.ruler.getRules("paragraph"), i = t.parentType;
  let s = e + 1;
  for (t.parentType = "paragraph"; s < r && !t.isEmpty(s); s++) {
    if (t.sCount[s] - t.blkIndent > 3 || t.sCount[s] < 0)
      continue;
    let c = !1;
    for (let f = 0, m = n.length; f < m; f++)
      if (n[f](t, s, r, !0)) {
        c = !0;
        break;
      }
    if (c)
      break;
  }
  const o = t.getLines(e, s, t.blkIndent, !1).trim();
  t.line = s;
  const a = t.push("paragraph_open", "p", 1);
  a.map = [e, t.line];
  const l = t.push("inline", "", 0);
  return l.content = o, l.map = [e, t.line], l.children = [], t.push("paragraph_close", "p", -1), t.parentType = i, !0;
}
const El = [
  // First 2 params - rule name & source. Secondary array - list of rules,
  // which can be terminated by this one.
  ["table", AF, ["paragraph", "reference"]],
  ["code", RF],
  ["fence", xF, ["paragraph", "reference", "blockquote", "list"]],
  ["blockquote", NF, ["paragraph", "reference", "blockquote", "list"]],
  ["hr", kF, ["paragraph", "reference", "blockquote", "list"]],
  ["list", OF, ["paragraph", "reference", "blockquote"]],
  ["reference", DF],
  ["html_block", KF, ["paragraph", "reference", "blockquote"]],
  ["heading", QF, ["paragraph", "reference", "blockquote"]],
  ["lheading", jF],
  ["paragraph", XF]
];
function Lc() {
  this.ruler = new sn();
  for (let t = 0; t < El.length; t++)
    this.ruler.push(El[t][0], El[t][1], { alt: (El[t][2] || []).slice() });
}
Lc.prototype.tokenize = function(t, e, r) {
  const n = this.ruler.getRules(""), i = n.length, s = t.md.options.maxNesting;
  let o = e, a = !1;
  for (; o < r && (t.line = o = t.skipEmptyLines(o), !(o >= r || t.sCount[o] < t.blkIndent)); ) {
    if (t.level >= s) {
      t.line = r;
      break;
    }
    const l = t.line;
    let c = !1;
    for (let f = 0; f < i; f++)
      if (c = n[f](t, o, r, !1), c) {
        if (l >= t.line)
          throw new Error("block rule didn't increment state.line");
        break;
      }
    if (!c)
      throw new Error("none of the block rules matched");
    t.tight = !a, t.isEmpty(t.line - 1) && (a = !0), o = t.line, o < r && t.isEmpty(o) && (a = !0, o++, t.line = o);
  }
};
Lc.prototype.parse = function(t, e, r, n) {
  if (!t)
    return;
  const i = new this.State(t, e, r, n);
  this.tokenize(i, i.line, i.lineMax);
};
Lc.prototype.State = li;
function Ga(t, e, r, n) {
  this.src = t, this.env = r, this.md = e, this.tokens = n, this.tokens_meta = Array(n.length), this.pos = 0, this.posMax = this.src.length, this.level = 0, this.pending = "", this.pendingLevel = 0, this.cache = {}, this.delimiters = [], this._prev_delimiters = [], this.backticks = {}, this.backticksScanned = !1, this.linkLevel = 0;
}
Ga.prototype.pushPending = function() {
  const t = new Bn("text", "", 0);
  return t.content = this.pending, t.level = this.pendingLevel, this.tokens.push(t), this.pending = "", t;
};
Ga.prototype.push = function(t, e, r) {
  this.pending && this.pushPending();
  const n = new Bn(t, e, r);
  let i = null;
  return r < 0 && (this.level--, this.delimiters = this._prev_delimiters.pop()), n.level = this.level, r > 0 && (this.level++, this._prev_delimiters.push(this.delimiters), this.delimiters = [], i = { delimiters: this.delimiters }), this.pendingLevel = this.level, this.tokens.push(n), this.tokens_meta.push(i), n;
};
Ga.prototype.scanDelims = function(t, e) {
  let r, n, i = !0, s = !0;
  const o = this.posMax, a = this.src.charCodeAt(t), l = t > 0 ? this.src.charCodeAt(t - 1) : 32;
  let c = t;
  for (; c < o && this.src.charCodeAt(c) === a; )
    c++;
  const f = c - t, m = c < o ? this.src.charCodeAt(c) : 32, b = Ta(l) || ya(String.fromCharCode(l)), C = Ta(m) || ya(String.fromCharCode(m)), N = Sa(l), z = Sa(m);
  return z ? i = !1 : C && (N || b || (i = !1)), N ? s = !1 : b && (z || C || (s = !1)), e ? (r = i, n = s) : (r = i && (!s || b), n = s && (!i || C)), { can_open: r, can_close: n, length: f };
};
Ga.prototype.Token = Bn;
function ZF(t) {
  switch (t) {
    case 10:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
    case 45:
    case 58:
    case 60:
    case 61:
    case 62:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 125:
    case 126:
      return !0;
    default:
      return !1;
  }
}
function JF(t, e) {
  let r = t.pos;
  for (; r < t.posMax && !ZF(t.src.charCodeAt(r)); )
    r++;
  return r === t.pos ? !1 : (e || (t.pending += t.src.slice(t.pos, r)), t.pos = r, !0);
}
const eB = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;
function tB(t, e) {
  if (!t.md.options.linkify || t.linkLevel > 0)
    return !1;
  const r = t.pos, n = t.posMax;
  if (r + 3 > n || t.src.charCodeAt(r) !== 58 || t.src.charCodeAt(r + 1) !== 47 || t.src.charCodeAt(r + 2) !== 47)
    return !1;
  const i = t.pending.match(eB);
  if (!i)
    return !1;
  const s = i[1], o = t.md.linkify.matchAtStart(t.src.slice(r - s.length));
  if (!o)
    return !1;
  let a = o.url;
  if (a.length <= s.length)
    return !1;
  a = a.replace(/\*+$/, "");
  const l = t.md.normalizeLink(a);
  if (!t.md.validateLink(l))
    return !1;
  if (!e) {
    t.pending = t.pending.slice(0, -s.length);
    const c = t.push("link_open", "a", 1);
    c.attrs = [["href", l]], c.markup = "linkify", c.info = "auto";
    const f = t.push("text", "", 0);
    f.content = t.md.normalizeLinkText(a);
    const m = t.push("link_close", "a", -1);
    m.markup = "linkify", m.info = "auto";
  }
  return t.pos += a.length - s.length, !0;
}
function rB(t, e) {
  let r = t.pos;
  if (t.src.charCodeAt(r) !== 10)
    return !1;
  const n = t.pending.length - 1, i = t.posMax;
  if (!e)
    if (n >= 0 && t.pending.charCodeAt(n) === 32)
      if (n >= 1 && t.pending.charCodeAt(n - 1) === 32) {
        let s = n - 1;
        for (; s >= 1 && t.pending.charCodeAt(s - 1) === 32; )
          s--;
        t.pending = t.pending.slice(0, s), t.push("hardbreak", "br", 0);
      } else
        t.pending = t.pending.slice(0, -1), t.push("softbreak", "br", 0);
    else
      t.push("softbreak", "br", 0);
  for (r++; r < i && ir(t.src.charCodeAt(r)); )
    r++;
  return t.pos = r, !0;
}
const Sm = [];
for (let t = 0; t < 256; t++)
  Sm.push(0);
"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(t) {
  Sm[t.charCodeAt(0)] = 1;
});
function nB(t, e) {
  let r = t.pos;
  const n = t.posMax;
  if (t.src.charCodeAt(r) !== 92 || (r++, r >= n))
    return !1;
  let i = t.src.charCodeAt(r);
  if (i === 10) {
    for (e || t.push("hardbreak", "br", 0), r++; r < n && (i = t.src.charCodeAt(r), !!ir(i)); )
      r++;
    return t.pos = r, !0;
  }
  let s = t.src[r];
  if (i >= 55296 && i <= 56319 && r + 1 < n) {
    const a = t.src.charCodeAt(r + 1);
    a >= 56320 && a <= 57343 && (s += t.src[r + 1], r++);
  }
  const o = "\\" + s;
  if (!e) {
    const a = t.push("text_special", "", 0);
    i < 256 && Sm[i] !== 0 ? a.content = s : a.content = o, a.markup = o, a.info = "escape";
  }
  return t.pos = r + 1, !0;
}
function iB(t, e) {
  let r = t.pos;
  if (t.src.charCodeAt(r) !== 96)
    return !1;
  const i = r;
  r++;
  const s = t.posMax;
  for (; r < s && t.src.charCodeAt(r) === 96; )
    r++;
  const o = t.src.slice(i, r), a = o.length;
  if (t.backticksScanned && (t.backticks[a] || 0) <= i)
    return e || (t.pending += o), t.pos += a, !0;
  let l = r, c;
  for (; (c = t.src.indexOf("`", l)) !== -1; ) {
    for (l = c + 1; l < s && t.src.charCodeAt(l) === 96; )
      l++;
    const f = l - c;
    if (f === a) {
      if (!e) {
        const m = t.push("code_inline", "code", 0);
        m.markup = o, m.content = t.src.slice(r, c).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
      }
      return t.pos = l, !0;
    }
    t.backticks[f] = c;
  }
  return t.backticksScanned = !0, e || (t.pending += o), t.pos += a, !0;
}
function sB(t, e) {
  const r = t.pos, n = t.src.charCodeAt(r);
  if (e || n !== 126)
    return !1;
  const i = t.scanDelims(t.pos, !0);
  let s = i.length;
  const o = String.fromCharCode(n);
  if (s < 2)
    return !1;
  let a;
  s % 2 && (a = t.push("text", "", 0), a.content = o, s--);
  for (let l = 0; l < s; l += 2)
    a = t.push("text", "", 0), a.content = o + o, t.delimiters.push({
      marker: n,
      length: 0,
      // disable "rule of 3" length checks meant for emphasis
      token: t.tokens.length - 1,
      end: -1,
      open: i.can_open,
      close: i.can_close
    });
  return t.pos += i.length, !0;
}
function Bv(t, e) {
  let r;
  const n = [], i = e.length;
  for (let s = 0; s < i; s++) {
    const o = e[s];
    if (o.marker !== 126 || o.end === -1)
      continue;
    const a = e[o.end];
    r = t.tokens[o.token], r.type = "s_open", r.tag = "s", r.nesting = 1, r.markup = "~~", r.content = "", r = t.tokens[a.token], r.type = "s_close", r.tag = "s", r.nesting = -1, r.markup = "~~", r.content = "", t.tokens[a.token - 1].type === "text" && t.tokens[a.token - 1].content === "~" && n.push(a.token - 1);
  }
  for (; n.length; ) {
    const s = n.pop();
    let o = s + 1;
    for (; o < t.tokens.length && t.tokens[o].type === "s_close"; )
      o++;
    o--, s !== o && (r = t.tokens[o], t.tokens[o] = t.tokens[s], t.tokens[s] = r);
  }
}
function oB(t) {
  const e = t.tokens_meta, r = t.tokens_meta.length;
  Bv(t, t.delimiters);
  for (let n = 0; n < r; n++)
    e[n] && e[n].delimiters && Bv(t, e[n].delimiters);
}
const Z1 = {
  tokenize: sB,
  postProcess: oB
};
function aB(t, e) {
  const r = t.pos, n = t.src.charCodeAt(r);
  if (e || n !== 95 && n !== 42)
    return !1;
  const i = t.scanDelims(t.pos, n === 42);
  for (let s = 0; s < i.length; s++) {
    const o = t.push("text", "", 0);
    o.content = String.fromCharCode(n), t.delimiters.push({
      // Char code of the starting marker (number).
      //
      marker: n,
      // Total length of these series of delimiters.
      //
      length: i.length,
      // A position of the token this delimiter corresponds to.
      //
      token: t.tokens.length - 1,
      // If this delimiter is matched as a valid opener, `end` will be
      // equal to its position, otherwise it's `-1`.
      //
      end: -1,
      // Boolean flags that determine if this delimiter could open or close
      // an emphasis.
      //
      open: i.can_open,
      close: i.can_close
    });
  }
  return t.pos += i.length, !0;
}
function Uv(t, e) {
  const r = e.length;
  for (let n = r - 1; n >= 0; n--) {
    const i = e[n];
    if (i.marker !== 95 && i.marker !== 42 || i.end === -1)
      continue;
    const s = e[i.end], o = n > 0 && e[n - 1].end === i.end + 1 && // check that first two markers match and adjacent
    e[n - 1].marker === i.marker && e[n - 1].token === i.token - 1 && // check that last two markers are adjacent (we can safely assume they match)
    e[i.end + 1].token === s.token + 1, a = String.fromCharCode(i.marker), l = t.tokens[i.token];
    l.type = o ? "strong_open" : "em_open", l.tag = o ? "strong" : "em", l.nesting = 1, l.markup = o ? a + a : a, l.content = "";
    const c = t.tokens[s.token];
    c.type = o ? "strong_close" : "em_close", c.tag = o ? "strong" : "em", c.nesting = -1, c.markup = o ? a + a : a, c.content = "", o && (t.tokens[e[n - 1].token].content = "", t.tokens[e[i.end + 1].token].content = "", n--);
  }
}
function lB(t) {
  const e = t.tokens_meta, r = t.tokens_meta.length;
  Uv(t, t.delimiters);
  for (let n = 0; n < r; n++)
    e[n] && e[n].delimiters && Uv(t, e[n].delimiters);
}
const J1 = {
  tokenize: aB,
  postProcess: lB
};
function cB(t, e) {
  let r, n, i, s, o = "", a = "", l = t.pos, c = !0;
  if (t.src.charCodeAt(t.pos) !== 91)
    return !1;
  const f = t.pos, m = t.posMax, b = t.pos + 1, C = t.md.helpers.parseLinkLabel(t, t.pos, !0);
  if (C < 0)
    return !1;
  let N = C + 1;
  if (N < m && t.src.charCodeAt(N) === 40) {
    for (c = !1, N++; N < m && (r = t.src.charCodeAt(N), !(!ir(r) && r !== 10)); N++)
      ;
    if (N >= m)
      return !1;
    if (l = N, i = t.md.helpers.parseLinkDestination(t.src, N, t.posMax), i.ok) {
      for (o = t.md.normalizeLink(i.str), t.md.validateLink(o) ? N = i.pos : o = "", l = N; N < m && (r = t.src.charCodeAt(N), !(!ir(r) && r !== 10)); N++)
        ;
      if (i = t.md.helpers.parseLinkTitle(t.src, N, t.posMax), N < m && l !== N && i.ok)
        for (a = i.str, N = i.pos; N < m && (r = t.src.charCodeAt(N), !(!ir(r) && r !== 10)); N++)
          ;
    }
    (N >= m || t.src.charCodeAt(N) !== 41) && (c = !0), N++;
  }
  if (c) {
    if (typeof t.env.references > "u")
      return !1;
    if (N < m && t.src.charCodeAt(N) === 91 ? (l = N + 1, N = t.md.helpers.parseLinkLabel(t, N), N >= 0 ? n = t.src.slice(l, N++) : N = C + 1) : N = C + 1, n || (n = t.src.slice(b, C)), s = t.env.references[Mc(n)], !s)
      return t.pos = f, !1;
    o = s.href, a = s.title;
  }
  if (!e) {
    t.pos = b, t.posMax = C;
    const z = t.push("link_open", "a", 1), A = [["href", o]];
    z.attrs = A, a && A.push(["title", a]), t.linkLevel++, t.md.inline.tokenize(t), t.linkLevel--, t.push("link_close", "a", -1);
  }
  return t.pos = N, t.posMax = m, !0;
}
function uB(t, e) {
  let r, n, i, s, o, a, l, c, f = "";
  const m = t.pos, b = t.posMax;
  if (t.src.charCodeAt(t.pos) !== 33 || t.src.charCodeAt(t.pos + 1) !== 91)
    return !1;
  const C = t.pos + 2, N = t.md.helpers.parseLinkLabel(t, t.pos + 1, !1);
  if (N < 0)
    return !1;
  if (s = N + 1, s < b && t.src.charCodeAt(s) === 40) {
    for (s++; s < b && (r = t.src.charCodeAt(s), !(!ir(r) && r !== 10)); s++)
      ;
    if (s >= b)
      return !1;
    for (c = s, a = t.md.helpers.parseLinkDestination(t.src, s, t.posMax), a.ok && (f = t.md.normalizeLink(a.str), t.md.validateLink(f) ? s = a.pos : f = ""), c = s; s < b && (r = t.src.charCodeAt(s), !(!ir(r) && r !== 10)); s++)
      ;
    if (a = t.md.helpers.parseLinkTitle(t.src, s, t.posMax), s < b && c !== s && a.ok)
      for (l = a.str, s = a.pos; s < b && (r = t.src.charCodeAt(s), !(!ir(r) && r !== 10)); s++)
        ;
    else
      l = "";
    if (s >= b || t.src.charCodeAt(s) !== 41)
      return t.pos = m, !1;
    s++;
  } else {
    if (typeof t.env.references > "u")
      return !1;
    if (s < b && t.src.charCodeAt(s) === 91 ? (c = s + 1, s = t.md.helpers.parseLinkLabel(t, s), s >= 0 ? i = t.src.slice(c, s++) : s = N + 1) : s = N + 1, i || (i = t.src.slice(C, N)), o = t.env.references[Mc(i)], !o)
      return t.pos = m, !1;
    f = o.href, l = o.title;
  }
  if (!e) {
    n = t.src.slice(C, N);
    const z = [];
    t.md.inline.parse(
      n,
      t.md,
      t.env,
      z
    );
    const A = t.push("image", "img", 0), Q = [["src", f], ["alt", ""]];
    A.attrs = Q, A.children = z, A.content = n, l && Q.push(["title", l]);
  }
  return t.pos = s, t.posMax = b, !0;
}
const dB = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/, fB = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\x00-\x20]*)$/;
function pB(t, e) {
  let r = t.pos;
  if (t.src.charCodeAt(r) !== 60)
    return !1;
  const n = t.pos, i = t.posMax;
  for (; ; ) {
    if (++r >= i)
      return !1;
    const o = t.src.charCodeAt(r);
    if (o === 60)
      return !1;
    if (o === 62)
      break;
  }
  const s = t.src.slice(n + 1, r);
  if (fB.test(s)) {
    const o = t.md.normalizeLink(s);
    if (!t.md.validateLink(o))
      return !1;
    if (!e) {
      const a = t.push("link_open", "a", 1);
      a.attrs = [["href", o]], a.markup = "autolink", a.info = "auto";
      const l = t.push("text", "", 0);
      l.content = t.md.normalizeLinkText(s);
      const c = t.push("link_close", "a", -1);
      c.markup = "autolink", c.info = "auto";
    }
    return t.pos += s.length + 2, !0;
  }
  if (dB.test(s)) {
    const o = t.md.normalizeLink("mailto:" + s);
    if (!t.md.validateLink(o))
      return !1;
    if (!e) {
      const a = t.push("link_open", "a", 1);
      a.attrs = [["href", o]], a.markup = "autolink", a.info = "auto";
      const l = t.push("text", "", 0);
      l.content = t.md.normalizeLinkText(s);
      const c = t.push("link_close", "a", -1);
      c.markup = "autolink", c.info = "auto";
    }
    return t.pos += s.length + 2, !0;
  }
  return !1;
}
function _B(t) {
  return /^<a[>\s]/i.test(t);
}
function hB(t) {
  return /^<\/a\s*>/i.test(t);
}
function mB(t) {
  const e = t | 32;
  return e >= 97 && e <= 122;
}
function gB(t, e) {
  if (!t.md.options.html)
    return !1;
  const r = t.posMax, n = t.pos;
  if (t.src.charCodeAt(n) !== 60 || n + 2 >= r)
    return !1;
  const i = t.src.charCodeAt(n + 1);
  if (i !== 33 && i !== 63 && i !== 47 && !mB(i))
    return !1;
  const s = t.src.slice(n).match(VF);
  if (!s)
    return !1;
  if (!e) {
    const o = t.push("html_inline", "", 0);
    o.content = s[0], _B(o.content) && t.linkLevel++, hB(o.content) && t.linkLevel--;
  }
  return t.pos += s[0].length, !0;
}
const $B = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i, bB = /^&([a-z][a-z0-9]{1,31});/i;
function EB(t, e) {
  const r = t.pos, n = t.posMax;
  if (t.src.charCodeAt(r) !== 38 || r + 1 >= n)
    return !1;
  if (t.src.charCodeAt(r + 1) === 35) {
    const s = t.src.slice(r).match($B);
    if (s) {
      if (!e) {
        const o = s[1][0].toLowerCase() === "x" ? parseInt(s[1].slice(1), 16) : parseInt(s[1], 10), a = t.push("text_special", "", 0);
        a.content = Em(o) ? uc(o) : uc(65533), a.markup = s[0], a.info = "entity";
      }
      return t.pos += s[0].length, !0;
    }
  } else {
    const s = t.src.slice(r).match(bB);
    if (s) {
      const o = H1(s[0]);
      if (o !== s[0]) {
        if (!e) {
          const a = t.push("text_special", "", 0);
          a.content = o, a.markup = s[0], a.info = "entity";
        }
        return t.pos += s[0].length, !0;
      }
    }
  }
  return !1;
}
function qv(t) {
  const e = {}, r = t.length;
  if (!r)
    return;
  let n = 0, i = -2;
  const s = [];
  for (let o = 0; o < r; o++) {
    const a = t[o];
    if (s.push(0), (t[n].marker !== a.marker || i !== a.token - 1) && (n = o), i = a.token, a.length = a.length || 0, !a.close)
      continue;
    e.hasOwnProperty(a.marker) || (e[a.marker] = [-1, -1, -1, -1, -1, -1]);
    const l = e[a.marker][(a.open ? 3 : 0) + a.length % 3];
    let c = n - s[n] - 1, f = c;
    for (; c > l; c -= s[c] + 1) {
      const m = t[c];
      if (m.marker === a.marker && m.open && m.end < 0) {
        let b = !1;
        if ((m.close || a.open) && (m.length + a.length) % 3 === 0 && (m.length % 3 !== 0 || a.length % 3 !== 0) && (b = !0), !b) {
          const C = c > 0 && !t[c - 1].open ? s[c - 1] + 1 : 0;
          s[o] = o - c + C, s[c] = C, a.open = !1, m.end = o, m.close = !1, f = -1, i = -2;
          break;
        }
      }
    }
    f !== -1 && (e[a.marker][(a.open ? 3 : 0) + (a.length || 0) % 3] = f);
  }
}
function vB(t) {
  const e = t.tokens_meta, r = t.tokens_meta.length;
  qv(t.delimiters);
  for (let n = 0; n < r; n++)
    e[n] && e[n].delimiters && qv(e[n].delimiters);
}
function SB(t) {
  let e, r, n = 0;
  const i = t.tokens, s = t.tokens.length;
  for (e = r = 0; e < s; e++)
    i[e].nesting < 0 && n--, i[e].level = n, i[e].nesting > 0 && n++, i[e].type === "text" && e + 1 < s && i[e + 1].type === "text" ? i[e + 1].content = i[e].content + i[e + 1].content : (e !== r && (i[r] = i[e]), r++);
  e !== r && (i.length = r);
}
const n_ = [
  ["text", JF],
  ["linkify", tB],
  ["newline", rB],
  ["escape", nB],
  ["backticks", iB],
  ["strikethrough", Z1.tokenize],
  ["emphasis", J1.tokenize],
  ["link", cB],
  ["image", uB],
  ["autolink", pB],
  ["html_inline", gB],
  ["entity", EB]
], i_ = [
  ["balance_pairs", vB],
  ["strikethrough", Z1.postProcess],
  ["emphasis", J1.postProcess],
  // rules for pairs separate '**' into its own text tokens, which may be left unused,
  // rule below merges unused segments back with the rest of the text
  ["fragments_join", SB]
];
function Ya() {
  this.ruler = new sn();
  for (let t = 0; t < n_.length; t++)
    this.ruler.push(n_[t][0], n_[t][1]);
  this.ruler2 = new sn();
  for (let t = 0; t < i_.length; t++)
    this.ruler2.push(i_[t][0], i_[t][1]);
}
Ya.prototype.skipToken = function(t) {
  const e = t.pos, r = this.ruler.getRules(""), n = r.length, i = t.md.options.maxNesting, s = t.cache;
  if (typeof s[e] < "u") {
    t.pos = s[e];
    return;
  }
  let o = !1;
  if (t.level < i) {
    for (let a = 0; a < n; a++)
      if (t.level++, o = r[a](t, !0), t.level--, o) {
        if (e >= t.pos)
          throw new Error("inline rule didn't increment state.pos");
        break;
      }
  } else
    t.pos = t.posMax;
  o || t.pos++, s[e] = t.pos;
};
Ya.prototype.tokenize = function(t) {
  const e = this.ruler.getRules(""), r = e.length, n = t.posMax, i = t.md.options.maxNesting;
  for (; t.pos < n; ) {
    const s = t.pos;
    let o = !1;
    if (t.level < i) {
      for (let a = 0; a < r; a++)
        if (o = e[a](t, !1), o) {
          if (s >= t.pos)
            throw new Error("inline rule didn't increment state.pos");
          break;
        }
    }
    if (o) {
      if (t.pos >= n)
        break;
      continue;
    }
    t.pending += t.src[t.pos++];
  }
  t.pending && t.pushPending();
};
Ya.prototype.parse = function(t, e, r, n) {
  const i = new this.State(t, e, r, n);
  this.tokenize(i);
  const s = this.ruler2.getRules(""), o = s.length;
  for (let a = 0; a < o; a++)
    s[a](i);
};
Ya.prototype.State = Ga;
function yB(t) {
  const e = {};
  t = t || {}, e.src_Any = q1.source, e.src_Cc = z1.source, e.src_Z = G1.source, e.src_P = $m.source, e.src_ZPCc = [e.src_Z, e.src_P, e.src_Cc].join("|"), e.src_ZCc = [e.src_Z, e.src_Cc].join("|");
  const r = "[><｜]";
  return e.src_pseudo_letter = "(?:(?!" + r + "|" + e.src_ZPCc + ")" + e.src_Any + ")", e.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)", e.src_auth = "(?:(?:(?!" + e.src_ZCc + "|[@/\\[\\]()]).)+@)?", e.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?", e.src_host_terminator = "(?=$|" + r + "|" + e.src_ZPCc + ")(?!" + (t["---"] ? "-(?!--)|" : "-|") + "_|:\\d|\\.-|\\.(?!$|" + e.src_ZPCc + "))", e.src_path = "(?:[/?#](?:(?!" + e.src_ZCc + "|" + r + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + e.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + e.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + e.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + e.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + e.src_ZCc + "|[']).)+\\'|\\'(?=" + e.src_pseudo_letter + "|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + e.src_ZCc + "|[.]|$)|" + (t["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + // allow `,,,` in paths
  ",(?!" + e.src_ZCc + "|$)|;(?!" + e.src_ZCc + "|$)|\\!+(?!" + e.src_ZCc + "|[!]|$)|\\?(?!" + e.src_ZCc + "|[?]|$))+|\\/)?", e.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*', e.src_xn = "xn--[a-z0-9\\-]{1,59}", e.src_domain_root = // Allow letters & digits (http://test1)
  "(?:" + e.src_xn + "|" + e.src_pseudo_letter + "{1,63})", e.src_domain = "(?:" + e.src_xn + "|(?:" + e.src_pseudo_letter + ")|(?:" + e.src_pseudo_letter + "(?:-|" + e.src_pseudo_letter + "){0,61}" + e.src_pseudo_letter + "))", e.src_host = "(?:(?:(?:(?:" + e.src_domain + ")\\.)*" + e.src_domain + "))", e.tpl_host_fuzzy = "(?:" + e.src_ip4 + "|(?:(?:(?:" + e.src_domain + ")\\.)+(?:%TLDS%)))", e.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + e.src_domain + ")\\.)+(?:%TLDS%))", e.src_host_strict = e.src_host + e.src_host_terminator, e.tpl_host_fuzzy_strict = e.tpl_host_fuzzy + e.src_host_terminator, e.src_host_port_strict = e.src_host + e.src_port + e.src_host_terminator, e.tpl_host_port_fuzzy_strict = e.tpl_host_fuzzy + e.src_port + e.src_host_terminator, e.tpl_host_port_no_ip_fuzzy_strict = e.tpl_host_no_ip_fuzzy + e.src_port + e.src_host_terminator, e.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + e.src_ZPCc + "|>|$))", e.tpl_email_fuzzy = "(^|" + r + '|"|\\(|' + e.src_ZCc + ")(" + e.src_email_name + "@" + e.tpl_host_fuzzy_strict + ")", e.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
  // but can start with > (markdown blockquote)
  "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e.src_ZPCc + "))((?![$+<=>^`|｜])" + e.tpl_host_port_fuzzy_strict + e.src_path + ")", e.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
  // but can start with > (markdown blockquote)
  "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e.src_ZPCc + "))((?![$+<=>^`|｜])" + e.tpl_host_port_no_ip_fuzzy_strict + e.src_path + ")", e;
}
function hh(t) {
  return Array.prototype.slice.call(arguments, 1).forEach(function(r) {
    r && Object.keys(r).forEach(function(n) {
      t[n] = r[n];
    });
  }), t;
}
function Pc(t) {
  return Object.prototype.toString.call(t);
}
function TB(t) {
  return Pc(t) === "[object String]";
}
function CB(t) {
  return Pc(t) === "[object Object]";
}
function wB(t) {
  return Pc(t) === "[object RegExp]";
}
function zv(t) {
  return Pc(t) === "[object Function]";
}
function AB(t) {
  return t.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
}
const eC = {
  fuzzyLink: !0,
  fuzzyEmail: !0,
  fuzzyIP: !1
};
function RB(t) {
  return Object.keys(t || {}).reduce(function(e, r) {
    return e || eC.hasOwnProperty(r);
  }, !1);
}
const xB = {
  "http:": {
    validate: function(t, e, r) {
      const n = t.slice(e);
      return r.re.http || (r.re.http = new RegExp(
        "^\\/\\/" + r.re.src_auth + r.re.src_host_port_strict + r.re.src_path,
        "i"
      )), r.re.http.test(n) ? n.match(r.re.http)[0].length : 0;
    }
  },
  "https:": "http:",
  "ftp:": "http:",
  "//": {
    validate: function(t, e, r) {
      const n = t.slice(e);
      return r.re.no_http || (r.re.no_http = new RegExp(
        "^" + r.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'
        // with code comments
        "(?:localhost|(?:(?:" + r.re.src_domain + ")\\.)+" + r.re.src_domain_root + ")" + r.re.src_port + r.re.src_host_terminator + r.re.src_path,
        "i"
      )), r.re.no_http.test(n) ? e >= 3 && t[e - 3] === ":" || e >= 3 && t[e - 3] === "/" ? 0 : n.match(r.re.no_http)[0].length : 0;
    }
  },
  "mailto:": {
    validate: function(t, e, r) {
      const n = t.slice(e);
      return r.re.mailto || (r.re.mailto = new RegExp(
        "^" + r.re.src_email_name + "@" + r.re.src_host_strict,
        "i"
      )), r.re.mailto.test(n) ? n.match(r.re.mailto)[0].length : 0;
    }
  }
}, NB = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]", kB = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");
function IB(t) {
  t.__index__ = -1, t.__text_cache__ = "";
}
function OB(t) {
  return function(e, r) {
    const n = e.slice(r);
    return t.test(n) ? n.match(t)[0].length : 0;
  };
}
function Gv() {
  return function(t, e) {
    e.normalize(t);
  };
}
function dc(t) {
  const e = t.re = yB(t.__opts__), r = t.__tlds__.slice();
  t.onCompile(), t.__tlds_replaced__ || r.push(NB), r.push(e.src_xn), e.src_tlds = r.join("|");
  function n(a) {
    return a.replace("%TLDS%", e.src_tlds);
  }
  e.email_fuzzy = RegExp(n(e.tpl_email_fuzzy), "i"), e.link_fuzzy = RegExp(n(e.tpl_link_fuzzy), "i"), e.link_no_ip_fuzzy = RegExp(n(e.tpl_link_no_ip_fuzzy), "i"), e.host_fuzzy_test = RegExp(n(e.tpl_host_fuzzy_test), "i");
  const i = [];
  t.__compiled__ = {};
  function s(a, l) {
    throw new Error('(LinkifyIt) Invalid schema "' + a + '": ' + l);
  }
  Object.keys(t.__schemas__).forEach(function(a) {
    const l = t.__schemas__[a];
    if (l === null)
      return;
    const c = { validate: null, link: null };
    if (t.__compiled__[a] = c, CB(l)) {
      wB(l.validate) ? c.validate = OB(l.validate) : zv(l.validate) ? c.validate = l.validate : s(a, l), zv(l.normalize) ? c.normalize = l.normalize : l.normalize ? s(a, l) : c.normalize = Gv();
      return;
    }
    if (TB(l)) {
      i.push(a);
      return;
    }
    s(a, l);
  }), i.forEach(function(a) {
    t.__compiled__[t.__schemas__[a]] && (t.__compiled__[a].validate = t.__compiled__[t.__schemas__[a]].validate, t.__compiled__[a].normalize = t.__compiled__[t.__schemas__[a]].normalize);
  }), t.__compiled__[""] = { validate: null, normalize: Gv() };
  const o = Object.keys(t.__compiled__).filter(function(a) {
    return a.length > 0 && t.__compiled__[a];
  }).map(AB).join("|");
  t.re.schema_test = RegExp("(^|(?!_)(?:[><｜]|" + e.src_ZPCc + "))(" + o + ")", "i"), t.re.schema_search = RegExp("(^|(?!_)(?:[><｜]|" + e.src_ZPCc + "))(" + o + ")", "ig"), t.re.schema_at_start = RegExp("^" + t.re.schema_search.source, "i"), t.re.pretest = RegExp(
    "(" + t.re.schema_test.source + ")|(" + t.re.host_fuzzy_test.source + ")|@",
    "i"
  ), IB(t);
}
function DB(t, e) {
  const r = t.__index__, n = t.__last_index__, i = t.__text_cache__.slice(r, n);
  this.schema = t.__schema__.toLowerCase(), this.index = r + e, this.lastIndex = n + e, this.raw = i, this.text = i, this.url = i;
}
function mh(t, e) {
  const r = new DB(t, e);
  return t.__compiled__[r.schema].normalize(r, t), r;
}
function mn(t, e) {
  if (!(this instanceof mn))
    return new mn(t, e);
  e || RB(t) && (e = t, t = {}), this.__opts__ = hh({}, eC, e), this.__index__ = -1, this.__last_index__ = -1, this.__schema__ = "", this.__text_cache__ = "", this.__schemas__ = hh({}, xB, t), this.__compiled__ = {}, this.__tlds__ = kB, this.__tlds_replaced__ = !1, this.re = {}, dc(this);
}
mn.prototype.add = function(e, r) {
  return this.__schemas__[e] = r, dc(this), this;
};
mn.prototype.set = function(e) {
  return this.__opts__ = hh(this.__opts__, e), this;
};
mn.prototype.test = function(e) {
  if (this.__text_cache__ = e, this.__index__ = -1, !e.length)
    return !1;
  let r, n, i, s, o, a, l, c, f;
  if (this.re.schema_test.test(e)) {
    for (l = this.re.schema_search, l.lastIndex = 0; (r = l.exec(e)) !== null; )
      if (s = this.testSchemaAt(e, r[2], l.lastIndex), s) {
        this.__schema__ = r[2], this.__index__ = r.index + r[1].length, this.__last_index__ = r.index + r[0].length + s;
        break;
      }
  }
  return this.__opts__.fuzzyLink && this.__compiled__["http:"] && (c = e.search(this.re.host_fuzzy_test), c >= 0 && (this.__index__ < 0 || c < this.__index__) && (n = e.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null && (o = n.index + n[1].length, (this.__index__ < 0 || o < this.__index__) && (this.__schema__ = "", this.__index__ = o, this.__last_index__ = n.index + n[0].length))), this.__opts__.fuzzyEmail && this.__compiled__["mailto:"] && (f = e.indexOf("@"), f >= 0 && (i = e.match(this.re.email_fuzzy)) !== null && (o = i.index + i[1].length, a = i.index + i[0].length, (this.__index__ < 0 || o < this.__index__ || o === this.__index__ && a > this.__last_index__) && (this.__schema__ = "mailto:", this.__index__ = o, this.__last_index__ = a))), this.__index__ >= 0;
};
mn.prototype.pretest = function(e) {
  return this.re.pretest.test(e);
};
mn.prototype.testSchemaAt = function(e, r, n) {
  return this.__compiled__[r.toLowerCase()] ? this.__compiled__[r.toLowerCase()].validate(e, n, this) : 0;
};
mn.prototype.match = function(e) {
  const r = [];
  let n = 0;
  this.__index__ >= 0 && this.__text_cache__ === e && (r.push(mh(this, n)), n = this.__last_index__);
  let i = n ? e.slice(n) : e;
  for (; this.test(i); )
    r.push(mh(this, n)), i = i.slice(this.__last_index__), n += this.__last_index__;
  return r.length ? r : null;
};
mn.prototype.matchAtStart = function(e) {
  if (this.__text_cache__ = e, this.__index__ = -1, !e.length)
    return null;
  const r = this.re.schema_at_start.exec(e);
  if (!r)
    return null;
  const n = this.testSchemaAt(e, r[2], r[0].length);
  return n ? (this.__schema__ = r[2], this.__index__ = r.index + r[1].length, this.__last_index__ = r.index + r[0].length + n, mh(this, 0)) : null;
};
mn.prototype.tlds = function(e, r) {
  return e = Array.isArray(e) ? e : [e], r ? (this.__tlds__ = this.__tlds__.concat(e).sort().filter(function(n, i, s) {
    return n !== s[i - 1];
  }).reverse(), dc(this), this) : (this.__tlds__ = e.slice(), this.__tlds_replaced__ = !0, dc(this), this);
};
mn.prototype.normalize = function(e) {
  e.schema || (e.url = "http://" + e.url), e.schema === "mailto:" && !/^mailto:/i.test(e.url) && (e.url = "mailto:" + e.url);
};
mn.prototype.onCompile = function() {
};
const Vs = 2147483647, Xn = 36, ym = 1, Ca = 26, MB = 38, LB = 700, tC = 72, rC = 128, nC = "-", PB = /^xn--/, FB = /[^\0-\x7F]/, BB = /[\x2E\u3002\uFF0E\uFF61]/g, UB = {
  overflow: "Overflow: input needs wider integers to process",
  "not-basic": "Illegal input >= 0x80 (not a basic code point)",
  "invalid-input": "Invalid input"
}, s_ = Xn - ym, Zn = Math.floor, o_ = String.fromCharCode;
function yi(t) {
  throw new RangeError(UB[t]);
}
function qB(t, e) {
  const r = [];
  let n = t.length;
  for (; n--; )
    r[n] = e(t[n]);
  return r;
}
function iC(t, e) {
  const r = t.split("@");
  let n = "";
  r.length > 1 && (n = r[0] + "@", t = r[1]), t = t.replace(BB, ".");
  const i = t.split("."), s = qB(i, e).join(".");
  return n + s;
}
function sC(t) {
  const e = [];
  let r = 0;
  const n = t.length;
  for (; r < n; ) {
    const i = t.charCodeAt(r++);
    if (i >= 55296 && i <= 56319 && r < n) {
      const s = t.charCodeAt(r++);
      (s & 64512) == 56320 ? e.push(((i & 1023) << 10) + (s & 1023) + 65536) : (e.push(i), r--);
    } else
      e.push(i);
  }
  return e;
}
const zB = (t) => String.fromCodePoint(...t), GB = function(t) {
  return t >= 48 && t < 58 ? 26 + (t - 48) : t >= 65 && t < 91 ? t - 65 : t >= 97 && t < 123 ? t - 97 : Xn;
}, Yv = function(t, e) {
  return t + 22 + 75 * (t < 26) - ((e != 0) << 5);
}, oC = function(t, e, r) {
  let n = 0;
  for (t = r ? Zn(t / LB) : t >> 1, t += Zn(t / e); t > s_ * Ca >> 1; n += Xn)
    t = Zn(t / s_);
  return Zn(n + (s_ + 1) * t / (t + MB));
}, aC = function(t) {
  const e = [], r = t.length;
  let n = 0, i = rC, s = tC, o = t.lastIndexOf(nC);
  o < 0 && (o = 0);
  for (let a = 0; a < o; ++a)
    t.charCodeAt(a) >= 128 && yi("not-basic"), e.push(t.charCodeAt(a));
  for (let a = o > 0 ? o + 1 : 0; a < r; ) {
    const l = n;
    for (let f = 1, m = Xn; ; m += Xn) {
      a >= r && yi("invalid-input");
      const b = GB(t.charCodeAt(a++));
      b >= Xn && yi("invalid-input"), b > Zn((Vs - n) / f) && yi("overflow"), n += b * f;
      const C = m <= s ? ym : m >= s + Ca ? Ca : m - s;
      if (b < C)
        break;
      const N = Xn - C;
      f > Zn(Vs / N) && yi("overflow"), f *= N;
    }
    const c = e.length + 1;
    s = oC(n - l, c, l == 0), Zn(n / c) > Vs - i && yi("overflow"), i += Zn(n / c), n %= c, e.splice(n++, 0, i);
  }
  return String.fromCodePoint(...e);
}, lC = function(t) {
  const e = [];
  t = sC(t);
  const r = t.length;
  let n = rC, i = 0, s = tC;
  for (const l of t)
    l < 128 && e.push(o_(l));
  const o = e.length;
  let a = o;
  for (o && e.push(nC); a < r; ) {
    let l = Vs;
    for (const f of t)
      f >= n && f < l && (l = f);
    const c = a + 1;
    l - n > Zn((Vs - i) / c) && yi("overflow"), i += (l - n) * c, n = l;
    for (const f of t)
      if (f < n && ++i > Vs && yi("overflow"), f === n) {
        let m = i;
        for (let b = Xn; ; b += Xn) {
          const C = b <= s ? ym : b >= s + Ca ? Ca : b - s;
          if (m < C)
            break;
          const N = m - C, z = Xn - C;
          e.push(
            o_(Yv(C + N % z, 0))
          ), m = Zn(N / z);
        }
        e.push(o_(Yv(m, 0))), s = oC(i, c, a === o), i = 0, ++a;
      }
    ++i, ++n;
  }
  return e.join("");
}, YB = function(t) {
  return iC(t, function(e) {
    return PB.test(e) ? aC(e.slice(4).toLowerCase()) : e;
  });
}, HB = function(t) {
  return iC(t, function(e) {
    return FB.test(e) ? "xn--" + lC(e) : e;
  });
}, cC = {
  /**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
  version: "2.3.1",
  /**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */
  ucs2: {
    decode: sC,
    encode: zB
  },
  decode: aC,
  encode: lC,
  toASCII: HB,
  toUnicode: YB
}, VB = {
  options: {
    // Enable HTML tags in source
    html: !1,
    // Use '/' to close single tags (<br />)
    xhtmlOut: !1,
    // Convert '\n' in paragraphs into <br>
    breaks: !1,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: !1,
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 100
  },
  components: {
    core: {},
    block: {},
    inline: {}
  }
}, WB = {
  options: {
    // Enable HTML tags in source
    html: !1,
    // Use '/' to close single tags (<br />)
    xhtmlOut: !1,
    // Convert '\n' in paragraphs into <br>
    breaks: !1,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: !1,
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "text"
      ],
      rules2: [
        "balance_pairs",
        "fragments_join"
      ]
    }
  }
}, KB = {
  options: {
    // Enable HTML tags in source
    html: !0,
    // Use '/' to close single tags (<br />)
    xhtmlOut: !0,
    // Convert '\n' in paragraphs into <br>
    breaks: !1,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: !1,
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "blockquote",
        "code",
        "fence",
        "heading",
        "hr",
        "html_block",
        "lheading",
        "list",
        "reference",
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "autolink",
        "backticks",
        "emphasis",
        "entity",
        "escape",
        "html_inline",
        "image",
        "link",
        "newline",
        "text"
      ],
      rules2: [
        "balance_pairs",
        "emphasis",
        "fragments_join"
      ]
    }
  }
}, QB = {
  default: VB,
  zero: WB,
  commonmark: KB
}, jB = /^(vbscript|javascript|file|data):/, XB = /^data:image\/(gif|png|jpeg|webp);/;
function ZB(t) {
  const e = t.trim().toLowerCase();
  return jB.test(e) ? XB.test(e) : !0;
}
const uC = ["http:", "https:", "mailto:"];
function JB(t) {
  const e = gm(t, !0);
  if (e.hostname && (!e.protocol || uC.indexOf(e.protocol) >= 0))
    try {
      e.hostname = cC.toASCII(e.hostname);
    } catch {
    }
  return za(mm(e));
}
function eU(t) {
  const e = gm(t, !0);
  if (e.hostname && (!e.protocol || uC.indexOf(e.protocol) >= 0))
    try {
      e.hostname = cC.toUnicode(e.hostname);
    } catch {
    }
  return so(mm(e), so.defaultChars + "%");
}
function xn(t, e) {
  if (!(this instanceof xn))
    return new xn(t, e);
  e || bm(t) || (e = t || {}, t = "default"), this.inline = new Ya(), this.block = new Lc(), this.core = new vm(), this.renderer = new _o(), this.linkify = new mn(), this.validateLink = ZB, this.normalizeLink = JB, this.normalizeLinkText = eU, this.utils = nF, this.helpers = Dc({}, aF), this.options = {}, this.configure(t), e && this.set(e);
}
xn.prototype.set = function(t) {
  return Dc(this.options, t), this;
};
xn.prototype.configure = function(t) {
  const e = this;
  if (bm(t)) {
    const r = t;
    if (t = QB[r], !t)
      throw new Error('Wrong `markdown-it` preset "' + r + '", check name');
  }
  if (!t)
    throw new Error("Wrong `markdown-it` preset, can't be empty");
  return t.options && e.set(t.options), t.components && Object.keys(t.components).forEach(function(r) {
    t.components[r].rules && e[r].ruler.enableOnly(t.components[r].rules), t.components[r].rules2 && e[r].ruler2.enableOnly(t.components[r].rules2);
  }), this;
};
xn.prototype.enable = function(t, e) {
  let r = [];
  Array.isArray(t) || (t = [t]), ["core", "block", "inline"].forEach(function(i) {
    r = r.concat(this[i].ruler.enable(t, !0));
  }, this), r = r.concat(this.inline.ruler2.enable(t, !0));
  const n = t.filter(function(i) {
    return r.indexOf(i) < 0;
  });
  if (n.length && !e)
    throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + n);
  return this;
};
xn.prototype.disable = function(t, e) {
  let r = [];
  Array.isArray(t) || (t = [t]), ["core", "block", "inline"].forEach(function(i) {
    r = r.concat(this[i].ruler.disable(t, !0));
  }, this), r = r.concat(this.inline.ruler2.disable(t, !0));
  const n = t.filter(function(i) {
    return r.indexOf(i) < 0;
  });
  if (n.length && !e)
    throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + n);
  return this;
};
xn.prototype.use = function(t) {
  const e = [this].concat(Array.prototype.slice.call(arguments, 1));
  return t.apply(t, e), this;
};
xn.prototype.parse = function(t, e) {
  if (typeof t != "string")
    throw new Error("Input data should be a String");
  const r = new this.core.State(t, this, e);
  return this.core.process(r), r.tokens;
};
xn.prototype.render = function(t, e) {
  return e = e || {}, this.renderer.render(this.parse(t, e), this.options, e);
};
xn.prototype.parseInline = function(t, e) {
  const r = new this.core.State(t, this, e);
  return r.inlineMode = !0, this.core.process(r), r.tokens;
};
xn.prototype.renderInline = function(t, e) {
  return e = e || {}, this.renderer.render(this.parseInline(t, e), this.options, e);
};
var es = {};
es.getAttrs = function(t, e, r) {
  const n = /[^\t\n\f />"'=]/, i = " ", s = "=", o = ".", a = "#", l = [];
  let c = "", f = "", m = !0, b = !1;
  for (let C = e + r.leftDelimiter.length; C < t.length; C++) {
    if (t.slice(C, C + r.rightDelimiter.length) === r.rightDelimiter) {
      c !== "" && l.push([c, f]);
      break;
    }
    const N = t.charAt(C);
    if (N === s && m) {
      m = !1;
      continue;
    }
    if (N === o && c === "") {
      t.charAt(C + 1) === o ? (c = "css-module", C += 1) : c = "class", m = !1;
      continue;
    }
    if (N === a && c === "") {
      c = "id", m = !1;
      continue;
    }
    if (N === '"' && f === "" && !b) {
      b = !0;
      continue;
    }
    if (N === '"' && b) {
      b = !1;
      continue;
    }
    if (N === i && !b) {
      if (c === "")
        continue;
      l.push([c, f]), c = "", f = "", m = !0;
      continue;
    }
    if (!(m && N.search(n) === -1)) {
      if (m) {
        c += N;
        continue;
      }
      f += N;
    }
  }
  if (r.allowedAttributes && r.allowedAttributes.length) {
    const C = r.allowedAttributes;
    return l.filter(function(N) {
      const z = N[0];
      function A(Q) {
        return z === Q || Q instanceof RegExp && Q.test(z);
      }
      return C.some(A);
    });
  }
  return l;
};
es.addAttrs = function(t, e) {
  for (let r = 0, n = t.length; r < n; ++r) {
    const i = t[r][0];
    i === "class" ? e.attrJoin("class", t[r][1]) : i === "css-module" ? e.attrJoin("css-module", t[r][1]) : e.attrPush(t[r]);
  }
  return e;
};
es.hasDelimiters = function(t, e) {
  if (!t)
    throw new Error('Parameter `where` not passed. Should be "start", "end" or "only".');
  return function(r) {
    const n = e.leftDelimiter.length + 1 + e.rightDelimiter.length;
    if (!r || typeof r != "string" || r.length < n)
      return !1;
    function i(f) {
      const m = f.charAt(e.leftDelimiter.length) === ".", b = f.charAt(e.leftDelimiter.length) === "#";
      return m || b ? f.length >= n + 1 : f.length >= n;
    }
    let s, o, a, l;
    const c = n - e.rightDelimiter.length;
    switch (t) {
      case "start":
        a = r.slice(0, e.leftDelimiter.length), s = a === e.leftDelimiter ? 0 : -1, o = s === -1 ? -1 : r.indexOf(e.rightDelimiter, c), l = r.charAt(o + e.rightDelimiter.length), l && e.rightDelimiter.indexOf(l) !== -1 && (o = -1);
        break;
      case "end":
        s = r.lastIndexOf(e.leftDelimiter), o = s === -1 ? -1 : r.indexOf(e.rightDelimiter, s + c), o = o === r.length - e.rightDelimiter.length ? o : -1;
        break;
      case "only":
        a = r.slice(0, e.leftDelimiter.length), s = a === e.leftDelimiter ? 0 : -1, a = r.slice(r.length - e.rightDelimiter.length), o = a === e.rightDelimiter ? r.length - e.rightDelimiter.length : -1;
        break;
      default:
        throw new Error(`Unexpected case ${t}, expected 'start', 'end' or 'only'`);
    }
    return s !== -1 && o !== -1 && i(r.substring(s, o + e.rightDelimiter.length));
  };
};
es.removeDelimiter = function(t, e) {
  const r = gh(e.leftDelimiter), n = gh(e.rightDelimiter), i = new RegExp(
    "[ \\n]?" + r + "[^" + r + n + "]+" + n + "$"
  ), s = t.search(i);
  return s !== -1 ? t.slice(0, s) : t;
};
function gh(t) {
  return t.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
}
es.escapeRegExp = gh;
es.getMatchingOpeningToken = function(t, e) {
  if (t[e].type === "softbreak")
    return !1;
  if (t[e].nesting === 0)
    return t[e];
  const r = t[e].level, n = t[e].type.replace("_close", "_open");
  for (; e >= 0; --e)
    if (t[e].type === n && t[e].level === r)
      return t[e];
  return !1;
};
const tU = /[&<>"]/, rU = /[&<>"]/g, nU = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;"
};
function iU(t) {
  return nU[t];
}
es.escapeHtml = function(t) {
  return tU.test(t) ? t.replace(rU, iU) : t;
};
const Vt = es;
var sU = (t) => {
  const e = new RegExp("^ {0,3}[-*_]{3,} ?" + Vt.escapeRegExp(t.leftDelimiter) + "[^" + Vt.escapeRegExp(t.rightDelimiter) + "]");
  return [
    {
      /**
       * ```python {.cls}
       * for i in range(10):
       *     print(i)
       * ```
       */
      name: "fenced code blocks",
      tests: [
        {
          shift: 0,
          block: !0,
          info: Vt.hasDelimiters("end", t)
        }
      ],
      transform: (r, n) => {
        const i = r[n], s = i.info.lastIndexOf(t.leftDelimiter), o = Vt.getAttrs(i.info, s, t);
        Vt.addAttrs(o, i), i.info = Vt.removeDelimiter(i.info, t);
      }
    },
    {
      /**
       * bla `click()`{.c} ![](img.png){.d}
       *
       * differs from 'inline attributes' as it does
       * not have a closing tag (nesting: -1)
       */
      name: "inline nesting 0",
      tests: [
        {
          shift: 0,
          type: "inline",
          children: [
            {
              shift: -1,
              type: (r) => r === "image" || r === "code_inline"
            },
            {
              shift: 0,
              type: "text",
              content: Vt.hasDelimiters("start", t)
            }
          ]
        }
      ],
      transform: (r, n, i) => {
        const s = r[n].children[i], o = s.content.indexOf(t.rightDelimiter), a = r[n].children[i - 1], l = Vt.getAttrs(s.content, 0, t);
        Vt.addAttrs(l, a), s.content.length === o + t.rightDelimiter.length ? r[n].children.splice(i, 1) : s.content = s.content.slice(o + t.rightDelimiter.length);
      }
    },
    {
      /**
       * | h1 |
       * | -- |
       * | c1 |
       *
       * {.c}
       */
      name: "tables",
      tests: [
        {
          // let this token be i, such that for-loop continues at
          // next token after tokens.splice
          shift: 0,
          type: "table_close"
        },
        {
          shift: 1,
          type: "paragraph_open"
        },
        {
          shift: 2,
          type: "inline",
          content: Vt.hasDelimiters("only", t)
        }
      ],
      transform: (r, n) => {
        const i = r[n + 2], s = Vt.getMatchingOpeningToken(r, n), o = Vt.getAttrs(i.content, 0, t);
        Vt.addAttrs(o, s), r.splice(n + 1, 3);
      }
    },
    {
      /**
       * *emphasis*{.with attrs=1}
       */
      name: "inline attributes",
      tests: [
        {
          shift: 0,
          type: "inline",
          children: [
            {
              shift: -1,
              nesting: -1
              // closing inline tag, </em>{.a}
            },
            {
              shift: 0,
              type: "text",
              content: Vt.hasDelimiters("start", t)
            }
          ]
        }
      ],
      transform: (r, n, i) => {
        const s = r[n].children[i], o = s.content, a = Vt.getAttrs(o, 0, t), l = Vt.getMatchingOpeningToken(r[n].children, i - 1);
        Vt.addAttrs(a, l), s.content = o.slice(o.indexOf(t.rightDelimiter) + t.rightDelimiter.length);
      }
    },
    {
      /**
       * - item
       * {.a}
       */
      name: "list softbreak",
      tests: [
        {
          shift: -2,
          type: "list_item_open"
        },
        {
          shift: 0,
          type: "inline",
          children: [
            {
              position: -2,
              type: "softbreak"
            },
            {
              position: -1,
              type: "text",
              content: Vt.hasDelimiters("only", t)
            }
          ]
        }
      ],
      transform: (r, n, i) => {
        const o = r[n].children[i].content, a = Vt.getAttrs(o, 0, t);
        let l = n - 2;
        for (; r[l - 1] && r[l - 1].type !== "ordered_list_open" && r[l - 1].type !== "bullet_list_open"; )
          l--;
        Vt.addAttrs(a, r[l - 1]), r[n].children = r[n].children.slice(0, -2);
      }
    },
    {
      /**
       * - nested list
       *   - with double \n
       *   {.a} <-- apply to nested ul
       *
       * {.b} <-- apply to root <ul>
       */
      name: "list double softbreak",
      tests: [
        {
          // let this token be i = 0 so that we can erase
          // the <p>{.a}</p> tokens below
          shift: 0,
          type: (r) => r === "bullet_list_close" || r === "ordered_list_close"
        },
        {
          shift: 1,
          type: "paragraph_open"
        },
        {
          shift: 2,
          type: "inline",
          content: Vt.hasDelimiters("only", t),
          children: (r) => r.length === 1
        },
        {
          shift: 3,
          type: "paragraph_close"
        }
      ],
      transform: (r, n) => {
        const s = r[n + 2].content, o = Vt.getAttrs(s, 0, t), a = Vt.getMatchingOpeningToken(r, n);
        Vt.addAttrs(o, a), r.splice(n + 1, 3);
      }
    },
    {
      /**
       * - end of {.list-item}
       */
      name: "list item end",
      tests: [
        {
          shift: -2,
          type: "list_item_open"
        },
        {
          shift: 0,
          type: "inline",
          children: [
            {
              position: -1,
              type: "text",
              content: Vt.hasDelimiters("end", t)
            }
          ]
        }
      ],
      transform: (r, n, i) => {
        const s = r[n].children[i], o = s.content, a = Vt.getAttrs(o, o.lastIndexOf(t.leftDelimiter), t);
        Vt.addAttrs(a, r[n - 2]);
        const l = o.slice(0, o.lastIndexOf(t.leftDelimiter));
        s.content = Hv(l) !== " " ? l : l.slice(0, -1);
      }
    },
    {
      /**
       * something with softbreak
       * {.cls}
       */
      name: `
{.a} softbreak then curly in start`,
      tests: [
        {
          shift: 0,
          type: "inline",
          children: [
            {
              position: -2,
              type: "softbreak"
            },
            {
              position: -1,
              type: "text",
              content: Vt.hasDelimiters("only", t)
            }
          ]
        }
      ],
      transform: (r, n, i) => {
        const s = r[n].children[i], o = Vt.getAttrs(s.content, 0, t);
        let a = n + 1;
        for (; r[a + 1] && r[a + 1].nesting === -1; )
          a++;
        const l = Vt.getMatchingOpeningToken(r, a);
        Vt.addAttrs(o, l), r[n].children = r[n].children.slice(0, -2);
      }
    },
    {
      /**
       * horizontal rule --- {#id}
       */
      name: "horizontal rule",
      tests: [
        {
          shift: 0,
          type: "paragraph_open"
        },
        {
          shift: 1,
          type: "inline",
          children: (r) => r.length === 1,
          content: (r) => r.match(e) !== null
        },
        {
          shift: 2,
          type: "paragraph_close"
        }
      ],
      transform: (r, n) => {
        const i = r[n];
        i.type = "hr", i.tag = "hr", i.nesting = 0;
        const s = r[n + 1].content, o = s.lastIndexOf(t.leftDelimiter), a = Vt.getAttrs(s, o, t);
        Vt.addAttrs(a, i), i.markup = s, r.splice(n + 1, 2);
      }
    },
    {
      /**
       * end of {.block}
       */
      name: "end of block",
      tests: [
        {
          shift: 0,
          type: "inline",
          children: [
            {
              position: -1,
              content: Vt.hasDelimiters("end", t),
              type: (r) => r !== "code_inline" && r !== "math_inline"
            }
          ]
        }
      ],
      transform: (r, n, i) => {
        const s = r[n].children[i], o = s.content, a = Vt.getAttrs(o, o.lastIndexOf(t.leftDelimiter), t);
        let l = n + 1;
        for (; r[l + 1] && r[l + 1].nesting === -1; )
          l++;
        const c = Vt.getMatchingOpeningToken(r, l);
        Vt.addAttrs(a, c);
        const f = o.slice(0, o.lastIndexOf(t.leftDelimiter));
        s.content = Hv(f) !== " " ? f : f.slice(0, -1);
      }
    }
  ];
};
function Hv(t) {
  return t.slice(-1)[0];
}
const oU = sU, aU = {
  leftDelimiter: "{",
  rightDelimiter: "}",
  allowedAttributes: []
};
var lU = function(e, r) {
  let n = Object.assign({}, aU);
  n = Object.assign(n, r);
  const i = oU(n);
  function s(o) {
    const a = o.tokens;
    for (let l = 0; l < a.length; l++)
      for (let c = 0; c < i.length; c++) {
        const f = i[c];
        let m = null;
        f.tests.every((C) => {
          const N = $h(a, l, C);
          return N.j !== null && (m = N.j), N.match;
        }) && (f.transform(a, l, m), (f.name === "inline attributes" || f.name === "inline nesting 0") && c--);
      }
  }
  e.core.ruler.before("linkify", "curly_attributes", s);
};
function $h(t, e, r) {
  const n = {
    match: !1,
    j: null
    // position of child
  }, i = r.shift !== void 0 ? e + r.shift : r.position;
  if (r.shift !== void 0 && i < 0)
    return n;
  const s = dU(t, i);
  if (s === void 0)
    return n;
  for (const o of Object.keys(r))
    if (!(o === "shift" || o === "position")) {
      if (s[o] === void 0)
        return n;
      if (o === "children" && cU(r.children)) {
        if (s.children.length === 0)
          return n;
        let a;
        const l = r.children, c = s.children;
        if (l.every((f) => f.position !== void 0)) {
          if (a = l.every((f) => $h(c, f.position, f).match), a) {
            const f = fU(l).position;
            n.j = f >= 0 ? f : c.length + f;
          }
        } else
          for (let f = 0; f < c.length; f++)
            if (a = l.every((m) => $h(c, f, m).match), a) {
              n.j = f;
              break;
            }
        if (a === !1)
          return n;
        continue;
      }
      switch (typeof r[o]) {
        case "boolean":
        case "number":
        case "string":
          if (s[o] !== r[o])
            return n;
          break;
        case "function":
          if (!r[o](s[o]))
            return n;
          break;
        case "object":
          if (uU(r[o])) {
            if (r[o].every((l) => l(s[o])) === !1)
              return n;
            break;
          }
        default:
          throw new Error(`Unknown type of pattern test (key: ${o}). Test should be of type boolean, number, string, function or array of functions.`);
      }
    }
  return n.match = !0, n;
}
function cU(t) {
  return Array.isArray(t) && t.length && t.every((e) => typeof e == "object");
}
function uU(t) {
  return Array.isArray(t) && t.length && t.every((e) => typeof e == "function");
}
function dU(t, e) {
  return e >= 0 ? t[e] : t[t.length + e];
}
function fU(t) {
  return t.slice(-1)[0] || {};
}
const pU = /* @__PURE__ */ xa(lU);
function _U(t, e, r) {
  function n(b) {
    return b.trim().split(" ", 2)[0] === e;
  }
  function i(b, C, N, z, A) {
    return b[C].nesting === 1 && b[C].attrJoin("class", e), A.renderToken(b, C, N, z, A);
  }
  r = r || {};
  const s = 3, o = r.marker || ":", a = o.charCodeAt(0), l = o.length, c = r.validate || n, f = r.render || i;
  function m(b, C, N, z) {
    let A, Q = !1, Te = b.bMarks[C] + b.tShift[C], ce = b.eMarks[C];
    if (a !== b.src.charCodeAt(Te))
      return !1;
    for (A = Te + 1; A <= ce && o[(A - Te) % l] === b.src[A]; A++)
      ;
    const ge = Math.floor((A - Te) / l);
    if (ge < s)
      return !1;
    A -= (A - Te) % l;
    const Y = b.src.slice(Te, A), fe = b.src.slice(A, ce);
    if (!c(fe, Y))
      return !1;
    if (z)
      return !0;
    let ae = C;
    for (; ae++, !(ae >= N || (Te = b.bMarks[ae] + b.tShift[ae], ce = b.eMarks[ae], Te < ce && b.sCount[ae] < b.blkIndent)); )
      if (a === b.src.charCodeAt(Te) && !(b.sCount[ae] - b.blkIndent >= 4)) {
        for (A = Te + 1; A <= ce && o[(A - Te) % l] === b.src[A]; A++)
          ;
        if (!(Math.floor((A - Te) / l) < ge) && (A -= (A - Te) % l, A = b.skipSpaces(A), !(A < ce))) {
          Q = !0;
          break;
        }
      }
    const Re = b.parentType, pe = b.lineMax;
    b.parentType = "container", b.lineMax = ae;
    const Ce = b.push("container_" + e + "_open", "div", 1);
    Ce.markup = Y, Ce.block = !0, Ce.info = fe, Ce.map = [C, ae], b.md.block.tokenize(b, C + 1, ae);
    const J = b.push("container_" + e + "_close", "div", -1);
    return J.markup = b.src.slice(Te, A), J.block = !0, b.parentType = Re, b.lineMax = pe, b.line = ae + (Q ? 1 : 0), !0;
  }
  t.block.ruler.before("fence", "container_" + e, m, {
    alt: ["paragraph", "reference", "blockquote", "list"]
  }), t.renderer.rules["container_" + e + "_open"] = f, t.renderer.rules["container_" + e + "_close"] = f;
}
function hU(t) {
  const e = t.utils.isSpace;
  function r(s, o) {
    let a = s.bMarks[o] + s.tShift[o];
    const l = s.eMarks[o];
    if (a >= l)
      return -1;
    const c = s.src.charCodeAt(a++);
    if (c !== 126 && c !== 58)
      return -1;
    const f = s.skipSpaces(a);
    return a === f || f >= l ? -1 : a;
  }
  function n(s, o) {
    const a = s.level + 2;
    for (let l = o + 2, c = s.tokens.length - 2; l < c; l++)
      s.tokens[l].level === a && s.tokens[l].type === "paragraph_open" && (s.tokens[l + 2].hidden = !0, s.tokens[l].hidden = !0, l += 2);
  }
  function i(s, o, a, l) {
    if (l)
      return s.ddIndent < 0 ? !1 : r(s, o) >= 0;
    let c = o + 1;
    if (c >= a || s.isEmpty(c) && (c++, c >= a) || s.sCount[c] < s.blkIndent)
      return !1;
    let f = r(s, c);
    if (f < 0)
      return !1;
    const m = s.tokens.length;
    let b = !0;
    const C = s.push("dl_open", "dl", 1), N = [o, 0];
    C.map = N;
    let z = o, A = c;
    e:
      for (; ; ) {
        let Q = !1;
        const Te = s.push("dt_open", "dt", 1);
        Te.map = [z, z];
        const ce = s.push("inline", "", 0);
        for (ce.map = [z, z], ce.content = s.getLines(z, z + 1, s.blkIndent, !1).trim(), ce.children = [], s.push("dt_close", "dt", -1); ; ) {
          const ge = s.push("dd_open", "dd", 1), Y = [c, 0];
          ge.map = Y;
          let fe = f;
          const ae = s.eMarks[A];
          let Re = s.sCount[A] + f - (s.bMarks[A] + s.tShift[A]);
          for (; fe < ae; ) {
            const ne = s.src.charCodeAt(fe);
            if (e(ne))
              ne === 9 ? Re += 4 - Re % 4 : Re++;
            else
              break;
            fe++;
          }
          f = fe;
          const pe = s.tight, Ce = s.ddIndent, J = s.blkIndent, R = s.tShift[A], ve = s.sCount[A], F = s.parentType;
          if (s.blkIndent = s.ddIndent = s.sCount[A] + 2, s.tShift[A] = f - s.bMarks[A], s.sCount[A] = Re, s.tight = !0, s.parentType = "deflist", s.md.block.tokenize(s, A, a, !0), (!s.tight || Q) && (b = !1), Q = s.line - A > 1 && s.isEmpty(s.line - 1), s.tShift[A] = R, s.sCount[A] = ve, s.tight = pe, s.parentType = F, s.blkIndent = J, s.ddIndent = Ce, s.push("dd_close", "dd", -1), Y[1] = c = s.line, c >= a || s.sCount[c] < s.blkIndent)
            break e;
          if (f = r(s, c), f < 0)
            break;
          A = c;
        }
        if (c >= a || (z = c, s.isEmpty(z)) || s.sCount[z] < s.blkIndent || (A = z + 1, A >= a) || (s.isEmpty(A) && A++, A >= a) || s.sCount[A] < s.blkIndent || (f = r(s, A), f < 0))
          break;
      }
    return s.push("dl_close", "dl", -1), N[1] = c, s.line = c, b && n(s, m), !0;
  }
  t.block.ruler.before("paragraph", "deflist", i, { alt: ["paragraph", "reference", "blockquote"] });
}
function mU(t, e, r, n) {
  const i = Number(t[e].meta.id + 1).toString();
  let s = "";
  return typeof n.docId == "string" && (s = `-${n.docId}-`), s + i;
}
function gU(t, e) {
  let r = Number(t[e].meta.id + 1).toString();
  return t[e].meta.subId > 0 && (r += `:${t[e].meta.subId}`), `[${r}]`;
}
function $U(t, e, r, n, i) {
  const s = i.rules.footnote_anchor_name(t, e, r, n, i), o = i.rules.footnote_caption(t, e, r, n, i);
  let a = s;
  return t[e].meta.subId > 0 && (a += `:${t[e].meta.subId}`), `<sup class="footnote-ref"><a href="#fn${s}" id="fnref${a}">${o}</a></sup>`;
}
function bU(t, e, r) {
  return (r.xhtmlOut ? `<hr class="footnotes-sep" />
` : `<hr class="footnotes-sep">
`) + `<section class="footnotes">
<ol class="footnotes-list">
`;
}
function EU() {
  return `</ol>
</section>
`;
}
function vU(t, e, r, n, i) {
  let s = i.rules.footnote_anchor_name(t, e, r, n, i);
  return t[e].meta.subId > 0 && (s += `:${t[e].meta.subId}`), `<li id="fn${s}" class="footnote-item">`;
}
function SU() {
  return `</li>
`;
}
function yU(t, e, r, n, i) {
  let s = i.rules.footnote_anchor_name(t, e, r, n, i);
  return t[e].meta.subId > 0 && (s += `:${t[e].meta.subId}`), ` <a href="#fnref${s}" class="footnote-backref">↩︎</a>`;
}
function TU(t) {
  const e = t.helpers.parseLinkLabel, r = t.utils.isSpace;
  t.renderer.rules.footnote_ref = $U, t.renderer.rules.footnote_block_open = bU, t.renderer.rules.footnote_block_close = EU, t.renderer.rules.footnote_open = vU, t.renderer.rules.footnote_close = SU, t.renderer.rules.footnote_anchor = yU, t.renderer.rules.footnote_caption = gU, t.renderer.rules.footnote_anchor_name = mU;
  function n(a, l, c, f) {
    const m = a.bMarks[l] + a.tShift[l], b = a.eMarks[l];
    if (m + 4 > b || a.src.charCodeAt(m) !== 91 || a.src.charCodeAt(m + 1) !== 94)
      return !1;
    let C;
    for (C = m + 2; C < b; C++) {
      if (a.src.charCodeAt(C) === 32)
        return !1;
      if (a.src.charCodeAt(C) === 93)
        break;
    }
    if (C === m + 2 || C + 1 >= b || a.src.charCodeAt(++C) !== 58)
      return !1;
    if (f)
      return !0;
    C++, a.env.footnotes || (a.env.footnotes = {}), a.env.footnotes.refs || (a.env.footnotes.refs = {});
    const N = a.src.slice(m + 2, C - 2);
    a.env.footnotes.refs[`:${N}`] = -1;
    const z = new a.Token("footnote_reference_open", "", 1);
    z.meta = { label: N }, z.level = a.level++, a.tokens.push(z);
    const A = a.bMarks[l], Q = a.tShift[l], Te = a.sCount[l], ce = a.parentType, ge = C, Y = a.sCount[l] + C - (a.bMarks[l] + a.tShift[l]);
    let fe = Y;
    for (; C < b; ) {
      const Re = a.src.charCodeAt(C);
      if (r(Re))
        Re === 9 ? fe += 4 - fe % 4 : fe++;
      else
        break;
      C++;
    }
    a.tShift[l] = C - ge, a.sCount[l] = fe - Y, a.bMarks[l] = ge, a.blkIndent += 4, a.parentType = "footnote", a.sCount[l] < a.blkIndent && (a.sCount[l] += a.blkIndent), a.md.block.tokenize(a, l, c, !0), a.parentType = ce, a.blkIndent -= 4, a.tShift[l] = Q, a.sCount[l] = Te, a.bMarks[l] = A;
    const ae = new a.Token("footnote_reference_close", "", -1);
    return ae.level = --a.level, a.tokens.push(ae), !0;
  }
  function i(a, l) {
    const c = a.posMax, f = a.pos;
    if (f + 2 >= c || a.src.charCodeAt(f) !== 94 || a.src.charCodeAt(f + 1) !== 91)
      return !1;
    const m = f + 2, b = e(a, f + 1);
    if (b < 0)
      return !1;
    if (!l) {
      a.env.footnotes || (a.env.footnotes = {}), a.env.footnotes.list || (a.env.footnotes.list = []);
      const C = a.env.footnotes.list.length, N = [];
      a.md.inline.parse(
        a.src.slice(m, b),
        a.md,
        a.env,
        N
      );
      const z = a.push("footnote_ref", "", 0);
      z.meta = { id: C }, a.env.footnotes.list[C] = {
        content: a.src.slice(m, b),
        tokens: N
      };
    }
    return a.pos = b + 1, a.posMax = c, !0;
  }
  function s(a, l) {
    const c = a.posMax, f = a.pos;
    if (f + 3 > c || !a.env.footnotes || !a.env.footnotes.refs || a.src.charCodeAt(f) !== 91 || a.src.charCodeAt(f + 1) !== 94)
      return !1;
    let m;
    for (m = f + 2; m < c; m++) {
      if (a.src.charCodeAt(m) === 32 || a.src.charCodeAt(m) === 10)
        return !1;
      if (a.src.charCodeAt(m) === 93)
        break;
    }
    if (m === f + 2 || m >= c)
      return !1;
    m++;
    const b = a.src.slice(f + 2, m - 1);
    if (typeof a.env.footnotes.refs[`:${b}`] > "u")
      return !1;
    if (!l) {
      a.env.footnotes.list || (a.env.footnotes.list = []);
      let C;
      a.env.footnotes.refs[`:${b}`] < 0 ? (C = a.env.footnotes.list.length, a.env.footnotes.list[C] = { label: b, count: 0 }, a.env.footnotes.refs[`:${b}`] = C) : C = a.env.footnotes.refs[`:${b}`];
      const N = a.env.footnotes.list[C].count;
      a.env.footnotes.list[C].count++;
      const z = a.push("footnote_ref", "", 0);
      z.meta = { id: C, subId: N, label: b };
    }
    return a.pos = m, a.posMax = c, !0;
  }
  function o(a) {
    let l, c, f, m = !1;
    const b = {};
    if (!a.env.footnotes || (a.tokens = a.tokens.filter(function(N) {
      return N.type === "footnote_reference_open" ? (m = !0, c = [], f = N.meta.label, !1) : N.type === "footnote_reference_close" ? (m = !1, b[":" + f] = c, !1) : (m && c.push(N), !m);
    }), !a.env.footnotes.list))
      return;
    const C = a.env.footnotes.list;
    a.tokens.push(new a.Token("footnote_block_open", "", 1));
    for (let N = 0, z = C.length; N < z; N++) {
      const A = new a.Token("footnote_open", "", 1);
      if (A.meta = { id: N, label: C[N].label }, a.tokens.push(A), C[N].tokens) {
        l = [];
        const ce = new a.Token("paragraph_open", "p", 1);
        ce.block = !0, l.push(ce);
        const ge = new a.Token("inline", "", 0);
        ge.children = C[N].tokens, ge.content = C[N].content, l.push(ge);
        const Y = new a.Token("paragraph_close", "p", -1);
        Y.block = !0, l.push(Y);
      } else
        C[N].label && (l = b[`:${C[N].label}`]);
      l && (a.tokens = a.tokens.concat(l));
      let Q;
      a.tokens[a.tokens.length - 1].type === "paragraph_close" ? Q = a.tokens.pop() : Q = null;
      const Te = C[N].count > 0 ? C[N].count : 1;
      for (let ce = 0; ce < Te; ce++) {
        const ge = new a.Token("footnote_anchor", "", 0);
        ge.meta = { id: N, subId: ce, label: C[N].label }, a.tokens.push(ge);
      }
      Q && a.tokens.push(Q), a.tokens.push(new a.Token("footnote_close", "", -1));
    }
    a.tokens.push(new a.Token("footnote_block_close", "", -1));
  }
  t.block.ruler.before("reference", "footnote_def", n, { alt: ["paragraph", "reference"] }), t.inline.ruler.after("image", "footnote_inline", i), t.inline.ruler.after("footnote_inline", "footnote_ref", s), t.core.ruler.after("inline", "footnote_tail", o);
}
function Ei() {
  this.__highest_alphabet__ = 0, this.__match_alphabets__ = {}, this.__initial_state__ = 0, this.__accept_states__ = {}, this.__transitions__ = {}, this.__actions__ = {};
}
Ei.prototype.set_highest_alphabet = function(t) {
  this.__highest_alphabet__ = t;
};
Ei.prototype.set_match_alphabets = function(t) {
  this.__match_alphabets__ = t;
};
Ei.prototype.set_initial_state = function(t) {
  this.__initial_state__ = t;
};
Ei.prototype.set_accept_states = function(t) {
  for (var e = 0; e < t.length; e++)
    this.__accept_states__[t[e]] = !0;
};
Ei.prototype.set_transitions = function(t) {
  this.__transitions__ = t;
};
Ei.prototype.set_actions = function(t) {
  this.__actions__ = t;
};
Ei.prototype.update_transition = function(t, e) {
  this.__transitions__[t] = Object.assign(
    this.__transitions__[t] || Object(),
    e
  );
};
Ei.prototype.execute = function(t, e) {
  var r, n, i;
  for (r = this.__initial_state__, n = t; r && n < e; n++) {
    for (i = this.__highest_alphabet__; i > 0 && !(r & i && this.__match_alphabets__[i].call(this, n, r, i)); i >>= 4)
      ;
    if (this.__actions__(n, r, i), i === 0)
      break;
    r = this.__transitions__[r][i] || 0;
  }
  return !!this.__accept_states__[r];
};
var CU = Ei, wU = CU, AU = function(e, r) {
  var n = {
    multiline: !1,
    rowspan: !1,
    headerless: !1,
    multibody: !0,
    autolabel: !0
  };
  r = e.utils.assign({}, n, r || {});
  function i(f, m) {
    var b = f.bMarks[m] + f.sCount[m], C = f.bMarks[m] + f.blkIndent, N = f.skipSpacesBack(f.eMarks[m], C), z = [], A, Q, Te = !1, ce = !1, ge = 0;
    for (A = b; A < N; A++)
      switch (f.src.charCodeAt(A)) {
        case 92:
          Te = !0;
          break;
        case 96:
          Q = f.skipChars(A, 96) - 1, Q > A ? (ce || (ge === 0 ? ge = Q - A : ge === Q - A && (ge = 0)), A = Q) : (ce || !Te && !ge) && (ce = !ce), Te = !1;
          break;
        case 124:
          !ce && !Te && z.push(A), Te = !1;
          break;
        default:
          Te = !1;
          break;
      }
    return z.length === 0 || (z[0] > C && z.unshift(C - 1), z[z.length - 1] < N - 1 && z.push(N)), z;
  }
  function s(f, m, b) {
    var C = { text: null, label: null }, N = f.bMarks[b] + f.sCount[b], z = f.eMarks[b], A = /^\[(.+?)\](\[([^\[\]]+)\])?\s*$/, Q = f.src.slice(N, z).match(A);
    return Q ? m ? !0 : (C.text = Q[1], !r.autolabel && !Q[2] || (C.label = Q[2] || Q[1], C.label = C.label.toLowerCase().replace(/\W+/g, "")), C) : !1;
  }
  function o(f, m, b) {
    var C = { bounds: null, multiline: null }, N = i(f, b), z, A, Q;
    return N.length < 2 ? !1 : m ? !0 : (C.bounds = N, r.multiline && (z = f.bMarks[b] + f.sCount[b], A = f.eMarks[b] - 1, C.multiline = f.src.charCodeAt(A) === 92, C.multiline && (Q = f.eMarks[b], f.eMarks[b] = f.skipSpacesBack(A, z), C.bounds = i(f, b), f.eMarks[b] = Q)), C);
  }
  function a(f, m, b) {
    var C = { aligns: [], wraps: [] }, N = i(f, b), z = /^:?(-+|=+):?\+?$/, A, Q, Te;
    if (f.sCount[b] - f.blkIndent >= 4 || N.length === 0)
      return !1;
    for (A = 0; A < N.length - 1; A++) {
      if (Q = f.src.slice(N[A] + 1, N[A + 1]).trim(), !z.test(Q))
        return !1;
      switch (C.wraps.push(
        Q.charCodeAt(Q.length - 1) === 43
        /* + */
      ), Te = (Q.charCodeAt(0) === 58) << 4 | Q.charCodeAt(Q.length - 1 - C.wraps[A]) === 58, Te) {
        case 0:
          C.aligns.push("");
          break;
        case 1:
          C.aligns.push("right");
          break;
        case 16:
          C.aligns.push("left");
          break;
        case 17:
          C.aligns.push("center");
          break;
      }
    }
    return m ? !0 : C;
  }
  function l(f, m, b) {
    return f.isEmpty(b);
  }
  function c(f, m, b, C) {
    var N = new wU(), z = 16, A = -1, Q, Te, ce, ge, Y, fe, ae = [], Re, pe, Ce, J, R, ve, F, ne, H, we;
    if (m + 2 > b || (Te = new f.Token("table_open", "table", 1), Te.meta = { sep: null, cap: null, tr: [] }, N.set_highest_alphabet(65536), N.set_initial_state(65792), N.set_accept_states([65552, 65553, 0]), N.set_match_alphabets({
      65536: s.bind(this, f, !0),
      4096: a.bind(this, f, !0),
      256: o.bind(this, f, !0),
      16: o.bind(this, f, !0),
      1: l.bind(this, f, !0)
    }), N.set_transitions({
      65792: { 65536: 256, 256: 4352 },
      256: { 256: 4352 },
      4352: { 4096: 65552, 256: 4352 },
      65552: { 65536: 0, 16: 65553 },
      65553: { 65536: 0, 16: 65553, 1: 65552 }
    }), r.headerless && (N.set_initial_state(69888), N.update_transition(
      69888,
      { 65536: 4352, 4096: 65552, 256: 4352 }
    ), ce = new f.Token("tr_placeholder", "tr", 0), ce.meta = Object()), r.multibody || N.update_transition(
      65552,
      { 65536: 0, 16: 65552 }
      // 0x10011 is never reached
    ), N.set_actions(function(w, h, d) {
      switch (d) {
        case 65536:
          if (Te.meta.cap)
            break;
          Te.meta.cap = s(f, !1, w), Te.meta.cap.map = [w, w + 1], Te.meta.cap.first = w === m;
          break;
        case 4096:
          Te.meta.sep = a(f, !1, w), Te.meta.sep.map = [w, w + 1], ce.meta.grp |= 1, z = 16;
          break;
        case 256:
        case 16:
          ce = new f.Token("tr_open", "tr", 1), ce.map = [w, w + 1], ce.meta = o(f, !1, w), ce.meta.type = d, ce.meta.grp = z, z = 0, Te.meta.tr.push(ce), r.multiline && (ce.meta.multiline && A < 0 ? A = Te.meta.tr.length - 1 : !ce.meta.multiline && A >= 0 && (Q = Te.meta.tr[A], Q.meta.mbounds = Te.meta.tr.slice(A).map(function(_) {
            return _.meta.bounds;
          }), Q.map[1] = ce.map[1], Te.meta.tr = Te.meta.tr.slice(0, A + 1), A = -1));
          break;
        case 1:
          ce.meta.grp |= 1, z = 16;
          break;
      }
    }), N.execute(m, b) === !1) || !Te.meta.tr.length)
      return !1;
    if (C)
      return !0;
    if (Te.meta.tr[Te.meta.tr.length - 1].meta.grp |= 1, Te.map = Re = [m, 0], Te.block = !0, Te.level = f.level++, f.tokens.push(Te), Te.meta.cap) {
      Q = f.push("caption_open", "caption", 1), Q.map = Te.meta.cap.map;
      var _e = [], X = Te.meta.cap.first ? "top" : "bottom";
      Te.meta.cap.label !== null && _e.push(["id", Te.meta.cap.label]), X !== "top" && _e.push(["style", "caption-side: " + X]), Q.attrs = _e, Q = f.push("inline", "", 0), Q.content = Te.meta.cap.text, Q.map = Te.meta.cap.map, Q.children = [], Q = f.push("caption_close", "caption", -1);
    }
    for (ve = 0; ve < Te.meta.tr.length; ve++) {
      for (Y = new f.Token("td_th_placeholder", "", 0), ce = Te.meta.tr[ve], ce.meta.grp & 16 && (Ce = ce.meta.type === 256 ? "thead" : "tbody", Q = f.push(Ce + "_open", Ce, 1), Q.map = pe = [ce.map[0], 0], ae = []), ce.block = !0, ce.level = f.level++, f.tokens.push(ce), F = 0; F < ce.meta.bounds.length - 1; F++) {
        if (R = [ce.meta.bounds[F] + 1, ce.meta.bounds[F + 1]], J = f.src.slice.apply(f.src, R), J === "") {
          ge = Y.attrGet("colspan"), Y.attrSet("colspan", ge === null ? 2 : ge + 1);
          continue;
        }
        if (r.rowspan && ae[F] && J.trim() === "^^") {
          fe = ae[F].attrGet("rowspan"), ae[F].attrSet("rowspan", fe === null ? 2 : fe + 1), Y = new f.Token("td_th_placeholder", "", 0);
          continue;
        }
        if (Ce = ce.meta.type === 256 ? "th" : "td", Q = f.push(Ce + "_open", Ce, 1), Q.map = ce.map, Q.attrs = [], Te.meta.sep.aligns[F] && Q.attrs.push(["style", "text-align:" + Te.meta.sep.aligns[F]]), Te.meta.sep.wraps[F] && Q.attrs.push(["class", "extend"]), Y = ae[F] = Q, r.multiline && ce.meta.multiline && ce.meta.mbounds) {
          for (J = new Array(ce.map[0]).fill("").concat([J.trimRight()]), ne = 1; ne < ce.meta.mbounds.length; ne++)
            F > ce.meta.mbounds[ne].length - 2 || (R = [ce.meta.mbounds[ne][F] + 1, ce.meta.mbounds[ne][F + 1]], J.push(f.src.slice.apply(f.src, R).trimRight()));
          for (we = new f.md.block.State(J.join(`
`), f.md, f.env, []), we.level = ce.level + 1, f.md.block.tokenize(we, ce.map[0], we.lineMax), H = 0; H < we.tokens.length; H++)
            f.tokens.push(we.tokens[H]);
        } else
          Q = f.push("inline", "", 0), Q.content = J.trim(), Q.map = ce.map, Q.level = ce.level + 1, Q.children = [];
        Q = f.push(Ce + "_close", Ce, -1);
      }
      f.push("tr_close", "tr", -1), ce.meta.grp & 1 && (Ce = ce.meta.type === 256 ? "thead" : "tbody", Q = f.push(Ce + "_close", Ce, -1), pe[1] = ce.map[1]);
    }
    return Re[1] = Math.max(
      pe[1],
      Te.meta.sep.map[1],
      Te.meta.cap ? Te.meta.cap.map[1] : -1
    ), Q = f.push("table_close", "table", -1), f.line = Re[1], !0;
  }
  e.block.ruler.at("table", c, { alt: ["paragraph", "reference"] });
};
const RU = /* @__PURE__ */ xa(AU);
var xU = function(e) {
  function r(n) {
    var i = n.posMax;
    if (n.src.charCodeAt(n.pos) !== 91)
      return !1;
    var s = n.pos + 1, o = n.md.helpers.parseLinkLabel(n, n.pos, !0);
    if (o < 0)
      return !1;
    var a = o + 1;
    return a < i && n.src.charCodeAt(a) === 123 ? (n.pos = s, n.posMax = o, n.push("span_open", "span", 1), n.md.inline.tokenize(n), n.push("span_close", "span", -1), n.pos = a, n.posMax = i, !0) : !1;
  }
  e.inline.ruler.push("bracketed-spans", r);
};
const NU = /* @__PURE__ */ xa(xU), kU = {
  html: !0,
  breaks: !0,
  langPrefix: "language-",
  linkify: !0,
  typographer: !0,
  highlight: function(t, e) {
    if (e && f_.getLanguage(e))
      try {
        return `<pre class="hljs"><code class="hljs">${f_.highlight(e, t, !0).value}</code></pre>`;
      } catch {
        return `<pre class="hljs"><code class="hljs">${fc.utils.escapeHtml(t)}</code></pre>`;
      }
    return `<pre class="hljs"><code class="hljs">${fc.utils.escapeHtml(t)}</code></pre>`;
  },
  xhtmlOut: !1
}, IU = {
  validate: function(t) {
    return t.trim().match(/^details\s+(.*)$/);
  },
  render: function(t, e) {
    var r = t[e].info.trim().match(/^details\s+(.*)$/);
    return t[e].nesting === 1 ? "<details><summary>" + fc.renderInline(r[1]) + `</summary>
` : `</details>
`;
  }
}, OU = {
  multiline: !0,
  rowspan: !0,
  headerless: !0,
  multibody: !0,
  autolabel: !0
}, fc = xn(kU).use(pU).use(NU).use(_U, "details", IU).use(hU).use(TU).use(RU, OU), ls = class ls extends ei {
  constructor() {
    super(), this.language = "markdown";
  }
  renderCode() {
    return ls.markdown.render(this.code, {});
  }
  /**
   * Le nom courant de l'élément : `Aperçu markdown`.
   */
  get tagTitle() {
    return "Aperçu markdown";
  }
  /**
   * Syntaxe `asciidoc` équivalente :
   *
   * ```
   * [style,attributes]
   * ----
   * code markdown
   * ----
   * ```
   *
   * - `style` : `md-preview-it` (le style `asciidoc` a le même nom que l'élément `html` correspondant);
   * - `attributes` : `position`, `src`, `theme`.
   *
   * Voir la documentation asciidoc sur le [style d'un bloc](https://docs.markdowntor.org/asciidoc/latest/blocks/#block-style).
   *
   * @example
   * ```
   * [md-preview-it,position=75]
   * ----
   * <!-- code markdown -->
   * # markdown
   * 
   * ## Titre de section
   * * item de liste
   * * autre item
   * * lien [pour en savoir plus...](https://docs.markdowntor.org/markdown/latest/)
   * ----
   * ```
   *
   */
  toAsciidoc() {
    const e = {
      // propriétés booléennes  : attrName: this.propName
    }, r = [
      /*propriétés avec valeur : attrName=`${this.propName}`*/
      `position="${this.position}"`
    ];
    for (const i of Object.keys(e))
      e[i] && r.push(i);
    return `
    [md-preview-it,${r.join(",")}]
    ----
    ${this.code}
    ----
    `.replace(/^ +| +$/gm, "");
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  updated(e) {
    var n;
    super.updated(e);
    const r = (n = this.shadowRoot) == null ? void 0 : n.querySelectorAll(".preview__view__code script");
    if (r)
      for (const i of r)
        Nh(i);
  }
};
ls.styles = [
  on(ls, ls, "styles"),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: default */
.static{position:static;}`
], ls.markdown = fc;
let bh = ls;
customElements && !customElements.get("md-preview-it") && customElements.define("md-preview-it", bh);
const DU = ":host{display:inline-block}kbd{font-family:var(--sl-font-mono);background-color:var(--sl-color-neutral-50);border-radius:var(--sl-border-radius-small);border:1px solid var(--sl-color-neutral-200);box-shadow:inset 0 1px 0 var(--color-white);padding:var(--sl-spacing-3x-small) var(--sl-spacing-2x-small)}";
var MU = Object.defineProperty, LU = Object.getOwnPropertyDescriptor, Tm = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? LU(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && MU(e, r, i), i;
};
const jo = class jo extends hn {
  constructor() {
    super(), this.size = "small", this.theme = this.getTheme();
  }
  firstUpdated(e) {
    this.setTheme(this.theme), this.menu.addEventListener("sl-select", (r) => {
      const n = r;
      this.setTheme(n.detail.item.value);
    }), window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", () => this.setTheme(this.theme)), document.addEventListener("keydown", (r) => {
      const n = r.composedPath();
      r.key === "\\" && !n.some((i) => {
        var s;
        return ["input", "textarea"].includes((s = i.tagName) == null ? void 0 : s.toLowerCase());
      }) && (r.preventDefault(), this.setTheme(this.isDark() ? "light" : "dark"));
    });
  }
  getTheme() {
    return localStorage.getItem("theme") || "system";
  }
  isDark() {
    return this.theme === "system" ? window.matchMedia("(prefers-color-scheme: dark)").matches : this.theme === "dark";
  }
  render() {
    return Ct`
      <sl-dropdown class="theme" hoist>
        <sl-button size=${this.size} slot="trigger" caret>
          ${this.isDark() ? Ct`<it-mdi-weather-night style="color:var(--sl-color-yellow-500)"></it-mdi-weather-night>` : Ct`<it-mdi-white-balance-sunny style="color:var(--sl-color-yellow-500)"></it-mdi-white-balance-sunny>`}
        </sl-button>
        <sl-menu>
          <sl-menu-item type="checkbox" value="light">Clair</sl-menu-item>
          <sl-menu-item type="checkbox" value="dark">Sombre</sl-menu-item>
          <sl-divider></sl-divider>
          <sl-menu-item type="checkbox" value="system">System</sl-menu-item>
        </sl-menu>
      </sl-dropdown>
    `;
  }
  setTheme(e) {
    const r = Object.assign(document.createElement("style"), {
      textContent: "* { transition: none !important; }"
    });
    this.theme = e, localStorage.setItem("theme", this.theme), [...this.menu.querySelectorAll("sl-menu-item")].map((n) => n.checked = n.getAttribute("value") === this.theme), document.body.appendChild(r), requestAnimationFrame(() => {
      document.documentElement.classList.toggle("sl-theme-dark", this.isDark()), document.documentElement.classList.toggle("sl-theme-light", !this.isDark()), requestAnimationFrame(() => document.body.removeChild(r));
    });
  }
  get tagTitle() {
    return "Thème";
  }
  toAsciidoc() {
    throw new Error("Method not implemented.");
  }
};
jo.styles = [
  on(jo, jo, "styles"),
  jr(DU),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: icons */
it-mdi-weather-night{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='m17.75 4.09l-2.53 1.94l.91 3.06l-2.63-1.81l-2.63 1.81l.91-3.06l-2.53-1.94L12.44 4l1.06-3l1.06 3zm3.5 6.91l-1.64 1.25l.59 1.98l-1.7-1.17l-1.7 1.17l.59-1.98L15.75 11l2.06-.05L18.5 9l.69 1.95zm-2.28 4.95c.83-.08 1.72 1.1 1.19 1.85c-.32.45-.66.87-1.08 1.27C15.17 23 8.84 23 4.94 19.07c-3.91-3.9-3.91-10.24 0-14.14c.4-.4.82-.76 1.27-1.08c.75-.53 1.93.36 1.85 1.19c-.27 2.86.69 5.83 2.89 8.02a9.96 9.96 0 0 0 8.02 2.89m-1.64 2.02a12.08 12.08 0 0 1-7.8-3.47c-2.17-2.19-3.33-5-3.49-7.82c-2.81 3.14-2.7 7.96.31 10.98c3.02 3.01 7.84 3.12 10.98.31'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-white-balance-sunny{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='m3.55 19.09l1.41 1.41l1.8-1.79l-1.42-1.42M12 6c-3.31 0-6 2.69-6 6s2.69 6 6 6s6-2.69 6-6c0-3.32-2.69-6-6-6m8 7h3v-2h-3m-2.76 7.71l1.8 1.79l1.41-1.41l-1.79-1.8M20.45 5l-1.41-1.4l-1.8 1.79l1.42 1.42M13 1h-2v3h2M6.76 5.39L4.96 3.6L3.55 5l1.79 1.81zM1 13h3v-2H1m12 9h-2v3h2'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
/* layer: default */
.static{position:static;}
.transition{transition-property:color,background-color,border-color,outline-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms;}`
];
let oo = jo;
Tm([
  Ht("sl-menu")
], oo.prototype, "menu", 2);
Tm([
  Gr()
], oo.prototype, "theme", 2);
Tm([
  ut({ type: String, reflect: !0 })
], oo.prototype, "size", 2);
customElements && !customElements.get("theme-it") && customElements.define("theme-it", oo);
const PU = ":host{display:inline-block}";
var FU = Object.defineProperty, BU = Object.getOwnPropertyDescriptor, ts = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? BU(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && FU(e, r, i), i;
};
const Vv = "Cacher", Wv = "Montrer", Xo = class Xo extends hn {
  constructor() {
    super(...arguments), this.selector = "unknown", this.size = "small", this.textShow = "<it-mdi-show-outline></it-mdi-show-outline>", this.textHide = "<it-mdi-hide-outline></it-mdi-hide-outline>", this.tooltipShow = Wv, this.tooltipHide = Vv, this.visibility = !1, this.hidden = !1;
  }
  getHidden() {
    return this.element ? this.visibility ? this.element.style.visibility === "hidden" : this.element.style.display === "none" : !1;
  }
  firstUpdated(e) {
    this.tooltipShow === Wv && (this.tooltipShow += ` "${this.selector}"`), this.tooltipHide === Vv && (this.tooltipHide += ` "${this.selector}"`), this.element = document.querySelector(this.selector), this.hidden = this.getHidden();
  }
  render() {
    return Ct`
      <sl-tooltip content=${this.hidden ? this.tooltipShow : this.tooltipHide}>
        <sl-button size=${this.size} @click=${() => this.toggleSelector()}>
          ${Ms(this.hidden ? this.textShow : this.textHide)}
        </sl-button>
      </sl-tooltip>
    `;
  }
  /**
   * Le nom courant de l'élément : `Bascule`.
   */
  get tagTitle() {
    return "Bascule";
  }
  /**
   * Syntaxe `asciidoc` équivalente :
   *
   * ```
   * name:target[attributes]   
   * ```
   *
   * - `name` : `toggle-it`  (la macro `asciidoc` a le même nom que l'élément `html` correspondant);
   * - `target` : `selector` 
   * - `attributes` : `size`, `text-hide`, `text-show`, `tooltip-hide`, `tooltip-show`, `visibility`.
   *
   * Voir la documentation Asciidoc sur les <a href="https://docs.asciidoctor.org/asciidoc/latest/key-concepts/#macros">macros de type _inline_</a>
   *
   * @examples 
   * `toggle-it:#header[visibility]`, 
   * `toggle-it:#header[text-hide="cacher l'en-tête",text-show="montrer l'en-tête",visibility]`
   */
  toAsciidoc() {
    throw new Error("Method not implemented.");
  }
  toggleSelector() {
    this.element && (this.visibility ? this.element.style.visibility = this.element.style.visibility === "hidden" ? "visible" : "hidden" : this.element.style.display = this.element.style.display === "none" ? "" : "none"), this.hidden = this.getHidden();
  }
};
Xo.styles = [
  on(Xo, Xo, "styles"),
  jr(PU),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: icons */
it-mdi-hide-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M2 5.27L3.28 4L20 20.72L18.73 22l-3.08-3.08c-1.15.38-2.37.58-3.65.58c-5 0-9.27-3.11-11-7.5c.69-1.76 1.79-3.31 3.19-4.54zM12 9a3 3 0 0 1 3 3a3 3 0 0 1-.17 1L11 9.17A3 3 0 0 1 12 9m0-4.5c5 0 9.27 3.11 11 7.5a11.79 11.79 0 0 1-4 5.19l-1.42-1.43A9.862 9.862 0 0 0 20.82 12A9.821 9.821 0 0 0 12 6.5c-1.09 0-2.16.18-3.16.5L7.3 5.47c1.44-.62 3.03-.97 4.7-.97M3.18 12A9.821 9.821 0 0 0 12 17.5c.69 0 1.37-.07 2-.21L11.72 15A3.064 3.064 0 0 1 9 12.28L5.6 8.87c-.99.85-1.82 1.91-2.42 3.13'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-show-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M12 9a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0-4.5c5 0 9.27 3.11 11 7.5c-1.73 4.39-6 7.5-11 7.5S2.73 16.39 1 12c1.73-4.39 6-7.5 11-7.5M3.18 12a9.821 9.821 0 0 0 17.64 0a9.821 9.821 0 0 0-17.64 0'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
/* layer: default */
.visible{visibility:visible;}
.static{position:static;}
.hidden{display:none;}`
];
let Mn = Xo;
ts([
  ut({ type: String, reflect: !0 })
], Mn.prototype, "selector", 2);
ts([
  ut({ type: String, reflect: !0 })
], Mn.prototype, "size", 2);
ts([
  ut({ type: String, reflect: !0, attribute: "text-show" })
], Mn.prototype, "textShow", 2);
ts([
  ut({ type: String, reflect: !0, attribute: "text-hide" })
], Mn.prototype, "textHide", 2);
ts([
  ut({ type: String, reflect: !0, attribute: "tooltip-show" })
], Mn.prototype, "tooltipShow", 2);
ts([
  ut({ type: String, reflect: !0, attribute: "tooltip-hide" })
], Mn.prototype, "tooltipHide", 2);
ts([
  ut({ type: Boolean, reflect: !0 })
], Mn.prototype, "visibility", 2);
ts([
  Gr()
], Mn.prototype, "hidden", 2);
customElements && !customElements.get("toggle-it") && customElements.define("toggle-it", Mn);
var UU = Kt`
  ${wr}
  ${P1}

  :host {
    display: block;
  }

  .input {
    flex: 1 1 auto;
    display: inline-flex;
    align-items: stretch;
    justify-content: start;
    position: relative;
    width: 100%;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    letter-spacing: var(--sl-input-letter-spacing);
    vertical-align: middle;
    overflow: hidden;
    cursor: text;
    transition:
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) border,
      var(--sl-transition-fast) box-shadow,
      var(--sl-transition-fast) background-color;
  }

  /* Standard inputs */
  .input--standard {
    background-color: var(--sl-input-background-color);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
  }

  .input--standard:hover:not(.input--disabled) {
    background-color: var(--sl-input-background-color-hover);
    border-color: var(--sl-input-border-color-hover);
  }

  .input--standard.input--focused:not(.input--disabled) {
    background-color: var(--sl-input-background-color-focus);
    border-color: var(--sl-input-border-color-focus);
    box-shadow: 0 0 0 var(--sl-focus-ring-width) var(--sl-input-focus-ring-color);
  }

  .input--standard.input--focused:not(.input--disabled) .input__control {
    color: var(--sl-input-color-focus);
  }

  .input--standard.input--disabled {
    background-color: var(--sl-input-background-color-disabled);
    border-color: var(--sl-input-border-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .input--standard.input--disabled .input__control {
    color: var(--sl-input-color-disabled);
  }

  .input--standard.input--disabled .input__control::placeholder {
    color: var(--sl-input-placeholder-color-disabled);
  }

  /* Filled inputs */
  .input--filled {
    border: none;
    background-color: var(--sl-input-filled-background-color);
    color: var(--sl-input-color);
  }

  .input--filled:hover:not(.input--disabled) {
    background-color: var(--sl-input-filled-background-color-hover);
  }

  .input--filled.input--focused:not(.input--disabled) {
    background-color: var(--sl-input-filled-background-color-focus);
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .input--filled.input--disabled {
    background-color: var(--sl-input-filled-background-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .input__control {
    flex: 1 1 auto;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    min-width: 0;
    height: 100%;
    color: var(--sl-input-color);
    border: none;
    background: inherit;
    box-shadow: none;
    padding: 0;
    margin: 0;
    cursor: inherit;
    -webkit-appearance: none;
  }

  .input__control::-webkit-search-decoration,
  .input__control::-webkit-search-cancel-button,
  .input__control::-webkit-search-results-button,
  .input__control::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }

  .input__control:-webkit-autofill,
  .input__control:-webkit-autofill:hover,
  .input__control:-webkit-autofill:focus,
  .input__control:-webkit-autofill:active {
    box-shadow: 0 0 0 var(--sl-input-height-large) var(--sl-input-background-color-hover) inset !important;
    -webkit-text-fill-color: var(--sl-color-primary-500);
    caret-color: var(--sl-input-color);
  }

  .input--filled .input__control:-webkit-autofill,
  .input--filled .input__control:-webkit-autofill:hover,
  .input--filled .input__control:-webkit-autofill:focus,
  .input--filled .input__control:-webkit-autofill:active {
    box-shadow: 0 0 0 var(--sl-input-height-large) var(--sl-input-filled-background-color) inset !important;
  }

  .input__control::placeholder {
    color: var(--sl-input-placeholder-color);
    user-select: none;
    -webkit-user-select: none;
  }

  .input:hover:not(.input--disabled) .input__control {
    color: var(--sl-input-color-hover);
  }

  .input__control:focus {
    outline: none;
  }

  .input__prefix,
  .input__suffix {
    display: inline-flex;
    flex: 0 0 auto;
    align-items: center;
    cursor: default;
  }

  .input__prefix ::slotted(sl-icon),
  .input__suffix ::slotted(sl-icon) {
    color: var(--sl-input-icon-color);
  }

  /*
   * Size modifiers
   */

  .input--small {
    border-radius: var(--sl-input-border-radius-small);
    font-size: var(--sl-input-font-size-small);
    height: var(--sl-input-height-small);
  }

  .input--small .input__control {
    height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-small);
  }

  .input--small .input__clear,
  .input--small .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-small) * 2);
  }

  .input--small .input__prefix ::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-small);
  }

  .input--small .input__suffix ::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-small);
  }

  .input--medium {
    border-radius: var(--sl-input-border-radius-medium);
    font-size: var(--sl-input-font-size-medium);
    height: var(--sl-input-height-medium);
  }

  .input--medium .input__control {
    height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-medium);
  }

  .input--medium .input__clear,
  .input--medium .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-medium) * 2);
  }

  .input--medium .input__prefix ::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-medium);
  }

  .input--medium .input__suffix ::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-medium);
  }

  .input--large {
    border-radius: var(--sl-input-border-radius-large);
    font-size: var(--sl-input-font-size-large);
    height: var(--sl-input-height-large);
  }

  .input--large .input__control {
    height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-large);
  }

  .input--large .input__clear,
  .input--large .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-large) * 2);
  }

  .input--large .input__prefix ::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-large);
  }

  .input--large .input__suffix ::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-large);
  }

  /*
   * Pill modifier
   */

  .input--pill.input--small {
    border-radius: var(--sl-input-height-small);
  }

  .input--pill.input--medium {
    border-radius: var(--sl-input-height-medium);
  }

  .input--pill.input--large {
    border-radius: var(--sl-input-height-large);
  }

  /*
   * Clearable + Password Toggle
   */

  .input__clear:not(.input__clear--visible) {
    visibility: hidden;
  }

  .input__clear,
  .input__password-toggle {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: inherit;
    color: var(--sl-input-icon-color);
    border: none;
    background: none;
    padding: 0;
    transition: var(--sl-transition-fast) color;
    cursor: pointer;
  }

  .input__clear:hover,
  .input__password-toggle:hover {
    color: var(--sl-input-icon-color-hover);
  }

  .input__clear:focus,
  .input__password-toggle:focus {
    outline: none;
  }

  .input--empty .input__clear {
    visibility: hidden;
  }

  /* Don't show the browser's password toggle in Edge */
  ::-ms-reveal {
    display: none;
  }

  /* Hide the built-in number spinner */
  .input--no-spin-buttons input[type='number']::-webkit-outer-spin-button,
  .input--no-spin-buttons input[type='number']::-webkit-inner-spin-button {
    -webkit-appearance: none;
    display: none;
  }

  .input--no-spin-buttons input[type='number'] {
    -moz-appearance: textfield;
  }
`, zt = class extends gr {
  constructor() {
    super(...arguments), this.formControlController = new yh(this, {
      assumeInteractionOn: ["sl-blur", "sl-input"]
    }), this.hasSlotController = new Ra(this, "help-text", "label"), this.localize = new ii(this), this.hasFocus = !1, this.title = "", this.__numberInput = Object.assign(document.createElement("input"), { type: "number" }), this.__dateInput = Object.assign(document.createElement("input"), { type: "date" }), this.type = "text", this.name = "", this.value = "", this.defaultValue = "", this.size = "medium", this.filled = !1, this.pill = !1, this.label = "", this.helpText = "", this.clearable = !1, this.disabled = !1, this.placeholder = "", this.readonly = !1, this.passwordToggle = !1, this.passwordVisible = !1, this.noSpinButtons = !1, this.form = "", this.required = !1, this.spellcheck = !0;
  }
  //
  // NOTE: We use an in-memory input for these getters/setters instead of the one in the template because the properties
  // can be set before the component is rendered.
  //
  /**
   * Gets or sets the current value as a `Date` object. Returns `null` if the value can't be converted. This will use the native `<input type="{{type}}">` implementation and may result in an error.
   */
  get valueAsDate() {
    var t;
    return this.__dateInput.type = this.type, this.__dateInput.value = this.value, ((t = this.input) == null ? void 0 : t.valueAsDate) || this.__dateInput.valueAsDate;
  }
  set valueAsDate(t) {
    this.__dateInput.type = this.type, this.__dateInput.valueAsDate = t, this.value = this.__dateInput.value;
  }
  /** Gets or sets the current value as a number. Returns `NaN` if the value can't be converted. */
  get valueAsNumber() {
    var t;
    return this.__numberInput.value = this.value, ((t = this.input) == null ? void 0 : t.valueAsNumber) || this.__numberInput.valueAsNumber;
  }
  set valueAsNumber(t) {
    this.__numberInput.valueAsNumber = t, this.value = this.__numberInput.value;
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  firstUpdated() {
    this.formControlController.updateValidity();
  }
  handleBlur() {
    this.hasFocus = !1, this.emit("sl-blur");
  }
  handleChange() {
    this.value = this.input.value, this.emit("sl-change");
  }
  handleClearClick(t) {
    this.value = "", this.emit("sl-clear"), this.emit("sl-input"), this.emit("sl-change"), this.input.focus(), t.stopPropagation();
  }
  handleFocus() {
    this.hasFocus = !0, this.emit("sl-focus");
  }
  handleInput() {
    this.value = this.input.value, this.formControlController.updateValidity(), this.emit("sl-input");
  }
  handleInvalid(t) {
    this.formControlController.setValidity(!1), this.formControlController.emitInvalidEvent(t);
  }
  handleKeyDown(t) {
    const e = t.metaKey || t.ctrlKey || t.shiftKey || t.altKey;
    t.key === "Enter" && !e && setTimeout(() => {
      !t.defaultPrevented && !t.isComposing && this.formControlController.submit();
    });
  }
  handlePasswordToggle() {
    this.passwordVisible = !this.passwordVisible;
  }
  handleDisabledChange() {
    this.formControlController.setValidity(this.disabled);
  }
  handleStepChange() {
    this.input.step = String(this.step), this.formControlController.updateValidity();
  }
  async handleValueChange() {
    await this.updateComplete, this.formControlController.updateValidity();
  }
  /** Sets focus on the input. */
  focus(t) {
    this.input.focus(t);
  }
  /** Removes focus from the input. */
  blur() {
    this.input.blur();
  }
  /** Selects all the text in the input. */
  select() {
    this.input.select();
  }
  /** Sets the start and end positions of the text selection (0-based). */
  setSelectionRange(t, e, r = "none") {
    this.input.setSelectionRange(t, e, r);
  }
  /** Replaces a range of text with a new string. */
  setRangeText(t, e, r, n) {
    this.input.setRangeText(t, e, r, n), this.value !== this.input.value && (this.value = this.input.value);
  }
  /** Displays the browser picker for an input element (only works if the browser supports it for the input type). */
  showPicker() {
    "showPicker" in HTMLInputElement.prototype && this.input.showPicker();
  }
  /** Increments the value of a numeric input type by the value of the step attribute. */
  stepUp() {
    this.input.stepUp(), this.value !== this.input.value && (this.value = this.input.value);
  }
  /** Decrements the value of a numeric input type by the value of the step attribute. */
  stepDown() {
    this.input.stepDown(), this.value !== this.input.value && (this.value = this.input.value);
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(t) {
    this.input.setCustomValidity(t), this.formControlController.updateValidity();
  }
  render() {
    const t = this.hasSlotController.test("label"), e = this.hasSlotController.test("help-text"), r = this.label ? !0 : !!t, n = this.helpText ? !0 : !!e, i = this.clearable && !this.disabled && !this.readonly, s = i && (typeof this.value == "number" || this.value.length > 0);
    return Ct`
      <div
        part="form-control"
        class=${Ur({
      "form-control": !0,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--has-label": r,
      "form-control--has-help-text": n
    })}
      >
        <label
          part="form-control-label"
          class="form-control__label"
          for="input"
          aria-hidden=${r ? "false" : "true"}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div
            part="base"
            class=${Ur({
      input: !0,
      // Sizes
      "input--small": this.size === "small",
      "input--medium": this.size === "medium",
      "input--large": this.size === "large",
      // States
      "input--pill": this.pill,
      "input--standard": !this.filled,
      "input--filled": this.filled,
      "input--disabled": this.disabled,
      "input--focused": this.hasFocus,
      "input--empty": !this.value,
      "input--no-spin-buttons": this.noSpinButtons
    })}
          >
            <span part="prefix" class="input__prefix">
              <slot name="prefix"></slot>
            </span>

            <input
              part="input"
              id="input"
              class="input__control"
              type=${this.type === "password" && this.passwordVisible ? "text" : this.type}
              title=${this.title}
              name=${Wt(this.name)}
              ?disabled=${this.disabled}
              ?readonly=${this.readonly}
              ?required=${this.required}
              placeholder=${Wt(this.placeholder)}
              minlength=${Wt(this.minlength)}
              maxlength=${Wt(this.maxlength)}
              min=${Wt(this.min)}
              max=${Wt(this.max)}
              step=${Wt(this.step)}
              .value=${B1(this.value)}
              autocapitalize=${Wt(this.autocapitalize)}
              autocomplete=${Wt(this.autocomplete)}
              autocorrect=${Wt(this.autocorrect)}
              ?autofocus=${this.autofocus}
              spellcheck=${this.spellcheck}
              pattern=${Wt(this.pattern)}
              enterkeyhint=${Wt(this.enterkeyhint)}
              inputmode=${Wt(this.inputmode)}
              aria-describedby="help-text"
              @change=${this.handleChange}
              @input=${this.handleInput}
              @invalid=${this.handleInvalid}
              @keydown=${this.handleKeyDown}
              @focus=${this.handleFocus}
              @blur=${this.handleBlur}
            />

            ${i ? Ct`
                  <button
                    part="clear-button"
                    class=${Ur({
      input__clear: !0,
      "input__clear--visible": s
    })}
                    type="button"
                    aria-label=${this.localize.term("clearEntry")}
                    @click=${this.handleClearClick}
                    tabindex="-1"
                  >
                    <slot name="clear-icon">
                      <sl-icon name="x-circle-fill" library="system"></sl-icon>
                    </slot>
                  </button>
                ` : ""}
            ${this.passwordToggle && !this.disabled ? Ct`
                  <button
                    part="password-toggle-button"
                    class="input__password-toggle"
                    type="button"
                    aria-label=${this.localize.term(this.passwordVisible ? "hidePassword" : "showPassword")}
                    @click=${this.handlePasswordToggle}
                    tabindex="-1"
                  >
                    ${this.passwordVisible ? Ct`
                          <slot name="show-password-icon">
                            <sl-icon name="eye-slash" library="system"></sl-icon>
                          </slot>
                        ` : Ct`
                          <slot name="hide-password-icon">
                            <sl-icon name="eye" library="system"></sl-icon>
                          </slot>
                        `}
                  </button>
                ` : ""}

            <span part="suffix" class="input__suffix">
              <slot name="suffix"></slot>
            </span>
          </div>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${n ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
zt.styles = UU;
zt.dependencies = { "sl-icon": gn };
ct([
  Ht(".input__control")
], zt.prototype, "input", 2);
ct([
  Gr()
], zt.prototype, "hasFocus", 2);
ct([
  ut()
], zt.prototype, "title", 2);
ct([
  ut({ reflect: !0 })
], zt.prototype, "type", 2);
ct([
  ut()
], zt.prototype, "name", 2);
ct([
  ut()
], zt.prototype, "value", 2);
ct([
  F1()
], zt.prototype, "defaultValue", 2);
ct([
  ut({ reflect: !0 })
], zt.prototype, "size", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], zt.prototype, "filled", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], zt.prototype, "pill", 2);
ct([
  ut()
], zt.prototype, "label", 2);
ct([
  ut({ attribute: "help-text" })
], zt.prototype, "helpText", 2);
ct([
  ut({ type: Boolean })
], zt.prototype, "clearable", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], zt.prototype, "disabled", 2);
ct([
  ut()
], zt.prototype, "placeholder", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], zt.prototype, "readonly", 2);
ct([
  ut({ attribute: "password-toggle", type: Boolean })
], zt.prototype, "passwordToggle", 2);
ct([
  ut({ attribute: "password-visible", type: Boolean })
], zt.prototype, "passwordVisible", 2);
ct([
  ut({ attribute: "no-spin-buttons", type: Boolean })
], zt.prototype, "noSpinButtons", 2);
ct([
  ut({ reflect: !0 })
], zt.prototype, "form", 2);
ct([
  ut({ type: Boolean, reflect: !0 })
], zt.prototype, "required", 2);
ct([
  ut()
], zt.prototype, "pattern", 2);
ct([
  ut({ type: Number })
], zt.prototype, "minlength", 2);
ct([
  ut({ type: Number })
], zt.prototype, "maxlength", 2);
ct([
  ut()
], zt.prototype, "min", 2);
ct([
  ut()
], zt.prototype, "max", 2);
ct([
  ut()
], zt.prototype, "step", 2);
ct([
  ut()
], zt.prototype, "autocapitalize", 2);
ct([
  ut()
], zt.prototype, "autocorrect", 2);
ct([
  ut()
], zt.prototype, "autocomplete", 2);
ct([
  ut({ type: Boolean })
], zt.prototype, "autofocus", 2);
ct([
  ut()
], zt.prototype, "enterkeyhint", 2);
ct([
  ut({
    type: Boolean,
    converter: {
      // Allow "true|false" attribute values but keep the property boolean
      fromAttribute: (t) => !(!t || t === "false"),
      toAttribute: (t) => t ? "true" : "false"
    }
  })
], zt.prototype, "spellcheck", 2);
ct([
  ut()
], zt.prototype, "inputmode", 2);
ct([
  _r("disabled", { waitUntilFirstUpdate: !0 })
], zt.prototype, "handleDisabledChange", 1);
ct([
  _r("step", { waitUntilFirstUpdate: !0 })
], zt.prototype, "handleStepChange", 1);
ct([
  _r("value", { waitUntilFirstUpdate: !0 })
], zt.prototype, "handleValueChange", 1);
zt.define("sl-input");
const qU = ":host{display:inline-block}.tools{display:inline-flex}.tools__container{display:inline-flex;justify-content:flex-end}";
var zU = Object.defineProperty, GU = Object.getOwnPropertyDescriptor, ys = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? GU(e, r) : e, s = t.length - 1, o; s >= 0; s--)
    (o = t[s]) && (i = (n ? o(e, r, i) : o(i)) || i);
  return n && i && zU(e, r, i), i;
};
const Zo = class Zo extends hn {
  constructor() {
    super(...arguments), this.size = "small", this.menuItems = [];
  }
  firstUpdated(e) {
    this.menuItems = [...this.menu.querySelectorAll("sl-menu-item")];
  }
  handleSelectTool(e) {
    const r = e.detail.item;
    if (r.toggleAttribute("checked"), r.checked) {
      switch (r.value) {
        case "all":
          this.clockElement.removeAttribute("hidden"), this.colorElement.removeAttribute("hidden"), this.themeElement.removeAttribute("hidden"), this.menuItems.forEach((n) => n.checked = !0);
          break;
        case "date":
          this.clockElement.removeAttribute("hidden");
          break;
        case "theme":
          this.themeElement.removeAttribute("hidden");
          break;
        case "color":
          this.colorElement.removeAttribute("hidden");
          break;
      }
      !this.menuItemAll.checked && this.menuItems.length - 1 === this.menuItems.filter((n) => n.checked).length && (this.menuItemAll.checked = !0);
    } else
      switch (r.value) {
        case "all":
          this.clockElement.setAttribute("hidden", ""), this.colorElement.setAttribute("hidden", ""), this.themeElement.setAttribute("hidden", ""), this.menuItems.forEach((n) => n.checked = !1);
          break;
        case "date":
          this.clockElement.setAttribute("hidden", ""), this.menuItemAll.checked = !1;
          break;
        case "theme":
          this.themeElement.setAttribute("hidden", ""), this.menuItemAll.checked = !1;
          break;
        case "color":
          this.colorElement.setAttribute("hidden", ""), this.menuItemAll.checked = !1;
          break;
      }
  }
  render() {
    return Ct`
      <div part="base" class="tools">
        <div class="tools__container">
          <!--
          <alarm-it size=${this.size} hidden></alarm-it>
          <chrono-it size=${this.size} hidden></chrono-it>
          <timer-it size=${this.size} hidden></timer-it>
          -->
          <clock-it size=${this.size} date time hidden></clock-it>
          <color-it size=${this.size} hidden></color-it>
          <theme-it size=${this.size} hidden></theme-it>
        </div>
        <sl-dropdown part="dropdown" stay-open-on-select hoist>
          <sl-button size=${this.size} slot="trigger" caret>
            <it-mdi-cog class="dropdown-icon"></it-mdi-cog>
          </sl-button>
          <sl-menu @sl-select=${this.handleSelectTool}>
            <sl-menu-item value="all" type="checkbox">
              Tout sélectionner
            </sl-menu-item>
            <sl-divider></sl-divider>
            <sl-menu-item value="theme" type="checkbox">
              <it-mdi-theme-light-dark slot="prefix"></it-mdi-theme-light-dark>
              Thème
            </sl-menu-item>
            <sl-menu-item value="color" type="checkbox">
              <it-mdi-palette-outline slot="prefix"></it-mdi-palette-outline>
              Couleur
            </sl-menu-item>
            <sl-divider></sl-divider>
            <sl-menu-item value="date" type="checkbox">
              <it-mdi-calendar-clock-outline slot="prefix"></it-mdi-calendar-clock-outline>
              Date et heure
            </sl-menu-item>
            <!--
            <sl-menu-item value="chrono">
              <div slot="prefix" class="it-mdi-timer-outline"></div>
              Chronomètre
            </sl-menu-item>
            <sl-menu-item value="timer">
              <div slot="prefix" class="it-mdi-camera-timer"></div>
              Minuteur
            </sl-menu-item>
            <sl-menu-item value="alarm">
              <div slot="prefix" class="it-mdi-bell-outline"></div>
              Alarme
            </sl-menu-item>
            -->
          </sl-menu>
        </sl-dropdown>
      </div>
    `;
  }
  get tagTitle() {
    return "Outils";
  }
  toAsciidoc() {
    throw new Error("Method not implemented.");
  }
};
Zo.styles = [
  on(Zo, Zo, "styles"),
  jr(qU),
  Kt`/* layer: preflights */
*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}
/* layer: icons */
.it-mdi-bell-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M10 21h4c0 1.1-.9 2-2 2s-2-.9-2-2m11-2v1H3v-1l2-2v-6c0-3.1 2-5.8 5-6.7V4c0-1.1.9-2 2-2s2 .9 2 2v.3c3 .9 5 3.6 5 6.7v6zm-4-8c0-2.8-2.2-5-5-5s-5 2.2-5 5v7h10z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
.it-mdi-camera-timer{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M4.94 6.35c-.39-.39-.39-1.03 0-1.42a.996.996 0 0 1 1.41 0l6.72 5.38l.35.28c.78.78.78 2.05 0 2.83c-.78.78-2.05.78-2.83 0l-.28-.35zM12 20a8 8 0 0 0 8-8c0-2.21-.9-4.21-2.34-5.66l1.41-1.41A9.969 9.969 0 0 1 22 12a10 10 0 0 1-10 10A10 10 0 0 1 2 12h2a8 8 0 0 0 8 8m0-19a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
.it-mdi-timer-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M12 20a7 7 0 0 1-7-7a7 7 0 0 1 7-7a7 7 0 0 1 7 7a7 7 0 0 1-7 7m7.03-12.61l1.42-1.42c-.45-.51-.9-.97-1.41-1.41L17.62 6c-1.55-1.26-3.5-2-5.62-2a9 9 0 0 0-9 9a9 9 0 0 0 9 9c5 0 9-4.03 9-9c0-2.12-.74-4.07-1.97-5.61M11 14h2V8h-2m4-7H9v2h6z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-calendar-clock-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M6 1v2H5c-1.11 0-2 .89-2 2v14a2 2 0 0 0 2 2h6.1c1.26 1.24 2.99 2 4.9 2c3.87 0 7-3.13 7-7c0-1.91-.76-3.64-2-4.9V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1M5 5h14v2H5m0 2h14v.67c-.91-.43-1.93-.67-3-.67c-3.87 0-7 3.13-7 7c0 1.07.24 2.09.67 3H5m11-7.85c2.68 0 4.85 2.17 4.85 4.85c0 2.68-2.17 4.85-4.85 4.85c-2.68 0-4.85-2.17-4.85-4.85c0-2.68 2.17-4.85 4.85-4.85M15 13v3.69l3.19 1.84l.75-1.3l-2.44-1.41V13Z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-cog{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-palette-outline{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M12 22A10 10 0 0 1 2 12A10 10 0 0 1 12 2c5.5 0 10 4 10 9a6 6 0 0 1-6 6h-1.8c-.3 0-.5.2-.5.5c0 .1.1.2.1.3c.4.5.6 1.1.6 1.7c.1 1.4-1 2.5-2.4 2.5m0-18a8 8 0 0 0-8 8a8 8 0 0 0 8 8c.3 0 .5-.2.5-.5c0-.2-.1-.3-.1-.4c-.4-.5-.6-1-.6-1.6c0-1.4 1.1-2.5 2.5-2.5H16a4 4 0 0 0 4-4c0-3.9-3.6-7-8-7m-5.5 6c.8 0 1.5.7 1.5 1.5S7.3 13 6.5 13S5 12.3 5 11.5S5.7 10 6.5 10m3-4c.8 0 1.5.7 1.5 1.5S10.3 9 9.5 9S8 8.3 8 7.5S8.7 6 9.5 6m5 0c.8 0 1.5.7 1.5 1.5S15.3 9 14.5 9S13 8.3 13 7.5S13.7 6 14.5 6m3 4c.8 0 1.5.7 1.5 1.5s-.7 1.5-1.5 1.5s-1.5-.7-1.5-1.5s.7-1.5 1.5-1.5'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
it-mdi-theme-light-dark{--un-icon:url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' display='inline-block' vertical-align='middle' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M7.5 2c-1.79 1.15-3 3.18-3 5.5s1.21 4.35 3.03 5.5C4.46 13 2 10.54 2 7.5A5.5 5.5 0 0 1 7.5 2m11.57 1.5l1.43 1.43L4.93 20.5L3.5 19.07zm-6.18 2.43L11.41 5L9.97 6l.42-1.7L9 3.24l1.75-.12l.58-1.65L12 3.1l1.73.03l-1.35 1.13zm-3.3 3.61l-1.16-.73l-1.12.78l.34-1.32l-1.09-.83l1.36-.09l.45-1.29l.51 1.27l1.36.03l-1.05.87zM19 13.5a5.5 5.5 0 0 1-5.5 5.5c-1.22 0-2.35-.4-3.26-1.07l7.69-7.69c.67.91 1.07 2.04 1.07 3.26m-4.4 6.58l2.77-1.15l-.24 3.35zm4.33-2.7l1.15-2.77l2.2 2.54zm1.15-4.96l-1.14-2.78l3.34.24zM9.63 18.93l2.77 1.15l-2.53 2.19z'/%3E%3C/svg%3E");-webkit-mask:var(--un-icon) no-repeat;mask:var(--un-icon) no-repeat;-webkit-mask-size:100% 100%;mask-size:100% 100%;background-color:currentColor;color:inherit;display:inline-block;vertical-align:middle;width:1em;height:1em;}
/* layer: typography */
:is([prose=""],.prose) :where(h1,h2,h3,h4,h5,h6):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-headings);font-weight:600;line-height:1.25;}:is([prose=""],.prose) :where(a):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);text-decoration:underline;font-weight:500;}:is([prose=""],.prose) :where(a code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-links);}:is([prose=""],.prose) :where(p,ul,ol,pre):not(:where(.not-prose,.not-prose *)){margin:1em 0;line-height:1.75;}:is([prose=""],.prose) :where(blockquote):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding-left:1em;font-style:italic;border-left:.25em solid var(--un-prose-borders);}:is([prose=""],.prose) :where(h1):not(:where(.not-prose,.not-prose *)){margin:1rem 0;font-size:2.25em;}:is([prose=""],.prose) :where(h2):not(:where(.not-prose,.not-prose *)){margin:1.75em 0 .5em;font-size:1.75em;}:is([prose=""],.prose) :where(h3):not(:where(.not-prose,.not-prose *)){margin:1.5em 0 .5em;font-size:1.375em;}:is([prose=""],.prose) :where(h4):not(:where(.not-prose,.not-prose *)){margin:1em 0;font-size:1.125em;}:is([prose=""],.prose) :where(img,video):not(:where(.not-prose,.not-prose *)){max-width:100%;}:is([prose=""],.prose) :where(figure,picture):not(:where(.not-prose,.not-prose *)){margin:1em 0;}:is([prose=""],.prose) :where(figcaption):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-captions);font-size:.875em;}:is([prose=""],.prose) :where(code):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);font-size:.875em;font-weight:600;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;}:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before,:is([prose=""],.prose) :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after{content:"\`";}:is([prose=""],.prose) :where(pre):not(:where(.not-prose,.not-prose *)){padding:1.25rem 1.5rem;overflow-x:auto;border-radius:.375rem;}:is([prose=""],.prose) :where(pre,code):not(:where(.not-prose,.not-prose *)){white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;hyphens:none;background:transparent;}:is([prose=""],.prose) :where(pre code):not(:where(.not-prose,.not-prose *)){font-weight:inherit;}:is([prose=""],.prose) :where(ol,ul):not(:where(.not-prose,.not-prose *)){padding-left:1.25em;}:is([prose=""],.prose) :where(ol):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ol[type="A"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="A" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-alpha;}:is([prose=""],.prose) :where(ol[type="a" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-alpha;}:is([prose=""],.prose) :where(ol[type="I"]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i"]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="I" s]):not(:where(.not-prose,.not-prose *)){list-style-type:upper-roman;}:is([prose=""],.prose) :where(ol[type="i" s]):not(:where(.not-prose,.not-prose *)){list-style-type:lower-roman;}:is([prose=""],.prose) :where(ol[type="1"]):not(:where(.not-prose,.not-prose *)){list-style-type:decimal;}:is([prose=""],.prose) :where(ul):not(:where(.not-prose,.not-prose *)){list-style-type:disc;}:is([prose=""],.prose) :where(ol > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(ul > li):not(:where(.not-prose,.not-prose *))::marker,:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *))::marker{color:var(--un-prose-lists);}:is([prose=""],.prose) :where(hr):not(:where(.not-prose,.not-prose *)){margin:2em 0;border:1px solid var(--un-prose-hr);}:is([prose=""],.prose) :where(table):not(:where(.not-prose,.not-prose *)){display:block;margin:1em 0;border-collapse:collapse;overflow-x:auto;}:is([prose=""],.prose) :where(tr):not(:where(.not-prose,.not-prose *)):nth-child(2n){background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(td,th):not(:where(.not-prose,.not-prose *)){border:1px solid var(--un-prose-borders);padding:.625em 1em;}:is([prose=""],.prose) :where(abbr):not(:where(.not-prose,.not-prose *)){cursor:help;}:is([prose=""],.prose) :where(kbd):not(:where(.not-prose,.not-prose *)){color:var(--un-prose-code);border:1px solid;padding:.25rem .5rem;font-size:.875em;border-radius:.25rem;}:is([prose=""],.prose) :where(details):not(:where(.not-prose,.not-prose *)){margin:1em 0;padding:1.25rem 1.5rem;background:var(--un-prose-bg-soft);}:is([prose=""],.prose) :where(summary):not(:where(.not-prose,.not-prose *)){cursor:pointer;font-weight:600;}
/* layer: default */
.static{position:static;}
.hidden,
[hidden=""]{display:none;}`
];
let ni = Zo;
ys([
  Ht("sl-menu")
], ni.prototype, "menu", 2);
ys([
  Ht('sl-menu-item[value="all"]')
], ni.prototype, "menuItemAll", 2);
ys([
  Ht(".tools__container")
], ni.prototype, "containerElement", 2);
ys([
  Ht(".tools__container > clock-it")
], ni.prototype, "clockElement", 2);
ys([
  Ht(".tools__container > theme-it")
], ni.prototype, "themeElement", 2);
ys([
  Ht(".tools__container > color-it")
], ni.prototype, "colorElement", 2);
ys([
  ut({ type: String, reflect: !0 })
], ni.prototype, "size", 2);
customElements && !customElements.get("tools-it") && customElements.define("tools-it", ni);
export {
  p_ as AdocPreviewIt,
  __ as AsciidocIt,
  ri as ClockIt,
  M1 as CodeIt,
  io as ColorIt,
  ph as HtmlPreviewIt,
  Ea as LoremIpsumIt,
  bh as MdPreviewIt,
  qr as PlaygroundIt,
  ei as PreviewIt,
  jU as SlButton,
  oo as ThemeIt,
  Mn as ToggleIt,
  ba as ToolbarIt,
  ni as ToolsIt
};
