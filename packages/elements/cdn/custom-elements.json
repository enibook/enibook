{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "dist/enibook-autoloader.js",
      "declarations": [
        {
          "kind": "function",
          "name": "discover",
          "parameters": [
            {
              "name": "root"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "discover",
          "declaration": {
            "name": "discover",
            "module": "dist/enibook-autoloader.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/enibook.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ClockIt",
          "declaration": {
            "name": "ClockIt",
            "module": "dist/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "CodeIt",
          "declaration": {
            "name": "CodeIt",
            "module": "dist/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "ColorIt",
          "declaration": {
            "name": "ColorIt",
            "module": "dist/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "FrameIt",
          "declaration": {
            "name": "FrameIt",
            "module": "dist/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "IconIt",
          "declaration": {
            "name": "IconIt",
            "module": "dist/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "LoremIpsumIt",
          "declaration": {
            "name": "LoremIpsumIt",
            "module": "dist/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "PlaygroundIt",
          "declaration": {
            "name": "PlaygroundIt",
            "module": "dist/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "PythonIt",
          "declaration": {
            "name": "PythonIt",
            "module": "dist/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "ThemeIt",
          "declaration": {
            "name": "ThemeIt",
            "module": "dist/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "ToggleIt",
          "declaration": {
            "name": "ToggleIt",
            "module": "dist/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "ToolbarIt",
          "declaration": {
            "name": "ToolbarIt",
            "module": "dist/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "ToolsIt",
          "declaration": {
            "name": "ToolsIt",
            "module": "dist/enibook.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/enibook-autoloader.js",
      "declarations": [
        {
          "kind": "function",
          "name": "discover",
          "parameters": [
            {
              "name": "root"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "discover",
          "declaration": {
            "name": "discover",
            "module": "cdn/enibook-autoloader.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/enibook.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ClockIt",
          "declaration": {
            "name": "ClockIt",
            "module": "cdn/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "CodeIt",
          "declaration": {
            "name": "CodeIt",
            "module": "cdn/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "ColorIt",
          "declaration": {
            "name": "ColorIt",
            "module": "cdn/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "FrameIt",
          "declaration": {
            "name": "FrameIt",
            "module": "cdn/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "IconIt",
          "declaration": {
            "name": "IconIt",
            "module": "cdn/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "LoremIpsumIt",
          "declaration": {
            "name": "LoremIpsumIt",
            "module": "cdn/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "PlaygroundIt",
          "declaration": {
            "name": "PlaygroundIt",
            "module": "cdn/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "PythonIt",
          "declaration": {
            "name": "PythonIt",
            "module": "cdn/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "ThemeIt",
          "declaration": {
            "name": "ThemeIt",
            "module": "cdn/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "ToggleIt",
          "declaration": {
            "name": "ToggleIt",
            "module": "cdn/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "ToolbarIt",
          "declaration": {
            "name": "ToolbarIt",
            "module": "cdn/enibook.js"
          }
        },
        {
          "kind": "js",
          "name": "ToolsIt",
          "declaration": {
            "name": "ToolsIt",
            "module": "cdn/enibook.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "scripts/build.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/enibook-autoloader.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "discover",
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "Element | ShadowRoot"
              }
            }
          ],
          "description": "Vérifie qu'un nœud ne contient pas d'éléments non définis et tente de les enregistrer."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "discover",
          "declaration": {
            "name": "discover",
            "module": "src/enibook-autoloader.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/enibook.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ClockIt",
          "declaration": {
            "name": "ClockIt",
            "module": "./elements/clock/clock.js"
          }
        },
        {
          "kind": "js",
          "name": "CodeIt",
          "declaration": {
            "name": "CodeIt",
            "module": "./elements/code/code.js"
          }
        },
        {
          "kind": "js",
          "name": "ColorIt",
          "declaration": {
            "name": "ColorIt",
            "module": "./elements/color/color.js"
          }
        },
        {
          "kind": "js",
          "name": "FrameIt",
          "declaration": {
            "name": "FrameIt",
            "module": "./elements/frame/frame.js"
          }
        },
        {
          "kind": "js",
          "name": "IconIt",
          "declaration": {
            "name": "IconIt",
            "module": "./elements/icon/icon.js"
          }
        },
        {
          "kind": "js",
          "name": "LoremIpsumIt",
          "declaration": {
            "name": "LoremIpsumIt",
            "module": "./elements/lorem-ipsum/lorem-ipsum.js"
          }
        },
        {
          "kind": "js",
          "name": "PlaygroundIt",
          "declaration": {
            "name": "PlaygroundIt",
            "module": "./elements/playground/playground.js"
          }
        },
        {
          "kind": "js",
          "name": "PythonIt",
          "declaration": {
            "name": "PythonIt",
            "module": "./elements/python/python.js"
          }
        },
        {
          "kind": "js",
          "name": "ThemeIt",
          "declaration": {
            "name": "ThemeIt",
            "module": "./elements/theme/theme.js"
          }
        },
        {
          "kind": "js",
          "name": "ToggleIt",
          "declaration": {
            "name": "ToggleIt",
            "module": "./elements/toggle/toggle.js"
          }
        },
        {
          "kind": "js",
          "name": "ToolbarIt",
          "declaration": {
            "name": "ToolbarIt",
            "module": "./elements/toolbar/toolbar.js"
          }
        },
        {
          "kind": "js",
          "name": "ToolsIt",
          "declaration": {
            "name": "ToolsIt",
            "module": "./elements/tools/tools.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.3IXWQSYW.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "frenchPhrases",
          "type": {
            "text": "object"
          },
          "default": "{\n  // @codemirror/view\n  \"Control character\": \"caract\\xE8re de contr\\xF4le\",\n  // @codemirror/commands\n  \"Selection deleted\": \"s\\xE9lection supprim\\xE9e\",\n  // @codemirror/language\n  \"Folded lines\": \"lignes pli\\xE9es\",\n  \"Unfolded lines\": \"lignes d\\xE9pli\\xE9es\",\n  to: \"\\xE0\",\n  \"folded code\": \"code pli\\xE9\",\n  unfold: \"d\\xE9plier\",\n  \"Fold line\": \"plier la ligne\",\n  \"Unfold line\": \"d\\xE9plier la ligne\",\n  // @codemirror/search\n  \"Go to line\": \"atteindre la ligne (ligne:colonne) \",\n  go: \"ok\",\n  Find: \"chercher\",\n  Replace: \"remplacer\",\n  next: \"suivant\",\n  previous: \"pr\\xE9c\\xE9dent\",\n  all: \"tout\",\n  \"match case\": \"respecter la casse\",\n  \"by word\": \"mot entier\",\n  regexp: \"expression r\\xE9guli\\xE8re\",\n  replace: \"remplacer\",\n  \"replace all\": \"remplacer tout\",\n  close: \"fermer\",\n  \"current match\": \"correspondance courante\",\n  \"replaced $ matches\": \"$ correspondances remplac\\xE9es\",\n  \"replaced match on line $\": \"correspondance remplac\\xE9e \\xE0 la ligne $\",\n  \"on line\": \"en ligne\",\n  // @codemirror/autocomplete\n  Completions: \"compl\\xE9tions\",\n  // @codemirror/lint\n  Diagnostics: \"diagnostics\",\n  \"No diagnostics\": \"pas de diagnostic\"\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "frenchPhrases",
          "declaration": {
            "name": "frenchPhrases",
            "module": "dist/chunks/chunk.3IXWQSYW.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.4P42N7UG.js",
      "declarations": [
        {
          "kind": "function",
          "name": "__decorateClass",
          "parameters": [
            {
              "name": "decorators"
            },
            {
              "name": "target"
            },
            {
              "name": "key"
            },
            {
              "name": "kind"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__superGet",
          "parameters": [
            {
              "name": "cls"
            },
            {
              "name": "obj"
            },
            {
              "name": "key"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__template",
          "parameters": [
            {
              "name": "cooked"
            },
            {
              "name": "raw"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "__decorateClass",
          "declaration": {
            "name": "__decorateClass",
            "module": "dist/chunks/chunk.4P42N7UG.js"
          }
        },
        {
          "kind": "js",
          "name": "__superGet",
          "declaration": {
            "name": "__superGet",
            "module": "dist/chunks/chunk.4P42N7UG.js"
          }
        },
        {
          "kind": "js",
          "name": "__template",
          "declaration": {
            "name": "__template",
            "module": "dist/chunks/chunk.4P42N7UG.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.5T7THYKX.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "IconIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.name = \"mdi-block-helper\";\n  }\n  firstUpdated(_changedProperties) {\n    if (!Object.keys(icons).includes(this.name)) {\n      console.log();\n      this.name = \"mdi-block-helper\";\n    }\n  }\n  render() {\n    return html`${svgIcon(this.name)}`;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IconIt",
          "declaration": {
            "name": "IconIt",
            "module": "dist/chunks/chunk.5T7THYKX.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.AIFGUIP2.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "icons",
          "type": {
            "text": "object"
          },
          "default": "{\n  \"language-asciidoctor\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M18.069 0H5.932A5.934 5.934 0 0 0 0 5.932v12.136A5.935 5.935 0 0 0 5.932 24h12.136A5.934 5.934 0 0 0 24 18.068V5.932A5.934 5.934 0 0 0 18.069 0m-7.361 15.404H8.81l-.005.013L7.2 19.282a.506.506 0 1 1-.934-.388l1.45-3.49H4.868a.506.506 0 1 1 0-1.012h5.84a.506.506 0 1 1 0 1.012m7.919 4.165a.506.506 0 0 1-.655-.29L12.621 6.232l-2.395 5.76h1.55a.506.506 0 1 1 0 1.012h-5.84a.506.506 0 1 1 0-1.011h3.195l.004-.012l3.022-7.269a.506.506 0 0 1 .457-.311a.506.506 0 0 1 .478.314l5.816 14.182a.506.506 0 0 1-.281.673\"/></svg>`,\n  \"language-prolog\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1.5em\" height=\"1.5em\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><text x=\"2\" y=\"15\" fill=\"currentColor\" style=\"font-weight:bold;font-size:inherit\">?-</text></svg>`,\n  \"mdi-account\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 4a4 4 0 0 1 4 4a4 4 0 0 1-4 4a4 4 0 0 1-4-4a4 4 0 0 1 4-4m0 10c4.42 0 8 1.79 8 4v2H4v-2c0-2.21 3.58-4 8-4Z\"/></svg>`,\n  \"mdi-alert-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 2L1 21h22M12 6l7.53 13H4.47M11 10v4h2v-4m-2 6v2h2v-2\"/></svg>`,\n  \"mdi-bell-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M10 21h4c0 1.1-.9 2-2 2s-2-.9-2-2m11-2v1H3v-1l2-2v-6c0-3.1 2-5.8 5-6.7V4c0-1.1.9-2 2-2s2 .9 2 2v.3c3 .9 5 3.6 5 6.7v6l2 2m-4-8c0-2.8-2.2-5-5-5s-5 2.2-5 5v7h10v-7Z\"/></svg>`,\n  \"mdi-bell-off-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M22.11 21.46L2.39 1.73L1.11 3l4.72 4.72A6.975 6.975 0 0 0 5 11v6l-2 2v1h15.11l2.73 2.73l1.27-1.27M7 18v-7c0-.61.11-1.21.34-1.77L16.11 18H7m3 3h4a2 2 0 0 1-2 2a2 2 0 0 1-2-2M8.29 5.09c.53-.34 1.11-.59 1.71-.8V4a2 2 0 0 1 2-2a2 2 0 0 1 2 2v.29c2.97.88 5 3.61 5 6.71v4.8l-2-2V11a5 5 0 0 0-5-5c-.78 0-1.55.2-2.24.56L8.29 5.09Z\"/></svg>`,\n  \"mdi-block-helper\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 0a12 12 0 0 1 12 12a12 12 0 0 1-12 12A12 12 0 0 1 0 12A12 12 0 0 1 12 0m0 2A10 10 0 0 0 2 12c0 2.4.85 4.6 2.26 6.33L18.33 4.26A9.984 9.984 0 0 0 12 2m0 20a10 10 0 0 0 10-10c0-2.4-.85-4.6-2.26-6.33L5.67 19.74A9.984 9.984 0 0 0 12 22\"/></svg>`,\n  \"mdi-calendar-clock-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M6 1v2H5c-1.11 0-2 .89-2 2v14a2 2 0 0 0 2 2h6.1c1.26 1.24 2.99 2 4.9 2c3.87 0 7-3.13 7-7c0-1.91-.76-3.64-2-4.9V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1M5 5h14v2H5m0 2h14v.67c-.91-.43-1.93-.67-3-.67c-3.87 0-7 3.13-7 7c0 1.07.24 2.09.67 3H5m11-7.85c2.68 0 4.85 2.17 4.85 4.85c0 2.68-2.17 4.85-4.85 4.85c-2.68 0-4.85-2.17-4.85-4.85c0-2.68 2.17-4.85 4.85-4.85M15 13v3.69l3.19 1.84l.75-1.3l-2.44-1.41V13Z\"/></svg>`,\n  \"mdi-check-circle-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10s10-4.5 10-10S17.5 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m4.59-12.42L10 14.17l-2.59-2.58L6 13l4 4l8-8l-1.41-1.42Z\"/></svg>`,\n  \"mdi-code-json\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 3h2v2H5v5a2 2 0 0 1-2 2a2 2 0 0 1 2 2v5h2v2H5c-1.07-.27-2-.9-2-2v-4a2 2 0 0 0-2-2H0v-2h1a2 2 0 0 0 2-2V5a2 2 0 0 1 2-2m14 0a2 2 0 0 1 2 2v4a2 2 0 0 0 2 2h1v2h-1a2 2 0 0 0-2 2v4a2 2 0 0 1-2 2h-2v-2h2v-5a2 2 0 0 1 2-2a2 2 0 0 1-2-2V5h-2V3h2m-7 12a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m-4 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m8 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1Z\"/></svg>`,\n  \"mdi-cog\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64z\"/></svg>`,\n  \"mdi-content-copy\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19 21H8V7h11m0-2H8a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2m-3-4H4a2 2 0 0 0-2 2v14h2V3h12V1Z\"/></svg>`,\n  \"mdi-database\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 3C7.58 3 4 4.79 4 7s3.58 4 8 4s8-1.79 8-4s-3.58-4-8-4M4 9v3c0 2.21 3.58 4 8 4s8-1.79 8-4V9c0 2.21-3.58 4-8 4s-8-1.79-8-4m0 5v3c0 2.21 3.58 4 8 4s8-1.79 8-4v-3c0 2.21-3.58 4-8 4s-8-1.79-8-4Z\"/></svg>`,\n  \"mdi-dots-horizontal\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M16 12a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2m-6 0a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2m-6 0a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2Z\"/></svg>`,\n  \"mdi-dots-vertical\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 16a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2m0-6a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2m0-6a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2Z\"/></svg>`,\n  \"mdi-drag-vertical\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M9 3h2v2H9V3m4 0h2v2h-2V3M9 7h2v2H9V7m4 0h2v2h-2V7m-4 4h2v2H9v-2m4 0h2v2h-2v-2m-4 4h2v2H9v-2m4 0h2v2h-2v-2m-4 4h2v2H9v-2m4 0h2v2h-2v-2Z\"/></svg>`,\n  \"mdi-find-replace\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05A6.976 6.976 0 0 0 11 4c-3.53 0-6.43 2.61-6.92 6H6.1A5 5 0 0 1 11 6m5.64 9.14A6.89 6.89 0 0 0 17.92 12H15.9a5 5 0 0 1-4.9 4c-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05A6.976 6.976 0 0 0 11 18c1.55 0 3-.5 4.14-1.36L20 21.5l1.5-1.5l-4.86-4.86Z\"/></svg>`,\n  \"mdi-format-indent-decrease\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 13h10v-2H11m0-2h10V7H11M3 3v2h18V3M3 21h18v-2H3m0-7l4 4V8m4 9h10v-2H11v2Z\"/></svg>`,\n  \"mdi-format-indent-increase\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 13h10v-2H11m0-2h10V7H11M3 3v2h18V3M11 17h10v-2H11M3 8v8l4-4m-4 9h18v-2H3v2Z\"/></svg>`,\n  \"mdi-format-list-group\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 5v14h2v2H3V3h4v2H5m15 2H7v2h13V7m0 4H7v2h13v-2m0 4H7v2h13v-2Z\"/></svg>`,\n  \"mdi-format-list-numbered\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M7 13v-2h14v2H7m0 6v-2h14v2H7M7 7V5h14v2H7M3 8V5H2V4h2v4H3m-1 9v-1h3v4H2v-1h2v-.5H3v-1h1V17H2m2.25-7a.75.75 0 0 1 .75.75c0 .2-.08.39-.21.52L3.12 13H5v1H2v-.92L4 11H2v-1h2.25Z\"/></svg>`,\n  \"mdi-format-text\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m18.5 4l1.16 4.35l-.96.26c-.45-.87-.91-1.74-1.44-2.18C16.73 6 16.11 6 15.5 6H13v10.5c0 .5 0 1 .33 1.25c.34.25 1 .25 1.67.25v1H9v-1c.67 0 1.33 0 1.67-.25c.33-.25.33-.75.33-1.25V6H8.5c-.61 0-1.23 0-1.76.43c-.53.44-.99 1.31-1.44 2.18l-.96-.26L5.5 4h13Z\"/></svg>`,\n  \"mdi-fullscreen\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 5h5v2H7v3H5V5m9 0h5v5h-2V7h-3V5m3 9h2v5h-5v-2h3v-3m-7 3v2H5v-5h2v3h3Z\"/></svg>`,\n  \"mdi-fullscreen-exit\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M14 14h5v2h-3v3h-2v-5m-9 0h5v5H8v-3H5v-2m3-9h2v5H5V8h3V5m11 3v2h-5V5h2v3h3Z\"/></svg>`,\n  \"mdi-github\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33c.85 0 1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2\"/></svg>`,\n  \"mdi-hide-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M2 5.27L3.28 4L20 20.72L18.73 22l-3.08-3.08c-1.15.38-2.37.58-3.65.58c-5 0-9.27-3.11-11-7.5c.69-1.76 1.79-3.31 3.19-4.54zM12 9a3 3 0 0 1 3 3a3 3 0 0 1-.17 1L11 9.17A3 3 0 0 1 12 9m0-4.5c5 0 9.27 3.11 11 7.5a11.79 11.79 0 0 1-4 5.19l-1.42-1.43A9.862 9.862 0 0 0 20.82 12A9.821 9.821 0 0 0 12 6.5c-1.09 0-2.16.18-3.16.5L7.3 5.47c1.44-.62 3.03-.97 4.7-.97M3.18 12A9.821 9.821 0 0 0 12 17.5c.69 0 1.37-.07 2-.21L11.72 15A3.064 3.064 0 0 1 9 12.28L5.6 8.87c-.99.85-1.82 1.91-2.42 3.13\"/></svg>`,\n  \"mdi-home\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M10 20v-6h4v6h5v-8h3L12 3L2 12h3v8z\"/></svg>`,\n  \"mdi-information-variant-circle-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12.3 7.29c.2-.18.44-.29.7-.29c.27 0 .5.11.71.29c.19.21.29.45.29.71c0 .27-.1.5-.29.71c-.21.19-.44.29-.71.29c-.26 0-.5-.1-.7-.29c-.19-.21-.3-.44-.3-.71c0-.26.11-.5.3-.71m-2.5 4.68s2.17-1.72 2.96-1.79c.74-.06.59.79.52 1.23l-.01.06c-.14.53-.31 1.17-.48 1.78c-.38 1.39-.75 2.75-.66 3c.1.34.72-.09 1.17-.39c.06-.04.11-.08.16-.11c0 0 .08-.08.16.03c.02.03.04.06.06.08c.09.14.14.19.02.27l-.04.02c-.22.15-1.16.81-1.54 1.05c-.41.27-1.98 1.17-1.74-.58c.21-1.23.49-2.29.71-3.12c.41-1.5.59-2.18-.33-1.59c-.37.22-.59.36-.72.45c-.11.08-.12.08-.19-.05l-.03-.06l-.05-.08c-.07-.1-.07-.11.03-.2M22 12c0 5.5-4.5 10-10 10S2 17.5 2 12S6.5 2 12 2s10 4.5 10 10m-2 0c0-4.42-3.58-8-8-8s-8 3.58-8 8s3.58 8 8 8s8-3.58 8-8Z\"/></svg>`,\n  \"mdi-keyboard\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19 10h-2V8h2m0 5h-2v-2h2m-3-1h-2V8h2m0 5h-2v-2h2m0 6H8v-2h8m-9-5H5V8h2m0 5H5v-2h2m1 0h2v2H8m0-5h2v2H8m3 1h2v2h-2m0-5h2v2h-2m9-5H4c-1.11 0-2 .89-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z\"/></svg>`,\n  \"mdi-keyboard-off-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m1 4.27l1.47 1.47A1.9 1.9 0 0 0 2 7v10a2 2 0 0 0 2 2h11.73l3 3L20 20.72L2.28 3L1 4.27M4 17V7.27l1 1V10h1.73L8 11.27V13h1.73l1 1H8v2h4.73l1 1H4m1-6h2v2H5v-2m12 0h2v2h-2v-2m2-1h-2V8h2v2m-5 1h2v2h-1.17l-.83-.83V11m-1-1h-1.17L11 9.17V8h2v2m9-3v10c0 .86-.55 1.58-1.3 1.87L18.83 17H20V7H8.83l-2-2H20a2 2 0 0 1 2 2m-6 3h-2V8h2v2Z\"/></svg>`,\n  \"mdi-keyboard-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M4 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H4m0 2h16v10H4V7m1 1v2h2V8H5m3 0v2h2V8H8m3 0v2h2V8h-2m3 0v2h2V8h-2m3 0v2h2V8h-2M5 11v2h2v-2H5m3 0v2h2v-2H8m3 0v2h2v-2h-2m3 0v2h2v-2h-2m3 0v2h2v-2h-2m-9 3v2h8v-2H8Z\"/></svg>`,\n  \"mdi-language-asciidoc\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 496 512\"><path fill=\"currentColor\" d=\"M21.771 336.508c-23.15-.464-23.15 34.5 0 34.035h95.833l-48.817 117.45c-9.029 21.083 22.85 34.34 31.432 13.07l54.011-130.52h64.094c23.15.464 23.15-34.5 0-34.035zM282.088.01c-6.295.225-12.345 4.023-14.986 10.678L165.16 255.705H17.367c-23.155-.47-23.155 34.5 0 34.031h236.916c23.155.47 23.155-34.5 0-34.03h-52.197L282.69 61.817l180.114 439.174c8.366 21.573 40.683 8.311 31.488-12.922L298.551 10.77C294.925 3.133 288.383-.215 282.088.01z\"/></svg>`,\n  \"mdi-language-css\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m5 3l-.65 3.34h13.59L17.5 8.5H3.92l-.66 3.33h13.59l-.76 3.81l-5.48 1.81l-4.75-1.81l.33-1.64H2.85l-.79 4l7.85 3l9.05-3l1.2-6.03l.24-1.21L21.94 3H5Z\"/></svg>`,\n  \"mdi-language-css3\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m5 3l-.65 3.34h13.59L17.5 8.5H3.92l-.66 3.33h13.59l-.76 3.81l-5.48 1.81l-4.75-1.81l.33-1.64H2.85l-.79 4l7.85 3l9.05-3l1.2-6.03l.24-1.21L21.94 3H5Z\"/></svg>`,\n  \"mdi-language-html\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m12 17.56l4.07-1.13l.55-6.1H9.38L9.2 8.3h7.6l.2-1.99H7l.56 6.01h6.89l-.23 2.58l-2.22.6l-2.22-.6l-.14-1.66h-2l.29 3.19L12 17.56M4.07 3h15.86L18.5 19.2L12 21l-6.5-1.8L4.07 3Z\"/></svg>`,\n  \"mdi-language-html5\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m12 17.56l4.07-1.13l.55-6.1H9.38L9.2 8.3h7.6l.2-1.99H7l.56 6.01h6.89l-.23 2.58l-2.22.6l-2.22-.6l-.14-1.66h-2l.29 3.19L12 17.56M4.07 3h15.86L18.5 19.2L12 21l-6.5-1.8L4.07 3Z\"/></svg>`,\n  \"mdi-language-javascript\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 3h18v18H3V3m4.73 15.04c.4.85 1.19 1.55 2.54 1.55c1.5 0 2.53-.8 2.53-2.55v-5.78h-1.7V17c0 .86-.35 1.08-.9 1.08c-.58 0-.82-.4-1.09-.87l-1.38.83m5.98-.18c.5.98 1.51 1.73 3.09 1.73c1.6 0 2.8-.83 2.8-2.36c0-1.41-.81-2.04-2.25-2.66l-.42-.18c-.73-.31-1.04-.52-1.04-1.02c0-.41.31-.73.81-.73c.48 0 .8.21 1.09.73l1.31-.87c-.55-.96-1.33-1.33-2.4-1.33c-1.51 0-2.48.96-2.48 2.23c0 1.38.81 2.03 2.03 2.55l.42.18c.78.34 1.24.55 1.24 1.13c0 .48-.45.83-1.15.83c-.83 0-1.31-.43-1.67-1.03l-1.38.8Z\"/></svg>`,\n  \"mdi-language-json\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 3h2v2H5v5a2 2 0 0 1-2 2a2 2 0 0 1 2 2v5h2v2H5c-1.07-.27-2-.9-2-2v-4a2 2 0 0 0-2-2H0v-2h1a2 2 0 0 0 2-2V5a2 2 0 0 1 2-2m14 0a2 2 0 0 1 2 2v4a2 2 0 0 0 2 2h1v2h-1a2 2 0 0 0-2 2v4a2 2 0 0 1-2 2h-2v-2h2v-5a2 2 0 0 1 2-2a2 2 0 0 1-2-2V5h-2V3h2m-7 12a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m-4 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m8 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1Z\"/></svg>`,\n  \"mdi-language-markdown\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M20.56 18H3.44C2.65 18 2 17.37 2 16.59V7.41C2 6.63 2.65 6 3.44 6h17.12c.79 0 1.44.63 1.44 1.41v9.18c0 .78-.65 1.41-1.44 1.41M6.81 15.19v-3.66l1.92 2.35l1.92-2.35v3.66h1.93V8.81h-1.93l-1.92 2.35l-1.92-2.35H4.89v6.38h1.92M19.69 12h-1.92V8.81h-1.92V12h-1.93l2.89 3.28L19.69 12Z\"/></svg>`,\n  \"mdi-language-prolog\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><text x=\"2\" y=\"15\" fill=\"currentColor\" style=\"font-weight:bold;font-size:inherit\">?-</text></svg>`,\n  \"mdi-language-python\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\"viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19.14 7.5A2.86 2.86 0 0 1 22 10.36v3.78A2.86 2.86 0 0 1 19.14 17H12c0 .39.32.96.71.96H17v1.68a2.86 2.86 0 0 1-2.86 2.86H9.86A2.86 2.86 0 0 1 7 19.64v-3.75a2.85 2.85 0 0 1 2.86-2.85h5.25a2.85 2.85 0 0 0 2.85-2.86V7.5h1.18m-4.28 11.79c-.4 0-.72.3-.72.89c0 .59.32.71.72.71a.71.71 0 0 0 .71-.71c0-.59-.32-.89-.71-.89m-10-1.79A2.86 2.86 0 0 1 2 14.64v-3.78A2.86 2.86 0 0 1 4.86 8H12c0-.39-.32-.96-.71-.96H7V5.36A2.86 2.86 0 0 1 9.86 2.5h4.28A2.86 2.86 0 0 1 17 5.36v3.75a2.85 2.85 0 0 1-2.86 2.85H8.89a2.85 2.85 0 0 0-2.85 2.86v2.68H4.86M9.14 5.71c.4 0 .72-.3.72-.89c0-.59-.32-.71-.72-.71c-.39 0-.71.12-.71.71s.32.89.71.89Z\"/></svg>`,\n  \"mdi-language-sql\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 3C7.58 3 4 4.79 4 7s3.58 4 8 4s8-1.79 8-4s-3.58-4-8-4M4 9v3c0 2.21 3.58 4 8 4s8-1.79 8-4V9c0 2.21-3.58 4-8 4s-8-1.79-8-4m0 5v3c0 2.21 3.58 4 8 4s8-1.79 8-4v-3c0 2.21-3.58 4-8 4s-8-1.79-8-4Z\"/></svg>`,\n  \"mdi-language-text\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m18.5 4l1.16 4.35l-.96.26c-.45-.87-.91-1.74-1.44-2.18C16.73 6 16.11 6 15.5 6H13v10.5c0 .5 0 1 .33 1.25c.34.25 1 .25 1.67.25v1H9v-1c.67 0 1.33 0 1.67-.25c.33-.25.33-.75.33-1.25V6H8.5c-.61 0-1.23 0-1.76.43c-.53.44-.99 1.31-1.44 2.18l-.96-.26L5.5 4h13Z\"/></svg>`,\n  \"mdi-language-typescript\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 3h18v18H3V3m10.71 14.86c.5.98 1.51 1.73 3.09 1.73c1.6 0 2.8-.83 2.8-2.36c0-1.41-.81-2.04-2.25-2.66l-.42-.18c-.73-.31-1.04-.52-1.04-1.02c0-.41.31-.73.81-.73c.48 0 .8.21 1.09.73l1.31-.87c-.55-.96-1.33-1.33-2.4-1.33c-1.51 0-2.48.96-2.48 2.23c0 1.38.81 2.03 2.03 2.55l.42.18c.78.34 1.24.55 1.24 1.13c0 .48-.45.83-1.15.83c-.83 0-1.31-.43-1.67-1.03l-1.38.8M13 11.25H8v1.5h1.5V20h1.75v-7.25H13v-1.5Z\"/></svg>`,\n  \"mdi-menu-close\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 6h10v2H3V6m0 10h10v2H3v-2m0-5h12v2H3v-2m13-4l-1.42 1.39L18.14 12l-3.56 3.61L16 17l5-5l-5-5Z\"/></svg>`,\n  \"mdi-menu-open\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M21 15.61L19.59 17l-5.01-5l5.01-5L21 8.39L17.44 12L21 15.61M3 6h13v2H3V6m0 7v-2h10v2H3m0 5v-2h13v2H3Z\"/></svg>`,\n  \"mdi-monitor-eye\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 4v12h18V4zm0-2h18a2 2 0 0 1 2 2v12c0 .53-.21 1.04-.59 1.41c-.37.38-.88.59-1.41.59h-7v2h2v2H8v-2h2v-2H3c-.53 0-1.04-.21-1.41-.59C1.21 17.04 1 16.53 1 16V4c0-1.11.89-2 2-2m7.84 6.93c.31-.3.73-.48 1.16-.48c.43.01.85.18 1.16.49c.3.3.48.72.48 1.15c0 .44-.18.85-.48 1.16c-.31.31-.73.48-1.16.48c-.43 0-.85-.18-1.16-.48c-.3-.31-.48-.72-.48-1.16c0-.43.18-.85.48-1.16M10.07 12a2.679 2.679 0 0 0 3.86 0c.51-.5.8-1.19.8-1.91s-.29-1.42-.8-1.93s-1.21-.8-1.93-.8s-1.42.29-1.93.8s-.8 1.21-.8 1.93s.29 1.41.8 1.91M6 10.09A6.45 6.45 0 0 1 12 6c2.73 0 5.06 1.7 6 4.09a6.421 6.421 0 0 1-6 4.09c-2.73 0-5.06-1.68-6-4.09\"/></svg>`,\n  \"mdi-mouse\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 1.07C7.05 1.56 4 4.92 4 9h7m-7 6a8 8 0 0 0 8 8a8 8 0 0 0 8-8v-4H4m9-9.93V9h7c0-4.08-3.06-7.44-7-7.93Z\"/></svg>`,\n  \"mdi-mouse-off\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M2 5.27L3.28 4L20 20.72L18.73 22l-1.23-1.21A7.892 7.892 0 0 1 12 23a8 8 0 0 1-8-8v-4h3.73l-2-2H4c0-.54.05-1.07.15-1.58L2 5.27m9-4.2V9h-.18L5.79 3.96A7.95 7.95 0 0 1 11 1.07M20 11v4c0 .95-.17 1.86-.47 2.71L12.82 11H20m-7-9.93c3.94.49 7 3.85 7 7.93h-7V1.07Z\"/></svg>`,\n  \"mdi-palette-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 22A10 10 0 0 1 2 12A10 10 0 0 1 12 2c5.5 0 10 4 10 9a6 6 0 0 1-6 6h-1.8c-.3 0-.5.2-.5.5c0 .1.1.2.1.3c.4.5.6 1.1.6 1.7c.1 1.4-1 2.5-2.4 2.5m0-18a8 8 0 0 0-8 8a8 8 0 0 0 8 8c.3 0 .5-.2.5-.5c0-.2-.1-.3-.1-.4c-.4-.5-.6-1-.6-1.6c0-1.4 1.1-2.5 2.5-2.5H16a4 4 0 0 0 4-4c0-3.9-3.6-7-8-7m-5.5 6c.8 0 1.5.7 1.5 1.5S7.3 13 6.5 13S5 12.3 5 11.5S5.7 10 6.5 10m3-4c.8 0 1.5.7 1.5 1.5S10.3 9 9.5 9S8 8.3 8 7.5S8.7 6 9.5 6m5 0c.8 0 1.5.7 1.5 1.5S15.3 9 14.5 9S13 8.3 13 7.5S13.7 6 14.5 6m3 4c.8 0 1.5.7 1.5 1.5s-.7 1.5-1.5 1.5s-1.5-.7-1.5-1.5s.7-1.5 1.5-1.5\"/></svg>`,\n  \"mdi-play\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M8 5.14v14l11-7l-11-7Z\"/></svg>`,\n  \"mdi-redo\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M18.4 10.6C16.55 9 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16a8.002 8.002 0 0 1 7.6-5.5c1.95 0 3.73.72 5.12 1.88L13 16h9V7l-3.6 3.6Z\"/></svg>`,\n  \"mdi-refresh\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><g transform=\"translate(24 0) scale(-1 1)\"><path fill=\"currentColor\" d=\"M17.65 6.35A7.958 7.958 0 0 0 12 4a8 8 0 0 0-8 8a8 8 0 0 0 8 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18a6 6 0 0 1-6-6a6 6 0 0 1 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35Z\"/></g></svg>`,\n  \"mdi-show-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 9a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0-4.5c5 0 9.27 3.11 11 7.5c-1.73 4.39-6 7.5-11 7.5S2.73 16.39 1 12c1.73-4.39 6-7.5 11-7.5M3.18 12a9.821 9.821 0 0 0 17.64 0a9.821 9.821 0 0 0-17.64 0\"/></svg>`,\n  \"mdi-square-edit-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 3c-1.11 0-2 .89-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7h-2v7H5V5h7V3H5m12.78 1a.69.69 0 0 0-.48.2l-1.22 1.21l2.5 2.5L19.8 6.7c.26-.26.26-.7 0-.95L18.25 4.2c-.13-.13-.3-.2-.47-.2m-2.41 2.12L8 13.5V16h2.5l7.37-7.38l-2.5-2.5Z\"/></svg>`,\n  \"mdi-square-rounded\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M8 3h8c2.76 0 5 2.24 5 5v8c0 2.76-2.24 5-5 5H8c-2.76 0-5-2.24-5-5V8c0-2.76 2.24-5 5-5\"/></svg>`,\n  \"mdi-text-search\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m19.31 18.9l3.08 3.1L21 23.39l-3.12-3.07c-.69.43-1.51.68-2.38.68c-2.5 0-4.5-2-4.5-4.5s2-4.5 4.5-4.5s4.5 2 4.5 4.5c0 .88-.25 1.71-.69 2.4m-3.81.1a2.5 2.5 0 0 0 0-5a2.5 2.5 0 0 0 0 5M21 4v2H3V4h18M3 16v-2h6v2H3m0-5V9h18v2h-2.03c-1.01-.63-2.2-1-3.47-1s-2.46.37-3.47 1H3Z\"/></svg>`,\n  \"mdi-theme-light-dark\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M7.5 2c-1.79 1.15-3 3.18-3 5.5s1.21 4.35 3.03 5.5C4.46 13 2 10.54 2 7.5A5.5 5.5 0 0 1 7.5 2m11.57 1.5l1.43 1.43L4.93 20.5L3.5 19.07L19.07 3.5m-6.18 2.43L11.41 5L9.97 6l.42-1.7L9 3.24l1.75-.12l.58-1.65L12 3.1l1.73.03l-1.35 1.13l.51 1.67m-3.3 3.61l-1.16-.73l-1.12.78l.34-1.32l-1.09-.83l1.36-.09l.45-1.29l.51 1.27l1.36.03l-1.05.87l.4 1.31M19 13.5a5.5 5.5 0 0 1-5.5 5.5c-1.22 0-2.35-.4-3.26-1.07l7.69-7.69c.67.91 1.07 2.04 1.07 3.26m-4.4 6.58l2.77-1.15l-.24 3.35l-2.53-2.2m4.33-2.7l1.15-2.77l2.2 2.54l-3.35.23m1.15-4.96l-1.14-2.78l3.34.24l-2.2 2.54M9.63 18.93l2.77 1.15l-2.53 2.19l-.24-3.34Z\"/></svg>`,\n  \"mdi-tools\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m21.71 20.29l-1.42 1.42a1 1 0 0 1-1.41 0L7 9.85A3.81 3.81 0 0 1 6 10a4 4 0 0 1-3.78-5.3l2.54 2.54l.53-.53l1.42-1.42l.53-.53L4.7 2.22A4 4 0 0 1 10 6a3.81 3.81 0 0 1-.15 1l11.86 11.88a1 1 0 0 1 0 1.41M2.29 18.88a1 1 0 0 0 0 1.41l1.42 1.42a1 1 0 0 0 1.41 0l5.47-5.46l-2.83-2.83M20 2l-4 2v2l-2.17 2.17l2 2L18 8h2l2-4Z\"/></svg>`,\n  \"mdi-typescript\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 3h18v18H3V3m10.71 14.86c.5.98 1.51 1.73 3.09 1.73c1.6 0 2.8-.83 2.8-2.36c0-1.41-.81-2.04-2.25-2.66l-.42-.18c-.73-.31-1.04-.52-1.04-1.02c0-.41.31-.73.81-.73c.48 0 .8.21 1.09.73l1.31-.87c-.55-.96-1.33-1.33-2.4-1.33c-1.51 0-2.48.96-2.48 2.23c0 1.38.81 2.03 2.03 2.55l.42.18c.78.34 1.24.55 1.24 1.13c0 .48-.45.83-1.15.83c-.83 0-1.31-.43-1.67-1.03l-1.38.8M13 11.25H8v1.5h1.5V20h1.75v-7.25H13v-1.5Z\"/></svg>`,\n  \"mdi-undo\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12.5 8c-2.65 0-5.05 1-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88c3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8Z\"/></svg>`,\n  \"mdi-weather-night\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m17.75 4.09l-2.53 1.94l.91 3.06l-2.63-1.81l-2.63 1.81l.91-3.06l-2.53-1.94L12.44 4l1.06-3l1.06 3zm3.5 6.91l-1.64 1.25l.59 1.98l-1.7-1.17l-1.7 1.17l.59-1.98L15.75 11l2.06-.05L18.5 9l.69 1.95zm-2.28 4.95c.83-.08 1.72 1.1 1.19 1.85c-.32.45-.66.87-1.08 1.27C15.17 23 8.84 23 4.94 19.07c-3.91-3.9-3.91-10.24 0-14.14c.4-.4.82-.76 1.27-1.08c.75-.53 1.93.36 1.85 1.19c-.27 2.86.69 5.83 2.89 8.02a9.96 9.96 0 0 0 8.02 2.89m-1.64 2.02a12.08 12.08 0 0 1-7.8-3.47c-2.17-2.19-3.33-5-3.49-7.82c-2.81 3.14-2.7 7.96.31 10.98c3.02 3.01 7.84 3.12 10.98.31\"/></svg>`,\n  \"mdi-white-balance-sunny\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m3.55 19.09l1.41 1.41l1.8-1.79l-1.42-1.42M12 6c-3.31 0-6 2.69-6 6s2.69 6 6 6s6-2.69 6-6c0-3.32-2.69-6-6-6m8 7h3v-2h-3m-2.76 7.71l1.8 1.79l1.41-1.41l-1.79-1.8M20.45 5l-1.41-1.4l-1.8 1.79l1.42 1.42M13 1h-2v3h2M6.76 5.39L4.96 3.6L3.55 5l1.79 1.81zM1 13h3v-2H1m12 9h-2v3h2\"/></svg>`\n}"
        },
        {
          "kind": "function",
          "name": "svgIcon",
          "parameters": [
            {
              "name": "icon"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "icons",
          "declaration": {
            "name": "icons",
            "module": "dist/chunks/chunk.AIFGUIP2.js"
          }
        },
        {
          "kind": "js",
          "name": "svgIcon",
          "declaration": {
            "name": "svgIcon",
            "module": "dist/chunks/chunk.AIFGUIP2.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.APOOKVJK.js",
      "declarations": [
        {
          "kind": "function",
          "name": "dedentText",
          "parameters": [
            {
              "name": "text"
            }
          ]
        },
        {
          "kind": "function",
          "name": "indentString",
          "parameters": [
            {
              "name": "indentSize",
              "default": "2"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dedentText",
          "declaration": {
            "name": "dedentText",
            "module": "dist/chunks/chunk.APOOKVJK.js"
          }
        },
        {
          "kind": "js",
          "name": "indentString",
          "declaration": {
            "name": "indentString",
            "module": "dist/chunks/chunk.APOOKVJK.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.BCBCK32R.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "darkTheme"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "darkTheme",
          "declaration": {
            "name": "darkTheme",
            "module": "dist/chunks/chunk.BCBCK32R.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.CCRXPRW6.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "AnswerForm",
          "default": "_AnswerForm"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnswerForm",
          "declaration": {
            "name": "AnswerForm",
            "module": "dist/chunks/chunk.CCRXPRW6.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.CO4X42B5.js",
      "declarations": [
        {
          "kind": "function",
          "name": "system"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "system",
          "declaration": {
            "name": "system",
            "module": "dist/chunks/chunk.CO4X42B5.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.CWIG22PC.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultOptions",
          "type": {
            "text": "object"
          },
          "default": "{\n  head: \"\",\n  style: \"\",\n  header: \"\",\n  main: \"\",\n  footer: \"\",\n  lang: navigator.language,\n  theme: \"light\",\n  title: \"IFrame\"\n}"
        },
        {
          "kind": "function",
          "name": "templateHTML",
          "parameters": [
            {
              "name": "options",
              "default": "{}"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultOptions",
          "declaration": {
            "name": "defaultOptions",
            "module": "dist/chunks/chunk.CWIG22PC.js"
          }
        },
        {
          "kind": "js",
          "name": "templateHTML",
          "declaration": {
            "name": "templateHTML",
            "module": "dist/chunks/chunk.CWIG22PC.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.DJWTJVBH.js",
      "declarations": [
        {
          "kind": "function",
          "name": "createTheme",
          "parameters": [
            {
              "name": "{ variant, settings, styles }"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createTheme",
          "declaration": {
            "name": "createTheme",
            "module": "dist/chunks/chunk.DJWTJVBH.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.DK2BFNDL.js",
      "declarations": [
        {
          "kind": "function",
          "name": "requestIncludeFile",
          "parameters": [
            {
              "name": "src"
            },
            {
              "name": "mode",
              "default": "\"cors\""
            }
          ]
        },
        {
          "kind": "function",
          "name": "fetchContent",
          "parameters": [
            {
              "name": "src"
            }
          ]
        },
        {
          "kind": "function",
          "name": "fetchSrc",
          "parameters": [
            {
              "name": "src"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requestIncludeFile",
          "declaration": {
            "name": "requestIncludeFile",
            "module": "dist/chunks/chunk.DK2BFNDL.js"
          }
        },
        {
          "kind": "js",
          "name": "fetchContent",
          "declaration": {
            "name": "fetchContent",
            "module": "dist/chunks/chunk.DK2BFNDL.js"
          }
        },
        {
          "kind": "js",
          "name": "fetchSrc",
          "declaration": {
            "name": "fetchSrc",
            "module": "dist/chunks/chunk.DK2BFNDL.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.DS6PWY4A.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "lightTheme"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "lightTheme",
          "declaration": {
            "name": "lightTheme",
            "module": "dist/chunks/chunk.DS6PWY4A.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.ESPXHCBJ.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PlaygroundIt",
          "default": "class extends AnswerForm {\n  constructor() {\n    super(...arguments);\n    this.initialCode = \"\";\n    this.initialCompiledCode = \"\";\n    this.initialHead = \"\";\n    this.initialHeader = \"\";\n    this.initialMain = \"\";\n    this.initialFooter = \"\";\n    this.full = false;\n    this.language = \"text\";\n    this.readOnly = false;\n    this.codeFilename = \"\";\n    this.prefixFilename = \"\";\n    this.suffixFilename = \"\";\n    this.mainFilename = \"\";\n    this.headFilename = \"\";\n    this.headerFilename = \"\";\n    this.footerFilename = \"\";\n  }\n  compile(input) {\n    return input;\n  }\n  createEditor() {\n    const initialCode = `<script type=\"enibook/src\">${this.initialCode}<\\/script>`;\n    const editor = new CodeIt();\n    editor.classList.add(\"playground__editor__script\");\n    editor.language = this.language;\n    editor.readOnly = this.readOnly;\n    editor.lineNumbers = true;\n    editor.innerHTML = initialCode;\n    return editor;\n  }\n  createFrame() {\n    const initialHead = `<script type=\"enibook/head\">${this.initialHead}<\\/script>`;\n    const initialHeader = `<script type=\"enibook/header\">${this.initialHeader}<\\/script>`;\n    const initialMain = `<script type=\"enibook/main\">${this.initialCompiledCode}<\\/script>`;\n    const initialFooter = `<script type=\"enibook/footer\">${this.initialFooter}<\\/script>`;\n    const frame = new FrameIt();\n    frame.classList.add(\"playground__frame\");\n    frame.border = true;\n    frame.innerHTML = `\n      ${initialHead}\n      ${initialHeader}\n      ${initialMain}\n      ${initialFooter}\n    `;\n    return frame;\n  }\n  createListener() {\n    this.addEventListener(\"sl-resize\", (event) => {\n      const ev = event;\n      const entries = ev.detail.entries;\n      if (entries.length) {\n        const height = entries[0].contentRect.height;\n        this.frameElement.style.height = `${height}px`;\n        this.frameElement.resizeIFrameHeight(height);\n      }\n    });\n    this.addEventListener(\"editor-change-it\", () => {\n      this.frame.srcDoc = this.frame.getTemplate({\n        head: this.initialHead,\n        header: this.initialHeader,\n        main: this.compile(this.editor.value),\n        footer: this.initialFooter\n      });\n    });\n  }\n  async firstUpdated(_changedProperties) {\n    this.initialHead += await this.getCode(this.headFilename, \"head\");\n    this.initialHeader += await this.getCode(this.headerFilename, \"header\");\n    this.initialFooter += await this.getCode(this.footerFilename, \"footer\");\n    this.initialMain += await this.getCode(this.mainFilename, \"main\");\n    this.initialCode += await this.getCode(this.codeFilename, \"src\");\n    this.initialCompiledCode += this.compile(this.initialCode);\n    console.log(this.initialCompiledCode);\n    this.editor = this.createEditor();\n    this.frame = this.createFrame();\n    this.scriptEditorElement.appendChild(this.editor);\n    this.baseElement.appendChild(this.frame);\n    this.createListener();\n  }\n  get answer() {\n    throw new Error(\"Method not implemented.\");\n  }\n  render() {\n    return html(_a || (_a = __template(['\\n      <sl-tab-group>\\n        <sl-tab slot=\"nav\" panel=\"script\">Script ', '</sl-tab>\\n        <sl-tab slot=\"nav\" panel=\"web\">Page Web</sl-tab>\\n\\n        <sl-tab-panel name=\"web\">\\n          <sl-tab-group>\\n            <sl-tab slot=\"nav\" panel=\"page\">Page</sl-tab>\\n            <sl-tab slot=\"nav\" panel=\"head\">Head</sl-tab>\\n            <sl-tab slot=\"nav\" panel=\"css\">Style</sl-tab>\\n            <sl-tab slot=\"nav\" panel=\"header\">Header</sl-tab>\\n            <sl-tab slot=\"nav\" panel=\"main\">Main</sl-tab>\\n            <sl-tab slot=\"nav\" panel=\"footer\">Footer</sl-tab>\\n\\n            <sl-tab-panel name=\"page\">\\n              <code-it language=\"html\" read-only>\\n                <script type=\"enibook/src\"><p>hello</p><\\/script>\\n              </code-it>\\n            </sl-tab-panel>\\n            <sl-tab-panel name=\"head\">\\n              <code-it language=\"html\">\\n                <script type=\"enibook/src\">', '<\\/script>\\n              </code-it>\\n            </sl-tab-panel>\\n            <sl-tab-panel name=\"header\">\\n              <code-it language=\"html\">\\n                <script type=\"enibook/src\">', '<\\/script>\\n              </code-it>\\n            </sl-tab-panel>\\n            <sl-tab-panel name=\"footer\">\\n              <code-it language=\"html\" read-only>\\n                <script type=\"enibook/src\">', '<\\/script>\\n              </code-it>\\n            </sl-tab-panel>\\n            <sl-tab-panel name=\"css\"></sl-tab-panel>\\n          </sl-tab-group>\\n        </sl-tab-panel>\\n        <sl-tab-panel name=\"script\">\\n        </sl-tab-panel>\\n      </sl-tab-group>\\n      <div part=\"base\" class=\"playground-it\"></div>\\n\\n    '])), this.language, this.initialHead, this.initialHeader, this.initialCompiledCode);\n  }\n  reset() {\n    throw new Error(\"Method not implemented.\");\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PlaygroundIt",
          "declaration": {
            "name": "PlaygroundIt",
            "module": "dist/chunks/chunk.ESPXHCBJ.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.FPZVF37Z.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "FrameIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.border = false;\n    this.mainFilename = \"\";\n    this.headFilename = \"\";\n    this.headerFilename = \"\";\n    this.footerFilename = \"\";\n    this.url = \"\";\n    this.srcDoc = \"\";\n  }\n  async firstUpdated(_changedProperties) {\n    const head = await this.getCode(this.headFilename, \"head\");\n    const header = await this.getCode(this.headerFilename, \"header\");\n    const main = await this.getCode(this.mainFilename, \"main\");\n    const footer = await this.getCode(this.footerFilename, \"footer\");\n    if (head || header || main || footer) {\n      this.srcDoc = this.getTemplate({ head, header, main, footer });\n    }\n  }\n  getTemplate(options) {\n    return templateHTML(options);\n  }\n  render() {\n    return html`\n      <div part=\"base\" class=\"frame-it\">\n        ${this.srcDoc ? html`\n            <iframe\n              class=\"frame\"\n              allowfullscreen\n              name=\"frame\"\n              sandbox=\"allow-downloads allow-forms allow-modals allow-popups allow-same-origin allow-scripts allow-top-navigation\"\n              srcDoc=${this.srcDoc}>\n            </iframe>\n            ` : html`\n            <iframe\n              class=\"frame\"\n              allowfullscreen\n              name=\"frame\"\n              sandbox=\"allow-downloads allow-forms allow-modals allow-popups allow-same-origin allow-scripts allow-top-navigation\"\n              src=${this.url}>\n            </iframe>\n            `}       \n      </div>\n    `;\n  }\n  resizeIFrameHeight(height) {\n    const win = this.frameElement.contentWindow;\n    if (win) {\n      this.frameElement.style.height = `${height - 2}px`;\n    }\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FrameIt",
          "declaration": {
            "name": "FrameIt",
            "module": "dist/chunks/chunk.FPZVF37Z.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.GYICEXKC.js",
      "declarations": [
        {
          "kind": "function",
          "name": "emit",
          "parameters": [
            {
              "name": "element"
            },
            {
              "name": "name"
            },
            {
              "name": "options"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "emit",
          "declaration": {
            "name": "emit",
            "module": "dist/chunks/chunk.GYICEXKC.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.HHZEJP3K.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ToolsIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.size = \"small\";\n    this.menuItems = [];\n  }\n  firstUpdated(_changedProperties) {\n    this.menuItems = [...this.menu.querySelectorAll(\"sl-menu-item\")];\n  }\n  handleSelectTool(event) {\n    const selectedItem = event.detail.item;\n    selectedItem.toggleAttribute(\"checked\");\n    if (selectedItem.checked) {\n      switch (selectedItem.value) {\n        case \"all\":\n          this.clockElement.removeAttribute(\"hidden\");\n          this.colorElement.removeAttribute(\"hidden\");\n          this.themeElement.removeAttribute(\"hidden\");\n          this.menuItems.forEach((item) => item.checked = true);\n          break;\n        case \"date\":\n          this.clockElement.removeAttribute(\"hidden\");\n          break;\n        case \"theme\":\n          this.themeElement.removeAttribute(\"hidden\");\n          break;\n        case \"color\":\n          this.colorElement.removeAttribute(\"hidden\");\n          break;\n      }\n      if (!this.menuItemAll.checked && this.menuItems.length - 1 === this.menuItems.filter((item) => item.checked).length) {\n        this.menuItemAll.checked = true;\n      }\n    } else {\n      switch (selectedItem.value) {\n        case \"all\":\n          this.clockElement.setAttribute(\"hidden\", \"\");\n          this.colorElement.setAttribute(\"hidden\", \"\");\n          this.themeElement.setAttribute(\"hidden\", \"\");\n          this.menuItems.forEach((item) => item.checked = false);\n          break;\n        case \"date\":\n          this.clockElement.setAttribute(\"hidden\", \"\");\n          this.menuItemAll.checked = false;\n          break;\n        case \"theme\":\n          this.themeElement.setAttribute(\"hidden\", \"\");\n          this.menuItemAll.checked = false;\n          break;\n        case \"color\":\n          this.colorElement.setAttribute(\"hidden\", \"\");\n          this.menuItemAll.checked = false;\n          break;\n      }\n    }\n  }\n  render() {\n    return html`\n      <div part=\"base\" class=\"tools\">\n        <div class=\"tools__container\">\n          <!--\n          <alarm-it size=${this.size} hidden></alarm-it>\n          <chrono-it size=${this.size} hidden></chrono-it>\n          <timer-it size=${this.size} hidden></timer-it>\n          -->\n          <clock-it size=${this.size} date time hidden></clock-it>\n          <color-it size=${this.size} hidden></color-it>\n          <theme-it size=${this.size} hidden></theme-it>\n        </div>\n        <sl-dropdown part=\"dropdown\" stay-open-on-select hoist>\n          <sl-button size=${this.size} slot=\"trigger\" caret> ${svgIcon(\"mdi-cog\")} </sl-button>\n          <sl-menu @sl-select=${this.handleSelectTool}>\n            <sl-menu-item value=\"all\" type=\"checkbox\"> Tout sélectionner </sl-menu-item>\n            <sl-divider></sl-divider>\n            <sl-menu-item value=\"theme\" type=\"checkbox\">\n              <span slot=\"prefix\">${svgIcon(\"mdi-theme-light-dark\")}</span>\n              Thème\n            </sl-menu-item>\n            <sl-menu-item value=\"color\" type=\"checkbox\">\n              <span slot=\"prefix\">${svgIcon(\"mdi-palette-outline\")}</span>\n              Couleur\n            </sl-menu-item>\n            <sl-divider></sl-divider>\n            <sl-menu-item value=\"date\" type=\"checkbox\">\n              <span slot=\"prefix\">${svgIcon(\"mdi-calendar-clock-outline\")}</span>\n              Date et heure\n            </sl-menu-item>\n            <!--\n            <sl-menu-item value=\"chrono\">\n              <div slot=\"prefix\" class=\"it-mdi-timer-outline\"></div>\n              Chronomètre\n            </sl-menu-item>\n            <sl-menu-item value=\"timer\">\n              <div slot=\"prefix\" class=\"it-mdi-camera-timer\"></div>\n              Minuteur\n            </sl-menu-item>\n            <sl-menu-item value=\"alarm\">\n              <div slot=\"prefix\" class=\"it-mdi-bell-outline\"></div>\n              Alarme\n            </sl-menu-item>\n            -->\n          </sl-menu>\n        </sl-dropdown>\n      </div>\n    `;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToolsIt",
          "declaration": {
            "name": "ToolsIt",
            "module": "dist/chunks/chunk.HHZEJP3K.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.I47CHKS7.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "dictionary",
          "type": {
            "text": "array"
          },
          "default": "[\n  \"enib\",\n  \"lorem\",\n  \"ipsum\",\n  \"dolor\",\n  \"sit\",\n  \"amet,\",\n  \"consectetur\",\n  \"adipiscing\",\n  \"elit\",\n  \"ut\",\n  \"aliquam,\",\n  \"purus\",\n  \"sit\",\n  \"amet\",\n  \"luctus\",\n  \"venenatis,\",\n  \"lectus\",\n  \"magna\",\n  \"fringilla\",\n  \"urna,\",\n  \"porttitor\",\n  \"rhoncus\",\n  \"dolor\",\n  \"purus\",\n  \"non\",\n  \"enim\",\n  \"enit\",\n  \"enise\",\n  \"gepi\",\n  \"praesent\",\n  \"elementum\",\n  \"facilisis\",\n  \"leo,\",\n  \"vel\",\n  \"fringilla\",\n  \"est\",\n  \"ullamcorper\",\n  \"eget\",\n  \"nulla\",\n  \"facilisi\",\n  \"etiam\",\n  \"dignissim\",\n  \"diam\",\n  \"quis\",\n  \"lobortis\",\n  \"scelerisque\",\n  \"fermentum\",\n  \"dui\",\n  \"faucibus\",\n  \"in\",\n  \"ornare\",\n  \"quam\",\n  \"viverra\",\n  \"orci\",\n  \"sagittis\",\n  \"eu\",\n  \"volutpat\",\n  \"odio\",\n  \"facilisis\",\n  \"mauris\",\n  \"sit\",\n  \"amet\",\n  \"massa\",\n  \"vitae\",\n  \"tortor\",\n  \"condimentum\",\n  \"lacinia\",\n  \"quis\",\n  \"vel\",\n  \"eros\",\n  \"donec\",\n  \"ac\",\n  \"odio\",\n  \"tempor\",\n  \"orci\",\n  \"dapibus\",\n  \"ultrices\",\n  \"in\",\n  \"iaculis\",\n  \"nunc\",\n  \"sed\",\n  \"augue\",\n  \"lacus,\",\n  \"viverra\",\n  \"vitae\",\n  \"congue\",\n  \"eu,\",\n  \"consequat\",\n  \"ac\",\n  \"felis\",\n  \"donec\",\n  \"et\",\n  \"odio\",\n  \"pellentesque\",\n  \"diam\",\n  \"volutpat\",\n  \"commodo\",\n  \"sed\",\n  \"egestas\",\n  \"egestas\",\n  \"fringilla\",\n  \"phasellus\",\n  \"faucibus\",\n  \"scelerisque\",\n  \"eleifend\",\n  \"donec\",\n  \"pretium\",\n  \"vulputate\",\n  \"sapien\",\n  \"nec\",\n  \"sagittis\",\n  \"aliquam\",\n  \"malesuada\",\n  \"bibendum\",\n  \"arcu\",\n  \"vitae\",\n  \"elementum\",\n  \"curabitur\",\n  \"vitae\",\n  \"nunc\",\n  \"sed\",\n  \"velit\",\n  \"dignissim\",\n  \"sodales\",\n  \"ut\",\n  \"eu\",\n  \"sem\",\n  \"integer\",\n  \"vitae\",\n  \"justo\",\n  \"eget\",\n  \"magna\",\n  \"fermentum\",\n  \"iaculis\",\n  \"eu\",\n  \"non\",\n  \"diam\",\n  \"phasellus\",\n  \"vestibulum\",\n  \"lorem\",\n  \"sed\",\n  \"risus\",\n  \"ultricies\",\n  \"tristique\",\n  \"nulla\",\n  \"aliquet\",\n  \"tortor,\",\n  \"at\",\n  \"auctor\",\n  \"urna\",\n  \"nunc\",\n  \"id\",\n  \"cursus\",\n  \"metus\",\n  \"aliquam\",\n  \"eleifend\",\n  \"mi\",\n  \"in\",\n  \"nulla\",\n  \"posuere\",\n  \"sollicitudin\",\n  \"aliquam\",\n  \"ultrices\",\n  \"sagittis\",\n  \"orci,\",\n  \"a\",\n  \"scelerisque\",\n  \"purus\",\n  \"semper\",\n  \"eget\",\n  \"duis\",\n  \"at\",\n  \"tellus\",\n  \"at\",\n  \"urna\",\n  \"condimentum\",\n  \"mattis\",\n  \"pellentesque\",\n  \"id\",\n  \"nibh\",\n  \"tortor,\",\n  \"id\",\n  \"aliquet\",\n  \"lectus\",\n  \"proin\",\n  \"nibh\",\n  \"nisl,\",\n  \"condimentum\",\n  \"id\",\n  \"venenatis\",\n  \"a,\",\n  \"condimentum\",\n  \"vitae\",\n  \"sapien\",\n  \"pellentesque\",\n  \"habitant\",\n  \"morbi\",\n  \"tristique\",\n  \"senectus\",\n  \"et\",\n  \"netus\",\n  \"et\",\n  \"malesuada\",\n  \"fames\",\n  \"ac\",\n  \"turpis\",\n  \"egestas\",\n  \"sed\",\n  \"tempus,\",\n  \"urna\",\n  \"et\",\n  \"pharetra\",\n  \"pharetra,\",\n  \"massa\",\n  \"massa\",\n  \"ultricies\",\n  \"mi,\",\n  \"quis\",\n  \"hendrerit\",\n  \"dolor\",\n  \"magna\",\n  \"eget\",\n  \"est\",\n  \"lorem\",\n  \"ipsum\",\n  \"dolor\",\n  \"sit\",\n  \"amet,\",\n  \"consectetur\",\n  \"adipiscing\",\n  \"elit\",\n  \"pellentesque\",\n  \"habitant\",\n  \"morbi\",\n  \"tristique\",\n  \"senectus\",\n  \"et\",\n  \"netus\",\n  \"et\",\n  \"malesuada\",\n  \"fames\",\n  \"ac\",\n  \"turpis\",\n  \"egestas\",\n  \"integer\",\n  \"eget\",\n  \"aliquet\",\n  \"nibh\",\n  \"praesent\",\n  \"tristique\",\n  \"magna\",\n  \"sit\",\n  \"amet\",\n  \"purus\",\n  \"gravida\",\n  \"quis\",\n  \"blandit\",\n  \"turpis\",\n  \"cursus\",\n  \"in\",\n  \"hac\",\n  \"habitasse\",\n  \"platea\",\n  \"dictumst\",\n  \"quisque\",\n  \"sagittis,\",\n  \"purus\",\n  \"sit\",\n  \"amet\",\n  \"volutpat\",\n  \"consequat,\",\n  \"mauris\",\n  \"nunc\",\n  \"congue\",\n  \"nisi,\",\n  \"vitae\",\n  \"suscipit\",\n  \"tellus\",\n  \"mauris\",\n  \"a\",\n  \"diam\",\n  \"maecenas\",\n  \"sed\",\n  \"ut\",\n  \"sem\",\n  \"viverra\",\n  \"aliquet\",\n  \"eget\",\n  \"sit\",\n  \"amet\",\n  \"tellus\",\n  \"cras\",\n  \"adipiscing\",\n  \"eu\",\n  \"turpis\",\n  \"egestas\",\n  \"pretium\",\n  \"aenean\",\n  \"pharetra,\",\n  \"magna\",\n  \"ac\",\n  \"placerat\",\n  \"vestibulum,\",\n  \"lectus\",\n  \"mauris\",\n  \"ultrices\",\n  \"eros,\",\n  \"in\",\n  \"cursus\",\n  \"turpis\",\n  \"massa\",\n  \"tincidunt\",\n  \"dui\",\n  \"ut\",\n  \"ornare\",\n  \"lectus\",\n  \"sit\",\n  \"amet\",\n  \"est\",\n  \"placerat\",\n  \"in\",\n  \"egestas\",\n  \"erat\",\n  \"imperdiet\",\n  \"sed\",\n  \"euismod\",\n  \"nisi\",\n  \"porta\",\n  \"lorem\",\n  \"mollis\",\n  \"aliquam\",\n  \"ut\",\n  \"porttitor\",\n  \"leo\",\n  \"a\",\n  \"diam\",\n  \"sollicitudin\",\n  \"tempor\",\n  \"id\",\n  \"eu\",\n  \"nisl\",\n  \"nunc\",\n  \"mi\",\n  \"ipsum,\",\n  \"faucibus\",\n  \"vitae\",\n  \"aliquet\",\n  \"nec,\",\n  \"ullamcorper\",\n  \"sit\",\n  \"amet\",\n  \"risus\",\n  \"nullam\",\n  \"eget\",\n  \"felis\",\n  \"eget\",\n  \"nunc\",\n  \"lobortis\",\n  \"mattis\",\n  \"aliquam\",\n  \"faucibus\",\n  \"purus\",\n  \"in\",\n  \"massa\",\n  \"tempor\",\n  \"nec\",\n  \"feugiat\",\n  \"nisl\",\n  \"pretium\",\n  \"fusce\",\n  \"id\",\n  \"velit\",\n  \"ut\",\n  \"tortor\",\n  \"pretium\",\n  \"viverra\",\n  \"suspendisse\",\n  \"potenti\",\n  \"nullam\",\n  \"ac\",\n  \"tortor\",\n  \"vitae\",\n  \"purus\",\n  \"faucibus\",\n  \"ornare\",\n  \"suspendisse\",\n  \"sed\",\n  \"nisi\",\n  \"lacus,\",\n  \"sed\",\n  \"viverra\",\n  \"tellus\",\n  \"in\",\n  \"hac\",\n  \"habitasse\",\n  \"platea\",\n  \"dictumst\",\n  \"vestibulum\",\n  \"rhoncus\",\n  \"est\",\n  \"pellentesque\",\n  \"elit\",\n  \"ullamcorper\",\n  \"dignissim\",\n  \"cras\",\n  \"tincidunt\",\n  \"lobortis\",\n  \"feugiat\",\n  \"vivamus\",\n  \"at\",\n  \"augue\",\n  \"eget\",\n  \"arcu\",\n  \"dictum\",\n  \"varius\",\n  \"duis\",\n  \"at\",\n  \"consectetur\",\n  \"lorem\",\n  \"donec\",\n  \"massa\",\n  \"sapien,\",\n  \"faucibus\",\n  \"et\",\n  \"molestie\",\n  \"ac,\",\n  \"feugiat\",\n  \"sed\",\n  \"lectus\",\n  \"vestibulum\",\n  \"mattis\",\n  \"ullamcorper\",\n  \"velit\",\n  \"sed\",\n  \"ullamcorper\",\n  \"morbi\",\n  \"tincidunt\",\n  \"ornare\",\n  \"massa,\",\n  \"eget\",\n  \"egestas\",\n  \"purus\",\n  \"viverra\",\n  \"accumsan\",\n  \"in\",\n  \"nisl\",\n  \"nisi,\",\n  \"scelerisque\",\n  \"eu\",\n  \"ultrices\",\n  \"vitae,\",\n  \"auctor\",\n  \"eu\",\n  \"augue\",\n  \"ut\",\n  \"lectus\",\n  \"arcu,\",\n  \"bibendum\",\n  \"at\",\n  \"varius\",\n  \"vel,\",\n  \"pharetra\",\n  \"vel\",\n  \"turpis\",\n  \"nunc\",\n  \"eget\",\n  \"lorem\",\n  \"dolor,\",\n  \"sed\",\n  \"viverra\",\n  \"ipsum\",\n  \"nunc\",\n  \"aliquet\",\n  \"bibendum\",\n  \"enim,\",\n  \"facilisis\",\n  \"gravida\",\n  \"neque\",\n  \"convallis\",\n  \"a\",\n  \"cras\",\n  \"semper\",\n  \"auctor\",\n  \"neque,\",\n  \"vitae\",\n  \"tempus\",\n  \"quam\",\n  \"pellentesque\",\n  \"nec\",\n  \"nam\",\n  \"aliquam\",\n  \"sem\",\n  \"et\",\n  \"tortor\",\n  \"consequat\",\n  \"id\",\n  \"porta\",\n  \"nibh\",\n  \"enib,\",\n  \"venenatis\",\n  \"cras\",\n  \"sed\",\n  \"felis\",\n  \"eget\",\n  \"velit\",\n  \"aliquet\",\n  \"sagittis\",\n  \"id\",\n  \"consectetur\",\n  \"purus\",\n  \"ut\",\n  \"faucibus\",\n  \"pulvinar\",\n  \"elementum\",\n  \"integer\",\n  \"neque,\",\n  \"volutpat\",\n  \"ac\",\n  \"tincidunt\",\n  \"vitae,\",\n  \"semper\",\n  \"quis\",\n  \"lectus\",\n  \"nulla\",\n  \"at\",\n  \"volutpat\",\n  \"diam\",\n  \"ut\",\n  \"venenatis\",\n  \"tellus\",\n  \"in\",\n  \"metus\",\n  \"vulputate\",\n  \"eu\",\n  \"scelerisque\",\n  \"felis\",\n  \"imperdiet\",\n  \"proin\",\n  \"fermentum\",\n  \"leo\",\n  \"vel\",\n  \"orci\",\n  \"porta\",\n  \"non\",\n  \"pulvinar\",\n  \"neque\",\n  \"laoreet\",\n  \"suspendisse\",\n  \"interdum\",\n  \"consectetur\",\n  \"libero,\",\n  \"id\",\n  \"faucibus\",\n  \"nisl\",\n  \"tincidunt\",\n  \"eget\",\n  \"nullam\",\n  \"non\",\n  \"nisi\",\n  \"est,\",\n  \"sit\",\n  \"amet\",\n  \"facilisis\",\n  \"magna\",\n  \"etiam\",\n  \"tempor,\",\n  \"orci\",\n  \"eu\",\n  \"lobortis\",\n  \"elementum,\",\n  \"nibh\",\n  \"tellus\",\n  \"molestie\",\n  \"nunc,\",\n  \"non\",\n  \"blandit\",\n  \"massa\",\n  \"nec\",\n  \"dui\",\n  \"nunc\",\n  \"mattis\",\n  \"ut\",\n  \"tellus\",\n  \"elementum\",\n  \"sagittis\",\n  \"vitae\",\n  \"et\",\n  \"leo\",\n  \"duis\",\n  \"ut\",\n  \"diam\",\n  \"quam\",\n  \"nulla\",\n  \"porttitor\",\n  \"massa\",\n  \"id\",\n  \"neque\",\n  \"aliquam\",\n  \"vestibulum\",\n  \"morbi\",\n  \"blandit\",\n  \"cursus\",\n  \"risus,\",\n  \"at\",\n  \"ultrices\",\n  \"mi\",\n  \"tempus\",\n  \"imperdiet\",\n  \"nulla\",\n  \"malesuada\",\n  \"pellentesque\",\n  \"elit\",\n  \"eget\",\n  \"gravida\",\n  \"cum\",\n  \"sociis\",\n  \"natoque\",\n  \"penatibus\",\n  \"et\",\n  \"magnis\",\n  \"dis\",\n  \"parturient\",\n  \"montes,\",\n  \"nascetur\",\n  \"ridiculus\",\n  \"mus\",\n  \"mauris\",\n  \"vitae\",\n  \"ultricies\",\n  \"leo\",\n  \"integer\",\n  \"malesuada\",\n  \"nunc\",\n  \"vel\",\n  \"risus\",\n  \"commodo\",\n  \"viverra\",\n  \"maecenas\",\n  \"accumsan,\",\n  \"lacus\",\n  \"vel\",\n  \"facilisis\",\n  \"volutpat,\",\n  \"est\",\n  \"velit\",\n  \"egestas\",\n  \"dui,\",\n  \"id\",\n  \"ornare\",\n  \"arcu\",\n  \"odio\",\n  \"ut\",\n  \"sem\",\n  \"nulla\",\n  \"pharetra\",\n  \"diam\",\n  \"sit\",\n  \"amet\",\n  \"nisl\",\n  \"suscipit\",\n  \"adipiscing\",\n  \"bibendum\",\n  \"est\",\n  \"ultricies\",\n  \"integer\",\n  \"quis\",\n  \"auctor\",\n  \"elit\",\n  \"sed\",\n  \"vulputate\",\n  \"mi\",\n  \"sit\",\n  \"amet\",\n  \"mauris\",\n  \"commodo\",\n  \"quis\",\n  \"imperdiet\",\n  \"massa\",\n  \"tincidunt\",\n  \"nunc\",\n  \"pulvinar\",\n  \"sapien\",\n  \"et\",\n  \"ligula\",\n  \"ullamcorper\",\n  \"malesuada\",\n  \"proin\",\n  \"libero\",\n  \"nunc,\",\n  \"consequat\",\n  \"interdum\",\n  \"varius\",\n  \"sit\",\n  \"amet,\",\n  \"mattis\",\n  \"vulputate\",\n  \"nulla\",\n  \"aliquet\",\n  \"porttitor\",\n  \"lacus,\",\n  \"luctus\",\n  \"accumsan\",\n  \"tortor\",\n  \"posuere\",\n  \"ac\",\n  \"ut\",\n  \"consequat\",\n  \"semper\",\n  \"viverra\",\n  \"nam\",\n  \"libero\",\n  \"justo,\",\n  \"laoreet\",\n  \"sit\",\n  \"amet\",\n  \"cursus\",\n  \"sit\",\n  \"amet,\",\n  \"dictum\",\n  \"sit\",\n  \"amet\",\n  \"justo\",\n  \"donec\",\n  \"diam,\",\n  \"vulputate\",\n  \"ut\",\n  \"pharetra\",\n  \"sit\",\n  \"amet,\",\n  \"aliquam\",\n  \"id\",\n  \"diam\",\n  \"maecenas\",\n  \"ultricies\",\n  \"mi\",\n  \"eget\",\n  \"mauris\",\n  \"pharetra\",\n  \"et\",\n  \"ultrices\",\n  \"neque\",\n  \"ornare\",\n  \"aenean\",\n  \"euismod\",\n  \"elementum\",\n  \"nisi,\",\n  \"quis\",\n  \"eleifend\",\n  \"quam\",\n  \"adipiscing\",\n  \"vitae\",\n  \"proin\",\n  \"sagittis,\",\n  \"nisl\",\n  \"rhoncus\",\n  \"mattis\",\n  \"rhoncus,\",\n  \"urna\",\n  \"neque\",\n  \"viverra\",\n  \"justo,\",\n  \"nec\",\n  \"ultrices\",\n  \"dui\",\n  \"sapien\",\n  \"eget\",\n  \"mi\",\n  \"proin\",\n  \"sed\",\n  \"libero\",\n  \"enim,\",\n  \"sed\",\n  \"faucibus\",\n  \"turpis\",\n  \"in\",\n  \"eu\",\n  \"mi\",\n  \"bibendum\",\n  \"neque\",\n  \"egestas\",\n  \"congue\",\n  \"quisque\",\n  \"egestas\",\n  \"diam\",\n  \"in\",\n  \"arcu\",\n  \"cursus\",\n  \"euismod\",\n  \"quis\",\n  \"viverra\",\n  \"nibh\",\n  \"cras\",\n  \"pulvinar\",\n  \"mattis\",\n  \"nunc,\",\n  \"sed\",\n  \"blandit\",\n  \"libero\",\n  \"volutpat\",\n  \"sed\",\n  \"cras\",\n  \"ornare\",\n  \"arcu\",\n  \"dui\",\n  \"vivamus\",\n  \"arcu\",\n  \"felis,\",\n  \"bibendum\",\n  \"ut\",\n  \"tristique\",\n  \"et,\",\n  \"egestas\",\n  \"quis\",\n  \"ipsum\",\n  \"suspendisse\",\n  \"ultrices\",\n  \"gravida\",\n  \"dictum\",\n  \"fusce\",\n  \"ut\",\n  \"placerat\",\n  \"orci\",\n  \"nulla\",\n  \"pellentesque\",\n  \"dignissim\",\n  \"enim,\",\n  \"sit\",\n  \"amet\",\n  \"venenatis\",\n  \"urna\",\n  \"cursus\",\n  \"eget\",\n  \"nunc\",\n  \"scelerisque\",\n  \"viverra\",\n  \"mauris,\",\n  \"in\",\n  \"aliquam\",\n  \"sem\",\n  \"fringilla\",\n  \"ut\",\n  \"morbi\",\n  \"tincidunt\",\n  \"augue\",\n  \"interdum\",\n  \"velit\",\n  \"euismod\",\n  \"in\",\n  \"pellentesque\",\n  \"massa\",\n  \"placerat\",\n  \"duis\",\n  \"ultricies\",\n  \"lacus\",\n  \"sed\",\n  \"turpis\",\n  \"tincidunt\",\n  \"id\",\n  \"aliquet\",\n  \"risus\",\n  \"feugiat\",\n  \"in\",\n  \"ante\",\n  \"metus,\",\n  \"dictum\",\n  \"at\",\n  \"tempor\",\n  \"commodo,\",\n  \"ullamcorper\",\n  \"a\",\n  \"lacus\",\n  \"vestibulum\",\n  \"sed\",\n  \"arcu\",\n  \"non\",\n  \"odio\",\n  \"euismod\",\n  \"lacinia\",\n  \"at\",\n  \"quis\",\n  \"risus\",\n  \"sed\",\n  \"vulputate\",\n  \"odio\",\n  \"ut\",\n  \"blandit\",\n  \"volutpat\",\n  \"maecenas\",\n  \"volutpat\",\n  \"blandit\",\n  \"aliquam\",\n  \"etiam\",\n  \"erat\",\n  \"velit,\",\n  \"scelerisque\",\n  \"in\",\n  \"dictum\",\n  \"non,\",\n  \"consectetur\",\n  \"a\",\n  \"erat\",\n  \"nam\",\n  \"at\",\n  \"lectus\",\n  \"urna\",\n  \"duis\",\n  \"convallis\",\n  \"convallis\",\n  \"tellus,\",\n  \"id\",\n  \"interdum\",\n  \"velit\",\n  \"laoreet\",\n  \"id\",\n  \"donec\",\n  \"ultrices\",\n  \"tincidunt\",\n  \"arcu,\",\n  \"non\",\n  \"sodales\",\n  \"neque\",\n  \"sodales\",\n  \"ut\",\n  \"etiam\",\n  \"sit\",\n  \"amet\",\n  \"nisl\",\n  \"purus,\",\n  \"in\",\n  \"mollis\",\n  \"nunc\",\n  \"sed\",\n  \"id\",\n  \"semper\",\n  \"risus\",\n  \"in\",\n  \"hendrerit\",\n  \"gravida\",\n  \"rutrum\",\n  \"quisque\",\n  \"non\",\n  \"tellus\",\n  \"orci,\",\n  \"ac\",\n  \"auctor\",\n  \"augue\",\n  \"mauris\",\n  \"augue\",\n  \"neque,\",\n  \"gravida\",\n  \"in\",\n  \"fermentum\",\n  \"et,\",\n  \"sollicitudin\",\n  \"ac\",\n  \"orci\",\n  \"phasellus\",\n  \"egestas\",\n  \"tellus\",\n  \"rutrum\",\n  \"tellus\",\n  \"pellentesque\",\n  \"eu\",\n  \"tincidunt\",\n  \"tortor\",\n  \"aliquam\",\n  \"nulla\",\n  \"facilisi\",\n  \"cras\",\n  \"fermentum,\",\n  \"odio\",\n  \"eu\",\n  \"feugiat\",\n  \"pretium,\",\n  \"nibh\",\n  \"ipsum\",\n  \"consequat\",\n  \"nisl,\",\n  \"vel\",\n  \"pretium\",\n  \"lectus\",\n  \"quam\",\n  \"id\",\n  \"leo\",\n  \"in\",\n  \"vitae\",\n  \"turpis\",\n  \"massa\",\n  \"sed\",\n  \"elementum\",\n  \"tempus\",\n  \"egestas\",\n  \"sed\",\n  \"sed\",\n  \"risus\",\n  \"pretium\",\n  \"quam\",\n  \"vulputate\",\n  \"dignissim\",\n  \"suspendisse\",\n  \"in\",\n  \"est\",\n  \"ante\",\n  \"in\",\n  \"nibh\",\n  \"mauris,\",\n  \"cursus\",\n  \"mattis\",\n  \"molestie\",\n  \"a,\",\n  \"iaculis\",\n  \"at\",\n  \"erat\",\n  \"pellentesque\",\n  \"adipiscing\",\n  \"commodo\",\n  \"elit,\",\n  \"at\",\n  \"imperdiet\",\n  \"dui\",\n  \"accumsan\",\n  \"sit\",\n  \"amet\",\n  \"nulla\",\n  \"facilisi\",\n  \"morbi\",\n  \"tempus\",\n  \"iaculis\",\n  \"urna,\",\n  \"id\",\n  \"volutpat\",\n  \"lacus\",\n  \"laoreet\",\n  \"non\",\n  \"curabitur\",\n  \"gravida\",\n  \"arcu\",\n  \"ac\",\n  \"tortor\",\n  \"dignissim\",\n  \"convallis\",\n  \"aenean\",\n  \"et\",\n  \"tortor\",\n  \"at\",\n  \"risus\",\n  \"viverra\",\n  \"adipiscing\",\n  \"at\",\n  \"in\",\n  \"tellus\",\n  \"integer\",\n  \"feugiat\",\n  \"scelerisque\",\n  \"varius\",\n  \"morbi\",\n  \"nunc,\",\n  \"faucibus\",\n  \"a\",\n  \"pellentesque\",\n  \"sit\",\n  \"amet,\",\n  \"porttitor\",\n  \"eget\",\n  \"dolor\",\n  \"morbi\",\n  \"non\",\n  \"arcu\",\n  \"risus,\",\n  \"quis\",\n  \"varius\",\n  \"quam\",\n  \"quisque\",\n  \"id\",\n  \"diam\",\n  \"vel\",\n  \"quam\",\n  \"elementum\",\n  \"pulvinar\",\n  \"etiam\",\n  \"non\",\n  \"quam\",\n  \"lacus\",\n  \"suspendisse\",\n  \"faucibus\",\n  \"interdum\",\n  \"posuere\",\n  \"lorem\",\n  \"ipsum\",\n  \"dolor\",\n  \"sit\",\n  \"amet,\",\n  \"consectetur\",\n  \"adipiscing\",\n  \"elit\",\n  \"duis\",\n  \"tristique\",\n  \"sollicitudin\",\n  \"nibh\",\n  \"sit\",\n  \"amet\",\n  \"commodo\",\n  \"nulla\",\n  \"facilisi\",\n  \"nullam\",\n  \"vehicula\",\n  \"ipsum\",\n  \"a\",\n  \"arcu\",\n  \"cursus\",\n  \"vitae\",\n  \"congue\",\n  \"mauris\",\n  \"rhoncus\",\n  \"aenean\",\n  \"vel\",\n  \"elit\",\n  \"scelerisque\",\n  \"mauris\",\n  \"pellentesque\",\n  \"pulvinar\",\n  \"pellentesque\",\n  \"habitant\",\n  \"morbi\",\n  \"tristique\",\n  \"senectus\",\n  \"et\",\n  \"netus\",\n  \"et\",\n  \"malesuada\",\n  \"fames\",\n  \"ac\",\n  \"turpis\",\n  \"egestas\",\n  \"maecenas\",\n  \"pharetra\",\n  \"convallis\",\n  \"posuere\",\n  \"morbi\",\n  \"leo\",\n  \"urna,\",\n  \"molestie\",\n  \"at\",\n  \"elementum\",\n  \"eu,\",\n  \"facilisis\",\n  \"sed\",\n  \"odio\",\n  \"morbi\",\n  \"quis\",\n  \"commodo\",\n  \"odio\",\n  \"aenean\",\n  \"sed\",\n  \"adipiscing\",\n  \"diam\",\n  \"donec\",\n  \"adipiscing\",\n  \"tristique\",\n  \"risus\",\n  \"nec\",\n  \"feugiat\",\n  \"in\",\n  \"fermentum\",\n  \"posuere\",\n  \"urna\",\n  \"nec\",\n  \"tincidunt\",\n  \"praesent\",\n  \"semper\",\n  \"feugiat\",\n  \"nibh\",\n  \"sed\",\n  \"pulvinar\",\n  \"proin\",\n  \"gravida\",\n  \"hendrerit\",\n  \"lectus\",\n  \"a\",\n  \"molestie\",\n  \"enibook\"\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dictionary",
          "declaration": {
            "name": "dictionary",
            "module": "dist/chunks/chunk.I47CHKS7.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.J5HD4O7O.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "BaseIt",
          "default": "class extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.fullscreen = false;\n    this.lang = navigator.language;\n  }\n  /**\n   * Emission d'un événement `CustomEvent` par l'élément.\n   *\n   * Par défaut, l'événement se propage dans le DOM (`bubbles: true`);\n   * il traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\n   * et ne peut être empêché de le faire (`cancelable: false`).\n   *\n   */\n  emit(name, options) {\n    const event = new CustomEvent(name, {\n      bubbles: true,\n      cancelable: false,\n      composed: true,\n      detail: {},\n      ...options\n    });\n    this.dispatchEvent(event);\n    return event;\n  }\n  async getCode(filename, part) {\n    let code = \"\";\n    const innerScriptTag = this.querySelector(`script[type=\"enibook/${part}\"]`);\n    if (filename) {\n      await fetchContent(filename).then((response) => {\n        code += response;\n      });\n    }\n    if (innerScriptTag) {\n      code += dedentText(innerScriptTag.innerHTML);\n      code = code.replace(/&lt;(\\/?script)(.*?)&gt;/g, \"<$1$2>\");\n    }\n    return code;\n  }\n  /**\n   * Passe en mode plein écran ou sort du mode plein écran.\n   *\n   * On peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.\n   */\n  toggleFullscreen() {\n    this.fullscreen = !this.fullscreen;\n    if (!fscreen.fullscreenElement) {\n      fscreen.requestFullscreen(this);\n    } else {\n      fscreen.exitFullscreen();\n    }\n  }\n  /**\n   * Crée une alerte qui affiche le message associé pendant une durée donnée.\n   *\n   * @param {string} message - le message d'alerte\n   * @param {string} [variant=\"primary\"] - apparence du message\n   * @param {string} [icon=\"it-mdi-information-variant-circle-outline\"] - icône associée au message.\n   * @param {string} [duration=\"3000\"] - durée d'affichage de l'alerte en millisecondes.\n   * @returns\n   * @memberof EnibookElement\n   */\n  notify(message, variant = \"primary\", icon = \"mdi-information-variant-circle-outline\", duration = \"3000\") {\n    const alert = Object.assign(document.createElement(\"sl-alert\"), {\n      variant,\n      closable: true,\n      duration,\n      innerHTML: `\n          <div slot=\"icon\">${icons[icon]}</div>\n          ${this.wrap(message)}\n        `\n    });\n    document.body.append(alert);\n    return alert.toast();\n  }\n  wrap(message) {\n    const div = document.createElement(\"div\");\n    div.textContent = message;\n    return div.innerHTML;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseIt",
          "declaration": {
            "name": "BaseIt",
            "module": "dist/chunks/chunk.J5HD4O7O.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.KEFJNF2J.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "languages",
          "type": {
            "text": "object"
          },
          "default": "{\n  asciidoc: {\n    name: \"asciidoc\",\n    cm: StreamLanguage.define(cmAsciidoc),\n    logo: `${icons[\"language-asciidoctor\"]}`,\n    extension: \"adoc\",\n    mime: \"text/asciidoc\",\n    helpUrl: \"https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/\"\n  },\n  css: {\n    name: \"css\",\n    cm: cmCss(),\n    logo: `${icons[\"mdi-language-css3\"]}`,\n    extension: \"css\",\n    mime: \"text/css\",\n    helpUrl: \"https://developer.mozilla.org/fr/docs/Web/CSS/Reference\"\n  },\n  html: {\n    name: \"html\",\n    cm: cmHtml(),\n    logo: `${icons[\"mdi-language-html5\"]}`,\n    extension: \"html\",\n    mime: \"text/html\",\n    helpUrl: \"https://developer.mozilla.org/fr/docs/Web/HTML/Reference\"\n  },\n  javascript: {\n    name: \"javascript\",\n    cm: cmJavascript(),\n    logo: `${icons[\"mdi-language-javascript\"]}`,\n    extension: \"js\",\n    mime: \"text/javascript\",\n    helpUrl: \"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference\"\n  },\n  json: {\n    name: \"json\",\n    cm: cmJson(),\n    logo: `${icons[\"mdi-code-json\"]}`,\n    extension: \"json\",\n    mime: \"application/json\",\n    helpUrl: \"https://www.json.org/json-fr.html\"\n  },\n  markdown: {\n    name: \"markdown\",\n    cm: cmMarkdown(),\n    logo: `${icons[\"mdi-language-markdown\"]}`,\n    extension: \"md\",\n    mime: \"text/markdown\",\n    helpUrl: \"https://www.markdownguide.org/cheat-sheet/\"\n  },\n  prolog: {\n    name: \"prolog\",\n    cm: cmProlog(),\n    logo: `${icons[\"language-prolog\"]}`,\n    extension: \"pl\",\n    mime: \"text/x-prolog\",\n    helpUrl: \"http://tau-prolog.org/documentation#prolog\"\n  },\n  python: {\n    name: \"python\",\n    cm: cmPython(),\n    logo: `${icons[\"mdi-language-python\"]}`,\n    extension: \"py\",\n    mime: \"text/x-python\",\n    helpUrl: \"https://www.pythoncheatsheet.org/cheatsheet/dictionaries\"\n  },\n  sql: {\n    name: \"sql\",\n    cm: cmSql(),\n    logo: `${icons[\"mdi-database\"]}`,\n    extension: \"sql\",\n    mime: \"application/sql\",\n    helpUrl: \"https://sql.sh\"\n  },\n  text: {\n    name: \"text\",\n    cm: [],\n    logo: `${icons[\"mdi-format-text\"]}`,\n    extension: \"txt\",\n    mime: \"text/plain\",\n    helpUrl: \"\"\n  },\n  typescript: {\n    name: \"typescript\",\n    cm: cmJavascript({ typescript: true }),\n    logo: `${icons[\"mdi-language-typescript\"]}`,\n    extension: \"ts\",\n    mime: \"video/mp2t\",\n    // !\n    helpUrl: \"https://www.typescriptlang.org/cheatsheets\"\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "languages",
          "declaration": {
            "name": "languages",
            "module": "dist/chunks/chunk.KEFJNF2J.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.MTMESOG3.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ToggleIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.elements = [];\n    this._toshow = false;\n    this.selector = \"unknown\";\n    this.size = \"small\";\n    this.textShow = \"mdi-show-outline\";\n    this.textHide = \"mdi-hide-outline\";\n    this.tooltipShow = SHOW;\n    this.tooltipHide = HIDE;\n    this.destructuring = false;\n  }\n  firstUpdated(_changedProperties) {\n    const that = this;\n    if (this.tooltipShow === SHOW) {\n      this.tooltipShow += ` \\xAB ${this.selector} \\xBB`;\n    }\n    if (this.tooltipHide === HIDE) {\n      this.tooltipHide += ` \\xAB ${this.selector} \\xBB`;\n    }\n    this.elements = Array.from(document.body.querySelectorAll(this.selector)).filter((element) => !element.contains(that));\n  }\n  render() {\n    const textShow = Object.keys(icons).includes(this.textShow) ? svgIcon(this.textShow) : html`${this.textShow}`;\n    const textHide = Object.keys(icons).includes(this.textHide) ? svgIcon(this.textHide) : html`${this.textHide}`;\n    return html`\n      <sl-tooltip content=${this._toshow ? this.tooltipShow : this.tooltipHide} hoist>\n        <sl-button size=${this.size} @click=${() => this.toggleSelector()}>\n          ${this._toshow ? textShow : textHide}\n        </sl-button>\n      </sl-tooltip>\n    `;\n  }\n  toggleSelector() {\n    const that = this;\n    for (const element of that.elements) {\n      if (that._toshow) {\n        element.style.visibility = \"visible\";\n        element.style.display = \"\";\n      } else {\n        if (that.destructuring) {\n          element.style.display = \"none\";\n        } else {\n          element.style.visibility = \"hidden\";\n        }\n      }\n    }\n    this._toshow = !this._toshow;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleIt",
          "declaration": {
            "name": "ToggleIt",
            "module": "dist/chunks/chunk.MTMESOG3.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.N5KKLF4I.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "CodeIt",
          "default": "class extends AnswerForm {\n  constructor() {\n    super(...arguments);\n    this._language = \"text\";\n    this._placeholder = \"F1: afficher/masquer les barres d'outils et d'informations\";\n    this._readOnly = false;\n    this._indentSize = 2;\n    this._theme = \"dark\";\n    this.extensions = [];\n    this.initialCode = \"\";\n    this.languageConfig = new Compartment();\n    this.lineNumbersConfig = new Compartment();\n    this.placeholderConfig = new Compartment();\n    this.readOnlyConfig = new Compartment();\n    this.indentationConfig = new Compartment();\n    this.themeConfig = new Compartment();\n    this.cursorLine = 0;\n    this.cursorColumn = 0;\n    this.message = \"\";\n    this.lineNumbers = false;\n    this.codeFilename = \"\";\n    this.toolbar = false;\n  }\n  get indentSize() {\n    return this._indentSize;\n  }\n  set indentSize(value) {\n    if (value !== this._indentSize) {\n      this._indentSize = value;\n      if (this.theEditor) {\n        this.setIndentationExtension();\n      }\n    }\n  }\n  get language() {\n    return this._language;\n  }\n  set language(value) {\n    if (value !== this._language) {\n      this._language = value;\n      if (this.theEditor) {\n        this.setLanguageExtension();\n      }\n    }\n  }\n  get placeholder() {\n    return this._placeholder;\n  }\n  set placeholder(value) {\n    if (value !== this._placeholder) {\n      this._placeholder = value;\n      if (this.theEditor) {\n        this.setPlaceholderExtension();\n      }\n    }\n  }\n  get readOnly() {\n    return this._readOnly;\n  }\n  set readOnly(value) {\n    if (value !== this._readOnly) {\n      this._readOnly = value;\n      if (this.theEditor) {\n        this.setReadOnlyExtension();\n      }\n    }\n  }\n  get theme() {\n    return this._theme;\n  }\n  set theme(value) {\n    if (value !== this._theme) {\n      this._theme = value;\n      if (this.theEditor) {\n        this.setThemeExtension();\n      }\n    }\n  }\n  get value() {\n    let res = \"\";\n    if (this.theEditor) {\n      res = this.theEditor.state.doc.toString();\n    }\n    return res;\n  }\n  set value(value) {\n    if (value !== this.value) {\n      if (this.theEditor) {\n        this.theEditor.dispatch({\n          changes: {\n            from: 0,\n            to: this.theEditor.state.doc.length,\n            insert: value\n          }\n        });\n      }\n    }\n  }\n  /** Réponse de l'éditeur. */\n  get answer() {\n    return this.value;\n  }\n  createListeners() {\n    this.addEventListener(\"keyup-mouseup-it\", () => {\n      const theState = this.theEditor.state;\n      this.cursorLine = theState.doc.lineAt(theState.selection.main.head).number;\n      this.cursorColumn = theState.selection.main.head - theState.doc.lineAt(theState.selection.main.head).from;\n    });\n    this.addEventListener(\"toggle-toolbar-it\", () => {\n      this.toolbar = !this.toolbar;\n    });\n  }\n  async firstUpdated(_changedProperties) {\n    this.initialCode = await this.getCode(this.codeFilename, \"src\");\n    this.lineNumbers = !this.readOnly ? this.lineNumbers : true;\n    this.extensions = this.getInitialExtensions();\n    this.theEditor = new EditorView({\n      doc: \"\",\n      extensions: this.extensions,\n      parent: this.editorContainer,\n      root: this.shadowRoot\n    });\n    this.value = this.initialCode;\n    this.setLanguageExtension();\n    this.createListeners();\n  }\n  getHelpUrl() {\n    if (this.isValidLanguage(this.language)) {\n      return languages[this.language].helpUrl;\n    } else {\n      return `https://devdocs.io/${this.language}/`;\n    }\n  }\n  getInitialExtensions() {\n    const res = [\n      basicSetup,\n      EditorState.phrases.of(frenchPhrases),\n      eventHandler,\n      indentationMarkers({\n        highlightActiveBlock: false,\n        hideFirstIndent: true\n      }),\n      keymap.of(helpKeymap),\n      this.indentationConfig.of(indentUnit.of(indentString(this.indentSize))),\n      this.languageConfig.of([]),\n      this.lineNumbers ? this.lineNumbersConfig.of(lineNumbers()) : this.lineNumbersConfig.of(lineNumbers({ formatNumber: () => \"\" })),\n      EditorView.lineWrapping,\n      outlineNone,\n      this.placeholderConfig.of(placeholder(this.placeholder)),\n      this.readOnlyConfig.of(EditorState.readOnly.of(this.readOnly)),\n      this.themeConfig.of(this.theme === \"dark\" ? darkTheme : lightTheme),\n      EditorView.updateListener.of(() => {\n        this.emit(\"editor-change-it\");\n      })\n    ];\n    return res;\n  }\n  /** Liste des langages reconnus par l'éditeur */\n  get validLanguages() {\n    return Object.keys(languages);\n  }\n  handleCopyClipboard() {\n    navigator.clipboard.writeText(this.value).then(\n      () => {\n        this.notify(\"Contenu de l'\\xE9diteur copi\\xE9 dans le presse-papier.\", \"success\", \"mdi-check-circle-outline\");\n      },\n      () => {\n        this.notify(\"A priori, impossible d'\\xE9crire dans le presse-papier !\", \"danger\", \"mdi-alert-outline\");\n      }\n    );\n  }\n  handleLineNumbers() {\n    this.lineNumbers = !this.lineNumbers;\n    this.theEditor.dispatch({\n      effects: [\n        this.lineNumbers ? this.lineNumbersConfig.reconfigure(lineNumbers()) : this.lineNumbersConfig.reconfigure(lineNumbers({ formatNumber: () => \"\" }))\n      ]\n    });\n  }\n  handleSelectCommand(event) {\n    const value = event.detail.item.value;\n    (0, eval)(`${value}(this.editor)`);\n  }\n  handleSelectLanguage(event) {\n    const item = event.detail.item;\n    this.languageMenuItems.forEach((anItem) => {\n      anItem.checked = false;\n    });\n    item.checked = true;\n    this.language = item.value;\n    this.theEditor.dispatch({\n      effects: [\n        this.languageConfig.reconfigure(\n          languages[this.language].cm\n          /*cmLanguages[this.language]*/\n        ),\n        this.placeholderConfig.reconfigure(placeholder(this.placeholder))\n      ]\n    });\n  }\n  /** Teste si un langage fait partie des langages reconnus par l'éditeur. */\n  isValidLanguage(language) {\n    return Object.keys(languages).includes(language);\n  }\n  render() {\n    const classes = {\n      \"code-it\": true,\n      \"code-it__border\": this.toolbar,\n      light: this.theme === \"light\",\n      dark: this.theme !== \"light\"\n    };\n    return html`\n      <sl-resize-observer>\n        <div part=\"base\" class=${classMap(classes)}>\n          <div part=\"toolbar\">${this.renderToolbar()}</div>\n          <div class=\"editor-base\">\n            <div part=\"editor\" class=\"editor\"></div>\n            <div part=\"menuBtn\" class=\"menu-button\">\n              ${!this.readOnly ? this.renderToolbarsButton() : this.renderToolsButtons()}\n            </div>\n          </div>\n          <div part=\"statusbar\">${this.renderStatusBar()}</div>\n        </div>\n      </sl-resize-observer>\n    `;\n  }\n  renderCommentButtons() {\n    return html`\n      <sl-button-group ?hidden=${this.readOnly} label=\"commentaires\">\n        <sl-tooltip content=\"commenter/décommenter la ligne\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      command.toggleComment(this.theEditor);\n    }}\n            ><svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              style=\"vertical-align:middle;display:inline-block\"\n              width=\"1em\"\n              height=\"1em\"\n              preserveAspectRatio=\"xMidYMid meet\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path fill=\"currentColor\" d=\"M5 5v14h2v2H3V3h4v2H5m15 6H7v2h13V7m0 4Z\" />\n            </svg>\n          </sl-button>\n        </sl-tooltip>\n        <sl-tooltip content=\"commenter/décommenter le bloc\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      command.toggleBlockComment(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-format-list-group\")}</sl-button\n          >\n        </sl-tooltip>\n      </sl-button-group>\n    `;\n  }\n  renderFeedbackButton() {\n    return html`<sl-tooltip content=\"interprétation\" hoist\n    ><sl-button\n      variant=\"neutral\"\n      size=\"small\"\n      @click=${() => {\n      this.emit(\"feedback-requested-it\");\n    }}\n      >${svgIcon(\"mdi-play\")}</sl-button\n    ></sl-tooltip\n  >`;\n  }\n  renderHistoryButtons() {\n    return html`\n      <sl-button-group ?hidden=${this.readOnly} label=\"historique\">\n        <sl-tooltip content=\"annuler toutes les modifications\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      this.reset();\n    }}\n            >${svgIcon(\"mdi-refresh\")}</sl-button\n          >\n        </sl-tooltip>\n        <sl-tooltip content=\"annuler la dernière modification\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      command.undo(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-undo\")}</sl-button\n          >\n        </sl-tooltip>\n        <sl-tooltip content=\"rétablir la dernière annulation\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      command.redo(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-redo\")}</sl-button\n          >\n        </sl-tooltip>\n      </sl-button-group>\n    `;\n  }\n  renderIndentationButtons() {\n    return html`\n      <sl-button-group ?hidden=${this.readOnly} label=\"indentation\">\n        <sl-tooltip content=\"indenter\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      command.indentMore(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-format-indent-increase\")}</sl-button\n          >\n        </sl-tooltip>\n        <sl-tooltip content=\"désindenter\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      command.indentLess(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-format-indent-decrease\")}</sl-button\n          >\n        </sl-tooltip>\n      </sl-button-group>\n    `;\n  }\n  renderKeymapButton() {\n    return html`\n      <sl-dropdown stay-open-on-select hoist ?hidden=${this.readOnly}>\n        <sl-button slot=\"trigger\" size=\"small\" caret>${svgIcon(\"mdi-keyboard\")}</sl-button>\n        <sl-menu class=\"dropdown__shortcuts\">\n          <sl-menu-item disabled>\n            Commande\n            <div slot=\"suffix\">Raccourci clavier</div>\n          </sl-menu-item>\n          <sl-divider></sl-divider>\n          ${CodeIt.keymap.map(\n      (map) => html`\n                <sl-menu-item @click=${() => {\n        map.run(this.theEditor);\n      }}>\n                  ${map.name}\n                  <div slot=\"suffix\">${map.key}</div>\n                </sl-menu-item>\n              `\n    )}\n          <sl-divider></sl-divider>\n            <sl-menu-item disabled>\n              Commande\n              <div slot=\"suffix\">Raccourci clavier</div>\n            </sl-menu-item>\n        </sl-menu>\n      </sl-dropdown>\n    `;\n  }\n  renderMiscButtons() {\n    return html`\n      <sl-button-group label=\"langage et raccourcis clavier\">\n        <sl-tooltip content=\"choisir un langage\" hoist>\n          <sl-dropdown hoist>\n            <sl-button slot=\"trigger\" size=\"small\" caret\n              >${this.language ? unsafeHTML(languages[this.language].logo) : html`${svgIcon(\"mdi-help\")}`}</sl-button\n            >\n            <sl-menu class=\"dropdown__languages\" @sl-select=${this.handleSelectLanguage}>\n              ${Object.keys(languages).map(\n      (language) => html`<sl-menu-item type=\"checkbox\" value=\"${language}\" ?checked=${this.language === language}\n                    >${language}\n                    <div slot=\"prefix\">${unsafeHTML(languages[language].logo)}</div></sl-menu-item\n                  >`\n    )}\n            </sl-menu>\n          </sl-dropdown>\n        </sl-tooltip>\n        ${this.renderKeymapButton()}\n      </sl-button-group>\n      ${this.renderToolsButtons()}\n    `;\n  }\n  renderSearchButtons() {\n    return html`\n      <sl-button-group label=\"rechercher/remplacer\">\n        <sl-tooltip content=\"${this.readOnly ? \"rechercher\" : \"rechercher/remplacer\"}\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      search.openSearchPanel(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-find-replace\")}</sl-button\n          >\n        </sl-tooltip>\n        <sl-tooltip content=\"atteindre la ligne:colonne\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      search.gotoLine(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-text-search\")}</sl-button\n          >\n        </sl-tooltip>\n      </sl-button-group>\n    `;\n  }\n  renderStatusBar() {\n    return html`\n      <toolbar-it class=\"statusbar\" ?hidden=${!this.toolbar}>\n        <sl-button-group slot=\"end\" label=\"informations\">\n          <sl-tooltip content=\"numéros de la ligne et de la colonne courantes\" hoist>\n            <sl-button size=\"small\" variant=\"default\">L ${this.cursorLine}, col ${this.cursorColumn}</sl-button>\n          </sl-tooltip>\n          <sl-tooltip content=\"indentation en nombre d'espaces\" hoist>\n            <sl-button size=\"small\" variant=\"default\">Indentation : ${this.indentSize}</sl-button>\n          </sl-tooltip>\n          <sl-tooltip content=\"nombre de caractères\" hoist>\n            <sl-button size=\"small\" variant=\"default\">Caractères : ${this.value.length}</sl-button>\n          </sl-tooltip>\n        </sl-button-group>\n      </toolbar-it>\n    `;\n  }\n  renderToolbar() {\n    return html`\n      <toolbar-it class=\"toolbar\" ?hidden=${!this.toolbar}>\n        <div slot=\"start\">\n          ${this.renderHistoryButtons()} \n          ${this.renderIndentationButtons()} \n          ${this.renderCommentButtons()}\n          ${this.renderSearchButtons()}\n        </div>\n        <div slot=\"center\">\n          ${this.renderKeymapButton()}\n        </div>\n        <div slot=\"end\">\n          ${this.renderToolsButtons()}\n        </div>\n      </toolbar-it>\n    `;\n  }\n  renderToolbarsButton() {\n    return html`\n      <sl-tooltip content=\"activer/désactiver les barres d'outils et d'informations\" hoist>\n        <sl-button variant=\"default\" size=\"small\" @click=${() => {\n      this.toolbar = !this.toolbar;\n    }}>\n          ${svgIcon(\"mdi-tools\")}\n        </sl-button>\n      </sl-tooltip>\n    `;\n  }\n  renderToolsButtons() {\n    return html`                      \n      <sl-button-group label=\"outils\">\n        <sl-tooltip hoist>\n          <div slot=\"content\">lien sur une page d'aide du langage <code>${languages[this.language].name}</code></div>\n          <sl-button size=\"small\" variant=\"default\" href=\"${this.getHelpUrl()}\" target=\"_blank\">\n            ${unsafeHTML(languages[this.language].logo)}\n          </sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"afficher/cacher les numéros de ligne\" hoist>\n          <sl-button size=\"small\" @click=${() => this.handleLineNumbers()}>\n            ${svgIcon(\"mdi-format-list-numbered\")}\n          </sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"copier dans le presse-papier\">\n          <sl-button size=\"small\" @click=${() => this.handleCopyClipboard()}>\n            ${svgIcon(\"mdi-content-copy\")}\n          </sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"changer de thème\" hoist>\n          <sl-button size=\"small\" @click=${() => this.toggleTheme()}>${svgIcon(\"mdi-theme-light-dark\")}</sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip .content=${!this.fullscreen ? \"passer en mode plein \\xE9cran\" : \"quitter le mode plein \\xE9cran\"} hoist>\n          <sl-button size=\"small\" @click=${() => this.toggleFullscreen()}>\n            ${!this.fullscreen ? html`${svgIcon(\"mdi-fullscreen\")}` : html`${svgIcon(\"mdi-fullscreen-exit\")}`}\n          </sl-button>\n        </sl-tooltip>\n      </sl-button-group>\n    `;\n  }\n  /** Réinitialisation de l'éditeur. */\n  reset() {\n    this.value = this.initialCode;\n  }\n  async setLanguageExtension() {\n    const langs = Object.keys(languages);\n    if (langs.includes(this.language)) {\n      this.theEditor.dispatch({\n        effects: [this.languageConfig.reconfigure(languages[this.language].cm)]\n      });\n    }\n  }\n  setPlaceholderExtension() {\n    this.theEditor.dispatch({\n      effects: [this.placeholderConfig.reconfigure(placeholder(this.placeholder))]\n    });\n  }\n  setReadOnlyExtension() {\n    this.theEditor.dispatch({\n      effects: [this.readOnlyConfig.reconfigure(EditorState.readOnly.of(this.readOnly))]\n    });\n  }\n  setIndentationExtension() {\n    this.theEditor.dispatch({\n      effects: [this.indentationConfig.reconfigure(indentUnit.of(indentString(this.indentSize)))]\n    });\n  }\n  setThemeExtension() {\n    this.theEditor.dispatch({\n      effects: [this.themeConfig.reconfigure(this.theme === \"dark\" ? darkTheme : lightTheme)]\n    });\n  }\n  toggleTheme() {\n    this.theme = this.theme === \"dark\" ? \"light\" : \"dark\";\n    this.setThemeExtension();\n  }\n  updated(changedProperties) {\n    if (changedProperties.has(\"fieldset\")) {\n      this.editorContainer.innerHTML = \"\";\n      this.editorContainer.appendChild(this.theEditor.dom);\n    }\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CodeIt",
          "declaration": {
            "name": "CodeIt",
            "module": "dist/chunks/chunk.N5KKLF4I.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.OEYTNOFN.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "LoremIpsumIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.count = 1;\n    this.type = \"paragraph\";\n  }\n  createTerm() {\n    const nTerms = this.randomLength(1, 3);\n    const termArray = [];\n    for (let i = 0; i < nTerms; i++) {\n      termArray.push(this.createText(\"word\"));\n    }\n    return termArray.join(\" \");\n  }\n  /** Texte aléatoire généré selon son type. */\n  createText(type = \"paragraph\") {\n    let text;\n    let n;\n    const sentences = [];\n    const array = [];\n    const words = [];\n    switch (type) {\n      case \"dlist\":\n      case \"olist\":\n      case \"ulist\":\n        n = this.randomLength(1, 3);\n        for (let i = 0; i < n; i++) {\n          array.push(this.createText(\"sentence\"));\n        }\n        text = array.join(\" \");\n        break;\n      case \"paragraph\":\n        n = this.randomLength(2, 10);\n        for (let i = 0; i < n; i++) {\n          sentences.push(this.createText(\"sentence\"));\n        }\n        text = sentences.join(\" \");\n        break;\n      case \"sentence\":\n        n = this.randomLength(5, 30);\n        for (let i = 0; i < n; i++) {\n          words.push(this.createText(\"word\"));\n        }\n        words[0] = words[0].substring(0, 1).toUpperCase() + words[0].substring(1);\n        text = `${words.join(\" \")}.`.replace(/(\\.,|,\\.)/g, \".\");\n        break;\n      case \"word\":\n        text = this.dictionary[this.randomLength(0, this.dictionary.length - 1)];\n        break;\n    }\n    return text;\n  }\n  /** Dictionnaire de mots. */\n  get dictionary() {\n    return dictionary;\n  }\n  randomLength(min, max) {\n    if (min < 0 || max < min) {\n      return this.randomLength(1, 10);\n    }\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n  render() {\n    if (this.count < 1) {\n      this.count = 1;\n    }\n    return html` <div part=\"base\" class=\"lorem-ipsum prose\">${this.renderTemplate()}</div> `;\n  }\n  renderTemplate() {\n    let template = html``;\n    switch (this.type) {\n      case \"dlist\":\n        template = this.renderList(\"dl\", this.count);\n        break;\n      case \"olist\":\n        template = this.renderList(\"ol\", this.count);\n        break;\n      case \"paragraph\":\n        template = this.renderParagraph(this.count);\n        break;\n      case \"sentence\":\n        template = this.renderSentence(this.count);\n        break;\n      case \"ulist\":\n        template = this.renderList(\"ul\", this.count);\n        break;\n      case \"word\":\n        template = this.renderWord(this.count);\n        break;\n    }\n    return template;\n  }\n  renderList(tag = \"ul\", nbListItems = 1) {\n    const items = [];\n    for (let i = 0; i < nbListItems; i++) {\n      items.push(this.createText(\"olist\"));\n    }\n    let template = html`${items.map((item) => html`<li>${item}</li>`)}`;\n    const dlTemplate = html`${items.map(\n      (item) => html`<dt>${this.createTerm()}</dt>\n          <dd>${item}</dd>`\n    )}`;\n    switch (tag) {\n      case \"ol\":\n        template = html`<ol part=\"olist\">\n          ${template}\n        </ol>`;\n        break;\n      case \"dl\":\n        template = html`<dl part=\"dlist\">${dlTemplate}</dl>`;\n        break;\n      case \"ul\":\n      default:\n        template = html`<ul part=\"ulist\">\n          ${template}\n        </ul>`;\n    }\n    return template;\n  }\n  renderParagraph(nbParagraphs = 1) {\n    const paragraphs = [];\n    for (let i = 0; i < nbParagraphs; i++) {\n      paragraphs.push(this.createText(\"paragraph\"));\n    }\n    return html`${paragraphs.map((paragraph) => html`<p part=\"paragraph\">${paragraph}</p>`)}`;\n  }\n  renderSentence(nbSentences = 1) {\n    const sentences = [];\n    for (let i = 0; i < nbSentences; i++) {\n      sentences.push(this.createText(\"sentence\"));\n    }\n    return html`<p part=\"sentence\">${sentences.map((sentence) => html`${sentence}<br />`)}</p>`;\n  }\n  renderWord(nbWords = 1) {\n    const words = [];\n    for (let i = 0; i < nbWords; i++) {\n      words.push(this.createText(\"word\"));\n    }\n    return html`<p part=\"word\">${words.map((word) => html`${word} `)}</p>`;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LoremIpsumIt",
          "declaration": {
            "name": "LoremIpsumIt",
            "module": "dist/chunks/chunk.OEYTNOFN.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.QCOJGQZJ.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "colorNames",
          "type": {
            "text": "array"
          },
          "default": "[\n  \"gray\",\n  \"red\",\n  \"orange\",\n  \"amber\",\n  \"yellow\",\n  \"lime\",\n  \"green\",\n  \"emerald\",\n  \"teal\",\n  \"cyan\",\n  \"sky\",\n  \"blue\",\n  \"indigo\",\n  \"violet\",\n  \"purple\",\n  \"fuchsia\",\n  \"pink\",\n  \"rose\"\n]"
        },
        {
          "kind": "variable",
          "name": "ColorIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super();\n    this.color = \"purple\";\n    this.range = 5;\n    this.size = \"small\";\n    this.initLocalStorage();\n    this.setPrimaryColor();\n  }\n  /** Couleur principale du thème à l'aide des primitives [`shoelace`](https://shoelace.style/tokens/color). */\n  cssPrimaryColor() {\n    return `\n      :root,\n      .sl-theme-light,\n      .sl-theme-dark {\n        --sl-color-primary-50: var(--sl-color-${this.color}-50);\n        --sl-color-primary-100: var(--sl-color-${this.color}-100);\n        --sl-color-primary-200: var(--sl-color-${this.color}-200);\n        --sl-color-primary-300: var(--sl-color-${this.color}-300);\n        --sl-color-primary-400: var(--sl-color-${this.color}-400);\n        --sl-color-primary-500: var(--sl-color-${this.color}-500);\n        --sl-color-primary-600: var(--sl-color-${this.color}-600);\n        --sl-color-primary-700: var(--sl-color-${this.color}-700);\n        --sl-color-primary-800: var(--sl-color-${this.color}-800);\n        --sl-color-primary-900: var(--sl-color-${this.color}-900);\n        --sl-color-primary-950: var(--sl-color-${this.color}-950);\n        --color-primary: var(--sl-color-primary-${this.range}00);\n        --color-success: var(--sl-color-success-500);\n        --color-warning: var(--sl-color-warning-500);\n        --color-danger: var(--sl-color-danger-500);\n        --color-neutral: var(--sl-color-neutral-500);\n      }\n    `;\n  }\n  /** Couleurs disponibles */\n  get colors() {\n    return colorNames.map((color) => {\n      return { name: color, value: `var(--sl-color-${color}-${this.range}00);` };\n    });\n  }\n  handleChangeRange(event) {\n    const range = event.target;\n    this.range = range.value;\n    this.setPrimaryColor();\n  }\n  initLocalStorage() {\n    const color = localStorage.getItem(\"color\");\n    const range = localStorage.getItem(\"range\");\n    if (!color) {\n      localStorage.setItem(\"color\", this.color);\n    } else {\n      this.color = color;\n    }\n    if (!range) {\n      localStorage.setItem(\"range\", `${this.range}`);\n    } else {\n      this.range = parseInt(range);\n    }\n  }\n  render() {\n    return html`\n      <div part=\"base\" class=\"primary-color\">\n        <sl-dropdown hoist>\n          <sl-button size=${this.size} slot=\"trigger\" caret>\n            <span style=\"color:var(--color-primary)\">${svgIcon(\"mdi-palette-outline\")}</span>\n          </sl-button>\n          <div class=\"primary-color__colors\">\n            ${this.colors.map(\n      (item) => html`\n                <div class='primary-color__colors__color' @click=${() => {\n        this.color = item.name;\n        this.setPrimaryColor();\n      }}>\n                  <span title=${item.name} style=\"cursor:pointer;font-size:2em;color:${item.value}\">${svgIcon(\"mdi-square-rounded\")}\n                </div>\n              `\n    )}\n          </div>\n          <div class=\"primary-color__ranges\">\n            <sl-range\n              min=\"1\"\n              max=\"9\"\n              step=\"1\"\n              tooltip=\"top\"\n              .value=${this.range}\n              @sl-change=${this.handleChangeRange}\n            ></sl-range>\n          </div>\n        </sl-dropdown>\n      </div>\n    `;\n  }\n  /** Modifie la couleur principale du thème. */\n  setPrimaryColor() {\n    localStorage.color = this.color;\n    localStorage.range = this.range;\n    let styleElement = document.querySelector(\"style#colors\");\n    if (!styleElement) {\n      styleElement = document.createElement(\"style\");\n      styleElement.id = \"colors\";\n      document.head.appendChild(styleElement);\n    }\n    styleElement.innerHTML = this.cssPrimaryColor();\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "colorNames",
          "declaration": {
            "name": "colorNames",
            "module": "dist/chunks/chunk.QCOJGQZJ.js"
          }
        },
        {
          "kind": "js",
          "name": "ColorIt",
          "declaration": {
            "name": "ColorIt",
            "module": "dist/chunks/chunk.QCOJGQZJ.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.R22ATCUL.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ClockIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this._state = 3 /* none */;\n    this._time = getTime();\n    this.date = false;\n    this.time = false;\n    this.size = \"small\";\n  }\n  firstUpdated(_changedProperties) {\n    const that = this;\n    setInterval(() => that.setClock(), 1e3);\n    if (this.hasAttribute(\"time\") && this.hasAttribute(\"date\")) {\n      this._state = 1 /* both */;\n    } else {\n      if (this.hasAttribute(\"time\")) {\n        this._state = 0 /* time */;\n      } else {\n        if (this.hasAttribute(\"date\")) {\n          this._state = 2 /* date */;\n        } else {\n          this._state = 3 /* none */;\n        }\n      }\n    }\n  }\n  handleClickButton() {\n    this._state = (this._state + 1) % 4;\n    switch (this._state) {\n      case 0 /* time */:\n        this.date = false;\n        this.time = true;\n        break;\n      case 1 /* both */:\n        this.date = true;\n        this.time = true;\n        break;\n      case 2 /* date */:\n        this.date = true;\n        this.time = false;\n        break;\n      case 3 /* none */:\n        this.date = false;\n        this.time = false;\n        break;\n    }\n  }\n  render() {\n    const size = [\"small\", \"medium\", \"large\"].includes(this.size) ? this.size : \"small\";\n    return html`\n      <sl-button part=\"base\" size=${size} @click=${() => this.handleClickButton()}>\n        <span class=\"clock__date\">${this.date ? html`${getDate()}` : html``}</span>\n        ${svgIcon(\"mdi-calendar-clock-outline\")}\n        <span class=\"clock__time\">${this.time ? html`${this._time}` : html``}</span>\n      </sl-button>\n    `;\n  }\n  setClock() {\n    this._time = getTime();\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ClockIt",
          "declaration": {
            "name": "ClockIt",
            "module": "dist/chunks/chunk.R22ATCUL.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.UJCKPGYB.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "language"
        },
        {
          "kind": "function",
          "name": "getDate",
          "parameters": [
            {
              "name": "lang",
              "default": "language"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getDay",
          "parameters": [
            {
              "name": "lang",
              "default": "language"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getTime",
          "parameters": [
            {
              "name": "lang",
              "default": "language"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "language",
          "declaration": {
            "name": "language",
            "module": "dist/chunks/chunk.UJCKPGYB.js"
          }
        },
        {
          "kind": "js",
          "name": "getDate",
          "declaration": {
            "name": "getDate",
            "module": "dist/chunks/chunk.UJCKPGYB.js"
          }
        },
        {
          "kind": "js",
          "name": "getDay",
          "declaration": {
            "name": "getDay",
            "module": "dist/chunks/chunk.UJCKPGYB.js"
          }
        },
        {
          "kind": "js",
          "name": "getTime",
          "declaration": {
            "name": "getTime",
            "module": "dist/chunks/chunk.UJCKPGYB.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.WM7LJGED.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getKeymap"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getKeymap",
          "declaration": {
            "name": "getKeymap",
            "module": "dist/chunks/chunk.WM7LJGED.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.WOYD4EOF.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PythonIt",
          "default": "class extends PlaygroundIt {\n  constructor() {\n    super();\n    this.language = \"python\";\n    this.initialHead = `\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/brython/3.12.0/brython.min.js\"><\\/script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/brython/3.12.0/brython_stdlib.min.js\"><\\/script>\n`;\n  }\n  get answer() {\n    throw new Error(\"Method not implemented.\");\n  }\n  compile(input) {\n    let output = `\n<script type=\"text/python\">\n${input}\n<\\/script>\n`;\n    return output;\n  }\n  reset() {\n    throw new Error(\"Method not implemented.\");\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PythonIt",
          "declaration": {
            "name": "PythonIt",
            "module": "dist/chunks/chunk.WOYD4EOF.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.WVRMIH3T.js",
      "declarations": [
        {
          "kind": "function",
          "name": "setBasePath",
          "parameters": [
            {
              "name": "path"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getBasePath",
          "parameters": [
            {
              "name": "subpath",
              "default": "\"\""
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "setBasePath",
          "declaration": {
            "name": "setBasePath",
            "module": "dist/chunks/chunk.WVRMIH3T.js"
          }
        },
        {
          "kind": "js",
          "name": "getBasePath",
          "declaration": {
            "name": "getBasePath",
            "module": "dist/chunks/chunk.WVRMIH3T.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.XB25AVCC.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ToolbarIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.fixed = false;\n    this.placement = \"top\";\n  }\n  render() {\n    const classes = {\n      toolbar: true,\n      toolbar__top: this.fixed && this.placement === \"top\",\n      toolbar__bottom: this.fixed && this.placement === \"bottom\"\n    };\n    return html`\n      <div part=\"base\" class=${classMap(classes)}>\n        <div part=\"start\" class=\"toolbar__start\">\n          <slot name=\"start\"></slot>\n        </div>\n        <div part=\"center\" class=\"toolbar__center\">\n          <slot name=\"center\"></slot>\n        </div>\n        <div part=\"end\" class=\"toolbar__end\">\n          <slot name=\"end\"></slot>\n        </div>\n      </div>\n    `;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToolbarIt",
          "declaration": {
            "name": "ToolbarIt",
            "module": "dist/chunks/chunk.XB25AVCC.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chunks/chunk.YDVEUJDG.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ThemeIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super();\n    this.size = \"small\";\n    this.theme = this.getTheme();\n  }\n  createListeners() {\n    this.menu.addEventListener(\"sl-select\", (event) => {\n      const ev = event;\n      this.setTheme(ev.detail.item.value);\n    });\n    window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", () => this.setTheme(this.theme));\n    document.addEventListener(\"keydown\", (event) => {\n      const elements = event.composedPath();\n      if (event.key === \"\\\\\" && !elements.some((el) => [\"input\", \"textarea\"].includes(el.tagName?.toLowerCase()))) {\n        event.preventDefault();\n        this.setTheme(this.isDark() ? \"light\" : \"dark\");\n      }\n    });\n  }\n  firstUpdated(_changedProperties) {\n    this.setTheme(this.theme);\n    this.createListeners();\n  }\n  /** Thème (défaut : `system`) */\n  getTheme() {\n    return localStorage.getItem(\"theme\") || \"system\";\n  }\n  /** Teste si le thème courant est le thème `dark`. */\n  isDark() {\n    if (this.theme === \"system\") {\n      return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    }\n    return this.theme === \"dark\";\n  }\n  render() {\n    return html`\n      <sl-dropdown class=\"theme\" hoist>\n        <sl-button size=${this.size} slot=\"trigger\" caret>\n          ${this.isDark() ? html`<span style=\"color:var(--sl-color-yellow-500)\">${svgIcon(\"mdi-weather-night\")}</span>` : html`<span style=\"color:var(--sl-color-yellow-500)\">${svgIcon(\"mdi-white-balance-sunny\")}</span>`}\n        </sl-button>\n        <sl-menu>\n          <sl-menu-item type=\"checkbox\" value=\"light\">Clair</sl-menu-item>\n          <sl-menu-item type=\"checkbox\" value=\"dark\">Sombre</sl-menu-item>\n          <sl-divider></sl-divider>\n          <sl-menu-item type=\"checkbox\" value=\"system\">System</sl-menu-item>\n        </sl-menu>\n      </sl-dropdown>\n    `;\n  }\n  /** Change le thème. */\n  setTheme(newTheme) {\n    const noTransitions = Object.assign(document.createElement(\"style\"), {\n      textContent: \"* { transition: none !important; }\"\n    });\n    this.theme = newTheme;\n    localStorage.setItem(\"theme\", this.theme);\n    [...this.menu.querySelectorAll(\"sl-menu-item\")].map(\n      (item) => item.checked = item.getAttribute(\"value\") === this.theme\n    );\n    document.body.appendChild(noTransitions);\n    requestAnimationFrame(() => {\n      document.documentElement.classList.toggle(\"sl-theme-dark\", this.isDark());\n      document.documentElement.classList.toggle(\"sl-theme-light\", !this.isDark());\n      requestAnimationFrame(() => document.body.removeChild(noTransitions));\n    });\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ThemeIt",
          "declaration": {
            "name": "ThemeIt",
            "module": "dist/chunks/chunk.YDVEUJDG.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utilities/asciidoc.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "AsciidoctorProcessor",
          "declaration": {
            "name": "AsciiDoctor",
            "module": "dist/utilities/asciidoc.js"
          }
        },
        {
          "kind": "js",
          "name": "AsciidoctorType",
          "declaration": {
            "name": "Asciidoctor",
            "module": "dist/utilities/asciidoc.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utilities/base-path.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "getBasePath",
          "declaration": {
            "name": "getBasePath",
            "module": "dist/utilities/base-path.js"
          }
        },
        {
          "kind": "js",
          "name": "setBasePath",
          "declaration": {
            "name": "setBasePath",
            "module": "dist/utilities/base-path.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utilities/date.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "getDate",
          "declaration": {
            "name": "getDate",
            "module": "dist/utilities/date.js"
          }
        },
        {
          "kind": "js",
          "name": "getDay",
          "declaration": {
            "name": "getDay",
            "module": "dist/utilities/date.js"
          }
        },
        {
          "kind": "js",
          "name": "getTime",
          "declaration": {
            "name": "getTime",
            "module": "dist/utilities/date.js"
          }
        },
        {
          "kind": "js",
          "name": "language",
          "declaration": {
            "name": "language",
            "module": "dist/utilities/date.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utilities/dedent.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "dedentText",
          "declaration": {
            "name": "dedentText",
            "module": "dist/utilities/dedent.js"
          }
        },
        {
          "kind": "js",
          "name": "indentString",
          "declaration": {
            "name": "indentString",
            "module": "dist/utilities/dedent.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utilities/emit.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "emit",
          "declaration": {
            "name": "emit",
            "module": "dist/utilities/emit.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utilities/icons.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "icons",
          "declaration": {
            "name": "icons",
            "module": "dist/utilities/icons.js"
          }
        },
        {
          "kind": "js",
          "name": "svgIcon",
          "declaration": {
            "name": "svgIcon",
            "module": "dist/utilities/icons.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utilities/request.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "fetchContent",
          "declaration": {
            "name": "fetchContent",
            "module": "dist/utilities/request.js"
          }
        },
        {
          "kind": "js",
          "name": "fetchSrc",
          "declaration": {
            "name": "fetchSrc",
            "module": "dist/utilities/request.js"
          }
        },
        {
          "kind": "js",
          "name": "requestIncludeFile",
          "declaration": {
            "name": "requestIncludeFile",
            "module": "dist/utilities/request.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utilities/run-script.js",
      "declarations": [
        {
          "kind": "function",
          "name": "runScript",
          "parameters": [
            {
              "name": "script"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "runScript",
          "declaration": {
            "name": "runScript",
            "module": "dist/utilities/run-script.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utilities/system.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "system",
          "declaration": {
            "name": "system",
            "module": "dist/utilities/system.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.32VZXDFR.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ToggleIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.elements = [];\n    this._toshow = false;\n    this.selector = \"unknown\";\n    this.size = \"small\";\n    this.textShow = \"mdi-show-outline\";\n    this.textHide = \"mdi-hide-outline\";\n    this.tooltipShow = SHOW;\n    this.tooltipHide = HIDE;\n    this.destructuring = false;\n  }\n  firstUpdated(_changedProperties) {\n    const that = this;\n    if (this.tooltipShow === SHOW) {\n      this.tooltipShow += ` \\xAB ${this.selector} \\xBB`;\n    }\n    if (this.tooltipHide === HIDE) {\n      this.tooltipHide += ` \\xAB ${this.selector} \\xBB`;\n    }\n    this.elements = Array.from(document.body.querySelectorAll(this.selector)).filter((element) => !element.contains(that));\n  }\n  render() {\n    const textShow = Object.keys(icons).includes(this.textShow) ? svgIcon(this.textShow) : x`${this.textShow}`;\n    const textHide = Object.keys(icons).includes(this.textHide) ? svgIcon(this.textHide) : x`${this.textHide}`;\n    return x`\n      <sl-tooltip content=${this._toshow ? this.tooltipShow : this.tooltipHide} hoist>\n        <sl-button size=${this.size} @click=${() => this.toggleSelector()}>\n          ${this._toshow ? textShow : textHide}\n        </sl-button>\n      </sl-tooltip>\n    `;\n  }\n  toggleSelector() {\n    const that = this;\n    for (const element of that.elements) {\n      if (that._toshow) {\n        element.style.visibility = \"visible\";\n        element.style.display = \"\";\n      } else {\n        if (that.destructuring) {\n          element.style.display = \"none\";\n        } else {\n          element.style.visibility = \"hidden\";\n        }\n      }\n    }\n    this._toshow = !this._toshow;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleIt",
          "declaration": {
            "name": "ToggleIt",
            "module": "cdn/chunks/chunk.32VZXDFR.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.3IXWQSYW.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "frenchPhrases",
          "type": {
            "text": "object"
          },
          "default": "{\n  // @codemirror/view\n  \"Control character\": \"caract\\xE8re de contr\\xF4le\",\n  // @codemirror/commands\n  \"Selection deleted\": \"s\\xE9lection supprim\\xE9e\",\n  // @codemirror/language\n  \"Folded lines\": \"lignes pli\\xE9es\",\n  \"Unfolded lines\": \"lignes d\\xE9pli\\xE9es\",\n  to: \"\\xE0\",\n  \"folded code\": \"code pli\\xE9\",\n  unfold: \"d\\xE9plier\",\n  \"Fold line\": \"plier la ligne\",\n  \"Unfold line\": \"d\\xE9plier la ligne\",\n  // @codemirror/search\n  \"Go to line\": \"atteindre la ligne (ligne:colonne) \",\n  go: \"ok\",\n  Find: \"chercher\",\n  Replace: \"remplacer\",\n  next: \"suivant\",\n  previous: \"pr\\xE9c\\xE9dent\",\n  all: \"tout\",\n  \"match case\": \"respecter la casse\",\n  \"by word\": \"mot entier\",\n  regexp: \"expression r\\xE9guli\\xE8re\",\n  replace: \"remplacer\",\n  \"replace all\": \"remplacer tout\",\n  close: \"fermer\",\n  \"current match\": \"correspondance courante\",\n  \"replaced $ matches\": \"$ correspondances remplac\\xE9es\",\n  \"replaced match on line $\": \"correspondance remplac\\xE9e \\xE0 la ligne $\",\n  \"on line\": \"en ligne\",\n  // @codemirror/autocomplete\n  Completions: \"compl\\xE9tions\",\n  // @codemirror/lint\n  Diagnostics: \"diagnostics\",\n  \"No diagnostics\": \"pas de diagnostic\"\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "frenchPhrases",
          "declaration": {
            "name": "frenchPhrases",
            "module": "cdn/chunks/chunk.3IXWQSYW.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.3MD4PXHQ.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PlaygroundIt",
          "default": "class extends AnswerForm {\n  constructor() {\n    super(...arguments);\n    this.initialCode = \"\";\n    this.initialCompiledCode = \"\";\n    this.initialHead = \"\";\n    this.initialHeader = \"\";\n    this.initialMain = \"\";\n    this.initialFooter = \"\";\n    this.full = false;\n    this.language = \"text\";\n    this.readOnly = false;\n    this.codeFilename = \"\";\n    this.prefixFilename = \"\";\n    this.suffixFilename = \"\";\n    this.mainFilename = \"\";\n    this.headFilename = \"\";\n    this.headerFilename = \"\";\n    this.footerFilename = \"\";\n  }\n  compile(input) {\n    return input;\n  }\n  createEditor() {\n    const initialCode = `<script type=\"enibook/src\">${this.initialCode}<\\/script>`;\n    const editor = new CodeIt();\n    editor.classList.add(\"playground__editor__script\");\n    editor.language = this.language;\n    editor.readOnly = this.readOnly;\n    editor.lineNumbers = true;\n    editor.innerHTML = initialCode;\n    return editor;\n  }\n  createFrame() {\n    const initialHead = `<script type=\"enibook/head\">${this.initialHead}<\\/script>`;\n    const initialHeader = `<script type=\"enibook/header\">${this.initialHeader}<\\/script>`;\n    const initialMain = `<script type=\"enibook/main\">${this.initialCompiledCode}<\\/script>`;\n    const initialFooter = `<script type=\"enibook/footer\">${this.initialFooter}<\\/script>`;\n    const frame = new FrameIt();\n    frame.classList.add(\"playground__frame\");\n    frame.border = true;\n    frame.innerHTML = `\n      ${initialHead}\n      ${initialHeader}\n      ${initialMain}\n      ${initialFooter}\n    `;\n    return frame;\n  }\n  createListener() {\n    this.addEventListener(\"sl-resize\", (event) => {\n      const ev = event;\n      const entries = ev.detail.entries;\n      if (entries.length) {\n        const height = entries[0].contentRect.height;\n        this.frameElement.style.height = `${height}px`;\n        this.frameElement.resizeIFrameHeight(height);\n      }\n    });\n    this.addEventListener(\"editor-change-it\", () => {\n      this.frame.srcDoc = this.frame.getTemplate({\n        head: this.initialHead,\n        header: this.initialHeader,\n        main: this.compile(this.editor.value),\n        footer: this.initialFooter\n      });\n    });\n  }\n  async firstUpdated(_changedProperties) {\n    this.initialHead += await this.getCode(this.headFilename, \"head\");\n    this.initialHeader += await this.getCode(this.headerFilename, \"header\");\n    this.initialFooter += await this.getCode(this.footerFilename, \"footer\");\n    this.initialMain += await this.getCode(this.mainFilename, \"main\");\n    this.initialCode += await this.getCode(this.codeFilename, \"src\");\n    this.initialCompiledCode += this.compile(this.initialCode);\n    console.log(this.initialCompiledCode);\n    this.editor = this.createEditor();\n    this.frame = this.createFrame();\n    this.scriptEditorElement.appendChild(this.editor);\n    this.baseElement.appendChild(this.frame);\n    this.createListener();\n  }\n  get answer() {\n    throw new Error(\"Method not implemented.\");\n  }\n  render() {\n    return x(_a || (_a = __template(['\\n      <sl-tab-group>\\n        <sl-tab slot=\"nav\" panel=\"script\">Script ', '</sl-tab>\\n        <sl-tab slot=\"nav\" panel=\"web\">Page Web</sl-tab>\\n\\n        <sl-tab-panel name=\"web\">\\n          <sl-tab-group>\\n            <sl-tab slot=\"nav\" panel=\"page\">Page</sl-tab>\\n            <sl-tab slot=\"nav\" panel=\"head\">Head</sl-tab>\\n            <sl-tab slot=\"nav\" panel=\"css\">Style</sl-tab>\\n            <sl-tab slot=\"nav\" panel=\"header\">Header</sl-tab>\\n            <sl-tab slot=\"nav\" panel=\"main\">Main</sl-tab>\\n            <sl-tab slot=\"nav\" panel=\"footer\">Footer</sl-tab>\\n\\n            <sl-tab-panel name=\"page\">\\n              <code-it language=\"html\" read-only>\\n                <script type=\"enibook/src\"><p>hello</p><\\/script>\\n              </code-it>\\n            </sl-tab-panel>\\n            <sl-tab-panel name=\"head\">\\n              <code-it language=\"html\">\\n                <script type=\"enibook/src\">', '<\\/script>\\n              </code-it>\\n            </sl-tab-panel>\\n            <sl-tab-panel name=\"header\">\\n              <code-it language=\"html\">\\n                <script type=\"enibook/src\">', '<\\/script>\\n              </code-it>\\n            </sl-tab-panel>\\n            <sl-tab-panel name=\"footer\">\\n              <code-it language=\"html\" read-only>\\n                <script type=\"enibook/src\">', '<\\/script>\\n              </code-it>\\n            </sl-tab-panel>\\n            <sl-tab-panel name=\"css\"></sl-tab-panel>\\n          </sl-tab-group>\\n        </sl-tab-panel>\\n        <sl-tab-panel name=\"script\">\\n        </sl-tab-panel>\\n      </sl-tab-group>\\n      <div part=\"base\" class=\"playground-it\"></div>\\n\\n    '])), this.language, this.initialHead, this.initialHeader, this.initialCompiledCode);\n  }\n  reset() {\n    throw new Error(\"Method not implemented.\");\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PlaygroundIt",
          "declaration": {
            "name": "PlaygroundIt",
            "module": "cdn/chunks/chunk.3MD4PXHQ.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.3MHYCZMG.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "IconIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.name = \"mdi-block-helper\";\n  }\n  firstUpdated(_changedProperties) {\n    if (!Object.keys(icons).includes(this.name)) {\n      console.log();\n      this.name = \"mdi-block-helper\";\n    }\n  }\n  render() {\n    return x`${svgIcon(this.name)}`;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IconIt",
          "declaration": {
            "name": "IconIt",
            "module": "cdn/chunks/chunk.3MHYCZMG.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.3U77ADR2.js",
      "declarations": [
        {
          "kind": "function",
          "name": "toggleComment",
          "parameters": [
            {
              "name": "target"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "toggleBlockComment"
        },
        {
          "kind": "function",
          "name": "history",
          "parameters": [
            {
              "name": "config",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "undo"
        },
        {
          "kind": "variable",
          "name": "redo"
        },
        {
          "kind": "variable",
          "name": "historyKeymap",
          "type": {
            "text": "array"
          },
          "default": "[\n  { key: \"Mod-z\", run: undo, preventDefault: true },\n  { key: \"Mod-y\", mac: \"Mod-Shift-z\", run: redo, preventDefault: true },\n  { linux: \"Ctrl-Shift-z\", run: redo, preventDefault: true },\n  { key: \"Mod-u\", run: undoSelection, preventDefault: true },\n  { key: \"Alt-u\", mac: \"Mod-Shift-u\", run: redoSelection, preventDefault: true }\n]"
        },
        {
          "kind": "function",
          "name": "indentMore",
          "parameters": [
            {
              "name": "{ state, dispatch }"
            }
          ]
        },
        {
          "kind": "function",
          "name": "indentLess",
          "parameters": [
            {
              "name": "{ state, dispatch }"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "defaultKeymap"
        },
        {
          "kind": "variable",
          "name": "indentWithTab",
          "type": {
            "text": "object"
          },
          "default": "{ key: \"Tab\", run: indentMore, shift: indentLess }"
        },
        {
          "kind": "function",
          "name": "crelt"
        },
        {
          "kind": "function",
          "name": "gotoLine",
          "parameters": [
            {
              "name": "view"
            }
          ]
        },
        {
          "kind": "function",
          "name": "highlightSelectionMatches",
          "parameters": [
            {
              "name": "options"
            }
          ]
        },
        {
          "kind": "function",
          "name": "openSearchPanel",
          "parameters": [
            {
              "name": "view"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "searchKeymap",
          "type": {
            "text": "array"
          },
          "default": "[\n  { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\n  { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n  { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n  { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\n  { key: \"Mod-Shift-l\", run: selectSelectionMatches },\n  { key: \"Mod-Alt-g\", run: gotoLine },\n  { key: \"Mod-d\", run: selectNextOccurrence, preventDefault: true }\n]"
        },
        {
          "kind": "function",
          "name": "getKeymap"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "toggleComment",
          "declaration": {
            "name": "toggleComment",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "toggleBlockComment",
          "declaration": {
            "name": "toggleBlockComment",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "history",
          "declaration": {
            "name": "history",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "undo",
          "declaration": {
            "name": "undo",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "redo",
          "declaration": {
            "name": "redo",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "historyKeymap",
          "declaration": {
            "name": "historyKeymap",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "indentMore",
          "declaration": {
            "name": "indentMore",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "indentLess",
          "declaration": {
            "name": "indentLess",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "defaultKeymap",
          "declaration": {
            "name": "defaultKeymap",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "indentWithTab",
          "declaration": {
            "name": "indentWithTab",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "crelt",
          "declaration": {
            "name": "crelt",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "gotoLine",
          "declaration": {
            "name": "gotoLine",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "highlightSelectionMatches",
          "declaration": {
            "name": "highlightSelectionMatches",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "openSearchPanel",
          "declaration": {
            "name": "openSearchPanel",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "searchKeymap",
          "declaration": {
            "name": "searchKeymap",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        },
        {
          "kind": "js",
          "name": "getKeymap",
          "declaration": {
            "name": "getKeymap",
            "module": "cdn/chunks/chunk.3U77ADR2.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.7OGJEFTL.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "SlPopup",
          "default": "class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.active = false;\n    this.placement = \"top\";\n    this.strategy = \"absolute\";\n    this.distance = 0;\n    this.skidding = 0;\n    this.arrow = false;\n    this.arrowPlacement = \"anchor\";\n    this.arrowPadding = 10;\n    this.flip = false;\n    this.flipFallbackPlacements = \"\";\n    this.flipFallbackStrategy = \"best-fit\";\n    this.flipPadding = 0;\n    this.shift = false;\n    this.shiftPadding = 0;\n    this.autoSizePadding = 0;\n    this.hoverBridge = false;\n    this.updateHoverBridge = () => {\n      if (this.hoverBridge && this.anchorEl) {\n        const anchorRect = this.anchorEl.getBoundingClientRect();\n        const popupRect = this.popup.getBoundingClientRect();\n        const isVertical = this.placement.includes(\"top\") || this.placement.includes(\"bottom\");\n        let topLeftX = 0;\n        let topLeftY = 0;\n        let topRightX = 0;\n        let topRightY = 0;\n        let bottomLeftX = 0;\n        let bottomLeftY = 0;\n        let bottomRightX = 0;\n        let bottomRightY = 0;\n        if (isVertical) {\n          if (anchorRect.top < popupRect.top) {\n            topLeftX = anchorRect.left;\n            topLeftY = anchorRect.bottom;\n            topRightX = anchorRect.right;\n            topRightY = anchorRect.bottom;\n            bottomLeftX = popupRect.left;\n            bottomLeftY = popupRect.top;\n            bottomRightX = popupRect.right;\n            bottomRightY = popupRect.top;\n          } else {\n            topLeftX = popupRect.left;\n            topLeftY = popupRect.bottom;\n            topRightX = popupRect.right;\n            topRightY = popupRect.bottom;\n            bottomLeftX = anchorRect.left;\n            bottomLeftY = anchorRect.top;\n            bottomRightX = anchorRect.right;\n            bottomRightY = anchorRect.top;\n          }\n        } else {\n          if (anchorRect.left < popupRect.left) {\n            topLeftX = anchorRect.right;\n            topLeftY = anchorRect.top;\n            topRightX = popupRect.left;\n            topRightY = popupRect.top;\n            bottomLeftX = anchorRect.right;\n            bottomLeftY = anchorRect.bottom;\n            bottomRightX = popupRect.left;\n            bottomRightY = popupRect.bottom;\n          } else {\n            topLeftX = popupRect.right;\n            topLeftY = popupRect.top;\n            topRightX = anchorRect.left;\n            topRightY = anchorRect.top;\n            bottomLeftX = popupRect.right;\n            bottomLeftY = popupRect.bottom;\n            bottomRightX = anchorRect.left;\n            bottomRightY = anchorRect.bottom;\n          }\n        }\n        this.style.setProperty(\"--hover-bridge-top-left-x\", `${topLeftX}px`);\n        this.style.setProperty(\"--hover-bridge-top-left-y\", `${topLeftY}px`);\n        this.style.setProperty(\"--hover-bridge-top-right-x\", `${topRightX}px`);\n        this.style.setProperty(\"--hover-bridge-top-right-y\", `${topRightY}px`);\n        this.style.setProperty(\"--hover-bridge-bottom-left-x\", `${bottomLeftX}px`);\n        this.style.setProperty(\"--hover-bridge-bottom-left-y\", `${bottomLeftY}px`);\n        this.style.setProperty(\"--hover-bridge-bottom-right-x\", `${bottomRightX}px`);\n        this.style.setProperty(\"--hover-bridge-bottom-right-y\", `${bottomRightY}px`);\n      }\n    };\n  }\n  async connectedCallback() {\n    super.connectedCallback();\n    await this.updateComplete;\n    this.start();\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.stop();\n  }\n  async updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"active\")) {\n      if (this.active) {\n        this.start();\n      } else {\n        this.stop();\n      }\n    }\n    if (changedProps.has(\"anchor\")) {\n      this.handleAnchorChange();\n    }\n    if (this.active) {\n      await this.updateComplete;\n      this.reposition();\n    }\n  }\n  async handleAnchorChange() {\n    await this.stop();\n    if (this.anchor && typeof this.anchor === \"string\") {\n      const root = this.getRootNode();\n      this.anchorEl = root.getElementById(this.anchor);\n    } else if (this.anchor instanceof Element || isVirtualElement(this.anchor)) {\n      this.anchorEl = this.anchor;\n    } else {\n      this.anchorEl = this.querySelector('[slot=\"anchor\"]');\n    }\n    if (this.anchorEl instanceof HTMLSlotElement) {\n      this.anchorEl = this.anchorEl.assignedElements({ flatten: true })[0];\n    }\n    if (this.anchorEl) {\n      this.start();\n    }\n  }\n  start() {\n    if (!this.anchorEl) {\n      return;\n    }\n    this.cleanup = autoUpdate(this.anchorEl, this.popup, () => {\n      this.reposition();\n    });\n  }\n  async stop() {\n    return new Promise((resolve) => {\n      if (this.cleanup) {\n        this.cleanup();\n        this.cleanup = void 0;\n        this.removeAttribute(\"data-current-placement\");\n        this.style.removeProperty(\"--auto-size-available-width\");\n        this.style.removeProperty(\"--auto-size-available-height\");\n        requestAnimationFrame(() => resolve());\n      } else {\n        resolve();\n      }\n    });\n  }\n  /** Forces the popup to recalculate and reposition itself. */\n  reposition() {\n    if (!this.active || !this.anchorEl) {\n      return;\n    }\n    const middleware = [\n      // The offset middleware goes first\n      offset({ mainAxis: this.distance, crossAxis: this.skidding })\n    ];\n    if (this.sync) {\n      middleware.push(\n        size2({\n          apply: ({ rects }) => {\n            const syncWidth = this.sync === \"width\" || this.sync === \"both\";\n            const syncHeight = this.sync === \"height\" || this.sync === \"both\";\n            this.popup.style.width = syncWidth ? `${rects.reference.width}px` : \"\";\n            this.popup.style.height = syncHeight ? `${rects.reference.height}px` : \"\";\n          }\n        })\n      );\n    } else {\n      this.popup.style.width = \"\";\n      this.popup.style.height = \"\";\n    }\n    if (this.flip) {\n      middleware.push(\n        flip2({\n          boundary: this.flipBoundary,\n          // @ts-expect-error - We're converting a string attribute to an array here\n          fallbackPlacements: this.flipFallbackPlacements,\n          fallbackStrategy: this.flipFallbackStrategy === \"best-fit\" ? \"bestFit\" : \"initialPlacement\",\n          padding: this.flipPadding\n        })\n      );\n    }\n    if (this.shift) {\n      middleware.push(\n        shift2({\n          boundary: this.shiftBoundary,\n          padding: this.shiftPadding\n        })\n      );\n    }\n    if (this.autoSize) {\n      middleware.push(\n        size2({\n          boundary: this.autoSizeBoundary,\n          padding: this.autoSizePadding,\n          apply: ({ availableWidth, availableHeight }) => {\n            if (this.autoSize === \"vertical\" || this.autoSize === \"both\") {\n              this.style.setProperty(\"--auto-size-available-height\", `${availableHeight}px`);\n            } else {\n              this.style.removeProperty(\"--auto-size-available-height\");\n            }\n            if (this.autoSize === \"horizontal\" || this.autoSize === \"both\") {\n              this.style.setProperty(\"--auto-size-available-width\", `${availableWidth}px`);\n            } else {\n              this.style.removeProperty(\"--auto-size-available-width\");\n            }\n          }\n        })\n      );\n    } else {\n      this.style.removeProperty(\"--auto-size-available-width\");\n      this.style.removeProperty(\"--auto-size-available-height\");\n    }\n    if (this.arrow) {\n      middleware.push(\n        arrow2({\n          element: this.arrowEl,\n          padding: this.arrowPadding\n        })\n      );\n    }\n    const getOffsetParent2 = this.strategy === \"absolute\" ? (element) => platform.getOffsetParent(element, t) : platform.getOffsetParent;\n    computePosition2(this.anchorEl, this.popup, {\n      placement: this.placement,\n      middleware,\n      strategy: this.strategy,\n      platform: __spreadProps(__spreadValues({}, platform), {\n        getOffsetParent: getOffsetParent2\n      })\n    }).then(({ x: x2, y, middlewareData, placement }) => {\n      const isRtl = getComputedStyle(this).direction === \"rtl\";\n      const staticSide = { top: \"bottom\", right: \"left\", bottom: \"top\", left: \"right\" }[placement.split(\"-\")[0]];\n      this.setAttribute(\"data-current-placement\", placement);\n      Object.assign(this.popup.style, {\n        left: `${x2}px`,\n        top: `${y}px`\n      });\n      if (this.arrow) {\n        const arrowX = middlewareData.arrow.x;\n        const arrowY = middlewareData.arrow.y;\n        let top = \"\";\n        let right = \"\";\n        let bottom = \"\";\n        let left = \"\";\n        if (this.arrowPlacement === \"start\") {\n          const value = typeof arrowX === \"number\" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : \"\";\n          top = typeof arrowY === \"number\" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : \"\";\n          right = isRtl ? value : \"\";\n          left = isRtl ? \"\" : value;\n        } else if (this.arrowPlacement === \"end\") {\n          const value = typeof arrowX === \"number\" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : \"\";\n          right = isRtl ? \"\" : value;\n          left = isRtl ? value : \"\";\n          bottom = typeof arrowY === \"number\" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : \"\";\n        } else if (this.arrowPlacement === \"center\") {\n          left = typeof arrowX === \"number\" ? `calc(50% - var(--arrow-size-diagonal))` : \"\";\n          top = typeof arrowY === \"number\" ? `calc(50% - var(--arrow-size-diagonal))` : \"\";\n        } else {\n          left = typeof arrowX === \"number\" ? `${arrowX}px` : \"\";\n          top = typeof arrowY === \"number\" ? `${arrowY}px` : \"\";\n        }\n        Object.assign(this.arrowEl.style, {\n          top,\n          right,\n          bottom,\n          left,\n          [staticSide]: \"calc(var(--arrow-size-diagonal) * -1)\"\n        });\n      }\n    });\n    requestAnimationFrame(() => this.updateHoverBridge());\n    this.emit(\"sl-reposition\");\n  }\n  render() {\n    return x`\n      <slot name=\"anchor\" @slotchange=${this.handleAnchorChange}></slot>\n\n      <span\n        part=\"hover-bridge\"\n        class=${e2({\n      \"popup-hover-bridge\": true,\n      \"popup-hover-bridge--visible\": this.hoverBridge && this.active\n    })}\n      ></span>\n\n      <div\n        part=\"popup\"\n        class=${e2({\n      popup: true,\n      \"popup--active\": this.active,\n      \"popup--fixed\": this.strategy === \"fixed\",\n      \"popup--has-arrow\": this.arrow\n    })}\n      >\n        <slot></slot>\n        ${this.arrow ? x`<div part=\"arrow\" class=\"popup__arrow\" role=\"presentation\"></div>` : \"\"}\n      </div>\n    `;\n  }\n}"
        },
        {
          "kind": "function",
          "name": "setDefaultAnimation",
          "parameters": [
            {
              "name": "animationName"
            },
            {
              "name": "animation"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getAnimation",
          "parameters": [
            {
              "name": "el"
            },
            {
              "name": "animationName"
            },
            {
              "name": "options"
            }
          ]
        },
        {
          "kind": "function",
          "name": "waitForEvent",
          "parameters": [
            {
              "name": "el"
            },
            {
              "name": "eventName"
            }
          ]
        },
        {
          "kind": "function",
          "name": "animateTo",
          "parameters": [
            {
              "name": "el"
            },
            {
              "name": "keyframes"
            },
            {
              "name": "options"
            }
          ]
        },
        {
          "kind": "function",
          "name": "parseDuration",
          "parameters": [
            {
              "name": "delay"
            }
          ]
        },
        {
          "kind": "function",
          "name": "stopAnimations",
          "parameters": [
            {
              "name": "el"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SlPopup",
          "declaration": {
            "name": "SlPopup",
            "module": "cdn/chunks/chunk.7OGJEFTL.js"
          }
        },
        {
          "kind": "js",
          "name": "setDefaultAnimation",
          "declaration": {
            "name": "setDefaultAnimation",
            "module": "cdn/chunks/chunk.7OGJEFTL.js"
          }
        },
        {
          "kind": "js",
          "name": "getAnimation",
          "declaration": {
            "name": "getAnimation",
            "module": "cdn/chunks/chunk.7OGJEFTL.js"
          }
        },
        {
          "kind": "js",
          "name": "waitForEvent",
          "declaration": {
            "name": "waitForEvent",
            "module": "cdn/chunks/chunk.7OGJEFTL.js"
          }
        },
        {
          "kind": "js",
          "name": "animateTo",
          "declaration": {
            "name": "animateTo",
            "module": "cdn/chunks/chunk.7OGJEFTL.js"
          }
        },
        {
          "kind": "js",
          "name": "parseDuration",
          "declaration": {
            "name": "parseDuration",
            "module": "cdn/chunks/chunk.7OGJEFTL.js"
          }
        },
        {
          "kind": "js",
          "name": "stopAnimations",
          "declaration": {
            "name": "stopAnimations",
            "module": "cdn/chunks/chunk.7OGJEFTL.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.APOOKVJK.js",
      "declarations": [
        {
          "kind": "function",
          "name": "dedentText",
          "parameters": [
            {
              "name": "text"
            }
          ]
        },
        {
          "kind": "function",
          "name": "indentString",
          "parameters": [
            {
              "name": "indentSize",
              "default": "2"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dedentText",
          "declaration": {
            "name": "dedentText",
            "module": "cdn/chunks/chunk.APOOKVJK.js"
          }
        },
        {
          "kind": "js",
          "name": "indentString",
          "declaration": {
            "name": "indentString",
            "module": "cdn/chunks/chunk.APOOKVJK.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.CB3AWS6T.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "lightTheme"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "lightTheme",
          "declaration": {
            "name": "lightTheme",
            "module": "cdn/chunks/chunk.CB3AWS6T.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.CEYKDXT7.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.CO4X42B5.js",
      "declarations": [
        {
          "kind": "function",
          "name": "system"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "system",
          "declaration": {
            "name": "system",
            "module": "cdn/chunks/chunk.CO4X42B5.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.CWIG22PC.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultOptions",
          "type": {
            "text": "object"
          },
          "default": "{\n  head: \"\",\n  style: \"\",\n  header: \"\",\n  main: \"\",\n  footer: \"\",\n  lang: navigator.language,\n  theme: \"light\",\n  title: \"IFrame\"\n}"
        },
        {
          "kind": "function",
          "name": "templateHTML",
          "parameters": [
            {
              "name": "options",
              "default": "{}"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultOptions",
          "declaration": {
            "name": "defaultOptions",
            "module": "cdn/chunks/chunk.CWIG22PC.js"
          }
        },
        {
          "kind": "js",
          "name": "templateHTML",
          "declaration": {
            "name": "templateHTML",
            "module": "cdn/chunks/chunk.CWIG22PC.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.DK2BFNDL.js",
      "declarations": [
        {
          "kind": "function",
          "name": "requestIncludeFile",
          "parameters": [
            {
              "name": "src"
            },
            {
              "name": "mode",
              "default": "\"cors\""
            }
          ]
        },
        {
          "kind": "function",
          "name": "fetchContent",
          "parameters": [
            {
              "name": "src"
            }
          ]
        },
        {
          "kind": "function",
          "name": "fetchSrc",
          "parameters": [
            {
              "name": "src"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requestIncludeFile",
          "declaration": {
            "name": "requestIncludeFile",
            "module": "cdn/chunks/chunk.DK2BFNDL.js"
          }
        },
        {
          "kind": "js",
          "name": "fetchContent",
          "declaration": {
            "name": "fetchContent",
            "module": "cdn/chunks/chunk.DK2BFNDL.js"
          }
        },
        {
          "kind": "js",
          "name": "fetchSrc",
          "declaration": {
            "name": "fetchSrc",
            "module": "cdn/chunks/chunk.DK2BFNDL.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.DWZIMURE.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ToolsIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.size = \"small\";\n    this.menuItems = [];\n  }\n  firstUpdated(_changedProperties) {\n    this.menuItems = [...this.menu.querySelectorAll(\"sl-menu-item\")];\n  }\n  handleSelectTool(event) {\n    const selectedItem = event.detail.item;\n    selectedItem.toggleAttribute(\"checked\");\n    if (selectedItem.checked) {\n      switch (selectedItem.value) {\n        case \"all\":\n          this.clockElement.removeAttribute(\"hidden\");\n          this.colorElement.removeAttribute(\"hidden\");\n          this.themeElement.removeAttribute(\"hidden\");\n          this.menuItems.forEach((item) => item.checked = true);\n          break;\n        case \"date\":\n          this.clockElement.removeAttribute(\"hidden\");\n          break;\n        case \"theme\":\n          this.themeElement.removeAttribute(\"hidden\");\n          break;\n        case \"color\":\n          this.colorElement.removeAttribute(\"hidden\");\n          break;\n      }\n      if (!this.menuItemAll.checked && this.menuItems.length - 1 === this.menuItems.filter((item) => item.checked).length) {\n        this.menuItemAll.checked = true;\n      }\n    } else {\n      switch (selectedItem.value) {\n        case \"all\":\n          this.clockElement.setAttribute(\"hidden\", \"\");\n          this.colorElement.setAttribute(\"hidden\", \"\");\n          this.themeElement.setAttribute(\"hidden\", \"\");\n          this.menuItems.forEach((item) => item.checked = false);\n          break;\n        case \"date\":\n          this.clockElement.setAttribute(\"hidden\", \"\");\n          this.menuItemAll.checked = false;\n          break;\n        case \"theme\":\n          this.themeElement.setAttribute(\"hidden\", \"\");\n          this.menuItemAll.checked = false;\n          break;\n        case \"color\":\n          this.colorElement.setAttribute(\"hidden\", \"\");\n          this.menuItemAll.checked = false;\n          break;\n      }\n    }\n  }\n  render() {\n    return x`\n      <div part=\"base\" class=\"tools\">\n        <div class=\"tools__container\">\n          <!--\n          <alarm-it size=${this.size} hidden></alarm-it>\n          <chrono-it size=${this.size} hidden></chrono-it>\n          <timer-it size=${this.size} hidden></timer-it>\n          -->\n          <clock-it size=${this.size} date time hidden></clock-it>\n          <color-it size=${this.size} hidden></color-it>\n          <theme-it size=${this.size} hidden></theme-it>\n        </div>\n        <sl-dropdown part=\"dropdown\" stay-open-on-select hoist>\n          <sl-button size=${this.size} slot=\"trigger\" caret> ${svgIcon(\"mdi-cog\")} </sl-button>\n          <sl-menu @sl-select=${this.handleSelectTool}>\n            <sl-menu-item value=\"all\" type=\"checkbox\"> Tout sélectionner </sl-menu-item>\n            <sl-divider></sl-divider>\n            <sl-menu-item value=\"theme\" type=\"checkbox\">\n              <span slot=\"prefix\">${svgIcon(\"mdi-theme-light-dark\")}</span>\n              Thème\n            </sl-menu-item>\n            <sl-menu-item value=\"color\" type=\"checkbox\">\n              <span slot=\"prefix\">${svgIcon(\"mdi-palette-outline\")}</span>\n              Couleur\n            </sl-menu-item>\n            <sl-divider></sl-divider>\n            <sl-menu-item value=\"date\" type=\"checkbox\">\n              <span slot=\"prefix\">${svgIcon(\"mdi-calendar-clock-outline\")}</span>\n              Date et heure\n            </sl-menu-item>\n            <!--\n            <sl-menu-item value=\"chrono\">\n              <div slot=\"prefix\" class=\"it-mdi-timer-outline\"></div>\n              Chronomètre\n            </sl-menu-item>\n            <sl-menu-item value=\"timer\">\n              <div slot=\"prefix\" class=\"it-mdi-camera-timer\"></div>\n              Minuteur\n            </sl-menu-item>\n            <sl-menu-item value=\"alarm\">\n              <div slot=\"prefix\" class=\"it-mdi-bell-outline\"></div>\n              Alarme\n            </sl-menu-item>\n            -->\n          </sl-menu>\n        </sl-dropdown>\n      </div>\n    `;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToolsIt",
          "declaration": {
            "name": "ToolsIt",
            "module": "cdn/chunks/chunk.DWZIMURE.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.F3Y5VCFA.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.FFNE7TVA.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "t",
          "default": "globalThis"
        },
        {
          "kind": "variable",
          "name": "e"
        },
        {
          "kind": "variable",
          "name": "s"
        },
        {
          "kind": "variable",
          "name": "o",
          "default": "new WeakMap()"
        },
        {
          "kind": "function",
          "name": "i",
          "parameters": [
            {
              "name": "t4"
            },
            {
              "name": "e6"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "u",
          "type": {
            "text": "object"
          },
          "default": "{ toAttribute(t4, s4) {\n  switch (s4) {\n    case Boolean:\n      t4 = t4 ? l : null;\n      break;\n    case Object:\n    case Array:\n      t4 = null == t4 ? t4 : JSON.stringify(t4);\n  }\n  return t4;\n}, fromAttribute(t4, s4) {\n  let i5 = t4;\n  switch (s4) {\n    case Boolean:\n      i5 = null !== t4;\n      break;\n    case Number:\n      i5 = null === t4 ? null : Number(t4);\n      break;\n    case Object:\n    case Array:\n      try {\n        i5 = JSON.parse(t4);\n      } catch (t5) {\n        i5 = null;\n      }\n  }\n  return i5;\n} }"
        },
        {
          "kind": "function",
          "name": "f",
          "parameters": [
            {
              "name": "t4"
            },
            {
              "name": "s4"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "b",
          "default": "class extends HTMLElement {\n  static addInitializer(t4) {\n    this._$Ei(), (this.l ?? (this.l = [])).push(t4);\n  }\n  static get observedAttributes() {\n    return this.finalize(), this._$Eh && [...this._$Eh.keys()];\n  }\n  static createProperty(t4, s4 = y) {\n    if (s4.state && (s4.attribute = false), this._$Ei(), this.elementProperties.set(t4, s4), !s4.noAccessor) {\n      const i5 = Symbol(), r5 = this.getPropertyDescriptor(t4, i5, s4);\n      void 0 !== r5 && e2(this.prototype, t4, r5);\n    }\n  }\n  static getPropertyDescriptor(t4, s4, i5) {\n    const { get: e6, set: h3 } = r2(this.prototype, t4) ?? { get() {\n      return this[s4];\n    }, set(t5) {\n      this[s4] = t5;\n    } };\n    return { get() {\n      return e6?.call(this);\n    }, set(s5) {\n      const r5 = e6?.call(this);\n      h3.call(this, s5), this.requestUpdate(t4, r5, i5);\n    }, configurable: true, enumerable: true };\n  }\n  static getPropertyOptions(t4) {\n    return this.elementProperties.get(t4) ?? y;\n  }\n  static _$Ei() {\n    if (this.hasOwnProperty(d(\"elementProperties\")))\n      return;\n    const t4 = n2(this);\n    t4.finalize(), void 0 !== t4.l && (this.l = [...t4.l]), this.elementProperties = new Map(t4.elementProperties);\n  }\n  static finalize() {\n    if (this.hasOwnProperty(d(\"finalized\")))\n      return;\n    if (this.finalized = true, this._$Ei(), this.hasOwnProperty(d(\"properties\"))) {\n      const t5 = this.properties, s4 = [...h(t5), ...o2(t5)];\n      for (const i5 of s4)\n        this.createProperty(i5, t5[i5]);\n    }\n    const t4 = this[Symbol.metadata];\n    if (null !== t4) {\n      const s4 = litPropertyMetadata.get(t4);\n      if (void 0 !== s4)\n        for (const [t5, i5] of s4)\n          this.elementProperties.set(t5, i5);\n    }\n    this._$Eh = /* @__PURE__ */ new Map();\n    for (const [t5, s4] of this.elementProperties) {\n      const i5 = this._$Eu(t5, s4);\n      void 0 !== i5 && this._$Eh.set(i5, t5);\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n  }\n  static finalizeStyles(s4) {\n    const i5 = [];\n    if (Array.isArray(s4)) {\n      const e6 = new Set(s4.flat(1 / 0).reverse());\n      for (const s5 of e6)\n        i5.unshift(c(s5));\n    } else\n      void 0 !== s4 && i5.push(c(s4));\n    return i5;\n  }\n  static _$Eu(t4, s4) {\n    const i5 = s4.attribute;\n    return false === i5 ? void 0 : \"string\" == typeof i5 ? i5 : \"string\" == typeof t4 ? t4.toLowerCase() : void 0;\n  }\n  constructor() {\n    super(), this._$Ep = void 0, this.isUpdatePending = false, this.hasUpdated = false, this._$Em = null, this._$Ev();\n  }\n  _$Ev() {\n    this._$ES = new Promise((t4) => this.enableUpdating = t4), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), this.constructor.l?.forEach((t4) => t4(this));\n  }\n  addController(t4) {\n    (this._$EO ?? (this._$EO = /* @__PURE__ */ new Set())).add(t4), void 0 !== this.renderRoot && this.isConnected && t4.hostConnected?.();\n  }\n  removeController(t4) {\n    this._$EO?.delete(t4);\n  }\n  _$E_() {\n    const t4 = /* @__PURE__ */ new Map(), s4 = this.constructor.elementProperties;\n    for (const i5 of s4.keys())\n      this.hasOwnProperty(i5) && (t4.set(i5, this[i5]), delete this[i5]);\n    t4.size > 0 && (this._$Ep = t4);\n  }\n  createRenderRoot() {\n    const t4 = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);\n    return S(t4, this.constructor.elementStyles), t4;\n  }\n  connectedCallback() {\n    this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), this._$EO?.forEach((t4) => t4.hostConnected?.());\n  }\n  enableUpdating(t4) {\n  }\n  disconnectedCallback() {\n    this._$EO?.forEach((t4) => t4.hostDisconnected?.());\n  }\n  attributeChangedCallback(t4, s4, i5) {\n    this._$AK(t4, i5);\n  }\n  _$EC(t4, s4) {\n    const i5 = this.constructor.elementProperties.get(t4), e6 = this.constructor._$Eu(t4, i5);\n    if (void 0 !== e6 && true === i5.reflect) {\n      const r5 = (void 0 !== i5.converter?.toAttribute ? i5.converter : u).toAttribute(s4, i5.type);\n      this._$Em = t4, null == r5 ? this.removeAttribute(e6) : this.setAttribute(e6, r5), this._$Em = null;\n    }\n  }\n  _$AK(t4, s4) {\n    const i5 = this.constructor, e6 = i5._$Eh.get(t4);\n    if (void 0 !== e6 && this._$Em !== e6) {\n      const t5 = i5.getPropertyOptions(e6), r5 = \"function\" == typeof t5.converter ? { fromAttribute: t5.converter } : void 0 !== t5.converter?.fromAttribute ? t5.converter : u;\n      this._$Em = e6, this[e6] = r5.fromAttribute(s4, t5.type), this._$Em = null;\n    }\n  }\n  requestUpdate(t4, s4, i5) {\n    if (void 0 !== t4) {\n      if (i5 ?? (i5 = this.constructor.getPropertyOptions(t4)), !(i5.hasChanged ?? f)(this[t4], s4))\n        return;\n      this.P(t4, s4, i5);\n    }\n    false === this.isUpdatePending && (this._$ES = this._$ET());\n  }\n  P(t4, s4, i5) {\n    this._$AL.has(t4) || this._$AL.set(t4, s4), true === i5.reflect && this._$Em !== t4 && (this._$Ej ?? (this._$Ej = /* @__PURE__ */ new Set())).add(t4);\n  }\n  async _$ET() {\n    this.isUpdatePending = true;\n    try {\n      await this._$ES;\n    } catch (t5) {\n      Promise.reject(t5);\n    }\n    const t4 = this.scheduleUpdate();\n    return null != t4 && await t4, !this.isUpdatePending;\n  }\n  scheduleUpdate() {\n    return this.performUpdate();\n  }\n  performUpdate() {\n    if (!this.isUpdatePending)\n      return;\n    if (!this.hasUpdated) {\n      if (this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this._$Ep) {\n        for (const [t6, s5] of this._$Ep)\n          this[t6] = s5;\n        this._$Ep = void 0;\n      }\n      const t5 = this.constructor.elementProperties;\n      if (t5.size > 0)\n        for (const [s5, i5] of t5)\n          true !== i5.wrapped || this._$AL.has(s5) || void 0 === this[s5] || this.P(s5, this[s5], i5);\n    }\n    let t4 = false;\n    const s4 = this._$AL;\n    try {\n      t4 = this.shouldUpdate(s4), t4 ? (this.willUpdate(s4), this._$EO?.forEach((t5) => t5.hostUpdate?.()), this.update(s4)) : this._$EU();\n    } catch (s5) {\n      throw t4 = false, this._$EU(), s5;\n    }\n    t4 && this._$AE(s4);\n  }\n  willUpdate(t4) {\n  }\n  _$AE(t4) {\n    this._$EO?.forEach((t5) => t5.hostUpdated?.()), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t4)), this.updated(t4);\n  }\n  _$EU() {\n    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;\n  }\n  get updateComplete() {\n    return this.getUpdateComplete();\n  }\n  getUpdateComplete() {\n    return this._$ES;\n  }\n  shouldUpdate(t4) {\n    return true;\n  }\n  update(t4) {\n    this._$Ej && (this._$Ej = this._$Ej.forEach((t5) => this._$EC(t5, this[t5]))), this._$EU();\n  }\n  updated(t4) {\n  }\n  firstUpdated(t4) {\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "x"
        },
        {
          "kind": "variable",
          "name": "b2"
        },
        {
          "kind": "variable",
          "name": "w"
        },
        {
          "kind": "variable",
          "name": "T"
        },
        {
          "kind": "variable",
          "name": "z",
          "type": {
            "text": "object"
          },
          "default": "{ P: e3, A: h2, C: o3, M: 1, L: P, R: S2, D: u2, V: N, I: M, H: R, N: H, U: I, B: k, F: L }"
        },
        {
          "kind": "variable",
          "name": "s3",
          "default": "class extends b {\n  constructor() {\n    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;\n  }\n  createRenderRoot() {\n    var _a;\n    const t4 = super.createRenderRoot();\n    return (_a = this.renderOptions).renderBefore ?? (_a.renderBefore = t4.firstChild), t4;\n  }\n  update(t4) {\n    const i5 = this.render();\n    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t4), this._$Do = j(i5, this.renderRoot, this.renderOptions);\n  }\n  connectedCallback() {\n    super.connectedCallback(), this._$Do?.setConnected(true);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback(), this._$Do?.setConnected(false);\n  }\n  render() {\n    return w;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "t3",
          "type": {
            "text": "object"
          },
          "default": "{ ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 }"
        },
        {
          "kind": "function",
          "name": "e4",
          "parameters": [
            {
              "name": "t4"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "i4",
          "default": "class {\n  constructor(t4) {\n  }\n  get _$AU() {\n    return this._$AM._$AU;\n  }\n  _$AT(t4, e6, i5) {\n    this._$Ct = t4, this._$AM = e6, this._$Ci = i5;\n  }\n  _$AS(t4, e6) {\n    return this.update(t4, e6);\n  }\n  update(t4, e6) {\n    return this.render(...e6);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "o4"
        },
        {
          "kind": "variable",
          "name": "icons",
          "type": {
            "text": "object"
          },
          "default": "{\n  \"language-asciidoctor\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M18.069 0H5.932A5.934 5.934 0 0 0 0 5.932v12.136A5.935 5.935 0 0 0 5.932 24h12.136A5.934 5.934 0 0 0 24 18.068V5.932A5.934 5.934 0 0 0 18.069 0m-7.361 15.404H8.81l-.005.013L7.2 19.282a.506.506 0 1 1-.934-.388l1.45-3.49H4.868a.506.506 0 1 1 0-1.012h5.84a.506.506 0 1 1 0 1.012m7.919 4.165a.506.506 0 0 1-.655-.29L12.621 6.232l-2.395 5.76h1.55a.506.506 0 1 1 0 1.012h-5.84a.506.506 0 1 1 0-1.011h3.195l.004-.012l3.022-7.269a.506.506 0 0 1 .457-.311a.506.506 0 0 1 .478.314l5.816 14.182a.506.506 0 0 1-.281.673\"/></svg>`,\n  \"language-prolog\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1.5em\" height=\"1.5em\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><text x=\"2\" y=\"15\" fill=\"currentColor\" style=\"font-weight:bold;font-size:inherit\">?-</text></svg>`,\n  \"mdi-account\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 4a4 4 0 0 1 4 4a4 4 0 0 1-4 4a4 4 0 0 1-4-4a4 4 0 0 1 4-4m0 10c4.42 0 8 1.79 8 4v2H4v-2c0-2.21 3.58-4 8-4Z\"/></svg>`,\n  \"mdi-alert-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 2L1 21h22M12 6l7.53 13H4.47M11 10v4h2v-4m-2 6v2h2v-2\"/></svg>`,\n  \"mdi-bell-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M10 21h4c0 1.1-.9 2-2 2s-2-.9-2-2m11-2v1H3v-1l2-2v-6c0-3.1 2-5.8 5-6.7V4c0-1.1.9-2 2-2s2 .9 2 2v.3c3 .9 5 3.6 5 6.7v6l2 2m-4-8c0-2.8-2.2-5-5-5s-5 2.2-5 5v7h10v-7Z\"/></svg>`,\n  \"mdi-bell-off-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M22.11 21.46L2.39 1.73L1.11 3l4.72 4.72A6.975 6.975 0 0 0 5 11v6l-2 2v1h15.11l2.73 2.73l1.27-1.27M7 18v-7c0-.61.11-1.21.34-1.77L16.11 18H7m3 3h4a2 2 0 0 1-2 2a2 2 0 0 1-2-2M8.29 5.09c.53-.34 1.11-.59 1.71-.8V4a2 2 0 0 1 2-2a2 2 0 0 1 2 2v.29c2.97.88 5 3.61 5 6.71v4.8l-2-2V11a5 5 0 0 0-5-5c-.78 0-1.55.2-2.24.56L8.29 5.09Z\"/></svg>`,\n  \"mdi-block-helper\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 0a12 12 0 0 1 12 12a12 12 0 0 1-12 12A12 12 0 0 1 0 12A12 12 0 0 1 12 0m0 2A10 10 0 0 0 2 12c0 2.4.85 4.6 2.26 6.33L18.33 4.26A9.984 9.984 0 0 0 12 2m0 20a10 10 0 0 0 10-10c0-2.4-.85-4.6-2.26-6.33L5.67 19.74A9.984 9.984 0 0 0 12 22\"/></svg>`,\n  \"mdi-calendar-clock-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M6 1v2H5c-1.11 0-2 .89-2 2v14a2 2 0 0 0 2 2h6.1c1.26 1.24 2.99 2 4.9 2c3.87 0 7-3.13 7-7c0-1.91-.76-3.64-2-4.9V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1M5 5h14v2H5m0 2h14v.67c-.91-.43-1.93-.67-3-.67c-3.87 0-7 3.13-7 7c0 1.07.24 2.09.67 3H5m11-7.85c2.68 0 4.85 2.17 4.85 4.85c0 2.68-2.17 4.85-4.85 4.85c-2.68 0-4.85-2.17-4.85-4.85c0-2.68 2.17-4.85 4.85-4.85M15 13v3.69l3.19 1.84l.75-1.3l-2.44-1.41V13Z\"/></svg>`,\n  \"mdi-check-circle-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10s10-4.5 10-10S17.5 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m4.59-12.42L10 14.17l-2.59-2.58L6 13l4 4l8-8l-1.41-1.42Z\"/></svg>`,\n  \"mdi-code-json\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 3h2v2H5v5a2 2 0 0 1-2 2a2 2 0 0 1 2 2v5h2v2H5c-1.07-.27-2-.9-2-2v-4a2 2 0 0 0-2-2H0v-2h1a2 2 0 0 0 2-2V5a2 2 0 0 1 2-2m14 0a2 2 0 0 1 2 2v4a2 2 0 0 0 2 2h1v2h-1a2 2 0 0 0-2 2v4a2 2 0 0 1-2 2h-2v-2h2v-5a2 2 0 0 1 2-2a2 2 0 0 1-2-2V5h-2V3h2m-7 12a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m-4 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m8 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1Z\"/></svg>`,\n  \"mdi-cog\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64z\"/></svg>`,\n  \"mdi-content-copy\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19 21H8V7h11m0-2H8a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2m-3-4H4a2 2 0 0 0-2 2v14h2V3h12V1Z\"/></svg>`,\n  \"mdi-database\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 3C7.58 3 4 4.79 4 7s3.58 4 8 4s8-1.79 8-4s-3.58-4-8-4M4 9v3c0 2.21 3.58 4 8 4s8-1.79 8-4V9c0 2.21-3.58 4-8 4s-8-1.79-8-4m0 5v3c0 2.21 3.58 4 8 4s8-1.79 8-4v-3c0 2.21-3.58 4-8 4s-8-1.79-8-4Z\"/></svg>`,\n  \"mdi-dots-horizontal\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M16 12a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2m-6 0a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2m-6 0a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2Z\"/></svg>`,\n  \"mdi-dots-vertical\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 16a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2m0-6a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2m0-6a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2Z\"/></svg>`,\n  \"mdi-drag-vertical\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M9 3h2v2H9V3m4 0h2v2h-2V3M9 7h2v2H9V7m4 0h2v2h-2V7m-4 4h2v2H9v-2m4 0h2v2h-2v-2m-4 4h2v2H9v-2m4 0h2v2h-2v-2m-4 4h2v2H9v-2m4 0h2v2h-2v-2Z\"/></svg>`,\n  \"mdi-find-replace\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05A6.976 6.976 0 0 0 11 4c-3.53 0-6.43 2.61-6.92 6H6.1A5 5 0 0 1 11 6m5.64 9.14A6.89 6.89 0 0 0 17.92 12H15.9a5 5 0 0 1-4.9 4c-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05A6.976 6.976 0 0 0 11 18c1.55 0 3-.5 4.14-1.36L20 21.5l1.5-1.5l-4.86-4.86Z\"/></svg>`,\n  \"mdi-format-indent-decrease\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 13h10v-2H11m0-2h10V7H11M3 3v2h18V3M3 21h18v-2H3m0-7l4 4V8m4 9h10v-2H11v2Z\"/></svg>`,\n  \"mdi-format-indent-increase\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 13h10v-2H11m0-2h10V7H11M3 3v2h18V3M11 17h10v-2H11M3 8v8l4-4m-4 9h18v-2H3v2Z\"/></svg>`,\n  \"mdi-format-list-group\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 5v14h2v2H3V3h4v2H5m15 2H7v2h13V7m0 4H7v2h13v-2m0 4H7v2h13v-2Z\"/></svg>`,\n  \"mdi-format-list-numbered\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M7 13v-2h14v2H7m0 6v-2h14v2H7M7 7V5h14v2H7M3 8V5H2V4h2v4H3m-1 9v-1h3v4H2v-1h2v-.5H3v-1h1V17H2m2.25-7a.75.75 0 0 1 .75.75c0 .2-.08.39-.21.52L3.12 13H5v1H2v-.92L4 11H2v-1h2.25Z\"/></svg>`,\n  \"mdi-format-text\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m18.5 4l1.16 4.35l-.96.26c-.45-.87-.91-1.74-1.44-2.18C16.73 6 16.11 6 15.5 6H13v10.5c0 .5 0 1 .33 1.25c.34.25 1 .25 1.67.25v1H9v-1c.67 0 1.33 0 1.67-.25c.33-.25.33-.75.33-1.25V6H8.5c-.61 0-1.23 0-1.76.43c-.53.44-.99 1.31-1.44 2.18l-.96-.26L5.5 4h13Z\"/></svg>`,\n  \"mdi-fullscreen\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 5h5v2H7v3H5V5m9 0h5v5h-2V7h-3V5m3 9h2v5h-5v-2h3v-3m-7 3v2H5v-5h2v3h3Z\"/></svg>`,\n  \"mdi-fullscreen-exit\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M14 14h5v2h-3v3h-2v-5m-9 0h5v5H8v-3H5v-2m3-9h2v5H5V8h3V5m11 3v2h-5V5h2v3h3Z\"/></svg>`,\n  \"mdi-github\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33c.85 0 1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2\"/></svg>`,\n  \"mdi-hide-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M2 5.27L3.28 4L20 20.72L18.73 22l-3.08-3.08c-1.15.38-2.37.58-3.65.58c-5 0-9.27-3.11-11-7.5c.69-1.76 1.79-3.31 3.19-4.54zM12 9a3 3 0 0 1 3 3a3 3 0 0 1-.17 1L11 9.17A3 3 0 0 1 12 9m0-4.5c5 0 9.27 3.11 11 7.5a11.79 11.79 0 0 1-4 5.19l-1.42-1.43A9.862 9.862 0 0 0 20.82 12A9.821 9.821 0 0 0 12 6.5c-1.09 0-2.16.18-3.16.5L7.3 5.47c1.44-.62 3.03-.97 4.7-.97M3.18 12A9.821 9.821 0 0 0 12 17.5c.69 0 1.37-.07 2-.21L11.72 15A3.064 3.064 0 0 1 9 12.28L5.6 8.87c-.99.85-1.82 1.91-2.42 3.13\"/></svg>`,\n  \"mdi-home\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M10 20v-6h4v6h5v-8h3L12 3L2 12h3v8z\"/></svg>`,\n  \"mdi-information-variant-circle-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12.3 7.29c.2-.18.44-.29.7-.29c.27 0 .5.11.71.29c.19.21.29.45.29.71c0 .27-.1.5-.29.71c-.21.19-.44.29-.71.29c-.26 0-.5-.1-.7-.29c-.19-.21-.3-.44-.3-.71c0-.26.11-.5.3-.71m-2.5 4.68s2.17-1.72 2.96-1.79c.74-.06.59.79.52 1.23l-.01.06c-.14.53-.31 1.17-.48 1.78c-.38 1.39-.75 2.75-.66 3c.1.34.72-.09 1.17-.39c.06-.04.11-.08.16-.11c0 0 .08-.08.16.03c.02.03.04.06.06.08c.09.14.14.19.02.27l-.04.02c-.22.15-1.16.81-1.54 1.05c-.41.27-1.98 1.17-1.74-.58c.21-1.23.49-2.29.71-3.12c.41-1.5.59-2.18-.33-1.59c-.37.22-.59.36-.72.45c-.11.08-.12.08-.19-.05l-.03-.06l-.05-.08c-.07-.1-.07-.11.03-.2M22 12c0 5.5-4.5 10-10 10S2 17.5 2 12S6.5 2 12 2s10 4.5 10 10m-2 0c0-4.42-3.58-8-8-8s-8 3.58-8 8s3.58 8 8 8s8-3.58 8-8Z\"/></svg>`,\n  \"mdi-keyboard\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19 10h-2V8h2m0 5h-2v-2h2m-3-1h-2V8h2m0 5h-2v-2h2m0 6H8v-2h8m-9-5H5V8h2m0 5H5v-2h2m1 0h2v2H8m0-5h2v2H8m3 1h2v2h-2m0-5h2v2h-2m9-5H4c-1.11 0-2 .89-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z\"/></svg>`,\n  \"mdi-keyboard-off-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m1 4.27l1.47 1.47A1.9 1.9 0 0 0 2 7v10a2 2 0 0 0 2 2h11.73l3 3L20 20.72L2.28 3L1 4.27M4 17V7.27l1 1V10h1.73L8 11.27V13h1.73l1 1H8v2h4.73l1 1H4m1-6h2v2H5v-2m12 0h2v2h-2v-2m2-1h-2V8h2v2m-5 1h2v2h-1.17l-.83-.83V11m-1-1h-1.17L11 9.17V8h2v2m9-3v10c0 .86-.55 1.58-1.3 1.87L18.83 17H20V7H8.83l-2-2H20a2 2 0 0 1 2 2m-6 3h-2V8h2v2Z\"/></svg>`,\n  \"mdi-keyboard-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M4 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H4m0 2h16v10H4V7m1 1v2h2V8H5m3 0v2h2V8H8m3 0v2h2V8h-2m3 0v2h2V8h-2m3 0v2h2V8h-2M5 11v2h2v-2H5m3 0v2h2v-2H8m3 0v2h2v-2h-2m3 0v2h2v-2h-2m3 0v2h2v-2h-2m-9 3v2h8v-2H8Z\"/></svg>`,\n  \"mdi-language-asciidoc\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 496 512\"><path fill=\"currentColor\" d=\"M21.771 336.508c-23.15-.464-23.15 34.5 0 34.035h95.833l-48.817 117.45c-9.029 21.083 22.85 34.34 31.432 13.07l54.011-130.52h64.094c23.15.464 23.15-34.5 0-34.035zM282.088.01c-6.295.225-12.345 4.023-14.986 10.678L165.16 255.705H17.367c-23.155-.47-23.155 34.5 0 34.031h236.916c23.155.47 23.155-34.5 0-34.03h-52.197L282.69 61.817l180.114 439.174c8.366 21.573 40.683 8.311 31.488-12.922L298.551 10.77C294.925 3.133 288.383-.215 282.088.01z\"/></svg>`,\n  \"mdi-language-css\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m5 3l-.65 3.34h13.59L17.5 8.5H3.92l-.66 3.33h13.59l-.76 3.81l-5.48 1.81l-4.75-1.81l.33-1.64H2.85l-.79 4l7.85 3l9.05-3l1.2-6.03l.24-1.21L21.94 3H5Z\"/></svg>`,\n  \"mdi-language-css3\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m5 3l-.65 3.34h13.59L17.5 8.5H3.92l-.66 3.33h13.59l-.76 3.81l-5.48 1.81l-4.75-1.81l.33-1.64H2.85l-.79 4l7.85 3l9.05-3l1.2-6.03l.24-1.21L21.94 3H5Z\"/></svg>`,\n  \"mdi-language-html\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m12 17.56l4.07-1.13l.55-6.1H9.38L9.2 8.3h7.6l.2-1.99H7l.56 6.01h6.89l-.23 2.58l-2.22.6l-2.22-.6l-.14-1.66h-2l.29 3.19L12 17.56M4.07 3h15.86L18.5 19.2L12 21l-6.5-1.8L4.07 3Z\"/></svg>`,\n  \"mdi-language-html5\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m12 17.56l4.07-1.13l.55-6.1H9.38L9.2 8.3h7.6l.2-1.99H7l.56 6.01h6.89l-.23 2.58l-2.22.6l-2.22-.6l-.14-1.66h-2l.29 3.19L12 17.56M4.07 3h15.86L18.5 19.2L12 21l-6.5-1.8L4.07 3Z\"/></svg>`,\n  \"mdi-language-javascript\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 3h18v18H3V3m4.73 15.04c.4.85 1.19 1.55 2.54 1.55c1.5 0 2.53-.8 2.53-2.55v-5.78h-1.7V17c0 .86-.35 1.08-.9 1.08c-.58 0-.82-.4-1.09-.87l-1.38.83m5.98-.18c.5.98 1.51 1.73 3.09 1.73c1.6 0 2.8-.83 2.8-2.36c0-1.41-.81-2.04-2.25-2.66l-.42-.18c-.73-.31-1.04-.52-1.04-1.02c0-.41.31-.73.81-.73c.48 0 .8.21 1.09.73l1.31-.87c-.55-.96-1.33-1.33-2.4-1.33c-1.51 0-2.48.96-2.48 2.23c0 1.38.81 2.03 2.03 2.55l.42.18c.78.34 1.24.55 1.24 1.13c0 .48-.45.83-1.15.83c-.83 0-1.31-.43-1.67-1.03l-1.38.8Z\"/></svg>`,\n  \"mdi-language-json\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 3h2v2H5v5a2 2 0 0 1-2 2a2 2 0 0 1 2 2v5h2v2H5c-1.07-.27-2-.9-2-2v-4a2 2 0 0 0-2-2H0v-2h1a2 2 0 0 0 2-2V5a2 2 0 0 1 2-2m14 0a2 2 0 0 1 2 2v4a2 2 0 0 0 2 2h1v2h-1a2 2 0 0 0-2 2v4a2 2 0 0 1-2 2h-2v-2h2v-5a2 2 0 0 1 2-2a2 2 0 0 1-2-2V5h-2V3h2m-7 12a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m-4 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m8 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1Z\"/></svg>`,\n  \"mdi-language-markdown\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M20.56 18H3.44C2.65 18 2 17.37 2 16.59V7.41C2 6.63 2.65 6 3.44 6h17.12c.79 0 1.44.63 1.44 1.41v9.18c0 .78-.65 1.41-1.44 1.41M6.81 15.19v-3.66l1.92 2.35l1.92-2.35v3.66h1.93V8.81h-1.93l-1.92 2.35l-1.92-2.35H4.89v6.38h1.92M19.69 12h-1.92V8.81h-1.92V12h-1.93l2.89 3.28L19.69 12Z\"/></svg>`,\n  \"mdi-language-prolog\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><text x=\"2\" y=\"15\" fill=\"currentColor\" style=\"font-weight:bold;font-size:inherit\">?-</text></svg>`,\n  \"mdi-language-python\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\"viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19.14 7.5A2.86 2.86 0 0 1 22 10.36v3.78A2.86 2.86 0 0 1 19.14 17H12c0 .39.32.96.71.96H17v1.68a2.86 2.86 0 0 1-2.86 2.86H9.86A2.86 2.86 0 0 1 7 19.64v-3.75a2.85 2.85 0 0 1 2.86-2.85h5.25a2.85 2.85 0 0 0 2.85-2.86V7.5h1.18m-4.28 11.79c-.4 0-.72.3-.72.89c0 .59.32.71.72.71a.71.71 0 0 0 .71-.71c0-.59-.32-.89-.71-.89m-10-1.79A2.86 2.86 0 0 1 2 14.64v-3.78A2.86 2.86 0 0 1 4.86 8H12c0-.39-.32-.96-.71-.96H7V5.36A2.86 2.86 0 0 1 9.86 2.5h4.28A2.86 2.86 0 0 1 17 5.36v3.75a2.85 2.85 0 0 1-2.86 2.85H8.89a2.85 2.85 0 0 0-2.85 2.86v2.68H4.86M9.14 5.71c.4 0 .72-.3.72-.89c0-.59-.32-.71-.72-.71c-.39 0-.71.12-.71.71s.32.89.71.89Z\"/></svg>`,\n  \"mdi-language-sql\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 3C7.58 3 4 4.79 4 7s3.58 4 8 4s8-1.79 8-4s-3.58-4-8-4M4 9v3c0 2.21 3.58 4 8 4s8-1.79 8-4V9c0 2.21-3.58 4-8 4s-8-1.79-8-4m0 5v3c0 2.21 3.58 4 8 4s8-1.79 8-4v-3c0 2.21-3.58 4-8 4s-8-1.79-8-4Z\"/></svg>`,\n  \"mdi-language-text\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m18.5 4l1.16 4.35l-.96.26c-.45-.87-.91-1.74-1.44-2.18C16.73 6 16.11 6 15.5 6H13v10.5c0 .5 0 1 .33 1.25c.34.25 1 .25 1.67.25v1H9v-1c.67 0 1.33 0 1.67-.25c.33-.25.33-.75.33-1.25V6H8.5c-.61 0-1.23 0-1.76.43c-.53.44-.99 1.31-1.44 2.18l-.96-.26L5.5 4h13Z\"/></svg>`,\n  \"mdi-language-typescript\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 3h18v18H3V3m10.71 14.86c.5.98 1.51 1.73 3.09 1.73c1.6 0 2.8-.83 2.8-2.36c0-1.41-.81-2.04-2.25-2.66l-.42-.18c-.73-.31-1.04-.52-1.04-1.02c0-.41.31-.73.81-.73c.48 0 .8.21 1.09.73l1.31-.87c-.55-.96-1.33-1.33-2.4-1.33c-1.51 0-2.48.96-2.48 2.23c0 1.38.81 2.03 2.03 2.55l.42.18c.78.34 1.24.55 1.24 1.13c0 .48-.45.83-1.15.83c-.83 0-1.31-.43-1.67-1.03l-1.38.8M13 11.25H8v1.5h1.5V20h1.75v-7.25H13v-1.5Z\"/></svg>`,\n  \"mdi-menu-close\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 6h10v2H3V6m0 10h10v2H3v-2m0-5h12v2H3v-2m13-4l-1.42 1.39L18.14 12l-3.56 3.61L16 17l5-5l-5-5Z\"/></svg>`,\n  \"mdi-menu-open\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M21 15.61L19.59 17l-5.01-5l5.01-5L21 8.39L17.44 12L21 15.61M3 6h13v2H3V6m0 7v-2h10v2H3m0 5v-2h13v2H3Z\"/></svg>`,\n  \"mdi-monitor-eye\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 4v12h18V4zm0-2h18a2 2 0 0 1 2 2v12c0 .53-.21 1.04-.59 1.41c-.37.38-.88.59-1.41.59h-7v2h2v2H8v-2h2v-2H3c-.53 0-1.04-.21-1.41-.59C1.21 17.04 1 16.53 1 16V4c0-1.11.89-2 2-2m7.84 6.93c.31-.3.73-.48 1.16-.48c.43.01.85.18 1.16.49c.3.3.48.72.48 1.15c0 .44-.18.85-.48 1.16c-.31.31-.73.48-1.16.48c-.43 0-.85-.18-1.16-.48c-.3-.31-.48-.72-.48-1.16c0-.43.18-.85.48-1.16M10.07 12a2.679 2.679 0 0 0 3.86 0c.51-.5.8-1.19.8-1.91s-.29-1.42-.8-1.93s-1.21-.8-1.93-.8s-1.42.29-1.93.8s-.8 1.21-.8 1.93s.29 1.41.8 1.91M6 10.09A6.45 6.45 0 0 1 12 6c2.73 0 5.06 1.7 6 4.09a6.421 6.421 0 0 1-6 4.09c-2.73 0-5.06-1.68-6-4.09\"/></svg>`,\n  \"mdi-mouse\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 1.07C7.05 1.56 4 4.92 4 9h7m-7 6a8 8 0 0 0 8 8a8 8 0 0 0 8-8v-4H4m9-9.93V9h7c0-4.08-3.06-7.44-7-7.93Z\"/></svg>`,\n  \"mdi-mouse-off\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M2 5.27L3.28 4L20 20.72L18.73 22l-1.23-1.21A7.892 7.892 0 0 1 12 23a8 8 0 0 1-8-8v-4h3.73l-2-2H4c0-.54.05-1.07.15-1.58L2 5.27m9-4.2V9h-.18L5.79 3.96A7.95 7.95 0 0 1 11 1.07M20 11v4c0 .95-.17 1.86-.47 2.71L12.82 11H20m-7-9.93c3.94.49 7 3.85 7 7.93h-7V1.07Z\"/></svg>`,\n  \"mdi-palette-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 22A10 10 0 0 1 2 12A10 10 0 0 1 12 2c5.5 0 10 4 10 9a6 6 0 0 1-6 6h-1.8c-.3 0-.5.2-.5.5c0 .1.1.2.1.3c.4.5.6 1.1.6 1.7c.1 1.4-1 2.5-2.4 2.5m0-18a8 8 0 0 0-8 8a8 8 0 0 0 8 8c.3 0 .5-.2.5-.5c0-.2-.1-.3-.1-.4c-.4-.5-.6-1-.6-1.6c0-1.4 1.1-2.5 2.5-2.5H16a4 4 0 0 0 4-4c0-3.9-3.6-7-8-7m-5.5 6c.8 0 1.5.7 1.5 1.5S7.3 13 6.5 13S5 12.3 5 11.5S5.7 10 6.5 10m3-4c.8 0 1.5.7 1.5 1.5S10.3 9 9.5 9S8 8.3 8 7.5S8.7 6 9.5 6m5 0c.8 0 1.5.7 1.5 1.5S15.3 9 14.5 9S13 8.3 13 7.5S13.7 6 14.5 6m3 4c.8 0 1.5.7 1.5 1.5s-.7 1.5-1.5 1.5s-1.5-.7-1.5-1.5s.7-1.5 1.5-1.5\"/></svg>`,\n  \"mdi-play\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M8 5.14v14l11-7l-11-7Z\"/></svg>`,\n  \"mdi-redo\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M18.4 10.6C16.55 9 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16a8.002 8.002 0 0 1 7.6-5.5c1.95 0 3.73.72 5.12 1.88L13 16h9V7l-3.6 3.6Z\"/></svg>`,\n  \"mdi-refresh\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><g transform=\"translate(24 0) scale(-1 1)\"><path fill=\"currentColor\" d=\"M17.65 6.35A7.958 7.958 0 0 0 12 4a8 8 0 0 0-8 8a8 8 0 0 0 8 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18a6 6 0 0 1-6-6a6 6 0 0 1 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35Z\"/></g></svg>`,\n  \"mdi-show-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 9a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0-4.5c5 0 9.27 3.11 11 7.5c-1.73 4.39-6 7.5-11 7.5S2.73 16.39 1 12c1.73-4.39 6-7.5 11-7.5M3.18 12a9.821 9.821 0 0 0 17.64 0a9.821 9.821 0 0 0-17.64 0\"/></svg>`,\n  \"mdi-square-edit-outline\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 3c-1.11 0-2 .89-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7h-2v7H5V5h7V3H5m12.78 1a.69.69 0 0 0-.48.2l-1.22 1.21l2.5 2.5L19.8 6.7c.26-.26.26-.7 0-.95L18.25 4.2c-.13-.13-.3-.2-.47-.2m-2.41 2.12L8 13.5V16h2.5l7.37-7.38l-2.5-2.5Z\"/></svg>`,\n  \"mdi-square-rounded\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M8 3h8c2.76 0 5 2.24 5 5v8c0 2.76-2.24 5-5 5H8c-2.76 0-5-2.24-5-5V8c0-2.76 2.24-5 5-5\"/></svg>`,\n  \"mdi-text-search\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m19.31 18.9l3.08 3.1L21 23.39l-3.12-3.07c-.69.43-1.51.68-2.38.68c-2.5 0-4.5-2-4.5-4.5s2-4.5 4.5-4.5s4.5 2 4.5 4.5c0 .88-.25 1.71-.69 2.4m-3.81.1a2.5 2.5 0 0 0 0-5a2.5 2.5 0 0 0 0 5M21 4v2H3V4h18M3 16v-2h6v2H3m0-5V9h18v2h-2.03c-1.01-.63-2.2-1-3.47-1s-2.46.37-3.47 1H3Z\"/></svg>`,\n  \"mdi-theme-light-dark\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M7.5 2c-1.79 1.15-3 3.18-3 5.5s1.21 4.35 3.03 5.5C4.46 13 2 10.54 2 7.5A5.5 5.5 0 0 1 7.5 2m11.57 1.5l1.43 1.43L4.93 20.5L3.5 19.07L19.07 3.5m-6.18 2.43L11.41 5L9.97 6l.42-1.7L9 3.24l1.75-.12l.58-1.65L12 3.1l1.73.03l-1.35 1.13l.51 1.67m-3.3 3.61l-1.16-.73l-1.12.78l.34-1.32l-1.09-.83l1.36-.09l.45-1.29l.51 1.27l1.36.03l-1.05.87l.4 1.31M19 13.5a5.5 5.5 0 0 1-5.5 5.5c-1.22 0-2.35-.4-3.26-1.07l7.69-7.69c.67.91 1.07 2.04 1.07 3.26m-4.4 6.58l2.77-1.15l-.24 3.35l-2.53-2.2m4.33-2.7l1.15-2.77l2.2 2.54l-3.35.23m1.15-4.96l-1.14-2.78l3.34.24l-2.2 2.54M9.63 18.93l2.77 1.15l-2.53 2.19l-.24-3.34Z\"/></svg>`,\n  \"mdi-tools\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m21.71 20.29l-1.42 1.42a1 1 0 0 1-1.41 0L7 9.85A3.81 3.81 0 0 1 6 10a4 4 0 0 1-3.78-5.3l2.54 2.54l.53-.53l1.42-1.42l.53-.53L4.7 2.22A4 4 0 0 1 10 6a3.81 3.81 0 0 1-.15 1l11.86 11.88a1 1 0 0 1 0 1.41M2.29 18.88a1 1 0 0 0 0 1.41l1.42 1.42a1 1 0 0 0 1.41 0l5.47-5.46l-2.83-2.83M20 2l-4 2v2l-2.17 2.17l2 2L18 8h2l2-4Z\"/></svg>`,\n  \"mdi-typescript\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 3h18v18H3V3m10.71 14.86c.5.98 1.51 1.73 3.09 1.73c1.6 0 2.8-.83 2.8-2.36c0-1.41-.81-2.04-2.25-2.66l-.42-.18c-.73-.31-1.04-.52-1.04-1.02c0-.41.31-.73.81-.73c.48 0 .8.21 1.09.73l1.31-.87c-.55-.96-1.33-1.33-2.4-1.33c-1.51 0-2.48.96-2.48 2.23c0 1.38.81 2.03 2.03 2.55l.42.18c.78.34 1.24.55 1.24 1.13c0 .48-.45.83-1.15.83c-.83 0-1.31-.43-1.67-1.03l-1.38.8M13 11.25H8v1.5h1.5V20h1.75v-7.25H13v-1.5Z\"/></svg>`,\n  \"mdi-undo\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12.5 8c-2.65 0-5.05 1-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88c3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8Z\"/></svg>`,\n  \"mdi-weather-night\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m17.75 4.09l-2.53 1.94l.91 3.06l-2.63-1.81l-2.63 1.81l.91-3.06l-2.53-1.94L12.44 4l1.06-3l1.06 3zm3.5 6.91l-1.64 1.25l.59 1.98l-1.7-1.17l-1.7 1.17l.59-1.98L15.75 11l2.06-.05L18.5 9l.69 1.95zm-2.28 4.95c.83-.08 1.72 1.1 1.19 1.85c-.32.45-.66.87-1.08 1.27C15.17 23 8.84 23 4.94 19.07c-3.91-3.9-3.91-10.24 0-14.14c.4-.4.82-.76 1.27-1.08c.75-.53 1.93.36 1.85 1.19c-.27 2.86.69 5.83 2.89 8.02a9.96 9.96 0 0 0 8.02 2.89m-1.64 2.02a12.08 12.08 0 0 1-7.8-3.47c-2.17-2.19-3.33-5-3.49-7.82c-2.81 3.14-2.7 7.96.31 10.98c3.02 3.01 7.84 3.12 10.98.31\"/></svg>`,\n  \"mdi-white-balance-sunny\": `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m3.55 19.09l1.41 1.41l1.8-1.79l-1.42-1.42M12 6c-3.31 0-6 2.69-6 6s2.69 6 6 6s6-2.69 6-6c0-3.32-2.69-6-6-6m8 7h3v-2h-3m-2.76 7.71l1.8 1.79l1.41-1.41l-1.79-1.8M20.45 5l-1.41-1.4l-1.8 1.79l1.42 1.42M13 1h-2v3h2M6.76 5.39L4.96 3.6L3.55 5l1.79 1.81zM1 13h3v-2H1m12 9h-2v3h2\"/></svg>`\n}"
        },
        {
          "kind": "function",
          "name": "svgIcon",
          "parameters": [
            {
              "name": "icon"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "i",
          "declaration": {
            "name": "i",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "u",
          "declaration": {
            "name": "u",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "f",
          "declaration": {
            "name": "f",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "x",
          "declaration": {
            "name": "x",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "b",
          "declaration": {
            "name": "b2",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "w",
          "declaration": {
            "name": "w",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "T",
          "declaration": {
            "name": "T",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "z",
          "declaration": {
            "name": "z",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "s",
          "declaration": {
            "name": "s3",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "t",
          "declaration": {
            "name": "t3",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "e",
          "declaration": {
            "name": "e4",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "i2",
          "declaration": {
            "name": "i4",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "o",
          "declaration": {
            "name": "o4",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "icons",
          "declaration": {
            "name": "icons",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        },
        {
          "kind": "js",
          "name": "svgIcon",
          "declaration": {
            "name": "svgIcon",
            "module": "cdn/chunks/chunk.FFNE7TVA.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.FNUADV36.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.GQAFNU2L.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ThemeIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super();\n    this.size = \"small\";\n    this.theme = this.getTheme();\n  }\n  createListeners() {\n    this.menu.addEventListener(\"sl-select\", (event) => {\n      const ev = event;\n      this.setTheme(ev.detail.item.value);\n    });\n    window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", () => this.setTheme(this.theme));\n    document.addEventListener(\"keydown\", (event) => {\n      const elements = event.composedPath();\n      if (event.key === \"\\\\\" && !elements.some((el) => [\"input\", \"textarea\"].includes(el.tagName?.toLowerCase()))) {\n        event.preventDefault();\n        this.setTheme(this.isDark() ? \"light\" : \"dark\");\n      }\n    });\n  }\n  firstUpdated(_changedProperties) {\n    this.setTheme(this.theme);\n    this.createListeners();\n  }\n  /** Thème (défaut : `system`) */\n  getTheme() {\n    return localStorage.getItem(\"theme\") || \"system\";\n  }\n  /** Teste si le thème courant est le thème `dark`. */\n  isDark() {\n    if (this.theme === \"system\") {\n      return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    }\n    return this.theme === \"dark\";\n  }\n  render() {\n    return x`\n      <sl-dropdown class=\"theme\" hoist>\n        <sl-button size=${this.size} slot=\"trigger\" caret>\n          ${this.isDark() ? x`<span style=\"color:var(--sl-color-yellow-500)\">${svgIcon(\"mdi-weather-night\")}</span>` : x`<span style=\"color:var(--sl-color-yellow-500)\">${svgIcon(\"mdi-white-balance-sunny\")}</span>`}\n        </sl-button>\n        <sl-menu>\n          <sl-menu-item type=\"checkbox\" value=\"light\">Clair</sl-menu-item>\n          <sl-menu-item type=\"checkbox\" value=\"dark\">Sombre</sl-menu-item>\n          <sl-divider></sl-divider>\n          <sl-menu-item type=\"checkbox\" value=\"system\">System</sl-menu-item>\n        </sl-menu>\n      </sl-dropdown>\n    `;\n  }\n  /** Change le thème. */\n  setTheme(newTheme) {\n    const noTransitions = Object.assign(document.createElement(\"style\"), {\n      textContent: \"* { transition: none !important; }\"\n    });\n    this.theme = newTheme;\n    localStorage.setItem(\"theme\", this.theme);\n    [...this.menu.querySelectorAll(\"sl-menu-item\")].map(\n      (item) => item.checked = item.getAttribute(\"value\") === this.theme\n    );\n    document.body.appendChild(noTransitions);\n    requestAnimationFrame(() => {\n      document.documentElement.classList.toggle(\"sl-theme-dark\", this.isDark());\n      document.documentElement.classList.toggle(\"sl-theme-light\", !this.isDark());\n      requestAnimationFrame(() => document.body.removeChild(noTransitions));\n    });\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ThemeIt",
          "declaration": {
            "name": "ThemeIt",
            "module": "cdn/chunks/chunk.GQAFNU2L.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.GYICEXKC.js",
      "declarations": [
        {
          "kind": "function",
          "name": "emit",
          "parameters": [
            {
              "name": "element"
            },
            {
              "name": "name"
            },
            {
              "name": "options"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "emit",
          "declaration": {
            "name": "emit",
            "module": "cdn/chunks/chunk.GYICEXKC.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.HKVYMXOM.js",
      "declarations": [
        {
          "kind": "function",
          "name": "t",
          "parameters": [
            {
              "name": "t3"
            }
          ]
        },
        {
          "kind": "function",
          "name": "r",
          "parameters": [
            {
              "name": "t3",
              "default": "o"
            },
            {
              "name": "e4"
            },
            {
              "name": "r4"
            }
          ]
        },
        {
          "kind": "function",
          "name": "n",
          "parameters": [
            {
              "name": "t3"
            }
          ]
        },
        {
          "kind": "function",
          "name": "r2",
          "parameters": [
            {
              "name": "r4"
            }
          ]
        },
        {
          "kind": "function",
          "name": "t2",
          "parameters": [
            {
              "name": "t3"
            }
          ]
        },
        {
          "kind": "function",
          "name": "e",
          "parameters": [
            {
              "name": "e4"
            },
            {
              "name": "t3"
            },
            {
              "name": "c"
            }
          ]
        },
        {
          "kind": "function",
          "name": "e2",
          "parameters": [
            {
              "name": "e4"
            },
            {
              "name": "r4"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "t3"
        },
        {
          "kind": "function",
          "name": "r3",
          "parameters": [
            {
              "name": "r4"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "BaseIt",
          "default": "class extends s {\n  constructor() {\n    super(...arguments);\n    this.fullscreen = false;\n    this.lang = navigator.language;\n  }\n  /**\n   * Emission d'un événement `CustomEvent` par l'élément.\n   *\n   * Par défaut, l'événement se propage dans le DOM (`bubbles: true`);\n   * il traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\n   * et ne peut être empêché de le faire (`cancelable: false`).\n   *\n   */\n  emit(name, options) {\n    const event = new CustomEvent(name, {\n      bubbles: true,\n      cancelable: false,\n      composed: true,\n      detail: {},\n      ...options\n    });\n    this.dispatchEvent(event);\n    return event;\n  }\n  async getCode(filename, part) {\n    let code = \"\";\n    const innerScriptTag = this.querySelector(`script[type=\"enibook/${part}\"]`);\n    if (filename) {\n      await fetchContent(filename).then((response) => {\n        code += response;\n      });\n    }\n    if (innerScriptTag) {\n      code += dedentText(innerScriptTag.innerHTML);\n      code = code.replace(/&lt;(\\/?script)(.*?)&gt;/g, \"<$1$2>\");\n    }\n    return code;\n  }\n  /**\n   * Passe en mode plein écran ou sort du mode plein écran.\n   *\n   * On peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.\n   */\n  toggleFullscreen() {\n    this.fullscreen = !this.fullscreen;\n    if (!fscreen_esm_default.fullscreenElement) {\n      fscreen_esm_default.requestFullscreen(this);\n    } else {\n      fscreen_esm_default.exitFullscreen();\n    }\n  }\n  /**\n   * Crée une alerte qui affiche le message associé pendant une durée donnée.\n   *\n   * @param {string} message - le message d'alerte\n   * @param {string} [variant=\"primary\"] - apparence du message\n   * @param {string} [icon=\"it-mdi-information-variant-circle-outline\"] - icône associée au message.\n   * @param {string} [duration=\"3000\"] - durée d'affichage de l'alerte en millisecondes.\n   * @returns\n   * @memberof EnibookElement\n   */\n  notify(message, variant = \"primary\", icon = \"mdi-information-variant-circle-outline\", duration = \"3000\") {\n    const alert = Object.assign(document.createElement(\"sl-alert\"), {\n      variant,\n      closable: true,\n      duration,\n      innerHTML: `\n          <div slot=\"icon\">${icons[icon]}</div>\n          ${this.wrap(message)}\n        `\n    });\n    document.body.append(alert);\n    return alert.toast();\n  }\n  wrap(message) {\n    const div = document.createElement(\"div\");\n    div.textContent = message;\n    return div.innerHTML;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "t3",
          "declaration": {
            "name": "e4",
            "module": "cdn/chunks/chunk.HKVYMXOM.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "t3",
          "declaration": {
            "name": "e4",
            "module": "cdn/chunks/chunk.HKVYMXOM.js"
          }
        },
        {
          "kind": "js",
          "name": "t",
          "declaration": {
            "name": "t",
            "module": "cdn/chunks/chunk.HKVYMXOM.js"
          }
        },
        {
          "kind": "js",
          "name": "n",
          "declaration": {
            "name": "n",
            "module": "cdn/chunks/chunk.HKVYMXOM.js"
          }
        },
        {
          "kind": "js",
          "name": "r",
          "declaration": {
            "name": "r2",
            "module": "cdn/chunks/chunk.HKVYMXOM.js"
          }
        },
        {
          "kind": "js",
          "name": "t2",
          "declaration": {
            "name": "t2",
            "module": "cdn/chunks/chunk.HKVYMXOM.js"
          }
        },
        {
          "kind": "js",
          "name": "e",
          "declaration": {
            "name": "e2",
            "module": "cdn/chunks/chunk.HKVYMXOM.js"
          }
        },
        {
          "kind": "js",
          "name": "r2",
          "declaration": {
            "name": "r3",
            "module": "cdn/chunks/chunk.HKVYMXOM.js"
          }
        },
        {
          "kind": "js",
          "name": "BaseIt",
          "declaration": {
            "name": "BaseIt",
            "module": "cdn/chunks/chunk.HKVYMXOM.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.I47CHKS7.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "dictionary",
          "type": {
            "text": "array"
          },
          "default": "[\n  \"enib\",\n  \"lorem\",\n  \"ipsum\",\n  \"dolor\",\n  \"sit\",\n  \"amet,\",\n  \"consectetur\",\n  \"adipiscing\",\n  \"elit\",\n  \"ut\",\n  \"aliquam,\",\n  \"purus\",\n  \"sit\",\n  \"amet\",\n  \"luctus\",\n  \"venenatis,\",\n  \"lectus\",\n  \"magna\",\n  \"fringilla\",\n  \"urna,\",\n  \"porttitor\",\n  \"rhoncus\",\n  \"dolor\",\n  \"purus\",\n  \"non\",\n  \"enim\",\n  \"enit\",\n  \"enise\",\n  \"gepi\",\n  \"praesent\",\n  \"elementum\",\n  \"facilisis\",\n  \"leo,\",\n  \"vel\",\n  \"fringilla\",\n  \"est\",\n  \"ullamcorper\",\n  \"eget\",\n  \"nulla\",\n  \"facilisi\",\n  \"etiam\",\n  \"dignissim\",\n  \"diam\",\n  \"quis\",\n  \"lobortis\",\n  \"scelerisque\",\n  \"fermentum\",\n  \"dui\",\n  \"faucibus\",\n  \"in\",\n  \"ornare\",\n  \"quam\",\n  \"viverra\",\n  \"orci\",\n  \"sagittis\",\n  \"eu\",\n  \"volutpat\",\n  \"odio\",\n  \"facilisis\",\n  \"mauris\",\n  \"sit\",\n  \"amet\",\n  \"massa\",\n  \"vitae\",\n  \"tortor\",\n  \"condimentum\",\n  \"lacinia\",\n  \"quis\",\n  \"vel\",\n  \"eros\",\n  \"donec\",\n  \"ac\",\n  \"odio\",\n  \"tempor\",\n  \"orci\",\n  \"dapibus\",\n  \"ultrices\",\n  \"in\",\n  \"iaculis\",\n  \"nunc\",\n  \"sed\",\n  \"augue\",\n  \"lacus,\",\n  \"viverra\",\n  \"vitae\",\n  \"congue\",\n  \"eu,\",\n  \"consequat\",\n  \"ac\",\n  \"felis\",\n  \"donec\",\n  \"et\",\n  \"odio\",\n  \"pellentesque\",\n  \"diam\",\n  \"volutpat\",\n  \"commodo\",\n  \"sed\",\n  \"egestas\",\n  \"egestas\",\n  \"fringilla\",\n  \"phasellus\",\n  \"faucibus\",\n  \"scelerisque\",\n  \"eleifend\",\n  \"donec\",\n  \"pretium\",\n  \"vulputate\",\n  \"sapien\",\n  \"nec\",\n  \"sagittis\",\n  \"aliquam\",\n  \"malesuada\",\n  \"bibendum\",\n  \"arcu\",\n  \"vitae\",\n  \"elementum\",\n  \"curabitur\",\n  \"vitae\",\n  \"nunc\",\n  \"sed\",\n  \"velit\",\n  \"dignissim\",\n  \"sodales\",\n  \"ut\",\n  \"eu\",\n  \"sem\",\n  \"integer\",\n  \"vitae\",\n  \"justo\",\n  \"eget\",\n  \"magna\",\n  \"fermentum\",\n  \"iaculis\",\n  \"eu\",\n  \"non\",\n  \"diam\",\n  \"phasellus\",\n  \"vestibulum\",\n  \"lorem\",\n  \"sed\",\n  \"risus\",\n  \"ultricies\",\n  \"tristique\",\n  \"nulla\",\n  \"aliquet\",\n  \"tortor,\",\n  \"at\",\n  \"auctor\",\n  \"urna\",\n  \"nunc\",\n  \"id\",\n  \"cursus\",\n  \"metus\",\n  \"aliquam\",\n  \"eleifend\",\n  \"mi\",\n  \"in\",\n  \"nulla\",\n  \"posuere\",\n  \"sollicitudin\",\n  \"aliquam\",\n  \"ultrices\",\n  \"sagittis\",\n  \"orci,\",\n  \"a\",\n  \"scelerisque\",\n  \"purus\",\n  \"semper\",\n  \"eget\",\n  \"duis\",\n  \"at\",\n  \"tellus\",\n  \"at\",\n  \"urna\",\n  \"condimentum\",\n  \"mattis\",\n  \"pellentesque\",\n  \"id\",\n  \"nibh\",\n  \"tortor,\",\n  \"id\",\n  \"aliquet\",\n  \"lectus\",\n  \"proin\",\n  \"nibh\",\n  \"nisl,\",\n  \"condimentum\",\n  \"id\",\n  \"venenatis\",\n  \"a,\",\n  \"condimentum\",\n  \"vitae\",\n  \"sapien\",\n  \"pellentesque\",\n  \"habitant\",\n  \"morbi\",\n  \"tristique\",\n  \"senectus\",\n  \"et\",\n  \"netus\",\n  \"et\",\n  \"malesuada\",\n  \"fames\",\n  \"ac\",\n  \"turpis\",\n  \"egestas\",\n  \"sed\",\n  \"tempus,\",\n  \"urna\",\n  \"et\",\n  \"pharetra\",\n  \"pharetra,\",\n  \"massa\",\n  \"massa\",\n  \"ultricies\",\n  \"mi,\",\n  \"quis\",\n  \"hendrerit\",\n  \"dolor\",\n  \"magna\",\n  \"eget\",\n  \"est\",\n  \"lorem\",\n  \"ipsum\",\n  \"dolor\",\n  \"sit\",\n  \"amet,\",\n  \"consectetur\",\n  \"adipiscing\",\n  \"elit\",\n  \"pellentesque\",\n  \"habitant\",\n  \"morbi\",\n  \"tristique\",\n  \"senectus\",\n  \"et\",\n  \"netus\",\n  \"et\",\n  \"malesuada\",\n  \"fames\",\n  \"ac\",\n  \"turpis\",\n  \"egestas\",\n  \"integer\",\n  \"eget\",\n  \"aliquet\",\n  \"nibh\",\n  \"praesent\",\n  \"tristique\",\n  \"magna\",\n  \"sit\",\n  \"amet\",\n  \"purus\",\n  \"gravida\",\n  \"quis\",\n  \"blandit\",\n  \"turpis\",\n  \"cursus\",\n  \"in\",\n  \"hac\",\n  \"habitasse\",\n  \"platea\",\n  \"dictumst\",\n  \"quisque\",\n  \"sagittis,\",\n  \"purus\",\n  \"sit\",\n  \"amet\",\n  \"volutpat\",\n  \"consequat,\",\n  \"mauris\",\n  \"nunc\",\n  \"congue\",\n  \"nisi,\",\n  \"vitae\",\n  \"suscipit\",\n  \"tellus\",\n  \"mauris\",\n  \"a\",\n  \"diam\",\n  \"maecenas\",\n  \"sed\",\n  \"ut\",\n  \"sem\",\n  \"viverra\",\n  \"aliquet\",\n  \"eget\",\n  \"sit\",\n  \"amet\",\n  \"tellus\",\n  \"cras\",\n  \"adipiscing\",\n  \"eu\",\n  \"turpis\",\n  \"egestas\",\n  \"pretium\",\n  \"aenean\",\n  \"pharetra,\",\n  \"magna\",\n  \"ac\",\n  \"placerat\",\n  \"vestibulum,\",\n  \"lectus\",\n  \"mauris\",\n  \"ultrices\",\n  \"eros,\",\n  \"in\",\n  \"cursus\",\n  \"turpis\",\n  \"massa\",\n  \"tincidunt\",\n  \"dui\",\n  \"ut\",\n  \"ornare\",\n  \"lectus\",\n  \"sit\",\n  \"amet\",\n  \"est\",\n  \"placerat\",\n  \"in\",\n  \"egestas\",\n  \"erat\",\n  \"imperdiet\",\n  \"sed\",\n  \"euismod\",\n  \"nisi\",\n  \"porta\",\n  \"lorem\",\n  \"mollis\",\n  \"aliquam\",\n  \"ut\",\n  \"porttitor\",\n  \"leo\",\n  \"a\",\n  \"diam\",\n  \"sollicitudin\",\n  \"tempor\",\n  \"id\",\n  \"eu\",\n  \"nisl\",\n  \"nunc\",\n  \"mi\",\n  \"ipsum,\",\n  \"faucibus\",\n  \"vitae\",\n  \"aliquet\",\n  \"nec,\",\n  \"ullamcorper\",\n  \"sit\",\n  \"amet\",\n  \"risus\",\n  \"nullam\",\n  \"eget\",\n  \"felis\",\n  \"eget\",\n  \"nunc\",\n  \"lobortis\",\n  \"mattis\",\n  \"aliquam\",\n  \"faucibus\",\n  \"purus\",\n  \"in\",\n  \"massa\",\n  \"tempor\",\n  \"nec\",\n  \"feugiat\",\n  \"nisl\",\n  \"pretium\",\n  \"fusce\",\n  \"id\",\n  \"velit\",\n  \"ut\",\n  \"tortor\",\n  \"pretium\",\n  \"viverra\",\n  \"suspendisse\",\n  \"potenti\",\n  \"nullam\",\n  \"ac\",\n  \"tortor\",\n  \"vitae\",\n  \"purus\",\n  \"faucibus\",\n  \"ornare\",\n  \"suspendisse\",\n  \"sed\",\n  \"nisi\",\n  \"lacus,\",\n  \"sed\",\n  \"viverra\",\n  \"tellus\",\n  \"in\",\n  \"hac\",\n  \"habitasse\",\n  \"platea\",\n  \"dictumst\",\n  \"vestibulum\",\n  \"rhoncus\",\n  \"est\",\n  \"pellentesque\",\n  \"elit\",\n  \"ullamcorper\",\n  \"dignissim\",\n  \"cras\",\n  \"tincidunt\",\n  \"lobortis\",\n  \"feugiat\",\n  \"vivamus\",\n  \"at\",\n  \"augue\",\n  \"eget\",\n  \"arcu\",\n  \"dictum\",\n  \"varius\",\n  \"duis\",\n  \"at\",\n  \"consectetur\",\n  \"lorem\",\n  \"donec\",\n  \"massa\",\n  \"sapien,\",\n  \"faucibus\",\n  \"et\",\n  \"molestie\",\n  \"ac,\",\n  \"feugiat\",\n  \"sed\",\n  \"lectus\",\n  \"vestibulum\",\n  \"mattis\",\n  \"ullamcorper\",\n  \"velit\",\n  \"sed\",\n  \"ullamcorper\",\n  \"morbi\",\n  \"tincidunt\",\n  \"ornare\",\n  \"massa,\",\n  \"eget\",\n  \"egestas\",\n  \"purus\",\n  \"viverra\",\n  \"accumsan\",\n  \"in\",\n  \"nisl\",\n  \"nisi,\",\n  \"scelerisque\",\n  \"eu\",\n  \"ultrices\",\n  \"vitae,\",\n  \"auctor\",\n  \"eu\",\n  \"augue\",\n  \"ut\",\n  \"lectus\",\n  \"arcu,\",\n  \"bibendum\",\n  \"at\",\n  \"varius\",\n  \"vel,\",\n  \"pharetra\",\n  \"vel\",\n  \"turpis\",\n  \"nunc\",\n  \"eget\",\n  \"lorem\",\n  \"dolor,\",\n  \"sed\",\n  \"viverra\",\n  \"ipsum\",\n  \"nunc\",\n  \"aliquet\",\n  \"bibendum\",\n  \"enim,\",\n  \"facilisis\",\n  \"gravida\",\n  \"neque\",\n  \"convallis\",\n  \"a\",\n  \"cras\",\n  \"semper\",\n  \"auctor\",\n  \"neque,\",\n  \"vitae\",\n  \"tempus\",\n  \"quam\",\n  \"pellentesque\",\n  \"nec\",\n  \"nam\",\n  \"aliquam\",\n  \"sem\",\n  \"et\",\n  \"tortor\",\n  \"consequat\",\n  \"id\",\n  \"porta\",\n  \"nibh\",\n  \"enib,\",\n  \"venenatis\",\n  \"cras\",\n  \"sed\",\n  \"felis\",\n  \"eget\",\n  \"velit\",\n  \"aliquet\",\n  \"sagittis\",\n  \"id\",\n  \"consectetur\",\n  \"purus\",\n  \"ut\",\n  \"faucibus\",\n  \"pulvinar\",\n  \"elementum\",\n  \"integer\",\n  \"neque,\",\n  \"volutpat\",\n  \"ac\",\n  \"tincidunt\",\n  \"vitae,\",\n  \"semper\",\n  \"quis\",\n  \"lectus\",\n  \"nulla\",\n  \"at\",\n  \"volutpat\",\n  \"diam\",\n  \"ut\",\n  \"venenatis\",\n  \"tellus\",\n  \"in\",\n  \"metus\",\n  \"vulputate\",\n  \"eu\",\n  \"scelerisque\",\n  \"felis\",\n  \"imperdiet\",\n  \"proin\",\n  \"fermentum\",\n  \"leo\",\n  \"vel\",\n  \"orci\",\n  \"porta\",\n  \"non\",\n  \"pulvinar\",\n  \"neque\",\n  \"laoreet\",\n  \"suspendisse\",\n  \"interdum\",\n  \"consectetur\",\n  \"libero,\",\n  \"id\",\n  \"faucibus\",\n  \"nisl\",\n  \"tincidunt\",\n  \"eget\",\n  \"nullam\",\n  \"non\",\n  \"nisi\",\n  \"est,\",\n  \"sit\",\n  \"amet\",\n  \"facilisis\",\n  \"magna\",\n  \"etiam\",\n  \"tempor,\",\n  \"orci\",\n  \"eu\",\n  \"lobortis\",\n  \"elementum,\",\n  \"nibh\",\n  \"tellus\",\n  \"molestie\",\n  \"nunc,\",\n  \"non\",\n  \"blandit\",\n  \"massa\",\n  \"nec\",\n  \"dui\",\n  \"nunc\",\n  \"mattis\",\n  \"ut\",\n  \"tellus\",\n  \"elementum\",\n  \"sagittis\",\n  \"vitae\",\n  \"et\",\n  \"leo\",\n  \"duis\",\n  \"ut\",\n  \"diam\",\n  \"quam\",\n  \"nulla\",\n  \"porttitor\",\n  \"massa\",\n  \"id\",\n  \"neque\",\n  \"aliquam\",\n  \"vestibulum\",\n  \"morbi\",\n  \"blandit\",\n  \"cursus\",\n  \"risus,\",\n  \"at\",\n  \"ultrices\",\n  \"mi\",\n  \"tempus\",\n  \"imperdiet\",\n  \"nulla\",\n  \"malesuada\",\n  \"pellentesque\",\n  \"elit\",\n  \"eget\",\n  \"gravida\",\n  \"cum\",\n  \"sociis\",\n  \"natoque\",\n  \"penatibus\",\n  \"et\",\n  \"magnis\",\n  \"dis\",\n  \"parturient\",\n  \"montes,\",\n  \"nascetur\",\n  \"ridiculus\",\n  \"mus\",\n  \"mauris\",\n  \"vitae\",\n  \"ultricies\",\n  \"leo\",\n  \"integer\",\n  \"malesuada\",\n  \"nunc\",\n  \"vel\",\n  \"risus\",\n  \"commodo\",\n  \"viverra\",\n  \"maecenas\",\n  \"accumsan,\",\n  \"lacus\",\n  \"vel\",\n  \"facilisis\",\n  \"volutpat,\",\n  \"est\",\n  \"velit\",\n  \"egestas\",\n  \"dui,\",\n  \"id\",\n  \"ornare\",\n  \"arcu\",\n  \"odio\",\n  \"ut\",\n  \"sem\",\n  \"nulla\",\n  \"pharetra\",\n  \"diam\",\n  \"sit\",\n  \"amet\",\n  \"nisl\",\n  \"suscipit\",\n  \"adipiscing\",\n  \"bibendum\",\n  \"est\",\n  \"ultricies\",\n  \"integer\",\n  \"quis\",\n  \"auctor\",\n  \"elit\",\n  \"sed\",\n  \"vulputate\",\n  \"mi\",\n  \"sit\",\n  \"amet\",\n  \"mauris\",\n  \"commodo\",\n  \"quis\",\n  \"imperdiet\",\n  \"massa\",\n  \"tincidunt\",\n  \"nunc\",\n  \"pulvinar\",\n  \"sapien\",\n  \"et\",\n  \"ligula\",\n  \"ullamcorper\",\n  \"malesuada\",\n  \"proin\",\n  \"libero\",\n  \"nunc,\",\n  \"consequat\",\n  \"interdum\",\n  \"varius\",\n  \"sit\",\n  \"amet,\",\n  \"mattis\",\n  \"vulputate\",\n  \"nulla\",\n  \"aliquet\",\n  \"porttitor\",\n  \"lacus,\",\n  \"luctus\",\n  \"accumsan\",\n  \"tortor\",\n  \"posuere\",\n  \"ac\",\n  \"ut\",\n  \"consequat\",\n  \"semper\",\n  \"viverra\",\n  \"nam\",\n  \"libero\",\n  \"justo,\",\n  \"laoreet\",\n  \"sit\",\n  \"amet\",\n  \"cursus\",\n  \"sit\",\n  \"amet,\",\n  \"dictum\",\n  \"sit\",\n  \"amet\",\n  \"justo\",\n  \"donec\",\n  \"diam,\",\n  \"vulputate\",\n  \"ut\",\n  \"pharetra\",\n  \"sit\",\n  \"amet,\",\n  \"aliquam\",\n  \"id\",\n  \"diam\",\n  \"maecenas\",\n  \"ultricies\",\n  \"mi\",\n  \"eget\",\n  \"mauris\",\n  \"pharetra\",\n  \"et\",\n  \"ultrices\",\n  \"neque\",\n  \"ornare\",\n  \"aenean\",\n  \"euismod\",\n  \"elementum\",\n  \"nisi,\",\n  \"quis\",\n  \"eleifend\",\n  \"quam\",\n  \"adipiscing\",\n  \"vitae\",\n  \"proin\",\n  \"sagittis,\",\n  \"nisl\",\n  \"rhoncus\",\n  \"mattis\",\n  \"rhoncus,\",\n  \"urna\",\n  \"neque\",\n  \"viverra\",\n  \"justo,\",\n  \"nec\",\n  \"ultrices\",\n  \"dui\",\n  \"sapien\",\n  \"eget\",\n  \"mi\",\n  \"proin\",\n  \"sed\",\n  \"libero\",\n  \"enim,\",\n  \"sed\",\n  \"faucibus\",\n  \"turpis\",\n  \"in\",\n  \"eu\",\n  \"mi\",\n  \"bibendum\",\n  \"neque\",\n  \"egestas\",\n  \"congue\",\n  \"quisque\",\n  \"egestas\",\n  \"diam\",\n  \"in\",\n  \"arcu\",\n  \"cursus\",\n  \"euismod\",\n  \"quis\",\n  \"viverra\",\n  \"nibh\",\n  \"cras\",\n  \"pulvinar\",\n  \"mattis\",\n  \"nunc,\",\n  \"sed\",\n  \"blandit\",\n  \"libero\",\n  \"volutpat\",\n  \"sed\",\n  \"cras\",\n  \"ornare\",\n  \"arcu\",\n  \"dui\",\n  \"vivamus\",\n  \"arcu\",\n  \"felis,\",\n  \"bibendum\",\n  \"ut\",\n  \"tristique\",\n  \"et,\",\n  \"egestas\",\n  \"quis\",\n  \"ipsum\",\n  \"suspendisse\",\n  \"ultrices\",\n  \"gravida\",\n  \"dictum\",\n  \"fusce\",\n  \"ut\",\n  \"placerat\",\n  \"orci\",\n  \"nulla\",\n  \"pellentesque\",\n  \"dignissim\",\n  \"enim,\",\n  \"sit\",\n  \"amet\",\n  \"venenatis\",\n  \"urna\",\n  \"cursus\",\n  \"eget\",\n  \"nunc\",\n  \"scelerisque\",\n  \"viverra\",\n  \"mauris,\",\n  \"in\",\n  \"aliquam\",\n  \"sem\",\n  \"fringilla\",\n  \"ut\",\n  \"morbi\",\n  \"tincidunt\",\n  \"augue\",\n  \"interdum\",\n  \"velit\",\n  \"euismod\",\n  \"in\",\n  \"pellentesque\",\n  \"massa\",\n  \"placerat\",\n  \"duis\",\n  \"ultricies\",\n  \"lacus\",\n  \"sed\",\n  \"turpis\",\n  \"tincidunt\",\n  \"id\",\n  \"aliquet\",\n  \"risus\",\n  \"feugiat\",\n  \"in\",\n  \"ante\",\n  \"metus,\",\n  \"dictum\",\n  \"at\",\n  \"tempor\",\n  \"commodo,\",\n  \"ullamcorper\",\n  \"a\",\n  \"lacus\",\n  \"vestibulum\",\n  \"sed\",\n  \"arcu\",\n  \"non\",\n  \"odio\",\n  \"euismod\",\n  \"lacinia\",\n  \"at\",\n  \"quis\",\n  \"risus\",\n  \"sed\",\n  \"vulputate\",\n  \"odio\",\n  \"ut\",\n  \"blandit\",\n  \"volutpat\",\n  \"maecenas\",\n  \"volutpat\",\n  \"blandit\",\n  \"aliquam\",\n  \"etiam\",\n  \"erat\",\n  \"velit,\",\n  \"scelerisque\",\n  \"in\",\n  \"dictum\",\n  \"non,\",\n  \"consectetur\",\n  \"a\",\n  \"erat\",\n  \"nam\",\n  \"at\",\n  \"lectus\",\n  \"urna\",\n  \"duis\",\n  \"convallis\",\n  \"convallis\",\n  \"tellus,\",\n  \"id\",\n  \"interdum\",\n  \"velit\",\n  \"laoreet\",\n  \"id\",\n  \"donec\",\n  \"ultrices\",\n  \"tincidunt\",\n  \"arcu,\",\n  \"non\",\n  \"sodales\",\n  \"neque\",\n  \"sodales\",\n  \"ut\",\n  \"etiam\",\n  \"sit\",\n  \"amet\",\n  \"nisl\",\n  \"purus,\",\n  \"in\",\n  \"mollis\",\n  \"nunc\",\n  \"sed\",\n  \"id\",\n  \"semper\",\n  \"risus\",\n  \"in\",\n  \"hendrerit\",\n  \"gravida\",\n  \"rutrum\",\n  \"quisque\",\n  \"non\",\n  \"tellus\",\n  \"orci,\",\n  \"ac\",\n  \"auctor\",\n  \"augue\",\n  \"mauris\",\n  \"augue\",\n  \"neque,\",\n  \"gravida\",\n  \"in\",\n  \"fermentum\",\n  \"et,\",\n  \"sollicitudin\",\n  \"ac\",\n  \"orci\",\n  \"phasellus\",\n  \"egestas\",\n  \"tellus\",\n  \"rutrum\",\n  \"tellus\",\n  \"pellentesque\",\n  \"eu\",\n  \"tincidunt\",\n  \"tortor\",\n  \"aliquam\",\n  \"nulla\",\n  \"facilisi\",\n  \"cras\",\n  \"fermentum,\",\n  \"odio\",\n  \"eu\",\n  \"feugiat\",\n  \"pretium,\",\n  \"nibh\",\n  \"ipsum\",\n  \"consequat\",\n  \"nisl,\",\n  \"vel\",\n  \"pretium\",\n  \"lectus\",\n  \"quam\",\n  \"id\",\n  \"leo\",\n  \"in\",\n  \"vitae\",\n  \"turpis\",\n  \"massa\",\n  \"sed\",\n  \"elementum\",\n  \"tempus\",\n  \"egestas\",\n  \"sed\",\n  \"sed\",\n  \"risus\",\n  \"pretium\",\n  \"quam\",\n  \"vulputate\",\n  \"dignissim\",\n  \"suspendisse\",\n  \"in\",\n  \"est\",\n  \"ante\",\n  \"in\",\n  \"nibh\",\n  \"mauris,\",\n  \"cursus\",\n  \"mattis\",\n  \"molestie\",\n  \"a,\",\n  \"iaculis\",\n  \"at\",\n  \"erat\",\n  \"pellentesque\",\n  \"adipiscing\",\n  \"commodo\",\n  \"elit,\",\n  \"at\",\n  \"imperdiet\",\n  \"dui\",\n  \"accumsan\",\n  \"sit\",\n  \"amet\",\n  \"nulla\",\n  \"facilisi\",\n  \"morbi\",\n  \"tempus\",\n  \"iaculis\",\n  \"urna,\",\n  \"id\",\n  \"volutpat\",\n  \"lacus\",\n  \"laoreet\",\n  \"non\",\n  \"curabitur\",\n  \"gravida\",\n  \"arcu\",\n  \"ac\",\n  \"tortor\",\n  \"dignissim\",\n  \"convallis\",\n  \"aenean\",\n  \"et\",\n  \"tortor\",\n  \"at\",\n  \"risus\",\n  \"viverra\",\n  \"adipiscing\",\n  \"at\",\n  \"in\",\n  \"tellus\",\n  \"integer\",\n  \"feugiat\",\n  \"scelerisque\",\n  \"varius\",\n  \"morbi\",\n  \"nunc,\",\n  \"faucibus\",\n  \"a\",\n  \"pellentesque\",\n  \"sit\",\n  \"amet,\",\n  \"porttitor\",\n  \"eget\",\n  \"dolor\",\n  \"morbi\",\n  \"non\",\n  \"arcu\",\n  \"risus,\",\n  \"quis\",\n  \"varius\",\n  \"quam\",\n  \"quisque\",\n  \"id\",\n  \"diam\",\n  \"vel\",\n  \"quam\",\n  \"elementum\",\n  \"pulvinar\",\n  \"etiam\",\n  \"non\",\n  \"quam\",\n  \"lacus\",\n  \"suspendisse\",\n  \"faucibus\",\n  \"interdum\",\n  \"posuere\",\n  \"lorem\",\n  \"ipsum\",\n  \"dolor\",\n  \"sit\",\n  \"amet,\",\n  \"consectetur\",\n  \"adipiscing\",\n  \"elit\",\n  \"duis\",\n  \"tristique\",\n  \"sollicitudin\",\n  \"nibh\",\n  \"sit\",\n  \"amet\",\n  \"commodo\",\n  \"nulla\",\n  \"facilisi\",\n  \"nullam\",\n  \"vehicula\",\n  \"ipsum\",\n  \"a\",\n  \"arcu\",\n  \"cursus\",\n  \"vitae\",\n  \"congue\",\n  \"mauris\",\n  \"rhoncus\",\n  \"aenean\",\n  \"vel\",\n  \"elit\",\n  \"scelerisque\",\n  \"mauris\",\n  \"pellentesque\",\n  \"pulvinar\",\n  \"pellentesque\",\n  \"habitant\",\n  \"morbi\",\n  \"tristique\",\n  \"senectus\",\n  \"et\",\n  \"netus\",\n  \"et\",\n  \"malesuada\",\n  \"fames\",\n  \"ac\",\n  \"turpis\",\n  \"egestas\",\n  \"maecenas\",\n  \"pharetra\",\n  \"convallis\",\n  \"posuere\",\n  \"morbi\",\n  \"leo\",\n  \"urna,\",\n  \"molestie\",\n  \"at\",\n  \"elementum\",\n  \"eu,\",\n  \"facilisis\",\n  \"sed\",\n  \"odio\",\n  \"morbi\",\n  \"quis\",\n  \"commodo\",\n  \"odio\",\n  \"aenean\",\n  \"sed\",\n  \"adipiscing\",\n  \"diam\",\n  \"donec\",\n  \"adipiscing\",\n  \"tristique\",\n  \"risus\",\n  \"nec\",\n  \"feugiat\",\n  \"in\",\n  \"fermentum\",\n  \"posuere\",\n  \"urna\",\n  \"nec\",\n  \"tincidunt\",\n  \"praesent\",\n  \"semper\",\n  \"feugiat\",\n  \"nibh\",\n  \"sed\",\n  \"pulvinar\",\n  \"proin\",\n  \"gravida\",\n  \"hendrerit\",\n  \"lectus\",\n  \"a\",\n  \"molestie\",\n  \"enibook\"\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dictionary",
          "declaration": {
            "name": "dictionary",
            "module": "cdn/chunks/chunk.I47CHKS7.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.JEYYOM6X.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "Text",
          "default": "class _Text {\n  /**\n  Get the line description around the given position.\n  */\n  lineAt(pos) {\n    if (pos < 0 || pos > this.length)\n      throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);\n    return this.lineInner(pos, false, 1, 0);\n  }\n  /**\n  Get the description for the given (1-based) line number.\n  */\n  line(n) {\n    if (n < 1 || n > this.lines)\n      throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);\n    return this.lineInner(n, true, 1, 0);\n  }\n  /**\n  Replace a range of the text with the given content.\n  */\n  replace(from, to, text) {\n    [from, to] = clip(this, from, to);\n    let parts = [];\n    this.decompose(\n      0,\n      from,\n      parts,\n      2\n      /* Open.To */\n    );\n    if (text.length)\n      text.decompose(\n        0,\n        text.length,\n        parts,\n        1 | 2\n        /* Open.To */\n      );\n    this.decompose(\n      to,\n      this.length,\n      parts,\n      1\n      /* Open.From */\n    );\n    return TextNode.from(parts, this.length - (to - from) + text.length);\n  }\n  /**\n  Append another document to this one.\n  */\n  append(other) {\n    return this.replace(this.length, this.length, other);\n  }\n  /**\n  Retrieve the text between the given points.\n  */\n  slice(from, to = this.length) {\n    [from, to] = clip(this, from, to);\n    let parts = [];\n    this.decompose(from, to, parts, 0);\n    return TextNode.from(parts, to - from);\n  }\n  /**\n  Test whether this text is equal to another instance.\n  */\n  eq(other) {\n    if (other == this)\n      return true;\n    if (other.length != this.length || other.lines != this.lines)\n      return false;\n    let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);\n    let a = new RawTextCursor(this), b = new RawTextCursor(other);\n    for (let skip = start, pos = start; ; ) {\n      a.next(skip);\n      b.next(skip);\n      skip = 0;\n      if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)\n        return false;\n      pos += a.value.length;\n      if (a.done || pos >= end)\n        return true;\n    }\n  }\n  /**\n  Iterate over the text. When `dir` is `-1`, iteration happens\n  from end to start. This will return lines and the breaks between\n  them as separate strings.\n  */\n  iter(dir = 1) {\n    return new RawTextCursor(this, dir);\n  }\n  /**\n  Iterate over a range of the text. When `from` > `to`, the\n  iterator will run in reverse.\n  */\n  iterRange(from, to = this.length) {\n    return new PartialTextCursor(this, from, to);\n  }\n  /**\n  Return a cursor that iterates over the given range of lines,\n  _without_ returning the line breaks between, and yielding empty\n  strings for empty lines.\n  \n  When `from` and `to` are given, they should be 1-based line numbers.\n  */\n  iterLines(from, to) {\n    let inner;\n    if (from == null) {\n      inner = this.iter();\n    } else {\n      if (to == null)\n        to = this.lines + 1;\n      let start = this.line(from).from;\n      inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));\n    }\n    return new LineCursor(inner);\n  }\n  /**\n  Return the document as a string, using newline characters to\n  separate lines.\n  */\n  toString() {\n    return this.sliceString(0);\n  }\n  /**\n  Convert the document to an array of lines (which can be\n  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).\n  */\n  toJSON() {\n    let lines = [];\n    this.flatten(lines);\n    return lines;\n  }\n  /**\n  @internal\n  */\n  constructor() {\n  }\n  /**\n  Create a `Text` instance for the given array of lines.\n  */\n  static of(text) {\n    if (text.length == 0)\n      throw new RangeError(\"A document must have at least one line\");\n    if (text.length == 1 && !text[0])\n      return _Text.empty;\n    return text.length <= 32 ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));\n  }\n}"
        },
        {
          "kind": "function",
          "name": "findClusterBreak",
          "parameters": [
            {
              "name": "str"
            },
            {
              "name": "pos"
            },
            {
              "name": "forward",
              "default": "true"
            },
            {
              "name": "includeExtending",
              "default": "true"
            }
          ]
        },
        {
          "kind": "function",
          "name": "codePointAt",
          "parameters": [
            {
              "name": "str"
            },
            {
              "name": "pos"
            }
          ]
        },
        {
          "kind": "function",
          "name": "fromCodePoint",
          "parameters": [
            {
              "name": "code"
            }
          ]
        },
        {
          "kind": "function",
          "name": "codePointSize",
          "parameters": [
            {
              "name": "code"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "MapMode"
        },
        {
          "kind": "variable",
          "name": "ChangeDesc",
          "default": "class _ChangeDesc {\n  // Sections are encoded as pairs of integers. The first is the\n  // length in the current document, and the second is -1 for\n  // unaffected sections, and the length of the replacement content\n  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,\n  // 0), and a replacement two positive numbers.\n  /**\n  @internal\n  */\n  constructor(sections) {\n    this.sections = sections;\n  }\n  /**\n  The length of the document before the change.\n  */\n  get length() {\n    let result = 0;\n    for (let i = 0; i < this.sections.length; i += 2)\n      result += this.sections[i];\n    return result;\n  }\n  /**\n  The length of the document after the change.\n  */\n  get newLength() {\n    let result = 0;\n    for (let i = 0; i < this.sections.length; i += 2) {\n      let ins = this.sections[i + 1];\n      result += ins < 0 ? this.sections[i] : ins;\n    }\n    return result;\n  }\n  /**\n  False when there are actual changes in this set.\n  */\n  get empty() {\n    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;\n  }\n  /**\n  Iterate over the unchanged parts left by these changes. `posA`\n  provides the position of the range in the old document, `posB`\n  the new position in the changed document.\n  */\n  iterGaps(f) {\n    for (let i = 0, posA = 0, posB = 0; i < this.sections.length; ) {\n      let len = this.sections[i++], ins = this.sections[i++];\n      if (ins < 0) {\n        f(posA, posB, len);\n        posB += len;\n      } else {\n        posB += ins;\n      }\n      posA += len;\n    }\n  }\n  /**\n  Iterate over the ranges changed by these changes. (See\n  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a\n  variant that also provides you with the inserted text.)\n  `fromA`/`toA` provides the extent of the change in the starting\n  document, `fromB`/`toB` the extent of the replacement in the\n  changed document.\n  \n  When `individual` is true, adjacent changes (which are kept\n  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are\n  reported separately.\n  */\n  iterChangedRanges(f, individual = false) {\n    iterChanges(this, f, individual);\n  }\n  /**\n  Get a description of the inverted form of these changes.\n  */\n  get invertedDesc() {\n    let sections = [];\n    for (let i = 0; i < this.sections.length; ) {\n      let len = this.sections[i++], ins = this.sections[i++];\n      if (ins < 0)\n        sections.push(len, ins);\n      else\n        sections.push(ins, len);\n    }\n    return new _ChangeDesc(sections);\n  }\n  /**\n  Compute the combined effect of applying another set of changes\n  after this one. The length of the document after this set should\n  match the length before `other`.\n  */\n  composeDesc(other) {\n    return this.empty ? other : other.empty ? this : composeSets(this, other);\n  }\n  /**\n  Map this description, which should start with the same document\n  as `other`, over another set of changes, so that it can be\n  applied after it. When `before` is true, map as if the changes\n  in `other` happened before the ones in `this`.\n  */\n  mapDesc(other, before = false) {\n    return other.empty ? this : mapSet(this, other, before);\n  }\n  mapPos(pos, assoc = -1, mode = MapMode.Simple) {\n    let posA = 0, posB = 0;\n    for (let i = 0; i < this.sections.length; ) {\n      let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;\n      if (ins < 0) {\n        if (endA > pos)\n          return posB + (pos - posA);\n        posB += len;\n      } else {\n        if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos))\n          return null;\n        if (endA > pos || endA == pos && assoc < 0 && !len)\n          return pos == posA || assoc < 0 ? posB : posB + ins;\n        posB += ins;\n      }\n      posA = endA;\n    }\n    if (pos > posA)\n      throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);\n    return posB;\n  }\n  /**\n  Check whether these changes touch a given range. When one of the\n  changes entirely covers the range, the string `\"cover\"` is\n  returned.\n  */\n  touchesRange(from, to = from) {\n    for (let i = 0, pos = 0; i < this.sections.length && pos <= to; ) {\n      let len = this.sections[i++], ins = this.sections[i++], end = pos + len;\n      if (ins >= 0 && pos <= to && end >= from)\n        return pos < from && end > to ? \"cover\" : true;\n      pos = end;\n    }\n    return false;\n  }\n  /**\n  @internal\n  */\n  toString() {\n    let result = \"\";\n    for (let i = 0; i < this.sections.length; ) {\n      let len = this.sections[i++], ins = this.sections[i++];\n      result += (result ? \" \" : \"\") + len + (ins >= 0 ? \":\" + ins : \"\");\n    }\n    return result;\n  }\n  /**\n  Serialize this change desc to a JSON-representable value.\n  */\n  toJSON() {\n    return this.sections;\n  }\n  /**\n  Create a change desc from its JSON representation (as produced\n  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).\n  */\n  static fromJSON(json) {\n    if (!Array.isArray(json) || json.length % 2 || json.some((a) => typeof a != \"number\"))\n      throw new RangeError(\"Invalid JSON representation of ChangeDesc\");\n    return new _ChangeDesc(json);\n  }\n  /**\n  @internal\n  */\n  static create(sections) {\n    return new _ChangeDesc(sections);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "ChangeSet",
          "default": "class _ChangeSet extends ChangeDesc {\n  constructor(sections, inserted) {\n    super(sections);\n    this.inserted = inserted;\n  }\n  /**\n  Apply the changes to a document, returning the modified\n  document.\n  */\n  apply(doc2) {\n    if (this.length != doc2.length)\n      throw new RangeError(\"Applying change set to a document with the wrong length\");\n    iterChanges(this, (fromA, toA, fromB, _toB, text) => doc2 = doc2.replace(fromB, fromB + (toA - fromA), text), false);\n    return doc2;\n  }\n  mapDesc(other, before = false) {\n    return mapSet(this, other, before, true);\n  }\n  /**\n  Given the document as it existed _before_ the changes, return a\n  change set that represents the inverse of this set, which could\n  be used to go from the document created by the changes back to\n  the document as it existed before the changes.\n  */\n  invert(doc2) {\n    let sections = this.sections.slice(), inserted = [];\n    for (let i = 0, pos = 0; i < sections.length; i += 2) {\n      let len = sections[i], ins = sections[i + 1];\n      if (ins >= 0) {\n        sections[i] = ins;\n        sections[i + 1] = len;\n        let index = i >> 1;\n        while (inserted.length < index)\n          inserted.push(Text.empty);\n        inserted.push(len ? doc2.slice(pos, pos + len) : Text.empty);\n      }\n      pos += len;\n    }\n    return new _ChangeSet(sections, inserted);\n  }\n  /**\n  Combine two subsequent change sets into a single set. `other`\n  must start in the document produced by `this`. If `this` goes\n  `docA` → `docB` and `other` represents `docB` → `docC`, the\n  returned value will represent the change `docA` → `docC`.\n  */\n  compose(other) {\n    return this.empty ? other : other.empty ? this : composeSets(this, other, true);\n  }\n  /**\n  Given another change set starting in the same document, maps this\n  change set over the other, producing a new change set that can be\n  applied to the document produced by applying `other`. When\n  `before` is `true`, order changes as if `this` comes before\n  `other`, otherwise (the default) treat `other` as coming first.\n  \n  Given two changes `A` and `B`, `A.compose(B.map(A))` and\n  `B.compose(A.map(B, true))` will produce the same document. This\n  provides a basic form of [operational\n  transformation](https://en.wikipedia.org/wiki/Operational_transformation),\n  and can be used for collaborative editing.\n  */\n  map(other, before = false) {\n    return other.empty ? this : mapSet(this, other, before, true);\n  }\n  /**\n  Iterate over the changed ranges in the document, calling `f` for\n  each, with the range in the original document (`fromA`-`toA`)\n  and the range that replaces it in the new document\n  (`fromB`-`toB`).\n  \n  When `individual` is true, adjacent changes are reported\n  separately.\n  */\n  iterChanges(f, individual = false) {\n    iterChanges(this, f, individual);\n  }\n  /**\n  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change\n  set.\n  */\n  get desc() {\n    return ChangeDesc.create(this.sections);\n  }\n  /**\n  @internal\n  */\n  filter(ranges) {\n    let resultSections = [], resultInserted = [], filteredSections = [];\n    let iter = new SectionIter(this);\n    done:\n      for (let i = 0, pos = 0; ; ) {\n        let next = i == ranges.length ? 1e9 : ranges[i++];\n        while (pos < next || pos == next && iter.len == 0) {\n          if (iter.done)\n            break done;\n          let len = Math.min(iter.len, next - pos);\n          addSection(filteredSections, len, -1);\n          let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;\n          addSection(resultSections, len, ins);\n          if (ins > 0)\n            addInsert(resultInserted, resultSections, iter.text);\n          iter.forward(len);\n          pos += len;\n        }\n        let end = ranges[i++];\n        while (pos < end) {\n          if (iter.done)\n            break done;\n          let len = Math.min(iter.len, end - pos);\n          addSection(resultSections, len, -1);\n          addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);\n          iter.forward(len);\n          pos += len;\n        }\n      }\n    return {\n      changes: new _ChangeSet(resultSections, resultInserted),\n      filtered: ChangeDesc.create(filteredSections)\n    };\n  }\n  /**\n  Serialize this change set to a JSON-representable value.\n  */\n  toJSON() {\n    let parts = [];\n    for (let i = 0; i < this.sections.length; i += 2) {\n      let len = this.sections[i], ins = this.sections[i + 1];\n      if (ins < 0)\n        parts.push(len);\n      else if (ins == 0)\n        parts.push([len]);\n      else\n        parts.push([len].concat(this.inserted[i >> 1].toJSON()));\n    }\n    return parts;\n  }\n  /**\n  Create a change set for the given changes, for a document of the\n  given length, using `lineSep` as line separator.\n  */\n  static of(changes, length, lineSep) {\n    let sections = [], inserted = [], pos = 0;\n    let total = null;\n    function flush(force = false) {\n      if (!force && !sections.length)\n        return;\n      if (pos < length)\n        addSection(sections, length - pos, -1);\n      let set = new _ChangeSet(sections, inserted);\n      total = total ? total.compose(set.map(total)) : set;\n      sections = [];\n      inserted = [];\n      pos = 0;\n    }\n    function process(spec) {\n      if (Array.isArray(spec)) {\n        for (let sub of spec)\n          process(sub);\n      } else if (spec instanceof _ChangeSet) {\n        if (spec.length != length)\n          throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);\n        flush();\n        total = total ? total.compose(spec.map(total)) : spec;\n      } else {\n        let { from, to = from, insert: insert2 } = spec;\n        if (from > to || from < 0 || to > length)\n          throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);\n        let insText = !insert2 ? Text.empty : typeof insert2 == \"string\" ? Text.of(insert2.split(lineSep || DefaultSplit)) : insert2;\n        let insLen = insText.length;\n        if (from == to && insLen == 0)\n          return;\n        if (from < pos)\n          flush();\n        if (from > pos)\n          addSection(sections, from - pos, -1);\n        addSection(sections, to - from, insLen);\n        addInsert(inserted, sections, insText);\n        pos = to;\n      }\n    }\n    process(changes);\n    flush(!total);\n    return total;\n  }\n  /**\n  Create an empty changeset of the given length.\n  */\n  static empty(length) {\n    return new _ChangeSet(length ? [length, -1] : [], []);\n  }\n  /**\n  Create a changeset from its JSON representation (as produced by\n  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).\n  */\n  static fromJSON(json) {\n    if (!Array.isArray(json))\n      throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n    let sections = [], inserted = [];\n    for (let i = 0; i < json.length; i++) {\n      let part = json[i];\n      if (typeof part == \"number\") {\n        sections.push(part, -1);\n      } else if (!Array.isArray(part) || typeof part[0] != \"number\" || part.some((e, i2) => i2 && typeof e != \"string\")) {\n        throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n      } else if (part.length == 1) {\n        sections.push(part[0], 0);\n      } else {\n        while (inserted.length < i)\n          inserted.push(Text.empty);\n        inserted[i] = Text.of(part.slice(1));\n        sections.push(part[0], inserted[i].length);\n      }\n    }\n    return new _ChangeSet(sections, inserted);\n  }\n  /**\n  @internal\n  */\n  static createSet(sections, inserted) {\n    return new _ChangeSet(sections, inserted);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "EditorSelection",
          "default": "class _EditorSelection {\n  constructor(ranges, mainIndex) {\n    this.ranges = ranges;\n    this.mainIndex = mainIndex;\n  }\n  /**\n  Map a selection through a change. Used to adjust the selection\n  position for changes.\n  */\n  map(change, assoc = -1) {\n    if (change.empty)\n      return this;\n    return _EditorSelection.create(this.ranges.map((r) => r.map(change, assoc)), this.mainIndex);\n  }\n  /**\n  Compare this selection to another selection. By default, ranges\n  are compared only by position. When `includeAssoc` is true,\n  cursor ranges must also have the same\n  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.\n  */\n  eq(other, includeAssoc = false) {\n    if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)\n      return false;\n    for (let i = 0; i < this.ranges.length; i++)\n      if (!this.ranges[i].eq(other.ranges[i], includeAssoc))\n        return false;\n    return true;\n  }\n  /**\n  Get the primary selection range. Usually, you should make sure\n  your code applies to _all_ ranges, by using methods like\n  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).\n  */\n  get main() {\n    return this.ranges[this.mainIndex];\n  }\n  /**\n  Make sure the selection only has one range. Returns a selection\n  holding only the main range from this selection.\n  */\n  asSingle() {\n    return this.ranges.length == 1 ? this : new _EditorSelection([this.main], 0);\n  }\n  /**\n  Extend this selection with an extra range.\n  */\n  addRange(range, main = true) {\n    return _EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);\n  }\n  /**\n  Replace a given range with another range, and then normalize the\n  selection to merge and sort ranges if necessary.\n  */\n  replaceRange(range, which = this.mainIndex) {\n    let ranges = this.ranges.slice();\n    ranges[which] = range;\n    return _EditorSelection.create(ranges, this.mainIndex);\n  }\n  /**\n  Convert this selection to an object that can be serialized to\n  JSON.\n  */\n  toJSON() {\n    return { ranges: this.ranges.map((r) => r.toJSON()), main: this.mainIndex };\n  }\n  /**\n  Create a selection from a JSON representation.\n  */\n  static fromJSON(json) {\n    if (!json || !Array.isArray(json.ranges) || typeof json.main != \"number\" || json.main >= json.ranges.length)\n      throw new RangeError(\"Invalid JSON representation for EditorSelection\");\n    return new _EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);\n  }\n  /**\n  Create a selection holding a single range.\n  */\n  static single(anchor, head = anchor) {\n    return new _EditorSelection([_EditorSelection.range(anchor, head)], 0);\n  }\n  /**\n  Sort and merge the given set of ranges, creating a valid\n  selection.\n  */\n  static create(ranges, mainIndex = 0) {\n    if (ranges.length == 0)\n      throw new RangeError(\"A selection needs at least one range\");\n    for (let pos = 0, i = 0; i < ranges.length; i++) {\n      let range = ranges[i];\n      if (range.empty ? range.from <= pos : range.from < pos)\n        return _EditorSelection.normalized(ranges.slice(), mainIndex);\n      pos = range.to;\n    }\n    return new _EditorSelection(ranges, mainIndex);\n  }\n  /**\n  Create a cursor selection range at the given position. You can\n  safely ignore the optional arguments in most situations.\n  */\n  static cursor(pos, assoc = 0, bidiLevel, goalColumn) {\n    return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 : 16) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6);\n  }\n  /**\n  Create a selection range.\n  */\n  static range(anchor, head, goalColumn, bidiLevel) {\n    let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6 | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));\n    return head < anchor ? SelectionRange.create(head, anchor, 32 | 16 | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 : 0) | flags);\n  }\n  /**\n  @internal\n  */\n  static normalized(ranges, mainIndex = 0) {\n    let main = ranges[mainIndex];\n    ranges.sort((a, b) => a.from - b.from);\n    mainIndex = ranges.indexOf(main);\n    for (let i = 1; i < ranges.length; i++) {\n      let range = ranges[i], prev = ranges[i - 1];\n      if (range.empty ? range.from <= prev.to : range.from < prev.to) {\n        let from = prev.from, to = Math.max(range.to, prev.to);\n        if (i <= mainIndex)\n          mainIndex--;\n        ranges.splice(--i, 2, range.anchor > range.head ? _EditorSelection.range(to, from) : _EditorSelection.range(from, to));\n      }\n    }\n    return new _EditorSelection(ranges, mainIndex);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Facet",
          "default": "class _Facet {\n  constructor(combine, compareInput, compare2, isStatic, enables) {\n    this.combine = combine;\n    this.compareInput = compareInput;\n    this.compare = compare2;\n    this.isStatic = isStatic;\n    this.id = nextID++;\n    this.default = combine([]);\n    this.extensions = typeof enables == \"function\" ? enables(this) : enables;\n  }\n  /**\n  Returns a facet reader for this facet, which can be used to\n  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.\n  */\n  get reader() {\n    return this;\n  }\n  /**\n  Define a new facet.\n  */\n  static define(config = {}) {\n    return new _Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);\n  }\n  /**\n  Returns an extension that adds the given value to this facet.\n  */\n  of(value) {\n    return new FacetProvider([], this, 0, value);\n  }\n  /**\n  Create an extension that computes a value for the facet from a\n  state. You must take care to declare the parts of the state that\n  this value depends on, since your function is only called again\n  for a new state when one of those parts changed.\n  \n  In cases where your value depends only on a single field, you'll\n  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.\n  */\n  compute(deps, get) {\n    if (this.isStatic)\n      throw new Error(\"Can't compute a static facet\");\n    return new FacetProvider(deps, this, 1, get);\n  }\n  /**\n  Create an extension that computes zero or more values for this\n  facet from a state.\n  */\n  computeN(deps, get) {\n    if (this.isStatic)\n      throw new Error(\"Can't compute a static facet\");\n    return new FacetProvider(deps, this, 2, get);\n  }\n  from(field, get) {\n    if (!get)\n      get = (x) => x;\n    return this.compute([field], (state) => get(state.field(field)));\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "StateField",
          "default": "class _StateField {\n  constructor(id, createF, updateF, compareF, spec) {\n    this.id = id;\n    this.createF = createF;\n    this.updateF = updateF;\n    this.compareF = compareF;\n    this.spec = spec;\n    this.provides = void 0;\n  }\n  /**\n  Define a state field.\n  */\n  static define(config) {\n    let field = new _StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);\n    if (config.provide)\n      field.provides = config.provide(field);\n    return field;\n  }\n  create(state) {\n    let init = state.facet(initField).find((i) => i.field == this);\n    return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);\n  }\n  /**\n  @internal\n  */\n  slot(addresses) {\n    let idx = addresses[this.id] >> 1;\n    return {\n      create: (state) => {\n        state.values[idx] = this.create(state);\n        return 1;\n      },\n      update: (state, tr) => {\n        let oldVal = state.values[idx];\n        let value = this.updateF(oldVal, tr);\n        if (this.compareF(oldVal, value))\n          return 0;\n        state.values[idx] = value;\n        return 1;\n      },\n      reconfigure: (state, oldState) => {\n        if (oldState.config.address[this.id] != null) {\n          state.values[idx] = oldState.field(this);\n          return 0;\n        }\n        state.values[idx] = this.create(state);\n        return 1;\n      }\n    };\n  }\n  /**\n  Returns an extension that enables this field and overrides the\n  way it is initialized. Can be useful when you need to provide a\n  non-default starting value for the field.\n  */\n  init(create) {\n    return [this, initField.of({ field: this, create })];\n  }\n  /**\n  State field instances can be used as\n  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a\n  given state.\n  */\n  get extension() {\n    return this;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Prec",
          "type": {
            "text": "object"
          },
          "default": "{\n  /**\n  The highest precedence level, for extensions that should end up\n  near the start of the precedence ordering.\n  */\n  highest: /* @__PURE__ */ prec(Prec_.highest),\n  /**\n  A higher-than-default precedence, for extensions that should\n  come before those with default precedence.\n  */\n  high: /* @__PURE__ */ prec(Prec_.high),\n  /**\n  The default precedence, which is also used for extensions\n  without an explicit precedence.\n  */\n  default: /* @__PURE__ */ prec(Prec_.default),\n  /**\n  A lower-than-default precedence.\n  */\n  low: /* @__PURE__ */ prec(Prec_.low),\n  /**\n  The lowest precedence level. Meant for things that should end up\n  near the end of the extension order.\n  */\n  lowest: /* @__PURE__ */ prec(Prec_.lowest)\n}"
        },
        {
          "kind": "variable",
          "name": "Compartment",
          "default": "class _Compartment {\n  /**\n  Create an instance of this compartment to add to your [state\n  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).\n  */\n  of(ext) {\n    return new CompartmentInstance(this, ext);\n  }\n  /**\n  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that\n  reconfigures this compartment.\n  */\n  reconfigure(content2) {\n    return _Compartment.reconfigure.of({ compartment: this, extension: content2 });\n  }\n  /**\n  Get the current content of the compartment in the state, or\n  `undefined` if it isn't present.\n  */\n  get(state) {\n    return state.config.compartments.get(this);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Annotation",
          "default": "class {\n  /**\n  @internal\n  */\n  constructor(type, value) {\n    this.type = type;\n    this.value = value;\n  }\n  /**\n  Define a new type of annotation.\n  */\n  static define() {\n    return new AnnotationType();\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "StateEffect",
          "default": "class _StateEffect {\n  /**\n  @internal\n  */\n  constructor(type, value) {\n    this.type = type;\n    this.value = value;\n  }\n  /**\n  Map this effect through a position mapping. Will return\n  `undefined` when that ends up deleting the effect.\n  */\n  map(mapping) {\n    let mapped = this.type.map(this.value, mapping);\n    return mapped === void 0 ? void 0 : mapped == this.value ? this : new _StateEffect(this.type, mapped);\n  }\n  /**\n  Tells you whether this effect object is of a given\n  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).\n  */\n  is(type) {\n    return this.type == type;\n  }\n  /**\n  Define a new effect type. The type parameter indicates the type\n  of values that his effect holds. It should be a type that\n  doesn't include `undefined`, since that is used in\n  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is\n  removed.\n  */\n  static define(spec = {}) {\n    return new StateEffectType(spec.map || ((v) => v));\n  }\n  /**\n  Map an array of effects through a change set.\n  */\n  static mapEffects(effects, mapping) {\n    if (!effects.length)\n      return effects;\n    let result = [];\n    for (let effect of effects) {\n      let mapped = effect.map(mapping);\n      if (mapped)\n        result.push(mapped);\n    }\n    return result;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Transaction",
          "default": "class _Transaction {\n  constructor(startState, changes, selection, effects, annotations, scrollIntoView2) {\n    this.startState = startState;\n    this.changes = changes;\n    this.selection = selection;\n    this.effects = effects;\n    this.annotations = annotations;\n    this.scrollIntoView = scrollIntoView2;\n    this._doc = null;\n    this._state = null;\n    if (selection)\n      checkSelection(selection, changes.newLength);\n    if (!annotations.some((a) => a.type == _Transaction.time))\n      this.annotations = annotations.concat(_Transaction.time.of(Date.now()));\n  }\n  /**\n  @internal\n  */\n  static create(startState, changes, selection, effects, annotations, scrollIntoView2) {\n    return new _Transaction(startState, changes, selection, effects, annotations, scrollIntoView2);\n  }\n  /**\n  The new document produced by the transaction. Contrary to\n  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't\n  force the entire new state to be computed right away, so it is\n  recommended that [transaction\n  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter\n  when they need to look at the new document.\n  */\n  get newDoc() {\n    return this._doc || (this._doc = this.changes.apply(this.startState.doc));\n  }\n  /**\n  The new selection produced by the transaction. If\n  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,\n  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's\n  current selection through the changes made by the transaction.\n  */\n  get newSelection() {\n    return this.selection || this.startState.selection.map(this.changes);\n  }\n  /**\n  The new state created by the transaction. Computed on demand\n  (but retained for subsequent access), so it is recommended not to\n  access it in [transaction\n  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.\n  */\n  get state() {\n    if (!this._state)\n      this.startState.applyTransaction(this);\n    return this._state;\n  }\n  /**\n  Get the value of the given annotation type, if any.\n  */\n  annotation(type) {\n    for (let ann of this.annotations)\n      if (ann.type == type)\n        return ann.value;\n    return void 0;\n  }\n  /**\n  Indicates whether the transaction changed the document.\n  */\n  get docChanged() {\n    return !this.changes.empty;\n  }\n  /**\n  Indicates whether this transaction reconfigures the state\n  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or\n  with a top-level configuration\n  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).\n  */\n  get reconfigured() {\n    return this.startState.config != this.state.config;\n  }\n  /**\n  Returns true if the transaction has a [user\n  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to\n  or more specific than `event`. For example, if the transaction\n  has `\"select.pointer\"` as user event, `\"select\"` and\n  `\"select.pointer\"` will match it.\n  */\n  isUserEvent(event) {\n    let e = this.annotation(_Transaction.userEvent);\n    return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == \".\"));\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "CharCategory"
        },
        {
          "kind": "variable",
          "name": "EditorState",
          "default": "class _EditorState {\n  constructor(config, doc2, selection, values, computeSlot, tr) {\n    this.config = config;\n    this.doc = doc2;\n    this.selection = selection;\n    this.values = values;\n    this.status = config.statusTemplate.slice();\n    this.computeSlot = computeSlot;\n    if (tr)\n      tr._state = this;\n    for (let i = 0; i < this.config.dynamicSlots.length; i++)\n      ensureAddr(this, i << 1);\n    this.computeSlot = null;\n  }\n  field(field, require2 = true) {\n    let addr = this.config.address[field.id];\n    if (addr == null) {\n      if (require2)\n        throw new RangeError(\"Field is not present in this state\");\n      return void 0;\n    }\n    ensureAddr(this, addr);\n    return getAddr(this, addr);\n  }\n  /**\n  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this\n  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)\n  can be passed. Unless\n  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the\n  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec\n  are assumed to start in the _current_ document (not the document\n  produced by previous specs), and its\n  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and\n  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer\n  to the document created by its _own_ changes. The resulting\n  transaction contains the combined effect of all the different\n  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later\n  specs take precedence over earlier ones.\n  */\n  update(...specs) {\n    return resolveTransaction(this, specs, true);\n  }\n  /**\n  @internal\n  */\n  applyTransaction(tr) {\n    let conf = this.config, { base: base2, compartments } = conf;\n    for (let effect of tr.effects) {\n      if (effect.is(Compartment.reconfigure)) {\n        if (conf) {\n          compartments = /* @__PURE__ */ new Map();\n          conf.compartments.forEach((val, key) => compartments.set(key, val));\n          conf = null;\n        }\n        compartments.set(effect.value.compartment, effect.value.extension);\n      } else if (effect.is(StateEffect.reconfigure)) {\n        conf = null;\n        base2 = effect.value;\n      } else if (effect.is(StateEffect.appendConfig)) {\n        conf = null;\n        base2 = asArray(base2).concat(effect.value);\n      }\n    }\n    let startValues;\n    if (!conf) {\n      conf = Configuration.resolve(base2, compartments, this);\n      let intermediateState = new _EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);\n      startValues = intermediateState.values;\n    } else {\n      startValues = tr.startState.values.slice();\n    }\n    let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();\n    new _EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);\n  }\n  /**\n  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that\n  replaces every selection range with the given content.\n  */\n  replaceSelection(text) {\n    if (typeof text == \"string\")\n      text = this.toText(text);\n    return this.changeByRange((range) => ({\n      changes: { from: range.from, to: range.to, insert: text },\n      range: EditorSelection.cursor(range.from + text.length)\n    }));\n  }\n  /**\n  Create a set of changes and a new selection by running the given\n  function for each range in the active selection. The function\n  can return an optional set of changes (in the coordinate space\n  of the start document), plus an updated range (in the coordinate\n  space of the document produced by the call's own changes). This\n  method will merge all the changes and ranges into a single\n  changeset and selection, and return it as a [transaction\n  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to\n  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).\n  */\n  changeByRange(f) {\n    let sel = this.selection;\n    let result1 = f(sel.ranges[0]);\n    let changes = this.changes(result1.changes), ranges = [result1.range];\n    let effects = asArray(result1.effects);\n    for (let i = 1; i < sel.ranges.length; i++) {\n      let result = f(sel.ranges[i]);\n      let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);\n      for (let j = 0; j < i; j++)\n        ranges[j] = ranges[j].map(newMapped);\n      let mapBy = changes.mapDesc(newChanges, true);\n      ranges.push(result.range.map(mapBy));\n      changes = changes.compose(newMapped);\n      effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));\n    }\n    return {\n      changes,\n      selection: EditorSelection.create(ranges, sel.mainIndex),\n      effects\n    };\n  }\n  /**\n  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change\n  description, taking the state's document length and line\n  separator into account.\n  */\n  changes(spec = []) {\n    if (spec instanceof ChangeSet)\n      return spec;\n    return ChangeSet.of(spec, this.doc.length, this.facet(_EditorState.lineSeparator));\n  }\n  /**\n  Using the state's [line\n  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a\n  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.\n  */\n  toText(string2) {\n    return Text.of(string2.split(this.facet(_EditorState.lineSeparator) || DefaultSplit));\n  }\n  /**\n  Return the given range of the document as a string.\n  */\n  sliceDoc(from = 0, to = this.doc.length) {\n    return this.doc.sliceString(from, to, this.lineBreak);\n  }\n  /**\n  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).\n  */\n  facet(facet) {\n    let addr = this.config.address[facet.id];\n    if (addr == null)\n      return facet.default;\n    ensureAddr(this, addr);\n    return getAddr(this, addr);\n  }\n  /**\n  Convert this state to a JSON-serializable object. When custom\n  fields should be serialized, you can pass them in as an object\n  mapping property names (in the resulting object, which should\n  not use `doc` or `selection`) to fields.\n  */\n  toJSON(fields) {\n    let result = {\n      doc: this.sliceDoc(),\n      selection: this.selection.toJSON()\n    };\n    if (fields)\n      for (let prop in fields) {\n        let value = fields[prop];\n        if (value instanceof StateField && this.config.address[value.id] != null)\n          result[prop] = value.spec.toJSON(this.field(fields[prop]), this);\n      }\n    return result;\n  }\n  /**\n  Deserialize a state from its JSON representation. When custom\n  fields should be deserialized, pass the same object you passed\n  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as\n  third argument.\n  */\n  static fromJSON(json, config = {}, fields) {\n    if (!json || typeof json.doc != \"string\")\n      throw new RangeError(\"Invalid JSON representation for EditorState\");\n    let fieldInit = [];\n    if (fields)\n      for (let prop in fields) {\n        if (Object.prototype.hasOwnProperty.call(json, prop)) {\n          let field = fields[prop], value = json[prop];\n          fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));\n        }\n      }\n    return _EditorState.create({\n      doc: json.doc,\n      selection: EditorSelection.fromJSON(json.selection),\n      extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit\n    });\n  }\n  /**\n  Create a new state. You'll usually only need this when\n  initializing an editor—updated states are created by applying\n  transactions.\n  */\n  static create(config = {}) {\n    let configuration = Configuration.resolve(config.extensions || [], /* @__PURE__ */ new Map());\n    let doc2 = config.doc instanceof Text ? config.doc : Text.of((config.doc || \"\").split(configuration.staticFacet(_EditorState.lineSeparator) || DefaultSplit));\n    let selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);\n    checkSelection(selection, doc2.length);\n    if (!configuration.staticFacet(allowMultipleSelections))\n      selection = selection.asSingle();\n    return new _EditorState(configuration, doc2, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);\n  }\n  /**\n  The size (in columns) of a tab in the document, determined by\n  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.\n  */\n  get tabSize() {\n    return this.facet(_EditorState.tabSize);\n  }\n  /**\n  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)\n  string for this state.\n  */\n  get lineBreak() {\n    return this.facet(_EditorState.lineSeparator) || \"\\n\";\n  }\n  /**\n  Returns true when the editor is\n  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.\n  */\n  get readOnly() {\n    return this.facet(readOnly);\n  }\n  /**\n  Look up a translation for the given phrase (via the\n  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the\n  original string if no translation is found.\n  \n  If additional arguments are passed, they will be inserted in\n  place of markers like `$1` (for the first value) and `$2`, etc.\n  A single `$` is equivalent to `$1`, and `$$` will produce a\n  literal dollar sign.\n  */\n  phrase(phrase, ...insert2) {\n    for (let map of this.facet(_EditorState.phrases))\n      if (Object.prototype.hasOwnProperty.call(map, phrase)) {\n        phrase = map[phrase];\n        break;\n      }\n    if (insert2.length)\n      phrase = phrase.replace(/\\$(\\$|\\d*)/g, (m, i) => {\n        if (i == \"$\")\n          return \"$\";\n        let n = +(i || 1);\n        return !n || n > insert2.length ? m : insert2[n - 1];\n      });\n    return phrase;\n  }\n  /**\n  Find the values for a given language data field, provided by the\n  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.\n  \n  Examples of language data fields are...\n  \n  - [`\"commentTokens\"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying\n    comment syntax.\n  - [`\"autocomplete\"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)\n    for providing language-specific completion sources.\n  - [`\"wordChars\"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding\n    characters that should be considered part of words in this\n    language.\n  - [`\"closeBrackets\"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls\n    bracket closing behavior.\n  */\n  languageDataAt(name2, pos, side = -1) {\n    let values = [];\n    for (let provider of this.facet(languageData)) {\n      for (let result of provider(this, pos, side)) {\n        if (Object.prototype.hasOwnProperty.call(result, name2))\n          values.push(result[name2]);\n      }\n    }\n    return values;\n  }\n  /**\n  Return a function that can categorize strings (expected to\n  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))\n  into one of:\n  \n   - Word (contains an alphanumeric character or a character\n     explicitly listed in the local language's `\"wordChars\"`\n     language data, which should be a string)\n   - Space (contains only whitespace)\n   - Other (anything else)\n  */\n  charCategorizer(at) {\n    return makeCategorizer(this.languageDataAt(\"wordChars\", at).join(\"\"));\n  }\n  /**\n  Find the word at the given position, meaning the range\n  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters\n  around it. If no word characters are adjacent to the position,\n  this returns null.\n  */\n  wordAt(pos) {\n    let { text, from, length } = this.doc.lineAt(pos);\n    let cat = this.charCategorizer(pos);\n    let start = pos - from, end = pos - from;\n    while (start > 0) {\n      let prev = findClusterBreak(text, start, false);\n      if (cat(text.slice(prev, start)) != CharCategory.Word)\n        break;\n      start = prev;\n    }\n    while (end < length) {\n      let next = findClusterBreak(text, end);\n      if (cat(text.slice(end, next)) != CharCategory.Word)\n        break;\n      end = next;\n    }\n    return start == end ? null : EditorSelection.range(start + from, end + from);\n  }\n}"
        },
        {
          "kind": "function",
          "name": "combineConfig",
          "parameters": [
            {
              "name": "configs"
            },
            {
              "name": "defaults2"
            },
            {
              "name": "combine",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "RangeValue",
          "default": "class {\n  /**\n  Compare this value with another value. Used when comparing\n  rangesets. The default implementation compares by identity.\n  Unless you are only creating a fixed number of unique instances\n  of your value type, it is a good idea to implement this\n  properly.\n  */\n  eq(other) {\n    return this == other;\n  }\n  /**\n  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.\n  */\n  range(from, to = from) {\n    return Range.create(from, to, this);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "RangeSet",
          "default": "class _RangeSet {\n  constructor(chunkPos, chunk, nextLayer, maxPoint) {\n    this.chunkPos = chunkPos;\n    this.chunk = chunk;\n    this.nextLayer = nextLayer;\n    this.maxPoint = maxPoint;\n  }\n  /**\n  @internal\n  */\n  static create(chunkPos, chunk, nextLayer, maxPoint) {\n    return new _RangeSet(chunkPos, chunk, nextLayer, maxPoint);\n  }\n  /**\n  @internal\n  */\n  get length() {\n    let last = this.chunk.length - 1;\n    return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);\n  }\n  /**\n  The number of ranges in the set.\n  */\n  get size() {\n    if (this.isEmpty)\n      return 0;\n    let size = this.nextLayer.size;\n    for (let chunk of this.chunk)\n      size += chunk.value.length;\n    return size;\n  }\n  /**\n  @internal\n  */\n  chunkEnd(index) {\n    return this.chunkPos[index] + this.chunk[index].length;\n  }\n  /**\n  Update the range set, optionally adding new ranges or filtering\n  out existing ones.\n  \n  (Note: The type parameter is just there as a kludge to work\n  around TypeScript variance issues that prevented `RangeSet<X>`\n  from being a subtype of `RangeSet<Y>` when `X` is a subtype of\n  `Y`.)\n  */\n  update(updateSpec) {\n    let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;\n    let filter = updateSpec.filter;\n    if (add.length == 0 && !filter)\n      return this;\n    if (sort)\n      add = add.slice().sort(cmpRange);\n    if (this.isEmpty)\n      return add.length ? _RangeSet.of(add) : this;\n    let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];\n    let builder = new RangeSetBuilder();\n    while (cur.value || i < add.length) {\n      if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {\n        let range = add[i++];\n        if (!builder.addInner(range.from, range.to, range.value))\n          spill.push(range);\n      } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {\n        cur.nextChunk();\n      } else {\n        if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {\n          if (!builder.addInner(cur.from, cur.to, cur.value))\n            spill.push(Range.create(cur.from, cur.to, cur.value));\n        }\n        cur.next();\n      }\n    }\n    return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? _RangeSet.empty : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));\n  }\n  /**\n  Map this range set through a set of changes, return the new set.\n  */\n  map(changes) {\n    if (changes.empty || this.isEmpty)\n      return this;\n    let chunks = [], chunkPos = [], maxPoint = -1;\n    for (let i = 0; i < this.chunk.length; i++) {\n      let start = this.chunkPos[i], chunk = this.chunk[i];\n      let touch = changes.touchesRange(start, start + chunk.length);\n      if (touch === false) {\n        maxPoint = Math.max(maxPoint, chunk.maxPoint);\n        chunks.push(chunk);\n        chunkPos.push(changes.mapPos(start));\n      } else if (touch === true) {\n        let { mapped, pos } = chunk.map(start, changes);\n        if (mapped) {\n          maxPoint = Math.max(maxPoint, mapped.maxPoint);\n          chunks.push(mapped);\n          chunkPos.push(pos);\n        }\n      }\n    }\n    let next = this.nextLayer.map(changes);\n    return chunks.length == 0 ? next : new _RangeSet(chunkPos, chunks, next || _RangeSet.empty, maxPoint);\n  }\n  /**\n  Iterate over the ranges that touch the region `from` to `to`,\n  calling `f` for each. There is no guarantee that the ranges will\n  be reported in any specific order. When the callback returns\n  `false`, iteration stops.\n  */\n  between(from, to, f) {\n    if (this.isEmpty)\n      return;\n    for (let i = 0; i < this.chunk.length; i++) {\n      let start = this.chunkPos[i], chunk = this.chunk[i];\n      if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false)\n        return;\n    }\n    this.nextLayer.between(from, to, f);\n  }\n  /**\n  Iterate over the ranges in this set, in order, including all\n  ranges that end at or after `from`.\n  */\n  iter(from = 0) {\n    return HeapCursor.from([this]).goto(from);\n  }\n  /**\n  @internal\n  */\n  get isEmpty() {\n    return this.nextLayer == this;\n  }\n  /**\n  Iterate over the ranges in a collection of sets, in order,\n  starting from `from`.\n  */\n  static iter(sets, from = 0) {\n    return HeapCursor.from(sets).goto(from);\n  }\n  /**\n  Iterate over two groups of sets, calling methods on `comparator`\n  to notify it of possible differences.\n  */\n  static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {\n    let a = oldSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\n    let b = newSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\n    let sharedChunks = findSharedChunks(a, b, textDiff);\n    let sideA = new SpanCursor(a, sharedChunks, minPointSize);\n    let sideB = new SpanCursor(b, sharedChunks, minPointSize);\n    textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));\n    if (textDiff.empty && textDiff.length == 0)\n      compare(sideA, 0, sideB, 0, 0, comparator);\n  }\n  /**\n  Compare the contents of two groups of range sets, returning true\n  if they are equivalent in the given range.\n  */\n  static eq(oldSets, newSets, from = 0, to) {\n    if (to == null)\n      to = 1e9 - 1;\n    let a = oldSets.filter((set) => !set.isEmpty && newSets.indexOf(set) < 0);\n    let b = newSets.filter((set) => !set.isEmpty && oldSets.indexOf(set) < 0);\n    if (a.length != b.length)\n      return false;\n    if (!a.length)\n      return true;\n    let sharedChunks = findSharedChunks(a, b);\n    let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);\n    for (; ; ) {\n      if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))\n        return false;\n      if (sideA.to > to)\n        return true;\n      sideA.next();\n      sideB.next();\n    }\n  }\n  /**\n  Iterate over a group of range sets at the same time, notifying\n  the iterator about the ranges covering every given piece of\n  content. Returns the open count (see\n  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end\n  of the iteration.\n  */\n  static spans(sets, from, to, iterator, minPointSize = -1) {\n    let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;\n    let openRanges = cursor.openStart;\n    for (; ; ) {\n      let curTo = Math.min(cursor.to, to);\n      if (cursor.point) {\n        let active = cursor.activeForPoint(cursor.to);\n        let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);\n        iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);\n        openRanges = Math.min(cursor.openEnd(curTo), active.length);\n      } else if (curTo > pos) {\n        iterator.span(pos, curTo, cursor.active, openRanges);\n        openRanges = cursor.openEnd(curTo);\n      }\n      if (cursor.to > to)\n        return openRanges + (cursor.point && cursor.to > to ? 1 : 0);\n      pos = cursor.to;\n      cursor.next();\n    }\n  }\n  /**\n  Create a range set for the given range or array of ranges. By\n  default, this expects the ranges to be _sorted_ (by start\n  position and, if two start at the same position,\n  `value.startSide`). You can pass `true` as second argument to\n  cause the method to sort them.\n  */\n  static of(ranges, sort = false) {\n    let build = new RangeSetBuilder();\n    for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)\n      build.add(range.from, range.to, range.value);\n    return build.finish();\n  }\n  /**\n  Join an array of range sets into a single set.\n  */\n  static join(sets) {\n    if (!sets.length)\n      return _RangeSet.empty;\n    let result = sets[sets.length - 1];\n    for (let i = sets.length - 2; i >= 0; i--) {\n      for (let layer2 = sets[i]; layer2 != _RangeSet.empty; layer2 = layer2.nextLayer)\n        result = new _RangeSet(layer2.chunkPos, layer2.chunk, result, Math.max(layer2.maxPoint, result.maxPoint));\n    }\n    return result;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "RangeSetBuilder",
          "default": "class _RangeSetBuilder {\n  finishChunk(newArrays) {\n    this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));\n    this.chunkPos.push(this.chunkStart);\n    this.chunkStart = -1;\n    this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);\n    this.maxPoint = -1;\n    if (newArrays) {\n      this.from = [];\n      this.to = [];\n      this.value = [];\n    }\n  }\n  /**\n  Create an empty builder.\n  */\n  constructor() {\n    this.chunks = [];\n    this.chunkPos = [];\n    this.chunkStart = -1;\n    this.last = null;\n    this.lastFrom = -1e9;\n    this.lastTo = -1e9;\n    this.from = [];\n    this.to = [];\n    this.value = [];\n    this.maxPoint = -1;\n    this.setMaxPoint = -1;\n    this.nextLayer = null;\n  }\n  /**\n  Add a range. Ranges should be added in sorted (by `from` and\n  `value.startSide`) order.\n  */\n  add(from, to, value) {\n    if (!this.addInner(from, to, value))\n      (this.nextLayer || (this.nextLayer = new _RangeSetBuilder())).add(from, to, value);\n  }\n  /**\n  @internal\n  */\n  addInner(from, to, value) {\n    let diff = from - this.lastTo || value.startSide - this.last.endSide;\n    if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)\n      throw new Error(\"Ranges must be added sorted by `from` position and `startSide`\");\n    if (diff < 0)\n      return false;\n    if (this.from.length == 250)\n      this.finishChunk(true);\n    if (this.chunkStart < 0)\n      this.chunkStart = from;\n    this.from.push(from - this.chunkStart);\n    this.to.push(to - this.chunkStart);\n    this.last = value;\n    this.lastFrom = from;\n    this.lastTo = to;\n    this.value.push(value);\n    if (value.point)\n      this.maxPoint = Math.max(this.maxPoint, to - from);\n    return true;\n  }\n  /**\n  @internal\n  */\n  addChunk(from, chunk) {\n    if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)\n      return false;\n    if (this.from.length)\n      this.finishChunk(true);\n    this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);\n    this.chunks.push(chunk);\n    this.chunkPos.push(from);\n    let last = chunk.value.length - 1;\n    this.last = chunk.value[last];\n    this.lastFrom = chunk.from[last] + from;\n    this.lastTo = chunk.to[last] + from;\n    return true;\n  }\n  /**\n  Finish the range set. Returns the new set. The builder can't be\n  used anymore after this has been called.\n  */\n  finish() {\n    return this.finishInner(RangeSet.empty);\n  }\n  /**\n  @internal\n  */\n  finishInner(next) {\n    if (this.from.length)\n      this.finishChunk(false);\n    if (this.chunks.length == 0)\n      return next;\n    let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);\n    this.from = null;\n    return result;\n  }\n}"
        },
        {
          "kind": "function",
          "name": "countColumn",
          "parameters": [
            {
              "name": "string2"
            },
            {
              "name": "tabSize"
            },
            {
              "name": "to",
              "default": "string2.length"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "WidgetType",
          "default": "class {\n  /**\n  Compare this instance to another instance of the same type.\n  (TypeScript can't express this, but only instances of the same\n  specific class will be passed to this method.) This is used to\n  avoid redrawing widgets when they are replaced by a new\n  decoration of the same type. The default implementation just\n  returns `false`, which will cause new instances of the widget to\n  always be redrawn.\n  */\n  eq(widget) {\n    return false;\n  }\n  /**\n  Update a DOM element created by a widget of the same type (but\n  different, non-`eq` content) to reflect this widget. May return\n  true to indicate that it could update, false to indicate it\n  couldn't (in which case the widget will be redrawn). The default\n  implementation just returns false.\n  */\n  updateDOM(dom, view) {\n    return false;\n  }\n  /**\n  @internal\n  */\n  compare(other) {\n    return this == other || this.constructor == other.constructor && this.eq(other);\n  }\n  /**\n  The estimated height this widget will have, to be used when\n  estimating the height of content that hasn't been drawn. May\n  return -1 to indicate you don't know. The default implementation\n  returns -1.\n  */\n  get estimatedHeight() {\n    return -1;\n  }\n  /**\n  For inline widgets that are displayed inline (as opposed to\n  `inline-block`) and introduce line breaks (through `<br>` tags\n  or textual newlines), this must indicate the amount of line\n  breaks they introduce. Defaults to 0.\n  */\n  get lineBreaks() {\n    return 0;\n  }\n  /**\n  Can be used to configure which kinds of events inside the widget\n  should be ignored by the editor. The default is to ignore all\n  events.\n  */\n  ignoreEvent(event) {\n    return true;\n  }\n  /**\n  Override the way screen coordinates for positions at/in the\n  widget are found. `pos` will be the offset into the widget, and\n  `side` the side of the position that is being queried—less than\n  zero for before, greater than zero for after, and zero for\n  directly at that position.\n  */\n  coordsAt(dom, pos, side) {\n    return null;\n  }\n  /**\n  @internal\n  */\n  get isHidden() {\n    return false;\n  }\n  /**\n  @internal\n  */\n  get editable() {\n    return false;\n  }\n  /**\n  This is called when the an instance of the widget is removed\n  from the editor view.\n  */\n  destroy(dom) {\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Decoration",
          "default": "class extends RangeValue {\n  constructor(startSide, endSide, widget, spec) {\n    super();\n    this.startSide = startSide;\n    this.endSide = endSide;\n    this.widget = widget;\n    this.spec = spec;\n  }\n  /**\n  @internal\n  */\n  get heightRelevant() {\n    return false;\n  }\n  /**\n  Create a mark decoration, which influences the styling of the\n  content in its range. Nested mark decorations will cause nested\n  DOM elements to be created. Nesting order is determined by\n  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with\n  the higher-precedence decorations creating the inner DOM nodes.\n  Such elements are split on line boundaries and on the boundaries\n  of lower-precedence decorations.\n  */\n  static mark(spec) {\n    return new MarkDecoration(spec);\n  }\n  /**\n  Create a widget decoration, which displays a DOM element at the\n  given position.\n  */\n  static widget(spec) {\n    let side = Math.max(-1e4, Math.min(1e4, spec.side || 0)), block = !!spec.block;\n    side += block && !spec.inlineOrder ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;\n    return new PointDecoration(spec, side, side, block, spec.widget || null, false);\n  }\n  /**\n  Create a replace decoration which replaces the given range with\n  a widget, or simply hides it.\n  */\n  static replace(spec) {\n    let block = !!spec.block, startSide, endSide;\n    if (spec.isBlockGap) {\n      startSide = -5e8;\n      endSide = 4e8;\n    } else {\n      let { start, end } = getInclusive(spec, block);\n      startSide = (start ? block ? -3e8 : -1 : 5e8) - 1;\n      endSide = (end ? block ? 2e8 : 1 : -6e8) + 1;\n    }\n    return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);\n  }\n  /**\n  Create a line decoration, which can add DOM attributes to the\n  line starting at the given position.\n  */\n  static line(spec) {\n    return new LineDecoration(spec);\n  }\n  /**\n  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given\n  decorated range or ranges. If the ranges aren't already sorted,\n  pass `true` for `sort` to make the library sort them for you.\n  */\n  static set(of, sort = false) {\n    return RangeSet.of(of, sort);\n  }\n  /**\n  @internal\n  */\n  hasHeight() {\n    return this.widget ? this.widget.estimatedHeight > -1 : false;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Direction"
        },
        {
          "kind": "function",
          "name": "logException",
          "parameters": [
            {
              "name": "state"
            },
            {
              "name": "exception"
            },
            {
              "name": "context"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "ViewPlugin",
          "default": "class _ViewPlugin {\n  constructor(id, create, domEventHandlers, domEventObservers, buildExtensions) {\n    this.id = id;\n    this.create = create;\n    this.domEventHandlers = domEventHandlers;\n    this.domEventObservers = domEventObservers;\n    this.extension = buildExtensions(this);\n  }\n  /**\n  Define a plugin from a constructor function that creates the\n  plugin's value, given an editor view.\n  */\n  static define(create, spec) {\n    const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};\n    return new _ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, (plugin) => {\n      let ext = [viewPlugin.of(plugin)];\n      if (deco)\n        ext.push(decorations.of((view) => {\n          let pluginInst = view.plugin(plugin);\n          return pluginInst ? deco(pluginInst) : Decoration.none;\n        }));\n      if (provide)\n        ext.push(provide(plugin));\n      return ext;\n    });\n  }\n  /**\n  Create a plugin for a class whose constructor takes a single\n  editor view as argument.\n  */\n  static fromClass(cls, spec) {\n    return _ViewPlugin.define((view) => new cls(view), spec);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "EditorView",
          "default": "class _EditorView {\n  /**\n  The current editor state.\n  */\n  get state() {\n    return this.viewState.state;\n  }\n  /**\n  To be able to display large documents without consuming too much\n  memory or overloading the browser, CodeMirror only draws the\n  code that is visible (plus a margin around it) to the DOM. This\n  property tells you the extent of the current drawn viewport, in\n  document positions.\n  */\n  get viewport() {\n    return this.viewState.viewport;\n  }\n  /**\n  When there are, for example, large collapsed ranges in the\n  viewport, its size can be a lot bigger than the actual visible\n  content. Thus, if you are doing something like styling the\n  content in the viewport, it is preferable to only do so for\n  these ranges, which are the subset of the viewport that is\n  actually drawn.\n  */\n  get visibleRanges() {\n    return this.viewState.visibleRanges;\n  }\n  /**\n  Returns false when the editor is entirely scrolled out of view\n  or otherwise hidden.\n  */\n  get inView() {\n    return this.viewState.inView;\n  }\n  /**\n  Indicates whether the user is currently composing text via\n  [IME](https://en.wikipedia.org/wiki/Input_method), and at least\n  one change has been made in the current composition.\n  */\n  get composing() {\n    return this.inputState.composing > 0;\n  }\n  /**\n  Indicates whether the user is currently in composing state. Note\n  that on some platforms, like Android, this will be the case a\n  lot, since just putting the cursor on a word starts a\n  composition there.\n  */\n  get compositionStarted() {\n    return this.inputState.composing >= 0;\n  }\n  /**\n  The document or shadow root that the view lives in.\n  */\n  get root() {\n    return this._root;\n  }\n  /**\n  @internal\n  */\n  get win() {\n    return this.dom.ownerDocument.defaultView || window;\n  }\n  /**\n  Construct a new view. You'll want to either provide a `parent`\n  option, or put `view.dom` into your document after creating a\n  view, so that the user can see the editor.\n  */\n  constructor(config = {}) {\n    this.plugins = [];\n    this.pluginMap = /* @__PURE__ */ new Map();\n    this.editorAttrs = {};\n    this.contentAttrs = {};\n    this.bidiCache = [];\n    this.destroyed = false;\n    this.updateState = 2;\n    this.measureScheduled = -1;\n    this.measureRequests = [];\n    this.contentDOM = document.createElement(\"div\");\n    this.scrollDOM = document.createElement(\"div\");\n    this.scrollDOM.tabIndex = -1;\n    this.scrollDOM.className = \"cm-scroller\";\n    this.scrollDOM.appendChild(this.contentDOM);\n    this.announceDOM = document.createElement(\"div\");\n    this.announceDOM.className = \"cm-announced\";\n    this.announceDOM.setAttribute(\"aria-live\", \"polite\");\n    this.dom = document.createElement(\"div\");\n    this.dom.appendChild(this.announceDOM);\n    this.dom.appendChild(this.scrollDOM);\n    if (config.parent)\n      config.parent.appendChild(this.dom);\n    let { dispatch } = config;\n    this.dispatchTransactions = config.dispatchTransactions || dispatch && ((trs) => trs.forEach((tr) => dispatch(tr, this))) || ((trs) => this.update(trs));\n    this.dispatch = this.dispatch.bind(this);\n    this._root = config.root || getRoot(config.parent) || document;\n    this.viewState = new ViewState(config.state || EditorState.create(config));\n    if (config.scrollTo && config.scrollTo.is(scrollIntoView))\n      this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);\n    this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));\n    for (let plugin of this.plugins)\n      plugin.update(this);\n    this.observer = new DOMObserver(this);\n    this.inputState = new InputState(this);\n    this.inputState.ensureHandlers(this.plugins);\n    this.docView = new DocView(this);\n    this.mountStyles();\n    this.updateAttrs();\n    this.updateState = 0;\n    this.requestMeasure();\n  }\n  dispatch(...input) {\n    let trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [this.state.update(...input)];\n    this.dispatchTransactions(trs, this);\n  }\n  /**\n  Update the view for the given array of transactions. This will\n  update the visible document and selection to match the state\n  produced by the transactions, and notify view plugins of the\n  change. You should usually call\n  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this\n  as a primitive.\n  */\n  update(transactions) {\n    if (this.updateState != 0)\n      throw new Error(\"Calls to EditorView.update are not allowed while an update is in progress\");\n    let redrawn = false, attrsChanged = false, update;\n    let state = this.state;\n    for (let tr of transactions) {\n      if (tr.startState != state)\n        throw new RangeError(\"Trying to update state with a transaction that doesn't start from the previous state.\");\n      state = tr.state;\n    }\n    if (this.destroyed) {\n      this.viewState.state = state;\n      return;\n    }\n    let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;\n    if (transactions.some((tr) => tr.annotation(isFocusChange))) {\n      this.inputState.notifiedFocused = focus;\n      focusFlag = 1;\n    } else if (focus != this.inputState.notifiedFocused) {\n      this.inputState.notifiedFocused = focus;\n      dispatchFocus = focusChangeTransaction(state, focus);\n      if (!dispatchFocus)\n        focusFlag = 1;\n    }\n    let pendingKey = this.observer.delayedAndroidKey, domChange = null;\n    if (pendingKey) {\n      this.observer.clearDelayedAndroidKey();\n      domChange = this.observer.readChange();\n      if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))\n        domChange = null;\n    } else {\n      this.observer.clear();\n    }\n    if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))\n      return this.setState(state);\n    update = ViewUpdate.create(this, state, transactions);\n    update.flags |= focusFlag;\n    let scrollTarget = this.viewState.scrollTarget;\n    try {\n      this.updateState = 2;\n      for (let tr of transactions) {\n        if (scrollTarget)\n          scrollTarget = scrollTarget.map(tr.changes);\n        if (tr.scrollIntoView) {\n          let { main } = tr.state.selection;\n          scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));\n        }\n        for (let e of tr.effects)\n          if (e.is(scrollIntoView))\n            scrollTarget = e.value.clip(this.state);\n      }\n      this.viewState.update(update, scrollTarget);\n      this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);\n      if (!update.empty) {\n        this.updatePlugins(update);\n        this.inputState.update(update);\n      }\n      redrawn = this.docView.update(update);\n      if (this.state.facet(styleModule) != this.styleModules)\n        this.mountStyles();\n      attrsChanged = this.updateAttrs();\n      this.showAnnouncements(transactions);\n      this.docView.updateSelection(redrawn, transactions.some((tr) => tr.isUserEvent(\"select.pointer\")));\n    } finally {\n      this.updateState = 0;\n    }\n    if (update.startState.facet(theme) != update.state.facet(theme))\n      this.viewState.mustMeasureContent = true;\n    if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)\n      this.requestMeasure();\n    if (!update.empty)\n      for (let listener of this.state.facet(updateListener)) {\n        try {\n          listener(update);\n        } catch (e) {\n          logException(this.state, e, \"update listener\");\n        }\n      }\n    if (dispatchFocus || domChange)\n      Promise.resolve().then(() => {\n        if (dispatchFocus && this.state == dispatchFocus.startState)\n          this.dispatch(dispatchFocus);\n        if (domChange) {\n          if (!applyDOMChange(this, domChange) && pendingKey.force)\n            dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);\n        }\n      });\n  }\n  /**\n  Reset the view to the given state. (This will cause the entire\n  document to be redrawn and all view plugins to be reinitialized,\n  so you should probably only use it when the new state isn't\n  derived from the old state. Otherwise, use\n  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)\n  */\n  setState(newState) {\n    if (this.updateState != 0)\n      throw new Error(\"Calls to EditorView.setState are not allowed while an update is in progress\");\n    if (this.destroyed) {\n      this.viewState.state = newState;\n      return;\n    }\n    this.updateState = 2;\n    let hadFocus = this.hasFocus;\n    try {\n      for (let plugin of this.plugins)\n        plugin.destroy(this);\n      this.viewState = new ViewState(newState);\n      this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));\n      this.pluginMap.clear();\n      for (let plugin of this.plugins)\n        plugin.update(this);\n      this.docView.destroy();\n      this.docView = new DocView(this);\n      this.inputState.ensureHandlers(this.plugins);\n      this.mountStyles();\n      this.updateAttrs();\n      this.bidiCache = [];\n    } finally {\n      this.updateState = 0;\n    }\n    if (hadFocus)\n      this.focus();\n    this.requestMeasure();\n  }\n  updatePlugins(update) {\n    let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);\n    if (prevSpecs != specs) {\n      let newPlugins = [];\n      for (let spec of specs) {\n        let found = prevSpecs.indexOf(spec);\n        if (found < 0) {\n          newPlugins.push(new PluginInstance(spec));\n        } else {\n          let plugin = this.plugins[found];\n          plugin.mustUpdate = update;\n          newPlugins.push(plugin);\n        }\n      }\n      for (let plugin of this.plugins)\n        if (plugin.mustUpdate != update)\n          plugin.destroy(this);\n      this.plugins = newPlugins;\n      this.pluginMap.clear();\n    } else {\n      for (let p of this.plugins)\n        p.mustUpdate = update;\n    }\n    for (let i = 0; i < this.plugins.length; i++)\n      this.plugins[i].update(this);\n    if (prevSpecs != specs)\n      this.inputState.ensureHandlers(this.plugins);\n  }\n  /**\n  @internal\n  */\n  measure(flush = true) {\n    if (this.destroyed)\n      return;\n    if (this.measureScheduled > -1)\n      this.win.cancelAnimationFrame(this.measureScheduled);\n    if (this.observer.delayedAndroidKey) {\n      this.measureScheduled = -1;\n      this.requestMeasure();\n      return;\n    }\n    this.measureScheduled = 0;\n    if (flush)\n      this.observer.forceFlush();\n    let updated = null;\n    let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;\n    let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;\n    if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)\n      scrollAnchorHeight = -1;\n    this.viewState.scrollAnchorHeight = -1;\n    try {\n      for (let i = 0; ; i++) {\n        if (scrollAnchorHeight < 0) {\n          if (isScrolledToBottom(sDOM)) {\n            scrollAnchorPos = -1;\n            scrollAnchorHeight = this.viewState.heightMap.height;\n          } else {\n            let block = this.viewState.scrollAnchorAt(scrollTop);\n            scrollAnchorPos = block.from;\n            scrollAnchorHeight = block.top;\n          }\n        }\n        this.updateState = 1;\n        let changed = this.viewState.measure(this);\n        if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)\n          break;\n        if (i > 5) {\n          console.warn(this.measureRequests.length ? \"Measure loop restarted more than 5 times\" : \"Viewport failed to stabilize\");\n          break;\n        }\n        let measuring = [];\n        if (!(changed & 4))\n          [this.measureRequests, measuring] = [measuring, this.measureRequests];\n        let measured = measuring.map((m) => {\n          try {\n            return m.read(this);\n          } catch (e) {\n            logException(this.state, e);\n            return BadMeasure;\n          }\n        });\n        let update = ViewUpdate.create(this, this.state, []), redrawn = false;\n        update.flags |= changed;\n        if (!updated)\n          updated = update;\n        else\n          updated.flags |= changed;\n        this.updateState = 2;\n        if (!update.empty) {\n          this.updatePlugins(update);\n          this.inputState.update(update);\n          this.updateAttrs();\n          redrawn = this.docView.update(update);\n        }\n        for (let i2 = 0; i2 < measuring.length; i2++)\n          if (measured[i2] != BadMeasure) {\n            try {\n              let m = measuring[i2];\n              if (m.write)\n                m.write(measured[i2], this);\n            } catch (e) {\n              logException(this.state, e);\n            }\n          }\n        if (redrawn)\n          this.docView.updateSelection(true);\n        if (!update.viewportChanged && this.measureRequests.length == 0) {\n          if (this.viewState.editorHeight) {\n            if (this.viewState.scrollTarget) {\n              this.docView.scrollIntoView(this.viewState.scrollTarget);\n              this.viewState.scrollTarget = null;\n              scrollAnchorHeight = -1;\n              continue;\n            } else {\n              let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;\n              let diff = newAnchorHeight - scrollAnchorHeight;\n              if (diff > 1 || diff < -1) {\n                scrollTop = scrollTop + diff;\n                sDOM.scrollTop = scrollTop / this.scaleY;\n                scrollAnchorHeight = -1;\n                continue;\n              }\n            }\n          }\n          break;\n        }\n      }\n    } finally {\n      this.updateState = 0;\n      this.measureScheduled = -1;\n    }\n    if (updated && !updated.empty)\n      for (let listener of this.state.facet(updateListener))\n        listener(updated);\n  }\n  /**\n  Get the CSS classes for the currently active editor themes.\n  */\n  get themeClasses() {\n    return baseThemeID + \" \" + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + \" \" + this.state.facet(theme);\n  }\n  updateAttrs() {\n    let editorAttrs = attrsFromFacet(this, editorAttributes, {\n      class: \"cm-editor\" + (this.hasFocus ? \" cm-focused \" : \" \") + this.themeClasses\n    });\n    let contentAttrs = {\n      spellcheck: \"false\",\n      autocorrect: \"off\",\n      autocapitalize: \"off\",\n      translate: \"no\",\n      contenteditable: !this.state.facet(editable) ? \"false\" : \"true\",\n      class: \"cm-content\",\n      style: `${browser.tabSize}: ${this.state.tabSize}`,\n      role: \"textbox\",\n      \"aria-multiline\": \"true\"\n    };\n    if (this.state.readOnly)\n      contentAttrs[\"aria-readonly\"] = \"true\";\n    attrsFromFacet(this, contentAttributes, contentAttrs);\n    let changed = this.observer.ignore(() => {\n      let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);\n      let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);\n      return changedContent || changedEditor;\n    });\n    this.editorAttrs = editorAttrs;\n    this.contentAttrs = contentAttrs;\n    return changed;\n  }\n  showAnnouncements(trs) {\n    let first = true;\n    for (let tr of trs)\n      for (let effect of tr.effects)\n        if (effect.is(_EditorView.announce)) {\n          if (first)\n            this.announceDOM.textContent = \"\";\n          first = false;\n          let div = this.announceDOM.appendChild(document.createElement(\"div\"));\n          div.textContent = effect.value;\n        }\n  }\n  mountStyles() {\n    this.styleModules = this.state.facet(styleModule);\n    let nonce = this.state.facet(_EditorView.cspNonce);\n    StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : void 0);\n  }\n  readMeasured() {\n    if (this.updateState == 2)\n      throw new Error(\"Reading the editor layout isn't allowed during an update\");\n    if (this.updateState == 0 && this.measureScheduled > -1)\n      this.measure(false);\n  }\n  /**\n  Schedule a layout measurement, optionally providing callbacks to\n  do custom DOM measuring followed by a DOM write phase. Using\n  this is preferable reading DOM layout directly from, for\n  example, an event handler, because it'll make sure measuring and\n  drawing done by other components is synchronized, avoiding\n  unnecessary DOM layout computations.\n  */\n  requestMeasure(request) {\n    if (this.measureScheduled < 0)\n      this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());\n    if (request) {\n      if (this.measureRequests.indexOf(request) > -1)\n        return;\n      if (request.key != null)\n        for (let i = 0; i < this.measureRequests.length; i++) {\n          if (this.measureRequests[i].key === request.key) {\n            this.measureRequests[i] = request;\n            return;\n          }\n        }\n      this.measureRequests.push(request);\n    }\n  }\n  /**\n  Get the value of a specific plugin, if present. Note that\n  plugins that crash can be dropped from a view, so even when you\n  know you registered a given plugin, it is recommended to check\n  the return value of this method.\n  */\n  plugin(plugin) {\n    let known = this.pluginMap.get(plugin);\n    if (known === void 0 || known && known.spec != plugin)\n      this.pluginMap.set(plugin, known = this.plugins.find((p) => p.spec == plugin) || null);\n    return known && known.update(this).value;\n  }\n  /**\n  The top position of the document, in screen coordinates. This\n  may be negative when the editor is scrolled down. Points\n  directly to the top of the first line, not above the padding.\n  */\n  get documentTop() {\n    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;\n  }\n  /**\n  Reports the padding above and below the document.\n  */\n  get documentPadding() {\n    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };\n  }\n  /**\n  If the editor is transformed with CSS, this provides the scale\n  along the X axis. Otherwise, it will just be 1. Note that\n  transforms other than translation and scaling are not supported.\n  */\n  get scaleX() {\n    return this.viewState.scaleX;\n  }\n  /**\n  Provide the CSS transformed scale along the Y axis.\n  */\n  get scaleY() {\n    return this.viewState.scaleY;\n  }\n  /**\n  Find the text line or block widget at the given vertical\n  position (which is interpreted as relative to the [top of the\n  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).\n  */\n  elementAtHeight(height) {\n    this.readMeasured();\n    return this.viewState.elementAtHeight(height);\n  }\n  /**\n  Find the line block (see\n  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given\n  height, again interpreted relative to the [top of the\n  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).\n  */\n  lineBlockAtHeight(height) {\n    this.readMeasured();\n    return this.viewState.lineBlockAtHeight(height);\n  }\n  /**\n  Get the extent and vertical position of all [line\n  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions\n  are relative to the [top of the\n  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);\n  */\n  get viewportLineBlocks() {\n    return this.viewState.viewportLines;\n  }\n  /**\n  Find the line block around the given document position. A line\n  block is a range delimited on both sides by either a\n  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the\n  start/end of the document. It will usually just hold a line of\n  text, but may be broken into multiple textblocks by block\n  widgets.\n  */\n  lineBlockAt(pos) {\n    return this.viewState.lineBlockAt(pos);\n  }\n  /**\n  The editor's total content height.\n  */\n  get contentHeight() {\n    return this.viewState.contentHeight;\n  }\n  /**\n  Move a cursor position by [grapheme\n  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether\n  the motion is away from the line start, or towards it. In\n  bidirectional text, the line is traversed in visual order, using\n  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).\n  When the start position was the last one on the line, the\n  returned position will be across the line break. If there is no\n  further line, the original position is returned.\n  \n  By default, this method moves over a single cluster. The\n  optional `by` argument can be used to move across more. It will\n  be called with the first cluster as argument, and should return\n  a predicate that determines, for each subsequent cluster,\n  whether it should also be moved over.\n  */\n  moveByChar(start, forward, by) {\n    return skipAtoms(this, start, moveByChar(this, start, forward, by));\n  }\n  /**\n  Move a cursor position across the next group of either\n  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter\n  non-whitespace characters.\n  */\n  moveByGroup(start, forward) {\n    return skipAtoms(this, start, moveByChar(this, start, forward, (initial) => byGroup(this, start.head, initial)));\n  }\n  /**\n  Get the cursor position visually at the start or end of a line.\n  Note that this may differ from the _logical_ position at its\n  start or end (which is simply at `line.from`/`line.to`) if text\n  at the start or end goes against the line's base text direction.\n  */\n  visualLineSide(line, end) {\n    let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);\n    let span = order[end ? order.length - 1 : 0];\n    return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);\n  }\n  /**\n  Move to the next line boundary in the given direction. If\n  `includeWrap` is true, line wrapping is on, and there is a\n  further wrap point on the current line, the wrap point will be\n  returned. Otherwise this function will return the start or end\n  of the line.\n  */\n  moveToLineBoundary(start, forward, includeWrap = true) {\n    return moveToLineBoundary(this, start, forward, includeWrap);\n  }\n  /**\n  Move a cursor position vertically. When `distance` isn't given,\n  it defaults to moving to the next line (including wrapped\n  lines). Otherwise, `distance` should provide a positive distance\n  in pixels.\n  \n  When `start` has a\n  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical\n  motion will use that as a target horizontal position. Otherwise,\n  the cursor's own horizontal position is used. The returned\n  cursor will have its goal column set to whichever column was\n  used.\n  */\n  moveVertically(start, forward, distance) {\n    return skipAtoms(this, start, moveVertically(this, start, forward, distance));\n  }\n  /**\n  Find the DOM parent node and offset (child offset if `node` is\n  an element, character offset when it is a text node) at the\n  given document position.\n  \n  Note that for positions that aren't currently in\n  `visibleRanges`, the resulting DOM position isn't necessarily\n  meaningful (it may just point before or after a placeholder\n  element).\n  */\n  domAtPos(pos) {\n    return this.docView.domAtPos(pos);\n  }\n  /**\n  Find the document position at the given DOM node. Can be useful\n  for associating positions with DOM events. Will raise an error\n  when `node` isn't part of the editor content.\n  */\n  posAtDOM(node, offset = 0) {\n    return this.docView.posFromDOM(node, offset);\n  }\n  posAtCoords(coords, precise = true) {\n    this.readMeasured();\n    return posAtCoords(this, coords, precise);\n  }\n  /**\n  Get the screen coordinates at the given document position.\n  `side` determines whether the coordinates are based on the\n  element before (-1) or after (1) the position (if no element is\n  available on the given side, the method will transparently use\n  another strategy to get reasonable coordinates).\n  */\n  coordsAtPos(pos, side = 1) {\n    this.readMeasured();\n    let rect = this.docView.coordsAt(pos, side);\n    if (!rect || rect.left == rect.right)\n      return rect;\n    let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);\n    let span = order[BidiSpan.find(order, pos - line.from, -1, side)];\n    return flattenRect(rect, span.dir == Direction.LTR == side > 0);\n  }\n  /**\n  Return the rectangle around a given character. If `pos` does not\n  point in front of a character that is in the viewport and\n  rendered (i.e. not replaced, not a line break), this will return\n  null. For space characters that are a line wrap point, this will\n  return the position before the line break.\n  */\n  coordsForChar(pos) {\n    this.readMeasured();\n    return this.docView.coordsForChar(pos);\n  }\n  /**\n  The default width of a character in the editor. May not\n  accurately reflect the width of all characters (given variable\n  width fonts or styling of invididual ranges).\n  */\n  get defaultCharacterWidth() {\n    return this.viewState.heightOracle.charWidth;\n  }\n  /**\n  The default height of a line in the editor. May not be accurate\n  for all lines.\n  */\n  get defaultLineHeight() {\n    return this.viewState.heightOracle.lineHeight;\n  }\n  /**\n  The text direction\n  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)\n  CSS property) of the editor's content element.\n  */\n  get textDirection() {\n    return this.viewState.defaultTextDirection;\n  }\n  /**\n  Find the text direction of the block at the given position, as\n  assigned by CSS. If\n  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)\n  isn't enabled, or the given position is outside of the viewport,\n  this will always return the same as\n  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that\n  this may trigger a DOM layout.\n  */\n  textDirectionAt(pos) {\n    let perLine = this.state.facet(perLineTextDirection);\n    if (!perLine || pos < this.viewport.from || pos > this.viewport.to)\n      return this.textDirection;\n    this.readMeasured();\n    return this.docView.textDirectionAt(pos);\n  }\n  /**\n  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)\n  (as determined by the\n  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)\n  CSS property of its content element).\n  */\n  get lineWrapping() {\n    return this.viewState.heightOracle.lineWrapping;\n  }\n  /**\n  Returns the bidirectional text structure of the given line\n  (which should be in the current document) as an array of span\n  objects. The order of these spans matches the [text\n  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is\n  left-to-right, the leftmost spans come first, otherwise the\n  rightmost spans come first.\n  */\n  bidiSpans(line) {\n    if (line.length > MaxBidiLine)\n      return trivialOrder(line.length);\n    let dir = this.textDirectionAt(line.from), isolates;\n    for (let entry of this.bidiCache) {\n      if (entry.from == line.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))\n        return entry.order;\n    }\n    if (!isolates)\n      isolates = getIsolatedRanges(this, line);\n    let order = computeOrder(line.text, dir, isolates);\n    this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));\n    return order;\n  }\n  /**\n  Check whether the editor has focus.\n  */\n  get hasFocus() {\n    var _a2;\n    return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a2 = this.inputState) === null || _a2 === void 0 ? void 0 : _a2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;\n  }\n  /**\n  Put focus on the editor.\n  */\n  focus() {\n    this.observer.ignore(() => {\n      focusPreventScroll(this.contentDOM);\n      this.docView.updateSelection();\n    });\n  }\n  /**\n  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only\n  necessary when moving the editor's existing DOM to a new window or shadow root.\n  */\n  setRoot(root) {\n    if (this._root != root) {\n      this._root = root;\n      this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);\n      this.mountStyles();\n    }\n  }\n  /**\n  Clean up this editor view, removing its element from the\n  document, unregistering event handlers, and notifying\n  plugins. The view instance can no longer be used after\n  calling this.\n  */\n  destroy() {\n    for (let plugin of this.plugins)\n      plugin.destroy(this);\n    this.plugins = [];\n    this.inputState.destroy();\n    this.docView.destroy();\n    this.dom.remove();\n    this.observer.destroy();\n    if (this.measureScheduled > -1)\n      this.win.cancelAnimationFrame(this.measureScheduled);\n    this.destroyed = true;\n  }\n  /**\n  Returns an effect that can be\n  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to\n  cause it to scroll the given position or range into view.\n  */\n  static scrollIntoView(pos, options = {}) {\n    return scrollIntoView.of(new ScrollTarget(typeof pos == \"number\" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));\n  }\n  /**\n  Return an effect that resets the editor to its current (at the\n  time this method was called) scroll position. Note that this\n  only affects the editor's own scrollable element, not parents.\n  See also\n  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).\n  \n  The effect should be used with a document identical to the one\n  it was created for. Failing to do so is not an error, but may\n  not scroll to the expected position. You can\n  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.\n  */\n  scrollSnapshot() {\n    let { scrollTop, scrollLeft } = this.scrollDOM;\n    let ref = this.viewState.scrollAnchorAt(scrollTop);\n    return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), \"start\", \"start\", ref.top - scrollTop, scrollLeft, true));\n  }\n  /**\n  Returns an extension that can be used to add DOM event handlers.\n  The value should be an object mapping event names to handler\n  functions. For any given event, such functions are ordered by\n  extension precedence, and the first handler to return true will\n  be assumed to have handled that event, and no other handlers or\n  built-in behavior will be activated for it. These are registered\n  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except\n  for `scroll` handlers, which will be called any time the\n  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of\n  its parent nodes is scrolled.\n  */\n  static domEventHandlers(handlers2) {\n    return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });\n  }\n  /**\n  Create an extension that registers DOM event observers. Contrary\n  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),\n  observers can't be prevented from running by a higher-precedence\n  handler returning true. They also don't prevent other handlers\n  and observers from running when they return true, and should not\n  call `preventDefault`.\n  */\n  static domEventObservers(observers2) {\n    return ViewPlugin.define(() => ({}), { eventObservers: observers2 });\n  }\n  /**\n  Create a theme extension. The first argument can be a\n  [`style-mod`](https://github.com/marijnh/style-mod#documentation)\n  style spec providing the styles for the theme. These will be\n  prefixed with a generated class for the style.\n  \n  Because the selectors will be prefixed with a scope class, rule\n  that directly match the editor's [wrapper\n  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be\n  added—need to be explicitly differentiated by adding an `&` to\n  the selector for that element—for example\n  `&.cm-focused`.\n  \n  When `dark` is set to true, the theme will be marked as dark,\n  which will cause the `&dark` rules from [base\n  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to\n  `&light` when a light theme is active).\n  */\n  static theme(spec, options) {\n    let prefix = StyleModule.newName();\n    let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];\n    if (options && options.dark)\n      result.push(darkTheme.of(true));\n    return result;\n  }\n  /**\n  Create an extension that adds styles to the base theme. Like\n  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the\n  place of the editor wrapper element when directly targeting\n  that. You can also use `&dark` or `&light` instead to only\n  target editors with a dark or light theme.\n  */\n  static baseTheme(spec) {\n    return Prec.lowest(styleModule.of(buildTheme(\".\" + baseThemeID, spec, lightDarkIDs)));\n  }\n  /**\n  Retrieve an editor view instance from the view's DOM\n  representation.\n  */\n  static findFromDOM(dom) {\n    var _a2;\n    let content2 = dom.querySelector(\".cm-content\");\n    let cView = content2 && ContentView.get(content2) || ContentView.get(dom);\n    return ((_a2 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a2 === void 0 ? void 0 : _a2.view) || null;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "keymap"
        },
        {
          "kind": "function",
          "name": "runScopeHandlers",
          "parameters": [
            {
              "name": "view"
            },
            {
              "name": "event"
            },
            {
              "name": "scope"
            }
          ]
        },
        {
          "kind": "function",
          "name": "drawSelection",
          "parameters": [
            {
              "name": "config",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "function",
          "name": "dropCursor"
        },
        {
          "kind": "function",
          "name": "highlightSpecialChars",
          "parameters": [
            {
              "name": "config",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "function",
          "name": "highlightActiveLine"
        },
        {
          "kind": "function",
          "name": "placeholder",
          "parameters": [
            {
              "name": "content2"
            }
          ]
        },
        {
          "kind": "function",
          "name": "rectangularSelection",
          "parameters": [
            {
              "name": "options"
            }
          ]
        },
        {
          "kind": "function",
          "name": "crosshairCursor",
          "parameters": [
            {
              "name": "options",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "showTooltip"
        },
        {
          "kind": "function",
          "name": "hoverTooltip",
          "parameters": [
            {
              "name": "source"
            },
            {
              "name": "options",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getTooltip",
          "parameters": [
            {
              "name": "view"
            },
            {
              "name": "tooltip"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getPanel",
          "parameters": [
            {
              "name": "view"
            },
            {
              "name": "panel"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "showPanel"
        },
        {
          "kind": "function",
          "name": "lineNumbers",
          "parameters": [
            {
              "name": "config",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "function",
          "name": "highlightActiveLineGutter"
        },
        {
          "kind": "variable",
          "name": "DefaultBufferLength",
          "type": {
            "text": "number"
          },
          "default": "1024"
        },
        {
          "kind": "variable",
          "name": "NodeProp",
          "default": "class {\n  /**\n  Create a new node prop type.\n  */\n  constructor(config = {}) {\n    this.id = nextPropID++;\n    this.perNode = !!config.perNode;\n    this.deserialize = config.deserialize || (() => {\n      throw new Error(\"This node type doesn't define a deserialize function\");\n    });\n  }\n  /**\n  This is meant to be used with\n  [`NodeSet.extend`](#common.NodeSet.extend) or\n  [`LRParser.configure`](#lr.ParserConfig.props) to compute\n  prop values for each node type in the set. Takes a [match\n  object](#common.NodeType^match) or function that returns undefined\n  if the node type doesn't get this prop, and the prop's value if\n  it does.\n  */\n  add(match) {\n    if (this.perNode)\n      throw new RangeError(\"Can't add per-node props to node types\");\n    if (typeof match != \"function\")\n      match = NodeType.match(match);\n    return (type) => {\n      let result = match(type);\n      return result === void 0 ? null : [this, result];\n    };\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "NodeType",
          "default": "class _NodeType {\n  /**\n  @internal\n  */\n  constructor(name2, props, id, flags = 0) {\n    this.name = name2;\n    this.props = props;\n    this.id = id;\n    this.flags = flags;\n  }\n  /**\n  Define a node type.\n  */\n  static define(spec) {\n    let props = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;\n    let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);\n    let type = new _NodeType(spec.name || \"\", props, spec.id, flags);\n    if (spec.props)\n      for (let src of spec.props) {\n        if (!Array.isArray(src))\n          src = src(type);\n        if (src) {\n          if (src[0].perNode)\n            throw new RangeError(\"Can't store a per-node prop on a node type\");\n          props[src[0].id] = src[1];\n        }\n      }\n    return type;\n  }\n  /**\n  Retrieves a node prop for this type. Will return `undefined` if\n  the prop isn't present on this node.\n  */\n  prop(prop) {\n    return this.props[prop.id];\n  }\n  /**\n  True when this is the top node of a grammar.\n  */\n  get isTop() {\n    return (this.flags & 1) > 0;\n  }\n  /**\n  True when this node is produced by a skip rule.\n  */\n  get isSkipped() {\n    return (this.flags & 2) > 0;\n  }\n  /**\n  Indicates whether this is an error node.\n  */\n  get isError() {\n    return (this.flags & 4) > 0;\n  }\n  /**\n  When true, this node type doesn't correspond to a user-declared\n  named node, for example because it is used to cache repetition.\n  */\n  get isAnonymous() {\n    return (this.flags & 8) > 0;\n  }\n  /**\n  Returns true when this node's name or one of its\n  [groups](#common.NodeProp^group) matches the given string.\n  */\n  is(name2) {\n    if (typeof name2 == \"string\") {\n      if (this.name == name2)\n        return true;\n      let group = this.prop(NodeProp.group);\n      return group ? group.indexOf(name2) > -1 : false;\n    }\n    return this.id == name2;\n  }\n  /**\n  Create a function from node types to arbitrary values by\n  specifying an object whose property names are node or\n  [group](#common.NodeProp^group) names. Often useful with\n  [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n  names, separated by spaces, in a single property name to map\n  multiple node names to a single value.\n  */\n  static match(map) {\n    let direct = /* @__PURE__ */ Object.create(null);\n    for (let prop in map)\n      for (let name2 of prop.split(\" \"))\n        direct[name2] = map[prop];\n    return (node) => {\n      for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n        let found = direct[i < 0 ? node.name : groups[i]];\n        if (found)\n          return found;\n      }\n    };\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "NodeSet",
          "default": "class _NodeSet {\n  /**\n  Create a set with the given types. The `id` property of each\n  type should correspond to its position within the array.\n  */\n  constructor(types2) {\n    this.types = types2;\n    for (let i = 0; i < types2.length; i++)\n      if (types2[i].id != i)\n        throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n  }\n  /**\n  Create a copy of this set with some node properties added. The\n  arguments to this method can be created with\n  [`NodeProp.add`](#common.NodeProp.add).\n  */\n  extend(...props) {\n    let newTypes = [];\n    for (let type of this.types) {\n      let newProps = null;\n      for (let source of props) {\n        let add = source(type);\n        if (add) {\n          if (!newProps)\n            newProps = Object.assign({}, type.props);\n          newProps[add[0].id] = add[1];\n        }\n      }\n      newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n    }\n    return new _NodeSet(newTypes);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "IterMode"
        },
        {
          "kind": "variable",
          "name": "Tree",
          "default": "class _Tree {\n  /**\n  Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n  */\n  constructor(type, children, positions, length, props) {\n    this.type = type;\n    this.children = children;\n    this.positions = positions;\n    this.length = length;\n    this.props = null;\n    if (props && props.length) {\n      this.props = /* @__PURE__ */ Object.create(null);\n      for (let [prop, value] of props)\n        this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n    }\n  }\n  /**\n  @internal\n  */\n  toString() {\n    let mounted = MountedTree.get(this);\n    if (mounted && !mounted.overlay)\n      return mounted.tree.toString();\n    let children = \"\";\n    for (let ch of this.children) {\n      let str = ch.toString();\n      if (str) {\n        if (children)\n          children += \",\";\n        children += str;\n      }\n    }\n    return !this.type.name ? children : (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? \"(\" + children + \")\" : \"\");\n  }\n  /**\n  Get a [tree cursor](#common.TreeCursor) positioned at the top of\n  the tree. Mode can be used to [control](#common.IterMode) which\n  nodes the cursor visits.\n  */\n  cursor(mode = 0) {\n    return new TreeCursor(this.topNode, mode);\n  }\n  /**\n  Get a [tree cursor](#common.TreeCursor) pointing into this tree\n  at the given position and side (see\n  [`moveTo`](#common.TreeCursor.moveTo).\n  */\n  cursorAt(pos, side = 0, mode = 0) {\n    let scope = CachedNode.get(this) || this.topNode;\n    let cursor = new TreeCursor(scope);\n    cursor.moveTo(pos, side);\n    CachedNode.set(this, cursor._tree);\n    return cursor;\n  }\n  /**\n  Get a [syntax node](#common.SyntaxNode) object for the top of the\n  tree.\n  */\n  get topNode() {\n    return new TreeNode(this, 0, 0, null);\n  }\n  /**\n  Get the [syntax node](#common.SyntaxNode) at the given position.\n  If `side` is -1, this will move into nodes that end at the\n  position. If 1, it'll move into nodes that start at the\n  position. With 0, it'll only enter nodes that cover the position\n  from both sides.\n  \n  Note that this will not enter\n  [overlays](#common.MountedTree.overlay), and you often want\n  [`resolveInner`](#common.Tree.resolveInner) instead.\n  */\n  resolve(pos, side = 0) {\n    let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n    CachedNode.set(this, node);\n    return node;\n  }\n  /**\n  Like [`resolve`](#common.Tree.resolve), but will enter\n  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n  pointing into the innermost overlaid tree at the given position\n  (with parent links going through all parent structure, including\n  the host trees).\n  */\n  resolveInner(pos, side = 0) {\n    let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n    CachedInnerNode.set(this, node);\n    return node;\n  }\n  /**\n  In some situations, it can be useful to iterate through all\n  nodes around a position, including those in overlays that don't\n  directly cover the position. This method gives you an iterator\n  that will produce all nodes, from small to big, around the given\n  position.\n  */\n  resolveStack(pos, side = 0) {\n    return stackIterator(this, pos, side);\n  }\n  /**\n  Iterate over the tree and its children, calling `enter` for any\n  node that touches the `from`/`to` region (if given) before\n  running over such a node's children, and `leave` (if given) when\n  leaving the node. When `enter` returns `false`, that node will\n  not have its children iterated over (or `leave` called).\n  */\n  iterate(spec) {\n    let { enter, leave, from = 0, to = this.length } = spec;\n    let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;\n    for (let c = this.cursor(mode | IterMode.IncludeAnonymous); ; ) {\n      let entered = false;\n      if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {\n        if (c.firstChild())\n          continue;\n        entered = true;\n      }\n      for (; ; ) {\n        if (entered && leave && (anon || !c.type.isAnonymous))\n          leave(c);\n        if (c.nextSibling())\n          break;\n        if (!c.parent())\n          return;\n        entered = true;\n      }\n    }\n  }\n  /**\n  Get the value of the given [node prop](#common.NodeProp) for this\n  node. Works with both per-node and per-type props.\n  */\n  prop(prop) {\n    return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;\n  }\n  /**\n  Returns the node's [per-node props](#common.NodeProp.perNode) in a\n  format that can be passed to the [`Tree`](#common.Tree)\n  constructor.\n  */\n  get propValues() {\n    let result = [];\n    if (this.props)\n      for (let id in this.props)\n        result.push([+id, this.props[id]]);\n    return result;\n  }\n  /**\n  Balance the direct children of this tree, producing a copy of\n  which may have children grouped into subtrees with type\n  [`NodeType.none`](#common.NodeType^none).\n  */\n  balance(config = {}) {\n    return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new _Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new _Tree(NodeType.none, children, positions, length)));\n  }\n  /**\n  Build a tree from a postfix-ordered buffer of node information,\n  or a cursor over such a buffer.\n  */\n  static build(data) {\n    return buildTree(data);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "NodeWeakMap",
          "default": "class {\n  constructor() {\n    this.map = /* @__PURE__ */ new WeakMap();\n  }\n  setBuffer(buffer, index, value) {\n    let inner = this.map.get(buffer);\n    if (!inner)\n      this.map.set(buffer, inner = /* @__PURE__ */ new Map());\n    inner.set(index, value);\n  }\n  getBuffer(buffer, index) {\n    let inner = this.map.get(buffer);\n    return inner && inner.get(index);\n  }\n  /**\n  Set the value for this syntax node.\n  */\n  set(node, value) {\n    if (node instanceof BufferNode)\n      this.setBuffer(node.context.buffer, node.index, value);\n    else if (node instanceof TreeNode)\n      this.map.set(node.tree, value);\n  }\n  /**\n  Retrieve value for this syntax node, if it exists in the map.\n  */\n  get(node) {\n    return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : void 0;\n  }\n  /**\n  Set the value for the node that a cursor currently points to.\n  */\n  cursorSet(cursor, value) {\n    if (cursor.buffer)\n      this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n    else\n      this.map.set(cursor.tree, value);\n  }\n  /**\n  Retrieve the value for the node that a cursor currently points\n  to.\n  */\n  cursorGet(cursor) {\n    return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Parser",
          "default": "class {\n  /**\n  Start a parse, returning a [partial parse](#common.PartialParse)\n  object. [`fragments`](#common.TreeFragment) can be passed in to\n  make the parse incremental.\n  \n  By default, the entire input is parsed. You can pass `ranges`,\n  which should be a sorted array of non-empty, non-overlapping\n  ranges, to parse only those ranges. The tree returned in that\n  case will start at `ranges[0].from`.\n  */\n  startParse(input, fragments, ranges) {\n    if (typeof input == \"string\")\n      input = new StringInput(input);\n    ranges = !ranges ? [new Range2(0, input.length)] : ranges.length ? ranges.map((r) => new Range2(r.from, r.to)) : [new Range2(0, 0)];\n    return this.createParse(input, fragments || [], ranges);\n  }\n  /**\n  Run a full parse, returning the resulting tree.\n  */\n  parse(input, fragments, ranges) {\n    let parse = this.startParse(input, fragments, ranges);\n    for (; ; ) {\n      let done = parse.advance();\n      if (done)\n        return done;\n    }\n  }\n}"
        },
        {
          "kind": "function",
          "name": "parseMixed",
          "parameters": [
            {
              "name": "nest"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "Tag",
          "default": "class _Tag {\n  /**\n  @internal\n  */\n  constructor(set, base2, modified) {\n    this.set = set;\n    this.base = base2;\n    this.modified = modified;\n    this.id = nextTagID++;\n  }\n  /**\n  Define a new tag. If `parent` is given, the tag is treated as a\n  sub-tag of that parent, and\n  [highlighters](#highlight.tagHighlighter) that don't mention\n  this tag will try to fall back to the parent tag (or grandparent\n  tag, etc).\n  */\n  static define(parent) {\n    if (parent === null || parent === void 0 ? void 0 : parent.base)\n      throw new Error(\"Can not derive from a modified tag\");\n    let tag = new _Tag([], null, []);\n    tag.set.push(tag);\n    if (parent)\n      for (let t2 of parent.set)\n        tag.set.push(t2);\n    return tag;\n  }\n  /**\n  Define a tag _modifier_, which is a function that, given a tag,\n  will return a tag that is a subtag of the original. Applying the\n  same modifier to a twice tag will return the same value (`m1(t1)\n  == m1(t1)`) and applying multiple modifiers will, regardless or\n  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\n  \n  When multiple modifiers are applied to a given base tag, each\n  smaller set of modifiers is registered as a parent, so that for\n  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\n  `m1(m3(t1)`, and so on.\n  */\n  static defineModifier() {\n    let mod = new Modifier();\n    return (tag) => {\n      if (tag.modified.indexOf(mod) > -1)\n        return tag;\n      return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));\n    };\n  }\n}"
        },
        {
          "kind": "function",
          "name": "styleTags",
          "parameters": [
            {
              "name": "spec"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "tags",
          "type": {
            "text": "object"
          },
          "default": "{\n  /**\n  A comment.\n  */\n  comment,\n  /**\n  A line [comment](#highlight.tags.comment).\n  */\n  lineComment: t(comment),\n  /**\n  A block [comment](#highlight.tags.comment).\n  */\n  blockComment: t(comment),\n  /**\n  A documentation [comment](#highlight.tags.comment).\n  */\n  docComment: t(comment),\n  /**\n  Any kind of identifier.\n  */\n  name,\n  /**\n  The [name](#highlight.tags.name) of a variable.\n  */\n  variableName: t(name),\n  /**\n  A type [name](#highlight.tags.name).\n  */\n  typeName,\n  /**\n  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\n  */\n  tagName: t(typeName),\n  /**\n  A property or field [name](#highlight.tags.name).\n  */\n  propertyName,\n  /**\n  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).\n  */\n  attributeName: t(propertyName),\n  /**\n  The [name](#highlight.tags.name) of a class.\n  */\n  className: t(name),\n  /**\n  A label [name](#highlight.tags.name).\n  */\n  labelName: t(name),\n  /**\n  A namespace [name](#highlight.tags.name).\n  */\n  namespace: t(name),\n  /**\n  The [name](#highlight.tags.name) of a macro.\n  */\n  macroName: t(name),\n  /**\n  A literal value.\n  */\n  literal,\n  /**\n  A string [literal](#highlight.tags.literal).\n  */\n  string,\n  /**\n  A documentation [string](#highlight.tags.string).\n  */\n  docString: t(string),\n  /**\n  A character literal (subtag of [string](#highlight.tags.string)).\n  */\n  character: t(string),\n  /**\n  An attribute value (subtag of [string](#highlight.tags.string)).\n  */\n  attributeValue: t(string),\n  /**\n  A number [literal](#highlight.tags.literal).\n  */\n  number,\n  /**\n  An integer [number](#highlight.tags.number) literal.\n  */\n  integer: t(number),\n  /**\n  A floating-point [number](#highlight.tags.number) literal.\n  */\n  float: t(number),\n  /**\n  A boolean [literal](#highlight.tags.literal).\n  */\n  bool: t(literal),\n  /**\n  Regular expression [literal](#highlight.tags.literal).\n  */\n  regexp: t(literal),\n  /**\n  An escape [literal](#highlight.tags.literal), for example a\n  backslash escape in a string.\n  */\n  escape: t(literal),\n  /**\n  A color [literal](#highlight.tags.literal).\n  */\n  color: t(literal),\n  /**\n  A URL [literal](#highlight.tags.literal).\n  */\n  url: t(literal),\n  /**\n  A language keyword.\n  */\n  keyword,\n  /**\n  The [keyword](#highlight.tags.keyword) for the self or this\n  object.\n  */\n  self: t(keyword),\n  /**\n  The [keyword](#highlight.tags.keyword) for null.\n  */\n  null: t(keyword),\n  /**\n  A [keyword](#highlight.tags.keyword) denoting some atomic value.\n  */\n  atom: t(keyword),\n  /**\n  A [keyword](#highlight.tags.keyword) that represents a unit.\n  */\n  unit: t(keyword),\n  /**\n  A modifier [keyword](#highlight.tags.keyword).\n  */\n  modifier: t(keyword),\n  /**\n  A [keyword](#highlight.tags.keyword) that acts as an operator.\n  */\n  operatorKeyword: t(keyword),\n  /**\n  A control-flow related [keyword](#highlight.tags.keyword).\n  */\n  controlKeyword: t(keyword),\n  /**\n  A [keyword](#highlight.tags.keyword) that defines something.\n  */\n  definitionKeyword: t(keyword),\n  /**\n  A [keyword](#highlight.tags.keyword) related to defining or\n  interfacing with modules.\n  */\n  moduleKeyword: t(keyword),\n  /**\n  An operator.\n  */\n  operator,\n  /**\n  An [operator](#highlight.tags.operator) that dereferences something.\n  */\n  derefOperator: t(operator),\n  /**\n  Arithmetic-related [operator](#highlight.tags.operator).\n  */\n  arithmeticOperator: t(operator),\n  /**\n  Logical [operator](#highlight.tags.operator).\n  */\n  logicOperator: t(operator),\n  /**\n  Bit [operator](#highlight.tags.operator).\n  */\n  bitwiseOperator: t(operator),\n  /**\n  Comparison [operator](#highlight.tags.operator).\n  */\n  compareOperator: t(operator),\n  /**\n  [Operator](#highlight.tags.operator) that updates its operand.\n  */\n  updateOperator: t(operator),\n  /**\n  [Operator](#highlight.tags.operator) that defines something.\n  */\n  definitionOperator: t(operator),\n  /**\n  Type-related [operator](#highlight.tags.operator).\n  */\n  typeOperator: t(operator),\n  /**\n  Control-flow [operator](#highlight.tags.operator).\n  */\n  controlOperator: t(operator),\n  /**\n  Program or markup punctuation.\n  */\n  punctuation,\n  /**\n  [Punctuation](#highlight.tags.punctuation) that separates\n  things.\n  */\n  separator: t(punctuation),\n  /**\n  Bracket-style [punctuation](#highlight.tags.punctuation).\n  */\n  bracket,\n  /**\n  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\n  tokens).\n  */\n  angleBracket: t(bracket),\n  /**\n  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\n  tokens).\n  */\n  squareBracket: t(bracket),\n  /**\n  Parentheses (usually `(` and `)` tokens). Subtag of\n  [bracket](#highlight.tags.bracket).\n  */\n  paren: t(bracket),\n  /**\n  Braces (usually `{` and `}` tokens). Subtag of\n  [bracket](#highlight.tags.bracket).\n  */\n  brace: t(bracket),\n  /**\n  Content, for example plain text in XML or markup documents.\n  */\n  content,\n  /**\n  [Content](#highlight.tags.content) that represents a heading.\n  */\n  heading,\n  /**\n  A level 1 [heading](#highlight.tags.heading).\n  */\n  heading1: t(heading),\n  /**\n  A level 2 [heading](#highlight.tags.heading).\n  */\n  heading2: t(heading),\n  /**\n  A level 3 [heading](#highlight.tags.heading).\n  */\n  heading3: t(heading),\n  /**\n  A level 4 [heading](#highlight.tags.heading).\n  */\n  heading4: t(heading),\n  /**\n  A level 5 [heading](#highlight.tags.heading).\n  */\n  heading5: t(heading),\n  /**\n  A level 6 [heading](#highlight.tags.heading).\n  */\n  heading6: t(heading),\n  /**\n  A prose separator (such as a horizontal rule).\n  */\n  contentSeparator: t(content),\n  /**\n  [Content](#highlight.tags.content) that represents a list.\n  */\n  list: t(content),\n  /**\n  [Content](#highlight.tags.content) that represents a quote.\n  */\n  quote: t(content),\n  /**\n  [Content](#highlight.tags.content) that is emphasized.\n  */\n  emphasis: t(content),\n  /**\n  [Content](#highlight.tags.content) that is styled strong.\n  */\n  strong: t(content),\n  /**\n  [Content](#highlight.tags.content) that is part of a link.\n  */\n  link: t(content),\n  /**\n  [Content](#highlight.tags.content) that is styled as code or\n  monospace.\n  */\n  monospace: t(content),\n  /**\n  [Content](#highlight.tags.content) that has a strike-through\n  style.\n  */\n  strikethrough: t(content),\n  /**\n  Inserted text in a change-tracking format.\n  */\n  inserted: t(),\n  /**\n  Deleted text.\n  */\n  deleted: t(),\n  /**\n  Changed text.\n  */\n  changed: t(),\n  /**\n  An invalid or unsyntactic element.\n  */\n  invalid: t(),\n  /**\n  Metadata or meta-instruction.\n  */\n  meta,\n  /**\n  [Metadata](#highlight.tags.meta) that applies to the entire\n  document.\n  */\n  documentMeta: t(meta),\n  /**\n  [Metadata](#highlight.tags.meta) that annotates or adds\n  attributes to a given syntactic element.\n  */\n  annotation: t(meta),\n  /**\n  Processing instruction or preprocessor directive. Subtag of\n  [meta](#highlight.tags.meta).\n  */\n  processingInstruction: t(meta),\n  /**\n  [Modifier](#highlight.Tag^defineModifier) that indicates that a\n  given element is being defined. Expected to be used with the\n  various [name](#highlight.tags.name) tags.\n  */\n  definition: Tag.defineModifier(),\n  /**\n  [Modifier](#highlight.Tag^defineModifier) that indicates that\n  something is constant. Mostly expected to be used with\n  [variable names](#highlight.tags.variableName).\n  */\n  constant: Tag.defineModifier(),\n  /**\n  [Modifier](#highlight.Tag^defineModifier) used to indicate that\n  a [variable](#highlight.tags.variableName) or [property\n  name](#highlight.tags.propertyName) is being called or defined\n  as a function.\n  */\n  function: Tag.defineModifier(),\n  /**\n  [Modifier](#highlight.Tag^defineModifier) that can be applied to\n  [names](#highlight.tags.name) to indicate that they belong to\n  the language's standard environment.\n  */\n  standard: Tag.defineModifier(),\n  /**\n  [Modifier](#highlight.Tag^defineModifier) that indicates a given\n  [names](#highlight.tags.name) is local to some scope.\n  */\n  local: Tag.defineModifier(),\n  /**\n  A generic variant [modifier](#highlight.Tag^defineModifier) that\n  can be used to tag language-specific alternative variants of\n  some common tag. It is recommended for themes to define special\n  forms of at least the [string](#highlight.tags.string) and\n  [variable name](#highlight.tags.variableName) tags, since those\n  come up a lot.\n  */\n  special: Tag.defineModifier()\n}"
        },
        {
          "kind": "variable",
          "name": "languageDataProp",
          "default": "new NodeProp()"
        },
        {
          "kind": "function",
          "name": "defineLanguageFacet",
          "parameters": [
            {
              "name": "baseData"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "sublanguageProp",
          "default": "new NodeProp()"
        },
        {
          "kind": "variable",
          "name": "Language",
          "default": "class {\n  /**\n  Construct a language object. If you need to invoke this\n  directly, first define a data facet with\n  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\n  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\n  to the language's outer syntax node.\n  */\n  constructor(data, parser, extraExtensions = [], name2 = \"\") {\n    this.data = data;\n    this.name = name2;\n    if (!EditorState.prototype.hasOwnProperty(\"tree\"))\n      Object.defineProperty(EditorState.prototype, \"tree\", { get() {\n        return syntaxTree(this);\n      } });\n    this.parser = parser;\n    this.extension = [\n      language.of(this),\n      EditorState.languageData.of((state, pos, side) => {\n        let top2 = topNodeAt(state, pos, side), data2 = top2.type.prop(languageDataProp);\n        if (!data2)\n          return [];\n        let base2 = state.facet(data2), sub = top2.type.prop(sublanguageProp);\n        if (sub) {\n          let innerNode = top2.resolve(pos - top2.from, side);\n          for (let sublang of sub)\n            if (sublang.test(innerNode, state)) {\n              let data3 = state.facet(sublang.facet);\n              return sublang.type == \"replace\" ? data3 : data3.concat(base2);\n            }\n        }\n        return base2;\n      })\n    ].concat(extraExtensions);\n  }\n  /**\n  Query whether this language is active at the given position.\n  */\n  isActiveAt(state, pos, side = -1) {\n    return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;\n  }\n  /**\n  Find the document regions that were parsed using this language.\n  The returned regions will _include_ any nested languages rooted\n  in this language, when those exist.\n  */\n  findRegions(state) {\n    let lang = state.facet(language);\n    if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)\n      return [{ from: 0, to: state.doc.length }];\n    if (!lang || !lang.allowsNesting)\n      return [];\n    let result = [];\n    let explore = (tree, from) => {\n      if (tree.prop(languageDataProp) == this.data) {\n        result.push({ from, to: from + tree.length });\n        return;\n      }\n      let mount = tree.prop(NodeProp.mounted);\n      if (mount) {\n        if (mount.tree.prop(languageDataProp) == this.data) {\n          if (mount.overlay)\n            for (let r of mount.overlay)\n              result.push({ from: r.from + from, to: r.to + from });\n          else\n            result.push({ from, to: from + tree.length });\n          return;\n        } else if (mount.overlay) {\n          let size = result.length;\n          explore(mount.tree, mount.overlay[0].from + from);\n          if (result.length > size)\n            return;\n        }\n      }\n      for (let i = 0; i < tree.children.length; i++) {\n        let ch = tree.children[i];\n        if (ch instanceof Tree)\n          explore(ch, tree.positions[i] + from);\n      }\n    };\n    explore(syntaxTree(state), 0);\n    return result;\n  }\n  /**\n  Indicates whether this language allows nested languages. The\n  default implementation returns true.\n  */\n  get allowsNesting() {\n    return true;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "LRLanguage",
          "default": "class _LRLanguage extends Language {\n  constructor(data, parser, name2) {\n    super(data, parser, [], name2);\n    this.parser = parser;\n  }\n  /**\n  Define a language from a parser.\n  */\n  static define(spec) {\n    let data = defineLanguageFacet(spec.languageData);\n    return new _LRLanguage(data, spec.parser.configure({\n      props: [languageDataProp.add((type) => type.isTop ? data : void 0)]\n    }), spec.name);\n  }\n  /**\n  Create a new instance of this language with a reconfigured\n  version of its parser and optionally a new name.\n  */\n  configure(options, name2) {\n    return new _LRLanguage(this.data, this.parser.configure(options), name2 || this.name);\n  }\n  get allowsNesting() {\n    return this.parser.hasWrappers();\n  }\n}"
        },
        {
          "kind": "function",
          "name": "syntaxTree",
          "parameters": [
            {
              "name": "state"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "ParseContext",
          "default": "class _ParseContext {\n  constructor(parser, state, fragments = [], tree, treeLen, viewport, skipped, scheduleOn) {\n    this.parser = parser;\n    this.state = state;\n    this.fragments = fragments;\n    this.tree = tree;\n    this.treeLen = treeLen;\n    this.viewport = viewport;\n    this.skipped = skipped;\n    this.scheduleOn = scheduleOn;\n    this.parse = null;\n    this.tempSkipped = [];\n  }\n  /**\n  @internal\n  */\n  static create(parser, state, viewport) {\n    return new _ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);\n  }\n  startParse() {\n    return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\n  }\n  /**\n  @internal\n  */\n  work(until, upto) {\n    if (upto != null && upto >= this.state.doc.length)\n      upto = void 0;\n    if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n      this.takeTree();\n      return true;\n    }\n    return this.withContext(() => {\n      var _a2;\n      if (typeof until == \"number\") {\n        let endTime = Date.now() + until;\n        until = () => Date.now() > endTime;\n      }\n      if (!this.parse)\n        this.parse = this.startParse();\n      if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)\n        this.parse.stopAt(upto);\n      for (; ; ) {\n        let done = this.parse.advance();\n        if (done) {\n          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));\n          this.treeLen = (_a2 = this.parse.stoppedAt) !== null && _a2 !== void 0 ? _a2 : this.state.doc.length;\n          this.tree = done;\n          this.parse = null;\n          if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))\n            this.parse = this.startParse();\n          else\n            return true;\n        }\n        if (until())\n          return false;\n      }\n    });\n  }\n  /**\n  @internal\n  */\n  takeTree() {\n    let pos, tree;\n    if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n      if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)\n        this.parse.stopAt(pos);\n      this.withContext(() => {\n        while (!(tree = this.parse.advance())) {\n        }\n      });\n      this.treeLen = pos;\n      this.tree = tree;\n      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n      this.parse = null;\n    }\n  }\n  withContext(f) {\n    let prev = currentContext;\n    currentContext = this;\n    try {\n      return f();\n    } finally {\n      currentContext = prev;\n    }\n  }\n  withoutTempSkipped(fragments) {\n    for (let r; r = this.tempSkipped.pop(); )\n      fragments = cutFragments(fragments, r.from, r.to);\n    return fragments;\n  }\n  /**\n  @internal\n  */\n  changes(changes, newState) {\n    let { fragments, tree, treeLen, viewport, skipped } = this;\n    this.takeTree();\n    if (!changes.empty) {\n      let ranges = [];\n      changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));\n      fragments = TreeFragment.applyChanges(fragments, ranges);\n      tree = Tree.empty;\n      treeLen = 0;\n      viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };\n      if (this.skipped.length) {\n        skipped = [];\n        for (let r of this.skipped) {\n          let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);\n          if (from < to)\n            skipped.push({ from, to });\n        }\n      }\n    }\n    return new _ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n  }\n  /**\n  @internal\n  */\n  updateViewport(viewport) {\n    if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)\n      return false;\n    this.viewport = viewport;\n    let startLen = this.skipped.length;\n    for (let i = 0; i < this.skipped.length; i++) {\n      let { from, to } = this.skipped[i];\n      if (from < viewport.to && to > viewport.from) {\n        this.fragments = cutFragments(this.fragments, from, to);\n        this.skipped.splice(i--, 1);\n      }\n    }\n    if (this.skipped.length >= startLen)\n      return false;\n    this.reset();\n    return true;\n  }\n  /**\n  @internal\n  */\n  reset() {\n    if (this.parse) {\n      this.takeTree();\n      this.parse = null;\n    }\n  }\n  /**\n  Notify the parse scheduler that the given region was skipped\n  because it wasn't in view, and the parse should be restarted\n  when it comes into view.\n  */\n  skipUntilInView(from, to) {\n    this.skipped.push({ from, to });\n  }\n  /**\n  Returns a parser intended to be used as placeholder when\n  asynchronously loading a nested parser. It'll skip its input and\n  mark it as not-really-parsed, so that the next update will parse\n  it again.\n  \n  When `until` is given, a reparse will be scheduled when that\n  promise resolves.\n  */\n  static getSkippingParser(until) {\n    return new class extends Parser {\n      createParse(input, fragments, ranges) {\n        let from = ranges[0].from, to = ranges[ranges.length - 1].to;\n        let parser = {\n          parsedPos: from,\n          advance() {\n            let cx = currentContext;\n            if (cx) {\n              for (let r of ranges)\n                cx.tempSkipped.push(r);\n              if (until)\n                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\n            }\n            this.parsedPos = to;\n            return new Tree(NodeType.none, [], [], to - from);\n          },\n          stoppedAt: null,\n          stopAt() {\n          }\n        };\n        return parser;\n      }\n    }();\n  }\n  /**\n  @internal\n  */\n  isDone(upto) {\n    upto = Math.min(upto, this.state.doc.length);\n    let frags = this.fragments;\n    return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n  }\n  /**\n  Get the context for the current parse, or `null` if no editor\n  parse is in progress.\n  */\n  static get() {\n    return currentContext;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "LanguageSupport",
          "default": "class {\n  /**\n  Create a language support object.\n  */\n  constructor(language2, support = []) {\n    this.language = language2;\n    this.support = support;\n    this.extension = [language2, support];\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "LanguageDescription",
          "default": "class _LanguageDescription {\n  constructor(name2, alias, extensions, filename, loadFunc, support = void 0) {\n    this.name = name2;\n    this.alias = alias;\n    this.extensions = extensions;\n    this.filename = filename;\n    this.loadFunc = loadFunc;\n    this.support = support;\n    this.loading = null;\n  }\n  /**\n  Start loading the the language. Will return a promise that\n  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n  object when the language successfully loads.\n  */\n  load() {\n    return this.loading || (this.loading = this.loadFunc().then((support) => this.support = support, (err) => {\n      this.loading = null;\n      throw err;\n    }));\n  }\n  /**\n  Create a language description.\n  */\n  static of(spec) {\n    let { load, support } = spec;\n    if (!load) {\n      if (!support)\n        throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n      load = () => Promise.resolve(support);\n    }\n    return new _LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map((s) => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\n  }\n  /**\n  Look for a language in the given array of descriptions that\n  matches the filename. Will first match\n  [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n  and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n  and return the first language that matches.\n  */\n  static matchFilename(descs, filename) {\n    for (let d of descs)\n      if (d.filename && d.filename.test(filename))\n        return d;\n    let ext = /\\.([^.]+)$/.exec(filename);\n    if (ext) {\n      for (let d of descs)\n        if (d.extensions.indexOf(ext[1]) > -1)\n          return d;\n    }\n    return null;\n  }\n  /**\n  Look for a language whose name or alias matches the the given\n  name (case-insensitively). If `fuzzy` is true, and no direct\n  matchs is found, this'll also search for a language whose name\n  or alias occurs in the string (for names shorter than three\n  characters, only when surrounded by non-word characters).\n  */\n  static matchLanguageName(descs, name2, fuzzy = true) {\n    name2 = name2.toLowerCase();\n    for (let d of descs)\n      if (d.alias.some((a) => a == name2))\n        return d;\n    if (fuzzy)\n      for (let d of descs)\n        for (let a of d.alias) {\n          let found = name2.indexOf(a);\n          if (found > -1 && (a.length > 2 || !/\\w/.test(name2[found - 1]) && !/\\w/.test(name2[found + a.length])))\n            return d;\n        }\n    return null;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "indentUnit"
        },
        {
          "kind": "function",
          "name": "getIndentUnit",
          "parameters": [
            {
              "name": "state"
            }
          ]
        },
        {
          "kind": "function",
          "name": "indentString",
          "parameters": [
            {
              "name": "state"
            },
            {
              "name": "cols"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getIndentation",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "pos"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "IndentContext",
          "default": "class {\n  /**\n  Create an indent context.\n  */\n  constructor(state, options = {}) {\n    this.state = state;\n    this.options = options;\n    this.unit = getIndentUnit(state);\n  }\n  /**\n  Get a description of the line at the given position, taking\n  [simulated line\n  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n  into account. If there is such a break at `pos`, the `bias`\n  argument determines whether the part of the line line before or\n  after the break is used.\n  */\n  lineAt(pos, bias = 1) {\n    let line = this.state.doc.lineAt(pos);\n    let { simulateBreak, simulateDoubleBreak } = this.options;\n    if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n      if (simulateDoubleBreak && simulateBreak == pos)\n        return { text: \"\", from: pos };\n      else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)\n        return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };\n      else\n        return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };\n    }\n    return line;\n  }\n  /**\n  Get the text directly after `pos`, either the entire line\n  or the next 100 characters, whichever is shorter.\n  */\n  textAfterPos(pos, bias = 1) {\n    if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)\n      return \"\";\n    let { text, from } = this.lineAt(pos, bias);\n    return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n  }\n  /**\n  Find the column for the given position.\n  */\n  column(pos, bias = 1) {\n    let { text, from } = this.lineAt(pos, bias);\n    let result = this.countColumn(text, pos - from);\n    let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n    if (override > -1)\n      result += override - this.countColumn(text, text.search(/\\S|$/));\n    return result;\n  }\n  /**\n  Find the column position (taking tabs into account) of the given\n  position in the given string.\n  */\n  countColumn(line, pos = line.length) {\n    return countColumn(line, this.state.tabSize, pos);\n  }\n  /**\n  Find the indentation column of the line at the given point.\n  */\n  lineIndent(pos, bias = 1) {\n    let { text, from } = this.lineAt(pos, bias);\n    let override = this.options.overrideIndentation;\n    if (override) {\n      let overriden = override(from);\n      if (overriden > -1)\n        return overriden;\n    }\n    return this.countColumn(text, text.search(/\\S|$/));\n  }\n  /**\n  Returns the [simulated line\n  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n  for this context, if any.\n  */\n  get simulatedBreak() {\n    return this.options.simulateBreak || null;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "indentNodeProp",
          "default": "new NodeProp()"
        },
        {
          "kind": "function",
          "name": "delimitedIndent",
          "parameters": [
            {
              "name": "{ closing, align = true, units = 1 }"
            }
          ]
        },
        {
          "kind": "function",
          "name": "flatIndent",
          "parameters": [
            {
              "name": "context"
            }
          ]
        },
        {
          "kind": "function",
          "name": "continuedIndent",
          "parameters": [
            {
              "name": "{ except, units = 1 }",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "function",
          "name": "indentOnInput"
        },
        {
          "kind": "variable",
          "name": "foldService"
        },
        {
          "kind": "variable",
          "name": "foldNodeProp",
          "default": "new NodeProp()"
        },
        {
          "kind": "function",
          "name": "foldInside",
          "parameters": [
            {
              "name": "node"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "foldKeymap",
          "type": {
            "text": "array"
          },
          "default": "[\n  { key: \"Ctrl-Shift-[\", mac: \"Cmd-Alt-[\", run: foldCode },\n  { key: \"Ctrl-Shift-]\", mac: \"Cmd-Alt-]\", run: unfoldCode },\n  { key: \"Ctrl-Alt-[\", run: foldAll },\n  { key: \"Ctrl-Alt-]\", run: unfoldAll }\n]"
        },
        {
          "kind": "function",
          "name": "foldGutter",
          "parameters": [
            {
              "name": "config",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "HighlightStyle",
          "default": "class _HighlightStyle {\n  constructor(specs, options) {\n    this.specs = specs;\n    let modSpec;\n    function def(spec) {\n      let cls = StyleModule.newName();\n      (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))[\".\" + cls] = spec;\n      return cls;\n    }\n    const all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : void 0;\n    const scopeOpt = options.scope;\n    this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type) => type == scopeOpt : void 0;\n    this.style = tagHighlighter(specs.map((style) => ({\n      tag: style.tag,\n      class: style.class || def(Object.assign({}, style, { tag: null }))\n    })), {\n      all\n    }).style;\n    this.module = modSpec ? new StyleModule(modSpec) : null;\n    this.themeType = options.themeType;\n  }\n  /**\n  Create a highlighter style that associates the given styles to\n  the given tags. The specs must be objects that hold a style tag\n  or array of tags in their `tag` property, and either a single\n  `class` property providing a static CSS class (for highlighter\n  that rely on external styling), or a\n  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n  set of CSS properties (which define the styling for those tags).\n  \n  The CSS rules created for a highlighter will be emitted in the\n  order of the spec's properties. That means that for elements that\n  have multiple tags associated with them, styles defined further\n  down in the list will have a higher CSS precedence than styles\n  defined earlier.\n  */\n  static define(specs, options) {\n    return new _HighlightStyle(specs, options || {});\n  }\n}"
        },
        {
          "kind": "function",
          "name": "syntaxHighlighting",
          "parameters": [
            {
              "name": "highlighter"
            },
            {
              "name": "options"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "defaultHighlightStyle"
        },
        {
          "kind": "function",
          "name": "bracketMatching",
          "parameters": [
            {
              "name": "config",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "bracketMatchingHandle",
          "default": "new NodeProp()"
        },
        {
          "kind": "function",
          "name": "matchBrackets",
          "parameters": [
            {
              "name": "state"
            },
            {
              "name": "pos"
            },
            {
              "name": "dir"
            },
            {
              "name": "config",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "StreamLanguage",
          "default": "class _StreamLanguage extends Language {\n  constructor(parser) {\n    let data = defineLanguageFacet(parser.languageData);\n    let p = fullParser(parser), self;\n    let impl = new class extends Parser {\n      createParse(input, fragments, ranges) {\n        return new Parse(self, input, fragments, ranges);\n      }\n    }();\n    super(data, impl, [indentService.of((cx, pos) => this.getIndent(cx, pos))], parser.name);\n    this.topNode = docID(data);\n    self = this;\n    this.streamParser = p;\n    this.stateAfter = new NodeProp({ perNode: true });\n    this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n  }\n  /**\n  Define a stream language.\n  */\n  static define(spec) {\n    return new _StreamLanguage(spec);\n  }\n  getIndent(cx, pos) {\n    let tree = syntaxTree(cx.state), at = tree.resolve(pos);\n    while (at && at.type != this.topNode)\n      at = at.parent;\n    if (!at)\n      return null;\n    let from = void 0;\n    let { overrideIndentation } = cx.options;\n    if (overrideIndentation) {\n      from = IndentedFrom.get(cx.state);\n      if (from != null && from < pos - 1e4)\n        from = void 0;\n    }\n    let start = findState(this, tree, 0, at.from, from !== null && from !== void 0 ? from : pos), statePos, state;\n    if (start) {\n      state = start.state;\n      statePos = start.pos + 1;\n    } else {\n      state = this.streamParser.startState(cx.unit);\n      statePos = 0;\n    }\n    if (pos - statePos > 1e4)\n      return null;\n    while (statePos < pos) {\n      let line2 = cx.state.doc.lineAt(statePos), end = Math.min(pos, line2.to);\n      if (line2.length) {\n        let indentation = overrideIndentation ? overrideIndentation(line2.from) : -1;\n        let stream = new StringStream(line2.text, cx.state.tabSize, cx.unit, indentation < 0 ? void 0 : indentation);\n        while (stream.pos < end - line2.from)\n          readToken(this.streamParser.token, stream, state);\n      } else {\n        this.streamParser.blankLine(state, cx.unit);\n      }\n      if (end == pos)\n        break;\n      statePos = line2.to + 1;\n    }\n    let line = cx.lineAt(pos);\n    if (overrideIndentation && from == null)\n      IndentedFrom.set(cx.state, line.from);\n    return this.streamParser.indent(state, /^\\s*(.*)/.exec(line.text)[1], cx);\n  }\n  get allowsNesting() {\n    return false;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Text",
          "declaration": {
            "name": "Text",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "findClusterBreak",
          "declaration": {
            "name": "findClusterBreak",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "codePointAt",
          "declaration": {
            "name": "codePointAt",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "fromCodePoint",
          "declaration": {
            "name": "fromCodePoint",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "codePointSize",
          "declaration": {
            "name": "codePointSize",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "MapMode",
          "declaration": {
            "name": "MapMode",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "ChangeDesc",
          "declaration": {
            "name": "ChangeDesc",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "ChangeSet",
          "declaration": {
            "name": "ChangeSet",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "EditorSelection",
          "declaration": {
            "name": "EditorSelection",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "Facet",
          "declaration": {
            "name": "Facet",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "StateField",
          "declaration": {
            "name": "StateField",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "Prec",
          "declaration": {
            "name": "Prec",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "Compartment",
          "declaration": {
            "name": "Compartment",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "Annotation",
          "declaration": {
            "name": "Annotation",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "StateEffect",
          "declaration": {
            "name": "StateEffect",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "Transaction",
          "declaration": {
            "name": "Transaction",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "CharCategory",
          "declaration": {
            "name": "CharCategory",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "EditorState",
          "declaration": {
            "name": "EditorState",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "combineConfig",
          "declaration": {
            "name": "combineConfig",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "RangeValue",
          "declaration": {
            "name": "RangeValue",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "RangeSet",
          "declaration": {
            "name": "RangeSet",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "RangeSetBuilder",
          "declaration": {
            "name": "RangeSetBuilder",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "countColumn",
          "declaration": {
            "name": "countColumn",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "WidgetType",
          "declaration": {
            "name": "WidgetType",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "Decoration",
          "declaration": {
            "name": "Decoration",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "Direction",
          "declaration": {
            "name": "Direction",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "logException",
          "declaration": {
            "name": "logException",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "ViewPlugin",
          "declaration": {
            "name": "ViewPlugin",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "EditorView",
          "declaration": {
            "name": "EditorView",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "keymap",
          "declaration": {
            "name": "keymap",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "runScopeHandlers",
          "declaration": {
            "name": "runScopeHandlers",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "drawSelection",
          "declaration": {
            "name": "drawSelection",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "dropCursor",
          "declaration": {
            "name": "dropCursor",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "highlightSpecialChars",
          "declaration": {
            "name": "highlightSpecialChars",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "highlightActiveLine",
          "declaration": {
            "name": "highlightActiveLine",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "placeholder",
          "declaration": {
            "name": "placeholder",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "rectangularSelection",
          "declaration": {
            "name": "rectangularSelection",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "crosshairCursor",
          "declaration": {
            "name": "crosshairCursor",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "showTooltip",
          "declaration": {
            "name": "showTooltip",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "hoverTooltip",
          "declaration": {
            "name": "hoverTooltip",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "getTooltip",
          "declaration": {
            "name": "getTooltip",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "getPanel",
          "declaration": {
            "name": "getPanel",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "showPanel",
          "declaration": {
            "name": "showPanel",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "lineNumbers",
          "declaration": {
            "name": "lineNumbers",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "highlightActiveLineGutter",
          "declaration": {
            "name": "highlightActiveLineGutter",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "DefaultBufferLength",
          "declaration": {
            "name": "DefaultBufferLength",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "NodeProp",
          "declaration": {
            "name": "NodeProp",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "NodeType",
          "declaration": {
            "name": "NodeType",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "NodeSet",
          "declaration": {
            "name": "NodeSet",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "IterMode",
          "declaration": {
            "name": "IterMode",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "Tree",
          "declaration": {
            "name": "Tree",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "NodeWeakMap",
          "declaration": {
            "name": "NodeWeakMap",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "Parser",
          "declaration": {
            "name": "Parser",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "parseMixed",
          "declaration": {
            "name": "parseMixed",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "Tag",
          "declaration": {
            "name": "Tag",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "styleTags",
          "declaration": {
            "name": "styleTags",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "tags",
          "declaration": {
            "name": "tags",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "languageDataProp",
          "declaration": {
            "name": "languageDataProp",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "defineLanguageFacet",
          "declaration": {
            "name": "defineLanguageFacet",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "sublanguageProp",
          "declaration": {
            "name": "sublanguageProp",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "Language",
          "declaration": {
            "name": "Language",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "LRLanguage",
          "declaration": {
            "name": "LRLanguage",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "syntaxTree",
          "declaration": {
            "name": "syntaxTree",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "ParseContext",
          "declaration": {
            "name": "ParseContext",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "LanguageSupport",
          "declaration": {
            "name": "LanguageSupport",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "LanguageDescription",
          "declaration": {
            "name": "LanguageDescription",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "indentUnit",
          "declaration": {
            "name": "indentUnit",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "getIndentUnit",
          "declaration": {
            "name": "getIndentUnit",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "indentString",
          "declaration": {
            "name": "indentString",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "getIndentation",
          "declaration": {
            "name": "getIndentation",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "IndentContext",
          "declaration": {
            "name": "IndentContext",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "indentNodeProp",
          "declaration": {
            "name": "indentNodeProp",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "delimitedIndent",
          "declaration": {
            "name": "delimitedIndent",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "flatIndent",
          "declaration": {
            "name": "flatIndent",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "continuedIndent",
          "declaration": {
            "name": "continuedIndent",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "indentOnInput",
          "declaration": {
            "name": "indentOnInput",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "foldService",
          "declaration": {
            "name": "foldService",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "foldNodeProp",
          "declaration": {
            "name": "foldNodeProp",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "foldInside",
          "declaration": {
            "name": "foldInside",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "foldKeymap",
          "declaration": {
            "name": "foldKeymap",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "foldGutter",
          "declaration": {
            "name": "foldGutter",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "HighlightStyle",
          "declaration": {
            "name": "HighlightStyle",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "syntaxHighlighting",
          "declaration": {
            "name": "syntaxHighlighting",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "defaultHighlightStyle",
          "declaration": {
            "name": "defaultHighlightStyle",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "bracketMatching",
          "declaration": {
            "name": "bracketMatching",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "bracketMatchingHandle",
          "declaration": {
            "name": "bracketMatchingHandle",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "matchBrackets",
          "declaration": {
            "name": "matchBrackets",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        },
        {
          "kind": "js",
          "name": "StreamLanguage",
          "declaration": {
            "name": "StreamLanguage",
            "module": "cdn/chunks/chunk.JEYYOM6X.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.LS4NHTQA.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "FrameIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.border = false;\n    this.mainFilename = \"\";\n    this.headFilename = \"\";\n    this.headerFilename = \"\";\n    this.footerFilename = \"\";\n    this.url = \"\";\n    this.srcDoc = \"\";\n  }\n  async firstUpdated(_changedProperties) {\n    const head = await this.getCode(this.headFilename, \"head\");\n    const header = await this.getCode(this.headerFilename, \"header\");\n    const main = await this.getCode(this.mainFilename, \"main\");\n    const footer = await this.getCode(this.footerFilename, \"footer\");\n    if (head || header || main || footer) {\n      this.srcDoc = this.getTemplate({ head, header, main, footer });\n    }\n  }\n  getTemplate(options) {\n    return templateHTML(options);\n  }\n  render() {\n    return x`\n      <div part=\"base\" class=\"frame-it\">\n        ${this.srcDoc ? x`\n            <iframe\n              class=\"frame\"\n              allowfullscreen\n              name=\"frame\"\n              sandbox=\"allow-downloads allow-forms allow-modals allow-popups allow-same-origin allow-scripts allow-top-navigation\"\n              srcDoc=${this.srcDoc}>\n            </iframe>\n            ` : x`\n            <iframe\n              class=\"frame\"\n              allowfullscreen\n              name=\"frame\"\n              sandbox=\"allow-downloads allow-forms allow-modals allow-popups allow-same-origin allow-scripts allow-top-navigation\"\n              src=${this.url}>\n            </iframe>\n            `}       \n      </div>\n    `;\n  }\n  resizeIFrameHeight(height) {\n    const win = this.frameElement.contentWindow;\n    if (win) {\n      this.frameElement.style.height = `${height - 2}px`;\n    }\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FrameIt",
          "declaration": {
            "name": "FrameIt",
            "module": "cdn/chunks/chunk.LS4NHTQA.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.MJEIBEUT.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "AnswerForm",
          "default": "_AnswerForm"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnswerForm",
          "declaration": {
            "name": "AnswerForm",
            "module": "cdn/chunks/chunk.MJEIBEUT.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.NCBB2BVW.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "e3"
        },
        {
          "kind": "variable",
          "name": "component_styles_default",
          "default": "i`\n  :host {\n    box-sizing: border-box;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n\n  [hidden] {\n    display: none !important;\n  }\n`"
        },
        {
          "kind": "variable",
          "name": "LocalizeController",
          "default": "class {\n  constructor(host) {\n    this.host = host;\n    this.host.addController(this);\n  }\n  hostConnected() {\n    connectedElements.add(this.host);\n  }\n  hostDisconnected() {\n    connectedElements.delete(this.host);\n  }\n  dir() {\n    return `${this.host.dir || documentDirection}`.toLowerCase();\n  }\n  lang() {\n    return `${this.host.lang || documentLanguage}`.toLowerCase();\n  }\n  getTranslationData(lang) {\n    var _a, _b;\n    const locale = new Intl.Locale(lang.replace(/_/g, \"-\"));\n    const language = locale === null || locale === void 0 ? void 0 : locale.language.toLowerCase();\n    const region = (_b = (_a = locale === null || locale === void 0 ? void 0 : locale.region) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : \"\";\n    const primary = translations.get(`${language}-${region}`);\n    const secondary = translations.get(language);\n    return { locale, language, region, primary, secondary };\n  }\n  exists(key, options) {\n    var _a;\n    const { primary, secondary } = this.getTranslationData((_a = options.lang) !== null && _a !== void 0 ? _a : this.lang());\n    options = Object.assign({ includeFallback: false }, options);\n    if (primary && primary[key] || secondary && secondary[key] || options.includeFallback && fallback && fallback[key]) {\n      return true;\n    }\n    return false;\n  }\n  term(key, ...args) {\n    const { primary, secondary } = this.getTranslationData(this.lang());\n    let term;\n    if (primary && primary[key]) {\n      term = primary[key];\n    } else if (secondary && secondary[key]) {\n      term = secondary[key];\n    } else if (fallback && fallback[key]) {\n      term = fallback[key];\n    } else {\n      console.error(`No translation found for: ${String(key)}`);\n      return String(key);\n    }\n    if (typeof term === \"function\") {\n      return term(...args);\n    }\n    return term;\n  }\n  date(dateToFormat, options) {\n    dateToFormat = new Date(dateToFormat);\n    return new Intl.DateTimeFormat(this.lang(), options).format(dateToFormat);\n  }\n  number(numberToFormat, options) {\n    numberToFormat = Number(numberToFormat);\n    return isNaN(numberToFormat) ? \"\" : new Intl.NumberFormat(this.lang(), options).format(numberToFormat);\n  }\n  relativeTime(value, unit, options) {\n    return new Intl.RelativeTimeFormat(this.lang(), options).format(value, unit);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "LocalizeController2",
          "default": "class extends LocalizeController {\n}"
        },
        {
          "kind": "function",
          "name": "__spreadValues",
          "parameters": [
            {
              "name": "a2"
            },
            {
              "name": "b2"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__spreadProps",
          "parameters": [
            {
              "name": "a2"
            },
            {
              "name": "b2"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__decorateClass",
          "parameters": [
            {
              "name": "decorators"
            },
            {
              "name": "target"
            },
            {
              "name": "key"
            },
            {
              "name": "kind"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "ShoelaceElement",
          "default": "class extends s {\n  constructor() {\n    super();\n    Object.entries(this.constructor.dependencies).forEach(([name, component]) => {\n      this.constructor.define(name, component);\n    });\n  }\n  emit(name, options) {\n    const event = new CustomEvent(name, __spreadValues({\n      bubbles: true,\n      cancelable: false,\n      composed: true,\n      detail: {}\n    }, options));\n    this.dispatchEvent(event);\n    return event;\n  }\n  /* eslint-enable */\n  static define(name, elementConstructor = this, options = {}) {\n    const currentlyRegisteredConstructor = customElements.get(name);\n    if (!currentlyRegisteredConstructor) {\n      customElements.define(name, class extends elementConstructor {\n      }, options);\n      return;\n    }\n    let newVersion = \" (unknown version)\";\n    let existingVersion = newVersion;\n    if (\"version\" in elementConstructor && elementConstructor.version) {\n      newVersion = \" v\" + elementConstructor.version;\n    }\n    if (\"version\" in currentlyRegisteredConstructor && currentlyRegisteredConstructor.version) {\n      existingVersion = \" v\" + currentlyRegisteredConstructor.version;\n    }\n    if (newVersion && existingVersion && newVersion === existingVersion) {\n      return;\n    }\n    console.warn(\n      `Attempted to register <${name}>${newVersion}, but <${name}>${existingVersion} has already been registered.`\n    );\n  }\n}"
        },
        {
          "kind": "class",
          "description": "",
          "name": "anonymous_0",
          "superclass": {
            "name": "elementConstructor",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          },
          "tagName": "name",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "SlSpinner",
          "default": "class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.localize = new LocalizeController2(this);\n  }\n  render() {\n    return x`\n      <svg part=\"base\" class=\"spinner\" role=\"progressbar\" aria-label=${this.localize.term(\"loading\")}>\n        <circle class=\"spinner__track\"></circle>\n        <circle class=\"spinner__indicator\"></circle>\n      </svg>\n    `;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "FormControlController",
          "default": "class {\n  constructor(host, options) {\n    this.handleFormData = (event) => {\n      const disabled = this.options.disabled(this.host);\n      const name = this.options.name(this.host);\n      const value = this.options.value(this.host);\n      const isButton = this.host.tagName.toLowerCase() === \"sl-button\";\n      if (this.host.isConnected && !disabled && !isButton && typeof name === \"string\" && name.length > 0 && typeof value !== \"undefined\") {\n        if (Array.isArray(value)) {\n          value.forEach((val) => {\n            event.formData.append(name, val.toString());\n          });\n        } else {\n          event.formData.append(name, value.toString());\n        }\n      }\n    };\n    this.handleFormSubmit = (event) => {\n      var _a;\n      const disabled = this.options.disabled(this.host);\n      const reportValidity = this.options.reportValidity;\n      if (this.form && !this.form.noValidate) {\n        (_a = formCollections.get(this.form)) == null ? void 0 : _a.forEach((control) => {\n          this.setUserInteracted(control, true);\n        });\n      }\n      if (this.form && !this.form.noValidate && !disabled && !reportValidity(this.host)) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n      }\n    };\n    this.handleFormReset = () => {\n      this.options.setValue(this.host, this.options.defaultValue(this.host));\n      this.setUserInteracted(this.host, false);\n      interactions.set(this.host, []);\n    };\n    this.handleInteraction = (event) => {\n      const emittedEvents = interactions.get(this.host);\n      if (!emittedEvents.includes(event.type)) {\n        emittedEvents.push(event.type);\n      }\n      if (emittedEvents.length === this.options.assumeInteractionOn.length) {\n        this.setUserInteracted(this.host, true);\n      }\n    };\n    this.checkFormValidity = () => {\n      if (this.form && !this.form.noValidate) {\n        const elements = this.form.querySelectorAll(\"*\");\n        for (const element of elements) {\n          if (typeof element.checkValidity === \"function\") {\n            if (!element.checkValidity()) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    };\n    this.reportFormValidity = () => {\n      if (this.form && !this.form.noValidate) {\n        const elements = this.form.querySelectorAll(\"*\");\n        for (const element of elements) {\n          if (typeof element.reportValidity === \"function\") {\n            if (!element.reportValidity()) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    };\n    (this.host = host).addController(this);\n    this.options = __spreadValues({\n      form: (input) => {\n        const formId = input.form;\n        if (formId) {\n          const root = input.getRootNode();\n          const form = root.getElementById(formId);\n          if (form) {\n            return form;\n          }\n        }\n        return input.closest(\"form\");\n      },\n      name: (input) => input.name,\n      value: (input) => input.value,\n      defaultValue: (input) => input.defaultValue,\n      disabled: (input) => {\n        var _a;\n        return (_a = input.disabled) != null ? _a : false;\n      },\n      reportValidity: (input) => typeof input.reportValidity === \"function\" ? input.reportValidity() : true,\n      checkValidity: (input) => typeof input.checkValidity === \"function\" ? input.checkValidity() : true,\n      setValue: (input, value) => input.value = value,\n      assumeInteractionOn: [\"sl-input\"]\n    }, options);\n  }\n  hostConnected() {\n    const form = this.options.form(this.host);\n    if (form) {\n      this.attachForm(form);\n    }\n    interactions.set(this.host, []);\n    this.options.assumeInteractionOn.forEach((event) => {\n      this.host.addEventListener(event, this.handleInteraction);\n    });\n  }\n  hostDisconnected() {\n    this.detachForm();\n    interactions.delete(this.host);\n    this.options.assumeInteractionOn.forEach((event) => {\n      this.host.removeEventListener(event, this.handleInteraction);\n    });\n  }\n  hostUpdated() {\n    const form = this.options.form(this.host);\n    if (!form) {\n      this.detachForm();\n    }\n    if (form && this.form !== form) {\n      this.detachForm();\n      this.attachForm(form);\n    }\n    if (this.host.hasUpdated) {\n      this.setValidity(this.host.validity.valid);\n    }\n  }\n  attachForm(form) {\n    if (form) {\n      this.form = form;\n      if (formCollections.has(this.form)) {\n        formCollections.get(this.form).add(this.host);\n      } else {\n        formCollections.set(this.form, /* @__PURE__ */ new Set([this.host]));\n      }\n      this.form.addEventListener(\"formdata\", this.handleFormData);\n      this.form.addEventListener(\"submit\", this.handleFormSubmit);\n      this.form.addEventListener(\"reset\", this.handleFormReset);\n      if (!reportValidityOverloads.has(this.form)) {\n        reportValidityOverloads.set(this.form, this.form.reportValidity);\n        this.form.reportValidity = () => this.reportFormValidity();\n      }\n      if (!checkValidityOverloads.has(this.form)) {\n        checkValidityOverloads.set(this.form, this.form.checkValidity);\n        this.form.checkValidity = () => this.checkFormValidity();\n      }\n    } else {\n      this.form = void 0;\n    }\n  }\n  detachForm() {\n    if (!this.form)\n      return;\n    const formCollection = formCollections.get(this.form);\n    if (!formCollection) {\n      return;\n    }\n    formCollection.delete(this.host);\n    if (formCollection.size <= 0) {\n      this.form.removeEventListener(\"formdata\", this.handleFormData);\n      this.form.removeEventListener(\"submit\", this.handleFormSubmit);\n      this.form.removeEventListener(\"reset\", this.handleFormReset);\n      if (reportValidityOverloads.has(this.form)) {\n        this.form.reportValidity = reportValidityOverloads.get(this.form);\n        reportValidityOverloads.delete(this.form);\n      }\n      if (checkValidityOverloads.has(this.form)) {\n        this.form.checkValidity = checkValidityOverloads.get(this.form);\n        checkValidityOverloads.delete(this.form);\n      }\n      this.form = void 0;\n    }\n  }\n  setUserInteracted(el, hasInteracted) {\n    if (hasInteracted) {\n      userInteractedControls.add(el);\n    } else {\n      userInteractedControls.delete(el);\n    }\n    el.requestUpdate();\n  }\n  doAction(type, submitter) {\n    if (this.form) {\n      const button = document.createElement(\"button\");\n      button.type = type;\n      button.style.position = \"absolute\";\n      button.style.width = \"0\";\n      button.style.height = \"0\";\n      button.style.clipPath = \"inset(50%)\";\n      button.style.overflow = \"hidden\";\n      button.style.whiteSpace = \"nowrap\";\n      if (submitter) {\n        button.name = submitter.name;\n        button.value = submitter.value;\n        [\"formaction\", \"formenctype\", \"formmethod\", \"formnovalidate\", \"formtarget\"].forEach((attr) => {\n          if (submitter.hasAttribute(attr)) {\n            button.setAttribute(attr, submitter.getAttribute(attr));\n          }\n        });\n      }\n      this.form.append(button);\n      button.click();\n      button.remove();\n    }\n  }\n  /** Returns the associated `<form>` element, if one exists. */\n  getForm() {\n    var _a;\n    return (_a = this.form) != null ? _a : null;\n  }\n  /** Resets the form, restoring all the control to their default value */\n  reset(submitter) {\n    this.doAction(\"reset\", submitter);\n  }\n  /** Submits the form, triggering validation and form data injection. */\n  submit(submitter) {\n    this.doAction(\"submit\", submitter);\n  }\n  /**\n   * Synchronously sets the form control's validity. Call this when you know the future validity but need to update\n   * the host element immediately, i.e. before Lit updates the component in the next update.\n   */\n  setValidity(isValid) {\n    const host = this.host;\n    const hasInteracted = Boolean(userInteractedControls.has(host));\n    const required = Boolean(host.required);\n    host.toggleAttribute(\"data-required\", required);\n    host.toggleAttribute(\"data-optional\", !required);\n    host.toggleAttribute(\"data-invalid\", !isValid);\n    host.toggleAttribute(\"data-valid\", isValid);\n    host.toggleAttribute(\"data-user-invalid\", !isValid && hasInteracted);\n    host.toggleAttribute(\"data-user-valid\", isValid && hasInteracted);\n  }\n  /**\n   * Updates the form control's validity based on the current value of `host.validity.valid`. Call this when anything\n   * that affects constraint validation changes so the component receives the correct validity states.\n   */\n  updateValidity() {\n    const host = this.host;\n    this.setValidity(host.validity.valid);\n  }\n  /**\n   * Dispatches a non-bubbling, cancelable custom event of type `sl-invalid`.\n   * If the `sl-invalid` event will be cancelled then the original `invalid`\n   * event (which may have been passed as argument) will also be cancelled.\n   * If no original `invalid` event has been passed then the `sl-invalid`\n   * event will be cancelled before being dispatched.\n   */\n  emitInvalidEvent(originalInvalidEvent) {\n    const slInvalidEvent = new CustomEvent(\"sl-invalid\", {\n      bubbles: false,\n      composed: false,\n      cancelable: true,\n      detail: {}\n    });\n    if (!originalInvalidEvent) {\n      slInvalidEvent.preventDefault();\n    }\n    if (!this.host.dispatchEvent(slInvalidEvent)) {\n      originalInvalidEvent == null ? void 0 : originalInvalidEvent.preventDefault();\n    }\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "name"
        },
        {
          "kind": "variable",
          "name": "HasSlotController",
          "default": "class {\n  constructor(host, ...slotNames) {\n    this.slotNames = [];\n    this.handleSlotChange = (event) => {\n      const slot = event.target;\n      if (this.slotNames.includes(\"[default]\") && !slot.name || slot.name && this.slotNames.includes(slot.name)) {\n        this.host.requestUpdate();\n      }\n    };\n    (this.host = host).addController(this);\n    this.slotNames = slotNames;\n  }\n  hasDefaultSlot() {\n    return [...this.host.childNodes].some((node) => {\n      if (node.nodeType === node.TEXT_NODE && node.textContent.trim() !== \"\") {\n        return true;\n      }\n      if (node.nodeType === node.ELEMENT_NODE) {\n        const el = node;\n        const tagName = el.tagName.toLowerCase();\n        if (tagName === \"sl-visually-hidden\") {\n          return false;\n        }\n        if (!el.hasAttribute(\"slot\")) {\n          return true;\n        }\n      }\n      return false;\n    });\n  }\n  hasNamedSlot(name) {\n    return this.host.querySelector(`:scope > [slot=\"${name}\"]`) !== null;\n  }\n  test(slotName) {\n    return slotName === \"[default]\" ? this.hasDefaultSlot() : this.hasNamedSlot(slotName);\n  }\n  hostConnected() {\n    this.host.shadowRoot.addEventListener(\"slotchange\", this.handleSlotChange);\n  }\n  hostDisconnected() {\n    this.host.shadowRoot.removeEventListener(\"slotchange\", this.handleSlotChange);\n  }\n}"
        },
        {
          "kind": "function",
          "name": "getTextContent",
          "parameters": [
            {
              "name": "slot"
            }
          ]
        },
        {
          "kind": "function",
          "name": "watch",
          "parameters": [
            {
              "name": "propertyName"
            },
            {
              "name": "options"
            }
          ]
        },
        {
          "kind": "function",
          "name": "f",
          "parameters": [
            {
              "name": "o3"
            }
          ]
        },
        {
          "kind": "function",
          "name": "m",
          "parameters": [
            {
              "name": "o3"
            },
            {
              "name": "t3",
              "default": "u"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "SlIcon",
          "default": "class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.initialRender = false;\n    this.svg = null;\n    this.label = \"\";\n    this.library = \"default\";\n  }\n  /** Given a URL, this function returns the resulting SVG element or an appropriate error symbol. */\n  async resolveIcon(url, library2) {\n    var _a;\n    let fileData;\n    if (library2 == null ? void 0 : library2.spriteSheet) {\n      return x`<svg part=\"svg\">\n        <use part=\"use\" href=\"${url}\"></use>\n      </svg>`;\n    }\n    try {\n      fileData = await fetch(url, { mode: \"cors\" });\n      if (!fileData.ok)\n        return fileData.status === 410 ? CACHEABLE_ERROR : RETRYABLE_ERROR;\n    } catch (e6) {\n      return RETRYABLE_ERROR;\n    }\n    try {\n      const div = document.createElement(\"div\");\n      div.innerHTML = await fileData.text();\n      const svg = div.firstElementChild;\n      if (((_a = svg == null ? void 0 : svg.tagName) == null ? void 0 : _a.toLowerCase()) !== \"svg\")\n        return CACHEABLE_ERROR;\n      if (!parser)\n        parser = new DOMParser();\n      const doc = parser.parseFromString(svg.outerHTML, \"text/html\");\n      const svgEl = doc.body.querySelector(\"svg\");\n      if (!svgEl)\n        return CACHEABLE_ERROR;\n      svgEl.part.add(\"svg\");\n      return document.adoptNode(svgEl);\n    } catch (e6) {\n      return CACHEABLE_ERROR;\n    }\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    watchIcon(this);\n  }\n  firstUpdated() {\n    this.initialRender = true;\n    this.setIcon();\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    unwatchIcon(this);\n  }\n  getIconSource() {\n    const library2 = getIconLibrary(this.library);\n    if (this.name && library2) {\n      return {\n        url: library2.resolver(this.name),\n        fromLibrary: true\n      };\n    }\n    return {\n      url: this.src,\n      fromLibrary: false\n    };\n  }\n  handleLabelChange() {\n    const hasLabel = typeof this.label === \"string\" && this.label.length > 0;\n    if (hasLabel) {\n      this.setAttribute(\"role\", \"img\");\n      this.setAttribute(\"aria-label\", this.label);\n      this.removeAttribute(\"aria-hidden\");\n    } else {\n      this.removeAttribute(\"role\");\n      this.removeAttribute(\"aria-label\");\n      this.setAttribute(\"aria-hidden\", \"true\");\n    }\n  }\n  async setIcon() {\n    var _a;\n    const { url, fromLibrary } = this.getIconSource();\n    const library2 = fromLibrary ? getIconLibrary(this.library) : void 0;\n    if (!url) {\n      this.svg = null;\n      return;\n    }\n    let iconResolver = iconCache.get(url);\n    if (!iconResolver) {\n      iconResolver = this.resolveIcon(url, library2);\n      iconCache.set(url, iconResolver);\n    }\n    if (!this.initialRender) {\n      return;\n    }\n    const svg = await iconResolver;\n    if (svg === RETRYABLE_ERROR) {\n      iconCache.delete(url);\n    }\n    if (url !== this.getIconSource().url) {\n      return;\n    }\n    if (e4(svg)) {\n      this.svg = svg;\n      return;\n    }\n    switch (svg) {\n      case RETRYABLE_ERROR:\n      case CACHEABLE_ERROR:\n        this.svg = null;\n        this.emit(\"sl-error\");\n        break;\n      default:\n        this.svg = svg.cloneNode(true);\n        (_a = library2 == null ? void 0 : library2.mutator) == null ? void 0 : _a.call(library2, this.svg);\n        this.emit(\"sl-load\");\n    }\n  }\n  render() {\n    return this.svg;\n  }\n}"
        },
        {
          "kind": "function",
          "name": "o",
          "parameters": [
            {
              "name": "t3"
            }
          ]
        },
        {
          "kind": "function",
          "name": "s2",
          "parameters": [
            {
              "name": "t3"
            },
            {
              "name": "r2"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "n2"
        },
        {
          "kind": "function",
          "name": "o2",
          "parameters": [
            {
              "name": "o3"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "name",
          "declaration": {
            "name": "anonymous_0",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "component_styles_default",
          "declaration": {
            "name": "component_styles_default",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "LocalizeController",
          "declaration": {
            "name": "LocalizeController2",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "__spreadValues",
          "declaration": {
            "name": "__spreadValues",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "__spreadProps",
          "declaration": {
            "name": "__spreadProps",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "__decorateClass",
          "declaration": {
            "name": "__decorateClass",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "ShoelaceElement",
          "declaration": {
            "name": "ShoelaceElement",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "SlSpinner",
          "declaration": {
            "name": "SlSpinner",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "FormControlController",
          "declaration": {
            "name": "FormControlController",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "HasSlotController",
          "declaration": {
            "name": "HasSlotController",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "getTextContent",
          "declaration": {
            "name": "getTextContent",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "f",
          "declaration": {
            "name": "f",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "m",
          "declaration": {
            "name": "m",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "SlIcon",
          "declaration": {
            "name": "SlIcon",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "e",
          "declaration": {
            "name": "e3",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "s",
          "declaration": {
            "name": "s2",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "n",
          "declaration": {
            "name": "n2",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        },
        {
          "kind": "js",
          "name": "o",
          "declaration": {
            "name": "o2",
            "module": "cdn/chunks/chunk.NCBB2BVW.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.NXTL5ZIL.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ClockIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this._state = 3 /* none */;\n    this._time = getTime();\n    this.date = false;\n    this.time = false;\n    this.size = \"small\";\n  }\n  firstUpdated(_changedProperties) {\n    const that = this;\n    setInterval(() => that.setClock(), 1e3);\n    if (this.hasAttribute(\"time\") && this.hasAttribute(\"date\")) {\n      this._state = 1 /* both */;\n    } else {\n      if (this.hasAttribute(\"time\")) {\n        this._state = 0 /* time */;\n      } else {\n        if (this.hasAttribute(\"date\")) {\n          this._state = 2 /* date */;\n        } else {\n          this._state = 3 /* none */;\n        }\n      }\n    }\n  }\n  handleClickButton() {\n    this._state = (this._state + 1) % 4;\n    switch (this._state) {\n      case 0 /* time */:\n        this.date = false;\n        this.time = true;\n        break;\n      case 1 /* both */:\n        this.date = true;\n        this.time = true;\n        break;\n      case 2 /* date */:\n        this.date = true;\n        this.time = false;\n        break;\n      case 3 /* none */:\n        this.date = false;\n        this.time = false;\n        break;\n    }\n  }\n  render() {\n    const size = [\"small\", \"medium\", \"large\"].includes(this.size) ? this.size : \"small\";\n    return x`\n      <sl-button part=\"base\" size=${size} @click=${() => this.handleClickButton()}>\n        <span class=\"clock__date\">${this.date ? x`${getDate()}` : x``}</span>\n        ${svgIcon(\"mdi-calendar-clock-outline\")}\n        <span class=\"clock__time\">${this.time ? x`${this._time}` : x``}</span>\n      </sl-button>\n    `;\n  }\n  setClock() {\n    this._time = getTime();\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ClockIt",
          "declaration": {
            "name": "ClockIt",
            "module": "cdn/chunks/chunk.NXTL5ZIL.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.PGI7SQMR.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.SEFNDA4Z.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ToolbarIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.fixed = false;\n    this.placement = \"top\";\n  }\n  render() {\n    const classes = {\n      toolbar: true,\n      toolbar__top: this.fixed && this.placement === \"top\",\n      toolbar__bottom: this.fixed && this.placement === \"bottom\"\n    };\n    return x`\n      <div part=\"base\" class=${e2(classes)}>\n        <div part=\"start\" class=\"toolbar__start\">\n          <slot name=\"start\"></slot>\n        </div>\n        <div part=\"center\" class=\"toolbar__center\">\n          <slot name=\"center\"></slot>\n        </div>\n        <div part=\"end\" class=\"toolbar__end\">\n          <slot name=\"end\"></slot>\n        </div>\n      </div>\n    `;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToolbarIt",
          "declaration": {
            "name": "ToolbarIt",
            "module": "cdn/chunks/chunk.SEFNDA4Z.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.SJ4RTGRS.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "SlIconButton",
          "default": "class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.hasFocus = false;\n    this.label = \"\";\n    this.disabled = false;\n  }\n  handleBlur() {\n    this.hasFocus = false;\n    this.emit(\"sl-blur\");\n  }\n  handleFocus() {\n    this.hasFocus = true;\n    this.emit(\"sl-focus\");\n  }\n  handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  /** Simulates a click on the icon button. */\n  click() {\n    this.button.click();\n  }\n  /** Sets focus on the icon button. */\n  focus(options) {\n    this.button.focus(options);\n  }\n  /** Removes focus from the icon button. */\n  blur() {\n    this.button.blur();\n  }\n  render() {\n    const isLink = this.href ? true : false;\n    const tag = isLink ? s`a` : s`button`;\n    return n2`\n      <${tag}\n        part=\"base\"\n        class=${e2({\n      \"icon-button\": true,\n      \"icon-button--disabled\": !isLink && this.disabled,\n      \"icon-button--focused\": this.hasFocus\n    })}\n        ?disabled=${o(isLink ? void 0 : this.disabled)}\n        type=${o(isLink ? void 0 : \"button\")}\n        href=${o(isLink ? this.href : void 0)}\n        target=${o(isLink ? this.target : void 0)}\n        download=${o(isLink ? this.download : void 0)}\n        rel=${o(isLink && this.target ? \"noreferrer noopener\" : void 0)}\n        role=${o(isLink ? void 0 : \"button\")}\n        aria-disabled=${this.disabled ? \"true\" : \"false\"}\n        aria-label=\"${this.label}\"\n        tabindex=${this.disabled ? \"-1\" : \"0\"}\n        @blur=${this.handleBlur}\n        @focus=${this.handleFocus}\n        @click=${this.handleClick}\n      >\n        <sl-icon\n          class=\"icon-button__icon\"\n          name=${o(this.name)}\n          library=${o(this.library)}\n          src=${o(this.src)}\n          aria-hidden=\"true\"\n        ></sl-icon>\n      </${tag}>\n    `;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "CodeIt",
          "default": "class extends AnswerForm {\n  constructor() {\n    super(...arguments);\n    this._language = \"text\";\n    this._placeholder = \"F1: afficher/masquer les barres d'outils et d'informations\";\n    this._readOnly = false;\n    this._indentSize = 2;\n    this._theme = \"dark\";\n    this.extensions = [];\n    this.initialCode = \"\";\n    this.languageConfig = new Compartment();\n    this.lineNumbersConfig = new Compartment();\n    this.placeholderConfig = new Compartment();\n    this.readOnlyConfig = new Compartment();\n    this.indentationConfig = new Compartment();\n    this.themeConfig = new Compartment();\n    this.cursorLine = 0;\n    this.cursorColumn = 0;\n    this.message = \"\";\n    this.lineNumbers = false;\n    this.codeFilename = \"\";\n    this.toolbar = false;\n  }\n  get indentSize() {\n    return this._indentSize;\n  }\n  set indentSize(value) {\n    if (value !== this._indentSize) {\n      this._indentSize = value;\n      if (this.theEditor) {\n        this.setIndentationExtension();\n      }\n    }\n  }\n  get language() {\n    return this._language;\n  }\n  set language(value) {\n    if (value !== this._language) {\n      this._language = value;\n      if (this.theEditor) {\n        this.setLanguageExtension();\n      }\n    }\n  }\n  get placeholder() {\n    return this._placeholder;\n  }\n  set placeholder(value) {\n    if (value !== this._placeholder) {\n      this._placeholder = value;\n      if (this.theEditor) {\n        this.setPlaceholderExtension();\n      }\n    }\n  }\n  get readOnly() {\n    return this._readOnly;\n  }\n  set readOnly(value) {\n    if (value !== this._readOnly) {\n      this._readOnly = value;\n      if (this.theEditor) {\n        this.setReadOnlyExtension();\n      }\n    }\n  }\n  get theme() {\n    return this._theme;\n  }\n  set theme(value) {\n    if (value !== this._theme) {\n      this._theme = value;\n      if (this.theEditor) {\n        this.setThemeExtension();\n      }\n    }\n  }\n  get value() {\n    let res = \"\";\n    if (this.theEditor) {\n      res = this.theEditor.state.doc.toString();\n    }\n    return res;\n  }\n  set value(value) {\n    if (value !== this.value) {\n      if (this.theEditor) {\n        this.theEditor.dispatch({\n          changes: {\n            from: 0,\n            to: this.theEditor.state.doc.length,\n            insert: value\n          }\n        });\n      }\n    }\n  }\n  /** Réponse de l'éditeur. */\n  get answer() {\n    return this.value;\n  }\n  createListeners() {\n    this.addEventListener(\"keyup-mouseup-it\", () => {\n      const theState = this.theEditor.state;\n      this.cursorLine = theState.doc.lineAt(theState.selection.main.head).number;\n      this.cursorColumn = theState.selection.main.head - theState.doc.lineAt(theState.selection.main.head).from;\n    });\n    this.addEventListener(\"toggle-toolbar-it\", () => {\n      this.toolbar = !this.toolbar;\n    });\n  }\n  async firstUpdated(_changedProperties) {\n    this.initialCode = await this.getCode(this.codeFilename, \"src\");\n    this.lineNumbers = !this.readOnly ? this.lineNumbers : true;\n    this.extensions = this.getInitialExtensions();\n    this.theEditor = new EditorView({\n      doc: \"\",\n      extensions: this.extensions,\n      parent: this.editorContainer,\n      root: this.shadowRoot\n    });\n    this.value = this.initialCode;\n    this.setLanguageExtension();\n    this.createListeners();\n  }\n  getHelpUrl() {\n    if (this.isValidLanguage(this.language)) {\n      return languages[this.language].helpUrl;\n    } else {\n      return `https://devdocs.io/${this.language}/`;\n    }\n  }\n  getInitialExtensions() {\n    const res = [\n      basicSetup,\n      EditorState.phrases.of(frenchPhrases),\n      eventHandler,\n      indentationMarkers({\n        highlightActiveBlock: false,\n        hideFirstIndent: true\n      }),\n      keymap.of(helpKeymap),\n      this.indentationConfig.of(indentUnit.of(indentString(this.indentSize))),\n      this.languageConfig.of([]),\n      this.lineNumbers ? this.lineNumbersConfig.of(lineNumbers()) : this.lineNumbersConfig.of(lineNumbers({ formatNumber: () => \"\" })),\n      EditorView.lineWrapping,\n      outlineNone,\n      this.placeholderConfig.of(placeholder(this.placeholder)),\n      this.readOnlyConfig.of(EditorState.readOnly.of(this.readOnly)),\n      this.themeConfig.of(this.theme === \"dark\" ? darkTheme : lightTheme),\n      EditorView.updateListener.of(() => {\n        this.emit(\"editor-change-it\");\n      })\n    ];\n    return res;\n  }\n  /** Liste des langages reconnus par l'éditeur */\n  get validLanguages() {\n    return Object.keys(languages);\n  }\n  handleCopyClipboard() {\n    navigator.clipboard.writeText(this.value).then(\n      () => {\n        this.notify(\"Contenu de l'\\xE9diteur copi\\xE9 dans le presse-papier.\", \"success\", \"mdi-check-circle-outline\");\n      },\n      () => {\n        this.notify(\"A priori, impossible d'\\xE9crire dans le presse-papier !\", \"danger\", \"mdi-alert-outline\");\n      }\n    );\n  }\n  handleLineNumbers() {\n    this.lineNumbers = !this.lineNumbers;\n    this.theEditor.dispatch({\n      effects: [\n        this.lineNumbers ? this.lineNumbersConfig.reconfigure(lineNumbers()) : this.lineNumbersConfig.reconfigure(lineNumbers({ formatNumber: () => \"\" }))\n      ]\n    });\n  }\n  handleSelectCommand(event) {\n    const value = event.detail.item.value;\n    (0, eval)(`${value}(this.editor)`);\n  }\n  handleSelectLanguage(event) {\n    const item = event.detail.item;\n    this.languageMenuItems.forEach((anItem) => {\n      anItem.checked = false;\n    });\n    item.checked = true;\n    this.language = item.value;\n    this.theEditor.dispatch({\n      effects: [\n        this.languageConfig.reconfigure(\n          languages[this.language].cm\n          /*cmLanguages[this.language]*/\n        ),\n        this.placeholderConfig.reconfigure(placeholder(this.placeholder))\n      ]\n    });\n  }\n  /** Teste si un langage fait partie des langages reconnus par l'éditeur. */\n  isValidLanguage(language) {\n    return Object.keys(languages).includes(language);\n  }\n  render() {\n    const classes = {\n      \"code-it\": true,\n      \"code-it__border\": this.toolbar,\n      light: this.theme === \"light\",\n      dark: this.theme !== \"light\"\n    };\n    return x`\n      <sl-resize-observer>\n        <div part=\"base\" class=${e2(classes)}>\n          <div part=\"toolbar\">${this.renderToolbar()}</div>\n          <div class=\"editor-base\">\n            <div part=\"editor\" class=\"editor\"></div>\n            <div part=\"menuBtn\" class=\"menu-button\">\n              ${!this.readOnly ? this.renderToolbarsButton() : this.renderToolsButtons()}\n            </div>\n          </div>\n          <div part=\"statusbar\">${this.renderStatusBar()}</div>\n        </div>\n      </sl-resize-observer>\n    `;\n  }\n  renderCommentButtons() {\n    return x`\n      <sl-button-group ?hidden=${this.readOnly} label=\"commentaires\">\n        <sl-tooltip content=\"commenter/décommenter la ligne\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      toggleComment(this.theEditor);\n    }}\n            ><svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              style=\"vertical-align:middle;display:inline-block\"\n              width=\"1em\"\n              height=\"1em\"\n              preserveAspectRatio=\"xMidYMid meet\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path fill=\"currentColor\" d=\"M5 5v14h2v2H3V3h4v2H5m15 6H7v2h13V7m0 4Z\" />\n            </svg>\n          </sl-button>\n        </sl-tooltip>\n        <sl-tooltip content=\"commenter/décommenter le bloc\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      toggleBlockComment(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-format-list-group\")}</sl-button\n          >\n        </sl-tooltip>\n      </sl-button-group>\n    `;\n  }\n  renderFeedbackButton() {\n    return x`<sl-tooltip content=\"interprétation\" hoist\n    ><sl-button\n      variant=\"neutral\"\n      size=\"small\"\n      @click=${() => {\n      this.emit(\"feedback-requested-it\");\n    }}\n      >${svgIcon(\"mdi-play\")}</sl-button\n    ></sl-tooltip\n  >`;\n  }\n  renderHistoryButtons() {\n    return x`\n      <sl-button-group ?hidden=${this.readOnly} label=\"historique\">\n        <sl-tooltip content=\"annuler toutes les modifications\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      this.reset();\n    }}\n            >${svgIcon(\"mdi-refresh\")}</sl-button\n          >\n        </sl-tooltip>\n        <sl-tooltip content=\"annuler la dernière modification\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      undo(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-undo\")}</sl-button\n          >\n        </sl-tooltip>\n        <sl-tooltip content=\"rétablir la dernière annulation\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      redo(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-redo\")}</sl-button\n          >\n        </sl-tooltip>\n      </sl-button-group>\n    `;\n  }\n  renderIndentationButtons() {\n    return x`\n      <sl-button-group ?hidden=${this.readOnly} label=\"indentation\">\n        <sl-tooltip content=\"indenter\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      indentMore(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-format-indent-increase\")}</sl-button\n          >\n        </sl-tooltip>\n        <sl-tooltip content=\"désindenter\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      indentLess(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-format-indent-decrease\")}</sl-button\n          >\n        </sl-tooltip>\n      </sl-button-group>\n    `;\n  }\n  renderKeymapButton() {\n    return x`\n      <sl-dropdown stay-open-on-select hoist ?hidden=${this.readOnly}>\n        <sl-button slot=\"trigger\" size=\"small\" caret>${svgIcon(\"mdi-keyboard\")}</sl-button>\n        <sl-menu class=\"dropdown__shortcuts\">\n          <sl-menu-item disabled>\n            Commande\n            <div slot=\"suffix\">Raccourci clavier</div>\n          </sl-menu-item>\n          <sl-divider></sl-divider>\n          ${CodeIt.keymap.map(\n      (map) => x`\n                <sl-menu-item @click=${() => {\n        map.run(this.theEditor);\n      }}>\n                  ${map.name}\n                  <div slot=\"suffix\">${map.key}</div>\n                </sl-menu-item>\n              `\n    )}\n          <sl-divider></sl-divider>\n            <sl-menu-item disabled>\n              Commande\n              <div slot=\"suffix\">Raccourci clavier</div>\n            </sl-menu-item>\n        </sl-menu>\n      </sl-dropdown>\n    `;\n  }\n  renderMiscButtons() {\n    return x`\n      <sl-button-group label=\"langage et raccourcis clavier\">\n        <sl-tooltip content=\"choisir un langage\" hoist>\n          <sl-dropdown hoist>\n            <sl-button slot=\"trigger\" size=\"small\" caret\n              >${this.language ? o2(languages[this.language].logo) : x`${svgIcon(\"mdi-help\")}`}</sl-button\n            >\n            <sl-menu class=\"dropdown__languages\" @sl-select=${this.handleSelectLanguage}>\n              ${Object.keys(languages).map(\n      (language) => x`<sl-menu-item type=\"checkbox\" value=\"${language}\" ?checked=${this.language === language}\n                    >${language}\n                    <div slot=\"prefix\">${o2(languages[language].logo)}</div></sl-menu-item\n                  >`\n    )}\n            </sl-menu>\n          </sl-dropdown>\n        </sl-tooltip>\n        ${this.renderKeymapButton()}\n      </sl-button-group>\n      ${this.renderToolsButtons()}\n    `;\n  }\n  renderSearchButtons() {\n    return x`\n      <sl-button-group label=\"rechercher/remplacer\">\n        <sl-tooltip content=\"${this.readOnly ? \"rechercher\" : \"rechercher/remplacer\"}\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      openSearchPanel(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-find-replace\")}</sl-button\n          >\n        </sl-tooltip>\n        <sl-tooltip content=\"atteindre la ligne:colonne\" hoist>\n          <sl-button\n            size=\"small\"\n            @click=${() => {\n      gotoLine(this.theEditor);\n    }}\n            >${svgIcon(\"mdi-text-search\")}</sl-button\n          >\n        </sl-tooltip>\n      </sl-button-group>\n    `;\n  }\n  renderStatusBar() {\n    return x`\n      <toolbar-it class=\"statusbar\" ?hidden=${!this.toolbar}>\n        <sl-button-group slot=\"end\" label=\"informations\">\n          <sl-tooltip content=\"numéros de la ligne et de la colonne courantes\" hoist>\n            <sl-button size=\"small\" variant=\"default\">L ${this.cursorLine}, col ${this.cursorColumn}</sl-button>\n          </sl-tooltip>\n          <sl-tooltip content=\"indentation en nombre d'espaces\" hoist>\n            <sl-button size=\"small\" variant=\"default\">Indentation : ${this.indentSize}</sl-button>\n          </sl-tooltip>\n          <sl-tooltip content=\"nombre de caractères\" hoist>\n            <sl-button size=\"small\" variant=\"default\">Caractères : ${this.value.length}</sl-button>\n          </sl-tooltip>\n        </sl-button-group>\n      </toolbar-it>\n    `;\n  }\n  renderToolbar() {\n    return x`\n      <toolbar-it class=\"toolbar\" ?hidden=${!this.toolbar}>\n        <div slot=\"start\">\n          ${this.renderHistoryButtons()} \n          ${this.renderIndentationButtons()} \n          ${this.renderCommentButtons()}\n          ${this.renderSearchButtons()}\n        </div>\n        <div slot=\"center\">\n          ${this.renderKeymapButton()}\n        </div>\n        <div slot=\"end\">\n          ${this.renderToolsButtons()}\n        </div>\n      </toolbar-it>\n    `;\n  }\n  renderToolbarsButton() {\n    return x`\n      <sl-tooltip content=\"activer/désactiver les barres d'outils et d'informations\" hoist>\n        <sl-button variant=\"default\" size=\"small\" @click=${() => {\n      this.toolbar = !this.toolbar;\n    }}>\n          ${svgIcon(\"mdi-tools\")}\n        </sl-button>\n      </sl-tooltip>\n    `;\n  }\n  renderToolsButtons() {\n    return x`                      \n      <sl-button-group label=\"outils\">\n        <sl-tooltip hoist>\n          <div slot=\"content\">lien sur une page d'aide du langage <code>${languages[this.language].name}</code></div>\n          <sl-button size=\"small\" variant=\"default\" href=\"${this.getHelpUrl()}\" target=\"_blank\">\n            ${o2(languages[this.language].logo)}\n          </sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"afficher/cacher les numéros de ligne\" hoist>\n          <sl-button size=\"small\" @click=${() => this.handleLineNumbers()}>\n            ${svgIcon(\"mdi-format-list-numbered\")}\n          </sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"copier dans le presse-papier\">\n          <sl-button size=\"small\" @click=${() => this.handleCopyClipboard()}>\n            ${svgIcon(\"mdi-content-copy\")}\n          </sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"changer de thème\" hoist>\n          <sl-button size=\"small\" @click=${() => this.toggleTheme()}>${svgIcon(\"mdi-theme-light-dark\")}</sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip .content=${!this.fullscreen ? \"passer en mode plein \\xE9cran\" : \"quitter le mode plein \\xE9cran\"} hoist>\n          <sl-button size=\"small\" @click=${() => this.toggleFullscreen()}>\n            ${!this.fullscreen ? x`${svgIcon(\"mdi-fullscreen\")}` : x`${svgIcon(\"mdi-fullscreen-exit\")}`}\n          </sl-button>\n        </sl-tooltip>\n      </sl-button-group>\n    `;\n  }\n  /** Réinitialisation de l'éditeur. */\n  reset() {\n    this.value = this.initialCode;\n  }\n  async setLanguageExtension() {\n    const langs = Object.keys(languages);\n    if (langs.includes(this.language)) {\n      this.theEditor.dispatch({\n        effects: [this.languageConfig.reconfigure(languages[this.language].cm)]\n      });\n    }\n  }\n  setPlaceholderExtension() {\n    this.theEditor.dispatch({\n      effects: [this.placeholderConfig.reconfigure(placeholder(this.placeholder))]\n    });\n  }\n  setReadOnlyExtension() {\n    this.theEditor.dispatch({\n      effects: [this.readOnlyConfig.reconfigure(EditorState.readOnly.of(this.readOnly))]\n    });\n  }\n  setIndentationExtension() {\n    this.theEditor.dispatch({\n      effects: [this.indentationConfig.reconfigure(indentUnit.of(indentString(this.indentSize)))]\n    });\n  }\n  setThemeExtension() {\n    this.theEditor.dispatch({\n      effects: [this.themeConfig.reconfigure(this.theme === \"dark\" ? darkTheme : lightTheme)]\n    });\n  }\n  toggleTheme() {\n    this.theme = this.theme === \"dark\" ? \"light\" : \"dark\";\n    this.setThemeExtension();\n  }\n  updated(changedProperties) {\n    if (changedProperties.has(\"fieldset\")) {\n      this.editorContainer.innerHTML = \"\";\n      this.editorContainer.appendChild(this.theEditor.dom);\n    }\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SlIconButton",
          "declaration": {
            "name": "SlIconButton",
            "module": "cdn/chunks/chunk.SJ4RTGRS.js"
          }
        },
        {
          "kind": "js",
          "name": "CodeIt",
          "declaration": {
            "name": "CodeIt",
            "module": "cdn/chunks/chunk.SJ4RTGRS.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.U7SMFRWR.js",
      "declarations": [
        {
          "kind": "function",
          "name": "closeBrackets"
        },
        {
          "kind": "variable",
          "name": "closeBracketsKeymap",
          "type": {
            "text": "array"
          },
          "default": "[\n  { key: \"Backspace\", run: deleteBracketPair }\n]"
        },
        {
          "kind": "function",
          "name": "autocompletion",
          "parameters": [
            {
              "name": "config2",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "completionKeymap",
          "type": {
            "text": "array"
          },
          "default": "[\n  { key: \"Ctrl-Space\", run: startCompletion },\n  { key: \"Escape\", run: closeCompletion },\n  { key: \"ArrowDown\", run: /* @__PURE__ */ moveCompletionSelection(true) },\n  { key: \"ArrowUp\", run: /* @__PURE__ */ moveCompletionSelection(false) },\n  { key: \"PageDown\", run: /* @__PURE__ */ moveCompletionSelection(true, \"page\") },\n  { key: \"PageUp\", run: /* @__PURE__ */ moveCompletionSelection(false, \"page\") },\n  { key: \"Enter\", run: acceptCompletion }\n]"
        },
        {
          "kind": "variable",
          "name": "languages",
          "type": {
            "text": "object"
          },
          "default": "{\n  asciidoc: {\n    name: \"asciidoc\",\n    cm: StreamLanguage.define(asciidoc),\n    logo: `${icons[\"language-asciidoctor\"]}`,\n    extension: \"adoc\",\n    mime: \"text/asciidoc\",\n    helpUrl: \"https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/\"\n  },\n  css: {\n    name: \"css\",\n    cm: css(),\n    logo: `${icons[\"mdi-language-css3\"]}`,\n    extension: \"css\",\n    mime: \"text/css\",\n    helpUrl: \"https://developer.mozilla.org/fr/docs/Web/CSS/Reference\"\n  },\n  html: {\n    name: \"html\",\n    cm: html(),\n    logo: `${icons[\"mdi-language-html5\"]}`,\n    extension: \"html\",\n    mime: \"text/html\",\n    helpUrl: \"https://developer.mozilla.org/fr/docs/Web/HTML/Reference\"\n  },\n  javascript: {\n    name: \"javascript\",\n    cm: javascript(),\n    logo: `${icons[\"mdi-language-javascript\"]}`,\n    extension: \"js\",\n    mime: \"text/javascript\",\n    helpUrl: \"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference\"\n  },\n  json: {\n    name: \"json\",\n    cm: json(),\n    logo: `${icons[\"mdi-code-json\"]}`,\n    extension: \"json\",\n    mime: \"application/json\",\n    helpUrl: \"https://www.json.org/json-fr.html\"\n  },\n  markdown: {\n    name: \"markdown\",\n    cm: markdown(),\n    logo: `${icons[\"mdi-language-markdown\"]}`,\n    extension: \"md\",\n    mime: \"text/markdown\",\n    helpUrl: \"https://www.markdownguide.org/cheat-sheet/\"\n  },\n  prolog: {\n    name: \"prolog\",\n    cm: prolog(),\n    logo: `${icons[\"language-prolog\"]}`,\n    extension: \"pl\",\n    mime: \"text/x-prolog\",\n    helpUrl: \"http://tau-prolog.org/documentation#prolog\"\n  },\n  python: {\n    name: \"python\",\n    cm: python(),\n    logo: `${icons[\"mdi-language-python\"]}`,\n    extension: \"py\",\n    mime: \"text/x-python\",\n    helpUrl: \"https://www.pythoncheatsheet.org/cheatsheet/dictionaries\"\n  },\n  sql: {\n    name: \"sql\",\n    cm: sql(),\n    logo: `${icons[\"mdi-database\"]}`,\n    extension: \"sql\",\n    mime: \"application/sql\",\n    helpUrl: \"https://sql.sh\"\n  },\n  text: {\n    name: \"text\",\n    cm: [],\n    logo: `${icons[\"mdi-format-text\"]}`,\n    extension: \"txt\",\n    mime: \"text/plain\",\n    helpUrl: \"\"\n  },\n  typescript: {\n    name: \"typescript\",\n    cm: javascript({ typescript: true }),\n    logo: `${icons[\"mdi-language-typescript\"]}`,\n    extension: \"ts\",\n    mime: \"video/mp2t\",\n    // !\n    helpUrl: \"https://www.typescriptlang.org/cheatsheets\"\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "closeBrackets",
          "declaration": {
            "name": "closeBrackets",
            "module": "cdn/chunks/chunk.U7SMFRWR.js"
          }
        },
        {
          "kind": "js",
          "name": "closeBracketsKeymap",
          "declaration": {
            "name": "closeBracketsKeymap",
            "module": "cdn/chunks/chunk.U7SMFRWR.js"
          }
        },
        {
          "kind": "js",
          "name": "autocompletion",
          "declaration": {
            "name": "autocompletion",
            "module": "cdn/chunks/chunk.U7SMFRWR.js"
          }
        },
        {
          "kind": "js",
          "name": "completionKeymap",
          "declaration": {
            "name": "completionKeymap",
            "module": "cdn/chunks/chunk.U7SMFRWR.js"
          }
        },
        {
          "kind": "js",
          "name": "languages",
          "declaration": {
            "name": "languages",
            "module": "cdn/chunks/chunk.U7SMFRWR.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.UJCKPGYB.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "language"
        },
        {
          "kind": "function",
          "name": "getDate",
          "parameters": [
            {
              "name": "lang",
              "default": "language"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getDay",
          "parameters": [
            {
              "name": "lang",
              "default": "language"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getTime",
          "parameters": [
            {
              "name": "lang",
              "default": "language"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "language",
          "declaration": {
            "name": "language",
            "module": "cdn/chunks/chunk.UJCKPGYB.js"
          }
        },
        {
          "kind": "js",
          "name": "getDate",
          "declaration": {
            "name": "getDate",
            "module": "cdn/chunks/chunk.UJCKPGYB.js"
          }
        },
        {
          "kind": "js",
          "name": "getDay",
          "declaration": {
            "name": "getDay",
            "module": "cdn/chunks/chunk.UJCKPGYB.js"
          }
        },
        {
          "kind": "js",
          "name": "getTime",
          "declaration": {
            "name": "getTime",
            "module": "cdn/chunks/chunk.UJCKPGYB.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.ULMMSXWU.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "darkTheme"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "darkTheme",
          "declaration": {
            "name": "darkTheme",
            "module": "cdn/chunks/chunk.ULMMSXWU.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.VPCEBHZA.js",
      "declarations": [
        {
          "kind": "function",
          "name": "__esm",
          "parameters": [
            {
              "name": "fn"
            },
            {
              "name": "res"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__commonJS",
          "parameters": [
            {
              "name": "cb"
            },
            {
              "name": "mod"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__export",
          "parameters": [
            {
              "name": "target"
            },
            {
              "name": "all"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__toESM",
          "parameters": [
            {
              "name": "mod"
            },
            {
              "name": "isNodeMode"
            },
            {
              "name": "target"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__toCommonJS",
          "parameters": [
            {
              "name": "mod"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__decorateClass",
          "parameters": [
            {
              "name": "decorators"
            },
            {
              "name": "target"
            },
            {
              "name": "key"
            },
            {
              "name": "kind"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__superGet",
          "parameters": [
            {
              "name": "cls"
            },
            {
              "name": "obj"
            },
            {
              "name": "key"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__template",
          "parameters": [
            {
              "name": "cooked"
            },
            {
              "name": "raw"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "__esm",
          "declaration": {
            "name": "__esm",
            "module": "cdn/chunks/chunk.VPCEBHZA.js"
          }
        },
        {
          "kind": "js",
          "name": "__commonJS",
          "declaration": {
            "name": "__commonJS",
            "module": "cdn/chunks/chunk.VPCEBHZA.js"
          }
        },
        {
          "kind": "js",
          "name": "__export",
          "declaration": {
            "name": "__export",
            "module": "cdn/chunks/chunk.VPCEBHZA.js"
          }
        },
        {
          "kind": "js",
          "name": "__toESM",
          "declaration": {
            "name": "__toESM",
            "module": "cdn/chunks/chunk.VPCEBHZA.js"
          }
        },
        {
          "kind": "js",
          "name": "__toCommonJS",
          "declaration": {
            "name": "__toCommonJS",
            "module": "cdn/chunks/chunk.VPCEBHZA.js"
          }
        },
        {
          "kind": "js",
          "name": "__decorateClass",
          "declaration": {
            "name": "__decorateClass",
            "module": "cdn/chunks/chunk.VPCEBHZA.js"
          }
        },
        {
          "kind": "js",
          "name": "__superGet",
          "declaration": {
            "name": "__superGet",
            "module": "cdn/chunks/chunk.VPCEBHZA.js"
          }
        },
        {
          "kind": "js",
          "name": "__template",
          "declaration": {
            "name": "__template",
            "module": "cdn/chunks/chunk.VPCEBHZA.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.WBEW6TFI.js",
      "declarations": [
        {
          "kind": "function",
          "name": "createTheme",
          "parameters": [
            {
              "name": "{ variant, settings, styles }"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createTheme",
          "declaration": {
            "name": "createTheme",
            "module": "cdn/chunks/chunk.WBEW6TFI.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.WD7CYALI.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "LoremIpsumIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super(...arguments);\n    this.count = 1;\n    this.type = \"paragraph\";\n  }\n  createTerm() {\n    const nTerms = this.randomLength(1, 3);\n    const termArray = [];\n    for (let i2 = 0; i2 < nTerms; i2++) {\n      termArray.push(this.createText(\"word\"));\n    }\n    return termArray.join(\" \");\n  }\n  /** Texte aléatoire généré selon son type. */\n  createText(type = \"paragraph\") {\n    let text;\n    let n2;\n    const sentences = [];\n    const array = [];\n    const words = [];\n    switch (type) {\n      case \"dlist\":\n      case \"olist\":\n      case \"ulist\":\n        n2 = this.randomLength(1, 3);\n        for (let i2 = 0; i2 < n2; i2++) {\n          array.push(this.createText(\"sentence\"));\n        }\n        text = array.join(\" \");\n        break;\n      case \"paragraph\":\n        n2 = this.randomLength(2, 10);\n        for (let i2 = 0; i2 < n2; i2++) {\n          sentences.push(this.createText(\"sentence\"));\n        }\n        text = sentences.join(\" \");\n        break;\n      case \"sentence\":\n        n2 = this.randomLength(5, 30);\n        for (let i2 = 0; i2 < n2; i2++) {\n          words.push(this.createText(\"word\"));\n        }\n        words[0] = words[0].substring(0, 1).toUpperCase() + words[0].substring(1);\n        text = `${words.join(\" \")}.`.replace(/(\\.,|,\\.)/g, \".\");\n        break;\n      case \"word\":\n        text = this.dictionary[this.randomLength(0, this.dictionary.length - 1)];\n        break;\n    }\n    return text;\n  }\n  /** Dictionnaire de mots. */\n  get dictionary() {\n    return dictionary;\n  }\n  randomLength(min, max) {\n    if (min < 0 || max < min) {\n      return this.randomLength(1, 10);\n    }\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n  render() {\n    if (this.count < 1) {\n      this.count = 1;\n    }\n    return x` <div part=\"base\" class=\"lorem-ipsum prose\">${this.renderTemplate()}</div> `;\n  }\n  renderTemplate() {\n    let template = x``;\n    switch (this.type) {\n      case \"dlist\":\n        template = this.renderList(\"dl\", this.count);\n        break;\n      case \"olist\":\n        template = this.renderList(\"ol\", this.count);\n        break;\n      case \"paragraph\":\n        template = this.renderParagraph(this.count);\n        break;\n      case \"sentence\":\n        template = this.renderSentence(this.count);\n        break;\n      case \"ulist\":\n        template = this.renderList(\"ul\", this.count);\n        break;\n      case \"word\":\n        template = this.renderWord(this.count);\n        break;\n    }\n    return template;\n  }\n  renderList(tag = \"ul\", nbListItems = 1) {\n    const items = [];\n    for (let i2 = 0; i2 < nbListItems; i2++) {\n      items.push(this.createText(\"olist\"));\n    }\n    let template = x`${items.map((item) => x`<li>${item}</li>`)}`;\n    const dlTemplate = x`${items.map(\n      (item) => x`<dt>${this.createTerm()}</dt>\n          <dd>${item}</dd>`\n    )}`;\n    switch (tag) {\n      case \"ol\":\n        template = x`<ol part=\"olist\">\n          ${template}\n        </ol>`;\n        break;\n      case \"dl\":\n        template = x`<dl part=\"dlist\">${dlTemplate}</dl>`;\n        break;\n      case \"ul\":\n      default:\n        template = x`<ul part=\"ulist\">\n          ${template}\n        </ul>`;\n    }\n    return template;\n  }\n  renderParagraph(nbParagraphs = 1) {\n    const paragraphs = [];\n    for (let i2 = 0; i2 < nbParagraphs; i2++) {\n      paragraphs.push(this.createText(\"paragraph\"));\n    }\n    return x`${paragraphs.map((paragraph) => x`<p part=\"paragraph\">${paragraph}</p>`)}`;\n  }\n  renderSentence(nbSentences = 1) {\n    const sentences = [];\n    for (let i2 = 0; i2 < nbSentences; i2++) {\n      sentences.push(this.createText(\"sentence\"));\n    }\n    return x`<p part=\"sentence\">${sentences.map((sentence) => x`${sentence}<br />`)}</p>`;\n  }\n  renderWord(nbWords = 1) {\n    const words = [];\n    for (let i2 = 0; i2 < nbWords; i2++) {\n      words.push(this.createText(\"word\"));\n    }\n    return x`<p part=\"word\">${words.map((word) => x`${word} `)}</p>`;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LoremIpsumIt",
          "declaration": {
            "name": "LoremIpsumIt",
            "module": "cdn/chunks/chunk.WD7CYALI.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.WLDIBJGK.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "form_control_styles_default",
          "default": "i`\n  .form-control .form-control__label {\n    display: none;\n  }\n\n  .form-control .form-control__help-text {\n    display: none;\n  }\n\n  /* Label */\n  .form-control--has-label .form-control__label {\n    display: inline-block;\n    color: var(--sl-input-label-color);\n    margin-bottom: var(--sl-spacing-3x-small);\n  }\n\n  .form-control--has-label.form-control--small .form-control__label {\n    font-size: var(--sl-input-label-font-size-small);\n  }\n\n  .form-control--has-label.form-control--medium .form-control__label {\n    font-size: var(--sl-input-label-font-size-medium);\n  }\n\n  .form-control--has-label.form-control--large .form-control__label {\n    font-size: var(--sl-input-label-font-size-large);\n  }\n\n  :host([required]) .form-control--has-label .form-control__label::after {\n    content: var(--sl-input-required-content);\n    margin-inline-start: var(--sl-input-required-content-offset);\n    color: var(--sl-input-required-content-color);\n  }\n\n  /* Help text */\n  .form-control--has-help-text .form-control__help-text {\n    display: block;\n    color: var(--sl-input-help-text-color);\n    margin-top: var(--sl-spacing-3x-small);\n  }\n\n  .form-control--has-help-text.form-control--small .form-control__help-text {\n    font-size: var(--sl-input-help-text-font-size-small);\n  }\n\n  .form-control--has-help-text.form-control--medium .form-control__help-text {\n    font-size: var(--sl-input-help-text-font-size-medium);\n  }\n\n  .form-control--has-help-text.form-control--large .form-control__help-text {\n    font-size: var(--sl-input-help-text-font-size-large);\n  }\n\n  .form-control--has-help-text.form-control--radio-group .form-control__help-text {\n    margin-top: var(--sl-spacing-2x-small);\n  }\n`"
        },
        {
          "kind": "function",
          "name": "defaultValue",
          "parameters": [
            {
              "name": "propertyName",
              "default": "\"value\""
            }
          ]
        },
        {
          "kind": "variable",
          "name": "l"
        },
        {
          "kind": "variable",
          "name": "colorNames",
          "type": {
            "text": "array"
          },
          "default": "[\n  \"gray\",\n  \"red\",\n  \"orange\",\n  \"amber\",\n  \"yellow\",\n  \"lime\",\n  \"green\",\n  \"emerald\",\n  \"teal\",\n  \"cyan\",\n  \"sky\",\n  \"blue\",\n  \"indigo\",\n  \"violet\",\n  \"purple\",\n  \"fuchsia\",\n  \"pink\",\n  \"rose\"\n]"
        },
        {
          "kind": "variable",
          "name": "ColorIt",
          "default": "class extends BaseIt {\n  constructor() {\n    super();\n    this.color = \"purple\";\n    this.range = 5;\n    this.size = \"small\";\n    this.initLocalStorage();\n    this.setPrimaryColor();\n  }\n  /** Couleur principale du thème à l'aide des primitives [`shoelace`](https://shoelace.style/tokens/color). */\n  cssPrimaryColor() {\n    return `\n      :root,\n      .sl-theme-light,\n      .sl-theme-dark {\n        --sl-color-primary-50: var(--sl-color-${this.color}-50);\n        --sl-color-primary-100: var(--sl-color-${this.color}-100);\n        --sl-color-primary-200: var(--sl-color-${this.color}-200);\n        --sl-color-primary-300: var(--sl-color-${this.color}-300);\n        --sl-color-primary-400: var(--sl-color-${this.color}-400);\n        --sl-color-primary-500: var(--sl-color-${this.color}-500);\n        --sl-color-primary-600: var(--sl-color-${this.color}-600);\n        --sl-color-primary-700: var(--sl-color-${this.color}-700);\n        --sl-color-primary-800: var(--sl-color-${this.color}-800);\n        --sl-color-primary-900: var(--sl-color-${this.color}-900);\n        --sl-color-primary-950: var(--sl-color-${this.color}-950);\n        --color-primary: var(--sl-color-primary-${this.range}00);\n        --color-success: var(--sl-color-success-500);\n        --color-warning: var(--sl-color-warning-500);\n        --color-danger: var(--sl-color-danger-500);\n        --color-neutral: var(--sl-color-neutral-500);\n      }\n    `;\n  }\n  /** Couleurs disponibles */\n  get colors() {\n    return colorNames.map((color) => {\n      return { name: color, value: `var(--sl-color-${color}-${this.range}00);` };\n    });\n  }\n  handleChangeRange(event) {\n    const range = event.target;\n    this.range = range.value;\n    this.setPrimaryColor();\n  }\n  initLocalStorage() {\n    const color = localStorage.getItem(\"color\");\n    const range = localStorage.getItem(\"range\");\n    if (!color) {\n      localStorage.setItem(\"color\", this.color);\n    } else {\n      this.color = color;\n    }\n    if (!range) {\n      localStorage.setItem(\"range\", `${this.range}`);\n    } else {\n      this.range = parseInt(range);\n    }\n  }\n  render() {\n    return x`\n      <div part=\"base\" class=\"primary-color\">\n        <sl-dropdown hoist>\n          <sl-button size=${this.size} slot=\"trigger\" caret>\n            <span style=\"color:var(--color-primary)\">${svgIcon(\"mdi-palette-outline\")}</span>\n          </sl-button>\n          <div class=\"primary-color__colors\">\n            ${this.colors.map(\n      (item) => x`\n                <div class='primary-color__colors__color' @click=${() => {\n        this.color = item.name;\n        this.setPrimaryColor();\n      }}>\n                  <span title=${item.name} style=\"cursor:pointer;font-size:2em;color:${item.value}\">${svgIcon(\"mdi-square-rounded\")}\n                </div>\n              `\n    )}\n          </div>\n          <div class=\"primary-color__ranges\">\n            <sl-range\n              min=\"1\"\n              max=\"9\"\n              step=\"1\"\n              tooltip=\"top\"\n              .value=${this.range}\n              @sl-change=${this.handleChangeRange}\n            ></sl-range>\n          </div>\n        </sl-dropdown>\n      </div>\n    `;\n  }\n  /** Modifie la couleur principale du thème. */\n  setPrimaryColor() {\n    localStorage.color = this.color;\n    localStorage.range = this.range;\n    let styleElement = document.querySelector(\"style#colors\");\n    if (!styleElement) {\n      styleElement = document.createElement(\"style\");\n      styleElement.id = \"colors\";\n      document.head.appendChild(styleElement);\n    }\n    styleElement.innerHTML = this.cssPrimaryColor();\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "form_control_styles_default",
          "declaration": {
            "name": "form_control_styles_default",
            "module": "cdn/chunks/chunk.WLDIBJGK.js"
          }
        },
        {
          "kind": "js",
          "name": "defaultValue",
          "declaration": {
            "name": "defaultValue",
            "module": "cdn/chunks/chunk.WLDIBJGK.js"
          }
        },
        {
          "kind": "js",
          "name": "l",
          "declaration": {
            "name": "l",
            "module": "cdn/chunks/chunk.WLDIBJGK.js"
          }
        },
        {
          "kind": "js",
          "name": "colorNames",
          "declaration": {
            "name": "colorNames",
            "module": "cdn/chunks/chunk.WLDIBJGK.js"
          }
        },
        {
          "kind": "js",
          "name": "ColorIt",
          "declaration": {
            "name": "ColorIt",
            "module": "cdn/chunks/chunk.WLDIBJGK.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.WVRMIH3T.js",
      "declarations": [
        {
          "kind": "function",
          "name": "setBasePath",
          "parameters": [
            {
              "name": "path"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getBasePath",
          "parameters": [
            {
              "name": "subpath",
              "default": "\"\""
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "setBasePath",
          "declaration": {
            "name": "setBasePath",
            "module": "cdn/chunks/chunk.WVRMIH3T.js"
          }
        },
        {
          "kind": "js",
          "name": "getBasePath",
          "declaration": {
            "name": "getBasePath",
            "module": "cdn/chunks/chunk.WVRMIH3T.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.YZJQCN5P.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PythonIt",
          "default": "class extends PlaygroundIt {\n  constructor() {\n    super();\n    this.language = \"python\";\n    this.initialHead = `\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/brython/3.12.0/brython.min.js\"><\\/script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/brython/3.12.0/brython_stdlib.min.js\"><\\/script>\n`;\n  }\n  get answer() {\n    throw new Error(\"Method not implemented.\");\n  }\n  compile(input) {\n    let output = `\n<script type=\"text/python\">\n${input}\n<\\/script>\n`;\n    return output;\n  }\n  reset() {\n    throw new Error(\"Method not implemented.\");\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PythonIt",
          "declaration": {
            "name": "PythonIt",
            "module": "cdn/chunks/chunk.YZJQCN5P.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/chunks/chunk.ZLLWW4KM.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "cdn/utilities/asciidoc.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "export_AsciidoctorProcessor"
        },
        {
          "kind": "variable",
          "name": "export_AsciidoctorType"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsciidoctorProcessor",
          "declaration": {
            "name": "export_AsciidoctorProcessor",
            "module": "cdn/utilities/asciidoc.js"
          }
        },
        {
          "kind": "js",
          "name": "AsciidoctorType",
          "declaration": {
            "name": "export_AsciidoctorType",
            "module": "cdn/utilities/asciidoc.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/utilities/base-path.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "getBasePath",
          "declaration": {
            "name": "getBasePath",
            "module": "cdn/utilities/base-path.js"
          }
        },
        {
          "kind": "js",
          "name": "setBasePath",
          "declaration": {
            "name": "setBasePath",
            "module": "cdn/utilities/base-path.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/utilities/date.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "getDate",
          "declaration": {
            "name": "getDate",
            "module": "cdn/utilities/date.js"
          }
        },
        {
          "kind": "js",
          "name": "getDay",
          "declaration": {
            "name": "getDay",
            "module": "cdn/utilities/date.js"
          }
        },
        {
          "kind": "js",
          "name": "getTime",
          "declaration": {
            "name": "getTime",
            "module": "cdn/utilities/date.js"
          }
        },
        {
          "kind": "js",
          "name": "language",
          "declaration": {
            "name": "language",
            "module": "cdn/utilities/date.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/utilities/dedent.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "dedentText",
          "declaration": {
            "name": "dedentText",
            "module": "cdn/utilities/dedent.js"
          }
        },
        {
          "kind": "js",
          "name": "indentString",
          "declaration": {
            "name": "indentString",
            "module": "cdn/utilities/dedent.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/utilities/emit.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "emit",
          "declaration": {
            "name": "emit",
            "module": "cdn/utilities/emit.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/utilities/icons.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "icons",
          "declaration": {
            "name": "icons",
            "module": "cdn/utilities/icons.js"
          }
        },
        {
          "kind": "js",
          "name": "svgIcon",
          "declaration": {
            "name": "svgIcon",
            "module": "cdn/utilities/icons.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/utilities/request.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "fetchContent",
          "declaration": {
            "name": "fetchContent",
            "module": "cdn/utilities/request.js"
          }
        },
        {
          "kind": "js",
          "name": "fetchSrc",
          "declaration": {
            "name": "fetchSrc",
            "module": "cdn/utilities/request.js"
          }
        },
        {
          "kind": "js",
          "name": "requestIncludeFile",
          "declaration": {
            "name": "requestIncludeFile",
            "module": "cdn/utilities/request.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/utilities/run-script.js",
      "declarations": [
        {
          "kind": "function",
          "name": "runScript",
          "parameters": [
            {
              "name": "script"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "runScript",
          "declaration": {
            "name": "runScript",
            "module": "cdn/utilities/run-script.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/utilities/system.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "system",
          "declaration": {
            "name": "system",
            "module": "cdn/utilities/system.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/asciidoc.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "AsciidoctorProcessor",
          "declaration": {
            "name": "AsciiDoctor",
            "module": "src/utilities/asciidoc.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsciidoctorType",
          "declaration": {
            "name": "Asciidoctor",
            "module": "src/utilities/asciidoc.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/base-path.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "setBasePath",
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Définit le chemin de base de la bibliothèque dans le répertoire spécifié."
        },
        {
          "kind": "function",
          "name": "getBasePath",
          "parameters": [
            {
              "name": "subpath",
              "default": "''",
              "description": "Chemin facultatif à ajouter au chemin de base."
            }
          ],
          "description": "Obtient le chemin de base de la bibliothèque.\n\nLe chemin de base est utilisé pour charger des ressources telles que des icônes et des images, et doit donc être défini pour que les composants fonctionnent correctement.\nPar défaut, ce script recherchera un script se terminant par enibook.js ou enibook-autoloader.js et définira le chemin de base vers le répertoire contenant ce fichier.\nPour remplacer ce comportement, vous pouvez ajouter l'attribut data-enibook à n'importe quel script de la page\n(il est probablement plus logique de l'attacher au script de EniBook, mais il peut aussi se trouver sur un bundle).\nLa valeur peut être un dossier local ou pointer vers un point de terminaison compatible CORS tel qu'un CDN.\n\n  <script src=\"bundle.js\" data-enibook=\"/custom/base/path\"></script>\n\nVous pouvez également définir le chemin de base manuellement à l'aide de la fonction exportée setBasePath()."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "setBasePath",
          "declaration": {
            "name": "setBasePath",
            "module": "src/utilities/base-path.ts"
          }
        },
        {
          "kind": "js",
          "name": "getBasePath",
          "declaration": {
            "name": "getBasePath",
            "module": "src/utilities/base-path.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/date.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "language",
          "description": "La langue courante."
        },
        {
          "kind": "function",
          "name": "getDate",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "lang",
              "default": "language",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "La date courante sous la forme `jour quantième mois annéee` dans un ordre qui dépend de la langue courante."
        },
        {
          "kind": "function",
          "name": "getDay",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "lang",
              "default": "language",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Le jour de la semaine en toutes lettres."
        },
        {
          "kind": "function",
          "name": "getTime",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "lang",
              "default": "language",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "L'heure courante sous la forme `hh:mm:ss`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "language",
          "declaration": {
            "name": "language",
            "module": "src/utilities/date.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDate",
          "declaration": {
            "name": "getDate",
            "module": "src/utilities/date.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDay",
          "declaration": {
            "name": "getDay",
            "module": "src/utilities/date.ts"
          }
        },
        {
          "kind": "js",
          "name": "getTime",
          "declaration": {
            "name": "getTime",
            "module": "src/utilities/date.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/dedent.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "dedentText",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "le texte à désindenter"
            }
          ],
          "description": "Désindente le code en récupérant l'indentation de la première ligne,\npuis enlève la même quantité d'indentation au reste des lignes."
        },
        {
          "kind": "function",
          "name": "indentString",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "indentSize",
              "default": "2",
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dedentText",
          "declaration": {
            "name": "dedentText",
            "module": "src/utilities/dedent.ts"
          }
        },
        {
          "kind": "js",
          "name": "indentString",
          "declaration": {
            "name": "indentString",
            "module": "src/utilities/dedent.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/emit.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "emit",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "description": "l'élément émetteur"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "le nom de l'évènement."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "CustomEventInit"
              },
              "description": "les options associées à l'évènement."
            }
          ],
          "description": "Emission d'un évènement personnalisé avec des valeurs par défaut plus pratiques.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "emit",
          "declaration": {
            "name": "emit",
            "module": "src/utilities/emit.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/icons.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "icons",
          "type": {
            "text": "{ [index: string]: string }"
          },
          "default": "{\n  'language-asciidoctor': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M18.069 0H5.932A5.934 5.934 0 0 0 0 5.932v12.136A5.935 5.935 0 0 0 5.932 24h12.136A5.934 5.934 0 0 0 24 18.068V5.932A5.934 5.934 0 0 0 18.069 0m-7.361 15.404H8.81l-.005.013L7.2 19.282a.506.506 0 1 1-.934-.388l1.45-3.49H4.868a.506.506 0 1 1 0-1.012h5.84a.506.506 0 1 1 0 1.012m7.919 4.165a.506.506 0 0 1-.655-.29L12.621 6.232l-2.395 5.76h1.55a.506.506 0 1 1 0 1.012h-5.84a.506.506 0 1 1 0-1.011h3.195l.004-.012l3.022-7.269a.506.506 0 0 1 .457-.311a.506.506 0 0 1 .478.314l5.816 14.182a.506.506 0 0 1-.281.673\"/></svg>`,\n  'language-prolog': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1.5em\" height=\"1.5em\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><text x=\"2\" y=\"15\" fill=\"currentColor\" style=\"font-weight:bold;font-size:inherit\">?-</text></svg>`,\n  'mdi-account': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 4a4 4 0 0 1 4 4a4 4 0 0 1-4 4a4 4 0 0 1-4-4a4 4 0 0 1 4-4m0 10c4.42 0 8 1.79 8 4v2H4v-2c0-2.21 3.58-4 8-4Z\"/></svg>`,\n  'mdi-alert-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 2L1 21h22M12 6l7.53 13H4.47M11 10v4h2v-4m-2 6v2h2v-2\"/></svg>`,\n  'mdi-bell-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M10 21h4c0 1.1-.9 2-2 2s-2-.9-2-2m11-2v1H3v-1l2-2v-6c0-3.1 2-5.8 5-6.7V4c0-1.1.9-2 2-2s2 .9 2 2v.3c3 .9 5 3.6 5 6.7v6l2 2m-4-8c0-2.8-2.2-5-5-5s-5 2.2-5 5v7h10v-7Z\"/></svg>`,\n  'mdi-bell-off-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M22.11 21.46L2.39 1.73L1.11 3l4.72 4.72A6.975 6.975 0 0 0 5 11v6l-2 2v1h15.11l2.73 2.73l1.27-1.27M7 18v-7c0-.61.11-1.21.34-1.77L16.11 18H7m3 3h4a2 2 0 0 1-2 2a2 2 0 0 1-2-2M8.29 5.09c.53-.34 1.11-.59 1.71-.8V4a2 2 0 0 1 2-2a2 2 0 0 1 2 2v.29c2.97.88 5 3.61 5 6.71v4.8l-2-2V11a5 5 0 0 0-5-5c-.78 0-1.55.2-2.24.56L8.29 5.09Z\"/></svg>`,\n  'mdi-block-helper': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 0a12 12 0 0 1 12 12a12 12 0 0 1-12 12A12 12 0 0 1 0 12A12 12 0 0 1 12 0m0 2A10 10 0 0 0 2 12c0 2.4.85 4.6 2.26 6.33L18.33 4.26A9.984 9.984 0 0 0 12 2m0 20a10 10 0 0 0 10-10c0-2.4-.85-4.6-2.26-6.33L5.67 19.74A9.984 9.984 0 0 0 12 22\"/></svg>`,\n  'mdi-calendar-clock-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M6 1v2H5c-1.11 0-2 .89-2 2v14a2 2 0 0 0 2 2h6.1c1.26 1.24 2.99 2 4.9 2c3.87 0 7-3.13 7-7c0-1.91-.76-3.64-2-4.9V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1M5 5h14v2H5m0 2h14v.67c-.91-.43-1.93-.67-3-.67c-3.87 0-7 3.13-7 7c0 1.07.24 2.09.67 3H5m11-7.85c2.68 0 4.85 2.17 4.85 4.85c0 2.68-2.17 4.85-4.85 4.85c-2.68 0-4.85-2.17-4.85-4.85c0-2.68 2.17-4.85 4.85-4.85M15 13v3.69l3.19 1.84l.75-1.3l-2.44-1.41V13Z\"/></svg>`,\n  'mdi-check-circle-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10s10-4.5 10-10S17.5 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m4.59-12.42L10 14.17l-2.59-2.58L6 13l4 4l8-8l-1.41-1.42Z\"/></svg>`,\n  'mdi-code-json': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 3h2v2H5v5a2 2 0 0 1-2 2a2 2 0 0 1 2 2v5h2v2H5c-1.07-.27-2-.9-2-2v-4a2 2 0 0 0-2-2H0v-2h1a2 2 0 0 0 2-2V5a2 2 0 0 1 2-2m14 0a2 2 0 0 1 2 2v4a2 2 0 0 0 2 2h1v2h-1a2 2 0 0 0-2 2v4a2 2 0 0 1-2 2h-2v-2h2v-5a2 2 0 0 1 2-2a2 2 0 0 1-2-2V5h-2V3h2m-7 12a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m-4 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m8 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1Z\"/></svg>`,\n  'mdi-cog': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64z\"/></svg>`,\n  'mdi-content-copy': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19 21H8V7h11m0-2H8a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2m-3-4H4a2 2 0 0 0-2 2v14h2V3h12V1Z\"/></svg>`,\n  'mdi-database': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 3C7.58 3 4 4.79 4 7s3.58 4 8 4s8-1.79 8-4s-3.58-4-8-4M4 9v3c0 2.21 3.58 4 8 4s8-1.79 8-4V9c0 2.21-3.58 4-8 4s-8-1.79-8-4m0 5v3c0 2.21 3.58 4 8 4s8-1.79 8-4v-3c0 2.21-3.58 4-8 4s-8-1.79-8-4Z\"/></svg>`,\n  'mdi-dots-horizontal': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M16 12a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2m-6 0a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2m-6 0a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2Z\"/></svg>`,\n  'mdi-dots-vertical': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 16a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2m0-6a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2m0-6a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2Z\"/></svg>`,\n  'mdi-drag-vertical': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M9 3h2v2H9V3m4 0h2v2h-2V3M9 7h2v2H9V7m4 0h2v2h-2V7m-4 4h2v2H9v-2m4 0h2v2h-2v-2m-4 4h2v2H9v-2m4 0h2v2h-2v-2m-4 4h2v2H9v-2m4 0h2v2h-2v-2Z\"/></svg>`,\n  'mdi-find-replace': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05A6.976 6.976 0 0 0 11 4c-3.53 0-6.43 2.61-6.92 6H6.1A5 5 0 0 1 11 6m5.64 9.14A6.89 6.89 0 0 0 17.92 12H15.9a5 5 0 0 1-4.9 4c-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05A6.976 6.976 0 0 0 11 18c1.55 0 3-.5 4.14-1.36L20 21.5l1.5-1.5l-4.86-4.86Z\"/></svg>`,\n  'mdi-format-indent-decrease': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 13h10v-2H11m0-2h10V7H11M3 3v2h18V3M3 21h18v-2H3m0-7l4 4V8m4 9h10v-2H11v2Z\"/></svg>`,\n  'mdi-format-indent-increase': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 13h10v-2H11m0-2h10V7H11M3 3v2h18V3M11 17h10v-2H11M3 8v8l4-4m-4 9h18v-2H3v2Z\"/></svg>`,\n  'mdi-format-list-group': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 5v14h2v2H3V3h4v2H5m15 2H7v2h13V7m0 4H7v2h13v-2m0 4H7v2h13v-2Z\"/></svg>`,\n  'mdi-format-list-numbered': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M7 13v-2h14v2H7m0 6v-2h14v2H7M7 7V5h14v2H7M3 8V5H2V4h2v4H3m-1 9v-1h3v4H2v-1h2v-.5H3v-1h1V17H2m2.25-7a.75.75 0 0 1 .75.75c0 .2-.08.39-.21.52L3.12 13H5v1H2v-.92L4 11H2v-1h2.25Z\"/></svg>`,\n  'mdi-format-text': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m18.5 4l1.16 4.35l-.96.26c-.45-.87-.91-1.74-1.44-2.18C16.73 6 16.11 6 15.5 6H13v10.5c0 .5 0 1 .33 1.25c.34.25 1 .25 1.67.25v1H9v-1c.67 0 1.33 0 1.67-.25c.33-.25.33-.75.33-1.25V6H8.5c-.61 0-1.23 0-1.76.43c-.53.44-.99 1.31-1.44 2.18l-.96-.26L5.5 4h13Z\"/></svg>`,\n  'mdi-fullscreen': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 5h5v2H7v3H5V5m9 0h5v5h-2V7h-3V5m3 9h2v5h-5v-2h3v-3m-7 3v2H5v-5h2v3h3Z\"/></svg>`,\n  'mdi-fullscreen-exit': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M14 14h5v2h-3v3h-2v-5m-9 0h5v5H8v-3H5v-2m3-9h2v5H5V8h3V5m11 3v2h-5V5h2v3h3Z\"/></svg>`,\n  'mdi-github': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33c.85 0 1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2\"/></svg>`,\n  'mdi-hide-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M2 5.27L3.28 4L20 20.72L18.73 22l-3.08-3.08c-1.15.38-2.37.58-3.65.58c-5 0-9.27-3.11-11-7.5c.69-1.76 1.79-3.31 3.19-4.54zM12 9a3 3 0 0 1 3 3a3 3 0 0 1-.17 1L11 9.17A3 3 0 0 1 12 9m0-4.5c5 0 9.27 3.11 11 7.5a11.79 11.79 0 0 1-4 5.19l-1.42-1.43A9.862 9.862 0 0 0 20.82 12A9.821 9.821 0 0 0 12 6.5c-1.09 0-2.16.18-3.16.5L7.3 5.47c1.44-.62 3.03-.97 4.7-.97M3.18 12A9.821 9.821 0 0 0 12 17.5c.69 0 1.37-.07 2-.21L11.72 15A3.064 3.064 0 0 1 9 12.28L5.6 8.87c-.99.85-1.82 1.91-2.42 3.13\"/></svg>`,\n  'mdi-home': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M10 20v-6h4v6h5v-8h3L12 3L2 12h3v8z\"/></svg>`,\n  'mdi-information-variant-circle-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12.3 7.29c.2-.18.44-.29.7-.29c.27 0 .5.11.71.29c.19.21.29.45.29.71c0 .27-.1.5-.29.71c-.21.19-.44.29-.71.29c-.26 0-.5-.1-.7-.29c-.19-.21-.3-.44-.3-.71c0-.26.11-.5.3-.71m-2.5 4.68s2.17-1.72 2.96-1.79c.74-.06.59.79.52 1.23l-.01.06c-.14.53-.31 1.17-.48 1.78c-.38 1.39-.75 2.75-.66 3c.1.34.72-.09 1.17-.39c.06-.04.11-.08.16-.11c0 0 .08-.08.16.03c.02.03.04.06.06.08c.09.14.14.19.02.27l-.04.02c-.22.15-1.16.81-1.54 1.05c-.41.27-1.98 1.17-1.74-.58c.21-1.23.49-2.29.71-3.12c.41-1.5.59-2.18-.33-1.59c-.37.22-.59.36-.72.45c-.11.08-.12.08-.19-.05l-.03-.06l-.05-.08c-.07-.1-.07-.11.03-.2M22 12c0 5.5-4.5 10-10 10S2 17.5 2 12S6.5 2 12 2s10 4.5 10 10m-2 0c0-4.42-3.58-8-8-8s-8 3.58-8 8s3.58 8 8 8s8-3.58 8-8Z\"/></svg>`,\n  'mdi-keyboard': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19 10h-2V8h2m0 5h-2v-2h2m-3-1h-2V8h2m0 5h-2v-2h2m0 6H8v-2h8m-9-5H5V8h2m0 5H5v-2h2m1 0h2v2H8m0-5h2v2H8m3 1h2v2h-2m0-5h2v2h-2m9-5H4c-1.11 0-2 .89-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z\"/></svg>`,\n  'mdi-keyboard-off-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m1 4.27l1.47 1.47A1.9 1.9 0 0 0 2 7v10a2 2 0 0 0 2 2h11.73l3 3L20 20.72L2.28 3L1 4.27M4 17V7.27l1 1V10h1.73L8 11.27V13h1.73l1 1H8v2h4.73l1 1H4m1-6h2v2H5v-2m12 0h2v2h-2v-2m2-1h-2V8h2v2m-5 1h2v2h-1.17l-.83-.83V11m-1-1h-1.17L11 9.17V8h2v2m9-3v10c0 .86-.55 1.58-1.3 1.87L18.83 17H20V7H8.83l-2-2H20a2 2 0 0 1 2 2m-6 3h-2V8h2v2Z\"/></svg>`,\n  'mdi-keyboard-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M4 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H4m0 2h16v10H4V7m1 1v2h2V8H5m3 0v2h2V8H8m3 0v2h2V8h-2m3 0v2h2V8h-2m3 0v2h2V8h-2M5 11v2h2v-2H5m3 0v2h2v-2H8m3 0v2h2v-2h-2m3 0v2h2v-2h-2m3 0v2h2v-2h-2m-9 3v2h8v-2H8Z\"/></svg>`,\n  'mdi-language-asciidoc': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 496 512\"><path fill=\"currentColor\" d=\"M21.771 336.508c-23.15-.464-23.15 34.5 0 34.035h95.833l-48.817 117.45c-9.029 21.083 22.85 34.34 31.432 13.07l54.011-130.52h64.094c23.15.464 23.15-34.5 0-34.035zM282.088.01c-6.295.225-12.345 4.023-14.986 10.678L165.16 255.705H17.367c-23.155-.47-23.155 34.5 0 34.031h236.916c23.155.47 23.155-34.5 0-34.03h-52.197L282.69 61.817l180.114 439.174c8.366 21.573 40.683 8.311 31.488-12.922L298.551 10.77C294.925 3.133 288.383-.215 282.088.01z\"/></svg>`,\n  'mdi-language-css': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m5 3l-.65 3.34h13.59L17.5 8.5H3.92l-.66 3.33h13.59l-.76 3.81l-5.48 1.81l-4.75-1.81l.33-1.64H2.85l-.79 4l7.85 3l9.05-3l1.2-6.03l.24-1.21L21.94 3H5Z\"/></svg>`,\n  'mdi-language-css3': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m5 3l-.65 3.34h13.59L17.5 8.5H3.92l-.66 3.33h13.59l-.76 3.81l-5.48 1.81l-4.75-1.81l.33-1.64H2.85l-.79 4l7.85 3l9.05-3l1.2-6.03l.24-1.21L21.94 3H5Z\"/></svg>`,\n  'mdi-language-html': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m12 17.56l4.07-1.13l.55-6.1H9.38L9.2 8.3h7.6l.2-1.99H7l.56 6.01h6.89l-.23 2.58l-2.22.6l-2.22-.6l-.14-1.66h-2l.29 3.19L12 17.56M4.07 3h15.86L18.5 19.2L12 21l-6.5-1.8L4.07 3Z\"/></svg>`,\n  'mdi-language-html5': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m12 17.56l4.07-1.13l.55-6.1H9.38L9.2 8.3h7.6l.2-1.99H7l.56 6.01h6.89l-.23 2.58l-2.22.6l-2.22-.6l-.14-1.66h-2l.29 3.19L12 17.56M4.07 3h15.86L18.5 19.2L12 21l-6.5-1.8L4.07 3Z\"/></svg>`,\n  'mdi-language-javascript': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 3h18v18H3V3m4.73 15.04c.4.85 1.19 1.55 2.54 1.55c1.5 0 2.53-.8 2.53-2.55v-5.78h-1.7V17c0 .86-.35 1.08-.9 1.08c-.58 0-.82-.4-1.09-.87l-1.38.83m5.98-.18c.5.98 1.51 1.73 3.09 1.73c1.6 0 2.8-.83 2.8-2.36c0-1.41-.81-2.04-2.25-2.66l-.42-.18c-.73-.31-1.04-.52-1.04-1.02c0-.41.31-.73.81-.73c.48 0 .8.21 1.09.73l1.31-.87c-.55-.96-1.33-1.33-2.4-1.33c-1.51 0-2.48.96-2.48 2.23c0 1.38.81 2.03 2.03 2.55l.42.18c.78.34 1.24.55 1.24 1.13c0 .48-.45.83-1.15.83c-.83 0-1.31-.43-1.67-1.03l-1.38.8Z\"/></svg>`,\n  'mdi-language-json': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 3h2v2H5v5a2 2 0 0 1-2 2a2 2 0 0 1 2 2v5h2v2H5c-1.07-.27-2-.9-2-2v-4a2 2 0 0 0-2-2H0v-2h1a2 2 0 0 0 2-2V5a2 2 0 0 1 2-2m14 0a2 2 0 0 1 2 2v4a2 2 0 0 0 2 2h1v2h-1a2 2 0 0 0-2 2v4a2 2 0 0 1-2 2h-2v-2h2v-5a2 2 0 0 1 2-2a2 2 0 0 1-2-2V5h-2V3h2m-7 12a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m-4 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m8 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1Z\"/></svg>`,\n  'mdi-language-markdown': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M20.56 18H3.44C2.65 18 2 17.37 2 16.59V7.41C2 6.63 2.65 6 3.44 6h17.12c.79 0 1.44.63 1.44 1.41v9.18c0 .78-.65 1.41-1.44 1.41M6.81 15.19v-3.66l1.92 2.35l1.92-2.35v3.66h1.93V8.81h-1.93l-1.92 2.35l-1.92-2.35H4.89v6.38h1.92M19.69 12h-1.92V8.81h-1.92V12h-1.93l2.89 3.28L19.69 12Z\"/></svg>`,\n  'mdi-language-prolog': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><text x=\"2\" y=\"15\" fill=\"currentColor\" style=\"font-weight:bold;font-size:inherit\">?-</text></svg>`,\n  'mdi-language-python': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\"viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19.14 7.5A2.86 2.86 0 0 1 22 10.36v3.78A2.86 2.86 0 0 1 19.14 17H12c0 .39.32.96.71.96H17v1.68a2.86 2.86 0 0 1-2.86 2.86H9.86A2.86 2.86 0 0 1 7 19.64v-3.75a2.85 2.85 0 0 1 2.86-2.85h5.25a2.85 2.85 0 0 0 2.85-2.86V7.5h1.18m-4.28 11.79c-.4 0-.72.3-.72.89c0 .59.32.71.72.71a.71.71 0 0 0 .71-.71c0-.59-.32-.89-.71-.89m-10-1.79A2.86 2.86 0 0 1 2 14.64v-3.78A2.86 2.86 0 0 1 4.86 8H12c0-.39-.32-.96-.71-.96H7V5.36A2.86 2.86 0 0 1 9.86 2.5h4.28A2.86 2.86 0 0 1 17 5.36v3.75a2.85 2.85 0 0 1-2.86 2.85H8.89a2.85 2.85 0 0 0-2.85 2.86v2.68H4.86M9.14 5.71c.4 0 .72-.3.72-.89c0-.59-.32-.71-.72-.71c-.39 0-.71.12-.71.71s.32.89.71.89Z\"/></svg>`,\n  'mdi-language-sql': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 3C7.58 3 4 4.79 4 7s3.58 4 8 4s8-1.79 8-4s-3.58-4-8-4M4 9v3c0 2.21 3.58 4 8 4s8-1.79 8-4V9c0 2.21-3.58 4-8 4s-8-1.79-8-4m0 5v3c0 2.21 3.58 4 8 4s8-1.79 8-4v-3c0 2.21-3.58 4-8 4s-8-1.79-8-4Z\"/></svg>`,\n  'mdi-language-text': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m18.5 4l1.16 4.35l-.96.26c-.45-.87-.91-1.74-1.44-2.18C16.73 6 16.11 6 15.5 6H13v10.5c0 .5 0 1 .33 1.25c.34.25 1 .25 1.67.25v1H9v-1c.67 0 1.33 0 1.67-.25c.33-.25.33-.75.33-1.25V6H8.5c-.61 0-1.23 0-1.76.43c-.53.44-.99 1.31-1.44 2.18l-.96-.26L5.5 4h13Z\"/></svg>`,\n  'mdi-language-typescript': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 3h18v18H3V3m10.71 14.86c.5.98 1.51 1.73 3.09 1.73c1.6 0 2.8-.83 2.8-2.36c0-1.41-.81-2.04-2.25-2.66l-.42-.18c-.73-.31-1.04-.52-1.04-1.02c0-.41.31-.73.81-.73c.48 0 .8.21 1.09.73l1.31-.87c-.55-.96-1.33-1.33-2.4-1.33c-1.51 0-2.48.96-2.48 2.23c0 1.38.81 2.03 2.03 2.55l.42.18c.78.34 1.24.55 1.24 1.13c0 .48-.45.83-1.15.83c-.83 0-1.31-.43-1.67-1.03l-1.38.8M13 11.25H8v1.5h1.5V20h1.75v-7.25H13v-1.5Z\"/></svg>`,\n  'mdi-menu-close': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 6h10v2H3V6m0 10h10v2H3v-2m0-5h12v2H3v-2m13-4l-1.42 1.39L18.14 12l-3.56 3.61L16 17l5-5l-5-5Z\"/></svg>`,\n  'mdi-menu-open': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M21 15.61L19.59 17l-5.01-5l5.01-5L21 8.39L17.44 12L21 15.61M3 6h13v2H3V6m0 7v-2h10v2H3m0 5v-2h13v2H3Z\"/></svg>`,\n  'mdi-monitor-eye': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 4v12h18V4zm0-2h18a2 2 0 0 1 2 2v12c0 .53-.21 1.04-.59 1.41c-.37.38-.88.59-1.41.59h-7v2h2v2H8v-2h2v-2H3c-.53 0-1.04-.21-1.41-.59C1.21 17.04 1 16.53 1 16V4c0-1.11.89-2 2-2m7.84 6.93c.31-.3.73-.48 1.16-.48c.43.01.85.18 1.16.49c.3.3.48.72.48 1.15c0 .44-.18.85-.48 1.16c-.31.31-.73.48-1.16.48c-.43 0-.85-.18-1.16-.48c-.3-.31-.48-.72-.48-1.16c0-.43.18-.85.48-1.16M10.07 12a2.679 2.679 0 0 0 3.86 0c.51-.5.8-1.19.8-1.91s-.29-1.42-.8-1.93s-1.21-.8-1.93-.8s-1.42.29-1.93.8s-.8 1.21-.8 1.93s.29 1.41.8 1.91M6 10.09A6.45 6.45 0 0 1 12 6c2.73 0 5.06 1.7 6 4.09a6.421 6.421 0 0 1-6 4.09c-2.73 0-5.06-1.68-6-4.09\"/></svg>`,\n  'mdi-mouse': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M11 1.07C7.05 1.56 4 4.92 4 9h7m-7 6a8 8 0 0 0 8 8a8 8 0 0 0 8-8v-4H4m9-9.93V9h7c0-4.08-3.06-7.44-7-7.93Z\"/></svg>`,\n  'mdi-mouse-off': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M2 5.27L3.28 4L20 20.72L18.73 22l-1.23-1.21A7.892 7.892 0 0 1 12 23a8 8 0 0 1-8-8v-4h3.73l-2-2H4c0-.54.05-1.07.15-1.58L2 5.27m9-4.2V9h-.18L5.79 3.96A7.95 7.95 0 0 1 11 1.07M20 11v4c0 .95-.17 1.86-.47 2.71L12.82 11H20m-7-9.93c3.94.49 7 3.85 7 7.93h-7V1.07Z\"/></svg>`,\n  'mdi-palette-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 22A10 10 0 0 1 2 12A10 10 0 0 1 12 2c5.5 0 10 4 10 9a6 6 0 0 1-6 6h-1.8c-.3 0-.5.2-.5.5c0 .1.1.2.1.3c.4.5.6 1.1.6 1.7c.1 1.4-1 2.5-2.4 2.5m0-18a8 8 0 0 0-8 8a8 8 0 0 0 8 8c.3 0 .5-.2.5-.5c0-.2-.1-.3-.1-.4c-.4-.5-.6-1-.6-1.6c0-1.4 1.1-2.5 2.5-2.5H16a4 4 0 0 0 4-4c0-3.9-3.6-7-8-7m-5.5 6c.8 0 1.5.7 1.5 1.5S7.3 13 6.5 13S5 12.3 5 11.5S5.7 10 6.5 10m3-4c.8 0 1.5.7 1.5 1.5S10.3 9 9.5 9S8 8.3 8 7.5S8.7 6 9.5 6m5 0c.8 0 1.5.7 1.5 1.5S15.3 9 14.5 9S13 8.3 13 7.5S13.7 6 14.5 6m3 4c.8 0 1.5.7 1.5 1.5s-.7 1.5-1.5 1.5s-1.5-.7-1.5-1.5s.7-1.5 1.5-1.5\"/></svg>`,\n  'mdi-play': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M8 5.14v14l11-7l-11-7Z\"/></svg>`,\n  'mdi-redo': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M18.4 10.6C16.55 9 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16a8.002 8.002 0 0 1 7.6-5.5c1.95 0 3.73.72 5.12 1.88L13 16h9V7l-3.6 3.6Z\"/></svg>`,\n  'mdi-refresh': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><g transform=\"translate(24 0) scale(-1 1)\"><path fill=\"currentColor\" d=\"M17.65 6.35A7.958 7.958 0 0 0 12 4a8 8 0 0 0-8 8a8 8 0 0 0 8 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18a6 6 0 0 1-6-6a6 6 0 0 1 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35Z\"/></g></svg>`,\n  'mdi-show-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 9a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0-4.5c5 0 9.27 3.11 11 7.5c-1.73 4.39-6 7.5-11 7.5S2.73 16.39 1 12c1.73-4.39 6-7.5 11-7.5M3.18 12a9.821 9.821 0 0 0 17.64 0a9.821 9.821 0 0 0-17.64 0\"/></svg>`,\n  'mdi-square-edit-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M5 3c-1.11 0-2 .89-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7h-2v7H5V5h7V3H5m12.78 1a.69.69 0 0 0-.48.2l-1.22 1.21l2.5 2.5L19.8 6.7c.26-.26.26-.7 0-.95L18.25 4.2c-.13-.13-.3-.2-.47-.2m-2.41 2.12L8 13.5V16h2.5l7.37-7.38l-2.5-2.5Z\"/></svg>`,\n  'mdi-square-rounded': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M8 3h8c2.76 0 5 2.24 5 5v8c0 2.76-2.24 5-5 5H8c-2.76 0-5-2.24-5-5V8c0-2.76 2.24-5 5-5\"/></svg>`,\n  'mdi-text-search': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m19.31 18.9l3.08 3.1L21 23.39l-3.12-3.07c-.69.43-1.51.68-2.38.68c-2.5 0-4.5-2-4.5-4.5s2-4.5 4.5-4.5s4.5 2 4.5 4.5c0 .88-.25 1.71-.69 2.4m-3.81.1a2.5 2.5 0 0 0 0-5a2.5 2.5 0 0 0 0 5M21 4v2H3V4h18M3 16v-2h6v2H3m0-5V9h18v2h-2.03c-1.01-.63-2.2-1-3.47-1s-2.46.37-3.47 1H3Z\"/></svg>`,\n  'mdi-theme-light-dark': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M7.5 2c-1.79 1.15-3 3.18-3 5.5s1.21 4.35 3.03 5.5C4.46 13 2 10.54 2 7.5A5.5 5.5 0 0 1 7.5 2m11.57 1.5l1.43 1.43L4.93 20.5L3.5 19.07L19.07 3.5m-6.18 2.43L11.41 5L9.97 6l.42-1.7L9 3.24l1.75-.12l.58-1.65L12 3.1l1.73.03l-1.35 1.13l.51 1.67m-3.3 3.61l-1.16-.73l-1.12.78l.34-1.32l-1.09-.83l1.36-.09l.45-1.29l.51 1.27l1.36.03l-1.05.87l.4 1.31M19 13.5a5.5 5.5 0 0 1-5.5 5.5c-1.22 0-2.35-.4-3.26-1.07l7.69-7.69c.67.91 1.07 2.04 1.07 3.26m-4.4 6.58l2.77-1.15l-.24 3.35l-2.53-2.2m4.33-2.7l1.15-2.77l2.2 2.54l-3.35.23m1.15-4.96l-1.14-2.78l3.34.24l-2.2 2.54M9.63 18.93l2.77 1.15l-2.53 2.19l-.24-3.34Z\"/></svg>`,\n  'mdi-tools': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m21.71 20.29l-1.42 1.42a1 1 0 0 1-1.41 0L7 9.85A3.81 3.81 0 0 1 6 10a4 4 0 0 1-3.78-5.3l2.54 2.54l.53-.53l1.42-1.42l.53-.53L4.7 2.22A4 4 0 0 1 10 6a3.81 3.81 0 0 1-.15 1l11.86 11.88a1 1 0 0 1 0 1.41M2.29 18.88a1 1 0 0 0 0 1.41l1.42 1.42a1 1 0 0 0 1.41 0l5.47-5.46l-2.83-2.83M20 2l-4 2v2l-2.17 2.17l2 2L18 8h2l2-4Z\"/></svg>`,\n  'mdi-typescript': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M3 3h18v18H3V3m10.71 14.86c.5.98 1.51 1.73 3.09 1.73c1.6 0 2.8-.83 2.8-2.36c0-1.41-.81-2.04-2.25-2.66l-.42-.18c-.73-.31-1.04-.52-1.04-1.02c0-.41.31-.73.81-.73c.48 0 .8.21 1.09.73l1.31-.87c-.55-.96-1.33-1.33-2.4-1.33c-1.51 0-2.48.96-2.48 2.23c0 1.38.81 2.03 2.03 2.55l.42.18c.78.34 1.24.55 1.24 1.13c0 .48-.45.83-1.15.83c-.83 0-1.31-.43-1.67-1.03l-1.38.8M13 11.25H8v1.5h1.5V20h1.75v-7.25H13v-1.5Z\"/></svg>`,\n  'mdi-undo': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12.5 8c-2.65 0-5.05 1-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88c3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8Z\"/></svg>`,\n  'mdi-weather-night': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m17.75 4.09l-2.53 1.94l.91 3.06l-2.63-1.81l-2.63 1.81l.91-3.06l-2.53-1.94L12.44 4l1.06-3l1.06 3zm3.5 6.91l-1.64 1.25l.59 1.98l-1.7-1.17l-1.7 1.17l.59-1.98L15.75 11l2.06-.05L18.5 9l.69 1.95zm-2.28 4.95c.83-.08 1.72 1.1 1.19 1.85c-.32.45-.66.87-1.08 1.27C15.17 23 8.84 23 4.94 19.07c-3.91-3.9-3.91-10.24 0-14.14c.4-.4.82-.76 1.27-1.08c.75-.53 1.93.36 1.85 1.19c-.27 2.86.69 5.83 2.89 8.02a9.96 9.96 0 0 0 8.02 2.89m-1.64 2.02a12.08 12.08 0 0 1-7.8-3.47c-2.17-2.19-3.33-5-3.49-7.82c-2.81 3.14-2.7 7.96.31 10.98c3.02 3.01 7.84 3.12 10.98.31\"/></svg>`,\n  'mdi-white-balance-sunny': `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"m3.55 19.09l1.41 1.41l1.8-1.79l-1.42-1.42M12 6c-3.31 0-6 2.69-6 6s2.69 6 6 6s6-2.69 6-6c0-3.32-2.69-6-6-6m8 7h3v-2h-3m-2.76 7.71l1.8 1.79l1.41-1.41l-1.79-1.8M20.45 5l-1.41-1.4l-1.8 1.79l1.42 1.42M13 1h-2v3h2M6.76 5.39L4.96 3.6L3.55 5l1.79 1.81zM1 13h3v-2H1m12 9h-2v3h2\"/></svg>`\n}",
          "description": "Icônes utilisées par les éléments Enibook."
        },
        {
          "kind": "function",
          "name": "svgIcon",
          "return": {
            "type": {
              "text": "TemplateResult"
            }
          },
          "parameters": [
            {
              "name": "icon",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "icons",
          "declaration": {
            "name": "icons",
            "module": "src/utilities/icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "svgIcon",
          "declaration": {
            "name": "svgIcon",
            "module": "src/utilities/icons.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/request.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "requestIncludeFile",
          "return": {
            "type": {
              "text": "Promise<IncludeFile>"
            }
          },
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "mode",
              "default": "'cors'",
              "type": {
                "text": "'cors' | 'no-cors' | 'same-origin'"
              }
            }
          ],
          "description": "Récupère un fichier d'inclusion à partir d'une source distante.\nLa mise en cache est activée afin que l'origine ne soit interrogée qu'une seule fois."
        },
        {
          "kind": "function",
          "name": "fetchContent",
          "return": {
            "type": {
              "text": "Promise<string>"
            }
          },
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "fetchSrc",
          "return": {
            "type": {
              "text": "Promise<string>"
            }
          },
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requestIncludeFile",
          "declaration": {
            "name": "requestIncludeFile",
            "module": "src/utilities/request.ts"
          }
        },
        {
          "kind": "js",
          "name": "fetchContent",
          "declaration": {
            "name": "fetchContent",
            "module": "src/utilities/request.ts"
          }
        },
        {
          "kind": "js",
          "name": "fetchSrc",
          "declaration": {
            "name": "fetchSrc",
            "module": "src/utilities/request.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/run-script.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "runScript",
          "parameters": [
            {
              "name": "script",
              "type": {
                "text": "HTMLScriptElement"
              }
            }
          ],
          "description": "Crée une copie d'un script et remplace l'original par la copie pour que le navigateur l'exécute."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "runScript",
          "declaration": {
            "name": "runScript",
            "module": "src/utilities/run-script.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/system.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "system",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "system",
          "declaration": {
            "name": "system",
            "module": "src/utilities/system.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/clock/clock.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ClockIt",
          "declaration": {
            "name": "ClockIt",
            "module": "dist/elements/clock/clock.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/color/color.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ColorIt",
          "declaration": {
            "name": "ColorIt",
            "module": "dist/elements/color/color.js"
          }
        },
        {
          "kind": "js",
          "name": "colorNames",
          "declaration": {
            "name": "colorNames",
            "module": "dist/elements/color/color.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/code/code-keymap.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "getKeymap",
          "declaration": {
            "name": "getKeymap",
            "module": "dist/elements/code/code-keymap.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/code/code.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "CodeIt",
          "declaration": {
            "name": "CodeIt",
            "module": "dist/elements/code/code.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/answer-form/answer-form.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "AnswerForm",
          "declaration": {
            "name": "AnswerForm",
            "module": "dist/elements/answer-form/answer-form.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/frame/frame.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "FrameIt",
          "declaration": {
            "name": "FrameIt",
            "module": "dist/elements/frame/frame.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/icon/icon.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "IconIt",
          "declaration": {
            "name": "IconIt",
            "module": "dist/elements/icon/icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/lorem-ipsum/dictionary.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "dictionary",
          "declaration": {
            "name": "dictionary",
            "module": "dist/elements/lorem-ipsum/dictionary.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/lorem-ipsum/lorem-ipsum.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "LoremIpsumIt",
          "declaration": {
            "name": "LoremIpsumIt",
            "module": "dist/elements/lorem-ipsum/lorem-ipsum.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/base/base.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "BaseIt",
          "declaration": {
            "name": "BaseIt",
            "module": "dist/elements/base/base.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/playground/playground.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "PlaygroundIt",
          "declaration": {
            "name": "PlaygroundIt",
            "module": "dist/elements/playground/playground.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/python/python.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "PythonIt",
          "declaration": {
            "name": "PythonIt",
            "module": "dist/elements/python/python.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/theme/theme.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ThemeIt",
          "declaration": {
            "name": "ThemeIt",
            "module": "dist/elements/theme/theme.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/toggle/toggle.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleIt",
          "declaration": {
            "name": "ToggleIt",
            "module": "dist/elements/toggle/toggle.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/toolbar/toolbar.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ToolbarIt",
          "declaration": {
            "name": "ToolbarIt",
            "module": "dist/elements/toolbar/toolbar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/tools/tools.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ToolsIt",
          "declaration": {
            "name": "ToolsIt",
            "module": "dist/elements/tools/tools.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/answer-form/answer-form.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "AnswerForm",
          "declaration": {
            "name": "AnswerForm",
            "module": "cdn/elements/answer-form/answer-form.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/base/base.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "BaseIt",
          "declaration": {
            "name": "BaseIt",
            "module": "cdn/elements/base/base.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/clock/clock.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ClockIt",
          "declaration": {
            "name": "ClockIt",
            "module": "cdn/elements/clock/clock.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/code/code-keymap.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "getKeymap",
          "declaration": {
            "name": "getKeymap",
            "module": "cdn/elements/code/code-keymap.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/code/code.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "CodeIt",
          "declaration": {
            "name": "CodeIt",
            "module": "cdn/elements/code/code.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/color/color.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ColorIt",
          "declaration": {
            "name": "ColorIt",
            "module": "cdn/elements/color/color.js"
          }
        },
        {
          "kind": "js",
          "name": "colorNames",
          "declaration": {
            "name": "colorNames",
            "module": "cdn/elements/color/color.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/frame/frame.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "FrameIt",
          "declaration": {
            "name": "FrameIt",
            "module": "cdn/elements/frame/frame.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/icon/icon.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "IconIt",
          "declaration": {
            "name": "IconIt",
            "module": "cdn/elements/icon/icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/lorem-ipsum/dictionary.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "dictionary",
          "declaration": {
            "name": "dictionary",
            "module": "cdn/elements/lorem-ipsum/dictionary.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/lorem-ipsum/lorem-ipsum.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "LoremIpsumIt",
          "declaration": {
            "name": "LoremIpsumIt",
            "module": "cdn/elements/lorem-ipsum/lorem-ipsum.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/playground/playground.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "PlaygroundIt",
          "declaration": {
            "name": "PlaygroundIt",
            "module": "cdn/elements/playground/playground.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/python/python.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "PythonIt",
          "declaration": {
            "name": "PythonIt",
            "module": "cdn/elements/python/python.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/toggle/toggle.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleIt",
          "declaration": {
            "name": "ToggleIt",
            "module": "cdn/elements/toggle/toggle.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/tools/tools.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ToolsIt",
          "declaration": {
            "name": "ToolsIt",
            "module": "cdn/elements/tools/tools.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/theme/theme.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ThemeIt",
          "declaration": {
            "name": "ThemeIt",
            "module": "cdn/elements/theme/theme.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/toolbar/toolbar.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ToolbarIt",
          "declaration": {
            "name": "ToolbarIt",
            "module": "cdn/elements/toolbar/toolbar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/base/base.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/base/base.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/base/base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Classe de base pour les éléments personnalisés EniBook",
          "name": "BaseIt",
          "members": [
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`)."
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran."
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseIt",
          "declaration": {
            "name": "BaseIt",
            "module": "src/elements/base/base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/answer-form/answer-form.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/answer-form/answer-form.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/answer-form/answer-form.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnswerForm",
          "members": [
            {
              "kind": "field",
              "name": "preview",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "preview",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "answer",
              "type": {
                "text": "unknown"
              },
              "description": "Réponse",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Réinitialisation du formulaire"
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "preview",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "preview"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseIt",
            "module": "/src/elements/base/base.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnswerForm",
          "declaration": {
            "name": "AnswerForm",
            "module": "src/elements/answer-form/answer-form.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/code/code-keymap.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getKeymap",
          "return": {
            "type": {
              "text": "{ name: string; key: string; run: Command }[]"
            }
          },
          "description": "Raccourcis clavier"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getKeymap",
          "declaration": {
            "name": "getKeymap",
            "module": "src/elements/code/code-keymap.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/code/code.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/code/code.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/code/code.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Editeur de code.",
          "name": "CodeIt",
          "cssParts": [
            {
              "description": "Le conteneur de l'éditeur.",
              "name": "editor"
            },
            {
              "description": "Le conteneur du bouton d'accessibilité aux barres d'outils et d'information.",
              "name": "menuButton"
            },
            {
              "description": "Le conteneur de la barre d'information.",
              "name": "statusbar"
            },
            {
              "description": "Le conteneur de la barre d'outils.",
              "name": "toolbar"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "keymap",
              "type": {
                "text": "{ name: string; key: string; run: Command }[]"
              },
              "static": true,
              "description": "Raccourcis clavier"
            },
            {
              "kind": "field",
              "name": "View",
              "type": {
                "text": "EditorView"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "_language",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "'text'"
            },
            {
              "kind": "field",
              "name": "_placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "\"F1: afficher/masquer les barres d'outils et d'informations\""
            },
            {
              "kind": "field",
              "name": "_readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_indentSize",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "2"
            },
            {
              "kind": "field",
              "name": "_theme",
              "type": {
                "text": "'dark' | 'light'"
              },
              "privacy": "protected",
              "default": "'dark'"
            },
            {
              "kind": "field",
              "name": "theEditor",
              "type": {
                "text": "EditorView"
              }
            },
            {
              "kind": "field",
              "name": "extensions",
              "type": {
                "text": "(Extension | (StateField<boolean> | Extension)[])[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "initialCode",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "languageConfig",
              "privacy": "protected",
              "default": "new Compartment()"
            },
            {
              "kind": "field",
              "name": "lineNumbersConfig",
              "privacy": "protected",
              "default": "new Compartment()"
            },
            {
              "kind": "field",
              "name": "placeholderConfig",
              "privacy": "protected",
              "default": "new Compartment()"
            },
            {
              "kind": "field",
              "name": "readOnlyConfig",
              "privacy": "protected",
              "default": "new Compartment()"
            },
            {
              "kind": "field",
              "name": "indentationConfig",
              "privacy": "protected",
              "default": "new Compartment()"
            },
            {
              "kind": "field",
              "name": "themeConfig",
              "privacy": "protected",
              "default": "new Compartment()"
            },
            {
              "kind": "field",
              "name": "editorContainer",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "iframe",
              "type": {
                "text": "HTMLIFrameElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "menuLanguages",
              "type": {
                "text": "SlMenu"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "languageMenuItems",
              "type": {
                "text": "SlMenuItem[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "cursorLine",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "cursorColumn",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "message",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "indentSize",
              "type": {
                "text": "number"
              },
              "description": "Nombre d'espaces par indentation (défaut: 2).",
              "attribute": "indent-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "language",
              "type": {
                "text": "string"
              },
              "description": "Langage à éditer (défaut: `text`).",
              "attribute": "language",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "lineNumbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Numéros de lignes (défaut: `false`).",
              "attribute": "line-numbers",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Invite de l'éditeur.",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "Mode « lecture seule » (ie. modifications interdites; défaut: `false`).",
              "attribute": "read-only",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "codeFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source à éditer.",
              "attribute": "code-filename",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "'light' | 'dark'"
              },
              "description": "Le thème (clair: `light` ou sombre: `dark`) de l'éditeur (défaut: `dark`).",
              "attribute": "theme",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "toolbar",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Affiche les barres d'outils et d'informations.",
              "attribute": "toolbar",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Le contenu de l'éditeur."
            },
            {
              "kind": "field",
              "name": "answer",
              "type": {
                "text": "unknown"
              },
              "description": "Réponse de l'éditeur.",
              "readonly": true,
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "kind": "method",
              "name": "createListeners",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "getHelpUrl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "getInitialExtensions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "(Extension | (StateField<boolean> | Extension)[])[]"
                }
              }
            },
            {
              "kind": "field",
              "name": "validLanguages",
              "type": {
                "text": "string[]"
              },
              "description": "Liste des langages reconnus par l'éditeur",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleCopyClipboard",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleLineNumbers",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleSelectCommand",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSelectLanguage",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isValidLanguage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "language",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Teste si un langage fait partie des langages reconnus par l'éditeur."
            },
            {
              "kind": "method",
              "name": "renderCommentButtons",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderFeedbackButton",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderHistoryButtons",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderIndentationButtons",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderKeymapButton",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderMiscButtons",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderSearchButtons",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderStatusBar",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderToolbar",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderToolbarsButton",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderToolsButtons",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Réinitialisation de l'éditeur.",
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLanguageExtension",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setPlaceholderExtension",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setReadOnlyExtension",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setIndentationExtension",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setThemeExtension",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "toggleTheme",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "preview",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "preview",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "indent-size",
              "type": {
                "text": "number"
              },
              "description": "Nombre d'espaces par indentation (défaut: 2).",
              "fieldName": "indentSize"
            },
            {
              "name": "language",
              "type": {
                "text": "string"
              },
              "description": "Langage à éditer (défaut: `text`).",
              "fieldName": "language"
            },
            {
              "name": "line-numbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Numéros de lignes (défaut: `false`).",
              "fieldName": "lineNumbers"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Invite de l'éditeur.",
              "fieldName": "placeholder"
            },
            {
              "name": "read-only",
              "type": {
                "text": "boolean"
              },
              "description": "Mode « lecture seule » (ie. modifications interdites; défaut: `false`).",
              "fieldName": "readOnly"
            },
            {
              "name": "code-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source à éditer.",
              "fieldName": "codeFilename"
            },
            {
              "name": "theme",
              "type": {
                "text": "'light' | 'dark'"
              },
              "description": "Le thème (clair: `light` ou sombre: `dark`) de l'éditeur (défaut: `dark`).",
              "fieldName": "theme"
            },
            {
              "name": "toolbar",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Affiche les barres d'outils et d'informations.",
              "fieldName": "toolbar"
            },
            {
              "name": "preview",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "preview",
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "AnswerForm",
            "module": "/src/elements/answer-form/answer-form.js"
          },
          "summary": "Editeur de code source.",
          "tagName": "code-it",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CodeIt",
          "declaration": {
            "name": "CodeIt",
            "module": "src/elements/code/code.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "code-it",
          "declaration": {
            "name": "CodeIt",
            "module": "src/elements/code/code.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/color/color.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/color/color.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/color/color.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "colorNames",
          "type": {
            "text": "string[]"
          },
          "default": "[\n  'gray',\n  'red',\n  'orange',\n  'amber',\n  'yellow',\n  'lime',\n  'green',\n  'emerald',\n  'teal',\n  'cyan',\n  'sky',\n  'blue',\n  'indigo',\n  'violet',\n  'purple',\n  'fuchsia',\n  'pink',\n  'rose'\n]"
        },
        {
          "kind": "class",
          "description": "",
          "name": "ColorIt",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "default": "'purple'",
              "description": "Couleur courante (défaut : `purple`)",
              "attribute": "color",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "range",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "Nuance de couleur (de 1 à 9, défaut : 5).",
              "attribute": "range",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'small'",
              "description": "Taille du bouton (défaut : `small`).",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "cssPrimaryColor",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Couleur principale du thème à l'aide des primitives [`shoelace`](https://shoelace.style/tokens/color)."
            },
            {
              "kind": "field",
              "name": "colors",
              "type": {
                "text": "{ name: string; value: string }[]"
              },
              "privacy": "public",
              "description": "Couleurs disponibles",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleChangeRange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "initLocalStorage",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setPrimaryColor",
              "privacy": "protected",
              "description": "Modifie la couleur principale du thème."
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "color",
              "type": {
                "text": "string"
              },
              "default": "'purple'",
              "description": "Couleur courante (défaut : `purple`)",
              "fieldName": "color"
            },
            {
              "name": "range",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "Nuance de couleur (de 1 à 9, défaut : 5).",
              "fieldName": "range"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'small'",
              "description": "Taille du bouton (défaut : `small`).",
              "fieldName": "size"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseIt",
            "module": "/src/elements/base/base.js"
          },
          "tagName": "color-it",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "colorNames",
          "declaration": {
            "name": "colorNames",
            "module": "src/elements/color/color.ts"
          }
        },
        {
          "kind": "js",
          "name": "ColorIt",
          "declaration": {
            "name": "ColorIt",
            "module": "src/elements/color/color.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "color-it",
          "declaration": {
            "name": "ColorIt",
            "module": "src/elements/color/color.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/clock/clock.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/clock/clock.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/clock/clock.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Horloge",
          "name": "ClockIt",
          "cssParts": [
            {
              "description": "le conteneur principal",
              "name": "base"
            },
            {
              "description": "le conteneur du bouton",
              "name": "button"
            },
            {
              "description": "le conteneur du menu déroulant",
              "name": "menu"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_state",
              "type": {
                "text": "State"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Afficher la date (défaut: `false`).",
              "attribute": "date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "time",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Afficher l'heure (défaut: `false`).",
              "attribute": "time",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'small'",
              "description": "Taille de l'horloge",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleClickButton",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setClock",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "date",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Afficher la date (défaut: `false`).",
              "fieldName": "date"
            },
            {
              "name": "time",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Afficher l'heure (défaut: `false`).",
              "fieldName": "time"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'small'",
              "description": "Taille de l'horloge",
              "fieldName": "size"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseIt",
            "module": "/src/elements/base/base.js"
          },
          "summary": "Horloge numérique indiquant l'heure et la date courantes.",
          "tagName": "clock-it",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ClockIt",
          "declaration": {
            "name": "ClockIt",
            "module": "src/elements/clock/clock.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "clock-it",
          "declaration": {
            "name": "ClockIt",
            "module": "src/elements/clock/clock.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/frame/frame.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/frame/frame.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/frame/frame.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FrameIt",
          "members": [
            {
              "kind": "field",
              "name": "baseElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "frameElement",
              "type": {
                "text": "HTMLIFrameElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Le bord de la frame",
              "attribute": "border",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "mainFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter dans la section `<main>`.",
              "attribute": "main-filename",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<head>` du template HTML.",
              "attribute": "head-filename",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headerFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à insérer au début de la section `<body>` du template HTML.",
              "attribute": "header-filename",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "footerFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<body>` du template HTML.",
              "attribute": "footer-filename",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "url",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "URL de la page à intégrer dans la frame.",
              "attribute": "url",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "srcDoc",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Contenu de la page à intégrer qui surcharge celui indiqué par `url`."
            },
            {
              "kind": "method",
              "name": "getTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "OptionsTemplate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "resizeIFrameHeight",
              "parameters": [
                {
                  "name": "height",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Le bord de la frame",
              "fieldName": "border"
            },
            {
              "name": "main-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter dans la section `<main>`.",
              "fieldName": "mainFilename"
            },
            {
              "name": "head-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<head>` du template HTML.",
              "fieldName": "headFilename"
            },
            {
              "name": "header-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à insérer au début de la section `<body>` du template HTML.",
              "fieldName": "headerFilename"
            },
            {
              "name": "footer-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<body>` du template HTML.",
              "fieldName": "footerFilename"
            },
            {
              "name": "url",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "URL de la page à intégrer dans la frame.",
              "fieldName": "url"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseIt",
            "module": "/src/elements/base/base.js"
          },
          "tagName": "frame-it",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FrameIt",
          "declaration": {
            "name": "FrameIt",
            "module": "src/elements/frame/frame.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "frame-it",
          "declaration": {
            "name": "FrameIt",
            "module": "src/elements/frame/frame.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/icon/icon.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/icon/icon.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/icon/icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IconIt",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'mdi-block-helper'",
              "description": "Nom de l'icône (défaut: `mdi-block-helper`)",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'mdi-block-helper'",
              "description": "Nom de l'icône (défaut: `mdi-block-helper`)",
              "fieldName": "name"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseIt",
            "module": "/src/elements/base/base.js"
          },
          "tagName": "icon-it",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IconIt",
          "declaration": {
            "name": "IconIt",
            "module": "src/elements/icon/icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "icon-it",
          "declaration": {
            "name": "IconIt",
            "module": "src/elements/icon/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/lorem-ipsum/dictionary.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "dictionary",
          "type": {
            "text": "string[]"
          },
          "default": "[\n  'enib',\n  'lorem',\n  'ipsum',\n  'dolor',\n  'sit',\n  'amet,',\n  'consectetur',\n  'adipiscing',\n  'elit',\n  'ut',\n  'aliquam,',\n  'purus',\n  'sit',\n  'amet',\n  'luctus',\n  'venenatis,',\n  'lectus',\n  'magna',\n  'fringilla',\n  'urna,',\n  'porttitor',\n  'rhoncus',\n  'dolor',\n  'purus',\n  'non',\n  'enim',\n  'enit',\n  'enise',\n  'gepi',\n  'praesent',\n  'elementum',\n  'facilisis',\n  'leo,',\n  'vel',\n  'fringilla',\n  'est',\n  'ullamcorper',\n  'eget',\n  'nulla',\n  'facilisi',\n  'etiam',\n  'dignissim',\n  'diam',\n  'quis',\n  'lobortis',\n  'scelerisque',\n  'fermentum',\n  'dui',\n  'faucibus',\n  'in',\n  'ornare',\n  'quam',\n  'viverra',\n  'orci',\n  'sagittis',\n  'eu',\n  'volutpat',\n  'odio',\n  'facilisis',\n  'mauris',\n  'sit',\n  'amet',\n  'massa',\n  'vitae',\n  'tortor',\n  'condimentum',\n  'lacinia',\n  'quis',\n  'vel',\n  'eros',\n  'donec',\n  'ac',\n  'odio',\n  'tempor',\n  'orci',\n  'dapibus',\n  'ultrices',\n  'in',\n  'iaculis',\n  'nunc',\n  'sed',\n  'augue',\n  'lacus,',\n  'viverra',\n  'vitae',\n  'congue',\n  'eu,',\n  'consequat',\n  'ac',\n  'felis',\n  'donec',\n  'et',\n  'odio',\n  'pellentesque',\n  'diam',\n  'volutpat',\n  'commodo',\n  'sed',\n  'egestas',\n  'egestas',\n  'fringilla',\n  'phasellus',\n  'faucibus',\n  'scelerisque',\n  'eleifend',\n  'donec',\n  'pretium',\n  'vulputate',\n  'sapien',\n  'nec',\n  'sagittis',\n  'aliquam',\n  'malesuada',\n  'bibendum',\n  'arcu',\n  'vitae',\n  'elementum',\n  'curabitur',\n  'vitae',\n  'nunc',\n  'sed',\n  'velit',\n  'dignissim',\n  'sodales',\n  'ut',\n  'eu',\n  'sem',\n  'integer',\n  'vitae',\n  'justo',\n  'eget',\n  'magna',\n  'fermentum',\n  'iaculis',\n  'eu',\n  'non',\n  'diam',\n  'phasellus',\n  'vestibulum',\n  'lorem',\n  'sed',\n  'risus',\n  'ultricies',\n  'tristique',\n  'nulla',\n  'aliquet',\n  'tortor,',\n  'at',\n  'auctor',\n  'urna',\n  'nunc',\n  'id',\n  'cursus',\n  'metus',\n  'aliquam',\n  'eleifend',\n  'mi',\n  'in',\n  'nulla',\n  'posuere',\n  'sollicitudin',\n  'aliquam',\n  'ultrices',\n  'sagittis',\n  'orci,',\n  'a',\n  'scelerisque',\n  'purus',\n  'semper',\n  'eget',\n  'duis',\n  'at',\n  'tellus',\n  'at',\n  'urna',\n  'condimentum',\n  'mattis',\n  'pellentesque',\n  'id',\n  'nibh',\n  'tortor,',\n  'id',\n  'aliquet',\n  'lectus',\n  'proin',\n  'nibh',\n  'nisl,',\n  'condimentum',\n  'id',\n  'venenatis',\n  'a,',\n  'condimentum',\n  'vitae',\n  'sapien',\n  'pellentesque',\n  'habitant',\n  'morbi',\n  'tristique',\n  'senectus',\n  'et',\n  'netus',\n  'et',\n  'malesuada',\n  'fames',\n  'ac',\n  'turpis',\n  'egestas',\n  'sed',\n  'tempus,',\n  'urna',\n  'et',\n  'pharetra',\n  'pharetra,',\n  'massa',\n  'massa',\n  'ultricies',\n  'mi,',\n  'quis',\n  'hendrerit',\n  'dolor',\n  'magna',\n  'eget',\n  'est',\n  'lorem',\n  'ipsum',\n  'dolor',\n  'sit',\n  'amet,',\n  'consectetur',\n  'adipiscing',\n  'elit',\n  'pellentesque',\n  'habitant',\n  'morbi',\n  'tristique',\n  'senectus',\n  'et',\n  'netus',\n  'et',\n  'malesuada',\n  'fames',\n  'ac',\n  'turpis',\n  'egestas',\n  'integer',\n  'eget',\n  'aliquet',\n  'nibh',\n  'praesent',\n  'tristique',\n  'magna',\n  'sit',\n  'amet',\n  'purus',\n  'gravida',\n  'quis',\n  'blandit',\n  'turpis',\n  'cursus',\n  'in',\n  'hac',\n  'habitasse',\n  'platea',\n  'dictumst',\n  'quisque',\n  'sagittis,',\n  'purus',\n  'sit',\n  'amet',\n  'volutpat',\n  'consequat,',\n  'mauris',\n  'nunc',\n  'congue',\n  'nisi,',\n  'vitae',\n  'suscipit',\n  'tellus',\n  'mauris',\n  'a',\n  'diam',\n  'maecenas',\n  'sed',\n  'ut',\n  'sem',\n  'viverra',\n  'aliquet',\n  'eget',\n  'sit',\n  'amet',\n  'tellus',\n  'cras',\n  'adipiscing',\n  'eu',\n  'turpis',\n  'egestas',\n  'pretium',\n  'aenean',\n  'pharetra,',\n  'magna',\n  'ac',\n  'placerat',\n  'vestibulum,',\n  'lectus',\n  'mauris',\n  'ultrices',\n  'eros,',\n  'in',\n  'cursus',\n  'turpis',\n  'massa',\n  'tincidunt',\n  'dui',\n  'ut',\n  'ornare',\n  'lectus',\n  'sit',\n  'amet',\n  'est',\n  'placerat',\n  'in',\n  'egestas',\n  'erat',\n  'imperdiet',\n  'sed',\n  'euismod',\n  'nisi',\n  'porta',\n  'lorem',\n  'mollis',\n  'aliquam',\n  'ut',\n  'porttitor',\n  'leo',\n  'a',\n  'diam',\n  'sollicitudin',\n  'tempor',\n  'id',\n  'eu',\n  'nisl',\n  'nunc',\n  'mi',\n  'ipsum,',\n  'faucibus',\n  'vitae',\n  'aliquet',\n  'nec,',\n  'ullamcorper',\n  'sit',\n  'amet',\n  'risus',\n  'nullam',\n  'eget',\n  'felis',\n  'eget',\n  'nunc',\n  'lobortis',\n  'mattis',\n  'aliquam',\n  'faucibus',\n  'purus',\n  'in',\n  'massa',\n  'tempor',\n  'nec',\n  'feugiat',\n  'nisl',\n  'pretium',\n  'fusce',\n  'id',\n  'velit',\n  'ut',\n  'tortor',\n  'pretium',\n  'viverra',\n  'suspendisse',\n  'potenti',\n  'nullam',\n  'ac',\n  'tortor',\n  'vitae',\n  'purus',\n  'faucibus',\n  'ornare',\n  'suspendisse',\n  'sed',\n  'nisi',\n  'lacus,',\n  'sed',\n  'viverra',\n  'tellus',\n  'in',\n  'hac',\n  'habitasse',\n  'platea',\n  'dictumst',\n  'vestibulum',\n  'rhoncus',\n  'est',\n  'pellentesque',\n  'elit',\n  'ullamcorper',\n  'dignissim',\n  'cras',\n  'tincidunt',\n  'lobortis',\n  'feugiat',\n  'vivamus',\n  'at',\n  'augue',\n  'eget',\n  'arcu',\n  'dictum',\n  'varius',\n  'duis',\n  'at',\n  'consectetur',\n  'lorem',\n  'donec',\n  'massa',\n  'sapien,',\n  'faucibus',\n  'et',\n  'molestie',\n  'ac,',\n  'feugiat',\n  'sed',\n  'lectus',\n  'vestibulum',\n  'mattis',\n  'ullamcorper',\n  'velit',\n  'sed',\n  'ullamcorper',\n  'morbi',\n  'tincidunt',\n  'ornare',\n  'massa,',\n  'eget',\n  'egestas',\n  'purus',\n  'viverra',\n  'accumsan',\n  'in',\n  'nisl',\n  'nisi,',\n  'scelerisque',\n  'eu',\n  'ultrices',\n  'vitae,',\n  'auctor',\n  'eu',\n  'augue',\n  'ut',\n  'lectus',\n  'arcu,',\n  'bibendum',\n  'at',\n  'varius',\n  'vel,',\n  'pharetra',\n  'vel',\n  'turpis',\n  'nunc',\n  'eget',\n  'lorem',\n  'dolor,',\n  'sed',\n  'viverra',\n  'ipsum',\n  'nunc',\n  'aliquet',\n  'bibendum',\n  'enim,',\n  'facilisis',\n  'gravida',\n  'neque',\n  'convallis',\n  'a',\n  'cras',\n  'semper',\n  'auctor',\n  'neque,',\n  'vitae',\n  'tempus',\n  'quam',\n  'pellentesque',\n  'nec',\n  'nam',\n  'aliquam',\n  'sem',\n  'et',\n  'tortor',\n  'consequat',\n  'id',\n  'porta',\n  'nibh',\n  'enib,',\n  'venenatis',\n  'cras',\n  'sed',\n  'felis',\n  'eget',\n  'velit',\n  'aliquet',\n  'sagittis',\n  'id',\n  'consectetur',\n  'purus',\n  'ut',\n  'faucibus',\n  'pulvinar',\n  'elementum',\n  'integer',\n  'neque,',\n  'volutpat',\n  'ac',\n  'tincidunt',\n  'vitae,',\n  'semper',\n  'quis',\n  'lectus',\n  'nulla',\n  'at',\n  'volutpat',\n  'diam',\n  'ut',\n  'venenatis',\n  'tellus',\n  'in',\n  'metus',\n  'vulputate',\n  'eu',\n  'scelerisque',\n  'felis',\n  'imperdiet',\n  'proin',\n  'fermentum',\n  'leo',\n  'vel',\n  'orci',\n  'porta',\n  'non',\n  'pulvinar',\n  'neque',\n  'laoreet',\n  'suspendisse',\n  'interdum',\n  'consectetur',\n  'libero,',\n  'id',\n  'faucibus',\n  'nisl',\n  'tincidunt',\n  'eget',\n  'nullam',\n  'non',\n  'nisi',\n  'est,',\n  'sit',\n  'amet',\n  'facilisis',\n  'magna',\n  'etiam',\n  'tempor,',\n  'orci',\n  'eu',\n  'lobortis',\n  'elementum,',\n  'nibh',\n  'tellus',\n  'molestie',\n  'nunc,',\n  'non',\n  'blandit',\n  'massa',\n  'nec',\n  'dui',\n  'nunc',\n  'mattis',\n  'ut',\n  'tellus',\n  'elementum',\n  'sagittis',\n  'vitae',\n  'et',\n  'leo',\n  'duis',\n  'ut',\n  'diam',\n  'quam',\n  'nulla',\n  'porttitor',\n  'massa',\n  'id',\n  'neque',\n  'aliquam',\n  'vestibulum',\n  'morbi',\n  'blandit',\n  'cursus',\n  'risus,',\n  'at',\n  'ultrices',\n  'mi',\n  'tempus',\n  'imperdiet',\n  'nulla',\n  'malesuada',\n  'pellentesque',\n  'elit',\n  'eget',\n  'gravida',\n  'cum',\n  'sociis',\n  'natoque',\n  'penatibus',\n  'et',\n  'magnis',\n  'dis',\n  'parturient',\n  'montes,',\n  'nascetur',\n  'ridiculus',\n  'mus',\n  'mauris',\n  'vitae',\n  'ultricies',\n  'leo',\n  'integer',\n  'malesuada',\n  'nunc',\n  'vel',\n  'risus',\n  'commodo',\n  'viverra',\n  'maecenas',\n  'accumsan,',\n  'lacus',\n  'vel',\n  'facilisis',\n  'volutpat,',\n  'est',\n  'velit',\n  'egestas',\n  'dui,',\n  'id',\n  'ornare',\n  'arcu',\n  'odio',\n  'ut',\n  'sem',\n  'nulla',\n  'pharetra',\n  'diam',\n  'sit',\n  'amet',\n  'nisl',\n  'suscipit',\n  'adipiscing',\n  'bibendum',\n  'est',\n  'ultricies',\n  'integer',\n  'quis',\n  'auctor',\n  'elit',\n  'sed',\n  'vulputate',\n  'mi',\n  'sit',\n  'amet',\n  'mauris',\n  'commodo',\n  'quis',\n  'imperdiet',\n  'massa',\n  'tincidunt',\n  'nunc',\n  'pulvinar',\n  'sapien',\n  'et',\n  'ligula',\n  'ullamcorper',\n  'malesuada',\n  'proin',\n  'libero',\n  'nunc,',\n  'consequat',\n  'interdum',\n  'varius',\n  'sit',\n  'amet,',\n  'mattis',\n  'vulputate',\n  'nulla',\n  'aliquet',\n  'porttitor',\n  'lacus,',\n  'luctus',\n  'accumsan',\n  'tortor',\n  'posuere',\n  'ac',\n  'ut',\n  'consequat',\n  'semper',\n  'viverra',\n  'nam',\n  'libero',\n  'justo,',\n  'laoreet',\n  'sit',\n  'amet',\n  'cursus',\n  'sit',\n  'amet,',\n  'dictum',\n  'sit',\n  'amet',\n  'justo',\n  'donec',\n  'diam,',\n  'vulputate',\n  'ut',\n  'pharetra',\n  'sit',\n  'amet,',\n  'aliquam',\n  'id',\n  'diam',\n  'maecenas',\n  'ultricies',\n  'mi',\n  'eget',\n  'mauris',\n  'pharetra',\n  'et',\n  'ultrices',\n  'neque',\n  'ornare',\n  'aenean',\n  'euismod',\n  'elementum',\n  'nisi,',\n  'quis',\n  'eleifend',\n  'quam',\n  'adipiscing',\n  'vitae',\n  'proin',\n  'sagittis,',\n  'nisl',\n  'rhoncus',\n  'mattis',\n  'rhoncus,',\n  'urna',\n  'neque',\n  'viverra',\n  'justo,',\n  'nec',\n  'ultrices',\n  'dui',\n  'sapien',\n  'eget',\n  'mi',\n  'proin',\n  'sed',\n  'libero',\n  'enim,',\n  'sed',\n  'faucibus',\n  'turpis',\n  'in',\n  'eu',\n  'mi',\n  'bibendum',\n  'neque',\n  'egestas',\n  'congue',\n  'quisque',\n  'egestas',\n  'diam',\n  'in',\n  'arcu',\n  'cursus',\n  'euismod',\n  'quis',\n  'viverra',\n  'nibh',\n  'cras',\n  'pulvinar',\n  'mattis',\n  'nunc,',\n  'sed',\n  'blandit',\n  'libero',\n  'volutpat',\n  'sed',\n  'cras',\n  'ornare',\n  'arcu',\n  'dui',\n  'vivamus',\n  'arcu',\n  'felis,',\n  'bibendum',\n  'ut',\n  'tristique',\n  'et,',\n  'egestas',\n  'quis',\n  'ipsum',\n  'suspendisse',\n  'ultrices',\n  'gravida',\n  'dictum',\n  'fusce',\n  'ut',\n  'placerat',\n  'orci',\n  'nulla',\n  'pellentesque',\n  'dignissim',\n  'enim,',\n  'sit',\n  'amet',\n  'venenatis',\n  'urna',\n  'cursus',\n  'eget',\n  'nunc',\n  'scelerisque',\n  'viverra',\n  'mauris,',\n  'in',\n  'aliquam',\n  'sem',\n  'fringilla',\n  'ut',\n  'morbi',\n  'tincidunt',\n  'augue',\n  'interdum',\n  'velit',\n  'euismod',\n  'in',\n  'pellentesque',\n  'massa',\n  'placerat',\n  'duis',\n  'ultricies',\n  'lacus',\n  'sed',\n  'turpis',\n  'tincidunt',\n  'id',\n  'aliquet',\n  'risus',\n  'feugiat',\n  'in',\n  'ante',\n  'metus,',\n  'dictum',\n  'at',\n  'tempor',\n  'commodo,',\n  'ullamcorper',\n  'a',\n  'lacus',\n  'vestibulum',\n  'sed',\n  'arcu',\n  'non',\n  'odio',\n  'euismod',\n  'lacinia',\n  'at',\n  'quis',\n  'risus',\n  'sed',\n  'vulputate',\n  'odio',\n  'ut',\n  'blandit',\n  'volutpat',\n  'maecenas',\n  'volutpat',\n  'blandit',\n  'aliquam',\n  'etiam',\n  'erat',\n  'velit,',\n  'scelerisque',\n  'in',\n  'dictum',\n  'non,',\n  'consectetur',\n  'a',\n  'erat',\n  'nam',\n  'at',\n  'lectus',\n  'urna',\n  'duis',\n  'convallis',\n  'convallis',\n  'tellus,',\n  'id',\n  'interdum',\n  'velit',\n  'laoreet',\n  'id',\n  'donec',\n  'ultrices',\n  'tincidunt',\n  'arcu,',\n  'non',\n  'sodales',\n  'neque',\n  'sodales',\n  'ut',\n  'etiam',\n  'sit',\n  'amet',\n  'nisl',\n  'purus,',\n  'in',\n  'mollis',\n  'nunc',\n  'sed',\n  'id',\n  'semper',\n  'risus',\n  'in',\n  'hendrerit',\n  'gravida',\n  'rutrum',\n  'quisque',\n  'non',\n  'tellus',\n  'orci,',\n  'ac',\n  'auctor',\n  'augue',\n  'mauris',\n  'augue',\n  'neque,',\n  'gravida',\n  'in',\n  'fermentum',\n  'et,',\n  'sollicitudin',\n  'ac',\n  'orci',\n  'phasellus',\n  'egestas',\n  'tellus',\n  'rutrum',\n  'tellus',\n  'pellentesque',\n  'eu',\n  'tincidunt',\n  'tortor',\n  'aliquam',\n  'nulla',\n  'facilisi',\n  'cras',\n  'fermentum,',\n  'odio',\n  'eu',\n  'feugiat',\n  'pretium,',\n  'nibh',\n  'ipsum',\n  'consequat',\n  'nisl,',\n  'vel',\n  'pretium',\n  'lectus',\n  'quam',\n  'id',\n  'leo',\n  'in',\n  'vitae',\n  'turpis',\n  'massa',\n  'sed',\n  'elementum',\n  'tempus',\n  'egestas',\n  'sed',\n  'sed',\n  'risus',\n  'pretium',\n  'quam',\n  'vulputate',\n  'dignissim',\n  'suspendisse',\n  'in',\n  'est',\n  'ante',\n  'in',\n  'nibh',\n  'mauris,',\n  'cursus',\n  'mattis',\n  'molestie',\n  'a,',\n  'iaculis',\n  'at',\n  'erat',\n  'pellentesque',\n  'adipiscing',\n  'commodo',\n  'elit,',\n  'at',\n  'imperdiet',\n  'dui',\n  'accumsan',\n  'sit',\n  'amet',\n  'nulla',\n  'facilisi',\n  'morbi',\n  'tempus',\n  'iaculis',\n  'urna,',\n  'id',\n  'volutpat',\n  'lacus',\n  'laoreet',\n  'non',\n  'curabitur',\n  'gravida',\n  'arcu',\n  'ac',\n  'tortor',\n  'dignissim',\n  'convallis',\n  'aenean',\n  'et',\n  'tortor',\n  'at',\n  'risus',\n  'viverra',\n  'adipiscing',\n  'at',\n  'in',\n  'tellus',\n  'integer',\n  'feugiat',\n  'scelerisque',\n  'varius',\n  'morbi',\n  'nunc,',\n  'faucibus',\n  'a',\n  'pellentesque',\n  'sit',\n  'amet,',\n  'porttitor',\n  'eget',\n  'dolor',\n  'morbi',\n  'non',\n  'arcu',\n  'risus,',\n  'quis',\n  'varius',\n  'quam',\n  'quisque',\n  'id',\n  'diam',\n  'vel',\n  'quam',\n  'elementum',\n  'pulvinar',\n  'etiam',\n  'non',\n  'quam',\n  'lacus',\n  'suspendisse',\n  'faucibus',\n  'interdum',\n  'posuere',\n  'lorem',\n  'ipsum',\n  'dolor',\n  'sit',\n  'amet,',\n  'consectetur',\n  'adipiscing',\n  'elit',\n  'duis',\n  'tristique',\n  'sollicitudin',\n  'nibh',\n  'sit',\n  'amet',\n  'commodo',\n  'nulla',\n  'facilisi',\n  'nullam',\n  'vehicula',\n  'ipsum',\n  'a',\n  'arcu',\n  'cursus',\n  'vitae',\n  'congue',\n  'mauris',\n  'rhoncus',\n  'aenean',\n  'vel',\n  'elit',\n  'scelerisque',\n  'mauris',\n  'pellentesque',\n  'pulvinar',\n  'pellentesque',\n  'habitant',\n  'morbi',\n  'tristique',\n  'senectus',\n  'et',\n  'netus',\n  'et',\n  'malesuada',\n  'fames',\n  'ac',\n  'turpis',\n  'egestas',\n  'maecenas',\n  'pharetra',\n  'convallis',\n  'posuere',\n  'morbi',\n  'leo',\n  'urna,',\n  'molestie',\n  'at',\n  'elementum',\n  'eu,',\n  'facilisis',\n  'sed',\n  'odio',\n  'morbi',\n  'quis',\n  'commodo',\n  'odio',\n  'aenean',\n  'sed',\n  'adipiscing',\n  'diam',\n  'donec',\n  'adipiscing',\n  'tristique',\n  'risus',\n  'nec',\n  'feugiat',\n  'in',\n  'fermentum',\n  'posuere',\n  'urna',\n  'nec',\n  'tincidunt',\n  'praesent',\n  'semper',\n  'feugiat',\n  'nibh',\n  'sed',\n  'pulvinar',\n  'proin',\n  'gravida',\n  'hendrerit',\n  'lectus',\n  'a',\n  'molestie',\n  'enibook'\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dictionary",
          "declaration": {
            "name": "dictionary",
            "module": "src/elements/lorem-ipsum/dictionary.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/lorem-ipsum/lorem-ipsum.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/lorem-ipsum/lorem-ipsum.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/lorem-ipsum/lorem-ipsum.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LoremIpsumIt",
          "members": [
            {
              "kind": "field",
              "name": "count",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Nombre d'objets textuels (mots, paragraphes, phrases, items de liste) générés.",
              "attribute": "count",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'dlist' | 'olist' | 'paragraph' | 'sentence' | 'ulist' | 'word'"
              },
              "default": "'paragraph'",
              "description": "Type des objets textuels (mots, paragraphes, phrases, items de liste) générés (défaut : `paragraph`).",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "createTerm",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "createText",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "default": "'paragraph'",
                  "type": {
                    "text": "'dlist' | 'olist' | 'paragraph' | 'sentence' | 'ulist' | 'word'"
                  }
                }
              ],
              "description": "Texte aléatoire généré selon son type."
            },
            {
              "kind": "field",
              "name": "dictionary",
              "type": {
                "text": "string[]"
              },
              "privacy": "protected",
              "description": "Dictionnaire de mots.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "randomLength",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "min",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "max",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderList",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "tag",
                  "default": "'ul'"
                },
                {
                  "name": "nbListItems",
                  "default": "1"
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderParagraph",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "nbParagraphs",
                  "default": "1"
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderSentence",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "nbSentences",
                  "default": "1"
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderWord",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "nbWords",
                  "default": "1"
                }
              ]
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "count",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Nombre d'objets textuels (mots, paragraphes, phrases, items de liste) générés.",
              "fieldName": "count"
            },
            {
              "name": "type",
              "type": {
                "text": "'dlist' | 'olist' | 'paragraph' | 'sentence' | 'ulist' | 'word'"
              },
              "default": "'paragraph'",
              "description": "Type des objets textuels (mots, paragraphes, phrases, items de liste) générés (défaut : `paragraph`).",
              "fieldName": "type"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseIt",
            "module": "/src/elements/base/base.js"
          },
          "tagName": "lorem-ipsum-it",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LoremIpsumIt",
          "declaration": {
            "name": "LoremIpsumIt",
            "module": "src/elements/lorem-ipsum/lorem-ipsum.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lorem-ipsum-it",
          "declaration": {
            "name": "LoremIpsumIt",
            "module": "src/elements/lorem-ipsum/lorem-ipsum.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/playground/playground.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/playground/playground.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/playground/playground.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PlaygroundIt",
          "members": [
            {
              "kind": "field",
              "name": "initialCode",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "initialCompiledCode",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "initialHead",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "initialHeader",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "initialMain",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "initialFooter",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "editorElement",
              "type": {
                "text": "CodeIt"
              }
            },
            {
              "kind": "field",
              "name": "scriptEditorElement",
              "type": {
                "text": "CodeIt"
              }
            },
            {
              "kind": "field",
              "name": "frameElement",
              "type": {
                "text": "FrameIt"
              }
            },
            {
              "kind": "field",
              "name": "baseElement",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "editor",
              "type": {
                "text": "CodeIt"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "frame",
              "type": {
                "text": "FrameIt"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "full",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "full",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "language",
              "type": {
                "text": "string"
              },
              "default": "'text'",
              "description": "Langage à éditer (défaut: `text`).",
              "attribute": "language",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Mode « lecture seule » (ie. modifications interdites; défaut: `false`).",
              "attribute": "read-only",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "codeFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source à éditer.",
              "attribute": "code-filename",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "prefixFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source du préfixe.",
              "attribute": "prefix-filename",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "suffixFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source du suffiwe.",
              "attribute": "suffix-filename",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "mainFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter dans la section `<main>`.",
              "attribute": "main-filename",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<head>` du template HTML.",
              "attribute": "head-filename",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headerFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à insérer au début de la section `<body>` du template HTML.",
              "attribute": "header-filename",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "footerFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<body>` du template HTML.",
              "attribute": "footer-filename",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "compile",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "input",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createEditor",
              "return": {
                "type": {
                  "text": "CodeIt"
                }
              }
            },
            {
              "kind": "method",
              "name": "createFrame",
              "return": {
                "type": {
                  "text": "FrameIt"
                }
              }
            },
            {
              "kind": "method",
              "name": "createListener",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "answer",
              "type": {
                "text": "unknown"
              },
              "description": "Réponse",
              "readonly": true,
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Réinitialisation du formulaire",
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "kind": "field",
              "name": "preview",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "preview",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "full",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "full"
            },
            {
              "name": "language",
              "type": {
                "text": "string"
              },
              "default": "'text'",
              "description": "Langage à éditer (défaut: `text`).",
              "fieldName": "language"
            },
            {
              "name": "read-only",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Mode « lecture seule » (ie. modifications interdites; défaut: `false`).",
              "fieldName": "readOnly"
            },
            {
              "name": "code-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source à éditer.",
              "fieldName": "codeFilename"
            },
            {
              "name": "prefix-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source du préfixe.",
              "fieldName": "prefixFilename"
            },
            {
              "name": "suffix-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source du suffiwe.",
              "fieldName": "suffixFilename"
            },
            {
              "name": "main-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter dans la section `<main>`.",
              "fieldName": "mainFilename"
            },
            {
              "name": "head-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<head>` du template HTML.",
              "fieldName": "headFilename"
            },
            {
              "name": "header-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à insérer au début de la section `<body>` du template HTML.",
              "fieldName": "headerFilename"
            },
            {
              "name": "footer-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<body>` du template HTML.",
              "fieldName": "footerFilename"
            },
            {
              "name": "preview",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "preview",
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "AnswerForm",
            "module": "/src/elements/answer-form/answer-form.js"
          },
          "tagName": "playground-it",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PlaygroundIt",
          "declaration": {
            "name": "PlaygroundIt",
            "module": "src/elements/playground/playground.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "playground-it",
          "declaration": {
            "name": "PlaygroundIt",
            "module": "src/elements/playground/playground.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/python/python.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/python/python.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/python/python.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PythonIt",
          "members": [
            {
              "kind": "field",
              "name": "answer",
              "type": {
                "text": "unknown"
              },
              "description": "Réponse",
              "readonly": true,
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "kind": "method",
              "name": "compile",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "input",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Réinitialisation du formulaire",
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "kind": "field",
              "name": "language",
              "type": {
                "text": "string"
              },
              "default": "'python'",
              "description": "Langage à éditer (défaut: `text`).",
              "attribute": "language",
              "reflects": true,
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialHead",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "`\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/brython/3.12.0/brython.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/brython/3.12.0/brython_stdlib.min.js\"></script>\n`",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialCode",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialCompiledCode",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialHeader",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialMain",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialFooter",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "editorElement",
              "type": {
                "text": "CodeIt"
              },
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "scriptEditorElement",
              "type": {
                "text": "CodeIt"
              },
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "frameElement",
              "type": {
                "text": "FrameIt"
              },
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseElement",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "editor",
              "type": {
                "text": "CodeIt"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "frame",
              "type": {
                "text": "FrameIt"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "full",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "full",
              "reflects": true,
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Mode « lecture seule » (ie. modifications interdites; défaut: `false`).",
              "attribute": "read-only",
              "reflects": true,
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "codeFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source à éditer.",
              "attribute": "code-filename",
              "reflects": true,
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source du préfixe.",
              "attribute": "prefix-filename",
              "reflects": true,
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source du suffiwe.",
              "attribute": "suffix-filename",
              "reflects": true,
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "mainFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter dans la section `<main>`.",
              "attribute": "main-filename",
              "reflects": true,
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "headFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<head>` du template HTML.",
              "attribute": "head-filename",
              "reflects": true,
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "headerFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à insérer au début de la section `<body>` du template HTML.",
              "attribute": "header-filename",
              "reflects": true,
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "footerFilename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<body>` du template HTML.",
              "attribute": "footer-filename",
              "reflects": true,
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "method",
              "name": "createEditor",
              "return": {
                "type": {
                  "text": "CodeIt"
                }
              },
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "method",
              "name": "createFrame",
              "return": {
                "type": {
                  "text": "FrameIt"
                }
              },
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "method",
              "name": "createListener",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "kind": "field",
              "name": "preview",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "preview",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "PlaygroundIt",
            "module": "/src/elements/playground/playground.js"
          },
          "tagName": "python-it",
          "customElement": true,
          "attributes": [
            {
              "name": "full",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "full",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "name": "language",
              "type": {
                "text": "string"
              },
              "default": "'text'",
              "description": "Langage à éditer (défaut: `text`).",
              "fieldName": "language",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "name": "read-only",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Mode « lecture seule » (ie. modifications interdites; défaut: `false`).",
              "fieldName": "readOnly",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "name": "code-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source à éditer.",
              "fieldName": "codeFilename",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "name": "prefix-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source du préfixe.",
              "fieldName": "prefixFilename",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "name": "suffix-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier source du suffiwe.",
              "fieldName": "suffixFilename",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "name": "main-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter dans la section `<main>`.",
              "fieldName": "mainFilename",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "name": "head-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<head>` du template HTML.",
              "fieldName": "headFilename",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "name": "header-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à insérer au début de la section `<body>` du template HTML.",
              "fieldName": "headerFilename",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "name": "footer-filename",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Le fichier `html` dont le contenu est à ajouter en fin de la section `<body>` du template HTML.",
              "fieldName": "footerFilename",
              "inheritedFrom": {
                "name": "PlaygroundIt",
                "module": "src/elements/playground/playground.ts"
              }
            },
            {
              "name": "preview",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "preview",
              "inheritedFrom": {
                "name": "AnswerForm",
                "module": "src/elements/answer-form/answer-form.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PythonIt",
          "declaration": {
            "name": "PythonIt",
            "module": "src/elements/python/python.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "python-it",
          "declaration": {
            "name": "PythonIt",
            "module": "src/elements/python/python.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/theme/theme.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/theme/theme.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/theme/theme.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ThemeIt",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "SlMenu"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'small'",
              "description": "Taille du bouton (défaut : `small`)",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "createListeners",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "getTheme",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Thème (défaut : `system`)"
            },
            {
              "kind": "method",
              "name": "isDark",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Teste si le thème courant est le thème `dark`."
            },
            {
              "kind": "method",
              "name": "setTheme",
              "parameters": [
                {
                  "name": "newTheme",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Change le thème."
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'small'",
              "description": "Taille du bouton (défaut : `small`)",
              "fieldName": "size"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseIt",
            "module": "/src/elements/base/base.js"
          },
          "tagName": "theme-it",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ThemeIt",
          "declaration": {
            "name": "ThemeIt",
            "module": "src/elements/theme/theme.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "theme-it",
          "declaration": {
            "name": "ThemeIt",
            "module": "src/elements/theme/theme.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/toolbar/toolbar.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/toolbar/toolbar.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/toolbar/toolbar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ToolbarIt",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "fixed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Fixation de la barre d'outils (défaut : `false`).",
              "attribute": "fixed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'top'",
              "description": "position de la barre d'outils (défaut : `top`).",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "fixed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Fixation de la barre d'outils (défaut : `false`).",
              "fieldName": "fixed"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'top'",
              "description": "position de la barre d'outils (défaut : `top`).",
              "fieldName": "placement"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseIt",
            "module": "/src/elements/base/base.js"
          },
          "tagName": "toolbar-it",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToolbarIt",
          "declaration": {
            "name": "ToolbarIt",
            "module": "src/elements/toolbar/toolbar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "toolbar-it",
          "declaration": {
            "name": "ToolbarIt",
            "module": "src/elements/toolbar/toolbar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/toggle/toggle.css.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "cssToggle",
          "default": "css`\n  :host {\n    display: inline-block;\n  }\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "cssToggle",
            "module": "src/elements/toggle/toggle.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/toggle/toggle.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ToggleIt",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_toshow",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "selector",
              "type": {
                "text": "string"
              },
              "default": "'unknown'",
              "description": "Sélecteur `css` de l'élément ciblé (défaut : `unknown`).",
              "attribute": "selector",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'small'",
              "description": "Taille du bouton (défaut : `small`).",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "textShow",
              "type": {
                "text": "string"
              },
              "default": "'mdi-show-outline'",
              "description": "Texte du bouton en mode « show » (défaut : `mdi-show-outline`).",
              "attribute": "text-show",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "textHide",
              "type": {
                "text": "string"
              },
              "default": "'mdi-hide-outline'",
              "description": "Texte du bouton en mode « hide » (défaut : `mdi-hide-outline`).",
              "attribute": "text-hide",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tooltipShow",
              "default": "'Montrer'",
              "description": "Infobulle en mode « show » (défaut : `Montrer`).",
              "attribute": "tooltip-show",
              "reflects": true,
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "tooltipHide",
              "default": "'Cacher'",
              "description": "Infobulle en mode « hide » (défaut : `Cacher`).",
              "attribute": "tooltip-hide",
              "reflects": true,
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "destructuring",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Modifier la mise en page (défaut : `false`).",
              "attribute": "destructuring",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "toggleSelector",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "default": "'unknown'",
              "description": "Sélecteur `css` de l'élément ciblé (défaut : `unknown`).",
              "fieldName": "selector"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'small'",
              "description": "Taille du bouton (défaut : `small`).",
              "fieldName": "size"
            },
            {
              "name": "text-show",
              "type": {
                "text": "string"
              },
              "default": "'mdi-show-outline'",
              "description": "Texte du bouton en mode « show » (défaut : `mdi-show-outline`).",
              "fieldName": "textShow"
            },
            {
              "name": "text-hide",
              "type": {
                "text": "string"
              },
              "default": "'mdi-hide-outline'",
              "description": "Texte du bouton en mode « hide » (défaut : `mdi-hide-outline`).",
              "fieldName": "textHide"
            },
            {
              "name": "tooltip-show",
              "default": "SHOW",
              "description": "Infobulle en mode « show » (défaut : `Montrer`).",
              "resolveInitializer": {
                "module": "src/elements/toggle/toggle.ts"
              },
              "fieldName": "tooltipShow"
            },
            {
              "name": "tooltip-hide",
              "default": "HIDE",
              "description": "Infobulle en mode « hide » (défaut : `Cacher`).",
              "resolveInitializer": {
                "module": "src/elements/toggle/toggle.ts"
              },
              "fieldName": "tooltipHide"
            },
            {
              "name": "destructuring",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Modifier la mise en page (défaut : `false`).",
              "fieldName": "destructuring"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseIt",
            "module": "/src/elements/base/base.js"
          },
          "tagName": "toggle-it",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleIt",
          "declaration": {
            "name": "ToggleIt",
            "module": "src/elements/toggle/toggle.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "toggle-it",
          "declaration": {
            "name": "ToggleIt",
            "module": "src/elements/toggle/toggle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/tools/tools.css.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/tools/tools.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/tools/tools.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ToolsIt",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "SlMenu"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "menuItemAll",
              "type": {
                "text": "SlMenuItem"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "containerElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "clockElement",
              "type": {
                "text": "ClockIt"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "themeElement",
              "type": {
                "text": "ThemeIt"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "colorElement",
              "type": {
                "text": "ColorIt"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'small'",
              "description": "Taille du bouton (dafaut : `small`).",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuItems",
              "type": {
                "text": "SlMenuItem[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "handleSelectTool",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "attribute": "lang",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ],
              "description": "Emission d'un événement `CustomEvent` par l'élément.\n\nPar défaut, l'événement se propage dans le DOM (`bubbles: true`);\nil traverse également la frontière du DOM fantôme (_Shadow DOM_, `composed:true`)\net ne peut être empêché de le faire (`cancelable: false`).",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFullscreen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passe en mode plein écran ou sort du mode plein écran.\n\nOn peut utiliser la touche <kbd>Esc</kbd> ou <kbd>F11</kbd> pour sortir du mode plein écran.",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "le message d'alerte"
                },
                {
                  "name": "variant",
                  "default": "'primary'",
                  "type": {
                    "text": "string"
                  },
                  "description": "apparence du message",
                  "optional": true
                },
                {
                  "name": "icon",
                  "default": "'mdi-information-variant-circle-outline'",
                  "type": {
                    "text": "string"
                  },
                  "description": "icône associée au message.",
                  "optional": true
                },
                {
                  "name": "duration",
                  "default": "'3000'",
                  "type": {
                    "text": "string"
                  },
                  "description": "durée d'affichage de l'alerte en millisecondes.",
                  "optional": true
                }
              ],
              "description": "Crée une alerte qui affiche le message associé pendant une durée donnée.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'small'",
              "description": "Taille du bouton (dafaut : `small`).",
              "fieldName": "size"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "fieldName": "lang",
              "inheritedFrom": {
                "name": "BaseIt",
                "module": "src/elements/base/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseIt",
            "module": "/src/elements/base/base.js"
          },
          "tagName": "tools-it",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToolsIt",
          "declaration": {
            "name": "ToolsIt",
            "module": "src/elements/tools/tools.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "tools-it",
          "declaration": {
            "name": "ToolsIt",
            "module": "src/elements/tools/tools.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/code/templates/template-html.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultOptions",
          "type": {
            "text": "object"
          },
          "default": "{\n  head: \"\",\n  header: \"\",\n  footer: \"\",\n  lang: navigator.language,\n  theme: \"dark\",\n  title: \"IFrame\"\n}"
        },
        {
          "kind": "function",
          "name": "templateHTML",
          "parameters": [
            {
              "name": "main"
            },
            {
              "name": "options",
              "default": "{}"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultOptions",
          "declaration": {
            "name": "defaultOptions",
            "module": "dist/elements/code/templates/template-html.js"
          }
        },
        {
          "kind": "js",
          "name": "templateHTML",
          "declaration": {
            "name": "templateHTML",
            "module": "dist/elements/code/templates/template-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/code/languages/languages.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "languages",
          "declaration": {
            "name": "languages",
            "module": "dist/elements/code/languages/languages.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/frame/templates/template-html.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "defaultOptions",
          "declaration": {
            "name": "defaultOptions",
            "module": "dist/elements/frame/templates/template-html.js"
          }
        },
        {
          "kind": "js",
          "name": "templateHTML",
          "declaration": {
            "name": "templateHTML",
            "module": "dist/elements/frame/templates/template-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/code/locales/fr.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "frenchPhrases",
          "declaration": {
            "name": "frenchPhrases",
            "module": "dist/elements/code/locales/fr.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/code/themes/create-theme.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "createTheme",
          "declaration": {
            "name": "createTheme",
            "module": "dist/elements/code/themes/create-theme.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/code/themes/dark.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "darkTheme",
          "declaration": {
            "name": "darkTheme",
            "module": "dist/elements/code/themes/dark.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/elements/code/themes/light.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "lightTheme",
          "declaration": {
            "name": "lightTheme",
            "module": "dist/elements/code/themes/light.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/code/locales/fr.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "frenchPhrases",
          "declaration": {
            "name": "frenchPhrases",
            "module": "cdn/elements/code/locales/fr.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/code/templates/template-html.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultOptions",
          "type": {
            "text": "object"
          },
          "default": "{\n  head: \"\",\n  header: \"\",\n  footer: \"\",\n  lang: navigator.language,\n  theme: \"dark\",\n  title: \"IFrame\"\n}"
        },
        {
          "kind": "function",
          "name": "templateHTML",
          "parameters": [
            {
              "name": "main"
            },
            {
              "name": "options",
              "default": "{}"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultOptions",
          "declaration": {
            "name": "defaultOptions",
            "module": "cdn/elements/code/templates/template-html.js"
          }
        },
        {
          "kind": "js",
          "name": "templateHTML",
          "declaration": {
            "name": "templateHTML",
            "module": "cdn/elements/code/templates/template-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/code/themes/create-theme.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "createTheme",
          "declaration": {
            "name": "createTheme",
            "module": "cdn/elements/code/themes/create-theme.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/code/themes/dark.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "darkTheme",
          "declaration": {
            "name": "darkTheme",
            "module": "cdn/elements/code/themes/dark.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/code/themes/light.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "lightTheme",
          "declaration": {
            "name": "lightTheme",
            "module": "cdn/elements/code/themes/light.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/frame/templates/template-html.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "defaultOptions",
          "declaration": {
            "name": "defaultOptions",
            "module": "cdn/elements/frame/templates/template-html.js"
          }
        },
        {
          "kind": "js",
          "name": "templateHTML",
          "declaration": {
            "name": "templateHTML",
            "module": "cdn/elements/frame/templates/template-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/code/languages/languages.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "languages",
          "type": {
            "text": "{ [name: string]: LANGUAGE }"
          },
          "default": "{\n  asciidoc: {\n    name: 'asciidoc',\n    cm: StreamLanguage.define(cmAsciidoc),\n    logo: `${icons['language-asciidoctor']}`,\n    extension: 'adoc',\n    mime: 'text/asciidoc',\n    helpUrl: 'https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/'\n  },\n  css: {\n    name: 'css',\n    cm: cmCss(),\n    logo: `${icons['mdi-language-css3']}`,\n    extension: 'css',\n    mime: 'text/css',\n    helpUrl: 'https://developer.mozilla.org/fr/docs/Web/CSS/Reference'\n  },\n  html: {\n    name: 'html',\n    cm: cmHtml(),\n    logo: `${icons['mdi-language-html5']}`,\n    extension: 'html',\n    mime: 'text/html',\n    helpUrl: 'https://developer.mozilla.org/fr/docs/Web/HTML/Reference'\n  },\n  javascript: {\n    name: 'javascript',\n    cm: cmJavascript(),\n    logo: `${icons['mdi-language-javascript']}`,\n    extension: 'js',\n    mime: 'text/javascript',\n    helpUrl: 'https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference'\n  },\n  json: {\n    name: 'json',\n    cm: cmJson(),\n    logo: `${icons['mdi-code-json']}`,\n    extension: 'json',\n    mime: 'application/json',\n    helpUrl: 'https://www.json.org/json-fr.html'\n  },\n  markdown: {\n    name: 'markdown',\n    cm: cmMarkdown(),\n    logo: `${icons['mdi-language-markdown']}`,\n    extension: 'md',\n    mime: 'text/markdown',\n    helpUrl: 'https://www.markdownguide.org/cheat-sheet/'\n  },\n  prolog: {\n    name: 'prolog',\n    cm: cmProlog(),\n    logo: `${icons['language-prolog']}`,\n    extension: 'pl',\n    mime: 'text/x-prolog',\n    helpUrl: 'http://tau-prolog.org/documentation#prolog'\n  },\n  python: {\n    name: 'python',\n    cm: cmPython(),\n    logo: `${icons['mdi-language-python']}`,\n    extension: 'py',\n    mime: 'text/x-python',\n    helpUrl: 'https://www.pythoncheatsheet.org/cheatsheet/dictionaries'\n  },\n  sql: {\n    name: 'sql',\n    cm: cmSql(),\n    logo: `${icons['mdi-database']}`,\n    extension: 'sql',\n    mime: 'application/sql',\n    helpUrl: 'https://sql.sh'\n  },\n  text: {\n    name: 'text',\n    cm: [],\n    logo: `${icons['mdi-format-text']}`,\n    extension: 'txt',\n    mime: 'text/plain',\n    helpUrl: ''\n  },\n  typescript: {\n    name: 'typescript',\n    cm: cmJavascript({ typescript: true }),\n    logo: `${icons['mdi-language-typescript']}`,\n    extension: 'ts',\n    mime: 'video/mp2t', // !\n    helpUrl: 'https://www.typescriptlang.org/cheatsheets'\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "languages",
          "declaration": {
            "name": "languages",
            "module": "src/elements/code/languages/languages.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/code/locales/fr.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "frenchPhrases",
          "type": {
            "text": "object"
          },
          "default": "{\n  // @codemirror/view\n  'Control character': 'caractère de contrôle',\n  // @codemirror/commands\n  'Selection deleted': 'sélection supprimée',\n  // @codemirror/language\n  'Folded lines': 'lignes pliées',\n  'Unfolded lines': 'lignes dépliées',\n  to: 'à',\n  'folded code': 'code plié',\n  unfold: 'déplier',\n  'Fold line': 'plier la ligne',\n  'Unfold line': 'déplier la ligne',\n  // @codemirror/search\n  'Go to line': 'atteindre la ligne (ligne:colonne) ',\n  go: 'ok',\n  Find: 'chercher',\n  Replace: 'remplacer',\n  next: 'suivant',\n  previous: 'précédent',\n  all: 'tout',\n  'match case': 'respecter la casse',\n  'by word': 'mot entier',\n  regexp: 'expression régulière',\n  replace: 'remplacer',\n  'replace all': 'remplacer tout',\n  close: 'fermer',\n  'current match': 'correspondance courante',\n  'replaced $ matches': '$ correspondances remplacées',\n  'replaced match on line $': 'correspondance remplacée à la ligne $',\n  'on line': 'en ligne',\n  // @codemirror/autocomplete\n  Completions: 'complétions',\n  // @codemirror/lint\n  Diagnostics: 'diagnostics',\n  'No diagnostics': 'pas de diagnostic'\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "frenchPhrases",
          "declaration": {
            "name": "frenchPhrases",
            "module": "src/elements/code/locales/fr.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "cdn/elements/code/languages/languages.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "languages",
          "declaration": {
            "name": "languages",
            "module": "cdn/elements/code/languages/languages.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/code/templates/template-html.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultOptions",
          "type": {
            "text": "OptionsTemplate"
          },
          "default": "{\n  head: '',\n  header: '',\n  footer: '',\n  lang: navigator.language,\n  theme: 'dark',\n  title: 'IFrame'\n}"
        },
        {
          "kind": "function",
          "name": "templateHTML",
          "parameters": [
            {
              "name": "main",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "OptionsTemplate"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultOptions",
          "declaration": {
            "name": "defaultOptions",
            "module": "src/elements/code/templates/template-html.ts"
          }
        },
        {
          "kind": "js",
          "name": "templateHTML",
          "declaration": {
            "name": "templateHTML",
            "module": "src/elements/code/templates/template-html.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/code/themes/create-theme.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createTheme",
          "return": {
            "type": {
              "text": "Extension"
            }
          },
          "parameters": [
            {
              "name": "{ variant, settings, styles }",
              "type": {
                "text": "Options"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createTheme",
          "declaration": {
            "name": "createTheme",
            "module": "src/elements/code/themes/create-theme.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/code/themes/dark.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "darkTheme"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "darkTheme",
          "declaration": {
            "name": "darkTheme",
            "module": "src/elements/code/themes/dark.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/code/themes/light.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "lightTheme"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "lightTheme",
          "declaration": {
            "name": "lightTheme",
            "module": "src/elements/code/themes/light.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/frame/templates/template-html.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultOptions",
          "type": {
            "text": "OptionsTemplate"
          },
          "default": "{\n  head: '',\n  style: '',\n  header: '',\n  main: '',\n  footer: '',\n  lang: navigator.language,\n  theme: 'light',\n  title: 'IFrame'\n}"
        },
        {
          "kind": "function",
          "name": "templateHTML",
          "parameters": [
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "OptionsTemplate"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultOptions",
          "declaration": {
            "name": "defaultOptions",
            "module": "src/elements/frame/templates/template-html.ts"
          }
        },
        {
          "kind": "js",
          "name": "templateHTML",
          "declaration": {
            "name": "templateHTML",
            "module": "src/elements/frame/templates/template-html.ts"
          }
        }
      ]
    }
  ]
}
